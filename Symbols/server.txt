 B AIExtendedSaveHeader_t_DataDescInit::g_DataMapHolder
 B AIN_NO_DEST
 B AIScheduleState_t_DataDescInit::g_DataMapHolder
 B AISquadEnemyInfo_t_DataDescInit::g_DataMapHolder
 B AI_EnemyInfo_t_DataDescInit::g_DataMapHolder
 B AI_FollowNavInfo_t_DataDescInit::g_DataMapHolder
 B AI_FollowParams_t_DataDescInit::g_DataMapHolder
 B AI_FreePassParams_t_DataDescInit::g_DataMapHolder
 B AI_LeadArgs_t_DataDescInit::g_DataMapHolder
 B AI_ResponseParams_DataDescInit::g_DataMapHolder
 B AI_Response_DataDescInit::g_DataMapHolder
 B AI_StandoffParams_t_DataDescInit::g_DataMapHolder
 B AI_Waypoint_t::s_Allocator
 B AI_Waypoint_t_DataDescInit::g_DataMapHolder
 B CAISound_DataDescInit::g_DataMapHolder
 B CAI_AccelDecay_DataDescInit::g_DataMapHolder
 B CAI_AllySpeechManager::gm_pSpeechManager
 B CAI_AllySpeechManager_DataDescInit::g_DataMapHolder
 B CAI_AssaultBehavior::gm_ClassScheduleIdSpace
 B CAI_AssaultBehavior_DataDescInit::g_DataMapHolder
 B CAI_AssaultGoal_DataDescInit::g_DataMapHolder
 B CAI_BaseActor_DataDescInit::g_DataMapHolder
 B CAI_BaseFlyingBot_DataDescInit::g_DataMapHolder
 B CAI_BaseNPC::gm_ClassScheduleIdSpace
 B CAI_BaseNPC::gm_SchedulingSymbols
 B CAI_BaseNPC::gm_SquadSlotIdSpace
 B CAI_BaseNPC::gm_SquadSlotNamespace
 B CAI_BaseNPC::gm_flTimeLastSpawn
 B CAI_BaseNPC::gm_iNextThinkRebalanceTick
 B CAI_BaseNPC::gm_iszPlayerSquad
 B CAI_BaseNPC::gm_nSpawnedThisFrame
 B CAI_BaseNPC::m_AnyUpdateEnemyPosTimer
 B CAI_BaseNPC::m_iNumActivities
 B CAI_BaseNPC::m_nDebugBits
 B CAI_BaseNPC::m_pActivitySR
 B CAI_BaseNPC::m_pDebugNPC
 B CAI_BaseNPC::m_pEventSR
 B CAI_BaseNPC_DataDescInit::g_DataMapHolder
 B CAI_BasePhysicsFlyingBot_DataDescInit::g_DataMapHolder
 B CAI_BattleLine_DataDescInit::g_DataMapHolder
 B CAI_BehaviorBase_DataDescInit::g_DataMapHolder
 B CAI_BlendedMotor_DataDescInit::g_DataMapHolder
 B CAI_ChangeHintGroup_DataDescInit::g_DataMapHolder
 B CAI_ChangeTarget_DataDescInit::g_DataMapHolder
 B CAI_DynamicLink::gm_bInitialized
 B CAI_DynamicLink::m_pAllDynamicLinks
 B CAI_DynamicLinkController_DataDescInit::g_DataMapHolder
 B CAI_DynamicLink_DataDescInit::g_DataMapHolder
 B CAI_Enemies_DataDescInit::g_DataMapHolder
 B CAI_Expresser_DataDescInit::g_DataMapHolder
 B CAI_FearBehavior::gm_ClassScheduleIdSpace
 B CAI_FearBehavior_DataDescInit::g_DataMapHolder
 B CAI_FollowBehavior::gm_ClassScheduleIdSpace
 B CAI_FollowBehavior_DataDescInit::g_DataMapHolder
 B CAI_FollowGoal_DataDescInit::g_DataMapHolder
 B CAI_FreePass_DataDescInit::g_DataMapHolder
 B CAI_GoalEntity_DataDescInit::g_DataMapHolder
 B CAI_HintManager::gm_AllHints
 B CAI_HintManager::gm_TypedHints
 B CAI_HintManager::gm_nFoundHintIndex
 B CAI_HintManager::gm_pLastFoundHints
 B CAI_Hint_DataDescInit::g_DataMapHolder
 B CAI_InterestTarget_t_DataDescInit::g_DataMapHolder
 B CAI_LeadBehavior::gm_ClassScheduleIdSpace
 B CAI_LeadBehavior_DataDescInit::g_DataMapHolder
 B CAI_LeadGoal_DataDescInit::g_DataMapHolder
 B CAI_LeadGoal_Weapon_DataDescInit::g_DataMapHolder
 B CAI_LocalNavigator_DataDescInit::g_DataMapHolder
 B CAI_LookTarget_DataDescInit::g_DataMapHolder
 B CAI_Motor_DataDescInit::g_DataMapHolder
 B CAI_MoveAndShootOverlay_DataDescInit::g_DataMapHolder
 B CAI_MoveMonitor_DataDescInit::g_DataMapHolder
 B CAI_MoveProbe_DataDescInit::g_DataMapHolder
 B CAI_Navigator_DataDescInit::g_DataMapHolder
 B CAI_NetworkEditTools::m_bAirEditMode
 B CAI_NetworkEditTools::m_bLinkEditMode
 B CAI_NetworkEditTools::m_iHullDrawNum
 B CAI_NetworkEditTools::m_pLastDeletedNode
 B CAI_NetworkManager::gm_fNetworksLoaded
 B CAI_NetworkManager_DataDescInit::g_DataMapHolder
 B CAI_Path::gm_InvalidWaypoint
 B CAI_Path_DataDescInit::g_DataMapHolder
 B CAI_Pathfinder_DataDescInit::g_DataMapHolder
 B CAI_PlayerAlly::gm_ClassScheduleIdSpace
 B CAI_PlayerAlly::gm_SquadSlotIdSpace
 B CAI_PlayerAlly_DataDescInit::g_DataMapHolder
 B CAI_ProxTester_DataDescInit::g_DataMapHolder
 B CAI_RadialLinkController_DataDescInit::g_DataMapHolder
 B CAI_RappelBehavior::gm_ClassScheduleIdSpace
 B CAI_RappelBehavior_DataDescInit::g_DataMapHolder
 B CAI_Relationship_DataDescInit::g_DataMapHolder
 B CAI_ScriptConditionsElement_DataDescInit::g_DataMapHolder
 B CAI_ScriptConditions_DataDescInit::g_DataMapHolder
 B CAI_ScriptedSchedule_DataDescInit::g_DataMapHolder
 B CAI_ScriptedSentence_DataDescInit::g_DataMapHolder
 B CAI_ScriptedSequence_DataDescInit::g_DataMapHolder
 B CAI_Senses_DataDescInit::g_DataMapHolder
 B CAI_SentenceBase_DataDescInit::g_DataMapHolder
 B CAI_ShotRegulator_DataDescInit::g_DataMapHolder
 B CAI_SpeechFilter_DataDescInit::g_DataMapHolder
 B CAI_Squad_DataDescInit::g_DataMapHolder
 B CAI_StandoffBehavior::gm_ClassScheduleIdSpace
 B CAI_StandoffBehavior_DataDescInit::g_DataMapHolder
 B CAI_StandoffGoal_DataDescInit::g_DataMapHolder
 B CAI_TacticalServices_DataDescInit::g_DataMapHolder
 B CAI_TestHull::pTestHull
 B CAI_TrackPather_DataDescInit::g_DataMapHolder
 B CAchievementZone_DataDescInit::g_DataMapHolder
 B CAmbientGeneric_DataDescInit::g_DataMapHolder
 B CAnimationLayer_DataDescInit::g_DataMapHolder
 B CAreaPortal_DataDescInit::g_DataMapHolder
 B CArenaLogic_DataDescInit::g_DataMapHolder
 B CAssaultPoint_DataDescInit::g_DataMapHolder
 B CAttributeContainerPlayer_DataDescInit::g_DataMapHolder
 B CAttributeContainer_DataDescInit::g_DataMapHolder
 B CAttributeLineItemLootList::s_pAttrDef_RandomDropLineItemFooterDesc
 B CAttributeLineItemLootList::s_pAttrDef_RandomDropLineItems
 B CAttributeList_DataDescInit::g_DataMapHolder
 B CAttributeManager_DataDescInit::g_DataMapHolder
 B CAttribute_DynamicRecipeComponent::_default_attributes_string_
 B CAttribute_DynamicRecipeComponent::default_instance_
 B CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT::_default_attributes_string_
 B CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT::default_instance_
 B CAttribute_ItemSlotCriteria::_default_tags_
 B CAttribute_ItemSlotCriteria::default_instance_
 B CAttribute_String::_default_value_
 B CAttribute_String::default_instance_
 B CAttribute_WorldItemPlacement::default_instance_
 B CBGSDriver
 B CBaseAchievement_DataDescInit::g_DataMapHolder
 B CBaseAnimatingOverlay_DataDescInit::g_DataMapHolder
 B CBaseAnimating_DataDescInit::g_DataMapHolder
 B CBaseAttributableItem_DataDescInit::g_DataMapHolder
 B CBaseButton_DataDescInit::g_DataMapHolder
 B CBaseCombatCharacter::m_DefaultRelationship
 B CBaseCombatCharacter::m_lastInteraction
 B CBaseCombatCharacter_DataDescInit::g_DataMapHolder
 B CBaseCombatWeapon_DataDescInit::g_DataMapHolder
 B CBaseDMStart_DataDescInit::g_DataMapHolder
 B CBaseDoor_DataDescInit::g_DataMapHolder
 B CBaseEntity::m_bAllowPrecache
 B CBaseEntity::m_bDebugPause
 B CBaseEntity::m_bInDebugSelect
 B CBaseEntity::m_pPredictionPlayer
 B CBaseEntity::sm_bDisableTouchFuncs
 B CBaseEntityOutput_DataDescInit::g_DataMapHolder
 B CBaseEntity_DataDescInit::g_DataMapHolder
 B CBaseFilter_DataDescInit::g_DataMapHolder
 B CBaseFire_DataDescInit::g_DataMapHolder
 B CBaseFlex_DataDescInit::g_DataMapHolder
 B CBaseGrenadeConcussion::m_nTrailSprite
 B CBaseGrenadeConcussion_DataDescInit::g_DataMapHolder
 B CBaseGrenade_DataDescInit::g_DataMapHolder
 B CBaseMoveBehavior_DataDescInit::g_DataMapHolder
 B CBaseNPCMaker_DataDescInit::g_DataMapHolder
 B CBaseObject_DataDescInit::g_DataMapHolder
 B CBasePlatTrain_DataDescInit::g_DataMapHolder
 B CBasePlayer::s_PlayerEdict
 B CBasePlayer_DataDescInit::g_DataMapHolder
 B CBasePropDoor_DataDescInit::g_DataMapHolder
 B CBaseServerVehicle_DataDescInit::g_DataMapHolder
 B CBaseTFBotHintEntity_DataDescInit::g_DataMapHolder
 B CBaseTeamObjectiveResource_DataDescInit::g_DataMapHolder
 B CBaseTempEntity::s_pTempEntities
 B CBaseToggle_DataDescInit::g_DataMapHolder
 B CBaseTrigger_DataDescInit::g_DataMapHolder
 B CBaseVPhysicsTrigger_DataDescInit::g_DataMapHolder
 B CBaseViewModel_DataDescInit::g_DataMapHolder
 B CBeam_DataDescInit::g_DataMapHolder
 B CBlood_DataDescInit::g_DataMapHolder
 B CBoneFollowerManager_DataDescInit::g_DataMapHolder
 B CBoneFollower_DataDescInit::g_DataMapHolder
 B CBonusDuckPickup_DataDescInit::g_DataMapHolder
 B CBonusPack_DataDescInit::g_DataMapHolder
 B CBreakableProp_DataDescInit::g_DataMapHolder
 B CBreakableSurface_DataDescInit::g_DataMapHolder
 B CBreakable_DataDescInit::g_DataMapHolder
 B CBubbling_DataDescInit::g_DataMapHolder
 B CCPTimerLogic_DataDescInit::g_DataMapHolder
 B CCaptureFlag_DataDescInit::g_DataMapHolder
 B CCaptureZone_DataDescInit::g_DataMapHolder
 B CChangeLevel_DataDescInit::g_DataMapHolder
 B CChoreoScene::s_bEditingDisabled
 B CCollisionProperty_DataDescInit::g_DataMapHolder
 B CColorCorrectionVolume_DataDescInit::g_DataMapHolder
 B CColorCorrection_DataDescInit::g_DataMapHolder
 B CCommentaryAuto_DataDescInit::g_DataMapHolder
 B CCommentarySystem_DataDescInit::g_DataMapHolder
 B CCompetitiveLogic_DataDescInit::g_DataMapHolder
 B CConstantForceController_DataDescInit::g_DataMapHolder
 B CConstraintAnchor_DataDescInit::g_DataMapHolder
 B CCopyRecipientFilter_DataDescInit::g_DataMapHolder
 B CCredits_DataDescInit::g_DataMapHolder
 B CDebugHistory_DataDescInit::g_DataMapHolder
 B CDecal_DataDescInit::g_DataMapHolder
 B CDmxAttribute::s_AttributeNameSymbols
 B CDmxElement::s_TypeSymbols
 B CDmxKeyValues2ErrorStack::m_ErrorSymbolTable
 B CDynamicLight_DataDescInit::g_DataMapHolder
 B CDynamicProp_DataDescInit::g_DataMapHolder
 B CEconEntity_DataDescInit::g_DataMapHolder
 B CEconItemPreviewDataBlock::default_instance_
 B CEconItemView_DataDescInit::g_DataMapHolder
 B CEconWearable_DataDescInit::g_DataMapHolder
 B CEmbers_DataDescInit::g_DataMapHolder
 B CEntityClassList<CPhysicsNPCSolver>::m_pClassList
 B CEntityClassList<CPointCamera>::m_pClassList
 B CEntityClassList<CSkyCamera>::m_pClassList
 B CEntityDissolve_DataDescInit::g_DataMapHolder
 B CEntityFlame_DataDescInit::g_DataMapHolder
 B CEntityParticleTrail_DataDescInit::g_DataMapHolder
 B CEntitySpawnManager_DataDescInit::g_DataMapHolder
 B CEntitySpawnPoint_DataDescInit::g_DataMapHolder
 B CEnvBeam_DataDescInit::g_DataMapHolder
 B CEnvBeverage_DataDescInit::g_DataMapHolder
 B CEnvDustPuff_DataDescInit::g_DataMapHolder
 B CEnvEffectsScript_DataDescInit::g_DataMapHolder
 B CEnvEntityMaker_DataDescInit::g_DataMapHolder
 B CEnvExplosion_DataDescInit::g_DataMapHolder
 B CEnvFade_DataDescInit::g_DataMapHolder
 B CEnvFireSensor_DataDescInit::g_DataMapHolder
 B CEnvFireSource_DataDescInit::g_DataMapHolder
 B CEnvFunnel_DataDescInit::g_DataMapHolder
 B CEnvGlobal_DataDescInit::g_DataMapHolder
 B CEnvGunfire_DataDescInit::g_DataMapHolder
 B CEnvHudHint_DataDescInit::g_DataMapHolder
 B CEnvLaser_DataDescInit::g_DataMapHolder
 B CEnvMicrophone_DataDescInit::g_DataMapHolder
 B CEnvMuzzleFlash_DataDescInit::g_DataMapHolder
 B CEnvParticleScript_DataDescInit::g_DataMapHolder
 B CEnvPlayerSurfaceTrigger_DataDescInit::g_DataMapHolder
 B CEnvProjectedTexture_DataDescInit::g_DataMapHolder
 B CEnvQuadraticBeam_DataDescInit::g_DataMapHolder
 B CEnvScreenEffect_DataDescInit::g_DataMapHolder
 B CEnvScreenOverlay_DataDescInit::g_DataMapHolder
 B CEnvShake_DataDescInit::g_DataMapHolder
 B CEnvShooter_DataDescInit::g_DataMapHolder
 B CEnvSoundscapeProxy_DataDescInit::g_DataMapHolder
 B CEnvSoundscapeTriggerable_DataDescInit::g_DataMapHolder
 B CEnvSoundscape_DataDescInit::g_DataMapHolder
 B CEnvSpark_DataDescInit::g_DataMapHolder
 B CEnvSplash_DataDescInit::g_DataMapHolder
 B CEnvTonemapController_DataDescInit::g_DataMapHolder
 B CEnvTracer_DataDescInit::g_DataMapHolder
 B CEnvViewPunch_DataDescInit::g_DataMapHolder
 B CEnvWind_DataDescInit::g_DataMapHolder
 B CEnvZoom_DataDescInit::g_DataMapHolder
 B CEventAction::s_iNextIDStamp
 B CEventAction_DataDescInit::g_DataMapHolder
 B CEventQueue_DataDescInit::g_DataMapHolder
 B CExtraMapEntity_DataDescInit::g_DataMapHolder
 B CFailableAchievement_DataDescInit::g_DataMapHolder
 B CFilterClass_DataDescInit::g_DataMapHolder
 B CFilterEnemy_DataDescInit::g_DataMapHolder
 B CFilterMassGreater_DataDescInit::g_DataMapHolder
 B CFilterMultiple_DataDescInit::g_DataMapHolder
 B CFilterName_DataDescInit::g_DataMapHolder
 B CFilterTFBotHasTag_DataDescInit::g_DataMapHolder
 B CFilterTFCanCap_DataDescInit::g_DataMapHolder
 B CFilterTFClass_DataDescInit::g_DataMapHolder
 B CFilterTFCondition_DataDescInit::g_DataMapHolder
 B CFilterTFTeam_DataDescInit::g_DataMapHolder
 B CFireSmoke_DataDescInit::g_DataMapHolder
 B CFireTrail_DataDescInit::g_DataMapHolder
 B CFire_DataDescInit::g_DataMapHolder
 B CFishPool_DataDescInit::g_DataMapHolder
 B CFish_DataDescInit::g_DataMapHolder
 B CFlagDetectionZone_DataDescInit::g_DataMapHolder
 B CFlexCycler_DataDescInit::g_DataMapHolder
 B CFlextalkActor_DataDescInit::g_DataMapHolder
 B CFogController_DataDescInit::g_DataMapHolder
 B CFourWheelServerVehicle_DataDescInit::g_DataMapHolder
 B CFourWheelVehiclePhysics_DataDescInit::g_DataMapHolder
 B CFuncAreaPortalBase_DataDescInit::g_DataMapHolder
 B CFuncAreaPortalWindow_DataDescInit::g_DataMapHolder
 B CFuncBrush_DataDescInit::g_DataMapHolder
 B CFuncConveyor_DataDescInit::g_DataMapHolder
 B CFuncFlagAlertZone_DataDescInit::g_DataMapHolder
 B CFuncForceField_DataDescInit::g_DataMapHolder
 B CFuncLadder::s_Ladders
 B CFuncLadder_DataDescInit::g_DataMapHolder
 B CFuncMonitor_DataDescInit::g_DataMapHolder
 B CFuncMoveLinear_DataDescInit::g_DataMapHolder
 B CFuncNavBlocker::gm_NavBlockers
 B CFuncNavBlocker_DataDescInit::g_DataMapHolder
 B CFuncNavCost::gm_dirtyTimer
 B CFuncNavCost::gm_masterCostVector
 B CFuncNavCost_DataDescInit::g_DataMapHolder
 B CFuncNavObstruction_DataDescInit::g_DataMapHolder
 B CFuncNavPrerequisite_DataDescInit::g_DataMapHolder
 B CFuncNoBuild_DataDescInit::g_DataMapHolder
 B CFuncOccluder_DataDescInit::g_DataMapHolder
 B CFuncPasstimeGoal_DataDescInit::g_DataMapHolder
 B CFuncPasstimeGoalieZone_DataDescInit::g_DataMapHolder
 B CFuncPasstimeNoBallZone_DataDescInit::g_DataMapHolder
 B CFuncPlatRot_DataDescInit::g_DataMapHolder
 B CFuncPlat_DataDescInit::g_DataMapHolder
 B CFuncReflectiveGlass_DataDescInit::g_DataMapHolder
 B CFuncRespawnFlagZone_DataDescInit::g_DataMapHolder
 B CFuncRespawnRoomVisualizer_DataDescInit::g_DataMapHolder
 B CFuncRespawnRoom_DataDescInit::g_DataMapHolder
 B CFuncRotating_DataDescInit::g_DataMapHolder
 B CFuncSmokeVolume_DataDescInit::g_DataMapHolder
 B CFuncSuggestedBuild_DataDescInit::g_DataMapHolder
 B CFuncTankTrain_DataDescInit::g_DataMapHolder
 B CFuncTrackAuto_DataDescInit::g_DataMapHolder
 B CFuncTrackChange_DataDescInit::g_DataMapHolder
 B CFuncTrackTrain_DataDescInit::g_DataMapHolder
 B CFuncTrainControls_DataDescInit::g_DataMapHolder
 B CFuncTrain_DataDescInit::g_DataMapHolder
 B CFuncVPhysicsClip_DataDescInit::g_DataMapHolder
 B CFuncVehicleClip_DataDescInit::g_DataMapHolder
 B CFuncWallToggle_DataDescInit::g_DataMapHolder
 B CFuncWall_DataDescInit::g_DataMapHolder
 B CFunc_Dust_DataDescInit::g_DataMapHolder
 B CFunc_LOD_DataDescInit::g_DataMapHolder
 B CGCMsgGC_PlayerDuckLeaderboard_IndividualUpdate::_default_score_id_
 B CGCMsgGC_PlayerDuckLeaderboard_IndividualUpdate::default_instance_
 B CGCMsgGC_War_GlobalStatsResponse::default_instance_
 B CGCMsgGC_War_GlobalStatsResponse_SideScore::default_instance_
 B CGCMsgGC_War_IndividualUpdate::default_instance_
 B CGCMsgGC_War_JoinWar::default_instance_
 B CGCMsgGC_War_RequestGlobalStats::default_instance_
 B CGCMsgGetIPLocation::default_instance_
 B CGCMsgGetIPLocationResponse::default_instance_
 B CGCMsgGetSystemStats::default_instance_
 B CGCMsgGetSystemStatsResponse::_default_stats_kv_
 B CGCMsgGetSystemStatsResponse::default_instance_
 B CGCMsgMemCachedDelete::default_instance_
 B CGCMsgMemCachedGet::default_instance_
 B CGCMsgMemCachedGetResponse::default_instance_
 B CGCMsgMemCachedGetResponse_ValueTag::_default_value_
 B CGCMsgMemCachedGetResponse_ValueTag::default_instance_
 B CGCMsgMemCachedSet::default_instance_
 B CGCMsgMemCachedSet_KeyPair::_default_name_
 B CGCMsgMemCachedSet_KeyPair::_default_value_
 B CGCMsgMemCachedSet_KeyPair::default_instance_
 B CGCMsgMemCachedStats::default_instance_
 B CGCMsgMemCachedStatsResponse::default_instance_
 B CGCMsgSQLStats::default_instance_
 B CGCMsgSQLStatsResponse::default_instance_
 B CGCMsgSystemStatsSchema::_default_schema_kv_
 B CGCMsgSystemStatsSchema::default_instance_
 B CGCMsgTFHelloResponse::default_instance_
 B CGCMsgTFSync::_default_version_checksum_
 B CGCMsgTFSync::_default_version_checksum_ex_
 B CGCMsgTFSync::default_instance_
 B CGCMsgTFSyncEx::_default_version_checksum_
 B CGCMsgTFSyncEx::_default_version_checksum_ex_
 B CGCMsgTFSyncEx::default_instance_
 B CGCMsg_WorldItemPlacement_Update::_default_attrib_name_
 B CGCMsg_WorldItemPlacement_Update::default_instance_
 B CGCStorePurchaseInit_LineItem::default_instance_
 B CGCSystemMsg_GetAccountDetails::default_instance_
 B CGCSystemMsg_GetAccountDetails_Response::_default_account_name_
 B CGCSystemMsg_GetAccountDetails_Response::_default_currency_
 B CGCSystemMsg_GetAccountDetails_Response::_default_persona_name_
 B CGCSystemMsg_GetAccountDetails_Response::default_instance_
 B CGCSystemMsg_GetPurchaseTrust_Request::default_instance_
 B CGCSystemMsg_GetPurchaseTrust_Response::default_instance_
 B CGCToGCMsgMasterAck::_default_machine_name_
 B CGCToGCMsgMasterAck::_default_process_name_
 B CGCToGCMsgMasterAck::default_instance_
 B CGCToGCMsgMasterAck_Response::default_instance_
 B CGCToGCMsgMasterStartupComplete::default_instance_
 B CGCToGCMsgMasterStartupComplete_GCInfo::_default_machine_name_
 B CGCToGCMsgMasterStartupComplete_GCInfo::default_instance_
 B CGCToGCMsgRouted::_default_net_message_
 B CGCToGCMsgRouted::default_instance_
 B CGCToGCMsgRoutedReply::_default_net_message_
 B CGCToGCMsgRoutedReply::default_instance_
 B CGameEnd_DataDescInit::g_DataMapHolder
 B CGameGibManager_DataDescInit::g_DataMapHolder
 B CGamePlayerEquip_DataDescInit::g_DataMapHolder
 B CGamePlayerZone_DataDescInit::g_DataMapHolder
 B CGameRulesProxy::s_pGameRulesProxy
 B CGameRulesRegister::s_pHead
 B CGameScore_DataDescInit::g_DataMapHolder
 B CGameText_DataDescInit::g_DataMapHolder
 B CGameUI_DataDescInit::g_DataMapHolder
 B CGameWeaponManager_DataDescInit::g_DataMapHolder
 B CGenericActor_DataDescInit::g_DataMapHolder
 B CGibShooter_DataDescInit::g_DataMapHolder
 B CGib_DataDescInit::g_DataMapHolder
 B CGlobalState_DataDescInit::g_DataMapHolder
 B CGunTarget_DataDescInit::g_DataMapHolder
 B CHalloweenGiftPickup_DataDescInit::g_DataMapHolder
 B CHalloweenPickup_DataDescInit::g_DataMapHolder
 B CHightower_TeleportVortex_DataDescInit::g_DataMapHolder
 B CIPLocationInfo::_default_city_
 B CIPLocationInfo::_default_country_
 B CIPLocationInfo::_default_state_
 B CIPLocationInfo::default_instance_
 B CInfoCameraLink_DataDescInit::g_DataMapHolder
 B CInfoLightingRelative_DataDescInit::g_DataMapHolder
 B CInfoOverlayAccessor_DataDescInit::g_DataMapHolder
 B CInstancedSceneEntity_DataDescInit::g_DataMapHolder
 B CIntroViewpoint_DataDescInit::g_DataMapHolder
 B CItemSoda_DataDescInit::g_DataMapHolder
 B CItem_DataDescInit::g_DataMapHolder
 B CKeepUpright_DataDescInit::g_DataMapHolder
 B CKothLogic_DataDescInit::g_DataMapHolder
 B CLaserDot_DataDescInit::g_DataMapHolder
 B CLightGlow_DataDescInit::g_DataMapHolder
 B CLight_DataDescInit::g_DataMapHolder
 B CLobbyPendingPlayerReport::default_instance_
 B CLogicActiveAutosave_DataDescInit::g_DataMapHolder
 B CLogicAuto_DataDescInit::g_DataMapHolder
 B CLogicAutosave_DataDescInit::g_DataMapHolder
 B CLogicBranchList_DataDescInit::g_DataMapHolder
 B CLogicBranch_DataDescInit::g_DataMapHolder
 B CLogicCase_DataDescInit::g_DataMapHolder
 B CLogicCollisionPair_DataDescInit::g_DataMapHolder
 B CLogicCompareInteger_DataDescInit::g_DataMapHolder
 B CLogicCompare_DataDescInit::g_DataMapHolder
 B CLogicLineToEntity_DataDescInit::g_DataMapHolder
 B CLogicMannPower_DataDescInit::g_DataMapHolder
 B CLogicMeasureMovement_DataDescInit::g_DataMapHolder
 B CLogicNavigation_DataDescInit::g_DataMapHolder
 B CLogicOnHoliday_DataDescInit::g_DataMapHolder
 B CLogicRelay_DataDescInit::g_DataMapHolder
 B CMannVsMachineLogic_DataDescInit::g_DataMapHolder
 B CMaterialModifyControl_DataDescInit::g_DataMapHolder
 B CMathColorBlend_DataDescInit::g_DataMapHolder
 B CMathCounter_DataDescInit::g_DataMapHolder
 B CMathRemap_DataDescInit::g_DataMapHolder
 B CMessageEntity_DataDescInit::g_DataMapHolder
 B CMessage_DataDescInit::g_DataMapHolder
 B CMomentaryRotButton_DataDescInit::g_DataMapHolder
 B CMonsterResource_DataDescInit::g_DataMapHolder
 B CMotorController_DataDescInit::g_DataMapHolder
 B CMovementSpeedMod_DataDescInit::g_DataMapHolder
 B CMsgAMAddFreeLicense::_default_store_country_code_
 B CMsgAMAddFreeLicense::default_instance_
 B CMsgAMAddFreeLicenseResponse::default_instance_
 B CMsgAMFindAccounts::_default_search_string_
 B CMsgAMFindAccounts::default_instance_
 B CMsgAMFindAccountsResponse::default_instance_
 B CMsgAMGetLicenses::default_instance_
 B CMsgAMGetLicensesResponse::default_instance_
 B CMsgAMGetUserGameStats::default_instance_
 B CMsgAMGetUserGameStatsResponse::default_instance_
 B CMsgAMGetUserGameStatsResponse_Achievement_Blocks::default_instance_
 B CMsgAMGetUserGameStatsResponse_Stats::default_instance_
 B CMsgAMGrantGuestPasses2::default_instance_
 B CMsgAMGrantGuestPasses2Response::default_instance_
 B CMsgAMSendEmail::default_instance_
 B CMsgAMSendEmailResponse::default_instance_
 B CMsgAMSendEmail_PersonaNameReplacementToken::_default_token_name_
 B CMsgAMSendEmail_PersonaNameReplacementToken::default_instance_
 B CMsgAMSendEmail_ReplacementToken::_default_token_name_
 B CMsgAMSendEmail_ReplacementToken::_default_token_value_
 B CMsgAMSendEmail_ReplacementToken::default_instance_
 B CMsgAcceptInvite::default_instance_
 B CMsgAcceptInviteResponse::default_instance_
 B CMsgAcknowledgeXP::default_instance_
 B CMsgAdjustItemEquippedState::default_instance_
 B CMsgApplyAutograph::default_instance_
 B CMsgApplyStrangeCountTransfer::default_instance_
 B CMsgApplyStrangePart::default_instance_
 B CMsgApplyStrangeRestriction::default_instance_
 B CMsgApplyToolToBaseItem::default_instance_
 B CMsgApplyToolToItem::default_instance_
 B CMsgApplyUpgradeCard::default_instance_
 B CMsgCasualMatchmakingSearchCriteria::default_instance_
 B CMsgClientGoodbye::default_instance_
 B CMsgClientHello::default_instance_
 B CMsgClientWelcome::_default_game_data_
 B CMsgClientWelcome::default_instance_
 B CMsgConVarValue::_default_name_
 B CMsgConVarValue::_default_value_
 B CMsgConVarValue::default_instance_
 B CMsgConnectionStatus::default_instance_
 B CMsgConsumableExhausted::default_instance_
 B CMsgCraftCollectionUpgrade::default_instance_
 B CMsgCraftCommonStatClock::default_instance_
 B CMsgCraftHalloweenOffering::default_instance_
 B CMsgCraftingResponse::default_instance_
 B CMsgCreateOrUpdateParty::default_instance_
 B CMsgCreateOrUpdatePartyReply::_default_message_
 B CMsgCreateOrUpdatePartyReply::default_instance_
 B CMsgDeliverGiftResponseGiver::_default_receiver_account_name_
 B CMsgDeliverGiftResponseGiver::default_instance_
 B CMsgDevDebugRollLootRequest::_default_loot_list_name_
 B CMsgDevDebugRollLootRequest::default_instance_
 B CMsgDevNewItemRequest::default_instance_
 B CMsgEconPlayerStrangeCountAdjustment::default_instance_
 B CMsgEconPlayerStrangeCountAdjustment_CStrangeCountAdjustment::default_instance_
 B CMsgExitMatchmaking::default_instance_
 B CMsgFulfillDynamicRecipeComponent::default_instance_
 B CMsgGCBannedWordListRequest::default_instance_
 B CMsgGCCasualCriteriaStatsResponse::default_instance_
 B CMsgGCCasualCriteriaStatsResponse_DataCenterPopulation::_default_name_
 B CMsgGCCasualCriteriaStatsResponse_DataCenterPopulation::default_instance_
 B CMsgGCCheckClanMembership::default_instance_
 B CMsgGCCheckClanMembership_Response::default_instance_
 B CMsgGCCheckFriendship::default_instance_
 B CMsgGCCheckFriendship_Response::default_instance_
 B CMsgGCClientDisplayNotification::_default_notification_body_localization_key_
 B CMsgGCClientDisplayNotification::_default_notification_title_localization_key_
 B CMsgGCClientDisplayNotification::default_instance_
 B CMsgGCClientMarketData::default_instance_
 B CMsgGCClientMarketDataEntry::default_instance_
 B CMsgGCClientMarketDataRequest::default_instance_
 B CMsgGCClientPing::default_instance_
 B CMsgGCCollectItem::default_instance_
 B CMsgGCDataCenterPing_Update::default_instance_
 B CMsgGCDataCenterPing_Update_PingEntry::_default_name_
 B CMsgGCDataCenterPing_Update_PingEntry::default_instance_
 B CMsgGCError::_default_error_text_
 B CMsgGCError::default_instance_
 B CMsgGCGetCommandList::_default_command_prefix_
 B CMsgGCGetCommandList::default_instance_
 B CMsgGCGetCommandListResponse::default_instance_
 B CMsgGCGetEmailTemplate::default_instance_
 B CMsgGCGetEmailTemplateResponse::_default_template__
 B CMsgGCGetEmailTemplateResponse::default_instance_
 B CMsgGCGetPartnerAccountLink::default_instance_
 B CMsgGCGetPartnerAccountLink_Response::default_instance_
 B CMsgGCGetPersonaNames::default_instance_
 B CMsgGCGetPersonaNames_Response::default_instance_
 B CMsgGCGetPersonaNames_Response_PersonaName::_default_persona_name_
 B CMsgGCGetPersonaNames_Response_PersonaName::default_instance_
 B CMsgGCGiftedItems::default_instance_
 B CMsgGCHAccountLockStatusChange::default_instance_
 B CMsgGCHAccountPhoneNumberChange::default_instance_
 B CMsgGCHAccountTradeBanStatusChange::default_instance_
 B CMsgGCHAccountTwoFactorChange::default_instance_
 B CMsgGCHAccountVacStatusChange::default_instance_
 B CMsgGCHUpdateSession::default_instance_
 B CMsgGCHUpdateSession_ExtraField::_default_name_
 B CMsgGCHUpdateSession_ExtraField::_default_value_
 B CMsgGCHUpdateSession_ExtraField::default_instance_
 B CMsgGCHVacVerificationChange::default_instance_
 B CMsgGCIncrementKillCountResponse::default_instance_
 B CMsgGCItemPreviewItemBoughtNotification::default_instance_
 B CMsgGCMatchHistoryLoad::default_instance_
 B CMsgGCMsgMasterSetClientMsgRouting::default_instance_
 B CMsgGCMsgMasterSetClientMsgRouting_Entry::default_instance_
 B CMsgGCMsgMasterSetClientMsgRouting_Response::default_instance_
 B CMsgGCMsgMasterSetDirectory::default_instance_
 B CMsgGCMsgMasterSetDirectory_Response::default_instance_
 B CMsgGCMsgMasterSetDirectory_SubGC::_default_box_
 B CMsgGCMsgMasterSetDirectory_SubGC::_default_command_line_
 B CMsgGCMsgMasterSetDirectory_SubGC::_default_gc_binary_
 B CMsgGCMsgMasterSetDirectory_SubGC::_default_name_
 B CMsgGCMsgMasterSetDirectory_SubGC::default_instance_
 B CMsgGCMsgMasterSetWebAPIRouting::default_instance_
 B CMsgGCMsgMasterSetWebAPIRouting_Entry::_default_interface_name_
 B CMsgGCMsgMasterSetWebAPIRouting_Entry::_default_method_name_
 B CMsgGCMsgMasterSetWebAPIRouting_Entry::default_instance_
 B CMsgGCMsgMasterSetWebAPIRouting_Response::default_instance_
 B CMsgGCMsgSetOptions::default_instance_
 B CMsgGCMsgSetOptions_MessageRange::default_instance_
 B CMsgGCMsgWebAPIJobRequestForwardResponse::default_instance_
 B CMsgGCMultiplexMessage::_default_payload_
 B CMsgGCMultiplexMessage::default_instance_
 B CMsgGCNameItemNotification::_default_item_name_custom_
 B CMsgGCNameItemNotification::default_instance_
 B CMsgGCNotification::_default_notification_string_
 B CMsgGCNotification::default_instance_
 B CMsgGCNotificationQueue::default_instance_
 B CMsgGCQuestComplete_Request::default_instance_
 B CMsgGCQuestCompleted::default_instance_
 B CMsgGCQuestDiscard_Request::default_instance_
 B CMsgGCQuestObjective_PointsChange::default_instance_
 B CMsgGCQuestObjective_Progress::default_instance_
 B CMsgGCQuestObjective_RequestLoanerItems::default_instance_
 B CMsgGCQuestObjective_RequestLoanerResponse::default_instance_
 B CMsgGCRematchRequest::default_instance_
 B CMsgGCRematchRequestResponse::default_instance_
 B CMsgGCRematchRequest_PartyEntry::default_instance_
 B CMsgGCRemoveCustomizationAttributeSimple::default_instance_
 B CMsgGCRemoveStrangePart::default_instance_
 B CMsgGCRemoveUpgradeCard::default_instance_
 B CMsgGCReportAbuse::_default_description_
 B CMsgGCReportAbuse::default_instance_
 B CMsgGCReportAbuseResponse::_default_error_message_
 B CMsgGCReportAbuseResponse::default_instance_
 B CMsgGCRequestCasualCriteriaStats::default_instance_
 B CMsgGCRequestStoreSalesData::default_instance_
 B CMsgGCRequestStoreSalesDataResponse::default_instance_
 B CMsgGCRequestStoreSalesDataResponse_Price::default_instance_
 B CMsgGCRequestStoreSalesDataUpToDateResponse::default_instance_
 B CMsgGCRequestSubGCSessionInfo::default_instance_
 B CMsgGCRequestSubGCSessionInfoResponse::default_instance_
 B CMsgGCResetStrangeScores::default_instance_
 B CMsgGCRoutingInfo::_default_webapi_param_
 B CMsgGCRoutingInfo::default_instance_
 B CMsgGCShowItemsPickedUp::default_instance_
 B CMsgGCShuffleCrateContents::_default_user_code_string_
 B CMsgGCShuffleCrateContents::default_instance_
 B CMsgGCStorePurchaseCancel::default_instance_
 B CMsgGCStorePurchaseCancelResponse::default_instance_
 B CMsgGCStorePurchaseFinalize::default_instance_
 B CMsgGCStorePurchaseFinalizeResponse::default_instance_
 B CMsgGCStorePurchaseInit::_default_country_
 B CMsgGCStorePurchaseInit::default_instance_
 B CMsgGCStorePurchaseInitResponse::default_instance_
 B CMsgGCSurveyRequest::default_instance_
 B CMsgGCSurveyResponse::default_instance_
 B CMsgGCTFSpecificItemBroadcast::_default_user_name_
 B CMsgGCTFSpecificItemBroadcast::default_instance_
 B CMsgGCToGCGetUserServerMembers::default_instance_
 B CMsgGCToGCGetUserServerMembersResponse::default_instance_
 B CMsgGCToGCGetUserSessionServer::default_instance_
 B CMsgGCToGCGetUserSessionServerResponse::default_instance_
 B CMsgGCToGCGrantSelfMadeItemToAccount::default_instance_
 B CMsgGCToGCIncrementRecruitmentLevel::default_instance_
 B CMsgGCToGCPingRequest::default_instance_
 B CMsgGCToGCPingResponse::default_instance_
 B CMsgGCToGCSOCacheSubscribe::default_instance_
 B CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions::default_instance_
 B CMsgGCToGCSOCacheUnsubscribe::default_instance_
 B CMsgGCToGCThankedByNewUser::default_instance_
 B CMsgGCUpdateSubGCSessionInfo::default_instance_
 B CMsgGCUpdateSubGCSessionInfo_CMsgUpdate::default_instance_
 B CMsgGC_Client2GCEconPreviewDataBlockRequest::default_instance_
 B CMsgGC_Client2GCEconPreviewDataBlockResponse::default_instance_
 B CMsgGC_Client_UseServerModificationItem::default_instance_
 B CMsgGC_Client_UseServerModificationItem_Response::default_instance_
 B CMsgGC_DailyCompetitiveStatsRollup::default_instance_
 B CMsgGC_DailyCompetitiveStatsRollup_Response::default_instance_
 B CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry::default_instance_
 B CMsgGC_GameServer_AckPolicy::default_instance_
 B CMsgGC_GameServer_AckPolicyResponse::_default_message_
 B CMsgGC_GameServer_AckPolicyResponse::default_instance_
 B CMsgGC_GameServer_AuthChallenge::_default_challenge_string_
 B CMsgGC_GameServer_AuthChallenge::default_instance_
 B CMsgGC_GameServer_AuthChallengeResponse::_default_hashed_challenge_string_
 B CMsgGC_GameServer_AuthChallengeResponse::default_instance_
 B CMsgGC_GameServer_AuthResult::_default_message_
 B CMsgGC_GameServer_AuthResult::default_instance_
 B CMsgGC_GameServer_CreateIdentity::default_instance_
 B CMsgGC_GameServer_CreateIdentityResponse::_default_game_server_identity_token_
 B CMsgGC_GameServer_CreateIdentityResponse::default_instance_
 B CMsgGC_GameServer_LevelInfo::_default_level_name_
 B CMsgGC_GameServer_LevelInfo::default_instance_
 B CMsgGC_GameServer_List::default_instance_
 B CMsgGC_GameServer_ListResponse::default_instance_
 B CMsgGC_GameServer_ListResponse_GameServerIdentity::_default_game_server_identity_token_
 B CMsgGC_GameServer_ListResponse_GameServerIdentity::default_instance_
 B CMsgGC_GameServer_ResetIdentity::default_instance_
 B CMsgGC_GameServer_ResetIdentityResponse::_default_game_server_identity_token_
 B CMsgGC_GameServer_ResetIdentityResponse::default_instance_
 B CMsgGC_GameServer_ServerModificationItem::default_instance_
 B CMsgGC_GameServer_ServerModificationItemExpired::default_instance_
 B CMsgGC_GameServer_UseServerModificationItem::default_instance_
 B CMsgGC_GameServer_UseServerModificationItem_Response::default_instance_
 B CMsgGC_Halloween_GrantItem::default_instance_
 B CMsgGC_Halloween_GrantItemResponse::default_instance_
 B CMsgGC_Halloween_ItemClaimed::default_instance_
 B CMsgGC_Halloween_ReservedItem::default_instance_
 B CMsgGC_KickPlayerFromLobby::default_instance_
 B CMsgGC_Match_Result::default_instance_
 B CMsgGC_Match_ResultResponse::default_instance_
 B CMsgGC_Match_Result_Player::default_instance_
 B CMsgGC_PickupItemEligibility_Query::default_instance_
 B CMsgGC_PickupItemEligibility_QueryResponse::default_instance_
 B CMsgGC_ReportPlayer::default_instance_
 B CMsgGC_TFVoteKickPlayerRequest::default_instance_
 B CMsgGC_VoteKickPlayerRequestResponse::default_instance_
 B CMsgGameServerKickingLobby::default_instance_
 B CMsgGameServerKickingLobbyResponse::default_instance_
 B CMsgGameServerMatchmakingStatus::_default_map_
 B CMsgGameServerMatchmakingStatus::_default_tags_
 B CMsgGameServerMatchmakingStatus::default_instance_
 B CMsgGameServerMatchmakingStatus_Player::default_instance_
 B CMsgHalloween_Merasmus2012::default_instance_
 B CMsgHalloween_ServerBossEvent::default_instance_
 B CMsgHttpRequest::_default_body_
 B CMsgHttpRequest::_default_hostname_
 B CMsgHttpRequest::_default_url_
 B CMsgHttpRequest::default_instance_
 B CMsgHttpRequest_QueryParam::_default_name_
 B CMsgHttpRequest_QueryParam::_default_value_
 B CMsgHttpRequest_QueryParam::default_instance_
 B CMsgHttpRequest_RequestHeader::_default_name_
 B CMsgHttpRequest_RequestHeader::_default_value_
 B CMsgHttpRequest_RequestHeader::default_instance_
 B CMsgHttpResponse::_default_body_
 B CMsgHttpResponse::default_instance_
 B CMsgHttpResponse_ResponseHeader::_default_name_
 B CMsgHttpResponse_ResponseHeader::_default_value_
 B CMsgHttpResponse_ResponseHeader::default_instance_
 B CMsgIncrementKillCountAttribute::default_instance_
 B CMsgIncrementKillCountAttribute_Multiple::default_instance_
 B CMsgInvitationCreated::default_instance_
 B CMsgInviteToParty::default_instance_
 B CMsgItemAcknowledged::default_instance_
 B CMsgKickFromParty::default_instance_
 B CMsgKickedFromMatchmakingQueue::default_instance_
 B CMsgLANServerAvailable::default_instance_
 B CMsgLeaveGameAndPrepareToJoinParty::default_instance_
 B CMsgLeaveParty::default_instance_
 B CMsgLookupMultipleAccountNames::default_instance_
 B CMsgLookupMultipleAccountNamesResponse::default_instance_
 B CMsgLookupMultipleAccountNamesResponse_Account::_default_persona_
 B CMsgLookupMultipleAccountNamesResponse_Account::default_instance_
 B CMsgMatchSearchCriteria::_default_mvm_mannup_tour_
 B CMsgMatchSearchCriteria::default_instance_
 B CMsgMatchmakingProgress::default_instance_
 B CMsgMatchmakingSearchCountRequest::default_instance_
 B CMsgMatchmakingSearchCountResponse::default_instance_
 B CMsgMvMMannUpVictoryReply::default_instance_
 B CMsgMvMVictory::_default_mission_name_
 B CMsgMvMVictory::_default_tour_name_mannup_
 B CMsgMvMVictory::default_instance_
 B CMsgMvMVictoryInfo::_default_mission_name_
 B CMsgMvMVictoryInfo::_default_tour_name_
 B CMsgMvMVictoryInfo::default_instance_
 B CMsgMvMVictoryInfo_Item::_default_item_data_
 B CMsgMvMVictoryInfo_Item::default_instance_
 B CMsgMvMVictoryInfo_Player::default_instance_
 B CMsgMvMVictory_Player::default_instance_
 B CMsgNotificationAcknowledge::default_instance_
 B CMsgNotificationAcknowledgeReply::default_instance_
 B CMsgNotificationOfSuspiciousActivity::default_instance_
 B CMsgNotificationOfSuspiciousActivity_MultipleGameInstances::default_instance_
 B CMsgNotifyWatchdog::_default_text_
 B CMsgNotifyWatchdog::default_instance_
 B CMsgPackageLicense::default_instance_
 B CMsgPartyInviteResponse::default_instance_
 B CMsgPlayerLeftMatch::default_instance_
 B CMsgPlayerLeftMatchResponse::default_instance_
 B CMsgProtoBufHeader::_default_error_message_
 B CMsgProtoBufHeader::_default_target_job_name_
 B CMsgProtoBufHeader::default_instance_
 B CMsgReadyUp::default_instance_
 B CMsgRecipeComponent::default_instance_
 B CMsgReplaySubmitContestEntry::_default_youtube_url_
 B CMsgReplaySubmitContestEntry::default_instance_
 B CMsgReplaySubmitContestEntryResponse::default_instance_
 B CMsgReplayUploadedToYouTube::_default_youtube_account_name_
 B CMsgReplayUploadedToYouTube::_default_youtube_url_
 B CMsgReplayUploadedToYouTube::default_instance_
 B CMsgReplicateConVars::default_instance_
 B CMsgRequestInventoryRefresh::default_instance_
 B CMsgRequestItemPurgatory_FinalizePurchase::default_instance_
 B CMsgRequestItemPurgatory_FinalizePurchaseResponse::default_instance_
 B CMsgRequestItemPurgatory_RefundPurchase::default_instance_
 B CMsgRequestItemPurgatory_RefundPurchaseResponse::default_instance_
 B CMsgSOCacheHaveVersion::default_instance_
 B CMsgSOCacheSubscribed::default_instance_
 B CMsgSOCacheSubscribedUpToDate::default_instance_
 B CMsgSOCacheSubscribed_SubscribedType::default_instance_
 B CMsgSOCacheSubscriptionCheck::default_instance_
 B CMsgSOCacheSubscriptionRefresh::default_instance_
 B CMsgSOCacheUnsubscribed::default_instance_
 B CMsgSOCacheVersion::default_instance_
 B CMsgSOIDOwner::default_instance_
 B CMsgSOMultipleObjects::default_instance_
 B CMsgSOMultipleObjects_SingleObject::_default_object_data_
 B CMsgSOMultipleObjects_SingleObject::default_instance_
 B CMsgSOSingleObject::_default_object_data_
 B CMsgSOSingleObject::default_instance_
 B CMsgSaxxyAwarded::default_instance_
 B CMsgSelectPresetForClass::default_instance_
 B CMsgServerAvailable::default_instance_
 B CMsgServerGoodbye::default_instance_
 B CMsgServerHello::default_instance_
 B CMsgServerWelcome::default_instance_
 B CMsgSetHatEffectUseHeadOrigin::default_instance_
 B CMsgSetItemEffectVerticalOffset::default_instance_
 B CMsgSetItemPositions::default_instance_
 B CMsgSetItemPositions_ItemPosition::default_instance_
 B CMsgSetItemSlotAttribute::default_instance_
 B CMsgSetPresetItemPosition::default_instance_
 B CMsgSortItems::default_instance_
 B CMsgStoreGetUserData::default_instance_
 B CMsgStoreGetUserDataResponse::_default_country_
 B CMsgStoreGetUserDataResponse::_default_price_sheet_
 B CMsgStoreGetUserDataResponse::default_instance_
 B CMsgSystemBroadcast::_default_message_
 B CMsgSystemBroadcast::default_instance_
 B CMsgTFClientInit::default_instance_
 B CMsgTFCoaching_AddToCoaches::default_instance_
 B CMsgTFCoaching_AskCoach::default_instance_
 B CMsgTFCoaching_AskCoachResponse::default_instance_
 B CMsgTFCoaching_CoachJoinGame::default_instance_
 B CMsgTFCoaching_CoachJoined::default_instance_
 B CMsgTFCoaching_CoachJoining::default_instance_
 B CMsgTFCoaching_FindCoach::default_instance_
 B CMsgTFCoaching_FindCoachResponse::_default_coach_name_
 B CMsgTFCoaching_FindCoachResponse::default_instance_
 B CMsgTFCoaching_LikeCurrentCoach::default_instance_
 B CMsgTFCoaching_RemoveCurrentCoach::default_instance_
 B CMsgTFCoaching_RemoveFromCoaches::default_instance_
 B CMsgTFFreeTrialChooseMostHelpfulFriend::default_instance_
 B CMsgTFFreeTrialConvertedToPremium::default_instance_
 B CMsgTFGoldenWrenchBroadcast::_default_user_name_
 B CMsgTFGoldenWrenchBroadcast::default_instance_
 B CMsgTFJoinChatChannel::_default_channel_name_
 B CMsgTFJoinChatChannel::_default_password_
 B CMsgTFJoinChatChannel::_default_persona_name_
 B CMsgTFJoinChatChannel::default_instance_
 B CMsgTFJoinChatChannelResponse::_default_channel_name_
 B CMsgTFJoinChatChannelResponse::default_instance_
 B CMsgTFJoinChatChannelResponse_ChatMember::_default_persona_name_
 B CMsgTFJoinChatChannelResponse_ChatMember::default_instance_
 B CMsgTFLeaveChatChannel::_default_channel_name_
 B CMsgTFLeaveChatChannel::default_instance_
 B CMsgTFOtherJoinedChatChannel::_default_persona_name_
 B CMsgTFOtherJoinedChatChannel::default_instance_
 B CMsgTFOtherLeftChatChannel::default_instance_
 B CMsgTFQuickplay_PlayerJoining::default_instance_
 B CMsgTFQuickplay_ScoreServers::default_instance_
 B CMsgTFQuickplay_ScoreServersResponse::default_instance_
 B CMsgTFQuickplay_ScoreServersResponse_ServerInfo::default_instance_
 B CMsgTFQuickplay_ScoreServers_ServerInfo::default_instance_
 B CMsgTFRequestChatChannelList::default_instance_
 B CMsgTFRequestChatChannelListResponse::default_instance_
 B CMsgTFRequestChatChannelListResponse_ChatChannel::_default_channel_name_
 B CMsgTFRequestChatChannelListResponse_ChatChannel::default_instance_
 B CMsgTFRequestDefaultChatChannel::default_instance_
 B CMsgTFRequestDefaultChatChannelResponse::_default_channel_name_
 B CMsgTFRequestDefaultChatChannelResponse::default_instance_
 B CMsgTFRequestTF2Friends::default_instance_
 B CMsgTFRequestTF2FriendsResponse::default_instance_
 B CMsgTFSaxxyBroadcast::_default_user_name_
 B CMsgTFSaxxyBroadcast::default_instance_
 B CMsgTFThankedBySomeone::default_instance_
 B CMsgTFThankedSomeone::default_instance_
 B CMsgTFVoteKickBanPlayer::default_instance_
 B CMsgTFVoteKickBanPlayerResult::default_instance_
 B CMsgTFWorldStatus::default_instance_
 B CMsgTFXPSource::default_instance_
 B CMsgTFXPSourceBreakdown::default_instance_
 B CMsgTrackUniquePlayerPairEvent::default_instance_
 B CMsgUpdateHalloweenMerasmusLootLevel::default_instance_
 B CMsgUpdateHalloweenMerasmusLootLevel_Player::default_instance_
 B CMsgUpdateItemSchema::_default_items_game_
 B CMsgUpdateItemSchema::_default_items_game_url_
 B CMsgUpdateItemSchema::_default_signature_
 B CMsgUpdateItemSchema::default_instance_
 B CMsgUpdatePeriodicEvent::default_instance_
 B CMsgUseItem::default_instance_
 B CMsgWebAPIKey::_default_domain_
 B CMsgWebAPIKey::default_instance_
 B CMsgWebAPIRequest::_default_interface_name_
 B CMsgWebAPIRequest::_default_method_name_
 B CMsgWebAPIRequest::_default_unused_job_name_
 B CMsgWebAPIRequest::default_instance_
 B CMultiDamage_DataDescInit::g_DataMapHolder
 B CMultiSource_DataDescInit::g_DataMapHolder
 B CMultiplayRules::m_MapList
 B CMultiplayRules::m_nMapCycleTimeStamp
 B CMultiplayRules::m_nMapCycleindex
 B CNPCMaker_DataDescInit::g_DataMapHolder
 B CNPCSpawnDestination_DataDescInit::g_DataMapHolder
 B CNPC_Furniture_DataDescInit::g_DataMapHolder
 B CNPC_VehicleDriver::gm_ClassScheduleIdSpace
 B CNPC_VehicleDriver::gm_SquadSlotIdSpace
 B CNPC_VehicleDriver_DataDescInit::g_DataMapHolder
 B CNavArea::m_isReset
 B CNavArea::m_openList
 B CNavArea::m_openListTail
 B CNavArea::s_nCurrVisTestCounter
 B CNavNode::m_list
 B CNavNode::m_listLength
 B CNavVectorNoEditAllocator::m_memory
 B CNavVectorNoEditAllocator::m_nBytesCurrent
 B CNavVectorNoEditAllocator::m_pCurrent
 B CNodeEnt::m_nNodeCount
 B CNodeEnt_DataDescInit::g_DataMapHolder
 B CObjectCartDispenser_DataDescInit::g_DataMapHolder
 B CObjectDispenser_DataDescInit::g_DataMapHolder
 B CObjectSapper_DataDescInit::g_DataMapHolder
 B CObjectSentrygun_DataDescInit::g_DataMapHolder
 B CObjectTeleporter_DataDescInit::g_DataMapHolder
 B CObserverPoint_DataDescInit::g_DataMapHolder
 B COrnamentProp_DataDescInit::g_DataMapHolder
 B CParticleFire_DataDescInit::g_DataMapHolder
 B CParticleLight_DataDescInit::g_DataMapHolder
 B CParticlePerformanceMonitor_DataDescInit::g_DataMapHolder
 B CParticleSystem_DataDescInit::g_DataMapHolder
 B CPassengerInfo_DataDescInit::g_DataMapHolder
 B CPasstimeBallSpawn_DataDescInit::g_DataMapHolder
 B CPathCorner_DataDescInit::g_DataMapHolder
 B CPathKeyFrame_DataDescInit::g_DataMapHolder
 B CPathTrack::s_bIsIterating
 B CPathTrack::s_nCurrIterVal
 B CPathTrack_DataDescInit::g_DataMapHolder
 B CPhysBoxMultiplayer_DataDescInit::g_DataMapHolder
 B CPhysBox_DataDescInit::g_DataMapHolder
 B CPhysConstraintSystem_DataDescInit::g_DataMapHolder
 B CPhysConstraint_DataDescInit::g_DataMapHolder
 B CPhysConvert_DataDescInit::g_DataMapHolder
 B CPhysExplosion_DataDescInit::g_DataMapHolder
 B CPhysForce_DataDescInit::g_DataMapHolder
 B CPhysHinge_DataDescInit::g_DataMapHolder
 B CPhysImpact_DataDescInit::g_DataMapHolder
 B CPhysLength_DataDescInit::g_DataMapHolder
 B CPhysMagnet_DataDescInit::g_DataMapHolder
 B CPhysMotor_DataDescInit::g_DataMapHolder
 B CPhysPulley_DataDescInit::g_DataMapHolder
 B CPhysSlideConstraint_DataDescInit::g_DataMapHolder
 B CPhysThruster_DataDescInit::g_DataMapHolder
 B CPhysTorque_DataDescInit::g_DataMapHolder
 B CPhysicsCannister_DataDescInit::g_DataMapHolder
 B CPhysicsEntitySolver_DataDescInit::g_DataMapHolder
 B CPhysicsNPCSolver_DataDescInit::g_DataMapHolder
 B CPhysicsPropMultiplayer_DataDescInit::g_DataMapHolder
 B CPhysicsPropRespawnable_DataDescInit::g_DataMapHolder
 B CPhysicsProp_DataDescInit::g_DataMapHolder
 B CPhysicsShake_DataDescInit::g_DataMapHolder
 B CPhysicsSpring_DataDescInit::g_DataMapHolder
 B CPhysicsWind_DataDescInit::g_DataMapHolder
 B CPhysicsWire_DataDescInit::g_DataMapHolder
 B CPlasma_DataDescInit::g_DataMapHolder
 B CPlayerDestructionDispenser_DataDescInit::g_DataMapHolder
 B CPlayerLocalData_DataDescInit::g_DataMapHolder
 B CPlayerResource_DataDescInit::g_DataMapHolder
 B CPlayerState_DataDescInit::g_DataMapHolder
 B CPointAngleSensor_DataDescInit::g_DataMapHolder
 B CPointAngularVelocitySensor_DataDescInit::g_DataMapHolder
 B CPointBonusMapsAccessor_DataDescInit::g_DataMapHolder
 B CPointCamera_DataDescInit::g_DataMapHolder
 B CPointClientCommand_DataDescInit::g_DataMapHolder
 B CPointCommentaryNode_DataDescInit::g_DataMapHolder
 B CPointDevShotCamera_DataDescInit::g_DataMapHolder
 B CPointGamestatsCounter_DataDescInit::g_DataMapHolder
 B CPointHurt_DataDescInit::g_DataMapHolder
 B CPointNavInterface_DataDescInit::g_DataMapHolder
 B CPointPlayerMoveConstraint_DataDescInit::g_DataMapHolder
 B CPointPopulatorInterface_DataDescInit::g_DataMapHolder
 B CPointProximitySensor_DataDescInit::g_DataMapHolder
 B CPointPush_DataDescInit::g_DataMapHolder
 B CPointServerCommand_DataDescInit::g_DataMapHolder
 B CPointSpotlight_DataDescInit::g_DataMapHolder
 B CPointTeleport_DataDescInit::g_DataMapHolder
 B CPointTemplate_DataDescInit::g_DataMapHolder
 B CPointVelocitySensor_DataDescInit::g_DataMapHolder
 B CPopulationManager::m_checkpointSnapshot
 B CPopulationManager::m_checkpointWaveIndex
 B CPopulationManager::m_nNumConsecutiveWipes
 B CPopulationManager_DataDescInit::g_DataMapHolder
 B CPortalTouchScope::m_CallQueue
 B CPoseController_DataDescInit::g_DataMapHolder
 B CPrecipitation_DataDescInit::g_DataMapHolder
 B CProjectedDecal_DataDescInit::g_DataMapHolder
 B CPropDoorRotating_DataDescInit::g_DataMapHolder
 B CPropSoccerBall_DataDescInit::g_DataMapHolder
 B CPropVehicleDriveable_DataDescInit::g_DataMapHolder
 B CPropVehicle_DataDescInit::g_DataMapHolder
 B CPushBlockerEnum::s_nEnumCount
 B CRTime::sm_nTimeCur
 B CRTime::sm_nTimeLastSystemTimeUpdate
 B CRTime::sm_rgchLocalDateCur
 B CRTime::sm_rgchLocalTimeCur
 B CRagdollBoogie_DataDescInit::g_DataMapHolder
 B CRagdollConstraint_DataDescInit::g_DataMapHolder
 B CRagdollMagnet_DataDescInit::g_DataMapHolder
 B CRagdollManager_DataDescInit::g_DataMapHolder
 B CRagdollPropAttached_DataDescInit::g_DataMapHolder
 B CRagdollProp_DataDescInit::g_DataMapHolder
 B CRallyPoint_DataDescInit::g_DataMapHolder
 B CRandSimTimer_DataDescInit::g_DataMapHolder
 B CRandStopwatch_DataDescInit::g_DataMapHolder
 B CRegenerateZone_DataDescInit::g_DataMapHolder
 B CReplayCachedContestData::default_instance_
 B CRevertSaved_DataDescInit::g_DataMapHolder
 B CRobotDestructionVaultTrigger_DataDescInit::g_DataMapHolder
 B CRobotDispenser_DataDescInit::g_DataMapHolder
 B CRopeAnchor_DataDescInit::g_DataMapHolder
 B CRopeKeyframe_DataDescInit::g_DataMapHolder
 B CRotDoor_DataDescInit::g_DataMapHolder
 B CRotorWashShooter_DataDescInit::g_DataMapHolder
 B CRuleEntity_DataDescInit::g_DataMapHolder
 B CRulePointEntity_DataDescInit::g_DataMapHolder
 B CSOClassPresetClientData::default_instance_
 B CSOEconClaimCode::_default_code_
 B CSOEconClaimCode::default_instance_
 B CSOEconGameAccountClient::default_instance_
 B CSOEconGameAccountForGameServers::default_instance_
 B CSOEconItem::_default_custom_desc_
 B CSOEconItem::_default_custom_name_
 B CSOEconItem::default_instance_
 B CSOEconItemAttribute::_default_value_bytes_
 B CSOEconItemAttribute::default_instance_
 B CSOEconItemEquipped::default_instance_
 B CSOEconItemPresetInstance::default_instance_
 B CSOItemCriteria::_default_tags_
 B CSOItemCriteria::default_instance_
 B CSOItemCriteriaCondition::_default_field_
 B CSOItemCriteriaCondition::_default_string_value_
 B CSOItemCriteriaCondition::default_instance_
 B CSOItemRecipe::_default_desc_inputs_
 B CSOItemRecipe::_default_desc_outputs_
 B CSOItemRecipe::_default_di_a_
 B CSOItemRecipe::_default_di_b_
 B CSOItemRecipe::_default_di_c_
 B CSOItemRecipe::_default_do_a_
 B CSOItemRecipe::_default_do_b_
 B CSOItemRecipe::_default_do_c_
 B CSOItemRecipe::_default_n_a_
 B CSOItemRecipe::_default_name_
 B CSOItemRecipe::default_instance_
 B CSOLobbyInvite::_default_sender_name_
 B CSOLobbyInvite::default_instance_
 B CSOPartyInvite::_default_sender_name_
 B CSOPartyInvite::default_instance_
 B CSOTFDuelSummary::default_instance_
 B CSOTFGameServerLobby::_default_connect_
 B CSOTFGameServerLobby::_default_game_name_
 B CSOTFGameServerLobby::_default_mannup_tour_name_
 B CSOTFGameServerLobby::_default_map_name_
 B CSOTFGameServerLobby::_default_mission_name_
 B CSOTFGameServerLobby::default_instance_
 B CSOTFLadderPlayerStats::default_instance_
 B CSOTFMapContribution::default_instance_
 B CSOTFMatchResultPlayerStats::default_instance_
 B CSOTFParty::_default_search_mvm_mannup_tour_
 B CSOTFParty::default_instance_
 B CSOTFPartyInvite::_default_sender_name_
 B CSOTFPartyInvite::default_instance_
 B CSOTFPartyInvite_PartyMember::_default_name_
 B CSOTFPartyInvite_PartyMember::default_instance_
 B CSOTFPartyMember::default_instance_
 B CSOTFPlayerInfo::default_instance_
 B CSOWarData::default_instance_
 B CSceneEntity::m_pcvSndMixahead
 B CSceneEntity_DataDescInit::g_DataMapHolder
 B CSceneListManager_DataDescInit::g_DataMapHolder
 B CSceneManager_DataDescInit::g_DataMapHolder
 B CSchemaAttributeStats::m_pHead
 B CScriptedTarget_DataDescInit::g_DataMapHolder
 B CServerBenchmarkHook::s_pBenchmarkHook
 B CServerNetworkProperty_DataDescInit::g_DataMapHolder
 B CShadowControl_DataDescInit::g_DataMapHolder
 B CSimTimer_DataDescInit::g_DataMapHolder
 B CSimpleSimTimer_DataDescInit::g_DataMapHolder
 B CSkyCamera_DataDescInit::g_DataMapHolder
 B CSlideshowDisplay_DataDescInit::g_DataMapHolder
 B CSmokeStackLightInfo_DataDescInit::g_DataMapHolder
 B CSmokeStack_DataDescInit::g_DataMapHolder
 B CSniperDot_DataDescInit::g_DataMapHolder
 B CSoundEnt_DataDescInit::g_DataMapHolder
 B CSoundEnvelope_DataDescInit::g_DataMapHolder
 B CSoundPatch::g_SoundPatchCount
 B CSoundPatch::s_Allocator
 B CSoundPatch_DataDescInit::g_DataMapHolder
 B CSound_DataDescInit::g_DataMapHolder
 B CSpellPickup_DataDescInit::g_DataMapHolder
 B CSpotlightEnd_DataDescInit::g_DataMapHolder
 B CSpriteTrail_DataDescInit::g_DataMapHolder
 B CSprite_DataDescInit::g_DataMapHolder
 B CSteamJet_DataDescInit::g_DataMapHolder
 B CStopwatchBase_DataDescInit::g_DataMapHolder
 B CStopwatch_DataDescInit::g_DataMapHolder
 B CStressEntityReg::s_pHead
 B CStripWeapons_DataDescInit::g_DataMapHolder
 B CSun_DataDescInit::g_DataMapHolder
 B CTFAmmoPack_DataDescInit::g_DataMapHolder
 B CTFBaseBoss_DataDescInit::g_DataMapHolder
 B CTFBaseProjectile_DataDescInit::g_DataMapHolder
 B CTFBaseRocket_DataDescInit::g_DataMapHolder
 B CTFBotActionPoint_DataDescInit::g_DataMapHolder
 B CTFBotController_DataDescInit::g_DataMapHolder
 B CTFBotGenerator_DataDescInit::g_DataMapHolder
 B CTFBotHintEngineerNest_DataDescInit::g_DataMapHolder
 B CTFBotHintSentrygun_DataDescInit::g_DataMapHolder
 B CTFBotHintTeleporterExit_DataDescInit::g_DataMapHolder
 B CTFBotHint_DataDescInit::g_DataMapHolder
 B CTFBotProxy_DataDescInit::g_DataMapHolder
 B CTFBotRoster_DataDescInit::g_DataMapHolder
 B CTFChargedSMG_DataDescInit::g_DataMapHolder
 B CTFCompoundBow_DataDescInit::g_DataMapHolder
 B CTFCrossbow_DataDescInit::g_DataMapHolder
 B CTFFlameThrower_DataDescInit::g_DataMapHolder
 B CTFFlareGun_DataDescInit::g_DataMapHolder
 B CTFForceRespawn_DataDescInit::g_DataMapHolder
 B CTFGameRulesProxy_DataDescInit::g_DataMapHolder
 B CTFGenericBomb_DataDescInit::g_DataMapHolder
 B CTFGlow_DataDescInit::g_DataMapHolder
 B CTFGrapplingHook_DataDescInit::g_DataMapHolder
 B CTFGrenadeLauncher_DataDescInit::g_DataMapHolder
 B CTFGrenadePipebombProjectile_DataDescInit::g_DataMapHolder
 B CTFHalloweenFortuneTeller_DataDescInit::g_DataMapHolder
 B CTFHalloweenMinigame_DataDescInit::g_DataMapHolder
 B CTFHalloweenMinigame_FallingPlatforms_DataDescInit::g_DataMapHolder
 B CTFHellZap_DataDescInit::g_DataMapHolder
 B CTFHolidayEntity_DataDescInit::g_DataMapHolder
 B CTFHudNotify_DataDescInit::g_DataMapHolder
 B CTFInfoPowerupSpawn_DataDescInit::g_DataMapHolder
 B CTFIntermission_DataDescInit::g_DataMapHolder
 B CTFLobbyMember::_default_name_
 B CTFLobbyMember::default_instance_
 B CTFLunchBox_DataDescInit::g_DataMapHolder
 B CTFMedigunShield_DataDescInit::g_DataMapHolder
 B CTFMiniGame_DataDescInit::g_DataMapHolder
 B CTFMinigameLogic::m_sMinigameLogic
 B CTFMinigameLogic_DataDescInit::g_DataMapHolder
 B CTFMinigun_DataDescInit::g_DataMapHolder
 B CTFObjectiveResource_DataDescInit::g_DataMapHolder
 B CTFParticleCannon_DataDescInit::g_DataMapHolder
 B CTFPasstimeLogic_DataDescInit::g_DataMapHolder
 B CTFPipebombLauncher_DataDescInit::g_DataMapHolder
 B CTFPistol_DataDescInit::g_DataMapHolder
 B CTFPlayerDestructionLogic_DataDescInit::g_DataMapHolder
 B CTFPlayer_DataDescInit::g_DataMapHolder
 B CTFPointWeaponMimic_DataDescInit::g_DataMapHolder
 B CTFPowerupBottle_DataDescInit::g_DataMapHolder
 B CTFPowerup_DataDescInit::g_DataMapHolder
 B CTFProjectile_Arrow_DataDescInit::g_DataMapHolder
 B CTFProjectile_EnergyBall_DataDescInit::g_DataMapHolder
 B CTFProjectile_Flare_DataDescInit::g_DataMapHolder
 B CTFProjectile_GrapplingHook_DataDescInit::g_DataMapHolder
 B CTFProjectile_HealingBolt_DataDescInit::g_DataMapHolder
 B CTFReviveMarker_DataDescInit::g_DataMapHolder
 B CTFRevolver_DataDescInit::g_DataMapHolder
 B CTFRobotDestructionLogic::m_sCTFRobotDestructionLogic
 B CTFRobotDestructionLogic_DataDescInit::g_DataMapHolder
 B CTFRobotDestruction_RobotGroup::m_sflNextAllowedAttackAlertTime
 B CTFRobotDestruction_RobotGroup_DataDescInit::g_DataMapHolder
 B CTFRobotDestruction_RobotSpawn_DataDescInit::g_DataMapHolder
 B CTFRobotDestruction_Robot_DataDescInit::g_DataMapHolder
 B CTFRocketLauncher_AirStrike_DataDescInit::g_DataMapHolder
 B CTFRocketLauncher_DataDescInit::g_DataMapHolder
 B CTFRocketLauncher_DirectHit_DataDescInit::g_DataMapHolder
 B CTFRocketLauncher_Mortar_DataDescInit::g_DataMapHolder
 B CTFSMG_DataDescInit::g_DataMapHolder
 B CTFSniperRifle_DataDescInit::g_DataMapHolder
 B CTFSpawner_DataDescInit::g_DataMapHolder
 B CTFSpell_MeteorShowerSpawner_DataDescInit::g_DataMapHolder
 B CTFSyringeGun_DataDescInit::g_DataMapHolder
 B CTFTankBoss::m_flLastTankAlert
 B CTFTankBoss_DataDescInit::g_DataMapHolder
 B CTFTankDestruction_DataDescInit::g_DataMapHolder
 B CTFTeamSpawn_DataDescInit::g_DataMapHolder
 B CTFWeaponBaseGrenadeProj_DataDescInit::g_DataMapHolder
 B CTFWeaponBaseGun_DataDescInit::g_DataMapHolder
 B CTFWeaponBaseMelee_DataDescInit::g_DataMapHolder
 B CTFWeaponBase_DataDescInit::g_DataMapHolder
 B CTFWeaponInvis_DataDescInit::g_DataMapHolder
 B CTFWeaponPDAExpansion_Dispenser_DataDescInit::g_DataMapHolder
 B CTFWeaponPDAExpansion_Teleporter_DataDescInit::g_DataMapHolder
 B CTFWeaponPDA_DataDescInit::g_DataMapHolder
 B CTFWearableDemoShield_DataDescInit::g_DataMapHolder
 B CTFWearableItem_DataDescInit::g_DataMapHolder
 B CTFWearableLevelableItem_DataDescInit::g_DataMapHolder
 B CTFWearable_DataDescInit::g_DataMapHolder
 B CTF_GameStats
 B CTakeDamageInfo_DataDescInit::g_DataMapHolder
 B CTankTargetChange_DataDescInit::g_DataMapHolder
 B CTankTrainAI_DataDescInit::g_DataMapHolder
 B CTargetCDAudioRep_DataDescInit::g_DataMapHolder
 B CTargetChangeGravity_DataDescInit::g_DataMapHolder
 B CTeamControlPointMaster_DataDescInit::g_DataMapHolder
 B CTeamControlPointRound_DataDescInit::g_DataMapHolder
 B CTeamControlPoint_DataDescInit::g_DataMapHolder
 B CTeamRoundTimer_DataDescInit::g_DataMapHolder
 B CTeamTrainWatcher_DataDescInit::g_DataMapHolder
 B CTeamplayRoundBasedRulesProxy_DataDescInit::g_DataMapHolder
 B CTeamplayRoundWin_DataDescInit::g_DataMapHolder
 B CTeleportVortex_DataDescInit::g_DataMapHolder
 B CTemplateNPCMaker_DataDescInit::g_DataMapHolder
 B CTesla_DataDescInit::g_DataMapHolder
 B CTestTraceline_DataDescInit::g_DataMapHolder
 B CTextStatFile::s_pHead
 B CTextureToggle_DataDescInit::g_DataMapHolder
 B CThrustController_DataDescInit::g_DataMapHolder
 B CTimerEntity_DataDescInit::g_DataMapHolder
 B CTrainingAnnotation_DataDescInit::g_DataMapHolder
 B CTrainingModeLogic_DataDescInit::g_DataMapHolder
 B CTriggerAddOrRemoveTFPlayerAttributes_DataDescInit::g_DataMapHolder
 B CTriggerAddTFPlayerCondition_DataDescInit::g_DataMapHolder
 B CTriggerApplyImpulse_DataDescInit::g_DataMapHolder
 B CTriggerAreaCapture_DataDescInit::g_DataMapHolder
 B CTriggerBotTag_DataDescInit::g_DataMapHolder
 B CTriggerBrush_DataDescInit::g_DataMapHolder
 B CTriggerCamera_DataDescInit::g_DataMapHolder
 B CTriggerCatapult_DataDescInit::g_DataMapHolder
 B CTriggerGravity_DataDescInit::g_DataMapHolder
 B CTriggerHurt_DataDescInit::g_DataMapHolder
 B CTriggerIgniteArrows_DataDescInit::g_DataMapHolder
 B CTriggerIgnite_DataDescInit::g_DataMapHolder
 B CTriggerImpact_DataDescInit::g_DataMapHolder
 B CTriggerLook_DataDescInit::g_DataMapHolder
 B CTriggerMultiple_DataDescInit::g_DataMapHolder
 B CTriggerParticle_DataDescInit::g_DataMapHolder
 B CTriggerPasstimeBall_DataDescInit::g_DataMapHolder
 B CTriggerPlayerMovement_DataDescInit::g_DataMapHolder
 B CTriggerPlayerRespawnOverride_DataDescInit::g_DataMapHolder
 B CTriggerProximity_DataDescInit::g_DataMapHolder
 B CTriggerPush_DataDescInit::g_DataMapHolder
 B CTriggerRemoveTFPlayerCondition_DataDescInit::g_DataMapHolder
 B CTriggerRemove_DataDescInit::g_DataMapHolder
 B CTriggerSave_DataDescInit::g_DataMapHolder
 B CTriggerSoundscape_DataDescInit::g_DataMapHolder
 B CTriggerStun_DataDescInit::g_DataMapHolder
 B CTriggerTeleportRelative_DataDescInit::g_DataMapHolder
 B CTriggerTeleport_DataDescInit::g_DataMapHolder
 B CTriggerTimerDoor_DataDescInit::g_DataMapHolder
 B CTriggerToggleSave_DataDescInit::g_DataMapHolder
 B CTriggerVPhysicsMotion_DataDescInit::g_DataMapHolder
 B CTriggerWind_DataDescInit::g_DataMapHolder
 B CUpgrades_DataDescInit::g_DataMapHolder
 B CUtlMemoryPool::g_ReportFunc
 B CUtlSymbol::s_pSymbolTable
 B CVGuiScreen_DataDescInit::g_DataMapHolder
 B CVoteController_DataDescInit::g_DataMapHolder
 B CWC_UpdateIgnoreList_DataDescInit::g_DataMapHolder
 B CWaterBullet_DataDescInit::g_DataMapHolder
 B CWaterLODControl_DataDescInit::g_DataMapHolder
 B CWaveSpawnPopulator::m_reservedPlayerSlotCount
 B CWeaponIFMBaseCamera_DataDescInit::g_DataMapHolder
 B CWeaponIFMBase_DataDescInit::g_DataMapHolder
 B CWeaponIFMSteadyCam_DataDescInit::g_DataMapHolder
 B CWeightButton_DataDescInit::g_DataMapHolder
 B CWheelOfDoomSpiral_DataDescInit::g_DataMapHolder
 B CWheelOfDoom_DataDescInit::g_DataMapHolder
 B CWindowPane_DataDescInit::g_DataMapHolder
 B CWorkshop_GetContributors_Request::default_instance_
 B CWorkshop_GetContributors_Response::default_instance_
 B CWorkshop_PopulateItemDescriptions_Request::default_instance_
 B CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock::_default_language_
 B CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock::default_instance_
 B CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription::_default_item_description_
 B CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription::default_instance_
 B CWorkshop_SetItemPaymentRules_Request::default_instance_
 B CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule::_default_rule_description_
 B CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule::default_instance_
 B CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule::_default_rule_description_
 B CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule::default_instance_
 B CWorkshop_SetItemPaymentRules_Response::default_instance_
 B CWorldItem_DataDescInit::g_DataMapHolder
 B CWorld_DataDescInit::g_DataMapHolder
 B CZombieSpawner_DataDescInit::g_DataMapHolder
 B ConCommandBase::s_pAccessor
 B ConCommandBase::s_pConCommandBases
 B ConceptHistory_t_DataDescInit::g_DataMapHolder
 B CryptoPP::AAD_CHANNEL
 B CryptoPP::BufferedTransformation::NULL_CHANNEL
 B DT_AI_BaseNPC::g_SendTable
 B DT_AI_BaseNPC::g_SendTableInit
 B DT_AmmoPack::g_SendTable
 B DT_AmmoPack::g_SendTableInit
 B DT_AnimTimeMustBeFirst::g_SendTable
 B DT_AnimTimeMustBeFirst::g_SendTableInit
 B DT_Animationlayer::g_SendTable
 B DT_Animationlayer::g_SendTableInit
 B DT_AttributeContainer::g_SendTable
 B DT_AttributeContainer::g_SendTableInit
 B DT_AttributeContainerPlayer::g_SendTable
 B DT_AttributeContainerPlayer::g_SendTableInit
 B DT_AttributeList::g_SendTable
 B DT_AttributeList::g_SendTableInit
 B DT_AttributeManager::g_SendTable
 B DT_AttributeManager::g_SendTableInit
 B DT_BCCLocalPlayerExclusive::g_SendTable
 B DT_BCCLocalPlayerExclusive::g_SendTableInit
 B DT_BaseAnimating::g_SendTable
 B DT_BaseAnimating::g_SendTableInit
 B DT_BaseAnimatingOverlay::g_SendTable
 B DT_BaseAnimatingOverlay::g_SendTableInit
 B DT_BaseAttributableItem::g_SendTable
 B DT_BaseAttributableItem::g_SendTableInit
 B DT_BaseBeam::g_SendTable
 B DT_BaseBeam::g_SendTableInit
 B DT_BaseCombatCharacter::g_SendTable
 B DT_BaseCombatCharacter::g_SendTableInit
 B DT_BaseCombatWeapon::g_SendTable
 B DT_BaseCombatWeapon::g_SendTableInit
 B DT_BaseDoor::g_SendTable
 B DT_BaseDoor::g_SendTableInit
 B DT_BaseEntity::g_SendTable
 B DT_BaseEntity::g_SendTableInit
 B DT_BaseFlex::g_SendTable
 B DT_BaseFlex::g_SendTableInit
 B DT_BaseGrenade::g_SendTable
 B DT_BaseGrenade::g_SendTableInit
 B DT_BaseObject::g_SendTable
 B DT_BaseObject::g_SendTableInit
 B DT_BaseObjectUpgrade::g_SendTable
 B DT_BaseObjectUpgrade::g_SendTableInit
 B DT_BaseParticleEntity::g_SendTable
 B DT_BaseParticleEntity::g_SendTableInit
 B DT_BasePlayer::g_SendTable
 B DT_BasePlayer::g_SendTableInit
 B DT_BaseProjectile::g_SendTable
 B DT_BaseProjectile::g_SendTableInit
 B DT_BasePropDoor::g_SendTable
 B DT_BasePropDoor::g_SendTableInit
 B DT_BaseTeamObjectiveResource::g_SendTable
 B DT_BaseTeamObjectiveResource::g_SendTableInit
 B DT_BaseTempEntity::g_SendTable
 B DT_BaseTempEntity::g_SendTableInit
 B DT_BaseViewModel::g_SendTable
 B DT_BaseViewModel::g_SendTableInit
 B DT_Beam::g_SendTable
 B DT_Beam::g_SendTableInit
 B DT_BeamPredictableId::g_SendTable
 B DT_BeamPredictableId::g_SendTableInit
 B DT_BoneFollower::g_SendTable
 B DT_BoneFollower::g_SendTableInit
 B DT_BonusRoundLogic::g_SendTable
 B DT_BonusRoundLogic::g_SendTableInit
 B DT_BreakableProp::g_SendTable
 B DT_BreakableProp::g_SendTableInit
 B DT_BreakableSurface::g_SendTable
 B DT_BreakableSurface::g_SendTableInit
 B DT_BuilderLocalData::g_SendTable
 B DT_BuilderLocalData::g_SendTableInit
 B DT_CBonusDuckPickup::g_SendTable
 B DT_CBonusDuckPickup::g_SendTableInit
 B DT_CBonusPack::g_SendTable
 B DT_CBonusPack::g_SendTableInit
 B DT_CFish::g_SendTable
 B DT_CFish::g_SendTableInit
 B DT_CHalloweenGiftPickup::g_SendTable
 B DT_CHalloweenGiftPickup::g_SendTableInit
 B DT_CHalloweenPickup::g_SendTable
 B DT_CHalloweenPickup::g_SendTableInit
 B DT_CMannVsMachineWaveStats::g_SendTable
 B DT_CMannVsMachineWaveStats::g_SendTableInit
 B DT_CaptureFlag::g_SendTable
 B DT_CaptureFlag::g_SendTableInit
 B DT_CaptureFlagReturnIcon::g_SendTable
 B DT_CaptureFlagReturnIcon::g_SendTableInit
 B DT_CaptureZone::g_SendTable
 B DT_CaptureZone::g_SendTableInit
 B DT_CollisionProperty::g_SendTable
 B DT_CollisionProperty::g_SendTableInit
 B DT_ColorCorrection::g_SendTable
 B DT_ColorCorrection::g_SendTableInit
 B DT_ColorCorrectionVolume::g_SendTable
 B DT_ColorCorrectionVolume::g_SendTableInit
 B DT_Crossbow::g_SendTable
 B DT_Crossbow::g_SendTableInit
 B DT_CurrencyPack::g_SendTable
 B DT_CurrencyPack::g_SendTableInit
 B DT_DetailController::g_SendTable
 B DT_DetailController::g_SendTableInit
 B DT_DustTrail::g_SendTable
 B DT_DustTrail::g_SendTableInit
 B DT_DynamicLight::g_SendTable
 B DT_DynamicLight::g_SendTableInit
 B DT_DynamicProp::g_SendTable
 B DT_DynamicProp::g_SendTableInit
 B DT_EconEntity::g_SendTable
 B DT_EconEntity::g_SendTableInit
 B DT_EffectData::g_SendTable
 B DT_EffectData::g_SendTableInit
 B DT_Embers::g_SendTable
 B DT_Embers::g_SendTableInit
 B DT_EntityDissolve::g_SendTable
 B DT_EntityDissolve::g_SendTableInit
 B DT_EntityFlame::g_SendTable
 B DT_EntityFlame::g_SendTableInit
 B DT_EntityParticleTrail::g_SendTable
 B DT_EntityParticleTrail::g_SendTableInit
 B DT_EntityParticleTrailInfo::g_SendTable
 B DT_EntityParticleTrailInfo::g_SendTableInit
 B DT_EnvParticleScript::g_SendTable
 B DT_EnvParticleScript::g_SendTableInit
 B DT_EnvProjectedTexture::g_SendTable
 B DT_EnvProjectedTexture::g_SendTableInit
 B DT_EnvScreenEffect::g_SendTable
 B DT_EnvScreenEffect::g_SendTableInit
 B DT_EnvScreenOverlay::g_SendTable
 B DT_EnvScreenOverlay::g_SendTableInit
 B DT_EnvTonemapController::g_SendTable
 B DT_EnvTonemapController::g_SendTableInit
 B DT_EnvWind::g_SendTable
 B DT_EnvWind::g_SendTableInit
 B DT_EnvWindShared::g_SendTable
 B DT_EnvWindShared::g_SendTableInit
 B DT_EyeballBoss::g_SendTable
 B DT_EyeballBoss::g_SendTableInit
 B DT_FireSmoke::g_SendTable
 B DT_FireSmoke::g_SendTableInit
 B DT_FireTrail::g_SendTable
 B DT_FireTrail::g_SendTableInit
 B DT_FogController::g_SendTable
 B DT_FogController::g_SendTableInit
 B DT_FuncAreaPortalWindow::g_SendTable
 B DT_FuncAreaPortalWindow::g_SendTableInit
 B DT_FuncConveyor::g_SendTable
 B DT_FuncConveyor::g_SendTableInit
 B DT_FuncForceField::g_SendTable
 B DT_FuncForceField::g_SendTableInit
 B DT_FuncLadder::g_SendTable
 B DT_FuncLadder::g_SendTableInit
 B DT_FuncMonitor::g_SendTable
 B DT_FuncMonitor::g_SendTableInit
 B DT_FuncOccluder::g_SendTable
 B DT_FuncOccluder::g_SendTableInit
 B DT_FuncPasstimeGoal::g_SendTable
 B DT_FuncPasstimeGoal::g_SendTableInit
 B DT_FuncReflectiveGlass::g_SendTable
 B DT_FuncReflectiveGlass::g_SendTableInit
 B DT_FuncRespawnRoom::g_SendTable
 B DT_FuncRespawnRoom::g_SendTableInit
 B DT_FuncRespawnRoomVisualizer::g_SendTable
 B DT_FuncRespawnRoomVisualizer::g_SendTableInit
 B DT_FuncRotating::g_SendTable
 B DT_FuncRotating::g_SendTableInit
 B DT_FuncSmokeVolume::g_SendTable
 B DT_FuncSmokeVolume::g_SendTableInit
 B DT_FuncTrackTrain::g_SendTable
 B DT_FuncTrackTrain::g_SendTableInit
 B DT_Func_Dust::g_SendTable
 B DT_Func_Dust::g_SendTableInit
 B DT_Func_LOD::g_SendTable
 B DT_Func_LOD::g_SendTableInit
 B DT_GameRulesProxy::g_SendTable
 B DT_GameRulesProxy::g_SendTableInit
 B DT_GrapplingHook::g_SendTable
 B DT_GrapplingHook::g_SendTableInit
 B DT_HalloweenSoulPack::g_SendTable
 B DT_HalloweenSoulPack::g_SendTableInit
 B DT_HandleTest::g_SendTable
 B DT_HandleTest::g_SendTableInit
 B DT_HeadlessHatman::g_SendTable
 B DT_HeadlessHatman::g_SendTableInit
 B DT_Hightower_TeleportVortex::g_SendTable
 B DT_Hightower_TeleportVortex::g_SendTableInit
 B DT_InfoLadderDismount::g_SendTable
 B DT_InfoLadderDismount::g_SendTableInit
 B DT_InfoLightingRelative::g_SendTable
 B DT_InfoLightingRelative::g_SendTableInit
 B DT_InfoOverlayAccessor::g_SendTable
 B DT_InfoOverlayAccessor::g_SendTableInit
 B DT_LaserDot::g_SendTable
 B DT_LaserDot::g_SendTableInit
 B DT_LaserPointerLocalData::g_SendTable
 B DT_LaserPointerLocalData::g_SendTableInit
 B DT_LightGlow::g_SendTable
 B DT_LightGlow::g_SendTableInit
 B DT_Local::g_SendTable
 B DT_Local::g_SendTableInit
 B DT_LocalActiveWeaponData::g_SendTable
 B DT_LocalActiveWeaponData::g_SendTableInit
 B DT_LocalFlameThrower::g_SendTable
 B DT_LocalFlameThrower::g_SendTableInit
 B DT_LocalPlayerExclusive::g_SendTable
 B DT_LocalPlayerExclusive::g_SendTableInit
 B DT_LocalTFWeaponData::g_SendTable
 B DT_LocalTFWeaponData::g_SendTableInit
 B DT_LocalTFWeaponMedigunData::g_SendTable
 B DT_LocalTFWeaponMedigunData::g_SendTableInit
 B DT_LocalWeaponData::g_SendTable
 B DT_LocalWeaponData::g_SendTableInit
 B DT_MannVsMachineStats::g_SendTable
 B DT_MannVsMachineStats::g_SendTableInit
 B DT_MaterialModifyControl::g_SendTable
 B DT_MaterialModifyControl::g_SendTableInit
 B DT_Merasmus::g_SendTable
 B DT_Merasmus::g_SendTableInit
 B DT_MerasmusDancer::g_SendTable
 B DT_MerasmusDancer::g_SendTableInit
 B DT_MonsterResource::g_SendTable
 B DT_MonsterResource::g_SendTableInit
 B DT_MovieExplosion::g_SendTable
 B DT_MovieExplosion::g_SendTableInit
 B DT_NextBot::g_SendTable
 B DT_NextBot::g_SendTableInit
 B DT_ObjectCartDispenser::g_SendTable
 B DT_ObjectCartDispenser::g_SendTableInit
 B DT_ObjectDispenser::g_SendTable
 B DT_ObjectDispenser::g_SendTableInit
 B DT_ObjectSapper::g_SendTable
 B DT_ObjectSapper::g_SendTableInit
 B DT_ObjectSentrygun::g_SendTable
 B DT_ObjectSentrygun::g_SendTableInit
 B DT_ObjectTeleporter::g_SendTable
 B DT_ObjectTeleporter::g_SendTableInit
 B DT_OverlayVars::g_SendTable
 B DT_OverlayVars::g_SendTableInit
 B DT_ParticleCannon::g_SendTable
 B DT_ParticleCannon::g_SendTableInit
 B DT_ParticleFire::g_SendTable
 B DT_ParticleFire::g_SendTableInit
 B DT_ParticlePerformanceMonitor::g_SendTable
 B DT_ParticlePerformanceMonitor::g_SendTableInit
 B DT_ParticleSmokeGrenade::g_SendTable
 B DT_ParticleSmokeGrenade::g_SendTableInit
 B DT_ParticleSystem::g_SendTable
 B DT_ParticleSystem::g_SendTableInit
 B DT_PasstimeBall::g_SendTable
 B DT_PasstimeBall::g_SendTableInit
 B DT_PasstimeGun::g_SendTable
 B DT_PasstimeGun::g_SendTableInit
 B DT_PhysBox::g_SendTable
 B DT_PhysBox::g_SendTableInit
 B DT_PhysBoxMultiplayer::g_SendTable
 B DT_PhysBoxMultiplayer::g_SendTableInit
 B DT_PhysMagnet::g_SendTable
 B DT_PhysMagnet::g_SendTableInit
 B DT_PhysicsProp::g_SendTable
 B DT_PhysicsProp::g_SendTableInit
 B DT_PhysicsPropMultiplayer::g_SendTable
 B DT_PhysicsPropMultiplayer::g_SendTableInit
 B DT_PipebombLauncherLocalData::g_SendTable
 B DT_PipebombLauncherLocalData::g_SendTableInit
 B DT_Plasma::g_SendTable
 B DT_Plasma::g_SendTableInit
 B DT_PlayerDestructionDispenser::g_SendTable
 B DT_PlayerDestructionDispenser::g_SendTableInit
 B DT_PlayerResource::g_SendTable
 B DT_PlayerResource::g_SendTableInit
 B DT_PlayerState::g_SendTable
 B DT_PlayerState::g_SendTableInit
 B DT_PointCamera::g_SendTable
 B DT_PointCamera::g_SendTableInit
 B DT_PointCommentaryNode::g_SendTable
 B DT_PointCommentaryNode::g_SendTableInit
 B DT_PoseController::g_SendTable
 B DT_PoseController::g_SendTableInit
 B DT_Precipitation::g_SendTable
 B DT_Precipitation::g_SendTableInit
 B DT_PredictableId::g_SendTable
 B DT_PredictableId::g_SendTableInit
 B DT_PropVehicleDriveable::g_SendTable
 B DT_PropVehicleDriveable::g_SendTableInit
 B DT_ProxyToggle::g_SendTable
 B DT_ProxyToggle::g_SendTableInit
 B DT_ProxyToggle_ProxiedData::g_SendTable
 B DT_ProxyToggle_ProxiedData::g_SendTableInit
 B DT_QuadraticBeam::g_SendTable
 B DT_QuadraticBeam::g_SendTableInit
 B DT_Ragdoll::g_SendTable
 B DT_Ragdoll::g_SendTableInit
 B DT_RagdollManager::g_SendTable
 B DT_RagdollManager::g_SendTableInit
 B DT_Ragdoll_Attached::g_SendTable
 B DT_Ragdoll_Attached::g_SendTableInit
 B DT_RobotDispenser::g_SendTable
 B DT_RobotDispenser::g_SendTableInit
 B DT_RocketTrail::g_SendTable
 B DT_RocketTrail::g_SendTableInit
 B DT_RopeKeyframe::g_SendTable
 B DT_RopeKeyframe::g_SendTableInit
 B DT_SceneEntity::g_SendTable
 B DT_SceneEntity::g_SendTableInit
 B DT_ScriptCreatedAttribute::g_SendTable
 B DT_ScriptCreatedAttribute::g_SendTableInit
 B DT_ScriptCreatedItem::g_SendTable
 B DT_ScriptCreatedItem::g_SendTableInit
 B DT_SentrygunLocalData::g_SendTable
 B DT_SentrygunLocalData::g_SendTableInit
 B DT_ServerAnimationData::g_SendTable
 B DT_ServerAnimationData::g_SendTableInit
 B DT_ShadowControl::g_SendTable
 B DT_ShadowControl::g_SendTableInit
 B DT_SlideshowDisplay::g_SendTable
 B DT_SlideshowDisplay::g_SendTableInit
 B DT_SmokeStack::g_SendTable
 B DT_SmokeStack::g_SendTableInit
 B DT_SmokeTrail::g_SendTable
 B DT_SmokeTrail::g_SendTableInit
 B DT_SniperDot::g_SendTable
 B DT_SniperDot::g_SendTableInit
 B DT_SniperRifleLocalData::g_SendTable
 B DT_SniperRifleLocalData::g_SendTableInit
 B DT_SporeExplosion::g_SendTable
 B DT_SporeExplosion::g_SendTableInit
 B DT_SporeTrail::g_SendTable
 B DT_SporeTrail::g_SendTableInit
 B DT_SpotlightEnd::g_SendTable
 B DT_SpotlightEnd::g_SendTableInit
 B DT_Sprite::g_SendTable
 B DT_Sprite::g_SendTableInit
 B DT_SpriteOriented::g_SendTable
 B DT_SpriteOriented::g_SendTableInit
 B DT_SpriteTrail::g_SendTable
 B DT_SpriteTrail::g_SendTableInit
 B DT_SteamJet::g_SendTable
 B DT_SteamJet::g_SendTableInit
 B DT_Sun::g_SendTable
 B DT_Sun::g_SendTableInit
 B DT_TEArmorRicochet::g_SendTable
 B DT_TEArmorRicochet::g_SendTableInit
 B DT_TEBSPDecal::g_SendTable
 B DT_TEBSPDecal::g_SendTableInit
 B DT_TEBeamEntPoint::g_SendTable
 B DT_TEBeamEntPoint::g_SendTableInit
 B DT_TEBeamEnts::g_SendTable
 B DT_TEBeamEnts::g_SendTableInit
 B DT_TEBeamFollow::g_SendTable
 B DT_TEBeamFollow::g_SendTableInit
 B DT_TEBeamLaser::g_SendTable
 B DT_TEBeamLaser::g_SendTableInit
 B DT_TEBeamPoints::g_SendTable
 B DT_TEBeamPoints::g_SendTableInit
 B DT_TEBeamRing::g_SendTable
 B DT_TEBeamRing::g_SendTableInit
 B DT_TEBeamRingPoint::g_SendTable
 B DT_TEBeamRingPoint::g_SendTableInit
 B DT_TEBeamSpline::g_SendTable
 B DT_TEBeamSpline::g_SendTableInit
 B DT_TEBloodSprite::g_SendTable
 B DT_TEBloodSprite::g_SendTableInit
 B DT_TEBloodStream::g_SendTable
 B DT_TEBloodStream::g_SendTableInit
 B DT_TEBreakModel::g_SendTable
 B DT_TEBreakModel::g_SendTableInit
 B DT_TEBubbleTrail::g_SendTable
 B DT_TEBubbleTrail::g_SendTableInit
 B DT_TEBubbles::g_SendTable
 B DT_TEBubbles::g_SendTableInit
 B DT_TEClientProjectile::g_SendTable
 B DT_TEClientProjectile::g_SendTableInit
 B DT_TEDecal::g_SendTable
 B DT_TEDecal::g_SendTableInit
 B DT_TEDust::g_SendTable
 B DT_TEDust::g_SendTableInit
 B DT_TEDynamicLight::g_SendTable
 B DT_TEDynamicLight::g_SendTableInit
 B DT_TEEffectDispatch::g_SendTable
 B DT_TEEffectDispatch::g_SendTableInit
 B DT_TEEnergySplash::g_SendTable
 B DT_TEEnergySplash::g_SendTableInit
 B DT_TEExplosion::g_SendTable
 B DT_TEExplosion::g_SendTableInit
 B DT_TEFireBullets::g_SendTable
 B DT_TEFireBullets::g_SendTableInit
 B DT_TEFizz::g_SendTable
 B DT_TEFizz::g_SendTableInit
 B DT_TEFootprintDecal::g_SendTable
 B DT_TEFootprintDecal::g_SendTableInit
 B DT_TEGaussExplosion::g_SendTable
 B DT_TEGaussExplosion::g_SendTableInit
 B DT_TEGlowSprite::g_SendTable
 B DT_TEGlowSprite::g_SendTableInit
 B DT_TEImpact::g_SendTable
 B DT_TEImpact::g_SendTableInit
 B DT_TEKillPlayerAttachments::g_SendTable
 B DT_TEKillPlayerAttachments::g_SendTableInit
 B DT_TELargeFunnel::g_SendTable
 B DT_TELargeFunnel::g_SendTableInit
 B DT_TEMetalSparks::g_SendTable
 B DT_TEMetalSparks::g_SendTableInit
 B DT_TEMuzzleFlash::g_SendTable
 B DT_TEMuzzleFlash::g_SendTableInit
 B DT_TEParticleSystem::g_SendTable
 B DT_TEParticleSystem::g_SendTableInit
 B DT_TEPhysicsProp::g_SendTable
 B DT_TEPhysicsProp::g_SendTableInit
 B DT_TEPlayerAnimEvent::g_SendTable
 B DT_TEPlayerAnimEvent::g_SendTableInit
 B DT_TEPlayerDecal::g_SendTable
 B DT_TEPlayerDecal::g_SendTableInit
 B DT_TEProjectedDecal::g_SendTable
 B DT_TEProjectedDecal::g_SendTableInit
 B DT_TEShatterSurface::g_SendTable
 B DT_TEShatterSurface::g_SendTableInit
 B DT_TEShowLine::g_SendTable
 B DT_TEShowLine::g_SendTableInit
 B DT_TESmoke::g_SendTable
 B DT_TESmoke::g_SendTableInit
 B DT_TESparks::g_SendTable
 B DT_TESparks::g_SendTableInit
 B DT_TESprite::g_SendTable
 B DT_TESprite::g_SendTableInit
 B DT_TESpriteSpray::g_SendTable
 B DT_TESpriteSpray::g_SendTableInit
 B DT_TETFBlood::g_SendTable
 B DT_TETFBlood::g_SendTableInit
 B DT_TETFExplosion::g_SendTable
 B DT_TETFExplosion::g_SendTableInit
 B DT_TETFParticleEffect::g_SendTable
 B DT_TETFParticleEffect::g_SendTableInit
 B DT_TEWorldDecal::g_SendTable
 B DT_TEWorldDecal::g_SendTableInit
 B DT_TFBaseBoss::g_SendTable
 B DT_TFBaseBoss::g_SendTableInit
 B DT_TFBaseProjectile::g_SendTable
 B DT_TFBaseProjectile::g_SendTableInit
 B DT_TFBaseRocket::g_SendTable
 B DT_TFBaseRocket::g_SendTableInit
 B DT_TFBotHintEngineerNest::g_SendTable
 B DT_TFBotHintEngineerNest::g_SendTableInit
 B DT_TFCannon::g_SendTable
 B DT_TFCannon::g_SendTableInit
 B DT_TFDroppedWeapon::g_SendTable
 B DT_TFDroppedWeapon::g_SendTableInit
 B DT_TFFlameRocket::g_SendTable
 B DT_TFFlameRocket::g_SendTableInit
 B DT_TFGameRules::g_SendTable
 B DT_TFGameRules::g_SendTableInit
 B DT_TFGameRulesProxy::g_SendTable
 B DT_TFGameRulesProxy::g_SendTableInit
 B DT_TFGenericBomb::g_SendTable
 B DT_TFGenericBomb::g_SendTableInit
 B DT_TFGlow::g_SendTable
 B DT_TFGlow::g_SendTableInit
 B DT_TFHalloweenMinigame::g_SendTable
 B DT_TFHalloweenMinigame::g_SendTableInit
 B DT_TFHalloweenMinigame_FallingPlatforms::g_SendTable
 B DT_TFHalloweenMinigame_FallingPlatforms::g_SendTableInit
 B DT_TFHellZap::g_SendTable
 B DT_TFHellZap::g_SendTableInit
 B DT_TFItem::g_SendTable
 B DT_TFItem::g_SendTableInit
 B DT_TFLaserPointer::g_SendTable
 B DT_TFLaserPointer::g_SendTableInit
 B DT_TFLocalPlayerExclusive::g_SendTable
 B DT_TFLocalPlayerExclusive::g_SendTableInit
 B DT_TFLunchBox_Drink::g_SendTable
 B DT_TFLunchBox_Drink::g_SendTableInit
 B DT_TFMechanicalArm::g_SendTable
 B DT_TFMechanicalArm::g_SendTableInit
 B DT_TFMedigunShield::g_SendTable
 B DT_TFMedigunShield::g_SendTableInit
 B DT_TFMinigame::g_SendTable
 B DT_TFMinigame::g_SendTableInit
 B DT_TFMinigameLogic::g_SendTable
 B DT_TFMinigameLogic::g_SendTableInit
 B DT_TFNonLocalPlayerExclusive::g_SendTable
 B DT_TFNonLocalPlayerExclusive::g_SendTableInit
 B DT_TFObjectiveResource::g_SendTable
 B DT_TFObjectiveResource::g_SendTableInit
 B DT_TFPEPBrawlerBlaster::g_SendTable
 B DT_TFPEPBrawlerBlaster::g_SendTableInit
 B DT_TFParachute::g_SendTable
 B DT_TFParachute::g_SendTableInit
 B DT_TFParachute_Primary::g_SendTable
 B DT_TFParachute_Primary::g_SendTableInit
 B DT_TFParachute_Secondary::g_SendTable
 B DT_TFParachute_Secondary::g_SendTableInit
 B DT_TFPasstimeLogic::g_SendTable
 B DT_TFPasstimeLogic::g_SendTableInit
 B DT_TFPlayer::g_SendTable
 B DT_TFPlayer::g_SendTableInit
 B DT_TFPlayerClassShared::g_SendTable
 B DT_TFPlayerClassShared::g_SendTableInit
 B DT_TFPlayerConditionListExclusive::g_SendTable
 B DT_TFPlayerConditionListExclusive::g_SendTableInit
 B DT_TFPlayerConditionSource::g_SendTable
 B DT_TFPlayerConditionSource::g_SendTableInit
 B DT_TFPlayerDestructionLogic::g_SendTable
 B DT_TFPlayerDestructionLogic::g_SendTableInit
 B DT_TFPlayerResource::g_SendTable
 B DT_TFPlayerResource::g_SendTableInit
 B DT_TFPlayerScoringDataExclusive::g_SendTable
 B DT_TFPlayerScoringDataExclusive::g_SendTableInit
 B DT_TFPlayerShared::g_SendTable
 B DT_TFPlayerShared::g_SendTableInit
 B DT_TFPlayerSharedLocal::g_SendTable
 B DT_TFPlayerSharedLocal::g_SendTableInit
 B DT_TFPowerupBottle::g_SendTable
 B DT_TFPowerupBottle::g_SendTableInit
 B DT_TFProjectileBall_Ornament::g_SendTable
 B DT_TFProjectileBall_Ornament::g_SendTableInit
 B DT_TFProjectile_Arrow::g_SendTable
 B DT_TFProjectile_Arrow::g_SendTableInit
 B DT_TFProjectile_Cleaver::g_SendTable
 B DT_TFProjectile_Cleaver::g_SendTableInit
 B DT_TFProjectile_EnergyBall::g_SendTable
 B DT_TFProjectile_EnergyBall::g_SendTableInit
 B DT_TFProjectile_EnergyRing::g_SendTable
 B DT_TFProjectile_EnergyRing::g_SendTableInit
 B DT_TFProjectile_Flare::g_SendTable
 B DT_TFProjectile_Flare::g_SendTableInit
 B DT_TFProjectile_GrapplingHook::g_SendTable
 B DT_TFProjectile_GrapplingHook::g_SendTableInit
 B DT_TFProjectile_HealingBolt::g_SendTable
 B DT_TFProjectile_HealingBolt::g_SendTableInit
 B DT_TFProjectile_Jar::g_SendTable
 B DT_TFProjectile_Jar::g_SendTableInit
 B DT_TFProjectile_JarMilk::g_SendTable
 B DT_TFProjectile_JarMilk::g_SendTableInit
 B DT_TFProjectile_Pipebomb::g_SendTable
 B DT_TFProjectile_Pipebomb::g_SendTableInit
 B DT_TFProjectile_Rocket::g_SendTable
 B DT_TFProjectile_Rocket::g_SendTableInit
 B DT_TFProjectile_SentryRocket::g_SendTable
 B DT_TFProjectile_SentryRocket::g_SendTableInit
 B DT_TFProjectile_SpellBats::g_SendTable
 B DT_TFProjectile_SpellBats::g_SendTableInit
 B DT_TFProjectile_SpellFireball::g_SendTable
 B DT_TFProjectile_SpellFireball::g_SendTableInit
 B DT_TFProjectile_SpellKartBats::g_SendTable
 B DT_TFProjectile_SpellKartBats::g_SendTableInit
 B DT_TFProjectile_SpellKartOrb::g_SendTable
 B DT_TFProjectile_SpellKartOrb::g_SendTableInit
 B DT_TFProjectile_SpellLightningOrb::g_SendTable
 B DT_TFProjectile_SpellLightningOrb::g_SendTableInit
 B DT_TFProjectile_SpellMeteorShower::g_SendTable
 B DT_TFProjectile_SpellMeteorShower::g_SendTableInit
 B DT_TFProjectile_SpellMirv::g_SendTable
 B DT_TFProjectile_SpellMirv::g_SendTableInit
 B DT_TFProjectile_SpellPumpkin::g_SendTable
 B DT_TFProjectile_SpellPumpkin::g_SendTableInit
 B DT_TFProjectile_SpellSpawnBoss::g_SendTable
 B DT_TFProjectile_SpellSpawnBoss::g_SendTableInit
 B DT_TFProjectile_SpellSpawnHorde::g_SendTable
 B DT_TFProjectile_SpellSpawnHorde::g_SendTableInit
 B DT_TFProjectile_SpellSpawnZombie::g_SendTable
 B DT_TFProjectile_SpellSpawnZombie::g_SendTableInit
 B DT_TFProjectile_StunBall::g_SendTable
 B DT_TFProjectile_StunBall::g_SendTableInit
 B DT_TFProjectile_Throwable::g_SendTable
 B DT_TFProjectile_Throwable::g_SendTableInit
 B DT_TFProjectile_ThrowableBreadMonster::g_SendTable
 B DT_TFProjectile_ThrowableBreadMonster::g_SendTableInit
 B DT_TFProjectile_ThrowableBrick::g_SendTable
 B DT_TFProjectile_ThrowableBrick::g_SendTableInit
 B DT_TFProjectile_ThrowableRepel::g_SendTable
 B DT_TFProjectile_ThrowableRepel::g_SendTableInit
 B DT_TFPumpkinBomb::g_SendTable
 B DT_TFPumpkinBomb::g_SendTableInit
 B DT_TFRagdoll::g_SendTable
 B DT_TFRagdoll::g_SendTableInit
 B DT_TFReviveMarker::g_SendTable
 B DT_TFReviveMarker::g_SendTableInit
 B DT_TFRobotDestructionLogic::g_SendTable
 B DT_TFRobotDestructionLogic::g_SendTableInit
 B DT_TFRobotDestructionRobotSpawn::g_SendTable
 B DT_TFRobotDestructionRobotSpawn::g_SendTableInit
 B DT_TFRobotDestruction_Robot::g_SendTable
 B DT_TFRobotDestruction_Robot::g_SendTableInit
 B DT_TFRobotDestruction_RobotGroup::g_SendTable
 B DT_TFRobotDestruction_RobotGroup::g_SendTableInit
 B DT_TFSMG::g_SendTable
 B DT_TFSMG::g_SendTableInit
 B DT_TFScatterGun::g_SendTable
 B DT_TFScatterGun::g_SendTableInit
 B DT_TFSendHealersDataTable::g_SendTable
 B DT_TFSendHealersDataTable::g_SendTableInit
 B DT_TFShotgun::g_SendTable
 B DT_TFShotgun::g_SendTableInit
 B DT_TFShotgunBuildingRescue::g_SendTable
 B DT_TFShotgunBuildingRescue::g_SendTableInit
 B DT_TFShotgun_HWG::g_SendTable
 B DT_TFShotgun_HWG::g_SendTableInit
 B DT_TFShotgun_Pyro::g_SendTable
 B DT_TFShotgun_Pyro::g_SendTableInit
 B DT_TFShotgun_Revenge::g_SendTable
 B DT_TFShotgun_Revenge::g_SendTableInit
 B DT_TFShotgun_Soldier::g_SendTable
 B DT_TFShotgun_Soldier::g_SendTableInit
 B DT_TFSniperRifle::g_SendTable
 B DT_TFSniperRifle::g_SendTableInit
 B DT_TFSniperRifleClassic::g_SendTable
 B DT_TFSniperRifleClassic::g_SendTableInit
 B DT_TFSniperRifleDecap::g_SendTable
 B DT_TFSniperRifleDecap::g_SendTableInit
 B DT_TFSodaPopper::g_SendTable
 B DT_TFSodaPopper::g_SendTableInit
 B DT_TFTankBoss::g_SendTable
 B DT_TFTankBoss::g_SendTableInit
 B DT_TFTauntProp::g_SendTable
 B DT_TFTauntProp::g_SendTableInit
 B DT_TFTeam::g_SendTable
 B DT_TFTeam::g_SendTableInit
 B DT_TFViewModel::g_SendTable
 B DT_TFViewModel::g_SendTableInit
 B DT_TFWeaponBase::g_SendTable
 B DT_TFWeaponBase::g_SendTableInit
 B DT_TFWeaponBaseGrenadeProj::g_SendTable
 B DT_TFWeaponBaseGrenadeProj::g_SendTableInit
 B DT_TFWeaponBaseGun::g_SendTable
 B DT_TFWeaponBaseGun::g_SendTableInit
 B DT_TFWeaponBaseMelee::g_SendTable
 B DT_TFWeaponBaseMelee::g_SendTableInit
 B DT_TFWeaponBaseMerasmusGrenade::g_SendTable
 B DT_TFWeaponBaseMerasmusGrenade::g_SendTableInit
 B DT_TFWeaponBat::g_SendTable
 B DT_TFWeaponBat::g_SendTableInit
 B DT_TFWeaponBat_Fish::g_SendTable
 B DT_TFWeaponBat_Fish::g_SendTableInit
 B DT_TFWeaponBat_Giftwrap::g_SendTable
 B DT_TFWeaponBat_Giftwrap::g_SendTableInit
 B DT_TFWeaponBat_Wood::g_SendTable
 B DT_TFWeaponBat_Wood::g_SendTableInit
 B DT_TFWeaponBonesaw::g_SendTable
 B DT_TFWeaponBonesaw::g_SendTableInit
 B DT_TFWeaponBottle::g_SendTable
 B DT_TFWeaponBottle::g_SendTableInit
 B DT_TFWeaponBuffItem::g_SendTable
 B DT_TFWeaponBuffItem::g_SendTableInit
 B DT_TFWeaponBuilder::g_SendTable
 B DT_TFWeaponBuilder::g_SendTableInit
 B DT_TFWeaponCleaver::g_SendTable
 B DT_TFWeaponCleaver::g_SendTableInit
 B DT_TFWeaponClub::g_SendTable
 B DT_TFWeaponClub::g_SendTableInit
 B DT_TFWeaponDataNonLocal::g_SendTable
 B DT_TFWeaponDataNonLocal::g_SendTableInit
 B DT_TFWeaponFireAxe::g_SendTable
 B DT_TFWeaponFireAxe::g_SendTableInit
 B DT_TFWeaponFists::g_SendTable
 B DT_TFWeaponFists::g_SendTableInit
 B DT_TFWeaponInvis::g_SendTable
 B DT_TFWeaponInvis::g_SendTableInit
 B DT_TFWeaponJar::g_SendTable
 B DT_TFWeaponJar::g_SendTableInit
 B DT_TFWeaponJarMilk::g_SendTable
 B DT_TFWeaponJarMilk::g_SendTableInit
 B DT_TFWeaponKatana::g_SendTable
 B DT_TFWeaponKatana::g_SendTableInit
 B DT_TFWeaponKnife::g_SendTable
 B DT_TFWeaponKnife::g_SendTableInit
 B DT_TFWeaponMedigunDataNonLocal::g_SendTable
 B DT_TFWeaponMedigunDataNonLocal::g_SendTableInit
 B DT_TFWeaponPDA::g_SendTable
 B DT_TFWeaponPDA::g_SendTableInit
 B DT_TFWeaponPDAExpansion_Dispenser::g_SendTable
 B DT_TFWeaponPDAExpansion_Dispenser::g_SendTableInit
 B DT_TFWeaponPDAExpansion_Teleporter::g_SendTable
 B DT_TFWeaponPDAExpansion_Teleporter::g_SendTableInit
 B DT_TFWeaponPDA_Engineer_Build::g_SendTable
 B DT_TFWeaponPDA_Engineer_Build::g_SendTableInit
 B DT_TFWeaponPDA_Engineer_Destroy::g_SendTable
 B DT_TFWeaponPDA_Engineer_Destroy::g_SendTableInit
 B DT_TFWeaponPDA_Spy::g_SendTable
 B DT_TFWeaponPDA_Spy::g_SendTableInit
 B DT_TFWeaponRobotArm::g_SendTable
 B DT_TFWeaponRobotArm::g_SendTableInit
 B DT_TFWeaponSapper::g_SendTable
 B DT_TFWeaponSapper::g_SendTableInit
 B DT_TFWeaponShovel::g_SendTable
 B DT_TFWeaponShovel::g_SendTableInit
 B DT_TFWeaponSpellBook::g_SendTable
 B DT_TFWeaponSpellBook::g_SendTableInit
 B DT_TFWeaponStickBomb::g_SendTable
 B DT_TFWeaponStickBomb::g_SendTableInit
 B DT_TFWeaponSword::g_SendTable
 B DT_TFWeaponSword::g_SendTableInit
 B DT_TFWeaponThrowable::g_SendTable
 B DT_TFWeaponThrowable::g_SendTableInit
 B DT_TFWeaponWrench::g_SendTable
 B DT_TFWeaponWrench::g_SendTableInit
 B DT_TFWearable::g_SendTable
 B DT_TFWearable::g_SendTableInit
 B DT_TFWearableDemoShield::g_SendTable
 B DT_TFWearableDemoShield::g_SendTableInit
 B DT_TFWearableItem::g_SendTable
 B DT_TFWearableItem::g_SendTableInit
 B DT_TFWearableLevelableItem::g_SendTable
 B DT_TFWearableLevelableItem::g_SendTableInit
 B DT_TFWearableRobotArm::g_SendTable
 B DT_TFWearableRobotArm::g_SendTableInit
 B DT_TFWearableVM::g_SendTable
 B DT_TFWearableVM::g_SendTableInit
 B DT_Team::g_SendTable
 B DT_Team::g_SendTableInit
 B DT_TeamRoundTimer::g_SendTable
 B DT_TeamRoundTimer::g_SendTableInit
 B DT_TeamTrainWatcher::g_SendTable
 B DT_TeamTrainWatcher::g_SendTableInit
 B DT_TeamplayRoundBasedRules::g_SendTable
 B DT_TeamplayRoundBasedRules::g_SendTableInit
 B DT_TeamplayRoundBasedRulesProxy::g_SendTable
 B DT_TeamplayRoundBasedRulesProxy::g_SendTableInit
 B DT_TeleportVortex::g_SendTable
 B DT_TeleportVortex::g_SendTableInit
 B DT_Tesla::g_SendTable
 B DT_Tesla::g_SendTableInit
 B DT_TestTraceline::g_SendTable
 B DT_TestTraceline::g_SendTableInit
 B DT_VGuiScreen::g_SendTable
 B DT_VGuiScreen::g_SendTableInit
 B DT_VoteController::g_SendTable
 B DT_VoteController::g_SendTableInit
 B DT_WORLD::g_SendTable
 B DT_WORLD::g_SendTableInit
 B DT_WaterBullet::g_SendTable
 B DT_WaterBullet::g_SendTableInit
 B DT_WaterLODControl::g_SendTable
 B DT_WaterLODControl::g_SendTableInit
 B DT_WeaponChargedSMG::g_SendTable
 B DT_WeaponChargedSMG::g_SendTableInit
 B DT_WeaponCompoundBow::g_SendTable
 B DT_WeaponCompoundBow::g_SendTableInit
 B DT_WeaponDRGPomson::g_SendTable
 B DT_WeaponDRGPomson::g_SendTableInit
 B DT_WeaponFlameThrower::g_SendTable
 B DT_WeaponFlameThrower::g_SendTableInit
 B DT_WeaponFlareGun::g_SendTable
 B DT_WeaponFlareGun::g_SendTableInit
 B DT_WeaponFlareGun_Revenge::g_SendTable
 B DT_WeaponFlareGun_Revenge::g_SendTableInit
 B DT_WeaponGrenadeLauncher::g_SendTable
 B DT_WeaponGrenadeLauncher::g_SendTableInit
 B DT_WeaponIFMBase::g_SendTable
 B DT_WeaponIFMBase::g_SendTableInit
 B DT_WeaponIFMBaseCamera::g_SendTable
 B DT_WeaponIFMBaseCamera::g_SendTableInit
 B DT_WeaponIFMSteadyCam::g_SendTable
 B DT_WeaponIFMSteadyCam::g_SendTableInit
 B DT_WeaponLunchBox::g_SendTable
 B DT_WeaponLunchBox::g_SendTableInit
 B DT_WeaponMedigun::g_SendTable
 B DT_WeaponMedigun::g_SendTableInit
 B DT_WeaponMinigun::g_SendTable
 B DT_WeaponMinigun::g_SendTableInit
 B DT_WeaponPipebombLauncher::g_SendTable
 B DT_WeaponPipebombLauncher::g_SendTableInit
 B DT_WeaponPistol::g_SendTable
 B DT_WeaponPistol::g_SendTableInit
 B DT_WeaponPistol_Scout::g_SendTable
 B DT_WeaponPistol_Scout::g_SendTableInit
 B DT_WeaponPistol_ScoutPrimary::g_SendTable
 B DT_WeaponPistol_ScoutPrimary::g_SendTableInit
 B DT_WeaponPistol_ScoutSecondary::g_SendTable
 B DT_WeaponPistol_ScoutSecondary::g_SendTableInit
 B DT_WeaponRaygun::g_SendTable
 B DT_WeaponRaygun::g_SendTableInit
 B DT_WeaponRevolver::g_SendTable
 B DT_WeaponRevolver::g_SendTableInit
 B DT_WeaponRocketLauncher::g_SendTable
 B DT_WeaponRocketLauncher::g_SendTableInit
 B DT_WeaponRocketLauncher_AirStrike::g_SendTable
 B DT_WeaponRocketLauncher_AirStrike::g_SendTableInit
 B DT_WeaponRocketLauncher_DirectHit::g_SendTable
 B DT_WeaponRocketLauncher_DirectHit::g_SendTableInit
 B DT_WeaponRocketLauncher_Mortar::g_SendTable
 B DT_WeaponRocketLauncher_Mortar::g_SendTableInit
 B DT_WeaponSyringeGun::g_SendTable
 B DT_WeaponSyringeGun::g_SendTableInit
 B DT_WearableItem::g_SendTable
 B DT_WearableItem::g_SendTableInit
 B DT_Zombie::g_SendTable
 B DT_Zombie::g_SendTableInit
 B DevShotSystem
 B DrawBattleLines
 B DustTrail_DataDescInit::g_DataMapHolder
 B EntityParticleTrailInfo_t_DataDescInit::g_DataMapHolder
 B EventQueuePrioritizedEvent_t::s_Allocator
 B EventQueuePrioritizedEvent_t_DataDescInit::g_DataMapHolder
 B FilterDamageType_DataDescInit::g_DataMapHolder
 B FilterDamagedByWeaponInSlot_DataDescInit::g_DataMapHolder
 B FilterTeam_DataDescInit::g_DataMapHolder
 B GCSDK::CJobTime::sm_lTimeCur
 B GCSDK::CMessageListRegistration::sm_pFirst
 B GCSDK::CNetPacketPool::sm_MemPoolNetPacket
 B GCSDK::CProtoBufMsgBase::s_PoolRegMutex
 B GCSDK::CSharedObject::sm_mapFactories
 B GCSDK::CWorkThreadPool::sm_pWorkItemsCompletedSignal
 B GCSDK::g_EGMessages
 B GCSDK::g_MemPoolMsg
 B GCSDK::g_cNetPacket
 B GCSDK::g_pJobCur
 B GCSDK::g_theMessageList
 B HidingSpot::m_masterMarker
 B HintNodeData_DataDescInit::g_DataMapHolder
 B Human_Hull
 B IBaseObjectAutoList::m_IBaseObjectAutoListAutoList
 B IBaseProjectileAutoList::m_IBaseProjectileAutoListAutoList
 B IBonusPackAutoList::m_IBonusPackAutoListAutoList
 B ICaptureFlagAutoList::m_ICaptureFlagAutoListAutoList
 B ICaptureZoneAutoList::m_ICaptureZoneAutoListAutoList
 B ICurrencyPackAutoList::m_ICurrencyPackAutoListAutoList
 B IDroppedWeaponAutoList::m_IDroppedWeaponAutoListAutoList
 B IExtraMapEntityAutoList::m_IExtraMapEntityAutoListAutoList
 B IEyeballBossAutoList::m_IEyeballBossAutoListAutoList
 B IFlagDetectionZoneAutoList::m_IFlagDetectionZoneAutoListAutoList
 B IFuncForceFieldAutoList::m_IFuncForceFieldAutoListAutoList
 B IFuncNavPrerequisiteAutoList::m_IFuncNavPrerequisiteAutoListAutoList
 B IFuncNoBuildAutoList::m_IFuncNoBuildAutoListAutoList
 B IFuncPasstimeGoalieZoneAutoList::m_IFuncPasstimeGoalieZoneAutoListAutoList
 B IFuncPasstimeNoBallZoneAutoList::m_IFuncPasstimeNoBallZoneAutoListAutoList
 B IFuncPowerupVolumeAutoList::m_IFuncPowerupVolumeAutoListAutoList
 B IFuncRespawnRoomAutoList::m_IFuncRespawnRoomAutoListAutoList
 B IFuncRespawnRoomVisualizerAutoList::m_IFuncRespawnRoomVisualizerAutoListAutoList
 B IHalloweenGiftSpawnAutoList::m_IHalloweenGiftSpawnAutoListAutoList
 B IHealthKitAutoList::m_IHealthKitAutoListAutoList
 B IInfoPowerupSpawnAutoList::m_IInfoPowerupSpawnAutoListAutoList
 B IMerasmusAutoList::m_IMerasmusAutoListAutoList
 B IMinigameAutoList::m_IMinigameAutoListAutoList
 B IMoveHelper::sm_pSingleton
 B IPasstimeBallSpawnAutoList::m_IPasstimeBallSpawnAutoListAutoList
 B IPhysicsPropAutoList::m_IPhysicsPropAutoListAutoList
 B IPredictionSystem::g_pPredictionSystems
 B IRobotDestructionGroupAutoList::m_IRobotDestructionGroupAutoListAutoList
 B ITFBotHintEntityAutoList::m_ITFBotHintEntityAutoListAutoList
 B ITFFlameEntityAutoList::m_ITFFlameEntityAutoListAutoList
 B ITFGenericBomb::m_ITFGenericBombAutoList
 B ITFMerasmusTrickOrTreatProp::m_ITFMerasmusTrickOrTreatPropAutoList
 B ITFPumpkinBomb::m_ITFPumpkinBombAutoList
 B ITFTargetDummy::m_ITFTargetDummyAutoList
 B ITFTeamSpawnAutoList::m_ITFTeamSpawnAutoListAutoList
 B ITFTeamTrainWatcher::m_ITFTeamTrainWatcherAutoList
 B ITFTeleportLocationAutoList::m_ITFTeleportLocationAutoListAutoList
 B ITriggerAreaCaptureAutoList::m_ITriggerAreaCaptureAutoListAutoList
 B ITriggerHurtAutoList::m_ITriggerHurtAutoListAutoList
 B ITriggerPlayerRespawnOverride::m_ITriggerPlayerRespawnOverrideAutoList
 B IZombieAutoList::m_IZombieAutoListAutoList
 B InterfaceReg::s_pInterfaceRegs
 B Large_Centered_Hull
 B Large_Hull
 B ListIssues
 B Medium_Hull
 B Medium_Tall_Hull
 B NavTraceMaxs
 B NavTraceMins
 B NextBotAllowAvoiding
 B NextBotAllowClimbing
 B NextBotAllowGapJumping
 B NextBotCombatCharacter_DataDescInit::g_DataMapHolder
 B NextBotDebugClimbing
 B NextBotDebugHistory
 B NextBotGoalLookAheadRange
 B NextBotLadderAlignRange
 B NextBotManager::sInstance
 B NextBotPathDrawIncrement
 B NextBotPathDrawSegmentCount
 B NextBotPathSegmentInfluenceRadius
 B NextBotPlayerCrouch
 B NextBotPlayerMove
 B NextBotPlayerMoveDirect
 B NextBotPlayerStop
 B NextBotPlayerWalk
 B NextBotSpeedLookAheadRange
 B NextBotStop
 B ParticleSmokeGrenade_DataDescInit::g_DataMapHolder
 B PhysBlockHeader_t_DataDescInit::g_DataMapHolder
 B PhysObjectHeader_t_DataDescInit::g_DataMapHolder
 B Relationship_t_DataDescInit::g_DataMapHolder
 B ResponseContext_t_DataDescInit::g_DataMapHolder
 B ResponseGroup_DataDescInit::g_DataMapHolder
 B Response_DataDescInit::g_DataMapHolder
 B RocketTrail_DataDescInit::g_DataMapHolder
 B SaveRestoreBlockHeader_t_DataDescInit::g_DataMapHolder
 B ScriptedNPCInteraction_Phases_t_DataDescInit::g_DataMapHolder
 B ScriptedNPCInteraction_t_DataDescInit::g_DataMapHolder
 B SinCosTable
 B Small_Centered_Hull
 B SmokeTrail_DataDescInit::g_DataMapHolder
 B SoundCommand_t::s_Allocator
 B SoundCommand_t_DataDescInit::g_DataMapHolder
 B SpellTransposeTeleport::g_SendTable
 B SpellTransposeTeleport::g_SendTableInit
 B SporeExplosion_DataDescInit::g_DataMapHolder
 B SporeTrail_DataDescInit::g_DataMapHolder
 B TF_Gamestats_RoundStats_t::m_iNumRounds
 B TF_Gamestats_RoundStats_t::m_iRoundStartTime
 B TemplateEntityData_t_DataDescInit::g_DataMapHolder
 B Test_EHandle
 B TheHidingSpots
 B TheNavAreas
 B TheNavMesh
 B Tiny_Centered_Hull
 B Tiny_Hull
 B UnreachableEnt_t_DataDescInit::g_DataMapHolder
 B ViewSmoothingData_t_DataDescInit::g_DataMapHolder
 B VoteControllerSystem
 B Wide_Human_Hull
 B Wide_Short_Hull
 B ai_LOS_mode
 B ai_auto_contact_solver
 B ai_block_damage
 B ai_debug_assault
 B ai_debug_avoidancebounds
 B ai_debug_directnavprobe
 B ai_debug_doors
 B ai_debug_dyninteractions
 B ai_debug_efficiency
 B ai_debug_enemies
 B ai_debug_expressions
 B ai_debug_follow
 B ai_debug_loners
 B ai_debug_looktargets
 B ai_debug_los
 B ai_debug_nav
 B ai_debug_ragdoll_magnets
 B ai_debug_shoot_positions
 B ai_debug_speech
 B ai_debug_squads
 B ai_debug_think_ticks
 B ai_default_efficient
 B ai_drop_hint
 B ai_efficiency_override
 B ai_enable_fear_behavior
 B ai_expression_frametime
 B ai_expression_optimization
 B ai_fear_player_dist
 B ai_find_lateral_cover
 B ai_find_lateral_los
 B ai_follow_use_points
 B ai_follow_use_points_when_moving
 B ai_force_serverside_ragdoll
 B ai_frametime_limit
 B ai_inhibit_spawners
 B ai_lead_time
 B ai_moveprobe_debug
 B ai_moveprobe_jump_debug
 B ai_moveprobe_usetracelist
 B ai_navigator_generate_spikes
 B ai_navigator_generate_spikes_strength
 B ai_no_local_paths
 B ai_no_node_cache
 B ai_no_select_box
 B ai_no_steer
 B ai_no_talk_delay
 B ai_path_adjust_speed_on_immediate_turns
 B ai_path_insert_pause_at_est_end
 B ai_path_insert_pause_at_obstruction
 B ai_post_frame_navigation
 B ai_radial_max_link_dist
 B ai_reaction_delay_alert
 B ai_reaction_delay_idle
 B ai_rebalance_thinks
 B ai_report_task_timings_on_limit
 B ai_sequence_debug
 B ai_setupbones_debug
 B ai_shot_bias
 B ai_shot_bias_max
 B ai_shot_bias_min
 B ai_shot_stats
 B ai_shot_stats_term
 B ai_show_hull_attacks
 B ai_show_think_tolerance
 B ai_simulate_task_overtime
 B ai_spread_cone_focus_time
 B ai_spread_defocused_cone_multiplier
 B ai_spread_pattern_focus_time
 B ai_strong_optimizations
 B ai_strong_optimizations_no_checkstand
 B ai_task_pre_script
 B ai_test_moveprobe_ignoresmall
 B ai_think_limit_label
 B ai_use_clipped_paths
 B ai_use_efficiency
 B ai_use_frame_think_limits
 B ai_use_think_optimizations
 B ai_use_visibility_cache
 B ai_vehicle_avoidance
 B aimcrosshair
 B allowNPCs
 B ammo_max
 B anim_showstate
 B anim_showstatelog
 B audioparams_t_DataDescInit::g_DataMapHolder
 B autoaim_max_deflect
 B autoaim_max_dist
 B bot_changeclass
 B bot_com_meleerange
 B bot_com_viewrange
 B bot_com_wpnrange
 B bot_crouch
 B bot_debug
 B bot_dontmove
 B bot_forceattack
 B bot_forceattack2
 B bot_forceattack_down
 B bot_forcefireweapon
 B bot_jump
 B bot_mimic
 B bot_nav_offsetpathinset
 B bot_nav_recomputetime
 B bot_nav_simplifypaths
 B bot_nav_turnspeed
 B bot_nav_usefeelers
 B bot_nav_useoffsetpaths
 B bot_nav_wpdeceldistance
 B bot_nav_wpdistance
 B bot_randomnames
 B bot_saveme
 B bot_selectweaponslot
 B breakable_disable_gib_limit
 B breakable_multiplayer
 B catapult_physics_drag_boost
 B cc_CreatePredictionError
 B cc_TestSpawns
 B cc_Test_CreateEntity
 B cc_Test_InitRandomEntitySpawner
 B cc_Test_ProxyToggle_EnableProxy
 B cc_Test_ProxyToggle_SetValue
 B cc_Test_RandomPlayerPosition
 B cc_Test_RandomizeInPVS
 B cc_Test_RemoveAllRandomEntities
 B cc_Test_SpawnRandomEntities
 B cc_achievement_debug
 B changelevel_next
 B cl_backspeed
 B cl_flag_return_height
 B cl_forwardspeed
 B cl_sidespeed
 B cl_upspeed
 B collision_shake_amp
 B collision_shake_freq
 B collision_shake_time
 B colorcorrection
 B commentary
 B commentary_available
 B currenttoken
 B cvar
 B datacache
 B dbg_spew_connected_players_level
 B debug_materialmodifycontrol
 B debug_physimpact
 B debug_touchlinks
 B debugoverlay
 B debugscriptconditions
 B decalfrequency
 B defaultteam
 B developer
 B displaysoundlist
 B engine
 B enginesound
 B enginetrace
 B ent_debugkeys
 B ent_messages_draw
 B entitytable_t_DataDescInit::g_DataMapHolder
 B fSentencesInit
 B falldamage
 B filesystem
 B fire_absorbrate
 B fire_dmgbase
 B fire_dmginterval
 B fire_dmgscale
 B fire_extabsorb
 B fire_extscale
 B fire_growthrate
 B fire_heatscale
 B fire_incomingheatscale
 B fire_maxabsorb
 B fish_dormant
 B flashlight
 B flex_expression
 B flex_looktime
 B flex_maxawaytime
 B flex_maxplayertime
 B flex_minawaytime
 B flex_minplayertime
 B flex_talk
 B flexsetting_t_DataDescInit::g_DataMapHolder
 B flexsettinghdr_t_DataDescInit::g_DataMapHolder
 B flexweight_t_DataDescInit::g_DataMapHolder
 B fogparams_t_DataDescInit::g_DataMapHolder
 B fogplayerparams_t_DataDescInit::g_DataMapHolder
 B footsteps
 B forcerespawn
 B fraglimit
 B free_pass_peek_debug
 B friendlyfire
 B func_break_max_pieces
 B func_break_reduction_factor
 B func_breakdmg_bullet
 B func_breakdmg_club
 B func_breakdmg_explosive
 B gEntList
 B gEvilImpulse101
 B gMapInfoContainer
 B g_AIConditionsTimer
 B g_AIFoesTalkSemaphore
 B g_AIFollowManager
 B g_AIFriendliesTalkSemaphore
 B g_AIMaintainScheduleTimer
 B g_AIMoveTimer
 B g_AINetworkBuilder
 B g_AINextDisabledMessageTime
 B g_AIPostRunTimer
 B g_AIPrescheduleThinkTimer
 B g_AIRunTimer
 B g_AITaskTimings
 B g_AI_Manager
 B g_AI_MemoryListSaveRestoreOps
 B g_AI_SchedulesManager
 B g_AI_SensedObjectsManager
 B g_AI_SquadManager
 B g_ActiveGibCount
 B g_ActivityList
 B g_ActivityModifiersTable
 B g_ActivityStrings
 B g_AreaPortals
 B g_AttribColorDefs
 B g_BanMasks
 B g_BitWriteMasks
 B g_CheckClient
 B g_Collisions
 B g_CommentarySystem
 B g_Commentary_SaveRestoreBlockHandler
 B g_ComputedVis
 B g_DamageMap
 B g_DefaultResponseSystemSaveRestoreBlockHandler
 B g_EntListMemPool
 B g_EntityClassnames
 B g_EntityCollisionHash
 B g_EntityListPool
 B g_EntityOrientations
 B g_EntityPositions
 B g_EntitySaveRestoreBlockHandler
 B g_EventList
 B g_EventQueue
 B g_EventQueue_SaveRestoreBlockHandler
 B g_EventStrings
 B g_ExtraMasks
 B g_FlexSceneFileManager
 B g_HandleTest
 B g_InfoCameraLinkList
 B g_ItemGenerationSystem
 B g_KillEaterAttr
 B g_Language
 B g_LittleBits
 B g_MannVsMachineUpgrades
 B g_MapEntityRefs
 B g_MatrixPool
 B g_MultiDamage
 B g_NetworkPropertyEventMgr
 B g_ObjectInfos
 B g_ObjectsFileLoad
 B g_PhysObjSaveRestoreOps
 B g_PhysSaveRestoreBlockHandler
 B g_PhysWorldObject
 B g_PhysicsHook
 B g_PlayerModEnable
 B g_PlayerSurfaceTriggers
 B g_PointCameraList
 B g_PointTemplatePrecacher
 B g_PostFrameNavigationHook
 B g_PostSimulationQueue
 B g_PrecacheOtherList
 B g_PropDataSystem
 B g_QaternionPool
 B g_RagdollLVManager
 B g_RobotData
 B g_SaveRestoreBlockSet
 B g_SentBanMasks
 B g_SentGameRulesMasks
 B g_ServerGameDLL
 B g_SimThinkManager
 B g_SkyList
 B g_SolverList
 B g_SoundscapeSystem
 B g_StressEntities
 B g_StressEntityRegs
 B g_StringTableGameRules
 B g_TFClassViewVectors
 B g_TFEventLog
 B g_TFGameModeHistory
 B g_TFInventoryManager
 B g_TFMapsWorkshop
 B g_Teams
 B g_TemplateEntityHook
 B g_Template_SaveRestoreBlockHandler
 B g_TextStatsMgr
 B g_ThreadLocalCoroutineMgr
 B g_ThreadMutexCoroutineMgr
 B g_TokenProcessor
 B g_VBAllocTracker
 B g_VecPCoroutineMgr
 B g_VectorPool
 B g_VguiScreenStringOps
 B g_VoiceGameMgr
 B g_VoiceGameMgrHelper
 B g_WeaponList
 B g_ai_norebuildgraph
 B g_bAIDebugStep
 B g_bAIDisabledByUser
 B g_bBehaviorHost_PreventBaseClassGatherConditions
 B g_bDisableEhandleAccess
 B g_bInCommentaryMode
 B g_bLastSignatureCheck
 B g_bReceivedChainedUpdateOnRemove
 B g_bUnget
 B g_bWantModEnable
 B g_debug_angularsensor
 B g_debug_constraint_sounds
 B g_debug_doors
 B g_debug_npc_vehicle_roles
 B g_debug_ragdoll_removal
 B g_debug_trackpather
 B g_debug_transitions
 B g_debug_vehiclebase
 B g_debug_vehicledriver
 B g_debug_vehicleexit
 B g_debug_vehiclesound
 B g_duels
 B g_fGameOver
 B g_hControlPointMasters
 B g_hGameGibManager
 B g_hMannVsMachineLogic
 B g_hTestSub
 B g_hUpgradeEntity
 B g_hWeaponFireTriggers
 B g_iCurrentTemplateInstance
 B g_iDevShotCameraCount
 B g_iFrameLastSimplified
 B g_iSkillLevel
 B g_interactionHitByPlayerThrownPhysObj
 B g_interactionScriptedTarget
 B g_internalSpawnPoint
 B g_iszFuncBrushClassname
 B g_iszPhysicsPropClassname
 B g_nAITasksRun
 B g_nInsideDispatchUpdateTransmitState
 B g_nQuestSpewFlags
 B g_pAINetworkManager
 B g_pAttributeTypeName
 B g_pBigAINet
 B g_pCVar
 B g_pCurVisArea
 B g_pDataCache
 B g_pDebugEdictBase
 B g_pDeveloper
 B g_pDmeMakefileUtils
 B g_pForceAttachEdict
 B g_pFullFileSystem
 B g_pGameRules
 B g_pInputSystem
 B g_pLastSpawn
 B g_pLastSpawnPoints
 B g_pMDLCache
 B g_pMatSystemSurface
 B g_pMaterialSystem
 B g_pMaterialSystemDebugTextureInfo
 B g_pMaterialSystemHardwareConfig
 B g_pMonsterResource
 B g_pNavNodeHash
 B g_pNavVisPairHash
 B g_pNetworkSystem
 B g_pObjectiveResource
 B g_pPasstimeLogic
 B g_pPhysicsCollision
 B g_pPlayerResource
 B g_pPopulationManager
 B g_pProcessUtils
 B g_pQueuedLoader
 B g_pQueuedNavigationQueryJob
 B g_pReplay
 B g_pReplayServerContext
 B g_pServerClassHead
 B g_pShadowEntities
 B g_pSharedChangeInfo
 B g_pSoundEmitterSystem
 B g_pStringTableClientSideChoreoScenes
 B g_pStringTableEffectDispatch
 B g_pStringTableInfoPanel
 B g_pStringTableMaterials
 B g_pStringTableParticleEffectNames
 B g_pStringTableServerMapCycle
 B g_pStringTableServerMapCycleMvM
 B g_pStringTableServerPopFiles
 B g_pStringTableVguiScreen
 B g_pStudioRender
 B g_pUtlSortVectorQSortContext
 B g_pVGui
 B g_pVGuiInput
 B g_pVGuiLocalize
 B g_pVGuiPanel
 B g_pVGuiSchemeManager
 B g_pVGuiSurface
 B g_pVGuiSystem
 B g_pVTex
 B g_pVideo
 B g_pVoiceServer
 B g_ragdoll_important_maxcount
 B g_ragdoll_maxcount
 B g_rowCommitTime
 B g_rowWriteTime
 B g_sModelIndexBloodDrop
 B g_sModelIndexBloodSpray
 B g_sModelIndexBubbles
 B g_sModelIndexFireball
 B g_sModelIndexRing
 B g_sModelIndexSmoke
 B g_sModelIndexSyringe
 B g_sModelIndexWExplosion
 B g_sha1ItemSchemaText
 B g_tslistPAutoSeededRNG
 B g_vecAttackDir
 B g_vecFixedWpnSpreadPellets
 B g_voteController
 B gameeventmanager
 B gamestatsuploader
 B giPrecacheGrunt
 B globalentity_t_DataDescInit::g_DataMapHolder
 B gpGlobals
 B groundlinksallocated
 B hide_server
 B hl2_episodic
 B item_enable_content_streaming
 B k_mapConditions
 B k_sANDRegisteredEntry
 B k_sNOTRegisteredEntry
 B k_sORRegisteredEntry
 B k_sbonuseffectRegisteredEntry
 B k_sconditionRegisteredEntry
 B k_scrit_killRegisteredEntry
 B k_scustom_damageRegisteredEntry
 B k_sdeflected_projectileRegisteredEntry
 B k_sflag_event_typeRegisteredEntry
 B k_sgame_typeRegisteredEntry
 B k_shalloween_boss_typeRegisteredEntry
 B k_sloadout_positionRegisteredEntry
 B k_smapRegisteredEntry
 B k_sminigame_typeRegisteredEntry
 B k_sobject_typeRegisteredEntry
 B k_splayer_aliveRegisteredEntry
 B k_splayer_classRegisteredEntry
 B k_splayer_conditionRegisteredEntry
 B k_splayer_disguiseRegisteredEntry
 B k_splayer_distanceRegisteredEntry
 B k_splayer_is_ownerRegisteredEntry
 B k_splayer_jumpingRegisteredEntry
 B k_sscorerRegisteredEntry
 B k_steam_restrictionRegisteredEntry
 B k_sweapon_classRegisteredEntry
 B k_sweapon_def_indexRegisteredEntry
 B k_sweapon_nameRegisteredEntry
 B k_sweapon_typeRegisteredEntry
 B key_field
 B lineartolightmap
 B lineartovertex
 B linksallocated
 B locksound_t_DataDescInit::g_DataMapHolder
 B log_verbose_enable
 B log_verbose_interval
 B lservercfgfile
 B m_debugOverlayLine
 B m_flNextSupernovaDenyWarning
 B magnetted_objects_t_DataDescInit::g_DataMapHolder
 B mapcyclefile
 B mat_hdr_tonemapscale
 B materials
 B mdlcache
 B mdllib
 B modelinfo
 B modifiedconvars_t_DataDescInit::g_DataMapHolder
 B mp_allowspectators
 B mp_autoteambalance
 B mp_blockstyle
 B mp_bonusroundtime
 B mp_capdeteriorate_time
 B mp_capstyle
 B mp_chattime
 B mp_clan_ready_signal
 B mp_clan_readyrestart
 B mp_disable_respawn_times
 B mp_enableroundwaittime
 B mp_facefronttime
 B mp_fadetoblack
 B mp_feetyawrate
 B mp_forceactivityset
 B mp_forceautoteam
 B mp_forcecamera
 B mp_highlander
 B mp_holiday_nogifts
 B mp_humans_must_join_team
 B mp_idledealmethod
 B mp_idlemaxtime
 B mp_ik
 B mp_mapcycle_empty_timeout_seconds
 B mp_match_end_at_timelimit
 B mp_maxrounds
 B mp_respawnwavetime
 B mp_restartgame
 B mp_restartgame_immediate
 B mp_restartround
 B mp_scrambleteams_auto
 B mp_scrambleteams_auto_windifference
 B mp_show_voice_icons
 B mp_showcleanedupents
 B mp_showgestureslots
 B mp_showrespawntimes
 B mp_showroundtransitions
 B mp_simulatemultiplecappers
 B mp_slammoveyaw
 B mp_spectators_restricted
 B mp_stalemate_enable
 B mp_stalemate_meleeonly
 B mp_stalemate_timelimit
 B mp_teams_unbalance_limit
 B mp_time_between_capscoring
 B mp_timelimit
 B mp_tournament
 B mp_tournament_blueteamname
 B mp_tournament_post_match_period
 B mp_tournament_readymode
 B mp_tournament_readymode_countdown
 B mp_tournament_readymode_min
 B mp_tournament_readymode_team_size
 B mp_tournament_redteamname
 B mp_tournament_stopwatch
 B mp_tournament_whitelist
 B mp_waitingforplayers_cancel
 B mp_waitingforplayers_restart
 B mp_waitingforplayers_time
 B mp_windifference
 B mp_windifference_min
 B mp_winlimit
 B msgpool_hard_limit
 B msgpool_soft_limit
 B name
 B nav_area_bgcolor
 B nav_area_max_size
 B nav_coplanar_slope_limit
 B nav_coplanar_slope_limit_displacement
 B nav_corner_adjust_adjacent
 B nav_create_area_at_feet
 B nav_create_place_on_ground
 B nav_debug_blocked
 B nav_displacement_test
 B nav_drag_selection_volume_zmax_offset
 B nav_drag_selection_volume_zmin_offset
 B nav_draw_limit
 B nav_edit
 B nav_generate_fencetops
 B nav_generate_fixup_jump_areas
 B nav_generate_incremental_range
 B nav_generate_incremental_tolerance
 B nav_generate_jump_connections
 B nav_max_view_distance
 B nav_max_vis_delta_list_length
 B nav_potentially_visible_dot_tolerance
 B nav_quicksave
 B nav_selected_set_border_color
 B nav_selected_set_color
 B nav_show_approach_points
 B nav_show_area_info
 B nav_show_compass
 B nav_show_contiguous
 B nav_show_danger
 B nav_show_func_nav_avoid
 B nav_show_func_nav_prefer
 B nav_show_func_nav_prerequisite
 B nav_show_light_intensity
 B nav_show_node_grid
 B nav_show_node_id
 B nav_show_nodes
 B nav_show_player_counts
 B nav_show_potentially_visible
 B nav_slope_limit
 B nav_slope_tolerance
 B nav_snap_to_grid
 B nav_solid_props
 B nav_split_place_on_ground
 B nav_test_node
 B nav_test_node_crouch
 B nav_test_node_crouch_dir
 B nav_update_visibility_on_edit
 B nav_world_center
 B nb_blind
 B nb_debug_known_entities
 B nb_head_aim_resettle_angle
 B nb_head_aim_resettle_time
 B nb_head_aim_settle_duration
 B nb_head_aim_steady_max_rate
 B nb_last_area_update_tolerance
 B nb_saccade_speed
 B nb_saccade_time
 B nb_update_debug
 B nb_update_framelimit
 B nb_update_frequency
 B nb_update_maxslide
 B networkstringtable
 B nextlevel
 B notarget
 B npc_ally_deathmessage
 B npc_height_adjust
 B npc_sentences
 B npc_vphysics
 B obj_child_damage_factor
 B obj_damage_factor
 B obj_sapper_amount
 B object_capture_damage
 B object_deterioration_time
 B object_show_damage
 B object_verbose
 B old_radius_damage
 B option_duck_method
 B p4
 B particle_test_attach_attachment
 B particle_test_attach_mode
 B particle_test_file
 B partition
 B phys_impactforcescale
 B phys_pushscale
 B phys_speeds
 B phys_stressbodyweights
 B phys_timescale
 B phys_upimpactforcescale
 B physcollision
 B physenv
 B physfollower_t_DataDescInit::g_DataMapHolder
 B physics
 B physprops
 B placeDirectory
 B player_debug_print_damage
 B powerplay_ids
 B prop_active_gib_limit
 B prop_active_gib_max_fade_time
 B props_break_max_pieces
 B props_break_max_pieces_perframe
 B r_AirboatViewDampenDamp
 B r_AirboatViewDampenFreq
 B r_AirboatViewZHeight
 B r_JeepFOV
 B r_JeepViewDampenDamp
 B r_JeepViewDampenFreq
 B r_JeepViewZHeight
 B r_VehicleViewDampen
 B r_vehicleBrakeRate
 B r_visualizetraces
 B random_valve
 B rgv3tStuckTable
 B rr_debug_qa
 B rr_debugresponses
 B rr_debugrule
 B rr_dumpresponses
 B s_ChildrenInfoUnpack
 B s_DMXAllocator
 B s_FogSystem
 B s_NoEscConversion
 B s_PushedEntities
 B s_RagdollLRU
 B s_StringCharConversion
 B s_TFPlayerClassDataMgr
 B s_TFPushedEntities
 B s_TFTeamManager
 B s_bMathlibInitialized
 B s_dragSelectionSetAddColor
 B s_dragSelectionSetBorderColor
 B s_dragSelectionSetDeleteColor
 B s_pConv
 B s_pCurrentConfirmJob
 B s_pParticleSystemDefinitionUnpack
 B s_queuePendingConfirmJobs
 B s_selectedSetBorderColor
 B s_selectedSetColor
 B s_strNextMvMPopFile
 B scene_clientflex
 B scene_flatturn
 B scenefilecache
 B servercfgfile
 B serverenginetools
 B serverpluginhelpers
 B showanimstate_log
 B showhitlocation
 B showtriggers
 B sk_ally_regen_time
 B sk_autoaim_mode
 B sk_npc_arm
 B sk_npc_chest
 B sk_npc_head
 B sk_npc_leg
 B sk_npc_stomach
 B sk_player_arm
 B sk_player_chest
 B sk_player_head
 B sk_player_leg
 B sk_player_stomach
 B sk_plr_dmg_grenade
 B skill
 B skip_next_map
 B sky3dparams_t_DataDescInit::g_DataMapHolder
 B soundemitterbase
 B soundscape_debug
 B spec_freeze_time
 B spec_freeze_traveltime
 B staticpropmgr
 B steamworks_sessionid_server
 B step_spline
 B studiorender
 B suitvolume
 B sv_accelerate
 B sv_airaccelerate
 B sv_allow_point_servercommand
 B sv_allow_votes
 B sv_alltalk
 B sv_alternateticks
 B sv_autosave
 B sv_backspeed
 B sv_bonus_challenge
 B sv_bounce
 B sv_cheats
 B sv_clearhinthistory
 B sv_debug_player_use
 B sv_disable_querycache
 B sv_footsteps
 B sv_force_transmit_ents
 B sv_friction
 B sv_gravity
 B sv_hudhint_sound
 B sv_lagflushbonecache
 B sv_massreport
 B sv_maxreplay
 B sv_maxspeed
 B sv_maxunlag
 B sv_maxusrcmdprocessticks_warning
 B sv_maxvelocity
 B sv_motd_unload_on_dismissal
 B sv_netvisdist
 B sv_noclipaccelerate
 B sv_noclipduringpause
 B sv_noclipspeed
 B sv_npc_talker_maxdist
 B sv_player_display_usercommand_errors
 B sv_proj_stunball_damage
 B sv_pushaway_clientside
 B sv_pushaway_clientside_size
 B sv_pushaway_force
 B sv_pushaway_max_force
 B sv_pushaway_max_player_force
 B sv_pushaway_min_player_speed
 B sv_pushaway_player_force
 B sv_pvsskipanimation
 B sv_rollangle
 B sv_rollspeed
 B sv_runcmds
 B sv_showanimstate
 B sv_showladders
 B sv_showlagcompensation
 B sv_skyname
 B sv_specaccelerate
 B sv_specnoclip
 B sv_specspeed
 B sv_stepsize
 B sv_stopspeed
 B sv_strict_notarget
 B sv_suppress_viewpunch
 B sv_test_scripted_sequences
 B sv_teststepsimulation
 B sv_turbophysics
 B sv_unlag
 B sv_unlag_debug
 B sv_unlag_fixstuck
 B sv_unlockedchapters
 B sv_usercmd_custom_random_seed
 B sv_vehicle_autoaim_scale
 B sv_vote_allow_spectators
 B sv_vote_command_delay
 B sv_vote_creation_timer
 B sv_vote_failure_timer
 B sv_vote_failure_timer_mvm
 B sv_vote_holder_may_vote_no
 B sv_vote_issue_autobalance_allowed
 B sv_vote_issue_autobalance_cooldown
 B sv_vote_issue_changelevel_allowed
 B sv_vote_issue_changelevel_allowed_mvm
 B sv_vote_issue_classlimits_allowed
 B sv_vote_issue_classlimits_allowed_mvm
 B sv_vote_issue_classlimits_cooldown
 B sv_vote_issue_classlimits_max
 B sv_vote_issue_classlimits_max_mvm
 B sv_vote_issue_extendlevel_allowed
 B sv_vote_issue_extendlevel_quorum
 B sv_vote_issue_kick_allowed
 B sv_vote_issue_kick_allowed_mvm
 B sv_vote_issue_kick_limit_gc
 B sv_vote_issue_kick_limit_mvm
 B sv_vote_issue_kick_min_connect_time_mvm
 B sv_vote_issue_kick_namelock_duration
 B sv_vote_issue_kick_spectators_mvm
 B sv_vote_issue_mvm_challenge_allowed
 B sv_vote_issue_nextlevel_allowed
 B sv_vote_issue_nextlevel_allowextend
 B sv_vote_issue_nextlevel_choicesmode
 B sv_vote_issue_nextlevel_prevent_change
 B sv_vote_issue_pause_game_allowed
 B sv_vote_issue_pause_game_cooldown
 B sv_vote_issue_pause_game_timer
 B sv_vote_issue_restart_game_allowed
 B sv_vote_issue_restart_game_allowed_mvm
 B sv_vote_issue_restart_game_cooldown
 B sv_vote_issue_scramble_teams_allowed
 B sv_vote_issue_scramble_teams_cooldown
 B sv_vote_kick_ban_duration
 B sv_vote_quorum_ratio
 B sv_vote_timer_duration
 B sv_vote_ui_hide_disabled_issues
 B sv_wateraccelerate
 B sv_waterdist
 B sv_waterfriction
 B teamlist
 B teamoverride
 B teamplay
 B template_debug
 B template_t_DataDescInit::g_DataMapHolder
 B test_it
 B tf_allow_all_team_partner_taunt
 B tf_allow_player_use
 B tf_allow_server_hibernation
 B tf_allow_sliding_taunt
 B tf_allow_taunt_switch
 B tf_always_loser
 B tf_archer_proxy_fire_rate
 B tf_arena_change_limit
 B tf_arena_first_blood
 B tf_arena_force_class
 B tf_arena_max_streak
 B tf_arena_override_cap_enable_time
 B tf_arena_override_team_size
 B tf_arena_preround_time
 B tf_arena_round_time
 B tf_arena_use_queue
 B tf_attack_defend_map
 B tf_avoidteammates
 B tf_avoidteammates_pushaway
 B tf_base_boss_max_turn_rate
 B tf_base_boss_speed
 B tf_beta_content
 B tf_birthday
 B tf_birthday_ball_chance
 B tf_bonuspack_score
 B tf_boost_drain_time
 B tf_bot_always_full_reload
 B tf_bot_ammo_search_range
 B tf_bot_arrow_elevation_rate
 B tf_bot_auto_vacate
 B tf_bot_ballistic_elevation_rate
 B tf_bot_capture_seek_and_destroy_max_duration
 B tf_bot_capture_seek_and_destroy_min_duration
 B tf_bot_cart_push_radius
 B tf_bot_choose_target_interval
 B tf_bot_count
 B tf_bot_debug_ammo_scavenging
 B tf_bot_debug_destroy_enemy_sentry
 B tf_bot_debug_payload_guard_vantage_points
 B tf_bot_debug_retreat_to_cover
 B tf_bot_debug_seek_and_destroy
 B tf_bot_debug_sentry_placement
 B tf_bot_debug_sniper
 B tf_bot_debug_spy
 B tf_bot_debug_tags
 B tf_bot_defend_owned_point_percent
 B tf_bot_defense_debug
 B tf_bot_defense_must_defend_time
 B tf_bot_difficulty
 B tf_bot_engineer_exit_near_sentry_range
 B tf_bot_engineer_max_sentry_travel_distance_to_point
 B tf_bot_engineer_mvm_building_health_multiplier
 B tf_bot_engineer_mvm_hint_min_distance_from_bomb
 B tf_bot_engineer_mvm_sentry_hint_bomb_backward_range
 B tf_bot_engineer_mvm_sentry_hint_bomb_forward_range
 B tf_bot_engineer_retaliate_range
 B tf_bot_escort_range
 B tf_bot_fetch_lost_flag_time
 B tf_bot_fire_weapon_allowed
 B tf_bot_fire_weapon_min_time
 B tf_bot_flag_escort_give_up_range
 B tf_bot_flag_escort_max_count
 B tf_bot_flag_escort_range
 B tf_bot_flag_kill_on_touch
 B tf_bot_force_class
 B tf_bot_force_jump
 B tf_bot_formation_debug
 B tf_bot_health_critical_ratio
 B tf_bot_health_ok_ratio
 B tf_bot_health_search_far_range
 B tf_bot_health_search_near_range
 B tf_bot_hitscan_range_limit
 B tf_bot_join_after_player
 B tf_bot_keep_class_after_death
 B tf_bot_max_grenade_launch_at_sentry_range
 B tf_bot_max_point_defend_range
 B tf_bot_max_setup_gate_defend_range
 B tf_bot_max_sticky_launch_at_sentry_range
 B tf_bot_max_teleport_entrance_travel
 B tf_bot_max_teleport_exit_travel_to_point
 B tf_bot_medic_cover_test_resolution
 B tf_bot_medic_debug
 B tf_bot_medic_max_call_response_range
 B tf_bot_medic_max_heal_range
 B tf_bot_medic_start_follow_range
 B tf_bot_medic_stop_follow_range
 B tf_bot_melee_attack_abandon_range
 B tf_bot_melee_only
 B tf_bot_min_setup_gate_defend_range
 B tf_bot_min_setup_gate_sniper_defend_range
 B tf_bot_min_teleport_travel
 B tf_bot_near_point_travel_distance
 B tf_bot_notice_backstab_chance
 B tf_bot_notice_backstab_max_range
 B tf_bot_notice_backstab_min_range
 B tf_bot_notice_gunfire_range
 B tf_bot_notice_quiet_gunfire_range
 B tf_bot_npc_archer_arrow_damage
 B tf_bot_npc_archer_health
 B tf_bot_npc_archer_shoot_interval
 B tf_bot_npc_archer_speed
 B tf_bot_offense_must_push_time
 B tf_bot_offline_practice
 B tf_bot_path_lookahead_range
 B tf_bot_payload_guard_range
 B tf_bot_prefix_name_with_difficulty
 B tf_bot_pyro_always_reflect
 B tf_bot_pyro_deflect_tolerance
 B tf_bot_pyro_shove_away_range
 B tf_bot_quota
 B tf_bot_quota_mode
 B tf_bot_retreat_to_cover_range
 B tf_bot_sniper_aim_error
 B tf_bot_sniper_aim_steady_rate
 B tf_bot_sniper_allow_opportunistic
 B tf_bot_sniper_choose_target_interval
 B tf_bot_sniper_flee_range
 B tf_bot_sniper_goal_entity_move_tolerance
 B tf_bot_sniper_linger_time
 B tf_bot_sniper_melee_range
 B tf_bot_sniper_patience_duration
 B tf_bot_sniper_personal_space_range
 B tf_bot_sniper_spot_epsilon
 B tf_bot_sniper_spot_max_count
 B tf_bot_sniper_spot_min_range
 B tf_bot_sniper_spot_point_tolerance
 B tf_bot_sniper_spot_search_count
 B tf_bot_sniper_target_linger_duration
 B tf_bot_spy_change_target_range_threshold
 B tf_bot_spy_knife_range
 B tf_bot_squad_escort_range
 B tf_bot_sticky_base_range
 B tf_bot_sticky_charge_rate
 B tf_bot_stickybomb_density
 B tf_bot_suicide_bomb_friendly_fire
 B tf_bot_suicide_bomb_range
 B tf_bot_suspect_spy_forget_cooldown
 B tf_bot_suspect_spy_touch_interval
 B tf_bot_taunt_victim_chance
 B tf_bot_teleport_build_surface_normal_limit
 B tf_bot_wait_in_cover_max_time
 B tf_bot_wait_in_cover_min_time
 B tf_caplinear
 B tf_cart_duck_drop_rate
 B tf_cart_soul_drop_rate
 B tf_cart_spell_drop_rate
 B tf_cheapobjects
 B tf_clamp_airducks
 B tf_clamp_back_speed
 B tf_clamp_back_speed_min
 B tf_classlimit
 B tf_competitive_abandon_method
 B tf_competitive_preround_countdown_duration
 B tf_competitive_preround_duration
 B tf_competitive_required_late_join_confirm_timeout
 B tf_competitive_required_late_join_timeout
 B tf_construction_build_rate_multiplier
 B tf_ctf_bonus_time
 B tf_damage_disablespread
 B tf_damage_events_track_for
 B tf_damage_multiplier_blue
 B tf_damage_multiplier_red
 B tf_damage_range
 B tf_damageforcescale_other
 B tf_damageforcescale_pyro_jump
 B tf_damageforcescale_self_soldier_badrj
 B tf_damageforcescale_self_soldier_rj
 B tf_damagescale_self_soldier
 B tf_debug_damage
 B tf_debug_flamethrower
 B tf_debug_placement_failure
 B tf_decoy_lifetime
 B tf_demoman_charge_drain_time
 B tf_demoman_charge_regen_rate
 B tf_deploying_bomb_delay_time
 B tf_deploying_bomb_time
 B tf_dev_health_on_damage_recover_percentage
 B tf_dev_marked_for_death_lifetime
 B tf_double_donk_window
 B tf_dropped_weapon_lifetime
 B tf_duck_allow_team_pickup
 B tf_duck_debug_spew
 B tf_duck_edict_limit
 B tf_duck_edict_warning
 B tf_escort_recede_time
 B tf_escort_recede_time_overtime
 B tf_escort_score_rate
 B tf_eyeball_boss_acceleration
 B tf_eyeball_boss_attack_range
 B tf_eyeball_boss_debug
 B tf_eyeball_boss_debug_orientation
 B tf_eyeball_boss_health_at_level_2
 B tf_eyeball_boss_health_base
 B tf_eyeball_boss_health_per_level
 B tf_eyeball_boss_health_per_player
 B tf_eyeball_boss_horiz_damping
 B tf_eyeball_boss_hover_height
 B tf_eyeball_boss_lifetime
 B tf_eyeball_boss_lifetime_spell
 B tf_eyeball_boss_speed
 B tf_eyeball_boss_vert_damping
 B tf_fastbuild
 B tf_feign_death_activate_damage_scale
 B tf_feign_death_damage_scale
 B tf_feign_death_duration
 B tf_feign_death_speed_duration
 B tf_flag_caps_per_round
 B tf_flag_return_on_touch
 B tf_flag_return_time_credit_factor
 B tf_flamethrower_boxsize
 B tf_flamethrower_burst_zvelocity
 B tf_flamethrower_burstammo
 B tf_flamethrower_drag
 B tf_flamethrower_flametime
 B tf_flamethrower_float
 B tf_flamethrower_maxdamagedist
 B tf_flamethrower_shortrangedamagemultiplier
 B tf_flamethrower_vecrand
 B tf_flamethrower_velocity
 B tf_flamethrower_velocityfadeend
 B tf_flamethrower_velocityfadestart
 B tf_force_holidays_off
 B tf_forced_holiday
 B tf_fortune_teller_fortune_duration
 B tf_fortune_teller_interval_time
 B tf_fortune_teller_warning_time
 B tf_gamemode_arena
 B tf_gamemode_cp
 B tf_gamemode_ctf
 B tf_gamemode_misc
 B tf_gamemode_mvm
 B tf_gamemode_passtime
 B tf_gamemode_payload
 B tf_gamemode_pd
 B tf_gamemode_rd
 B tf_gamemode_sd
 B tf_gamemode_tc
 B tf_ghost_up_speed
 B tf_ghost_xy_speed
 B tf_grapplinghook_acceleration
 B tf_grapplinghook_dampening
 B tf_grapplinghook_enable
 B tf_grapplinghook_fire_delay
 B tf_grapplinghook_follow_distance
 B tf_grapplinghook_jump_up_speed
 B tf_grapplinghook_los_force_detach_time
 B tf_grapplinghook_max_distance
 B tf_grapplinghook_medic_latch_speed_scale
 B tf_grapplinghook_move_speed
 B tf_grapplinghook_prevent_fall_damage
 B tf_grapplinghook_projectile_speed
 B tf_grapplinghook_use_acceleration
 B tf_gravetalk
 B tf_grenade_force_sleeptime
 B tf_grenade_forcefrom_blast
 B tf_grenade_forcefrom_buckshot
 B tf_grenade_forcefrom_bullet
 B tf_grenadelauncher_chargescale
 B tf_grenadelauncher_livetime
 B tf_grenadelauncher_min_contact_speed
 B tf_halloween_allow_ghost_hit_by_kart_delay
 B tf_halloween_allow_truce_during_boss_event
 B tf_halloween_boss_spawn_interval
 B tf_halloween_boss_spawn_interval_variation
 B tf_halloween_bot_attack_range
 B tf_halloween_bot_chase_duration
 B tf_halloween_bot_chase_range
 B tf_halloween_bot_health_base
 B tf_halloween_bot_health_per_player
 B tf_halloween_bot_min_player_count
 B tf_halloween_bot_quit_range
 B tf_halloween_bot_speed
 B tf_halloween_bot_speed_recovery_rate
 B tf_halloween_bot_terrify_radius
 B tf_halloween_eyeball_boss_spawn_interval
 B tf_halloween_eyeball_boss_spawn_interval_variation
 B tf_halloween_giant_health_scale
 B tf_halloween_gift_lifetime
 B tf_halloween_hhh_attack_kart_radius
 B tf_halloween_kart_air_turn_scale
 B tf_halloween_kart_aircontrol
 B tf_halloween_kart_bomb_head_damage_scale
 B tf_halloween_kart_bomb_head_impulse_scale
 B tf_halloween_kart_bombhead_scale
 B tf_halloween_kart_boost_duration
 B tf_halloween_kart_boost_impact_force
 B tf_halloween_kart_boost_recharge
 B tf_halloween_kart_brake_accel
 B tf_halloween_kart_brake_speed
 B tf_halloween_kart_coast_accel
 B tf_halloween_kart_damage_to_force
 B tf_halloween_kart_dash_accel
 B tf_halloween_kart_dash_speed
 B tf_halloween_kart_fast_turn_accel_speed
 B tf_halloween_kart_fast_turn_speed
 B tf_halloween_kart_idle_speed
 B tf_halloween_kart_impact_air_scale
 B tf_halloween_kart_impact_bounds_scale
 B tf_halloween_kart_impact_damage
 B tf_halloween_kart_impact_feedback
 B tf_halloween_kart_impact_force
 B tf_halloween_kart_impact_lookahead
 B tf_halloween_kart_impact_rate
 B tf_halloween_kart_normal_accel
 B tf_halloween_kart_normal_speed
 B tf_halloween_kart_punting_ghost_force_scale
 B tf_halloween_kart_return_turn_accell
 B tf_halloween_kart_reverse_speed
 B tf_halloween_kart_reverse_turn_speed
 B tf_halloween_kart_rocketspell_force
 B tf_halloween_kart_rocketspell_lifetime
 B tf_halloween_kart_rocketspell_speed
 B tf_halloween_kart_slow_turn_accel_speed
 B tf_halloween_kart_slow_turn_speed
 B tf_halloween_kart_slowmoving_accel
 B tf_halloween_kart_slowmoving_threshold
 B tf_halloween_kart_stationary_turn_speed
 B tf_halloween_kart_stun_amount
 B tf_halloween_kart_stun_duration_scale
 B tf_halloween_kart_stun_enabled
 B tf_halloween_kart_turning_curve_peak_position
 B tf_halloween_unlimited_spells
 B tf_halloween_zombie_damage
 B tf_halloween_zombie_mob_enabled
 B tf_halloween_zombie_mob_spawn_count
 B tf_halloween_zombie_mob_spawn_interval
 B tf_highfive_debug
 B tf_highfive_height_tolerance
 B tf_highfive_max_range
 B tf_highfive_separation_forward
 B tf_highfive_separation_right
 B tf_invuln_time
 B tf_item_based_forced_holiday
 B tf_max_active_zombie
 B tf_max_charge_speed
 B tf_max_health_boost
 B tf_max_voice_speak_delay
 B tf_medieval
 B tf_medieval_autorp
 B tf_medigun_lagcomp
 B tf_meleeattackforcescale
 B tf_merasmus_attack_range
 B tf_merasmus_bomb_head_duration
 B tf_merasmus_bomb_head_per_team
 B tf_merasmus_chase_duration
 B tf_merasmus_chase_range
 B tf_merasmus_disguise_debug
 B tf_merasmus_health_base
 B tf_merasmus_health_per_player
 B tf_merasmus_health_regen_rate
 B tf_merasmus_lifetime
 B tf_merasmus_min_player_count
 B tf_merasmus_min_props_to_reveal
 B tf_merasmus_prop_health
 B tf_merasmus_should_disguise_threshold
 B tf_merasmus_spawn_interval
 B tf_merasmus_spawn_interval_variation
 B tf_merasmus_speed
 B tf_merasmus_speed_recovery_rate
 B tf_merasmus_stun_duration
 B tf_minigame_suddendeath_time
 B tf_mm_abandoned_players_per_team_max
 B tf_mm_match_size_ladder_12v12
 B tf_mm_match_size_ladder_12v12_minimum
 B tf_mm_match_size_ladder_6v6
 B tf_mm_match_size_ladder_9v9
 B tf_mm_match_size_mvm
 B tf_mm_player_disconnect_time_before_abandon
 B tf_mm_player_disconnect_time_forgive_ratio
 B tf_mm_player_disconnect_time_minimum_penalty
 B tf_mm_rematch_vote_time
 B tf_mm_servermode
 B tf_mm_strict
 B tf_mm_trusted
 B tf_mvm_allow_abandon_after_seconds
 B tf_mvm_allow_abandon_below_players
 B tf_mvm_bot_allow_flag_carrier_to_fight
 B tf_mvm_bot_flag_carrier_health_regen
 B tf_mvm_bot_flag_carrier_interval_to_1st_upgrade
 B tf_mvm_bot_flag_carrier_interval_to_2nd_upgrade
 B tf_mvm_bot_flag_carrier_interval_to_3rd_upgrade
 B tf_mvm_bot_flag_carrier_movement_penalty
 B tf_mvm_bot_sniper_target_by_dps
 B tf_mvm_buybacks_method
 B tf_mvm_buybacks_per_wave
 B tf_mvm_currency_bonus_ratio_max
 B tf_mvm_currency_bonus_ratio_min
 B tf_mvm_death_penalty
 B tf_mvm_default_sentry_buster_damage_dealt_threshold
 B tf_mvm_default_sentry_buster_kill_threshold
 B tf_mvm_disconnect_on_victory
 B tf_mvm_endless_bomb_reset
 B tf_mvm_endless_bot_cash
 B tf_mvm_endless_force_on
 B tf_mvm_endless_tank_boost
 B tf_mvm_endless_wait_time
 B tf_mvm_engineer_teleporter_uber_duration
 B tf_mvm_min_players_to_start
 B tf_mvm_miniboss_scale
 B tf_mvm_missioncyclefile
 B tf_mvm_notice_sapped_squadmates_delay
 B tf_mvm_respec_credit_goal
 B tf_mvm_respec_enabled
 B tf_mvm_respec_limit
 B tf_mvm_skill
 B tf_mvm_victory_disconnect_time
 B tf_mvm_victory_reset_time
 B tf_nav_combat_build_rate
 B tf_nav_combat_decay_rate
 B tf_nav_in_combat_duration
 B tf_nav_in_combat_range
 B tf_nav_show_bomb_target_distance
 B tf_nav_show_incursion_distance
 B tf_nav_show_turf_ownership
 B tf_obj_build_rotation_speed
 B tf_obj_damage_tank_achievement_amount
 B tf_obj_gib_maxspeed
 B tf_obj_gib_velocity_max
 B tf_obj_gib_velocity_min
 B tf_obj_ground_clearance
 B tf_obj_max_attach_dist
 B tf_obj_upgrade_per_hit
 B tf_overtime_nag
 B tf_parachute_aircontrol
 B tf_parachute_gravity
 B tf_parachute_maxspeed_onfire_z
 B tf_parachute_maxspeed_xy
 B tf_parachute_maxspeed_z
 B tf_passtime_ball_damping_scale
 B tf_passtime_ball_drag_coefficient
 B tf_passtime_ball_inertia_scale
 B tf_passtime_ball_mass
 B tf_passtime_ball_model
 B tf_passtime_ball_reset_time
 B tf_passtime_ball_rotdamping_scale
 B tf_passtime_ball_seek_range
 B tf_passtime_ball_seek_speed_factor
 B tf_passtime_ball_sphere_collision
 B tf_passtime_ball_sphere_radius
 B tf_passtime_ball_takedamage
 B tf_passtime_ball_takedamage_force
 B tf_passtime_experiment_autopass
 B tf_passtime_experiment_instapass
 B tf_passtime_experiment_instapass_charge
 B tf_passtime_experiment_telepass
 B tf_passtime_flinch_boost
 B tf_passtime_mode_homing_lock_sec
 B tf_passtime_mode_homing_speed
 B tf_passtime_overtime_idle_sec
 B tf_passtime_pack_hp_per_sec
 B tf_passtime_pack_range
 B tf_passtime_pack_speed
 B tf_passtime_player_reticles_enemies
 B tf_passtime_player_reticles_friends
 B tf_passtime_powerball_airtimebonus
 B tf_passtime_powerball_decay_delay
 B tf_passtime_powerball_decayamount
 B tf_passtime_powerball_decaysec
 B tf_passtime_powerball_decaysec_neutral
 B tf_passtime_powerball_maxairtimebonus
 B tf_passtime_powerball_passpoints
 B tf_passtime_powerball_threshold
 B tf_passtime_save_stats
 B tf_passtime_score_crit_sec
 B tf_passtime_scores_per_round
 B tf_passtime_speedboost_on_get_ball_time
 B tf_passtime_steal_on_melee
 B tf_passtime_teammate_steal_time
 B tf_passtime_throwarc_demoman
 B tf_passtime_throwarc_engineer
 B tf_passtime_throwarc_heavy
 B tf_passtime_throwarc_medic
 B tf_passtime_throwarc_pyro
 B tf_passtime_throwarc_scout
 B tf_passtime_throwarc_sniper
 B tf_passtime_throwarc_soldier
 B tf_passtime_throwarc_spy
 B tf_passtime_throwspeed_demoman
 B tf_passtime_throwspeed_engineer
 B tf_passtime_throwspeed_heavy
 B tf_passtime_throwspeed_medic
 B tf_passtime_throwspeed_pyro
 B tf_passtime_throwspeed_scout
 B tf_passtime_throwspeed_sniper
 B tf_passtime_throwspeed_soldier
 B tf_passtime_throwspeed_spy
 B tf_passtime_throwspeed_velocity_scale
 B tf_pipebomb_deflect_reset_time
 B tf_pipebomb_force_to_move
 B tf_player_drop_bonus_ducks
 B tf_player_movement_restart_freeze
 B tf_player_movement_stun_time
 B tf_player_name_change_time
 B tf_player_spell_drop_on_death_rate
 B tf_playergib
 B tf_playerstatetransitions
 B tf_populator_active_buffer_range
 B tf_populator_damage_multiplier
 B tf_populator_debug
 B tf_populator_health_multiplier
 B tf_powerup_max_charge_time
 B tf_powerup_mode
 B tf_powerup_mode_imbalance_delta
 B tf_preround_push_from_damage_enable
 B tf_raid_engineer_infinte_metal
 B tf_rd_max_points_override
 B tf_rd_min_points_to_steal
 B tf_rd_points_approach_interval
 B tf_rd_points_per_approach
 B tf_rd_points_per_steal
 B tf_rd_return_max_time
 B tf_rd_return_min_time
 B tf_rd_robot_attack_notification_cooldown
 B tf_rd_robot_repair_rate
 B tf_rd_steal_rate
 B tf_resolve_stuck_players
 B tf_scout_air_dash_count
 B tf_scout_bat_launch_delay
 B tf_scout_energydrink_activation
 B tf_scout_energydrink_consume_rate
 B tf_scout_energydrink_regen_rate
 B tf_scout_hype_mod
 B tf_scout_hype_pep_max
 B tf_scout_hype_pep_min_damage
 B tf_scout_hype_pep_mod
 B tf_scout_stunball_base_duration
 B tf_scout_stunball_base_speed
 B tf_select_ambush_areas_close_range
 B tf_select_ambush_areas_max_enemy_exposure_area
 B tf_select_ambush_areas_radius
 B tf_sentrygun_ammocheat
 B tf_sentrygun_damage
 B tf_sentrygun_kill_after_redeploy_time_achievement
 B tf_sentrygun_max_absorbed_damage_while_controlled_for_achievement
 B tf_sentrygun_metal_per_rocket
 B tf_sentrygun_metal_per_shell
 B tf_sentrygun_mini_damage
 B tf_sentrygun_newtarget_dist
 B tf_sentrygun_notarget
 B tf_show_actor_potential_visibility
 B tf_show_blocked_areas
 B tf_show_bomb_drop_areas
 B tf_show_control_points
 B tf_show_enemy_invasion_areas
 B tf_show_gate_defense_areas
 B tf_show_in_combat_areas
 B tf_show_incursion_flow
 B tf_show_incursion_flow_gradient
 B tf_show_incursion_flow_range
 B tf_show_incursion_range
 B tf_show_incursion_range_max
 B tf_show_incursion_range_min
 B tf_show_mesh_decoration
 B tf_show_mesh_decoration_manual
 B tf_show_point_defense_areas
 B tf_show_sentry_danger
 B tf_show_sniper_areas
 B tf_show_sniper_areas_safety_range
 B tf_show_train_path
 B tf_showspeed
 B tf_skillrating_update_interval
 B tf_so_tracker_spew_type_toggle
 B tf_soccer_ball_min_speed
 B tf_soccer_ball_multiplier
 B tf_soccer_ball_up_max
 B tf_soccer_front_hit_range
 B tf_solidobjects
 B tf_spawn_glows_duration
 B tf_spec_xray
 B tf_spells_enabled
 B tf_spy_cloak_consume_rate
 B tf_spy_cloak_no_attack_time
 B tf_spy_cloak_regen_rate
 B tf_spy_invis_time
 B tf_spy_invis_unstealth_time
 B tf_spy_max_cloaked_speed
 B tf_stalematechangeclasstime
 B tf_stealth_damage_reduction
 B tf_sticky_airdet_radius
 B tf_sticky_radius_ramp_time
 B tf_target_dummy_bullet_mult
 B tf_target_dummy_health
 B tf_target_dummy_lifetime
 B tf_target_dummy_melee_mult
 B tf_target_dummy_other_mult
 B tf_tauntcam_fov_override
 B tf_teleporter_fov_start
 B tf_teleporter_fov_time
 B tf_test_special_ducks
 B tf_test_spellindex
 B tf_test_teleport_home_fx
 B tf_tournament_classchange_allowed
 B tf_tournament_classchange_ready_allowed
 B tf_tournament_classlimit_demoman
 B tf_tournament_classlimit_engineer
 B tf_tournament_classlimit_heavy
 B tf_tournament_classlimit_medic
 B tf_tournament_classlimit_pyro
 B tf_tournament_classlimit_scout
 B tf_tournament_classlimit_sniper
 B tf_tournament_classlimit_soldier
 B tf_tournament_classlimit_spy
 B tf_tournament_hide_domination_icons
 B tf_training_client_message
 B tf_use_fixed_weaponspreads
 B tf_useparticletracers
 B tf_vaccinator_uber_charge_rate_modifier
 B tf_weapon_criticals
 B tf_weapon_criticals_bucket_bottom
 B tf_weapon_criticals_bucket_cap
 B tf_weapon_criticals_bucket_default
 B tf_weapon_criticals_distance_falloff
 B tf_weapon_criticals_melee
 B tf_weapon_criticals_nopred
 B tf_weapon_minicrits_distance_falloff
 B tf_weapon_ragdoll_maxspeed
 B tf_weapon_ragdoll_velocity_max
 B tf_weapon_ragdoll_velocity_min
 B tf_whip_speed_increase
 B think_limit
 B thinkfunc_t_DataDescInit::g_DataMapHolder
 B token
 B tokencount
 B trace_report
 B training_can_build_dispenser
 B training_can_build_sentry
 B training_can_build_tele_entrance
 B training_can_build_tele_exit
 B training_can_destroy_buildings
 B training_can_pickup_dispenser
 B training_can_pickup_sentry
 B training_can_pickup_tele_entrance
 B training_can_pickup_tele_exit
 B training_can_select_weapon_building
 B training_can_select_weapon_item1
 B training_can_select_weapon_item2
 B training_can_select_weapon_melee
 B training_can_select_weapon_pda
 B training_can_select_weapon_primary
 B training_can_select_weapon_secondary
 B training_class
 B tv_delaymapchange
 B tv_delaymapchange_protect
 B vehicle_crashsound_t_DataDescInit::g_DataMapHolder
 B vehicle_gear_t_DataDescInit::g_DataMapHolder
 B vehiclesounds_t_DataDescInit::g_DataMapHolder
 B voice_serverdebug
 B vortex_book_offset
 B vortex_fade_fraction_denom
 B vortex_float_amp
 B vortex_float_osc_speed
 B vprof_scope_entity_gamephys
 B vprof_scope_entity_thinks
 B weapon_medigun_charge_rate
 B weapon_medigun_chargerelease_rate
 B weapon_medigun_construction_rate
 B weapon_medigun_damage_modifier
 B weapon_medigun_resist_num_chunks
 B weapon_showproficiency
 B weaponstay
 B xbox_autothrottle
 B xbox_steering_deadzone
 B xbox_throttlebias
 B xbox_throttlespoof
 B xc_crouch_debounce
 COM_TimestampedLog
 CThread::GetName()
 CThread::GetThreadProc()
 CThread::Init()
 CThread::IsThreadRunning()
 CThread::Join(unsigned int)
 CThread::OnExit()
 CThread::SetName(char const*)
 CThread::Start(unsigned int)
 CThread::~CThread()
 CThreadEvent::CThreadEvent(bool)
 CThreadEvent::Set()
 CThreadFastMutex::Lock(unsigned int, unsigned int) volatile
 CThreadLocalBase::CThreadLocalBase()
 CThreadLocalBase::Get() const
 CThreadLocalBase::Set(void*)
 CThreadLocalBase::~CThreadLocalBase()
 CThreadMutex::TryLock()
 CThreadRWLock::LockForWrite()
 CThreadRWLock::UnlockWrite()
 CThreadRWLock::WaitForRead()
 CThreadSpinRWLock::LockForRead()
 CThreadSpinRWLock::SpinLockForWrite(unsigned int)
 CThreadSpinRWLock::UnlockRead()
 CThreadSpinRWLock::UnlockWrite()
 CThreadSyncObject::~CThreadSyncObject()
 CUniformRandomStream::CUniformRandomStream()
 CUniformRandomStream::RandomFloat(float, float)
 CUniformRandomStream::RandomInt(int, int)
 CUniformRandomStream::SetSeed(int)
 CVProfNode::EnterScope()
 CVProfNode::ExitScope()
 CVProfNode::GetSubNode(char const*, int, char const*, int)
 CVProfNode::MarkFrame()
 CVProfNode::Pause()
 CVProfNode::Reset()
 CVProfNode::Resume()
 CVProfile::FindOrCreateCounter(char const*, CounterGroup_t)
 CVProfile::OutputReport(int, char const*, int)
 CWorkerThread::CWorkerThread()
 CWorkerThread::Reply(unsigned int)
 CWorkerThread::WaitForCall(unsigned int*)
 CallAssertFailedNotifyFunc
 CommandLine_Tier0
 ConColorMsg(Color const&, char const*, ...)
 D AIExtendedSaveHeader_t::m_DataMap
 D AIScheduleState_t::m_DataMap
 D AISquadEnemyInfo_t::m_DataMap
 D AI_EnemyInfo_t::m_DataMap
 D AI_FollowNavInfo_t::m_DataMap
 D AI_FollowParams_t::m_DataMap
 D AI_FreePassParams_t::m_DataMap
 D AI_LeadArgs_t::m_DataMap
 D AI_Response::m_DataMap
 D AI_ResponseParams::m_DataMap
 D AI_StandoffParams_t::m_DataMap
 D AI_Waypoint_t::m_DataMap
 D Action<CBotNPCArcher>::DebugString() const::str
 D Action<CBotNPCArcher>::GetFullName() const::str
 D Action<CBotNPCDecoy>::DebugString() const::str
 D Action<CBotNPCDecoy>::GetFullName() const::str
 D Action<CEyeballBoss>::DebugString() const::str
 D Action<CEyeballBoss>::GetFullName() const::str
 D Action<CGhost>::DebugString() const::str
 D Action<CGhost>::GetFullName() const::str
 D Action<CHeadlessHatman>::DebugString() const::str
 D Action<CHeadlessHatman>::GetFullName() const::str
 D Action<CMerasmus>::DebugString() const::str
 D Action<CMerasmus>::GetFullName() const::str
 D Action<CSimpleBot>::DebugString() const::str
 D Action<CSimpleBot>::GetFullName() const::str
 D Action<CTFBot>::DebugString() const::str
 D Action<CTFBot>::GetFullName() const::str
 D Action<CTFRobotDestruction_Robot>::DebugString() const::str
 D Action<CTFRobotDestruction_Robot>::GetFullName() const::str
 D Action<CZombie>::DebugString() const::str
 D Action<CZombie>::GetFullName() const::str
 D AllocTempVector()::s_nIndex
 D AllocTempVector()::s_vecTemp
 D BannerModels
 D CAISound::m_DataMap
 D CAI_AccelDecay::m_DataMap
 D CAI_AllySpeechManager::m_DataMap
 D CAI_AssaultBehavior::m_DataMap
 D CAI_AssaultGoal::m_DataMap
 D CAI_BaseActor::m_DataMap
 D CAI_BaseFlyingBot::m_DataMap
 D CAI_BaseNPC::m_DataMap
 D CAI_BaseNPC::m_nDebugPauseIndex
 D CAI_BasePhysicsFlyingBot::m_DataMap
 D CAI_BattleLine::m_DataMap
 D CAI_BehaviorBase::m_DataMap
 D CAI_BlendedMotor::m_DataMap
 D CAI_ChangeHintGroup::m_DataMap
 D CAI_ChangeTarget::m_DataMap
 D CAI_DynamicLink::m_DataMap
 D CAI_DynamicLinkController::m_DataMap
 D CAI_Enemies::m_DataMap
 D CAI_Expresser::m_DataMap
 D CAI_FearBehavior::m_DataMap
 D CAI_FollowBehavior::m_DataMap
 D CAI_FollowGoal::m_DataMap
 D CAI_FreePass::m_DataMap
 D CAI_GoalEntity::m_DataMap
 D CAI_Hint::m_DataMap
 D CAI_InterestTarget_t::m_DataMap
 D CAI_LeadBehavior::m_DataMap
 D CAI_LeadGoal::m_DataMap
 D CAI_LeadGoal_Weapon::m_DataMap
 D CAI_LocalNavigator::m_DataMap
 D CAI_LookTarget::m_DataMap
 D CAI_Motor::m_DataMap
 D CAI_MoveAndShootOverlay::m_DataMap
 D CAI_MoveMonitor::m_DataMap
 D CAI_MoveProbe::m_DataMap
 D CAI_Navigator::m_DataMap
 D CAI_Network::GetNode(int, bool)::warningCount
 D CAI_NetworkEditTools::m_flAirEditDistance
 D CAI_NetworkEditTools::m_iGConnectivityNode
 D CAI_NetworkEditTools::m_iVisibilityNode
 D CAI_NetworkManager::m_DataMap
 D CAI_Path::m_DataMap
 D CAI_Pathfinder::m_DataMap
 D CAI_PlayerAlly::m_DataMap
 D CAI_ProxTester::m_DataMap
 D CAI_RadialLinkController::m_DataMap
 D CAI_RappelBehavior::m_DataMap
 D CAI_Relationship::m_DataMap
 D CAI_ScriptConditions::gm_Evaluators
 D CAI_ScriptConditions::m_DataMap
 D CAI_ScriptConditionsElement::m_DataMap
 D CAI_ScriptedSchedule::m_DataMap
 D CAI_ScriptedSentence::m_DataMap
 D CAI_ScriptedSequence::m_DataMap
 D CAI_Senses::m_DataMap
 D CAI_SentenceBase::m_DataMap
 D CAI_ShotRegulator::m_DataMap
 D CAI_SpeechFilter::m_DataMap
 D CAI_Squad::m_DataMap
 D CAI_StandoffBehavior::m_DataMap
 D CAI_StandoffGoal::m_DataMap
 D CAI_TacticalServices::m_DataMap
 D CAI_TrackPather::m_DataMap
 D CAchievementZone::m_DataMap
 D CAmbientGeneric::m_DataMap
 D CAnimationLayer::m_DataMap
 D CAreaPortal::m_DataMap
 D CArenaLogic::m_DataMap
 D CAssaultPoint::m_DataMap
 D CAttributeContainer::m_DataMap
 D CAttributeContainerPlayer::m_DataMap
 D CAttributeList::m_DataMap
 D CAttributeManager::m_DataMap
 D CBaseAchievement::m_DataMap
 D CBaseAnimating::m_DataMap
 D CBaseAnimating::m_pClassSendTable
 D CBaseAnimatingOverlay::m_DataMap
 D CBaseAnimatingOverlay::m_pClassSendTable
 D CBaseAttributableItem::m_DataMap
 D CBaseButton::m_DataMap
 D CBaseCombatCharacter::m_DataMap
 D CBaseCombatCharacter::m_pClassSendTable
 D CBaseCombatWeapon::m_DataMap
 D CBaseCombatWeapon::m_pClassSendTable
 D CBaseDMStart::m_DataMap
 D CBaseDoor::m_DataMap
 D CBaseEntity::m_DataMap
 D CBaseEntity::m_nDebugPlayer
 D CBaseEntity::m_nDebugSteps
 D CBaseEntity::m_nPredictionRandomSeed
 D CBaseEntity::m_nPredictionRandomSeedServer
 D CBaseEntity::m_pClassSendTable
 D CBaseEntity::sm_bAccurateTriggerBboxChecks
 D CBaseEntityOutput::m_DataMap
 D CBaseFilter::m_DataMap
 D CBaseFire::m_DataMap
 D CBaseFlex::m_DataMap
 D CBaseFlex::m_pClassSendTable
 D CBaseGrenade::m_DataMap
 D CBaseGrenade::m_pClassSendTable
 D CBaseGrenadeConcussion::m_DataMap
 D CBaseMoveBehavior::m_DataMap
 D CBaseNPCMaker::m_DataMap
 D CBaseObject::m_DataMap
 D CBaseObject::m_pClassSendTable
 D CBaseObjectUpgrade::m_pClassSendTable
 D CBaseParticleEntity::m_pClassSendTable
 D CBasePlatTrain::m_DataMap
 D CBasePlayer::m_DataMap
 D CBasePlayer::m_pClassSendTable
 D CBaseProjectile::m_pClassSendTable
 D CBasePropDoor::m_DataMap
 D CBaseServerVehicle::m_DataMap
 D CBaseTFBotHintEntity::m_DataMap
 D CBaseTeamObjectiveResource::m_DataMap
 D CBaseTeamObjectiveResource::m_pClassSendTable
 D CBaseTempEntity::m_pClassSendTable
 D CBaseToggle::m_DataMap
 D CBaseTrigger::m_DataMap
 D CBaseVPhysicsTrigger::m_DataMap
 D CBaseViewModel::m_DataMap
 D CBaseViewModel::m_pClassSendTable
 D CBeam::m_DataMap
 D CBlood::m_DataMap
 D CBoneFollower::m_DataMap
 D CBoneFollowerManager::m_DataMap
 D CBonusDuckPickup::m_DataMap
 D CBonusPack::m_DataMap
 D CBreakable::m_DataMap
 D CBreakable::pSpawnObjects
 D CBreakableProp::m_DataMap
 D CBreakableProp::m_pClassSendTable
 D CBreakableSurface::m_DataMap
 D CBubbling::m_DataMap
 D CCPTimerLogic::m_DataMap
 D CCaptureFlag::m_DataMap
 D CCaptureZone::m_DataMap
 D CChangeLevel::m_DataMap
 D CChoreoEvent::s_nGlobalID
 D CCollectAndLabelSpawnRoomAreas::operator()(CNavArea*)::stepHeight
 D CCollisionProperty::m_DataMap
 D CColorCorrection::m_DataMap
 D CColorCorrectionVolume::m_DataMap
 D CCommentaryAuto::m_DataMap
 D CCommentarySystem::m_DataMap
 D CCompetitiveLogic::m_DataMap
 D CConstantForceController::m_DataMap
 D CConstraintAnchor::m_DataMap
 D CCopyRecipientFilter::m_DataMap
 D CCredits::m_DataMap
 D CCurrencyPack::m_pClassSendTable
 D CDebugHistory::m_DataMap
 D CDecal::m_DataMap
 D CDmxElement* const& CDmxAttribute::GetValue<CDmxElement*>() const::defaultValue
 D CDmxElement* const& CDmxElement::GetValue<CDmxElement*>(char const*) const::defaultValue
 D CDynamicLight::m_DataMap
 D CDynamicProp::m_DataMap
 D CDynamicProp::m_pClassSendTable
 D CEconEntity::m_DataMap
 D CEconEntity::m_pClassSendTable
 D CEconItemView::m_DataMap
 D CEconTool_ItemDynamicRecipe::CBaseRecipeComponent::m_pszUseParentNameIdentifier
 D CEconWearable::m_DataMap
 D CEconWearable::m_pClassSendTable
 D CEmbers::m_DataMap
 D CEntityDissolve::m_DataMap
 D CEntityFlame::m_DataMap
 D CEntityParticleTrail::m_DataMap
 D CEntitySpawnManager::m_DataMap
 D CEntitySpawnPoint::m_DataMap
 D CEnvBeam::m_DataMap
 D CEnvBeverage::m_DataMap
 D CEnvDustPuff::m_DataMap
 D CEnvEffectsScript::m_DataMap
 D CEnvEntityMaker::m_DataMap
 D CEnvExplosion::m_DataMap
 D CEnvFade::m_DataMap
 D CEnvFireSensor::m_DataMap
 D CEnvFireSource::m_DataMap
 D CEnvFunnel::m_DataMap
 D CEnvGlobal::m_DataMap
 D CEnvGunfire::m_DataMap
 D CEnvHudHint::m_DataMap
 D CEnvLaser::m_DataMap
 D CEnvMicrophone::m_DataMap
 D CEnvMuzzleFlash::m_DataMap
 D CEnvParticleScript::m_DataMap
 D CEnvPlayerSurfaceTrigger::m_DataMap
 D CEnvProjectedTexture::m_DataMap
 D CEnvQuadraticBeam::m_DataMap
 D CEnvScreenEffect::m_DataMap
 D CEnvScreenOverlay::m_DataMap
 D CEnvShake::m_DataMap
 D CEnvShooter::m_DataMap
 D CEnvSoundscape::m_DataMap
 D CEnvSoundscapeProxy::m_DataMap
 D CEnvSoundscapeTriggerable::m_DataMap
 D CEnvSpark::m_DataMap
 D CEnvSplash::m_DataMap
 D CEnvTonemapController::m_DataMap
 D CEnvTracer::m_DataMap
 D CEnvViewPunch::m_DataMap
 D CEnvWind::m_DataMap
 D CEnvZoom::m_DataMap
 D CEventAction::m_DataMap
 D CEventQueue::m_DataMap
 D CExtraMapEntity::m_DataMap
 D CEyeballBoss::m_level
 D CEyeballBossLocomotion::GetGroundNormal() const::up
 D CFailableAchievement::m_DataMap
 D CFilterClass::m_DataMap
 D CFilterEnemy::m_DataMap
 D CFilterMassGreater::m_DataMap
 D CFilterMultiple::m_DataMap
 D CFilterName::m_DataMap
 D CFilterTFBotHasTag::m_DataMap
 D CFilterTFCanCap::m_DataMap
 D CFilterTFClass::m_DataMap
 D CFilterTFCondition::m_DataMap
 D CFilterTFTeam::m_DataMap
 D CFire::m_DataMap
 D CFireSmoke::m_DataMap
 D CFireTrail::m_DataMap
 D CFish::m_DataMap
 D CFishPool::m_DataMap
 D CFlagDetectionZone::m_DataMap
 D CFlexCycler::m_DataMap
 D CFlextalkActor::m_DataMap
 D CFmtStrN<1024, false>::CFmtStrN(char const*, ...)::scAsserted
 D CFmtStrN<128, false>::CFmtStrN(char const*, ...)::scAsserted
 D CFmtStrN<256, false>::CFmtStrN(char const*, ...)::scAsserted
 D CFmtStrN<256, false>::sprintf(char const*, ...)::scAsserted
 D CFmtStrN<32, false>::CFmtStrN(char const*, ...)::scAsserted
 D CFmtStrN<32, false>::sprintf(char const*, ...)::scAsserted
 D CFogController::m_DataMap
 D CFourWheelServerVehicle::m_DataMap
 D CFourWheelVehiclePhysics::m_DataMap
 D CFuncAreaPortalBase::m_DataMap
 D CFuncAreaPortalWindow::m_DataMap
 D CFuncBrush::m_DataMap
 D CFuncConveyor::m_DataMap
 D CFuncFlagAlertZone::m_DataMap
 D CFuncForceField::m_DataMap
 D CFuncLadder::m_DataMap
 D CFuncMonitor::m_DataMap
 D CFuncMoveLinear::m_DataMap
 D CFuncNavBlocker::m_DataMap
 D CFuncNavCost::m_DataMap
 D CFuncNavObstruction::m_DataMap
 D CFuncNavPrerequisite::m_DataMap
 D CFuncNoBuild::m_DataMap
 D CFuncOccluder::m_DataMap
 D CFuncPasstimeGoal::m_DataMap
 D CFuncPasstimeGoalieZone::m_DataMap
 D CFuncPasstimeNoBallZone::m_DataMap
 D CFuncPlat::m_DataMap
 D CFuncPlatRot::m_DataMap
 D CFuncReflectiveGlass::m_DataMap
 D CFuncRespawnFlagZone::m_DataMap
 D CFuncRespawnRoom::m_DataMap
 D CFuncRespawnRoomVisualizer::m_DataMap
 D CFuncRotating::m_DataMap
 D CFuncSmokeVolume::m_DataMap
 D CFuncSuggestedBuild::m_DataMap
 D CFuncTankTrain::m_DataMap
 D CFuncTrackAuto::m_DataMap
 D CFuncTrackChange::m_DataMap
 D CFuncTrackTrain::m_DataMap
 D CFuncTrain::m_DataMap
 D CFuncTrainControls::m_DataMap
 D CFuncVPhysicsClip::m_DataMap
 D CFuncVehicleClip::m_DataMap
 D CFuncWall::m_DataMap
 D CFuncWallToggle::m_DataMap
 D CFunc_Dust::m_DataMap
 D CFunc_LOD::m_DataMap
 D CGameEnd::m_DataMap
 D CGameGibManager::m_DataMap
 D CGamePlayerEquip::m_DataMap
 D CGamePlayerZone::m_DataMap
 D CGameRulesProxy::m_pClassSendTable
 D CGameScore::m_DataMap
 D CGameText::m_DataMap
 D CGameUI::m_DataMap
 D CGameWeaponManager::m_DataMap
 D CGenericActor::m_DataMap
 D CGib::m_DataMap
 D CGibShooter::m_DataMap
 D CGlobalState::m_DataMap
 D CGunTarget::m_DataMap
 D CHalloweenGiftPickup::m_DataMap
 D CHalloweenPickup::m_DataMap
 D CHalloweenPickup::m_pClassSendTable
 D CHightower_TeleportVortex::m_DataMap
 D CInfoCameraLink::m_DataMap
 D CInfoLightingRelative::m_DataMap
 D CInfoOverlayAccessor::m_DataMap
 D CInstancedSceneEntity::m_DataMap
 D CIntroViewpoint::m_DataMap
 D CItem::m_DataMap
 D CItemSoda::m_DataMap
 D CKeepUpright::m_DataMap
 D CKothLogic::m_DataMap
 D CLaserDot::m_DataMap
 D CLight::m_DataMap
 D CLightGlow::m_DataMap
 D CLogicActiveAutosave::m_DataMap
 D CLogicAuto::m_DataMap
 D CLogicAutosave::m_DataMap
 D CLogicBranch::m_DataMap
 D CLogicBranchList::m_DataMap
 D CLogicCase::m_DataMap
 D CLogicCollisionPair::m_DataMap
 D CLogicCompare::m_DataMap
 D CLogicCompareInteger::m_DataMap
 D CLogicLineToEntity::m_DataMap
 D CLogicMannPower::m_DataMap
 D CLogicMeasureMovement::m_DataMap
 D CLogicNavigation::m_DataMap
 D CLogicOnHoliday::m_DataMap
 D CLogicRelay::m_DataMap
 D CMannVsMachineLogic::m_DataMap
 D CMaterialModifyControl::m_DataMap
 D CMathColorBlend::m_DataMap
 D CMathCounter::m_DataMap
 D CMathRemap::m_DataMap
 D CMerasmus::m_level
 D CMerasmusFlyingLocomotion::GetGroundNormal() const::up
 D CMessage::m_DataMap
 D CMessageEntity::m_DataMap
 D CMomentaryRotButton::m_DataMap
 D CMonsterResource::m_DataMap
 D CMotorController::m_DataMap
 D CMovementSpeedMod::m_DataMap
 D CMultiDamage::m_DataMap
 D CMultiSource::m_DataMap
 D CNPCMaker::m_DataMap
 D CNPCSpawnDestination::m_DataMap
 D CNPC_Furniture::m_DataMap
 D CNPC_VehicleDriver::gm_SchedLoadStatus
 D CNPC_VehicleDriver::gm_pszErrorClassName
 D CNPC_VehicleDriver::m_DataMap
 D CNavArea::m_masterMarker
 D CNavArea::m_nextID
 D CNavLadder::m_nextID
 D CNavNode::m_nextID
 D CNodeEnt::m_DataMap
 D CObjectCartDispenser::m_DataMap
 D CObjectDispenser::m_DataMap
 D CObjectDispenser::m_pClassSendTable
 D CObjectSapper::m_DataMap
 D CObjectSentrygun::m_DataMap
 D CObjectTeleporter::m_DataMap
 D CObserverPoint::m_DataMap
 D COrnamentProp::m_DataMap
 D CParticleFire::m_DataMap
 D CParticleLight::m_DataMap
 D CParticlePerformanceMonitor::m_DataMap
 D CParticleSystem::m_DataMap
 D CPassengerInfo::m_DataMap
 D CPasstimeBallSpawn::m_DataMap
 D CPathCorner::m_DataMap
 D CPathKeyFrame::m_DataMap
 D CPathTrack::m_DataMap
 D CPhysBox::m_DataMap
 D CPhysBox::m_pClassSendTable
 D CPhysBoxMultiplayer::m_DataMap
 D CPhysConstraint::m_DataMap
 D CPhysConstraintSystem::m_DataMap
 D CPhysConvert::m_DataMap
 D CPhysExplosion::m_DataMap
 D CPhysForce::m_DataMap
 D CPhysHinge::m_DataMap
 D CPhysImpact::m_DataMap
 D CPhysLength::m_DataMap
 D CPhysMagnet::m_DataMap
 D CPhysMotor::m_DataMap
 D CPhysPulley::m_DataMap
 D CPhysSlideConstraint::m_DataMap
 D CPhysThruster::m_DataMap
 D CPhysTorque::m_DataMap
 D CPhysicsCannister::m_DataMap
 D CPhysicsEntitySolver::m_DataMap
 D CPhysicsNPCSolver::m_DataMap
 D CPhysicsProp::m_DataMap
 D CPhysicsProp::m_pClassSendTable
 D CPhysicsPropMultiplayer::m_DataMap
 D CPhysicsPropRespawnable::m_DataMap
 D CPhysicsShake::m_DataMap
 D CPhysicsSpring::m_DataMap
 D CPhysicsWind::m_DataMap
 D CPhysicsWire::m_DataMap
 D CPlasma::m_DataMap
 D CPlayerDestructionDispenser::m_DataMap
 D CPlayerLocalData::m_DataMap
 D CPlayerResource::m_DataMap
 D CPlayerResource::m_pClassSendTable
 D CPlayerState::m_DataMap
 D CPointAngleSensor::m_DataMap
 D CPointAngularVelocitySensor::m_DataMap
 D CPointBonusMapsAccessor::m_DataMap
 D CPointCamera::m_DataMap
 D CPointClientCommand::m_DataMap
 D CPointCommentaryNode::m_DataMap
 D CPointDevShotCamera::m_DataMap
 D CPointGamestatsCounter::m_DataMap
 D CPointHurt::m_DataMap
 D CPointNavInterface::m_DataMap
 D CPointPlayerMoveConstraint::m_DataMap
 D CPointPopulatorInterface::m_DataMap
 D CPointProximitySensor::m_DataMap
 D CPointPush::m_DataMap
 D CPointServerCommand::m_DataMap
 D CPointSpotlight::m_DataMap
 D CPointTeleport::m_DataMap
 D CPointTemplate::m_DataMap
 D CPointVelocitySensor::m_DataMap
 D CPopulationManager::m_DataMap
 D CPoseController::m_DataMap
 D CPrecipitation::m_DataMap
 D CProjectedDecal::m_DataMap
 D CPropDoorRotating::m_DataMap
 D CPropSoccerBall::m_DataMap
 D CPropVehicle::m_DataMap
 D CPropVehicleDriveable::m_DataMap
 D CRagdollBoogie::m_DataMap
 D CRagdollConstraint::m_DataMap
 D CRagdollMagnet::m_DataMap
 D CRagdollManager::m_DataMap
 D CRagdollProp::m_DataMap
 D CRagdollProp::m_pClassSendTable
 D CRagdollPropAttached::m_DataMap
 D CRallyPoint::m_DataMap
 D CRandSimTimer::m_DataMap
 D CRandStopwatch::m_DataMap
 D CRegenerateZone::m_DataMap
 D CRevertSaved::m_DataMap
 D CRobotDestructionVaultTrigger::m_DataMap
 D CRobotDispenser::m_DataMap
 D CRopeAnchor::m_DataMap
 D CRopeKeyframe::m_DataMap
 D CRotDoor::m_DataMap
 D CRotorWashShooter::m_DataMap
 D CRuleEntity::m_DataMap
 D CRulePointEntity::m_DataMap
 D CSceneEntity::m_DataMap
 D CSceneListManager::m_DataMap
 D CSceneManager::m_DataMap
 D CScriptedTarget::m_DataMap
 D CSelectPrimaryPatient::SelectPreferred(CTFPlayer*, CTFPlayer*)::preferredClass
 D CServerNetworkProperty::m_DataMap
 D CShadowControl::m_DataMap
 D CSimTimer::m_DataMap
 D CSimpleSimTimer::m_DataMap
 D CSkyCamera::m_DataMap
 D CSlideshowDisplay::m_DataMap
 D CSmokeStack::m_DataMap
 D CSmokeStackLightInfo::m_DataMap
 D CSniperDot::m_DataMap
 D CSniperDot::m_pClassSendTable
 D CSound::m_DataMap
 D CSoundEmitterSystem::PrecacheScriptSound(char const*)::s_PrecacheScriptSoundFailures
 D CSoundEnt::m_DataMap
 D CSoundEnvelope::m_DataMap
 D CSoundPatch::m_DataMap
 D CSpellPickup::m_DataMap
 D CSpotlightEnd::m_DataMap
 D CSprite::m_DataMap
 D CSprite::m_pClassSendTable
 D CSpriteTrail::m_DataMap
 D CSteamJet::m_DataMap
 D CStopwatch::m_DataMap
 D CStopwatchBase::m_DataMap
 D CStrangeEventValidator::BInitEventParams(IEconItemInterface*, CTFPlayer*, CTFPlayer*)::pAttrDef_KillEater
 D CStripWeapons::m_DataMap
 D CSun::m_DataMap
 D CTEBaseBeam::m_pClassSendTable
 D CTEMetalSparks::m_pClassSendTable
 D CTEParticleSystem::m_pClassSendTable
 D CTFAmmoPack::m_DataMap
 D CTFBaseBoss::m_DataMap
 D CTFBaseBoss::m_pClassSendTable
 D CTFBaseProjectile::m_DataMap
 D CTFBaseProjectile::m_pClassSendTable
 D CTFBaseRocket::m_DataMap
 D CTFBaseRocket::m_pClassSendTable
 D CTFBat::m_pClassSendTable
 D CTFBat_Wood::m_pClassSendTable
 D CTFBotActionPoint::m_DataMap
 D CTFBotController::m_DataMap
 D CTFBotGenerator::m_DataMap
 D CTFBotHint::m_DataMap
 D CTFBotHintEngineerNest::m_DataMap
 D CTFBotHintSentrygun::m_DataMap
 D CTFBotHintTeleporterExit::m_DataMap
 D CTFBotProxy::m_DataMap
 D CTFBotRoster::m_DataMap
 D CTFBottle::m_pClassSendTable
 D CTFBuffItem::m_pClassSendTable
 D CTFChargedSMG::m_DataMap
 D CTFCompoundBow::m_DataMap
 D CTFCrossbow::m_DataMap
 D CTFFlameThrower::m_DataMap
 D CTFFlareGun::m_DataMap
 D CTFFlareGun::m_pClassSendTable
 D CTFForceRespawn::m_DataMap
 D CTFGameRules::ItemTesting_GetBotAnimSpeed()::pHostTimescale
 D CTFGameRulesProxy::m_DataMap
 D CTFGenericBomb::m_DataMap
 D CTFGlow::m_DataMap
 D CTFGrapplingHook::m_DataMap
 D CTFGrenadeLauncher::m_DataMap
 D CTFGrenadeLauncher::m_pClassSendTable
 D CTFGrenadePipebombProjectile::m_DataMap
 D CTFGrenadePipebombProjectile::m_pClassSendTable
 D CTFHalloweenFortuneTeller::m_DataMap
 D CTFHalloweenMinigame::m_DataMap
 D CTFHalloweenMinigame::m_pClassSendTable
 D CTFHalloweenMinigame_FallingPlatforms::m_DataMap
 D CTFHellZap::m_DataMap
 D CTFHolidayEntity::m_DataMap
 D CTFHudNotify::m_DataMap
 D CTFInfoPowerupSpawn::m_DataMap
 D CTFIntermission::m_DataMap
 D CTFItem::m_pClassSendTable
 D CTFJar::m_pClassSendTable
 D CTFLunchBox::m_DataMap
 D CTFLunchBox::m_pClassSendTable
 D CTFMedigunShield::m_DataMap
 D CTFMiniGame::m_DataMap
 D CTFMiniGame::m_pClassSendTable
 D CTFMinigameLogic::m_DataMap
 D CTFMinigun::m_DataMap
 D CTFNavArea::m_masterTFMark
 D CTFObjectiveResource::m_DataMap
 D CTFParachute::m_pClassSendTable
 D CTFParticleCannon::m_DataMap
 D CTFPasstimeLogic::m_DataMap
 D CTFPipebombLauncher::m_DataMap
 D CTFPipebombLauncher::m_pClassSendTable
 D CTFPistol::m_DataMap
 D CTFPistol::m_pClassSendTable
 D CTFPistol_Scout::m_pClassSendTable
 D CTFPlayer::m_DataMap
 D CTFPlayer::m_bTFPlayerNeedsPrecache
 D CTFPlayerDestructionLogic::m_DataMap
 D CTFPointWeaponMimic::m_DataMap
 D CTFPowerup::m_DataMap
 D CTFPowerupBottle::m_DataMap
 D CTFProjectile_Arrow::m_DataMap
 D CTFProjectile_Arrow::m_pClassSendTable
 D CTFProjectile_EnergyBall::m_DataMap
 D CTFProjectile_Flare::m_DataMap
 D CTFProjectile_GrapplingHook::m_DataMap
 D CTFProjectile_HealingBolt::m_DataMap
 D CTFProjectile_Jar::m_pClassSendTable
 D CTFProjectile_Rocket::m_pClassSendTable
 D CTFProjectile_SpellBats::m_pClassSendTable
 D CTFProjectile_SpellFireball::m_pClassSendTable
 D CTFProjectile_SpellSpawnBoss::InitialExplodeEffects(CTFPlayer*, CGameTrace const*)::vTest
 D CTFProjectile_Throwable::m_pClassSendTable
 D CTFQuestBasePlayerRestriction::BInitFromKV(KeyValues*, CUtlVector<CUtlString, CUtlMemory<CUtlString, int> >*)::s_pszValidGetMethod
 D CTFRaygun::m_pClassSendTable
 D CTFReviveMarker::m_DataMap
 D CTFRevolver::m_DataMap
 D CTFRobotDestructionLogic::m_DataMap
 D CTFRobotDestructionLogic::m_pClassSendTable
 D CTFRobotDestruction_Robot::m_DataMap
 D CTFRobotDestruction_RobotGroup::m_DataMap
 D CTFRobotDestruction_RobotSpawn::m_DataMap
 D CTFRocketLauncher::m_DataMap
 D CTFRocketLauncher::m_pClassSendTable
 D CTFRocketLauncher_AirStrike::m_DataMap
 D CTFRocketLauncher_DirectHit::m_DataMap
 D CTFRocketLauncher_Mortar::m_DataMap
 D CTFSMG::m_DataMap
 D CTFSMG::m_pClassSendTable
 D CTFScatterGun::m_pClassSendTable
 D CTFShotgun::m_pClassSendTable
 D CTFSniperRifle::m_DataMap
 D CTFSniperRifle::m_pClassSendTable
 D CTFSpawner::m_DataMap
 D CTFSpell_MeteorShowerSpawner::m_DataMap
 D CTFStunBall::m_pClassSendTable
 D CTFSyringeGun::m_DataMap
 D CTFTankBoss::m_DataMap
 D CTFTankDestruction::m_DataMap
 D CTFTeamSpawn::m_DataMap
 D CTFThrowable::m_pClassSendTable
 D CTFWeaponBase::m_DataMap
 D CTFWeaponBase::m_pClassSendTable
 D CTFWeaponBaseGrenadeProj::m_DataMap
 D CTFWeaponBaseGrenadeProj::m_pClassSendTable
 D CTFWeaponBaseGun::m_DataMap
 D CTFWeaponBaseGun::m_pClassSendTable
 D CTFWeaponBaseMelee::m_DataMap
 D CTFWeaponBaseMelee::m_pClassSendTable
 D CTFWeaponBuilder::m_pClassSendTable
 D CTFWeaponInvis::m_DataMap
 D CTFWeaponPDA::m_DataMap
 D CTFWeaponPDA::m_pClassSendTable
 D CTFWeaponPDAExpansion_Dispenser::m_DataMap
 D CTFWeaponPDAExpansion_Teleporter::m_DataMap
 D CTFWearable::m_DataMap
 D CTFWearable::m_pClassSendTable
 D CTFWearableDemoShield::m_DataMap
 D CTFWearableItem::m_DataMap
 D CTFWearableLevelableItem::m_DataMap
 D CTFWrench::m_pClassSendTable
 D CTakeDamageInfo::m_DataMap
 D CTankTargetChange::m_DataMap
 D CTankTrainAI::m_DataMap
 D CTargetCDAudioRep::m_DataMap
 D CTargetChangeGravity::m_DataMap
 D CTeam::m_pClassSendTable
 D CTeamControlPoint::m_DataMap
 D CTeamControlPointMaster::m_DataMap
 D CTeamControlPointRound::m_DataMap
 D CTeamRoundTimer::m_DataMap
 D CTeamTrainWatcher::m_DataMap
 D CTeamplayRoundBasedRulesProxy::m_DataMap
 D CTeamplayRoundBasedRulesProxy::m_pClassSendTable
 D CTeamplayRoundWin::m_DataMap
 D CTeleportVortex::m_DataMap
 D CTeleportVortex::m_pClassSendTable
 D CTemplateNPCMaker::m_DataMap
 D CTesla::m_DataMap
 D CTestTraceline::m_DataMap
 D CTextureToggle::m_DataMap
 D CThrustController::m_DataMap
 D CTimerEntity::m_DataMap
 D CTrainingAnnotation::m_DataMap
 D CTrainingModeLogic::m_DataMap
 D CTriggerAddOrRemoveTFPlayerAttributes::m_DataMap
 D CTriggerAddTFPlayerCondition::m_DataMap
 D CTriggerApplyImpulse::m_DataMap
 D CTriggerAreaCapture::m_DataMap
 D CTriggerBotTag::m_DataMap
 D CTriggerBrush::m_DataMap
 D CTriggerCamera::m_DataMap
 D CTriggerCatapult::m_DataMap
 D CTriggerCatapult::s_szPlayerPassesTriggerFiltersThinkContext
 D CTriggerGravity::m_DataMap
 D CTriggerHurt::m_DataMap
 D CTriggerIgnite::m_DataMap
 D CTriggerIgniteArrows::m_DataMap
 D CTriggerImpact::m_DataMap
 D CTriggerLook::m_DataMap
 D CTriggerMultiple::m_DataMap
 D CTriggerParticle::m_DataMap
 D CTriggerPasstimeBall::m_DataMap
 D CTriggerPlayerMovement::m_DataMap
 D CTriggerPlayerRespawnOverride::m_DataMap
 D CTriggerProximity::m_DataMap
 D CTriggerPush::m_DataMap
 D CTriggerRemove::m_DataMap
 D CTriggerRemoveTFPlayerCondition::m_DataMap
 D CTriggerSave::m_DataMap
 D CTriggerSoundscape::m_DataMap
 D CTriggerStun::m_DataMap
 D CTriggerTeleport::m_DataMap
 D CTriggerTeleportRelative::m_DataMap
 D CTriggerTimerDoor::m_DataMap
 D CTriggerToggleSave::m_DataMap
 D CTriggerVPhysicsMotion::m_DataMap
 D CTriggerWind::m_DataMap
 D CUpgrades::m_DataMap
 D CUtlCachedFileData<CModelSoundsCache>::Save()::__executeCount
 D CUtlRBTree<AI_CriteriaSet::CritEntry_t, short, bool (*)(AI_CriteriaSet::CritEntry_t const&, AI_CriteriaSet::CritEntry_t const&), CUtlMemory<UtlRBTreeNode_t<AI_CriteriaSet::CritEntry_t, short>, short> >::Links(short) const::s_Sentinel
 D CUtlRBTree<CAI_BaseNPC*, unsigned short, bool (*)(CAI_BaseNPC* const&, CAI_BaseNPC* const&), CUtlMemory<UtlRBTreeNode_t<CAI_BaseNPC*, unsigned short>, unsigned short> >::Links(unsigned short) const::s_Sentinel
 D CUtlRBTree<CBaseEntity*, unsigned short, bool (*)(CBaseEntity* const&, CBaseEntity* const&), CUtlMemory<UtlRBTreeNode_t<CBaseEntity*, unsigned short>, unsigned short> >::Links(unsigned short) const::s_Sentinel
 D CUtlRBTree<CBaseFlex::FS_LocalToGlobal_t, unsigned short, bool (*)(CBaseFlex::FS_LocalToGlobal_t const&, CBaseFlex::FS_LocalToGlobal_t const&), CUtlMemory<UtlRBTreeNode_t<CBaseFlex::FS_LocalToGlobal_t, unsigned short>, unsigned short> >::Links(unsigned short) const::s_Sentinel
 D CUtlRBTree<CBreakModelsPrecached::breakable_precache_t, unsigned short, bool (*)(CBreakModelsPrecached::breakable_precache_t const&, CBreakModelsPrecached::breakable_precache_t const&), CUtlMemory<UtlRBTreeNode_t<CBreakModelsPrecached::breakable_precache_t, unsigned short>, unsigned short> >::Links(unsigned short) const::s_Sentinel
 D CUtlRBTree<CChoreoEvent*, unsigned short, bool (*)(CChoreoEvent* const&, CChoreoEvent* const&), CUtlMemory<UtlRBTreeNode_t<CChoreoEvent*, unsigned short>, unsigned short> >::Links(unsigned short) const::s_Sentinel
 D CUtlRBTree<CChoreoScene::ActiveList, int, bool (*)(CChoreoScene::ActiveList const&, CChoreoScene::ActiveList const&), CUtlMemory<UtlRBTreeNode_t<CChoreoScene::ActiveList, int>, int> >::Links(int) const::s_Sentinel
 D CUtlRBTree<CCombatCharVisCache::VisCacheEntry_t, unsigned short, CCombatCharVisCache::CVisCacheEntryLess, CUtlMemory<UtlRBTreeNode_t<CCombatCharVisCache::VisCacheEntry_t, unsigned short>, unsigned short> >::Links(unsigned short) const::s_Sentinel
 D CUtlRBTree<CHLTVGameEvent, unsigned short, bool (*)(CHLTVGameEvent const&, CHLTVGameEvent const&), CUtlMemory<UtlRBTreeNode_t<CHLTVGameEvent, unsigned short>, unsigned short> >::Links(unsigned short) const::s_Sentinel
 D CUtlRBTree<CSceneEntity::SpeakEventSound_t, unsigned short, bool (*)(CSceneEntity::SpeakEventSound_t const&, CSceneEntity::SpeakEventSound_t const&), CUtlMemory<UtlRBTreeNode_t<CSceneEntity::SpeakEventSound_t, unsigned short>, unsigned short> >::Links(unsigned short) const::s_Sentinel
 D CUtlRBTree<CUtlCachedFileData<CModelSoundsCache>::ElementType_t, unsigned short, bool (*)(CUtlCachedFileData<CModelSoundsCache>::ElementType_t const&, CUtlCachedFileData<CModelSoundsCache>::ElementType_t const&), CUtlMemory<UtlRBTreeNode_t<CUtlCachedFileData<CModelSoundsCache>::ElementType_t, unsigned short>, unsigned short> >::Links(unsigned short) const::s_Sentinel
 D CUtlRBTree<CUtlMap<CBaseEntity const*, float, unsigned short>::Node_t, unsigned short, CUtlMap<CBaseEntity const*, float, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<CBaseEntity const*, float, unsigned short>::Node_t, unsigned short>, unsigned short> >::Links(unsigned short) const::s_Sentinel
 D CUtlRBTree<CUtlMap<CBaseEntity*, AI_EnemyInfo_t*, unsigned char>::Node_t, unsigned char, CUtlMap<CBaseEntity*, AI_EnemyInfo_t*, unsigned char>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<CBaseEntity*, AI_EnemyInfo_t*, unsigned char>::Node_t, unsigned char>, unsigned char> >::Links(unsigned char) const::s_Sentinel
 D CUtlRBTree<CUtlMap<CBaseEntity*, CPhysSaveRestoreBlockHandler::CEntityRestoreSet*, unsigned short>::Node_t, unsigned short, CUtlMap<CBaseEntity*, CPhysSaveRestoreBlockHandler::CEntityRestoreSet*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<CBaseEntity*, CPhysSaveRestoreBlockHandler::CEntityRestoreSet*, unsigned short>::Node_t, unsigned short>, unsigned short> >::Links(unsigned short) const::s_Sentinel
 D CUtlRBTree<CUtlMap<CBaseEntity*, int, unsigned short>::Node_t, unsigned short, CUtlMap<CBaseEntity*, int, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<CBaseEntity*, int, unsigned short>::Node_t, unsigned short>, unsigned short> >::Links(unsigned short) const::s_Sentinel
 D CUtlRBTree<CUtlMap<CChoreoActor*, CBaseFlex*, unsigned short>::Node_t, unsigned short, CUtlMap<CChoreoActor*, CBaseFlex*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<CChoreoActor*, CBaseFlex*, unsigned short>::Node_t, unsigned short>, unsigned short> >::Links(unsigned short) const::s_Sentinel
 D CUtlRBTree<CUtlMap<CMsgTFXPSource_XPSourceType, float, unsigned short>::Node_t, unsigned short, CUtlMap<CMsgTFXPSource_XPSourceType, float, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<CMsgTFXPSource_XPSourceType, float, unsigned short>::Node_t, unsigned short>, unsigned short> >::Links(unsigned short) const::s_Sentinel
 D CUtlRBTree<CUtlMap<CPhysCollide const*, BBox_t, unsigned short>::Node_t, unsigned short, CUtlMap<CPhysCollide const*, BBox_t, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<CPhysCollide const*, BBox_t, unsigned short>::Node_t, unsigned short>, unsigned short> >::Links(unsigned short) const::s_Sentinel
 D CUtlRBTree<CUtlMap<CSteamID, GCSDK::CGCClientSharedObjectCache*, unsigned short>::Node_t, unsigned short, CUtlMap<CSteamID, GCSDK::CGCClientSharedObjectCache*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<CSteamID, GCSDK::CGCClientSharedObjectCache*, unsigned short>::Node_t, unsigned short>, unsigned short> >::Links(unsigned short) const::s_Sentinel
 D CUtlRBTree<CUtlMap<CSteamID, float, unsigned short>::Node_t, unsigned short, CUtlMap<CSteamID, float, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<CSteamID, float, unsigned short>::Node_t, unsigned short>, unsigned short> >::Links(unsigned short) const::s_Sentinel
 D CUtlRBTree<CUtlMap<CUtlConstStringBase<char>, int, unsigned short>::Node_t, unsigned short, CUtlMap<CUtlConstStringBase<char>, int, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<CUtlConstStringBase<char>, int, unsigned short>::Node_t, unsigned short>, unsigned short> >::Links(unsigned short) const::s_Sentinel
 D CUtlRBTree<CUtlMap<CUtlString, float, unsigned short>::Node_t, unsigned short, CUtlMap<CUtlString, float, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<CUtlString, float, unsigned short>::Node_t, unsigned short>, unsigned short> >::Links(unsigned short) const::s_Sentinel
 D CUtlRBTree<CUtlMap<EGameCategory, SchemaGameCategory_t*, unsigned short>::Node_t, unsigned short, CUtlMap<EGameCategory, SchemaGameCategory_t*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<EGameCategory, SchemaGameCategory_t*, unsigned short>::Node_t, unsigned short>, unsigned short> >::Links(unsigned short) const::s_Sentinel
 D CUtlRBTree<CUtlMap<EMatchmakingGroupType, SchemaMMGroup_t*, unsigned short>::Node_t, unsigned short, CUtlMap<EMatchmakingGroupType, SchemaMMGroup_t*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<EMatchmakingGroupType, SchemaMMGroup_t*, unsigned short>::Node_t, unsigned short>, unsigned short> >::Links(unsigned short) const::s_Sentinel
 D CUtlRBTree<CUtlMap<IPhysicsObject*, CPhysCollide const*, unsigned short>::Node_t, unsigned short, CUtlMap<IPhysicsObject*, CPhysCollide const*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<IPhysicsObject*, CPhysCollide const*, unsigned short>::Node_t, unsigned short>, unsigned short> >::Links(unsigned short) const::s_Sentinel
 D CUtlRBTree<CUtlMap<IPhysicsObject*, int, unsigned short>::Node_t, unsigned short, CUtlMap<IPhysicsObject*, int, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<IPhysicsObject*, int, unsigned short>::Node_t, unsigned short>, unsigned short> >::Links(unsigned short) const::s_Sentinel
 D CUtlRBTree<CUtlMap<char const*, AchievementAward_t*, int>::Node_t, int, CUtlMap<char const*, AchievementAward_t*, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, AchievementAward_t*, int>::Node_t, int>, int> >::Links(int) const::s_Sentinel
 D CUtlRBTree<CUtlMap<char const*, BasicGameStatsRecord_t, unsigned short>::Node_t, unsigned short, CUtlMap<char const*, BasicGameStatsRecord_t, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, BasicGameStatsRecord_t, unsigned short>::Node_t, unsigned short>, unsigned short> >::Links(unsigned short) const::s_Sentinel
 D CUtlRBTree<CUtlMap<char const*, CActivityRemapCache, int>::Node_t, int, CUtlMap<char const*, CActivityRemapCache, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CActivityRemapCache, int>::Node_t, int>, int> >::Links(int) const::s_Sentinel
 D CUtlRBTree<CUtlMap<char const*, CDecalEmitterSystem::DecalEntry, int>::Node_t, int, CUtlMap<char const*, CDecalEmitterSystem::DecalEntry, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CDecalEmitterSystem::DecalEntry, int>::Node_t, int>, int> >::Links(int) const::s_Sentinel
 D CUtlRBTree<CUtlMap<char const*, CEconItemCollectionDefinition*, int>::Node_t, int, CUtlMap<char const*, CEconItemCollectionDefinition*, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CEconItemCollectionDefinition*, int>::Node_t, int>, int> >::Links(int) const::s_Sentinel
 D CUtlRBTree<CUtlMap<char const*, CEconItemPaintKitDefinition*, int>::Node_t, int, CUtlMap<char const*, CEconItemPaintKitDefinition*, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CEconItemPaintKitDefinition*, int>::Node_t, int>, int> >::Links(int) const::s_Sentinel
 D CUtlRBTree<CUtlMap<char const*, CEconItemSetDefinition*, int>::Node_t, int, CUtlMap<char const*, CEconItemSetDefinition*, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CEconItemSetDefinition*, int>::Node_t, int>, int> >::Links(int) const::s_Sentinel
 D CUtlRBTree<CUtlMap<char const*, CEconLootListDefinition*, int>::Node_t, int, CUtlMap<char const*, CEconLootListDefinition*, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CEconLootListDefinition*, int>::Node_t, int>, int> >::Links(int) const::s_Sentinel
 D CUtlRBTree<CUtlMap<char const*, CEconOperationDefinition*, int>::Node_t, int, CUtlMap<char const*, CEconOperationDefinition*, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CEconOperationDefinition*, int>::Node_t, int>, int> >::Links(int) const::s_Sentinel
 D CUtlRBTree<CUtlMap<char const*, CInstancedResponseSystem*, int>::Node_t, int, CUtlMap<char const*, CInstancedResponseSystem*, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CInstancedResponseSystem*, int>::Node_t, int>, int> >::Links(int) const::s_Sentinel
 D CUtlRBTree<CUtlMap<char const*, CNavArea*, int>::Node_t, int, CUtlMap<char const*, CNavArea*, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CNavArea*, int>::Node_t, int>, int> >::Links(int) const::s_Sentinel
 D CUtlRBTree<CUtlMap<char const*, CQuestThemeDefinition*, int>::Node_t, int, CUtlMap<char const*, CQuestThemeDefinition*, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CQuestThemeDefinition*, int>::Node_t, int>, int> >::Links(int) const::s_Sentinel
 D CUtlRBTree<CUtlMap<char const*, CResponseSystem::Enumeration, short>::Node_t, short, CUtlMap<char const*, CResponseSystem::Enumeration, short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CResponseSystem::Enumeration, short>::Node_t, short>, short> >::Links(short) const::s_Sentinel
 D CUtlRBTree<CUtlMap<char const*, CUserMessage*, int>::Node_t, int, CUtlMap<char const*, CUserMessage*, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CUserMessage*, int>::Node_t, int>, int> >::Links(int) const::s_Sentinel
 D CUtlRBTree<CUtlMap<char const*, CUtlConstStringBase<char>, int>::Node_t, int, CUtlMap<char const*, CUtlConstStringBase<char>, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CUtlConstStringBase<char>, int>::Node_t, int>, int> >::Links(int) const::s_Sentinel
 D CUtlRBTree<CUtlMap<char const*, CUtlVector<CItemLevelingDefinition, CUtlMemory<CItemLevelingDefinition, int> >*, int>::Node_t, int, CUtlMap<char const*, CUtlVector<CItemLevelingDefinition, CUtlMemory<CItemLevelingDefinition, int> >*, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CUtlVector<CItemLevelingDefinition, CUtlMemory<CItemLevelingDefinition, int> >*, int>::Node_t, int>, int> >::Links(int) const::s_Sentinel
 D CUtlRBTree<CUtlMap<char const*, CUtlVector<schema_string_table_entry_t, CUtlMemory<schema_string_table_entry_t, int> >*, int>::Node_t, int, CUtlMap<char const*, CUtlVector<schema_string_table_entry_t, CUtlMemory<schema_string_table_entry_t, int> >*, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CUtlVector<schema_string_table_entry_t, CUtlMemory<schema_string_table_entry_t, int> >*, int>::Node_t, int>, int> >::Links(int) const::s_Sentinel
 D CUtlRBTree<CUtlMap<char const*, ConceptHistory_t, int>::Node_t, int, CUtlMap<char const*, ConceptHistory_t, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, ConceptHistory_t, int>::Node_t, int>, int> >::Links(int) const::s_Sentinel
 D CUtlRBTree<CUtlMap<char const*, ConceptInfo_t*, unsigned short>::Node_t, unsigned short, CUtlMap<char const*, ConceptInfo_t*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, ConceptInfo_t*, unsigned short>::Node_t, unsigned short>, unsigned short> >::Links(unsigned short) const::s_Sentinel
 D CUtlRBTree<CUtlMap<char const*, Criteria, short>::Node_t, short, CUtlMap<char const*, Criteria, short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, Criteria, short>::Node_t, short>, short> >::Links(short) const::s_Sentinel
 D CUtlRBTree<CUtlMap<char const*, EEquipType_t, int>::Node_t, int, CUtlMap<char const*, EEquipType_t, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, EEquipType_t, int>::Node_t, int>, int> >::Links(int) const::s_Sentinel
 D CUtlRBTree<CUtlMap<char const*, EventGroup, int>::Node_t, int, CUtlMap<char const*, EventGroup, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, EventGroup, int>::Node_t, int>, int> >::Links(int) const::s_Sentinel
 D CUtlRBTree<CUtlMap<char const*, FilePlayerClassInfo_t*, unsigned short>::Node_t, unsigned short, CUtlMap<char const*, FilePlayerClassInfo_t*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, FilePlayerClassInfo_t*, unsigned short>::Node_t, unsigned short>, unsigned short> >::Links(unsigned short) const::s_Sentinel
 D CUtlRBTree<CUtlMap<char const*, FileWeaponInfo_t*, unsigned short>::Node_t, unsigned short, CUtlMap<char const*, FileWeaponInfo_t*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, FileWeaponInfo_t*, unsigned short>::Node_t, unsigned short>, unsigned short> >::Links(unsigned short) const::s_Sentinel
 D CUtlRBTree<CUtlMap<char const*, IEntityFactory*, unsigned short>::Node_t, unsigned short, CUtlMap<char const*, IEntityFactory*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, IEntityFactory*, unsigned short>::Node_t, unsigned short>, unsigned short> >::Links(unsigned short) const::s_Sentinel
 D CUtlRBTree<CUtlMap<char const*, KeyValues*, int>::Node_t, int, CUtlMap<char const*, KeyValues*, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, KeyValues*, int>::Node_t, int>, int> >::Links(int) const::s_Sentinel
 D CUtlRBTree<CUtlMap<char const*, QuestConditionEntry_t*, unsigned short>::Node_t, unsigned short, CUtlMap<char const*, QuestConditionEntry_t*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, QuestConditionEntry_t*, unsigned short>::Node_t, unsigned short>, unsigned short> >::Links(unsigned short) const::s_Sentinel
 D CUtlRBTree<CUtlMap<char const*, RateLimitedSound_t*, unsigned short>::Node_t, unsigned short, CUtlMap<char const*, RateLimitedSound_t*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, RateLimitedSound_t*, unsigned short>::Node_t, unsigned short>, unsigned short> >::Links(unsigned short) const::s_Sentinel
 D CUtlRBTree<CUtlMap<char const*, ResponseGroup, short>::Node_t, short, CUtlMap<char const*, ResponseGroup, short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, ResponseGroup, short>::Node_t, short>, short> >::Links(short) const::s_Sentinel
 D CUtlRBTree<CUtlMap<char const*, Rule, short>::Node_t, short, CUtlMap<char const*, Rule, short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, Rule, short>::Node_t, short>, short> >::Links(short) const::s_Sentinel
 D CUtlRBTree<CUtlMap<char const*, TF_Gamestats_LevelStats_t, unsigned short>::Node_t, unsigned short, CUtlMap<char const*, TF_Gamestats_LevelStats_t, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, TF_Gamestats_LevelStats_t, unsigned short>::Node_t, unsigned short>, unsigned short> >::Links(unsigned short) const::s_Sentinel
 D CUtlRBTree<CUtlMap<char const*, bool, int>::Node_t, int, CUtlMap<char const*, bool, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, bool, int>::Node_t, int>, int> >::Links(int) const::s_Sentinel
 D CUtlRBTree<CUtlMap<char const*, codecontrolledbodygroupdata_t, unsigned short>::Node_t, unsigned short, CUtlMap<char const*, codecontrolledbodygroupdata_t, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, codecontrolledbodygroupdata_t, unsigned short>::Node_t, unsigned short>, unsigned short> >::Links(unsigned short) const::s_Sentinel
 D CUtlRBTree<CUtlMap<char const*, float, int>::Node_t, int, CUtlMap<char const*, float, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, float, int>::Node_t, int>, int> >::Links(int) const::s_Sentinel
 D CUtlRBTree<CUtlMap<char const*, int, int>::Node_t, int, CUtlMap<char const*, int, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, int, int>::Node_t, int>, int> >::Links(int) const::s_Sentinel
 D CUtlRBTree<CUtlMap<char const*, int, unsigned short>::Node_t, unsigned short, CUtlMap<char const*, int, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, int, unsigned short>::Node_t, unsigned short>, unsigned short> >::Links(unsigned short) const::s_Sentinel
 D CUtlRBTree<CUtlMap<int, CAIHintVector, unsigned short>::Node_t, unsigned short, CUtlMap<int, CAIHintVector, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<int, CAIHintVector, unsigned short>::Node_t, unsigned short>, unsigned short> >::Links(unsigned short) const::s_Sentinel
 D CUtlRBTree<CUtlMap<int, CBaseAchievement*, unsigned short>::Node_t, unsigned short, CUtlMap<int, CBaseAchievement*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<int, CBaseAchievement*, unsigned short>::Node_t, unsigned short>, unsigned short> >::Links(unsigned short) const::s_Sentinel
 D CUtlRBTree<CUtlMap<int, CBaseObject::constructor_t, unsigned short>::Node_t, unsigned short, CUtlMap<int, CBaseObject::constructor_t, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<int, CBaseObject::constructor_t, unsigned short>::Node_t, unsigned short>, unsigned short> >::Links(unsigned short) const::s_Sentinel
 D CUtlRBTree<CUtlMap<int, CEconCraftingRecipeDefinition*, int>::Node_t, int, CUtlMap<int, CEconCraftingRecipeDefinition*, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<int, CEconCraftingRecipeDefinition*, int>::Node_t, int>, int> >::Links(int) const::s_Sentinel
 D CUtlRBTree<CUtlMap<int, CEconItemAttributeDefinition, int>::Node_t, int, CUtlMap<int, CEconItemAttributeDefinition, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<int, CEconItemAttributeDefinition, int>::Node_t, int>, int> >::Links(int) const::s_Sentinel
 D CUtlRBTree<CUtlMap<int, CEconItemDefinition*, int>::Node_t, int, CUtlMap<int, CEconItemDefinition*, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<int, CEconItemDefinition*, int>::Node_t, int>, int> >::Links(int) const::s_Sentinel
 D CUtlRBTree<CUtlMap<int, CEconItemQualityDefinition, int>::Node_t, int, CUtlMap<int, CEconItemQualityDefinition, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<int, CEconItemQualityDefinition, int>::Node_t, int>, int> >::Links(int) const::s_Sentinel
 D CUtlRBTree<CUtlMap<int, CEconItemRarityDefinition, int>::Node_t, int, CUtlMap<int, CEconItemRarityDefinition, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<int, CEconItemRarityDefinition, int>::Node_t, int>, int> >::Links(int) const::s_Sentinel
 D CUtlRBTree<CUtlMap<int, CEconItemSeriesDefinition, int>::Node_t, int, CUtlMap<int, CEconItemSeriesDefinition, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<int, CEconItemSeriesDefinition, int>::Node_t, int>, int> >::Links(int) const::s_Sentinel
 D CUtlRBTree<CUtlMap<int, CQuestObjectiveDefinition*, int>::Node_t, int, CUtlMap<int, CQuestObjectiveDefinition*, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<int, CQuestObjectiveDefinition*, int>::Node_t, int>, int> >::Links(int) const::s_Sentinel
 D CUtlRBTree<CUtlMap<int, CTakeDamageInfo, unsigned short>::Node_t, unsigned short, CUtlMap<int, CTakeDamageInfo, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<int, CTakeDamageInfo, unsigned short>::Node_t, unsigned short>, unsigned short> >::Links(unsigned short) const::s_Sentinel
 D CUtlRBTree<CUtlMap<int, CTeamControlPoint*, unsigned short>::Node_t, unsigned short, CUtlMap<int, CTeamControlPoint*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<int, CTeamControlPoint*, unsigned short>::Node_t, unsigned short>, unsigned short> >::Links(unsigned short) const::s_Sentinel
 D CUtlRBTree<CUtlMap<int, GCSDK::CSharedObject::SharedObjectInfo_t, unsigned short>::Node_t, unsigned short, CUtlMap<int, GCSDK::CSharedObject::SharedObjectInfo_t, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<int, GCSDK::CSharedObject::SharedObjectInfo_t, unsigned short>::Node_t, unsigned short>, unsigned short> >::Links(unsigned short) const::s_Sentinel
 D CUtlRBTree<CUtlMap<int, GCSDK::CSharedObjectTypeCache*, unsigned short>::Node_t, unsigned short, CUtlMap<int, GCSDK::CSharedObjectTypeCache*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<int, GCSDK::CSharedObjectTypeCache*, unsigned short>::Node_t, unsigned short>, unsigned short> >::Links(unsigned short) const::s_Sentinel
 D CUtlRBTree<CUtlMap<int, attachedparticlesystem_t, unsigned short>::Node_t, unsigned short, CUtlMap<int, attachedparticlesystem_t, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<int, attachedparticlesystem_t, unsigned short>::Node_t, unsigned short>, unsigned short> >::Links(unsigned short) const::s_Sentinel
 D CUtlRBTree<CUtlMap<int, char const*, unsigned short>::Node_t, unsigned short, CUtlMap<int, char const*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<int, char const*, unsigned short>::Node_t, unsigned short>, unsigned short> >::Links(unsigned short) const::s_Sentinel
 D CUtlRBTree<CUtlMap<int, float, unsigned short>::Node_t, unsigned short, CUtlMap<int, float, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<int, float, unsigned short>::Node_t, unsigned short>, unsigned short> >::Links(unsigned short) const::s_Sentinel
 D CUtlRBTree<CUtlMap<int, int, unsigned short>::Node_t, unsigned short, CUtlMap<int, int, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<int, int, unsigned short>::Node_t, unsigned short>, unsigned short> >::Links(unsigned short) const::s_Sentinel
 D CUtlRBTree<CUtlMap<string_t, CSimpleSimTimer, char>::Node_t, char, CUtlMap<string_t, CSimpleSimTimer, char>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<string_t, CSimpleSimTimer, char>::Node_t, char>, char> >::Links(char) const::s_Sentinel
 D CUtlRBTree<CUtlMap<string_t, CUtlVector<CTFGameRules::TeleportLocation_t, CUtlMemory<CTFGameRules::TeleportLocation_t, int> >*, unsigned short>::Node_t, unsigned short, CUtlMap<string_t, CUtlVector<CTFGameRules::TeleportLocation_t, CUtlMemory<CTFGameRules::TeleportLocation_t, int> >*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<string_t, CUtlVector<CTFGameRules::TeleportLocation_t, CUtlMemory<CTFGameRules::TeleportLocation_t, int> >*, unsigned short>::Node_t, unsigned short>, unsigned short> >::Links(unsigned short) const::s_Sentinel
 D CUtlRBTree<CUtlMap<unsigned char, CWarDefinition*, unsigned short>::Node_t, unsigned short, CUtlMap<unsigned char, CWarDefinition*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<unsigned char, CWarDefinition*, unsigned short>::Node_t, unsigned short>, unsigned short> >::Links(unsigned short) const::s_Sentinel
 D CUtlRBTree<CUtlMap<unsigned char, CWarDefinition::CWarSideDefinition_t, unsigned short>::Node_t, unsigned short, CUtlMap<unsigned char, CWarDefinition::CWarSideDefinition_t, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<unsigned char, CWarDefinition::CWarSideDefinition_t, unsigned short>::Node_t, unsigned short>, unsigned short> >::Links(unsigned short) const::s_Sentinel
 D CUtlRBTree<CUtlMap<unsigned int, AchievementAward_t*, unsigned short>::Node_t, unsigned short, CUtlMap<unsigned int, AchievementAward_t*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<unsigned int, AchievementAward_t*, unsigned short>::Node_t, unsigned short>, unsigned short> >::Links(unsigned short) const::s_Sentinel
 D CUtlRBTree<CUtlMap<unsigned int, CTFQuestObjectiveConditionsDefinition*, unsigned short>::Node_t, unsigned short, CUtlMap<unsigned int, CTFQuestObjectiveConditionsDefinition*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<unsigned int, CTFQuestObjectiveConditionsDefinition*, unsigned short>::Node_t, unsigned short>, unsigned short> >::Links(unsigned short) const::s_Sentinel
 D CUtlRBTree<CUtlMap<unsigned int, GCSDK::JobStatsBucket_t, int>::Node_t, int, CUtlMap<unsigned int, GCSDK::JobStatsBucket_t, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<unsigned int, GCSDK::JobStatsBucket_t, int>::Node_t, int>, int> >::Links(int) const::s_Sentinel
 D CUtlRBTree<CUtlMap<unsigned int, int, int>::Node_t, int, CUtlMap<unsigned int, int, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<unsigned int, int, int>::Node_t, int>, int> >::Links(int) const::s_Sentinel
 D CUtlRBTree<CUtlMap<unsigned int, kill_eater_score_type_t, unsigned short>::Node_t, unsigned short, CUtlMap<unsigned int, kill_eater_score_type_t, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<unsigned int, kill_eater_score_type_t, unsigned short>::Node_t, unsigned short>, unsigned short> >::Links(unsigned short) const::s_Sentinel
 D CUtlRBTree<CUtlMap<unsigned int, unsigned int, unsigned short>::Node_t, unsigned short, CUtlMap<unsigned int, unsigned int, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<unsigned int, unsigned int, unsigned short>::Node_t, unsigned short>, unsigned short> >::Links(unsigned short) const::s_Sentinel
 D CUtlRBTree<CUtlMap<unsigned long long, CBaseSOTracker*, unsigned short>::Node_t, unsigned short, CUtlMap<unsigned long long, CBaseSOTracker*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<unsigned long long, CBaseSOTracker*, unsigned short>::Node_t, unsigned short>, unsigned short> >::Links(unsigned short) const::s_Sentinel
 D CUtlRBTree<CUtlMap<unsigned long long, CPlayerWaveSpendingStats, unsigned short>::Node_t, unsigned short, CUtlMap<unsigned long long, CPlayerWaveSpendingStats, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<unsigned long long, CPlayerWaveSpendingStats, unsigned short>::Node_t, unsigned short>, unsigned short> >::Links(unsigned short) const::s_Sentinel
 D CUtlRBTree<CUtlMap<unsigned long long, CTFWorkshopMap*, unsigned short>::Node_t, unsigned short, CUtlMap<unsigned long long, CTFWorkshopMap*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<unsigned long long, CTFWorkshopMap*, unsigned short>::Node_t, unsigned short>, unsigned short> >::Links(unsigned short) const::s_Sentinel
 D CUtlRBTree<CUtlMap<unsigned long long, CommitRecord_t*, unsigned short>::Node_t, unsigned short, CUtlMap<unsigned long long, CommitRecord_t*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<unsigned long long, CommitRecord_t*, unsigned short>::Node_t, unsigned short>, unsigned short> >::Links(unsigned short) const::s_Sentinel
 D CUtlRBTree<CUtlMap<unsigned long long, GCSDK::CJob*, int>::Node_t, int, CUtlMap<unsigned long long, GCSDK::CJob*, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<unsigned long long, GCSDK::CJob*, int>::Node_t, int>, int> >::Links(int) const::s_Sentinel
 D CUtlRBTree<CUtlMap<unsigned long long, float, unsigned short>::Node_t, unsigned short, CUtlMap<unsigned long long, float, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<unsigned long long, float, unsigned short>::Node_t, unsigned short>, unsigned short> >::Links(unsigned short) const::s_Sentinel
 D CUtlRBTree<CUtlMap<unsigned long long, int, int>::Node_t, int, CUtlMap<unsigned long long, int, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<unsigned long long, int, int>::Node_t, int>, int> >::Links(int) const::s_Sentinel
 D CUtlRBTree<CUtlMap<unsigned long long, int, unsigned short>::Node_t, unsigned short, CUtlMap<unsigned long long, int, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<unsigned long long, int, unsigned short>::Node_t, unsigned short>, unsigned short> >::Links(unsigned short) const::s_Sentinel
 D CUtlRBTree<CUtlMap<unsigned short, unsigned short, unsigned short>::Node_t, unsigned short, CUtlMap<unsigned short, unsigned short, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<unsigned short, unsigned short, unsigned short>::Node_t, unsigned short>, unsigned short> >::Links(unsigned short) const::s_Sentinel
 D CUtlRBTree<CUtlMap<void*, CThreadSafeMultiMemoryPool::RawAllocation_t, int>::Node_t, int, CUtlMap<void*, CThreadSafeMultiMemoryPool::RawAllocation_t, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<void*, CThreadSafeMultiMemoryPool::RawAllocation_t, int>::Node_t, int>, int> >::Links(int) const::s_Sentinel
 D CUtlRBTree<CUtlString, unsigned short, bool (*)(CUtlString const&, CUtlString const&), CUtlMemory<UtlRBTreeNode_t<CUtlString, unsigned short>, unsigned short> >::Links(unsigned short) const::s_Sentinel
 D CUtlRBTree<CUtlSymbolTable::CStringPoolIndex, unsigned short, CUtlSymbolTable::CLess, CUtlMemory<UtlRBTreeNode_t<CUtlSymbolTable::CStringPoolIndex, unsigned short>, unsigned short> >::Links(unsigned short) const::s_Sentinel
 D CUtlRBTree<GCSDK::JobType_t const*, unsigned short, bool (*)(GCSDK::JobType_t const* const&, GCSDK::JobType_t const* const&), CUtlMemory<UtlRBTreeNode_t<GCSDK::JobType_t const*, unsigned short>, unsigned short> >::Links(unsigned short) const::s_Sentinel
 D CUtlRBTree<ThinkSync, unsigned short, bool (*)(ThinkSync const&, ThinkSync const&), CUtlMemory<UtlRBTreeNode_t<ThinkSync, unsigned short>, unsigned short> >::Links(unsigned short) const::s_Sentinel
 D CUtlRBTree<VisibilityCacheEntry_t, unsigned short, CVisibilityCacheEntryLess, CUtlMemory<UtlRBTreeNode_t<VisibilityCacheEntry_t, unsigned short>, unsigned short> >::Links(unsigned short) const::s_Sentinel
 D CUtlRBTree<char const*, unsigned short, bool (*)(char const* const&, char const* const&), CUtlMemory<UtlRBTreeNode_t<char const*, unsigned short>, unsigned short> >::Links(unsigned short) const::s_Sentinel
 D CUtlRBTree<int, unsigned short, bool (*)(int const&, int const&), CUtlMemory<UtlRBTreeNode_t<int, unsigned short>, unsigned short> >::Links(unsigned short) const::s_Sentinel
 D CUtlString const& CDmxAttribute::GetValue<CUtlString>() const::defaultValue
 D CUtlString const& CDmxElement::GetValue<CUtlString>(char const*) const::defaultValue
 D CUtlVector<CDmxElement*, CUtlMemory<CDmxElement*, int> > const& CDmxAttribute::GetArray<CDmxElement*>() const::defaultArray
 D CUtlVector<CDmxElement*, CUtlMemory<CDmxElement*, int> > const& CDmxElement::GetArray<CDmxElement*>(char const*) const::defaultValue
 D CUtlVectorUltraConservative<HidingSpot*, CUtlVectorUltraConservativeAllocator>::StaticData()::staticData
 D CUtlVectorUltraConservative<NavConnect, CUtlVectorUltraConservativeAllocator>::StaticData()::staticData
 D CUtlVectorUltraConservative<NavLadderConnect, CUtlVectorUltraConservativeAllocator>::StaticData()::staticData
 D CUtlVectorUltraConservative<SpotEncounter*, CUtlVectorUltraConservativeAllocator>::StaticData()::staticData
 D CVGuiScreen::m_DataMap
 D CVoteController::m_DataMap
 D CWC_UpdateIgnoreList::m_DataMap
 D CWaterBullet::m_DataMap
 D CWaterLODControl::m_DataMap
 D CWeaponIFMBase::m_DataMap
 D CWeaponIFMBase::m_pClassSendTable
 D CWeaponIFMBaseCamera::m_DataMap
 D CWeaponIFMBaseCamera::m_pClassSendTable
 D CWeaponIFMSteadyCam::m_DataMap
 D CWeightButton::m_DataMap
 D CWheelOfDoom::m_DataMap
 D CWheelOfDoomSpiral::m_DataMap
 D CWindowPane::m_DataMap
 D CWorld::m_DataMap
 D CWorldItem::m_DataMap
 D CZombieSpawner::m_DataMap
 D ConceptHistory_t::m_DataMap
 D CryptoPP::DEFAULT_CHANNEL
 D CryptoPP::Singleton<CryptoPP::Integer, CryptoPP::NewInteger<1l>, 0>::Ref() const::s_pObject
 D CryptoPP::Singleton<CryptoPP::Integer, CryptoPP::NewObject<CryptoPP::Integer>, 0>::Ref() const::s_pObject
 D CryptoPP::Singleton<CryptoPP::PKCS1v15_SignatureMessageEncodingMethod, CryptoPP::NewObject<CryptoPP::PKCS1v15_SignatureMessageEncodingMethod>, 0>::Ref() const::s_pObject
 D CryptoPP::g_cacheLineSize
 D CryptoPP::g_hasAESNI
 D CryptoPP::g_hasCLMUL
 D CryptoPP::g_hasISSE
 D CryptoPP::g_hasMMX
 D CryptoPP::g_hasSSE2
 D CryptoPP::g_hasSSSE3
 D CryptoPP::g_isP4
 D CryptoPP::g_nullNameValuePairs
 D CryptoPP::g_pAssignIntToInteger
 D CryptoPP::g_powerUpSelfTestStatus
 D CryptoPP::g_x86DetectionDone
 D DmxElementUnpackStructure_t* DmxElementUnpackInit<CParticleSystemDefinition>(CParticleSystemDefinition*)::unpack
 D DmxElementUnpackStructure_t* DmxElementUnpackInit<ParticleChildrenInfo_t>(ParticleChildrenInfo_t*)::unpack
 D DustTrail::m_DataMap
 D ENTITYIO_FIXUP_STRING
 D EntityParticleTrailInfo_t::m_DataMap
 D EventQueuePrioritizedEvent_t::m_DataMap
 D FilterDamageType::m_DataMap
 D FilterDamagedByWeaponInSlot::m_DataMap
 D FilterTeam::m_DataMap
 D FirstBitInWord(unsigned int, int)::firstBitLUT
 D GCResultString
 D GCSDK::CProtoBufMsg<CGCMsgGC_War_IndividualUpdate>::s_bRegisteredWithMemoryPoolMgr
 D GCSDK::CProtoBufMsg<CGCMsgGC_War_IndividualUpdate>::s_pMemoryPool
 D GCSDK::CProtoBufMsg<CMsgConVarValue>::s_bRegisteredWithMemoryPoolMgr
 D GCSDK::CProtoBufMsg<CMsgConVarValue>::s_pMemoryPool
 D GCSDK::CProtoBufMsg<CMsgGCQuestObjective_PointsChange>::s_bRegisteredWithMemoryPoolMgr
 D GCSDK::CProtoBufMsg<CMsgGCQuestObjective_PointsChange>::s_pMemoryPool
 D GCSDK::CProtoBufMsg<CMsgGCRematchRequest>::s_bRegisteredWithMemoryPoolMgr
 D GCSDK::CProtoBufMsg<CMsgGCRematchRequest>::s_pMemoryPool
 D GCSDK::CProtoBufMsg<CMsgGCRematchRequestResponse>::s_bRegisteredWithMemoryPoolMgr
 D GCSDK::CProtoBufMsg<CMsgGCRematchRequestResponse>::s_pMemoryPool
 D GCSDK::CProtoBufMsg<CMsgGC_DailyCompetitiveStatsRollup>::s_bRegisteredWithMemoryPoolMgr
 D GCSDK::CProtoBufMsg<CMsgGC_DailyCompetitiveStatsRollup>::s_pMemoryPool
 D GCSDK::CProtoBufMsg<CMsgGC_DailyCompetitiveStatsRollup_Response>::s_bRegisteredWithMemoryPoolMgr
 D GCSDK::CProtoBufMsg<CMsgGC_DailyCompetitiveStatsRollup_Response>::s_pMemoryPool
 D GCSDK::CProtoBufMsg<CMsgGC_GameServer_AuthChallenge>::s_bRegisteredWithMemoryPoolMgr
 D GCSDK::CProtoBufMsg<CMsgGC_GameServer_AuthChallenge>::s_pMemoryPool
 D GCSDK::CProtoBufMsg<CMsgGC_GameServer_AuthChallengeResponse>::s_bRegisteredWithMemoryPoolMgr
 D GCSDK::CProtoBufMsg<CMsgGC_GameServer_AuthChallengeResponse>::s_pMemoryPool
 D GCSDK::CProtoBufMsg<CMsgGC_GameServer_AuthResult>::s_bRegisteredWithMemoryPoolMgr
 D GCSDK::CProtoBufMsg<CMsgGC_GameServer_AuthResult>::s_pMemoryPool
 D GCSDK::CProtoBufMsg<CMsgGC_GameServer_LevelInfo>::s_bRegisteredWithMemoryPoolMgr
 D GCSDK::CProtoBufMsg<CMsgGC_GameServer_LevelInfo>::s_pMemoryPool
 D GCSDK::CProtoBufMsg<CMsgGC_GameServer_ServerModificationItem>::s_bRegisteredWithMemoryPoolMgr
 D GCSDK::CProtoBufMsg<CMsgGC_GameServer_ServerModificationItem>::s_pMemoryPool
 D GCSDK::CProtoBufMsg<CMsgGC_GameServer_ServerModificationItemExpired>::s_bRegisteredWithMemoryPoolMgr
 D GCSDK::CProtoBufMsg<CMsgGC_GameServer_ServerModificationItemExpired>::s_pMemoryPool
 D GCSDK::CProtoBufMsg<CMsgGC_GameServer_UseServerModificationItem>::s_bRegisteredWithMemoryPoolMgr
 D GCSDK::CProtoBufMsg<CMsgGC_GameServer_UseServerModificationItem>::s_pMemoryPool
 D GCSDK::CProtoBufMsg<CMsgGC_GameServer_UseServerModificationItem_Response>::s_bRegisteredWithMemoryPoolMgr
 D GCSDK::CProtoBufMsg<CMsgGC_GameServer_UseServerModificationItem_Response>::s_pMemoryPool
 D GCSDK::CProtoBufMsg<CMsgGC_KickPlayerFromLobby>::s_bRegisteredWithMemoryPoolMgr
 D GCSDK::CProtoBufMsg<CMsgGC_KickPlayerFromLobby>::s_pMemoryPool
 D GCSDK::CProtoBufMsg<CMsgGC_Match_Result>::s_bRegisteredWithMemoryPoolMgr
 D GCSDK::CProtoBufMsg<CMsgGC_Match_Result>::s_pMemoryPool
 D GCSDK::CProtoBufMsg<CMsgGC_Match_ResultResponse>::s_bRegisteredWithMemoryPoolMgr
 D GCSDK::CProtoBufMsg<CMsgGC_Match_ResultResponse>::s_pMemoryPool
 D GCSDK::CProtoBufMsg<CMsgGC_TFVoteKickPlayerRequest>::s_bRegisteredWithMemoryPoolMgr
 D GCSDK::CProtoBufMsg<CMsgGC_TFVoteKickPlayerRequest>::s_pMemoryPool
 D GCSDK::CProtoBufMsg<CMsgGC_VoteKickPlayerRequestResponse>::s_bRegisteredWithMemoryPoolMgr
 D GCSDK::CProtoBufMsg<CMsgGC_VoteKickPlayerRequestResponse>::s_pMemoryPool
 D GCSDK::CProtoBufMsg<CMsgGameServerKickingLobby>::s_bRegisteredWithMemoryPoolMgr
 D GCSDK::CProtoBufMsg<CMsgGameServerKickingLobby>::s_pMemoryPool
 D GCSDK::CProtoBufMsg<CMsgGameServerKickingLobbyResponse>::s_bRegisteredWithMemoryPoolMgr
 D GCSDK::CProtoBufMsg<CMsgGameServerKickingLobbyResponse>::s_pMemoryPool
 D GCSDK::CProtoBufMsg<CMsgGameServerMatchmakingStatus>::s_bRegisteredWithMemoryPoolMgr
 D GCSDK::CProtoBufMsg<CMsgGameServerMatchmakingStatus>::s_pMemoryPool
 D GCSDK::CProtoBufMsg<CMsgHalloween_Merasmus2012>::s_bRegisteredWithMemoryPoolMgr
 D GCSDK::CProtoBufMsg<CMsgHalloween_Merasmus2012>::s_pMemoryPool
 D GCSDK::CProtoBufMsg<CMsgIncrementKillCountAttribute>::s_bRegisteredWithMemoryPoolMgr
 D GCSDK::CProtoBufMsg<CMsgIncrementKillCountAttribute>::s_pMemoryPool
 D GCSDK::CProtoBufMsg<CMsgIncrementKillCountAttribute_Multiple>::s_bRegisteredWithMemoryPoolMgr
 D GCSDK::CProtoBufMsg<CMsgIncrementKillCountAttribute_Multiple>::s_pMemoryPool
 D GCSDK::CProtoBufMsg<CMsgItemAcknowledged>::s_bRegisteredWithMemoryPoolMgr
 D GCSDK::CProtoBufMsg<CMsgItemAcknowledged>::s_pMemoryPool
 D GCSDK::CProtoBufMsg<CMsgMvMMannUpVictoryReply>::s_bRegisteredWithMemoryPoolMgr
 D GCSDK::CProtoBufMsg<CMsgMvMMannUpVictoryReply>::s_pMemoryPool
 D GCSDK::CProtoBufMsg<CMsgMvMVictory>::s_bRegisteredWithMemoryPoolMgr
 D GCSDK::CProtoBufMsg<CMsgMvMVictory>::s_pMemoryPool
 D GCSDK::CProtoBufMsg<CMsgPlayerLeftMatch>::s_bRegisteredWithMemoryPoolMgr
 D GCSDK::CProtoBufMsg<CMsgPlayerLeftMatch>::s_pMemoryPool
 D GCSDK::CProtoBufMsg<CMsgPlayerLeftMatchResponse>::s_bRegisteredWithMemoryPoolMgr
 D GCSDK::CProtoBufMsg<CMsgPlayerLeftMatchResponse>::s_pMemoryPool
 D GCSDK::CProtoBufMsg<CMsgReplicateConVars>::s_bRegisteredWithMemoryPoolMgr
 D GCSDK::CProtoBufMsg<CMsgReplicateConVars>::s_pMemoryPool
 D GCSDK::CProtoBufMsg<CMsgSOCacheSubscribed>::s_bRegisteredWithMemoryPoolMgr
 D GCSDK::CProtoBufMsg<CMsgSOCacheSubscribed>::s_pMemoryPool
 D GCSDK::CProtoBufMsg<CMsgSOCacheSubscriptionCheck>::s_bRegisteredWithMemoryPoolMgr
 D GCSDK::CProtoBufMsg<CMsgSOCacheSubscriptionCheck>::s_pMemoryPool
 D GCSDK::CProtoBufMsg<CMsgSOCacheSubscriptionRefresh>::s_bRegisteredWithMemoryPoolMgr
 D GCSDK::CProtoBufMsg<CMsgSOCacheSubscriptionRefresh>::s_pMemoryPool
 D GCSDK::CProtoBufMsg<CMsgSOCacheUnsubscribed>::s_bRegisteredWithMemoryPoolMgr
 D GCSDK::CProtoBufMsg<CMsgSOCacheUnsubscribed>::s_pMemoryPool
 D GCSDK::CProtoBufMsg<CMsgSOMultipleObjects>::s_bRegisteredWithMemoryPoolMgr
 D GCSDK::CProtoBufMsg<CMsgSOMultipleObjects>::s_pMemoryPool
 D GCSDK::CProtoBufMsg<CMsgSOSingleObject>::s_bRegisteredWithMemoryPoolMgr
 D GCSDK::CProtoBufMsg<CMsgSOSingleObject>::s_pMemoryPool
 D GCSDK::CProtoBufMsg<CMsgServerGoodbye>::s_bRegisteredWithMemoryPoolMgr
 D GCSDK::CProtoBufMsg<CMsgServerGoodbye>::s_pMemoryPool
 D GCSDK::CProtoBufMsg<CMsgServerHello>::s_bRegisteredWithMemoryPoolMgr
 D GCSDK::CProtoBufMsg<CMsgServerHello>::s_pMemoryPool
 D GCSDK::CProtoBufMsg<CMsgServerWelcome>::s_bRegisteredWithMemoryPoolMgr
 D GCSDK::CProtoBufMsg<CMsgServerWelcome>::s_pMemoryPool
 D GCSDK::CProtoBufMsg<CMsgTFCoaching_CoachJoined>::s_bRegisteredWithMemoryPoolMgr
 D GCSDK::CProtoBufMsg<CMsgTFCoaching_CoachJoined>::s_pMemoryPool
 D GCSDK::CProtoBufMsg<CMsgTFCoaching_CoachJoining>::s_bRegisteredWithMemoryPoolMgr
 D GCSDK::CProtoBufMsg<CMsgTFCoaching_CoachJoining>::s_pMemoryPool
 D GCSDK::CProtoBufMsg<CMsgTFCoaching_RemoveCurrentCoach>::s_bRegisteredWithMemoryPoolMgr
 D GCSDK::CProtoBufMsg<CMsgTFCoaching_RemoveCurrentCoach>::s_pMemoryPool
 D GCSDK::CProtoBufMsg<CMsgTFQuickplay_PlayerJoining>::s_bRegisteredWithMemoryPoolMgr
 D GCSDK::CProtoBufMsg<CMsgTFQuickplay_PlayerJoining>::s_pMemoryPool
 D GCSDK::CProtoBufMsg<CMsgTFVoteKickBanPlayerResult>::s_bRegisteredWithMemoryPoolMgr
 D GCSDK::CProtoBufMsg<CMsgTFVoteKickBanPlayerResult>::s_pMemoryPool
 D GCSDK::CProtoBufMsg<CMsgTrackUniquePlayerPairEvent>::s_bRegisteredWithMemoryPoolMgr
 D GCSDK::CProtoBufMsg<CMsgTrackUniquePlayerPairEvent>::s_pMemoryPool
 D GCSDK::CProtoBufMsg<CMsgUpdateHalloweenMerasmusLootLevel>::s_bRegisteredWithMemoryPoolMgr
 D GCSDK::CProtoBufMsg<CMsgUpdateHalloweenMerasmusLootLevel>::s_pMemoryPool
 D GCSDK::CProtoBufMsg<CMsgUpdateItemSchema>::s_bRegisteredWithMemoryPoolMgr
 D GCSDK::CProtoBufMsg<CMsgUpdateItemSchema>::s_pMemoryPool
 D GCSDK::SPEW_CONSOLE
 D GCSDK::SPEW_GC
 D GCSDK::SPEW_JOB
 D GCSDK::SPEW_SHAREDOBJ
 D GCSDK::SPEW_SYSTEM_MISC
 D GCSDK::SPEW_THREADS
 D GCSDK::g_DebugJob
 D GCSDK::g_nMaxLogLevel
 D GCSDK::g_nMaxSpewLevel
 D GetBitForBitnum(int)::bitsForBitnum
 D GetEndMask(int)::bitStringEndMasks
 D GetStartBitMask(int)::g_StartMask
 D GetStdStringDataOps()::ops
 D HidingSpot::m_nextID
 D HintNodeData::m_DataMap
 D IBody::GetHullMaxs() const::hullMaxs
 D IBody::GetHullMins() const::hullMins
 D ISaveRestoreOps* CUtlMapDataopsInstantiator<2, 10>::GetDataOps<CUtlMap<string_t, CSimpleSimTimer, char> >(CUtlMap<string_t, CSimpleSimTimer, char>*)::ops
 D ISaveRestoreOps* CUtlVectorDataopsInstantiator<10>::GetDataOps<CAI_InterestTarget>(CAI_InterestTarget*)::ops
 D ISaveRestoreOps* CUtlVectorDataopsInstantiator<10>::GetDataOps<CUtlVector<AISquadEnemyInfo_t, CUtlMemory<AISquadEnemyInfo_t, int> > >(CUtlVector<AISquadEnemyInfo_t, CUtlMemory<AISquadEnemyInfo_t, int> >*)::ops
 D ISaveRestoreOps* CUtlVectorDataopsInstantiator<10>::GetDataOps<CUtlVector<AI_Waypoint_t, CUtlMemory<AI_Waypoint_t, int> > >(CUtlVector<AI_Waypoint_t, CUtlMemory<AI_Waypoint_t, int> >*)::ops
 D ISaveRestoreOps* CUtlVectorDataopsInstantiator<10>::GetDataOps<CUtlVector<CAI_ScriptConditionsElement, CUtlMemory<CAI_ScriptConditionsElement, int> > >(CUtlVector<CAI_ScriptConditionsElement, CUtlMemory<CAI_ScriptConditionsElement, int> >*)::ops
 D ISaveRestoreOps* CUtlVectorDataopsInstantiator<10>::GetDataOps<CUtlVector<CAnimationLayer, CUtlMemory<CAnimationLayer, int> > >(CUtlVector<CAnimationLayer, CUtlMemory<CAnimationLayer, int> >*)::ops
 D ISaveRestoreOps* CUtlVectorDataopsInstantiator<10>::GetDataOps<CUtlVector<CPassengerInfo, CUtlMemory<CPassengerInfo, int> > >(CUtlVector<CPassengerInfo, CUtlMemory<CPassengerInfo, int> >*)::ops
 D ISaveRestoreOps* CUtlVectorDataopsInstantiator<10>::GetDataOps<CUtlVector<Relationship_t, CUtlMemory<Relationship_t, int> > >(CUtlVector<Relationship_t, CUtlMemory<Relationship_t, int> >*)::ops
 D ISaveRestoreOps* CUtlVectorDataopsInstantiator<10>::GetDataOps<CUtlVector<ResponseContext_t, CUtlMemory<ResponseContext_t, int> > >(CUtlVector<ResponseContext_t, CUtlMemory<ResponseContext_t, int> >*)::ops
 D ISaveRestoreOps* CUtlVectorDataopsInstantiator<10>::GetDataOps<CUtlVector<SaveRestoreBlockHeader_t, CUtlMemory<SaveRestoreBlockHeader_t, int> > >(CUtlVector<SaveRestoreBlockHeader_t, CUtlMemory<SaveRestoreBlockHeader_t, int> >*)::ops
 D ISaveRestoreOps* CUtlVectorDataopsInstantiator<10>::GetDataOps<CUtlVector<ScriptedNPCInteraction_t, CUtlMemory<ScriptedNPCInteraction_t, int> > >(CUtlVector<ScriptedNPCInteraction_t, CUtlMemory<ScriptedNPCInteraction_t, int> >*)::ops
 D ISaveRestoreOps* CUtlVectorDataopsInstantiator<10>::GetDataOps<CUtlVector<UnreachableEnt_t, CUtlMemory<UnreachableEnt_t, int> > >(CUtlVector<UnreachableEnt_t, CUtlMemory<UnreachableEnt_t, int> >*)::ops
 D ISaveRestoreOps* CUtlVectorDataopsInstantiator<10>::GetDataOps<CUtlVector<globalentity_t, CUtlMemory<globalentity_t, int> > >(CUtlVector<globalentity_t, CUtlMemory<globalentity_t, int> >*)::ops
 D ISaveRestoreOps* CUtlVectorDataopsInstantiator<10>::GetDataOps<CUtlVector<magnetted_objects_t, CUtlMemory<magnetted_objects_t, int> > >(CUtlVector<magnetted_objects_t, CUtlMemory<magnetted_objects_t, int> >*)::ops
 D ISaveRestoreOps* CUtlVectorDataopsInstantiator<10>::GetDataOps<CUtlVector<modifiedconvars_t, CUtlMemory<modifiedconvars_t, int> > >(CUtlVector<modifiedconvars_t, CUtlMemory<modifiedconvars_t, int> >*)::ops
 D ISaveRestoreOps* CUtlVectorDataopsInstantiator<10>::GetDataOps<CUtlVector<physfollower_t, CUtlMemory<physfollower_t, int> > >(CUtlVector<physfollower_t, CUtlMemory<physfollower_t, int> >*)::ops
 D ISaveRestoreOps* CUtlVectorDataopsInstantiator<10>::GetDataOps<CUtlVector<template_t, CUtlMemory<template_t, int> > >(CUtlVector<template_t, CUtlMemory<template_t, int> >*)::ops
 D ISaveRestoreOps* CUtlVectorDataopsInstantiator<10>::GetDataOps<CUtlVector<thinkfunc_t, CUtlMemory<thinkfunc_t, int> > >(CUtlVector<thinkfunc_t, CUtlMemory<thinkfunc_t, int> >*)::ops
 D ISaveRestoreOps* CUtlVectorDataopsInstantiator<10>::GetDataOps<CUtlVector<vehicle_crashsound_t, CUtlMemory<vehicle_crashsound_t, int> > >(CUtlVector<vehicle_crashsound_t, CUtlMemory<vehicle_crashsound_t, int> >*)::ops
 D ISaveRestoreOps* CUtlVectorDataopsInstantiator<10>::GetDataOps<CUtlVector<vehicle_gear_t, CUtlMemory<vehicle_gear_t, int> > >(CUtlVector<vehicle_gear_t, CUtlMemory<vehicle_gear_t, int> >*)::ops
 D ISaveRestoreOps* CUtlVectorDataopsInstantiator<12>::GetDataOps<CUtlVector<CBaseEntity*, CUtlMemory<CBaseEntity*, int> > >(CUtlVector<CBaseEntity*, CUtlMemory<CBaseEntity*, int> >*)::ops
 D ISaveRestoreOps* CUtlVectorDataopsInstantiator<13>::GetDataOps<CUtlVector<CHandle<CAI_BaseNPC>, CUtlMemory<CHandle<CAI_BaseNPC>, int> > >(CUtlVector<CHandle<CAI_BaseNPC>, CUtlMemory<CHandle<CAI_BaseNPC>, int> >*)::ops
 D ISaveRestoreOps* CUtlVectorDataopsInstantiator<13>::GetDataOps<CUtlVector<CHandle<CBaseEntity>, CUtlMemory<CHandle<CBaseEntity>, int> > >(CUtlVector<CHandle<CBaseEntity>, CUtlMemory<CHandle<CBaseEntity>, int> >*)::ops
 D ISaveRestoreOps* CUtlVectorDataopsInstantiator<13>::GetDataOps<CUtlVector<CHandle<CBaseFlex>, CUtlMemory<CHandle<CBaseFlex>, int> > >(CUtlVector<CHandle<CBaseFlex>, CUtlMemory<CHandle<CBaseFlex>, int> >*)::ops
 D ISaveRestoreOps* CUtlVectorDataopsInstantiator<13>::GetDataOps<CUtlVector<CHandle<CBasePlayer>, CUtlMemory<CHandle<CBasePlayer>, int> > >(CUtlVector<CHandle<CBasePlayer>, CUtlMemory<CHandle<CBasePlayer>, int> >*)::ops
 D ISaveRestoreOps* CUtlVectorDataopsInstantiator<13>::GetDataOps<CUtlVector<CHandle<CFish>, CUtlMemory<CHandle<CFish>, int> > >(CUtlVector<CHandle<CFish>, CUtlMemory<CHandle<CFish>, int> >*)::ops
 D ISaveRestoreOps* CUtlVectorDataopsInstantiator<13>::GetDataOps<CUtlVector<CHandle<CSceneEntity>, CUtlMemory<CHandle<CSceneEntity>, int> > >(CUtlVector<CHandle<CSceneEntity>, CUtlMemory<CHandle<CSceneEntity>, int> >*)::ops
 D ISaveRestoreOps* CUtlVectorDataopsInstantiator<13>::GetDataOps<CUtlVector<CHandle<CSceneListManager>, CUtlMemory<CHandle<CSceneListManager>, int> > >(CUtlVector<CHandle<CSceneListManager>, CUtlMemory<CHandle<CSceneListManager>, int> >*)::ops
 D ISaveRestoreOps* CUtlVectorDataopsInstantiator<13>::GetDataOps<CUtlVector<CHandle<CVGuiScreen>, CUtlMemory<CHandle<CVGuiScreen>, int> > >(CUtlVector<CHandle<CVGuiScreen>, CUtlMemory<CHandle<CVGuiScreen>, int> >*)::ops
 D ISaveRestoreOps* CUtlVectorDataopsInstantiator<5>::GetDataOps<CUtlVector<int, CUtlMemory<int, int> > >(CUtlVector<int, CUtlMemory<int, int> >*)::ops
 D ISaveRestoreOps* GetBitstringDataOps<CBitVec<32> >(CBitVec<32>*)::ops
 D ISchemaAttributeTypeBase<CAttribute_DynamicRecipeComponent>::s_InstanceStats
 D ISchemaAttributeTypeBase<CAttribute_ItemSlotCriteria>::s_InstanceStats
 D ISchemaAttributeTypeBase<CAttribute_String>::s_InstanceStats
 D ISchemaAttributeTypeBase<CAttribute_WorldItemPlacement>::s_InstanceStats
 D ISchemaAttributeTypeBase<float>::s_InstanceStats
 D ISchemaAttributeTypeBase<unsigned int>::s_InstanceStats
 D ISchemaAttributeTypeBase<unsigned long long>::s_InstanceStats
 D KeyValues::s_pfGetStringForSymbol
 D KeyValues::s_pfGetSymbolForString
 D MOVE_HEIGHT_EPSILON
 D NavColors
 D NextBotCombatCharacter::m_DataMap
 D NextBotCombatCharacter::m_pClassSendTable
 D Opposite
 D PackRatios
 D ParticleSmokeGrenade::m_DataMap
 D PhysBlockHeader_t::m_DataMap
 D PhysObjectHeader_t::m_DataMap
 D PlayerLocomotion::GetDesiredLean() const::junk
 D Relationship_t::m_DataMap
 D Response::m_DataMap
 D ResponseContext_t::m_DataMap
 D ResponseGroup::m_DataMap
 D RocketTrail::m_DataMap
 D SURFACEPROP_MANIFEST_FILE
 D SaveRestoreBlockHeader_t::m_DataMap
 D ScriptedNPCInteraction_Phases_t::m_DataMap
 D ScriptedNPCInteraction_t::m_DataMap
 D SmokeTrail::m_DataMap
 D SoundCommand_t::m_DataMap
 D SporeExplosion::m_DataMap
 D SporeTrail::m_DataMap
 D TAutoList<CFuncPasstimeGoal>::m_autolist
 D TAutoList<CPasstimeBallController>::m_autolist
 D TemplateEntityData_t::m_DataMap
 D TheNavAttributeTable
 D UnreachableEnt_t::m_DataMap
 D VTT for CryptoPP::RSAFunction
 D VTT for CryptoPP::X509PublicKey
 D ViewSmoothingData_t::m_DataMap
 D WeaponStatesForAltFireModes
 D audioparams_t::m_DataMap
 D bool CNavMesh::ForAllAreasInRadius<NavAreaCollector>(NavAreaCollector&, Vector const&, float)::searchMarker
 D bool CNavMesh::ForAllAreasOverlappingExtent<CCollectAndLabelSpawnRoomAreas>(CCollectAndLabelSpawnRoomAreas&, Extent const&)::__executeCount
 D bool CNavMesh::ForAllAreasOverlappingExtent<CCollectAndLabelSpawnRoomAreas>(CCollectAndLabelSpawnRoomAreas&, Extent const&)::searchMarker
 D bool CNavMesh::ForAllAreasOverlappingExtent<CFuncNavBlocker>(CFuncNavBlocker&, Extent const&)::__executeCount
 D bool CNavMesh::ForAllAreasOverlappingExtent<CFuncNavBlocker>(CFuncNavBlocker&, Extent const&)::searchMarker
 D bool CNavMesh::ForAllAreasOverlappingExtent<CFuncNavObstruction>(CFuncNavObstruction&, Extent const&)::__executeCount
 D bool CNavMesh::ForAllAreasOverlappingExtent<CFuncNavObstruction>(CFuncNavObstruction&, Extent const&)::searchMarker
 D bool CNavMesh::ForAllAreasOverlappingExtent<COverlapCheck>(COverlapCheck&, Extent const&)::__executeCount
 D bool CNavMesh::ForAllAreasOverlappingExtent<COverlapCheck>(COverlapCheck&, Extent const&)::searchMarker
 D bool CNavMesh::ForAllAreasOverlappingExtent<CRegisterPrerequisite>(CRegisterPrerequisite&, Extent const&)::__executeCount
 D bool CNavMesh::ForAllAreasOverlappingExtent<CRegisterPrerequisite>(CRegisterPrerequisite&, Extent const&)::searchMarker
 D bool CNavMesh::ForAllAreasOverlappingExtent<NavAreaCollector>(NavAreaCollector&, Extent const&)::__executeCount
 D bool CNavMesh::ForAllAreasOverlappingExtent<NavAreaCollector>(NavAreaCollector&, Extent const&)::searchMarker
 D bool const& CDmxAttribute::GetValue<bool>() const::defaultValue
 D bool const& CDmxElement::GetValue<bool>(char const*) const::defaultValue
 D condition_to_attribute_translation
 D construction vtable for CryptoPP::ASN1CryptoMaterial<CryptoPP::PublicKey>-in-CryptoPP::RSAFunction
 D construction vtable for CryptoPP::ASN1CryptoMaterial<CryptoPP::PublicKey>-in-CryptoPP::X509PublicKey
 D construction vtable for CryptoPP::PublicKey-in-CryptoPP::ASN1CryptoMaterial<CryptoPP::PublicKey>
 D construction vtable for CryptoPP::PublicKey-in-CryptoPP::RSAFunction
 D construction vtable for CryptoPP::PublicKey-in-CryptoPP::X509PublicKey
 D construction vtable for CryptoPP::X509PublicKey-in-CryptoPP::RSAFunction
 D convars_to_check_for_tags
 D datamap_t* DataMapInit<AIExtendedSaveHeader_t>(AIExtendedSaveHeader_t*)::dataDesc
 D datamap_t* DataMapInit<AIExtendedSaveHeader_t>(AIExtendedSaveHeader_t*)::nameHolder
 D datamap_t* DataMapInit<AIScheduleState_t>(AIScheduleState_t*)::dataDesc
 D datamap_t* DataMapInit<AIScheduleState_t>(AIScheduleState_t*)::nameHolder
 D datamap_t* DataMapInit<AISquadEnemyInfo_t>(AISquadEnemyInfo_t*)::dataDesc
 D datamap_t* DataMapInit<AISquadEnemyInfo_t>(AISquadEnemyInfo_t*)::nameHolder
 D datamap_t* DataMapInit<AI_EnemyInfo_t>(AI_EnemyInfo_t*)::dataDesc
 D datamap_t* DataMapInit<AI_EnemyInfo_t>(AI_EnemyInfo_t*)::nameHolder
 D datamap_t* DataMapInit<AI_FollowNavInfo_t>(AI_FollowNavInfo_t*)::dataDesc
 D datamap_t* DataMapInit<AI_FollowNavInfo_t>(AI_FollowNavInfo_t*)::nameHolder
 D datamap_t* DataMapInit<AI_FollowParams_t>(AI_FollowParams_t*)::dataDesc
 D datamap_t* DataMapInit<AI_FollowParams_t>(AI_FollowParams_t*)::nameHolder
 D datamap_t* DataMapInit<AI_FreePassParams_t>(AI_FreePassParams_t*)::dataDesc
 D datamap_t* DataMapInit<AI_FreePassParams_t>(AI_FreePassParams_t*)::nameHolder
 D datamap_t* DataMapInit<AI_LeadArgs_t>(AI_LeadArgs_t*)::dataDesc
 D datamap_t* DataMapInit<AI_LeadArgs_t>(AI_LeadArgs_t*)::nameHolder
 D datamap_t* DataMapInit<AI_Response>(AI_Response*)::dataDesc
 D datamap_t* DataMapInit<AI_Response>(AI_Response*)::nameHolder
 D datamap_t* DataMapInit<AI_ResponseParams>(AI_ResponseParams*)::dataDesc
 D datamap_t* DataMapInit<AI_ResponseParams>(AI_ResponseParams*)::nameHolder
 D datamap_t* DataMapInit<AI_StandoffParams_t>(AI_StandoffParams_t*)::dataDesc
 D datamap_t* DataMapInit<AI_StandoffParams_t>(AI_StandoffParams_t*)::nameHolder
 D datamap_t* DataMapInit<AI_Waypoint_t>(AI_Waypoint_t*)::dataDesc
 D datamap_t* DataMapInit<AI_Waypoint_t>(AI_Waypoint_t*)::nameHolder
 D datamap_t* DataMapInit<CAISound>(CAISound*)::dataDesc
 D datamap_t* DataMapInit<CAISound>(CAISound*)::nameHolder
 D datamap_t* DataMapInit<CAI_AccelDecay>(CAI_AccelDecay*)::dataDesc
 D datamap_t* DataMapInit<CAI_AccelDecay>(CAI_AccelDecay*)::nameHolder
 D datamap_t* DataMapInit<CAI_AllySpeechManager>(CAI_AllySpeechManager*)::dataDesc
 D datamap_t* DataMapInit<CAI_AllySpeechManager>(CAI_AllySpeechManager*)::nameHolder
 D datamap_t* DataMapInit<CAI_AssaultBehavior>(CAI_AssaultBehavior*)::dataDesc
 D datamap_t* DataMapInit<CAI_AssaultBehavior>(CAI_AssaultBehavior*)::nameHolder
 D datamap_t* DataMapInit<CAI_AssaultGoal>(CAI_AssaultGoal*)::dataDesc
 D datamap_t* DataMapInit<CAI_AssaultGoal>(CAI_AssaultGoal*)::nameHolder
 D datamap_t* DataMapInit<CAI_BaseActor>(CAI_BaseActor*)::dataDesc
 D datamap_t* DataMapInit<CAI_BaseActor>(CAI_BaseActor*)::nameHolder
 D datamap_t* DataMapInit<CAI_BaseFlyingBot>(CAI_BaseFlyingBot*)::dataDesc
 D datamap_t* DataMapInit<CAI_BaseFlyingBot>(CAI_BaseFlyingBot*)::nameHolder
 D datamap_t* DataMapInit<CAI_BaseNPC>(CAI_BaseNPC*)::dataDesc
 D datamap_t* DataMapInit<CAI_BaseNPC>(CAI_BaseNPC*)::nameHolder
 D datamap_t* DataMapInit<CAI_BasePhysicsFlyingBot>(CAI_BasePhysicsFlyingBot*)::dataDesc
 D datamap_t* DataMapInit<CAI_BasePhysicsFlyingBot>(CAI_BasePhysicsFlyingBot*)::nameHolder
 D datamap_t* DataMapInit<CAI_BattleLine>(CAI_BattleLine*)::dataDesc
 D datamap_t* DataMapInit<CAI_BattleLine>(CAI_BattleLine*)::nameHolder
 D datamap_t* DataMapInit<CAI_BehaviorBase>(CAI_BehaviorBase*)::dataDesc
 D datamap_t* DataMapInit<CAI_BehaviorBase>(CAI_BehaviorBase*)::nameHolder
 D datamap_t* DataMapInit<CAI_BlendedMotor>(CAI_BlendedMotor*)::dataDesc
 D datamap_t* DataMapInit<CAI_BlendedMotor>(CAI_BlendedMotor*)::nameHolder
 D datamap_t* DataMapInit<CAI_ChangeHintGroup>(CAI_ChangeHintGroup*)::dataDesc
 D datamap_t* DataMapInit<CAI_ChangeHintGroup>(CAI_ChangeHintGroup*)::nameHolder
 D datamap_t* DataMapInit<CAI_ChangeTarget>(CAI_ChangeTarget*)::dataDesc
 D datamap_t* DataMapInit<CAI_ChangeTarget>(CAI_ChangeTarget*)::nameHolder
 D datamap_t* DataMapInit<CAI_DynamicLink>(CAI_DynamicLink*)::dataDesc
 D datamap_t* DataMapInit<CAI_DynamicLink>(CAI_DynamicLink*)::nameHolder
 D datamap_t* DataMapInit<CAI_DynamicLinkController>(CAI_DynamicLinkController*)::dataDesc
 D datamap_t* DataMapInit<CAI_DynamicLinkController>(CAI_DynamicLinkController*)::nameHolder
 D datamap_t* DataMapInit<CAI_Enemies>(CAI_Enemies*)::dataDesc
 D datamap_t* DataMapInit<CAI_Enemies>(CAI_Enemies*)::nameHolder
 D datamap_t* DataMapInit<CAI_Expresser>(CAI_Expresser*)::dataDesc
 D datamap_t* DataMapInit<CAI_Expresser>(CAI_Expresser*)::nameHolder
 D datamap_t* DataMapInit<CAI_FearBehavior>(CAI_FearBehavior*)::dataDesc
 D datamap_t* DataMapInit<CAI_FearBehavior>(CAI_FearBehavior*)::nameHolder
 D datamap_t* DataMapInit<CAI_FollowBehavior>(CAI_FollowBehavior*)::dataDesc
 D datamap_t* DataMapInit<CAI_FollowBehavior>(CAI_FollowBehavior*)::nameHolder
 D datamap_t* DataMapInit<CAI_FollowGoal>(CAI_FollowGoal*)::dataDesc
 D datamap_t* DataMapInit<CAI_FollowGoal>(CAI_FollowGoal*)::nameHolder
 D datamap_t* DataMapInit<CAI_FreePass>(CAI_FreePass*)::dataDesc
 D datamap_t* DataMapInit<CAI_FreePass>(CAI_FreePass*)::nameHolder
 D datamap_t* DataMapInit<CAI_GoalEntity>(CAI_GoalEntity*)::dataDesc
 D datamap_t* DataMapInit<CAI_GoalEntity>(CAI_GoalEntity*)::nameHolder
 D datamap_t* DataMapInit<CAI_Hint>(CAI_Hint*)::dataDesc
 D datamap_t* DataMapInit<CAI_Hint>(CAI_Hint*)::nameHolder
 D datamap_t* DataMapInit<CAI_InterestTarget_t>(CAI_InterestTarget_t*)::dataDesc
 D datamap_t* DataMapInit<CAI_InterestTarget_t>(CAI_InterestTarget_t*)::nameHolder
 D datamap_t* DataMapInit<CAI_LeadBehavior>(CAI_LeadBehavior*)::dataDesc
 D datamap_t* DataMapInit<CAI_LeadBehavior>(CAI_LeadBehavior*)::nameHolder
 D datamap_t* DataMapInit<CAI_LeadGoal>(CAI_LeadGoal*)::dataDesc
 D datamap_t* DataMapInit<CAI_LeadGoal>(CAI_LeadGoal*)::nameHolder
 D datamap_t* DataMapInit<CAI_LeadGoal_Weapon>(CAI_LeadGoal_Weapon*)::dataDesc
 D datamap_t* DataMapInit<CAI_LeadGoal_Weapon>(CAI_LeadGoal_Weapon*)::nameHolder
 D datamap_t* DataMapInit<CAI_LocalNavigator>(CAI_LocalNavigator*)::dataDesc
 D datamap_t* DataMapInit<CAI_LocalNavigator>(CAI_LocalNavigator*)::nameHolder
 D datamap_t* DataMapInit<CAI_LookTarget>(CAI_LookTarget*)::dataDesc
 D datamap_t* DataMapInit<CAI_LookTarget>(CAI_LookTarget*)::nameHolder
 D datamap_t* DataMapInit<CAI_Motor>(CAI_Motor*)::dataDesc
 D datamap_t* DataMapInit<CAI_Motor>(CAI_Motor*)::nameHolder
 D datamap_t* DataMapInit<CAI_MoveAndShootOverlay>(CAI_MoveAndShootOverlay*)::dataDesc
 D datamap_t* DataMapInit<CAI_MoveAndShootOverlay>(CAI_MoveAndShootOverlay*)::nameHolder
 D datamap_t* DataMapInit<CAI_MoveMonitor>(CAI_MoveMonitor*)::dataDesc
 D datamap_t* DataMapInit<CAI_MoveMonitor>(CAI_MoveMonitor*)::nameHolder
 D datamap_t* DataMapInit<CAI_MoveProbe>(CAI_MoveProbe*)::dataDesc
 D datamap_t* DataMapInit<CAI_MoveProbe>(CAI_MoveProbe*)::nameHolder
 D datamap_t* DataMapInit<CAI_Navigator>(CAI_Navigator*)::dataDesc
 D datamap_t* DataMapInit<CAI_Navigator>(CAI_Navigator*)::nameHolder
 D datamap_t* DataMapInit<CAI_NetworkManager>(CAI_NetworkManager*)::dataDesc
 D datamap_t* DataMapInit<CAI_NetworkManager>(CAI_NetworkManager*)::nameHolder
 D datamap_t* DataMapInit<CAI_Path>(CAI_Path*)::dataDesc
 D datamap_t* DataMapInit<CAI_Path>(CAI_Path*)::nameHolder
 D datamap_t* DataMapInit<CAI_Pathfinder>(CAI_Pathfinder*)::dataDesc
 D datamap_t* DataMapInit<CAI_Pathfinder>(CAI_Pathfinder*)::nameHolder
 D datamap_t* DataMapInit<CAI_PlayerAlly>(CAI_PlayerAlly*)::dataDesc
 D datamap_t* DataMapInit<CAI_PlayerAlly>(CAI_PlayerAlly*)::nameHolder
 D datamap_t* DataMapInit<CAI_ProxTester>(CAI_ProxTester*)::dataDesc
 D datamap_t* DataMapInit<CAI_ProxTester>(CAI_ProxTester*)::nameHolder
 D datamap_t* DataMapInit<CAI_RadialLinkController>(CAI_RadialLinkController*)::dataDesc
 D datamap_t* DataMapInit<CAI_RadialLinkController>(CAI_RadialLinkController*)::nameHolder
 D datamap_t* DataMapInit<CAI_RappelBehavior>(CAI_RappelBehavior*)::dataDesc
 D datamap_t* DataMapInit<CAI_RappelBehavior>(CAI_RappelBehavior*)::nameHolder
 D datamap_t* DataMapInit<CAI_Relationship>(CAI_Relationship*)::dataDesc
 D datamap_t* DataMapInit<CAI_Relationship>(CAI_Relationship*)::nameHolder
 D datamap_t* DataMapInit<CAI_ScriptConditions>(CAI_ScriptConditions*)::dataDesc
 D datamap_t* DataMapInit<CAI_ScriptConditions>(CAI_ScriptConditions*)::nameHolder
 D datamap_t* DataMapInit<CAI_ScriptConditionsElement>(CAI_ScriptConditionsElement*)::dataDesc
 D datamap_t* DataMapInit<CAI_ScriptConditionsElement>(CAI_ScriptConditionsElement*)::nameHolder
 D datamap_t* DataMapInit<CAI_ScriptedSchedule>(CAI_ScriptedSchedule*)::dataDesc
 D datamap_t* DataMapInit<CAI_ScriptedSchedule>(CAI_ScriptedSchedule*)::nameHolder
 D datamap_t* DataMapInit<CAI_ScriptedSentence>(CAI_ScriptedSentence*)::dataDesc
 D datamap_t* DataMapInit<CAI_ScriptedSentence>(CAI_ScriptedSentence*)::nameHolder
 D datamap_t* DataMapInit<CAI_ScriptedSequence>(CAI_ScriptedSequence*)::dataDesc
 D datamap_t* DataMapInit<CAI_ScriptedSequence>(CAI_ScriptedSequence*)::nameHolder
 D datamap_t* DataMapInit<CAI_Senses>(CAI_Senses*)::dataDesc
 D datamap_t* DataMapInit<CAI_Senses>(CAI_Senses*)::nameHolder
 D datamap_t* DataMapInit<CAI_SentenceBase>(CAI_SentenceBase*)::dataDesc
 D datamap_t* DataMapInit<CAI_SentenceBase>(CAI_SentenceBase*)::nameHolder
 D datamap_t* DataMapInit<CAI_ShotRegulator>(CAI_ShotRegulator*)::dataDesc
 D datamap_t* DataMapInit<CAI_ShotRegulator>(CAI_ShotRegulator*)::nameHolder
 D datamap_t* DataMapInit<CAI_SpeechFilter>(CAI_SpeechFilter*)::dataDesc
 D datamap_t* DataMapInit<CAI_SpeechFilter>(CAI_SpeechFilter*)::nameHolder
 D datamap_t* DataMapInit<CAI_Squad>(CAI_Squad*)::dataDesc
 D datamap_t* DataMapInit<CAI_Squad>(CAI_Squad*)::nameHolder
 D datamap_t* DataMapInit<CAI_StandoffBehavior>(CAI_StandoffBehavior*)::dataDesc
 D datamap_t* DataMapInit<CAI_StandoffBehavior>(CAI_StandoffBehavior*)::nameHolder
 D datamap_t* DataMapInit<CAI_StandoffGoal>(CAI_StandoffGoal*)::dataDesc
 D datamap_t* DataMapInit<CAI_StandoffGoal>(CAI_StandoffGoal*)::nameHolder
 D datamap_t* DataMapInit<CAI_TacticalServices>(CAI_TacticalServices*)::dataDesc
 D datamap_t* DataMapInit<CAI_TacticalServices>(CAI_TacticalServices*)::nameHolder
 D datamap_t* DataMapInit<CAI_TrackPather>(CAI_TrackPather*)::dataDesc
 D datamap_t* DataMapInit<CAI_TrackPather>(CAI_TrackPather*)::nameHolder
 D datamap_t* DataMapInit<CAchievementZone>(CAchievementZone*)::dataDesc
 D datamap_t* DataMapInit<CAchievementZone>(CAchievementZone*)::nameHolder
 D datamap_t* DataMapInit<CAmbientGeneric>(CAmbientGeneric*)::dataDesc
 D datamap_t* DataMapInit<CAmbientGeneric>(CAmbientGeneric*)::nameHolder
 D datamap_t* DataMapInit<CAnimationLayer>(CAnimationLayer*)::dataDesc
 D datamap_t* DataMapInit<CAnimationLayer>(CAnimationLayer*)::nameHolder
 D datamap_t* DataMapInit<CAreaPortal>(CAreaPortal*)::dataDesc
 D datamap_t* DataMapInit<CAreaPortal>(CAreaPortal*)::nameHolder
 D datamap_t* DataMapInit<CArenaLogic>(CArenaLogic*)::dataDesc
 D datamap_t* DataMapInit<CArenaLogic>(CArenaLogic*)::nameHolder
 D datamap_t* DataMapInit<CAssaultPoint>(CAssaultPoint*)::dataDesc
 D datamap_t* DataMapInit<CAssaultPoint>(CAssaultPoint*)::nameHolder
 D datamap_t* DataMapInit<CAttributeContainer>(CAttributeContainer*)::dataDesc
 D datamap_t* DataMapInit<CAttributeContainer>(CAttributeContainer*)::nameHolder
 D datamap_t* DataMapInit<CAttributeContainerPlayer>(CAttributeContainerPlayer*)::dataDesc
 D datamap_t* DataMapInit<CAttributeContainerPlayer>(CAttributeContainerPlayer*)::nameHolder
 D datamap_t* DataMapInit<CAttributeList>(CAttributeList*)::dataDesc
 D datamap_t* DataMapInit<CAttributeList>(CAttributeList*)::nameHolder
 D datamap_t* DataMapInit<CAttributeManager>(CAttributeManager*)::dataDesc
 D datamap_t* DataMapInit<CAttributeManager>(CAttributeManager*)::nameHolder
 D datamap_t* DataMapInit<CBaseAchievement>(CBaseAchievement*)::dataDesc
 D datamap_t* DataMapInit<CBaseAchievement>(CBaseAchievement*)::nameHolder
 D datamap_t* DataMapInit<CBaseAnimating>(CBaseAnimating*)::dataDesc
 D datamap_t* DataMapInit<CBaseAnimating>(CBaseAnimating*)::nameHolder
 D datamap_t* DataMapInit<CBaseAnimatingOverlay>(CBaseAnimatingOverlay*)::dataDesc
 D datamap_t* DataMapInit<CBaseAnimatingOverlay>(CBaseAnimatingOverlay*)::nameHolder
 D datamap_t* DataMapInit<CBaseAttributableItem>(CBaseAttributableItem*)::dataDesc
 D datamap_t* DataMapInit<CBaseAttributableItem>(CBaseAttributableItem*)::nameHolder
 D datamap_t* DataMapInit<CBaseButton>(CBaseButton*)::dataDesc
 D datamap_t* DataMapInit<CBaseButton>(CBaseButton*)::nameHolder
 D datamap_t* DataMapInit<CBaseCombatCharacter>(CBaseCombatCharacter*)::dataDesc
 D datamap_t* DataMapInit<CBaseCombatCharacter>(CBaseCombatCharacter*)::nameHolder
 D datamap_t* DataMapInit<CBaseCombatWeapon>(CBaseCombatWeapon*)::dataDesc
 D datamap_t* DataMapInit<CBaseCombatWeapon>(CBaseCombatWeapon*)::nameHolder
 D datamap_t* DataMapInit<CBaseDMStart>(CBaseDMStart*)::dataDesc
 D datamap_t* DataMapInit<CBaseDMStart>(CBaseDMStart*)::nameHolder
 D datamap_t* DataMapInit<CBaseDoor>(CBaseDoor*)::dataDesc
 D datamap_t* DataMapInit<CBaseDoor>(CBaseDoor*)::nameHolder
 D datamap_t* DataMapInit<CBaseEntity>(CBaseEntity*)::dataDesc
 D datamap_t* DataMapInit<CBaseEntity>(CBaseEntity*)::nameHolder
 D datamap_t* DataMapInit<CBaseEntityOutput>(CBaseEntityOutput*)::dataDesc
 D datamap_t* DataMapInit<CBaseEntityOutput>(CBaseEntityOutput*)::nameHolder
 D datamap_t* DataMapInit<CBaseFilter>(CBaseFilter*)::dataDesc
 D datamap_t* DataMapInit<CBaseFilter>(CBaseFilter*)::nameHolder
 D datamap_t* DataMapInit<CBaseFire>(CBaseFire*)::dataDesc
 D datamap_t* DataMapInit<CBaseFire>(CBaseFire*)::nameHolder
 D datamap_t* DataMapInit<CBaseFlex>(CBaseFlex*)::dataDesc
 D datamap_t* DataMapInit<CBaseFlex>(CBaseFlex*)::nameHolder
 D datamap_t* DataMapInit<CBaseGrenade>(CBaseGrenade*)::dataDesc
 D datamap_t* DataMapInit<CBaseGrenade>(CBaseGrenade*)::nameHolder
 D datamap_t* DataMapInit<CBaseGrenadeConcussion>(CBaseGrenadeConcussion*)::dataDesc
 D datamap_t* DataMapInit<CBaseGrenadeConcussion>(CBaseGrenadeConcussion*)::nameHolder
 D datamap_t* DataMapInit<CBaseMoveBehavior>(CBaseMoveBehavior*)::dataDesc
 D datamap_t* DataMapInit<CBaseMoveBehavior>(CBaseMoveBehavior*)::nameHolder
 D datamap_t* DataMapInit<CBaseNPCMaker>(CBaseNPCMaker*)::dataDesc
 D datamap_t* DataMapInit<CBaseNPCMaker>(CBaseNPCMaker*)::nameHolder
 D datamap_t* DataMapInit<CBaseObject>(CBaseObject*)::dataDesc
 D datamap_t* DataMapInit<CBaseObject>(CBaseObject*)::nameHolder
 D datamap_t* DataMapInit<CBasePlatTrain>(CBasePlatTrain*)::dataDesc
 D datamap_t* DataMapInit<CBasePlatTrain>(CBasePlatTrain*)::nameHolder
 D datamap_t* DataMapInit<CBasePlayer>(CBasePlayer*)::dataDesc
 D datamap_t* DataMapInit<CBasePlayer>(CBasePlayer*)::nameHolder
 D datamap_t* DataMapInit<CBasePropDoor>(CBasePropDoor*)::dataDesc
 D datamap_t* DataMapInit<CBasePropDoor>(CBasePropDoor*)::nameHolder
 D datamap_t* DataMapInit<CBaseServerVehicle>(CBaseServerVehicle*)::dataDesc
 D datamap_t* DataMapInit<CBaseServerVehicle>(CBaseServerVehicle*)::nameHolder
 D datamap_t* DataMapInit<CBaseTFBotHintEntity>(CBaseTFBotHintEntity*)::dataDesc
 D datamap_t* DataMapInit<CBaseTFBotHintEntity>(CBaseTFBotHintEntity*)::nameHolder
 D datamap_t* DataMapInit<CBaseTeamObjectiveResource>(CBaseTeamObjectiveResource*)::dataDesc
 D datamap_t* DataMapInit<CBaseTeamObjectiveResource>(CBaseTeamObjectiveResource*)::nameHolder
 D datamap_t* DataMapInit<CBaseToggle>(CBaseToggle*)::dataDesc
 D datamap_t* DataMapInit<CBaseToggle>(CBaseToggle*)::nameHolder
 D datamap_t* DataMapInit<CBaseTrigger>(CBaseTrigger*)::dataDesc
 D datamap_t* DataMapInit<CBaseTrigger>(CBaseTrigger*)::nameHolder
 D datamap_t* DataMapInit<CBaseVPhysicsTrigger>(CBaseVPhysicsTrigger*)::dataDesc
 D datamap_t* DataMapInit<CBaseVPhysicsTrigger>(CBaseVPhysicsTrigger*)::nameHolder
 D datamap_t* DataMapInit<CBaseViewModel>(CBaseViewModel*)::dataDesc
 D datamap_t* DataMapInit<CBaseViewModel>(CBaseViewModel*)::nameHolder
 D datamap_t* DataMapInit<CBeam>(CBeam*)::dataDesc
 D datamap_t* DataMapInit<CBeam>(CBeam*)::nameHolder
 D datamap_t* DataMapInit<CBlood>(CBlood*)::dataDesc
 D datamap_t* DataMapInit<CBlood>(CBlood*)::nameHolder
 D datamap_t* DataMapInit<CBoneFollower>(CBoneFollower*)::dataDesc
 D datamap_t* DataMapInit<CBoneFollower>(CBoneFollower*)::nameHolder
 D datamap_t* DataMapInit<CBoneFollowerManager>(CBoneFollowerManager*)::dataDesc
 D datamap_t* DataMapInit<CBoneFollowerManager>(CBoneFollowerManager*)::nameHolder
 D datamap_t* DataMapInit<CBonusDuckPickup>(CBonusDuckPickup*)::dataDesc
 D datamap_t* DataMapInit<CBonusDuckPickup>(CBonusDuckPickup*)::nameHolder
 D datamap_t* DataMapInit<CBonusPack>(CBonusPack*)::dataDesc
 D datamap_t* DataMapInit<CBonusPack>(CBonusPack*)::nameHolder
 D datamap_t* DataMapInit<CBreakable>(CBreakable*)::dataDesc
 D datamap_t* DataMapInit<CBreakable>(CBreakable*)::nameHolder
 D datamap_t* DataMapInit<CBreakableProp>(CBreakableProp*)::dataDesc
 D datamap_t* DataMapInit<CBreakableProp>(CBreakableProp*)::nameHolder
 D datamap_t* DataMapInit<CBreakableSurface>(CBreakableSurface*)::dataDesc
 D datamap_t* DataMapInit<CBreakableSurface>(CBreakableSurface*)::nameHolder
 D datamap_t* DataMapInit<CBubbling>(CBubbling*)::dataDesc
 D datamap_t* DataMapInit<CBubbling>(CBubbling*)::nameHolder
 D datamap_t* DataMapInit<CCPTimerLogic>(CCPTimerLogic*)::dataDesc
 D datamap_t* DataMapInit<CCPTimerLogic>(CCPTimerLogic*)::nameHolder
 D datamap_t* DataMapInit<CCaptureFlag>(CCaptureFlag*)::dataDesc
 D datamap_t* DataMapInit<CCaptureFlag>(CCaptureFlag*)::nameHolder
 D datamap_t* DataMapInit<CCaptureZone>(CCaptureZone*)::dataDesc
 D datamap_t* DataMapInit<CCaptureZone>(CCaptureZone*)::nameHolder
 D datamap_t* DataMapInit<CChangeLevel>(CChangeLevel*)::dataDesc
 D datamap_t* DataMapInit<CChangeLevel>(CChangeLevel*)::nameHolder
 D datamap_t* DataMapInit<CCollisionProperty>(CCollisionProperty*)::dataDesc
 D datamap_t* DataMapInit<CCollisionProperty>(CCollisionProperty*)::nameHolder
 D datamap_t* DataMapInit<CColorCorrection>(CColorCorrection*)::dataDesc
 D datamap_t* DataMapInit<CColorCorrection>(CColorCorrection*)::nameHolder
 D datamap_t* DataMapInit<CColorCorrectionVolume>(CColorCorrectionVolume*)::dataDesc
 D datamap_t* DataMapInit<CColorCorrectionVolume>(CColorCorrectionVolume*)::nameHolder
 D datamap_t* DataMapInit<CCommentaryAuto>(CCommentaryAuto*)::dataDesc
 D datamap_t* DataMapInit<CCommentaryAuto>(CCommentaryAuto*)::nameHolder
 D datamap_t* DataMapInit<CCommentarySystem>(CCommentarySystem*)::dataDesc
 D datamap_t* DataMapInit<CCommentarySystem>(CCommentarySystem*)::nameHolder
 D datamap_t* DataMapInit<CCompetitiveLogic>(CCompetitiveLogic*)::dataDesc
 D datamap_t* DataMapInit<CCompetitiveLogic>(CCompetitiveLogic*)::nameHolder
 D datamap_t* DataMapInit<CConstantForceController>(CConstantForceController*)::dataDesc
 D datamap_t* DataMapInit<CConstantForceController>(CConstantForceController*)::nameHolder
 D datamap_t* DataMapInit<CConstraintAnchor>(CConstraintAnchor*)::dataDesc
 D datamap_t* DataMapInit<CConstraintAnchor>(CConstraintAnchor*)::nameHolder
 D datamap_t* DataMapInit<CCopyRecipientFilter>(CCopyRecipientFilter*)::dataDesc
 D datamap_t* DataMapInit<CCopyRecipientFilter>(CCopyRecipientFilter*)::nameHolder
 D datamap_t* DataMapInit<CCredits>(CCredits*)::dataDesc
 D datamap_t* DataMapInit<CCredits>(CCredits*)::nameHolder
 D datamap_t* DataMapInit<CDebugHistory>(CDebugHistory*)::dataDesc
 D datamap_t* DataMapInit<CDebugHistory>(CDebugHistory*)::nameHolder
 D datamap_t* DataMapInit<CDecal>(CDecal*)::dataDesc
 D datamap_t* DataMapInit<CDecal>(CDecal*)::nameHolder
 D datamap_t* DataMapInit<CDynamicLight>(CDynamicLight*)::dataDesc
 D datamap_t* DataMapInit<CDynamicLight>(CDynamicLight*)::nameHolder
 D datamap_t* DataMapInit<CDynamicProp>(CDynamicProp*)::dataDesc
 D datamap_t* DataMapInit<CDynamicProp>(CDynamicProp*)::nameHolder
 D datamap_t* DataMapInit<CEconEntity>(CEconEntity*)::dataDesc
 D datamap_t* DataMapInit<CEconEntity>(CEconEntity*)::nameHolder
 D datamap_t* DataMapInit<CEconItemView>(CEconItemView*)::dataDesc
 D datamap_t* DataMapInit<CEconItemView>(CEconItemView*)::nameHolder
 D datamap_t* DataMapInit<CEconWearable>(CEconWearable*)::dataDesc
 D datamap_t* DataMapInit<CEconWearable>(CEconWearable*)::nameHolder
 D datamap_t* DataMapInit<CEmbers>(CEmbers*)::dataDesc
 D datamap_t* DataMapInit<CEmbers>(CEmbers*)::nameHolder
 D datamap_t* DataMapInit<CEntityDissolve>(CEntityDissolve*)::dataDesc
 D datamap_t* DataMapInit<CEntityDissolve>(CEntityDissolve*)::nameHolder
 D datamap_t* DataMapInit<CEntityFlame>(CEntityFlame*)::dataDesc
 D datamap_t* DataMapInit<CEntityFlame>(CEntityFlame*)::nameHolder
 D datamap_t* DataMapInit<CEntityParticleTrail>(CEntityParticleTrail*)::dataDesc
 D datamap_t* DataMapInit<CEntityParticleTrail>(CEntityParticleTrail*)::nameHolder
 D datamap_t* DataMapInit<CEntitySpawnManager>(CEntitySpawnManager*)::dataDesc
 D datamap_t* DataMapInit<CEntitySpawnManager>(CEntitySpawnManager*)::nameHolder
 D datamap_t* DataMapInit<CEntitySpawnPoint>(CEntitySpawnPoint*)::dataDesc
 D datamap_t* DataMapInit<CEntitySpawnPoint>(CEntitySpawnPoint*)::nameHolder
 D datamap_t* DataMapInit<CEnvBeam>(CEnvBeam*)::dataDesc
 D datamap_t* DataMapInit<CEnvBeam>(CEnvBeam*)::nameHolder
 D datamap_t* DataMapInit<CEnvBeverage>(CEnvBeverage*)::dataDesc
 D datamap_t* DataMapInit<CEnvBeverage>(CEnvBeverage*)::nameHolder
 D datamap_t* DataMapInit<CEnvDustPuff>(CEnvDustPuff*)::dataDesc
 D datamap_t* DataMapInit<CEnvDustPuff>(CEnvDustPuff*)::nameHolder
 D datamap_t* DataMapInit<CEnvEffectsScript>(CEnvEffectsScript*)::dataDesc
 D datamap_t* DataMapInit<CEnvEffectsScript>(CEnvEffectsScript*)::nameHolder
 D datamap_t* DataMapInit<CEnvEntityMaker>(CEnvEntityMaker*)::dataDesc
 D datamap_t* DataMapInit<CEnvEntityMaker>(CEnvEntityMaker*)::nameHolder
 D datamap_t* DataMapInit<CEnvExplosion>(CEnvExplosion*)::dataDesc
 D datamap_t* DataMapInit<CEnvExplosion>(CEnvExplosion*)::nameHolder
 D datamap_t* DataMapInit<CEnvFade>(CEnvFade*)::dataDesc
 D datamap_t* DataMapInit<CEnvFade>(CEnvFade*)::nameHolder
 D datamap_t* DataMapInit<CEnvFireSensor>(CEnvFireSensor*)::dataDesc
 D datamap_t* DataMapInit<CEnvFireSensor>(CEnvFireSensor*)::nameHolder
 D datamap_t* DataMapInit<CEnvFireSource>(CEnvFireSource*)::dataDesc
 D datamap_t* DataMapInit<CEnvFireSource>(CEnvFireSource*)::nameHolder
 D datamap_t* DataMapInit<CEnvFunnel>(CEnvFunnel*)::dataDesc
 D datamap_t* DataMapInit<CEnvFunnel>(CEnvFunnel*)::nameHolder
 D datamap_t* DataMapInit<CEnvGlobal>(CEnvGlobal*)::dataDesc
 D datamap_t* DataMapInit<CEnvGlobal>(CEnvGlobal*)::nameHolder
 D datamap_t* DataMapInit<CEnvGunfire>(CEnvGunfire*)::dataDesc
 D datamap_t* DataMapInit<CEnvGunfire>(CEnvGunfire*)::nameHolder
 D datamap_t* DataMapInit<CEnvHudHint>(CEnvHudHint*)::dataDesc
 D datamap_t* DataMapInit<CEnvHudHint>(CEnvHudHint*)::nameHolder
 D datamap_t* DataMapInit<CEnvLaser>(CEnvLaser*)::dataDesc
 D datamap_t* DataMapInit<CEnvLaser>(CEnvLaser*)::nameHolder
 D datamap_t* DataMapInit<CEnvMicrophone>(CEnvMicrophone*)::dataDesc
 D datamap_t* DataMapInit<CEnvMicrophone>(CEnvMicrophone*)::nameHolder
 D datamap_t* DataMapInit<CEnvMuzzleFlash>(CEnvMuzzleFlash*)::dataDesc
 D datamap_t* DataMapInit<CEnvMuzzleFlash>(CEnvMuzzleFlash*)::nameHolder
 D datamap_t* DataMapInit<CEnvParticleScript>(CEnvParticleScript*)::dataDesc
 D datamap_t* DataMapInit<CEnvParticleScript>(CEnvParticleScript*)::nameHolder
 D datamap_t* DataMapInit<CEnvPlayerSurfaceTrigger>(CEnvPlayerSurfaceTrigger*)::dataDesc
 D datamap_t* DataMapInit<CEnvPlayerSurfaceTrigger>(CEnvPlayerSurfaceTrigger*)::nameHolder
 D datamap_t* DataMapInit<CEnvProjectedTexture>(CEnvProjectedTexture*)::dataDesc
 D datamap_t* DataMapInit<CEnvProjectedTexture>(CEnvProjectedTexture*)::nameHolder
 D datamap_t* DataMapInit<CEnvQuadraticBeam>(CEnvQuadraticBeam*)::dataDesc
 D datamap_t* DataMapInit<CEnvQuadraticBeam>(CEnvQuadraticBeam*)::nameHolder
 D datamap_t* DataMapInit<CEnvScreenEffect>(CEnvScreenEffect*)::dataDesc
 D datamap_t* DataMapInit<CEnvScreenEffect>(CEnvScreenEffect*)::nameHolder
 D datamap_t* DataMapInit<CEnvScreenOverlay>(CEnvScreenOverlay*)::dataDesc
 D datamap_t* DataMapInit<CEnvScreenOverlay>(CEnvScreenOverlay*)::nameHolder
 D datamap_t* DataMapInit<CEnvShake>(CEnvShake*)::dataDesc
 D datamap_t* DataMapInit<CEnvShake>(CEnvShake*)::nameHolder
 D datamap_t* DataMapInit<CEnvShooter>(CEnvShooter*)::dataDesc
 D datamap_t* DataMapInit<CEnvShooter>(CEnvShooter*)::nameHolder
 D datamap_t* DataMapInit<CEnvSoundscape>(CEnvSoundscape*)::dataDesc
 D datamap_t* DataMapInit<CEnvSoundscape>(CEnvSoundscape*)::nameHolder
 D datamap_t* DataMapInit<CEnvSoundscapeProxy>(CEnvSoundscapeProxy*)::dataDesc
 D datamap_t* DataMapInit<CEnvSoundscapeProxy>(CEnvSoundscapeProxy*)::nameHolder
 D datamap_t* DataMapInit<CEnvSoundscapeTriggerable>(CEnvSoundscapeTriggerable*)::dataDesc
 D datamap_t* DataMapInit<CEnvSoundscapeTriggerable>(CEnvSoundscapeTriggerable*)::nameHolder
 D datamap_t* DataMapInit<CEnvSpark>(CEnvSpark*)::dataDesc
 D datamap_t* DataMapInit<CEnvSpark>(CEnvSpark*)::nameHolder
 D datamap_t* DataMapInit<CEnvSplash>(CEnvSplash*)::dataDesc
 D datamap_t* DataMapInit<CEnvSplash>(CEnvSplash*)::nameHolder
 D datamap_t* DataMapInit<CEnvTonemapController>(CEnvTonemapController*)::dataDesc
 D datamap_t* DataMapInit<CEnvTonemapController>(CEnvTonemapController*)::nameHolder
 D datamap_t* DataMapInit<CEnvTracer>(CEnvTracer*)::dataDesc
 D datamap_t* DataMapInit<CEnvTracer>(CEnvTracer*)::nameHolder
 D datamap_t* DataMapInit<CEnvViewPunch>(CEnvViewPunch*)::dataDesc
 D datamap_t* DataMapInit<CEnvViewPunch>(CEnvViewPunch*)::nameHolder
 D datamap_t* DataMapInit<CEnvWind>(CEnvWind*)::dataDesc
 D datamap_t* DataMapInit<CEnvWind>(CEnvWind*)::nameHolder
 D datamap_t* DataMapInit<CEnvZoom>(CEnvZoom*)::dataDesc
 D datamap_t* DataMapInit<CEnvZoom>(CEnvZoom*)::nameHolder
 D datamap_t* DataMapInit<CEventAction>(CEventAction*)::dataDesc
 D datamap_t* DataMapInit<CEventAction>(CEventAction*)::nameHolder
 D datamap_t* DataMapInit<CEventQueue>(CEventQueue*)::dataDesc
 D datamap_t* DataMapInit<CEventQueue>(CEventQueue*)::nameHolder
 D datamap_t* DataMapInit<CExtraMapEntity>(CExtraMapEntity*)::dataDesc
 D datamap_t* DataMapInit<CExtraMapEntity>(CExtraMapEntity*)::nameHolder
 D datamap_t* DataMapInit<CFailableAchievement>(CFailableAchievement*)::dataDesc
 D datamap_t* DataMapInit<CFailableAchievement>(CFailableAchievement*)::nameHolder
 D datamap_t* DataMapInit<CFilterClass>(CFilterClass*)::dataDesc
 D datamap_t* DataMapInit<CFilterClass>(CFilterClass*)::nameHolder
 D datamap_t* DataMapInit<CFilterEnemy>(CFilterEnemy*)::dataDesc
 D datamap_t* DataMapInit<CFilterEnemy>(CFilterEnemy*)::nameHolder
 D datamap_t* DataMapInit<CFilterMassGreater>(CFilterMassGreater*)::dataDesc
 D datamap_t* DataMapInit<CFilterMassGreater>(CFilterMassGreater*)::nameHolder
 D datamap_t* DataMapInit<CFilterMultiple>(CFilterMultiple*)::dataDesc
 D datamap_t* DataMapInit<CFilterMultiple>(CFilterMultiple*)::nameHolder
 D datamap_t* DataMapInit<CFilterName>(CFilterName*)::dataDesc
 D datamap_t* DataMapInit<CFilterName>(CFilterName*)::nameHolder
 D datamap_t* DataMapInit<CFilterTFBotHasTag>(CFilterTFBotHasTag*)::dataDesc
 D datamap_t* DataMapInit<CFilterTFBotHasTag>(CFilterTFBotHasTag*)::nameHolder
 D datamap_t* DataMapInit<CFilterTFCanCap>(CFilterTFCanCap*)::dataDesc
 D datamap_t* DataMapInit<CFilterTFCanCap>(CFilterTFCanCap*)::nameHolder
 D datamap_t* DataMapInit<CFilterTFClass>(CFilterTFClass*)::dataDesc
 D datamap_t* DataMapInit<CFilterTFClass>(CFilterTFClass*)::nameHolder
 D datamap_t* DataMapInit<CFilterTFCondition>(CFilterTFCondition*)::dataDesc
 D datamap_t* DataMapInit<CFilterTFCondition>(CFilterTFCondition*)::nameHolder
 D datamap_t* DataMapInit<CFilterTFTeam>(CFilterTFTeam*)::dataDesc
 D datamap_t* DataMapInit<CFilterTFTeam>(CFilterTFTeam*)::nameHolder
 D datamap_t* DataMapInit<CFire>(CFire*)::dataDesc
 D datamap_t* DataMapInit<CFire>(CFire*)::nameHolder
 D datamap_t* DataMapInit<CFireSmoke>(CFireSmoke*)::dataDesc
 D datamap_t* DataMapInit<CFireSmoke>(CFireSmoke*)::nameHolder
 D datamap_t* DataMapInit<CFireTrail>(CFireTrail*)::dataDesc
 D datamap_t* DataMapInit<CFireTrail>(CFireTrail*)::nameHolder
 D datamap_t* DataMapInit<CFish>(CFish*)::dataDesc
 D datamap_t* DataMapInit<CFish>(CFish*)::nameHolder
 D datamap_t* DataMapInit<CFishPool>(CFishPool*)::dataDesc
 D datamap_t* DataMapInit<CFishPool>(CFishPool*)::nameHolder
 D datamap_t* DataMapInit<CFlagDetectionZone>(CFlagDetectionZone*)::dataDesc
 D datamap_t* DataMapInit<CFlagDetectionZone>(CFlagDetectionZone*)::nameHolder
 D datamap_t* DataMapInit<CFlexCycler>(CFlexCycler*)::dataDesc
 D datamap_t* DataMapInit<CFlexCycler>(CFlexCycler*)::nameHolder
 D datamap_t* DataMapInit<CFlextalkActor>(CFlextalkActor*)::dataDesc
 D datamap_t* DataMapInit<CFlextalkActor>(CFlextalkActor*)::nameHolder
 D datamap_t* DataMapInit<CFogController>(CFogController*)::dataDesc
 D datamap_t* DataMapInit<CFogController>(CFogController*)::nameHolder
 D datamap_t* DataMapInit<CFourWheelServerVehicle>(CFourWheelServerVehicle*)::dataDesc
 D datamap_t* DataMapInit<CFourWheelServerVehicle>(CFourWheelServerVehicle*)::nameHolder
 D datamap_t* DataMapInit<CFourWheelVehiclePhysics>(CFourWheelVehiclePhysics*)::dataDesc
 D datamap_t* DataMapInit<CFourWheelVehiclePhysics>(CFourWheelVehiclePhysics*)::nameHolder
 D datamap_t* DataMapInit<CFuncAreaPortalBase>(CFuncAreaPortalBase*)::dataDesc
 D datamap_t* DataMapInit<CFuncAreaPortalBase>(CFuncAreaPortalBase*)::nameHolder
 D datamap_t* DataMapInit<CFuncAreaPortalWindow>(CFuncAreaPortalWindow*)::dataDesc
 D datamap_t* DataMapInit<CFuncAreaPortalWindow>(CFuncAreaPortalWindow*)::nameHolder
 D datamap_t* DataMapInit<CFuncBrush>(CFuncBrush*)::dataDesc
 D datamap_t* DataMapInit<CFuncBrush>(CFuncBrush*)::nameHolder
 D datamap_t* DataMapInit<CFuncConveyor>(CFuncConveyor*)::dataDesc
 D datamap_t* DataMapInit<CFuncConveyor>(CFuncConveyor*)::nameHolder
 D datamap_t* DataMapInit<CFuncFlagAlertZone>(CFuncFlagAlertZone*)::dataDesc
 D datamap_t* DataMapInit<CFuncFlagAlertZone>(CFuncFlagAlertZone*)::nameHolder
 D datamap_t* DataMapInit<CFuncForceField>(CFuncForceField*)::dataDesc
 D datamap_t* DataMapInit<CFuncForceField>(CFuncForceField*)::nameHolder
 D datamap_t* DataMapInit<CFuncLadder>(CFuncLadder*)::dataDesc
 D datamap_t* DataMapInit<CFuncLadder>(CFuncLadder*)::nameHolder
 D datamap_t* DataMapInit<CFuncMonitor>(CFuncMonitor*)::dataDesc
 D datamap_t* DataMapInit<CFuncMonitor>(CFuncMonitor*)::nameHolder
 D datamap_t* DataMapInit<CFuncMoveLinear>(CFuncMoveLinear*)::dataDesc
 D datamap_t* DataMapInit<CFuncMoveLinear>(CFuncMoveLinear*)::nameHolder
 D datamap_t* DataMapInit<CFuncNavBlocker>(CFuncNavBlocker*)::dataDesc
 D datamap_t* DataMapInit<CFuncNavBlocker>(CFuncNavBlocker*)::nameHolder
 D datamap_t* DataMapInit<CFuncNavCost>(CFuncNavCost*)::dataDesc
 D datamap_t* DataMapInit<CFuncNavCost>(CFuncNavCost*)::nameHolder
 D datamap_t* DataMapInit<CFuncNavObstruction>(CFuncNavObstruction*)::dataDesc
 D datamap_t* DataMapInit<CFuncNavObstruction>(CFuncNavObstruction*)::nameHolder
 D datamap_t* DataMapInit<CFuncNavPrerequisite>(CFuncNavPrerequisite*)::dataDesc
 D datamap_t* DataMapInit<CFuncNavPrerequisite>(CFuncNavPrerequisite*)::nameHolder
 D datamap_t* DataMapInit<CFuncNoBuild>(CFuncNoBuild*)::dataDesc
 D datamap_t* DataMapInit<CFuncNoBuild>(CFuncNoBuild*)::nameHolder
 D datamap_t* DataMapInit<CFuncOccluder>(CFuncOccluder*)::dataDesc
 D datamap_t* DataMapInit<CFuncOccluder>(CFuncOccluder*)::nameHolder
 D datamap_t* DataMapInit<CFuncPasstimeGoal>(CFuncPasstimeGoal*)::dataDesc
 D datamap_t* DataMapInit<CFuncPasstimeGoal>(CFuncPasstimeGoal*)::nameHolder
 D datamap_t* DataMapInit<CFuncPasstimeGoalieZone>(CFuncPasstimeGoalieZone*)::dataDesc
 D datamap_t* DataMapInit<CFuncPasstimeGoalieZone>(CFuncPasstimeGoalieZone*)::nameHolder
 D datamap_t* DataMapInit<CFuncPasstimeNoBallZone>(CFuncPasstimeNoBallZone*)::dataDesc
 D datamap_t* DataMapInit<CFuncPasstimeNoBallZone>(CFuncPasstimeNoBallZone*)::nameHolder
 D datamap_t* DataMapInit<CFuncPlat>(CFuncPlat*)::dataDesc
 D datamap_t* DataMapInit<CFuncPlat>(CFuncPlat*)::nameHolder
 D datamap_t* DataMapInit<CFuncPlatRot>(CFuncPlatRot*)::dataDesc
 D datamap_t* DataMapInit<CFuncPlatRot>(CFuncPlatRot*)::nameHolder
 D datamap_t* DataMapInit<CFuncReflectiveGlass>(CFuncReflectiveGlass*)::dataDesc
 D datamap_t* DataMapInit<CFuncReflectiveGlass>(CFuncReflectiveGlass*)::nameHolder
 D datamap_t* DataMapInit<CFuncRespawnFlagZone>(CFuncRespawnFlagZone*)::dataDesc
 D datamap_t* DataMapInit<CFuncRespawnFlagZone>(CFuncRespawnFlagZone*)::nameHolder
 D datamap_t* DataMapInit<CFuncRespawnRoom>(CFuncRespawnRoom*)::dataDesc
 D datamap_t* DataMapInit<CFuncRespawnRoom>(CFuncRespawnRoom*)::nameHolder
 D datamap_t* DataMapInit<CFuncRespawnRoomVisualizer>(CFuncRespawnRoomVisualizer*)::dataDesc
 D datamap_t* DataMapInit<CFuncRespawnRoomVisualizer>(CFuncRespawnRoomVisualizer*)::nameHolder
 D datamap_t* DataMapInit<CFuncRotating>(CFuncRotating*)::dataDesc
 D datamap_t* DataMapInit<CFuncRotating>(CFuncRotating*)::nameHolder
 D datamap_t* DataMapInit<CFuncSmokeVolume>(CFuncSmokeVolume*)::dataDesc
 D datamap_t* DataMapInit<CFuncSmokeVolume>(CFuncSmokeVolume*)::nameHolder
 D datamap_t* DataMapInit<CFuncSuggestedBuild>(CFuncSuggestedBuild*)::dataDesc
 D datamap_t* DataMapInit<CFuncSuggestedBuild>(CFuncSuggestedBuild*)::nameHolder
 D datamap_t* DataMapInit<CFuncTankTrain>(CFuncTankTrain*)::dataDesc
 D datamap_t* DataMapInit<CFuncTankTrain>(CFuncTankTrain*)::nameHolder
 D datamap_t* DataMapInit<CFuncTrackAuto>(CFuncTrackAuto*)::dataDesc
 D datamap_t* DataMapInit<CFuncTrackAuto>(CFuncTrackAuto*)::nameHolder
 D datamap_t* DataMapInit<CFuncTrackChange>(CFuncTrackChange*)::dataDesc
 D datamap_t* DataMapInit<CFuncTrackChange>(CFuncTrackChange*)::nameHolder
 D datamap_t* DataMapInit<CFuncTrackTrain>(CFuncTrackTrain*)::dataDesc
 D datamap_t* DataMapInit<CFuncTrackTrain>(CFuncTrackTrain*)::nameHolder
 D datamap_t* DataMapInit<CFuncTrain>(CFuncTrain*)::dataDesc
 D datamap_t* DataMapInit<CFuncTrain>(CFuncTrain*)::nameHolder
 D datamap_t* DataMapInit<CFuncTrainControls>(CFuncTrainControls*)::dataDesc
 D datamap_t* DataMapInit<CFuncTrainControls>(CFuncTrainControls*)::nameHolder
 D datamap_t* DataMapInit<CFuncVPhysicsClip>(CFuncVPhysicsClip*)::dataDesc
 D datamap_t* DataMapInit<CFuncVPhysicsClip>(CFuncVPhysicsClip*)::nameHolder
 D datamap_t* DataMapInit<CFuncVehicleClip>(CFuncVehicleClip*)::dataDesc
 D datamap_t* DataMapInit<CFuncVehicleClip>(CFuncVehicleClip*)::nameHolder
 D datamap_t* DataMapInit<CFuncWall>(CFuncWall*)::dataDesc
 D datamap_t* DataMapInit<CFuncWall>(CFuncWall*)::nameHolder
 D datamap_t* DataMapInit<CFuncWallToggle>(CFuncWallToggle*)::dataDesc
 D datamap_t* DataMapInit<CFuncWallToggle>(CFuncWallToggle*)::nameHolder
 D datamap_t* DataMapInit<CFunc_Dust>(CFunc_Dust*)::dataDesc
 D datamap_t* DataMapInit<CFunc_Dust>(CFunc_Dust*)::nameHolder
 D datamap_t* DataMapInit<CFunc_LOD>(CFunc_LOD*)::dataDesc
 D datamap_t* DataMapInit<CFunc_LOD>(CFunc_LOD*)::nameHolder
 D datamap_t* DataMapInit<CGameEnd>(CGameEnd*)::dataDesc
 D datamap_t* DataMapInit<CGameEnd>(CGameEnd*)::nameHolder
 D datamap_t* DataMapInit<CGameGibManager>(CGameGibManager*)::dataDesc
 D datamap_t* DataMapInit<CGameGibManager>(CGameGibManager*)::nameHolder
 D datamap_t* DataMapInit<CGamePlayerEquip>(CGamePlayerEquip*)::dataDesc
 D datamap_t* DataMapInit<CGamePlayerEquip>(CGamePlayerEquip*)::nameHolder
 D datamap_t* DataMapInit<CGamePlayerZone>(CGamePlayerZone*)::dataDesc
 D datamap_t* DataMapInit<CGamePlayerZone>(CGamePlayerZone*)::nameHolder
 D datamap_t* DataMapInit<CGameScore>(CGameScore*)::dataDesc
 D datamap_t* DataMapInit<CGameScore>(CGameScore*)::nameHolder
 D datamap_t* DataMapInit<CGameText>(CGameText*)::dataDesc
 D datamap_t* DataMapInit<CGameText>(CGameText*)::nameHolder
 D datamap_t* DataMapInit<CGameUI>(CGameUI*)::dataDesc
 D datamap_t* DataMapInit<CGameUI>(CGameUI*)::nameHolder
 D datamap_t* DataMapInit<CGameWeaponManager>(CGameWeaponManager*)::dataDesc
 D datamap_t* DataMapInit<CGameWeaponManager>(CGameWeaponManager*)::nameHolder
 D datamap_t* DataMapInit<CGenericActor>(CGenericActor*)::dataDesc
 D datamap_t* DataMapInit<CGenericActor>(CGenericActor*)::nameHolder
 D datamap_t* DataMapInit<CGib>(CGib*)::dataDesc
 D datamap_t* DataMapInit<CGib>(CGib*)::nameHolder
 D datamap_t* DataMapInit<CGibShooter>(CGibShooter*)::dataDesc
 D datamap_t* DataMapInit<CGibShooter>(CGibShooter*)::nameHolder
 D datamap_t* DataMapInit<CGlobalState>(CGlobalState*)::dataDesc
 D datamap_t* DataMapInit<CGlobalState>(CGlobalState*)::nameHolder
 D datamap_t* DataMapInit<CGunTarget>(CGunTarget*)::dataDesc
 D datamap_t* DataMapInit<CGunTarget>(CGunTarget*)::nameHolder
 D datamap_t* DataMapInit<CHalloweenGiftPickup>(CHalloweenGiftPickup*)::dataDesc
 D datamap_t* DataMapInit<CHalloweenGiftPickup>(CHalloweenGiftPickup*)::nameHolder
 D datamap_t* DataMapInit<CHalloweenPickup>(CHalloweenPickup*)::dataDesc
 D datamap_t* DataMapInit<CHalloweenPickup>(CHalloweenPickup*)::nameHolder
 D datamap_t* DataMapInit<CHightower_TeleportVortex>(CHightower_TeleportVortex*)::dataDesc
 D datamap_t* DataMapInit<CHightower_TeleportVortex>(CHightower_TeleportVortex*)::nameHolder
 D datamap_t* DataMapInit<CInfoCameraLink>(CInfoCameraLink*)::dataDesc
 D datamap_t* DataMapInit<CInfoCameraLink>(CInfoCameraLink*)::nameHolder
 D datamap_t* DataMapInit<CInfoLightingRelative>(CInfoLightingRelative*)::dataDesc
 D datamap_t* DataMapInit<CInfoLightingRelative>(CInfoLightingRelative*)::nameHolder
 D datamap_t* DataMapInit<CInfoOverlayAccessor>(CInfoOverlayAccessor*)::dataDesc
 D datamap_t* DataMapInit<CInfoOverlayAccessor>(CInfoOverlayAccessor*)::nameHolder
 D datamap_t* DataMapInit<CInstancedSceneEntity>(CInstancedSceneEntity*)::dataDesc
 D datamap_t* DataMapInit<CInstancedSceneEntity>(CInstancedSceneEntity*)::nameHolder
 D datamap_t* DataMapInit<CIntroViewpoint>(CIntroViewpoint*)::dataDesc
 D datamap_t* DataMapInit<CIntroViewpoint>(CIntroViewpoint*)::nameHolder
 D datamap_t* DataMapInit<CItem>(CItem*)::dataDesc
 D datamap_t* DataMapInit<CItem>(CItem*)::nameHolder
 D datamap_t* DataMapInit<CItemSoda>(CItemSoda*)::dataDesc
 D datamap_t* DataMapInit<CItemSoda>(CItemSoda*)::nameHolder
 D datamap_t* DataMapInit<CKeepUpright>(CKeepUpright*)::dataDesc
 D datamap_t* DataMapInit<CKeepUpright>(CKeepUpright*)::nameHolder
 D datamap_t* DataMapInit<CKothLogic>(CKothLogic*)::dataDesc
 D datamap_t* DataMapInit<CKothLogic>(CKothLogic*)::nameHolder
 D datamap_t* DataMapInit<CLaserDot>(CLaserDot*)::dataDesc
 D datamap_t* DataMapInit<CLaserDot>(CLaserDot*)::nameHolder
 D datamap_t* DataMapInit<CLight>(CLight*)::dataDesc
 D datamap_t* DataMapInit<CLight>(CLight*)::nameHolder
 D datamap_t* DataMapInit<CLightGlow>(CLightGlow*)::dataDesc
 D datamap_t* DataMapInit<CLightGlow>(CLightGlow*)::nameHolder
 D datamap_t* DataMapInit<CLogicActiveAutosave>(CLogicActiveAutosave*)::dataDesc
 D datamap_t* DataMapInit<CLogicActiveAutosave>(CLogicActiveAutosave*)::nameHolder
 D datamap_t* DataMapInit<CLogicAuto>(CLogicAuto*)::dataDesc
 D datamap_t* DataMapInit<CLogicAuto>(CLogicAuto*)::nameHolder
 D datamap_t* DataMapInit<CLogicAutosave>(CLogicAutosave*)::dataDesc
 D datamap_t* DataMapInit<CLogicAutosave>(CLogicAutosave*)::nameHolder
 D datamap_t* DataMapInit<CLogicBranch>(CLogicBranch*)::dataDesc
 D datamap_t* DataMapInit<CLogicBranch>(CLogicBranch*)::nameHolder
 D datamap_t* DataMapInit<CLogicBranchList>(CLogicBranchList*)::dataDesc
 D datamap_t* DataMapInit<CLogicBranchList>(CLogicBranchList*)::nameHolder
 D datamap_t* DataMapInit<CLogicCase>(CLogicCase*)::dataDesc
 D datamap_t* DataMapInit<CLogicCase>(CLogicCase*)::nameHolder
 D datamap_t* DataMapInit<CLogicCollisionPair>(CLogicCollisionPair*)::dataDesc
 D datamap_t* DataMapInit<CLogicCollisionPair>(CLogicCollisionPair*)::nameHolder
 D datamap_t* DataMapInit<CLogicCompare>(CLogicCompare*)::dataDesc
 D datamap_t* DataMapInit<CLogicCompare>(CLogicCompare*)::nameHolder
 D datamap_t* DataMapInit<CLogicCompareInteger>(CLogicCompareInteger*)::dataDesc
 D datamap_t* DataMapInit<CLogicCompareInteger>(CLogicCompareInteger*)::nameHolder
 D datamap_t* DataMapInit<CLogicLineToEntity>(CLogicLineToEntity*)::dataDesc
 D datamap_t* DataMapInit<CLogicLineToEntity>(CLogicLineToEntity*)::nameHolder
 D datamap_t* DataMapInit<CLogicMannPower>(CLogicMannPower*)::dataDesc
 D datamap_t* DataMapInit<CLogicMannPower>(CLogicMannPower*)::nameHolder
 D datamap_t* DataMapInit<CLogicMeasureMovement>(CLogicMeasureMovement*)::dataDesc
 D datamap_t* DataMapInit<CLogicMeasureMovement>(CLogicMeasureMovement*)::nameHolder
 D datamap_t* DataMapInit<CLogicNavigation>(CLogicNavigation*)::dataDesc
 D datamap_t* DataMapInit<CLogicNavigation>(CLogicNavigation*)::nameHolder
 D datamap_t* DataMapInit<CLogicOnHoliday>(CLogicOnHoliday*)::dataDesc
 D datamap_t* DataMapInit<CLogicOnHoliday>(CLogicOnHoliday*)::nameHolder
 D datamap_t* DataMapInit<CLogicRelay>(CLogicRelay*)::dataDesc
 D datamap_t* DataMapInit<CLogicRelay>(CLogicRelay*)::nameHolder
 D datamap_t* DataMapInit<CMannVsMachineLogic>(CMannVsMachineLogic*)::dataDesc
 D datamap_t* DataMapInit<CMannVsMachineLogic>(CMannVsMachineLogic*)::nameHolder
 D datamap_t* DataMapInit<CMaterialModifyControl>(CMaterialModifyControl*)::dataDesc
 D datamap_t* DataMapInit<CMaterialModifyControl>(CMaterialModifyControl*)::nameHolder
 D datamap_t* DataMapInit<CMathColorBlend>(CMathColorBlend*)::dataDesc
 D datamap_t* DataMapInit<CMathColorBlend>(CMathColorBlend*)::nameHolder
 D datamap_t* DataMapInit<CMathCounter>(CMathCounter*)::dataDesc
 D datamap_t* DataMapInit<CMathCounter>(CMathCounter*)::nameHolder
 D datamap_t* DataMapInit<CMathRemap>(CMathRemap*)::dataDesc
 D datamap_t* DataMapInit<CMathRemap>(CMathRemap*)::nameHolder
 D datamap_t* DataMapInit<CMessage>(CMessage*)::dataDesc
 D datamap_t* DataMapInit<CMessage>(CMessage*)::nameHolder
 D datamap_t* DataMapInit<CMessageEntity>(CMessageEntity*)::dataDesc
 D datamap_t* DataMapInit<CMessageEntity>(CMessageEntity*)::nameHolder
 D datamap_t* DataMapInit<CMomentaryRotButton>(CMomentaryRotButton*)::dataDesc
 D datamap_t* DataMapInit<CMomentaryRotButton>(CMomentaryRotButton*)::nameHolder
 D datamap_t* DataMapInit<CMonsterResource>(CMonsterResource*)::dataDesc
 D datamap_t* DataMapInit<CMonsterResource>(CMonsterResource*)::nameHolder
 D datamap_t* DataMapInit<CMotorController>(CMotorController*)::dataDesc
 D datamap_t* DataMapInit<CMotorController>(CMotorController*)::nameHolder
 D datamap_t* DataMapInit<CMovementSpeedMod>(CMovementSpeedMod*)::dataDesc
 D datamap_t* DataMapInit<CMovementSpeedMod>(CMovementSpeedMod*)::nameHolder
 D datamap_t* DataMapInit<CMultiDamage>(CMultiDamage*)::dataDesc
 D datamap_t* DataMapInit<CMultiDamage>(CMultiDamage*)::nameHolder
 D datamap_t* DataMapInit<CMultiSource>(CMultiSource*)::dataDesc
 D datamap_t* DataMapInit<CMultiSource>(CMultiSource*)::nameHolder
 D datamap_t* DataMapInit<CNPCMaker>(CNPCMaker*)::dataDesc
 D datamap_t* DataMapInit<CNPCMaker>(CNPCMaker*)::nameHolder
 D datamap_t* DataMapInit<CNPCSpawnDestination>(CNPCSpawnDestination*)::dataDesc
 D datamap_t* DataMapInit<CNPCSpawnDestination>(CNPCSpawnDestination*)::nameHolder
 D datamap_t* DataMapInit<CNPC_Furniture>(CNPC_Furniture*)::dataDesc
 D datamap_t* DataMapInit<CNPC_Furniture>(CNPC_Furniture*)::nameHolder
 D datamap_t* DataMapInit<CNPC_VehicleDriver>(CNPC_VehicleDriver*)::dataDesc
 D datamap_t* DataMapInit<CNPC_VehicleDriver>(CNPC_VehicleDriver*)::nameHolder
 D datamap_t* DataMapInit<CNodeEnt>(CNodeEnt*)::dataDesc
 D datamap_t* DataMapInit<CNodeEnt>(CNodeEnt*)::nameHolder
 D datamap_t* DataMapInit<CObjectCartDispenser>(CObjectCartDispenser*)::dataDesc
 D datamap_t* DataMapInit<CObjectCartDispenser>(CObjectCartDispenser*)::nameHolder
 D datamap_t* DataMapInit<CObjectDispenser>(CObjectDispenser*)::dataDesc
 D datamap_t* DataMapInit<CObjectDispenser>(CObjectDispenser*)::nameHolder
 D datamap_t* DataMapInit<CObjectSapper>(CObjectSapper*)::dataDesc
 D datamap_t* DataMapInit<CObjectSapper>(CObjectSapper*)::nameHolder
 D datamap_t* DataMapInit<CObjectSentrygun>(CObjectSentrygun*)::dataDesc
 D datamap_t* DataMapInit<CObjectSentrygun>(CObjectSentrygun*)::nameHolder
 D datamap_t* DataMapInit<CObjectTeleporter>(CObjectTeleporter*)::dataDesc
 D datamap_t* DataMapInit<CObjectTeleporter>(CObjectTeleporter*)::nameHolder
 D datamap_t* DataMapInit<CObserverPoint>(CObserverPoint*)::dataDesc
 D datamap_t* DataMapInit<CObserverPoint>(CObserverPoint*)::nameHolder
 D datamap_t* DataMapInit<COrnamentProp>(COrnamentProp*)::dataDesc
 D datamap_t* DataMapInit<COrnamentProp>(COrnamentProp*)::nameHolder
 D datamap_t* DataMapInit<CParticleFire>(CParticleFire*)::dataDesc
 D datamap_t* DataMapInit<CParticleFire>(CParticleFire*)::nameHolder
 D datamap_t* DataMapInit<CParticleLight>(CParticleLight*)::dataDesc
 D datamap_t* DataMapInit<CParticleLight>(CParticleLight*)::nameHolder
 D datamap_t* DataMapInit<CParticlePerformanceMonitor>(CParticlePerformanceMonitor*)::dataDesc
 D datamap_t* DataMapInit<CParticlePerformanceMonitor>(CParticlePerformanceMonitor*)::nameHolder
 D datamap_t* DataMapInit<CParticleSystem>(CParticleSystem*)::dataDesc
 D datamap_t* DataMapInit<CParticleSystem>(CParticleSystem*)::nameHolder
 D datamap_t* DataMapInit<CPassengerInfo>(CPassengerInfo*)::dataDesc
 D datamap_t* DataMapInit<CPassengerInfo>(CPassengerInfo*)::nameHolder
 D datamap_t* DataMapInit<CPasstimeBallSpawn>(CPasstimeBallSpawn*)::dataDesc
 D datamap_t* DataMapInit<CPasstimeBallSpawn>(CPasstimeBallSpawn*)::nameHolder
 D datamap_t* DataMapInit<CPathCorner>(CPathCorner*)::dataDesc
 D datamap_t* DataMapInit<CPathCorner>(CPathCorner*)::nameHolder
 D datamap_t* DataMapInit<CPathKeyFrame>(CPathKeyFrame*)::dataDesc
 D datamap_t* DataMapInit<CPathKeyFrame>(CPathKeyFrame*)::nameHolder
 D datamap_t* DataMapInit<CPathTrack>(CPathTrack*)::dataDesc
 D datamap_t* DataMapInit<CPathTrack>(CPathTrack*)::nameHolder
 D datamap_t* DataMapInit<CPhysBox>(CPhysBox*)::dataDesc
 D datamap_t* DataMapInit<CPhysBox>(CPhysBox*)::nameHolder
 D datamap_t* DataMapInit<CPhysBoxMultiplayer>(CPhysBoxMultiplayer*)::dataDesc
 D datamap_t* DataMapInit<CPhysBoxMultiplayer>(CPhysBoxMultiplayer*)::nameHolder
 D datamap_t* DataMapInit<CPhysConstraint>(CPhysConstraint*)::dataDesc
 D datamap_t* DataMapInit<CPhysConstraint>(CPhysConstraint*)::nameHolder
 D datamap_t* DataMapInit<CPhysConstraintSystem>(CPhysConstraintSystem*)::dataDesc
 D datamap_t* DataMapInit<CPhysConstraintSystem>(CPhysConstraintSystem*)::nameHolder
 D datamap_t* DataMapInit<CPhysConvert>(CPhysConvert*)::dataDesc
 D datamap_t* DataMapInit<CPhysConvert>(CPhysConvert*)::nameHolder
 D datamap_t* DataMapInit<CPhysExplosion>(CPhysExplosion*)::dataDesc
 D datamap_t* DataMapInit<CPhysExplosion>(CPhysExplosion*)::nameHolder
 D datamap_t* DataMapInit<CPhysForce>(CPhysForce*)::dataDesc
 D datamap_t* DataMapInit<CPhysForce>(CPhysForce*)::nameHolder
 D datamap_t* DataMapInit<CPhysHinge>(CPhysHinge*)::dataDesc
 D datamap_t* DataMapInit<CPhysHinge>(CPhysHinge*)::nameHolder
 D datamap_t* DataMapInit<CPhysImpact>(CPhysImpact*)::dataDesc
 D datamap_t* DataMapInit<CPhysImpact>(CPhysImpact*)::nameHolder
 D datamap_t* DataMapInit<CPhysLength>(CPhysLength*)::dataDesc
 D datamap_t* DataMapInit<CPhysLength>(CPhysLength*)::nameHolder
 D datamap_t* DataMapInit<CPhysMagnet>(CPhysMagnet*)::dataDesc
 D datamap_t* DataMapInit<CPhysMagnet>(CPhysMagnet*)::nameHolder
 D datamap_t* DataMapInit<CPhysMotor>(CPhysMotor*)::dataDesc
 D datamap_t* DataMapInit<CPhysMotor>(CPhysMotor*)::nameHolder
 D datamap_t* DataMapInit<CPhysPulley>(CPhysPulley*)::dataDesc
 D datamap_t* DataMapInit<CPhysPulley>(CPhysPulley*)::nameHolder
 D datamap_t* DataMapInit<CPhysSlideConstraint>(CPhysSlideConstraint*)::dataDesc
 D datamap_t* DataMapInit<CPhysSlideConstraint>(CPhysSlideConstraint*)::nameHolder
 D datamap_t* DataMapInit<CPhysThruster>(CPhysThruster*)::dataDesc
 D datamap_t* DataMapInit<CPhysThruster>(CPhysThruster*)::nameHolder
 D datamap_t* DataMapInit<CPhysTorque>(CPhysTorque*)::dataDesc
 D datamap_t* DataMapInit<CPhysTorque>(CPhysTorque*)::nameHolder
 D datamap_t* DataMapInit<CPhysicsCannister>(CPhysicsCannister*)::dataDesc
 D datamap_t* DataMapInit<CPhysicsCannister>(CPhysicsCannister*)::nameHolder
 D datamap_t* DataMapInit<CPhysicsEntitySolver>(CPhysicsEntitySolver*)::dataDesc
 D datamap_t* DataMapInit<CPhysicsEntitySolver>(CPhysicsEntitySolver*)::nameHolder
 D datamap_t* DataMapInit<CPhysicsNPCSolver>(CPhysicsNPCSolver*)::dataDesc
 D datamap_t* DataMapInit<CPhysicsNPCSolver>(CPhysicsNPCSolver*)::nameHolder
 D datamap_t* DataMapInit<CPhysicsProp>(CPhysicsProp*)::dataDesc
 D datamap_t* DataMapInit<CPhysicsProp>(CPhysicsProp*)::nameHolder
 D datamap_t* DataMapInit<CPhysicsPropMultiplayer>(CPhysicsPropMultiplayer*)::dataDesc
 D datamap_t* DataMapInit<CPhysicsPropMultiplayer>(CPhysicsPropMultiplayer*)::nameHolder
 D datamap_t* DataMapInit<CPhysicsPropRespawnable>(CPhysicsPropRespawnable*)::dataDesc
 D datamap_t* DataMapInit<CPhysicsPropRespawnable>(CPhysicsPropRespawnable*)::nameHolder
 D datamap_t* DataMapInit<CPhysicsShake>(CPhysicsShake*)::dataDesc
 D datamap_t* DataMapInit<CPhysicsShake>(CPhysicsShake*)::nameHolder
 D datamap_t* DataMapInit<CPhysicsSpring>(CPhysicsSpring*)::dataDesc
 D datamap_t* DataMapInit<CPhysicsSpring>(CPhysicsSpring*)::nameHolder
 D datamap_t* DataMapInit<CPhysicsWind>(CPhysicsWind*)::dataDesc
 D datamap_t* DataMapInit<CPhysicsWind>(CPhysicsWind*)::nameHolder
 D datamap_t* DataMapInit<CPhysicsWire>(CPhysicsWire*)::dataDesc
 D datamap_t* DataMapInit<CPhysicsWire>(CPhysicsWire*)::nameHolder
 D datamap_t* DataMapInit<CPlasma>(CPlasma*)::dataDesc
 D datamap_t* DataMapInit<CPlasma>(CPlasma*)::nameHolder
 D datamap_t* DataMapInit<CPlayerDestructionDispenser>(CPlayerDestructionDispenser*)::dataDesc
 D datamap_t* DataMapInit<CPlayerDestructionDispenser>(CPlayerDestructionDispenser*)::nameHolder
 D datamap_t* DataMapInit<CPlayerLocalData>(CPlayerLocalData*)::dataDesc
 D datamap_t* DataMapInit<CPlayerLocalData>(CPlayerLocalData*)::nameHolder
 D datamap_t* DataMapInit<CPlayerResource>(CPlayerResource*)::dataDesc
 D datamap_t* DataMapInit<CPlayerResource>(CPlayerResource*)::nameHolder
 D datamap_t* DataMapInit<CPlayerState>(CPlayerState*)::dataDesc
 D datamap_t* DataMapInit<CPlayerState>(CPlayerState*)::nameHolder
 D datamap_t* DataMapInit<CPointAngleSensor>(CPointAngleSensor*)::dataDesc
 D datamap_t* DataMapInit<CPointAngleSensor>(CPointAngleSensor*)::nameHolder
 D datamap_t* DataMapInit<CPointAngularVelocitySensor>(CPointAngularVelocitySensor*)::dataDesc
 D datamap_t* DataMapInit<CPointAngularVelocitySensor>(CPointAngularVelocitySensor*)::nameHolder
 D datamap_t* DataMapInit<CPointBonusMapsAccessor>(CPointBonusMapsAccessor*)::dataDesc
 D datamap_t* DataMapInit<CPointBonusMapsAccessor>(CPointBonusMapsAccessor*)::nameHolder
 D datamap_t* DataMapInit<CPointCamera>(CPointCamera*)::dataDesc
 D datamap_t* DataMapInit<CPointCamera>(CPointCamera*)::nameHolder
 D datamap_t* DataMapInit<CPointClientCommand>(CPointClientCommand*)::dataDesc
 D datamap_t* DataMapInit<CPointClientCommand>(CPointClientCommand*)::nameHolder
 D datamap_t* DataMapInit<CPointCommentaryNode>(CPointCommentaryNode*)::dataDesc
 D datamap_t* DataMapInit<CPointCommentaryNode>(CPointCommentaryNode*)::nameHolder
 D datamap_t* DataMapInit<CPointDevShotCamera>(CPointDevShotCamera*)::dataDesc
 D datamap_t* DataMapInit<CPointDevShotCamera>(CPointDevShotCamera*)::nameHolder
 D datamap_t* DataMapInit<CPointGamestatsCounter>(CPointGamestatsCounter*)::dataDesc
 D datamap_t* DataMapInit<CPointGamestatsCounter>(CPointGamestatsCounter*)::nameHolder
 D datamap_t* DataMapInit<CPointHurt>(CPointHurt*)::dataDesc
 D datamap_t* DataMapInit<CPointHurt>(CPointHurt*)::nameHolder
 D datamap_t* DataMapInit<CPointNavInterface>(CPointNavInterface*)::dataDesc
 D datamap_t* DataMapInit<CPointNavInterface>(CPointNavInterface*)::nameHolder
 D datamap_t* DataMapInit<CPointPlayerMoveConstraint>(CPointPlayerMoveConstraint*)::dataDesc
 D datamap_t* DataMapInit<CPointPlayerMoveConstraint>(CPointPlayerMoveConstraint*)::nameHolder
 D datamap_t* DataMapInit<CPointPopulatorInterface>(CPointPopulatorInterface*)::dataDesc
 D datamap_t* DataMapInit<CPointPopulatorInterface>(CPointPopulatorInterface*)::nameHolder
 D datamap_t* DataMapInit<CPointProximitySensor>(CPointProximitySensor*)::dataDesc
 D datamap_t* DataMapInit<CPointProximitySensor>(CPointProximitySensor*)::nameHolder
 D datamap_t* DataMapInit<CPointPush>(CPointPush*)::dataDesc
 D datamap_t* DataMapInit<CPointPush>(CPointPush*)::nameHolder
 D datamap_t* DataMapInit<CPointServerCommand>(CPointServerCommand*)::dataDesc
 D datamap_t* DataMapInit<CPointServerCommand>(CPointServerCommand*)::nameHolder
 D datamap_t* DataMapInit<CPointSpotlight>(CPointSpotlight*)::dataDesc
 D datamap_t* DataMapInit<CPointSpotlight>(CPointSpotlight*)::nameHolder
 D datamap_t* DataMapInit<CPointTeleport>(CPointTeleport*)::dataDesc
 D datamap_t* DataMapInit<CPointTeleport>(CPointTeleport*)::nameHolder
 D datamap_t* DataMapInit<CPointTemplate>(CPointTemplate*)::dataDesc
 D datamap_t* DataMapInit<CPointTemplate>(CPointTemplate*)::nameHolder
 D datamap_t* DataMapInit<CPointVelocitySensor>(CPointVelocitySensor*)::dataDesc
 D datamap_t* DataMapInit<CPointVelocitySensor>(CPointVelocitySensor*)::nameHolder
 D datamap_t* DataMapInit<CPopulationManager>(CPopulationManager*)::dataDesc
 D datamap_t* DataMapInit<CPopulationManager>(CPopulationManager*)::nameHolder
 D datamap_t* DataMapInit<CPoseController>(CPoseController*)::dataDesc
 D datamap_t* DataMapInit<CPoseController>(CPoseController*)::nameHolder
 D datamap_t* DataMapInit<CPrecipitation>(CPrecipitation*)::dataDesc
 D datamap_t* DataMapInit<CPrecipitation>(CPrecipitation*)::nameHolder
 D datamap_t* DataMapInit<CProjectedDecal>(CProjectedDecal*)::dataDesc
 D datamap_t* DataMapInit<CProjectedDecal>(CProjectedDecal*)::nameHolder
 D datamap_t* DataMapInit<CPropDoorRotating>(CPropDoorRotating*)::dataDesc
 D datamap_t* DataMapInit<CPropDoorRotating>(CPropDoorRotating*)::nameHolder
 D datamap_t* DataMapInit<CPropSoccerBall>(CPropSoccerBall*)::dataDesc
 D datamap_t* DataMapInit<CPropSoccerBall>(CPropSoccerBall*)::nameHolder
 D datamap_t* DataMapInit<CPropVehicle>(CPropVehicle*)::dataDesc
 D datamap_t* DataMapInit<CPropVehicle>(CPropVehicle*)::nameHolder
 D datamap_t* DataMapInit<CPropVehicleDriveable>(CPropVehicleDriveable*)::dataDesc
 D datamap_t* DataMapInit<CPropVehicleDriveable>(CPropVehicleDriveable*)::nameHolder
 D datamap_t* DataMapInit<CRagdollBoogie>(CRagdollBoogie*)::dataDesc
 D datamap_t* DataMapInit<CRagdollBoogie>(CRagdollBoogie*)::nameHolder
 D datamap_t* DataMapInit<CRagdollConstraint>(CRagdollConstraint*)::dataDesc
 D datamap_t* DataMapInit<CRagdollConstraint>(CRagdollConstraint*)::nameHolder
 D datamap_t* DataMapInit<CRagdollMagnet>(CRagdollMagnet*)::dataDesc
 D datamap_t* DataMapInit<CRagdollMagnet>(CRagdollMagnet*)::nameHolder
 D datamap_t* DataMapInit<CRagdollManager>(CRagdollManager*)::dataDesc
 D datamap_t* DataMapInit<CRagdollManager>(CRagdollManager*)::nameHolder
 D datamap_t* DataMapInit<CRagdollProp>(CRagdollProp*)::dataDesc
 D datamap_t* DataMapInit<CRagdollProp>(CRagdollProp*)::nameHolder
 D datamap_t* DataMapInit<CRagdollPropAttached>(CRagdollPropAttached*)::dataDesc
 D datamap_t* DataMapInit<CRagdollPropAttached>(CRagdollPropAttached*)::nameHolder
 D datamap_t* DataMapInit<CRallyPoint>(CRallyPoint*)::dataDesc
 D datamap_t* DataMapInit<CRallyPoint>(CRallyPoint*)::nameHolder
 D datamap_t* DataMapInit<CRandSimTimer>(CRandSimTimer*)::dataDesc
 D datamap_t* DataMapInit<CRandSimTimer>(CRandSimTimer*)::nameHolder
 D datamap_t* DataMapInit<CRandStopwatch>(CRandStopwatch*)::dataDesc
 D datamap_t* DataMapInit<CRandStopwatch>(CRandStopwatch*)::nameHolder
 D datamap_t* DataMapInit<CRegenerateZone>(CRegenerateZone*)::dataDesc
 D datamap_t* DataMapInit<CRegenerateZone>(CRegenerateZone*)::nameHolder
 D datamap_t* DataMapInit<CRevertSaved>(CRevertSaved*)::dataDesc
 D datamap_t* DataMapInit<CRevertSaved>(CRevertSaved*)::nameHolder
 D datamap_t* DataMapInit<CRobotDestructionVaultTrigger>(CRobotDestructionVaultTrigger*)::dataDesc
 D datamap_t* DataMapInit<CRobotDestructionVaultTrigger>(CRobotDestructionVaultTrigger*)::nameHolder
 D datamap_t* DataMapInit<CRobotDispenser>(CRobotDispenser*)::dataDesc
 D datamap_t* DataMapInit<CRobotDispenser>(CRobotDispenser*)::nameHolder
 D datamap_t* DataMapInit<CRopeAnchor>(CRopeAnchor*)::dataDesc
 D datamap_t* DataMapInit<CRopeAnchor>(CRopeAnchor*)::nameHolder
 D datamap_t* DataMapInit<CRopeKeyframe>(CRopeKeyframe*)::dataDesc
 D datamap_t* DataMapInit<CRopeKeyframe>(CRopeKeyframe*)::nameHolder
 D datamap_t* DataMapInit<CRotDoor>(CRotDoor*)::dataDesc
 D datamap_t* DataMapInit<CRotDoor>(CRotDoor*)::nameHolder
 D datamap_t* DataMapInit<CRotorWashShooter>(CRotorWashShooter*)::dataDesc
 D datamap_t* DataMapInit<CRotorWashShooter>(CRotorWashShooter*)::nameHolder
 D datamap_t* DataMapInit<CRuleEntity>(CRuleEntity*)::dataDesc
 D datamap_t* DataMapInit<CRuleEntity>(CRuleEntity*)::nameHolder
 D datamap_t* DataMapInit<CRulePointEntity>(CRulePointEntity*)::dataDesc
 D datamap_t* DataMapInit<CRulePointEntity>(CRulePointEntity*)::nameHolder
 D datamap_t* DataMapInit<CSceneEntity>(CSceneEntity*)::dataDesc
 D datamap_t* DataMapInit<CSceneEntity>(CSceneEntity*)::nameHolder
 D datamap_t* DataMapInit<CSceneListManager>(CSceneListManager*)::dataDesc
 D datamap_t* DataMapInit<CSceneListManager>(CSceneListManager*)::nameHolder
 D datamap_t* DataMapInit<CSceneManager>(CSceneManager*)::dataDesc
 D datamap_t* DataMapInit<CSceneManager>(CSceneManager*)::nameHolder
 D datamap_t* DataMapInit<CScriptedTarget>(CScriptedTarget*)::dataDesc
 D datamap_t* DataMapInit<CScriptedTarget>(CScriptedTarget*)::nameHolder
 D datamap_t* DataMapInit<CServerNetworkProperty>(CServerNetworkProperty*)::dataDesc
 D datamap_t* DataMapInit<CServerNetworkProperty>(CServerNetworkProperty*)::nameHolder
 D datamap_t* DataMapInit<CShadowControl>(CShadowControl*)::dataDesc
 D datamap_t* DataMapInit<CShadowControl>(CShadowControl*)::nameHolder
 D datamap_t* DataMapInit<CSimTimer>(CSimTimer*)::dataDesc
 D datamap_t* DataMapInit<CSimTimer>(CSimTimer*)::nameHolder
 D datamap_t* DataMapInit<CSimpleSimTimer>(CSimpleSimTimer*)::dataDesc
 D datamap_t* DataMapInit<CSimpleSimTimer>(CSimpleSimTimer*)::nameHolder
 D datamap_t* DataMapInit<CSkyCamera>(CSkyCamera*)::dataDesc
 D datamap_t* DataMapInit<CSkyCamera>(CSkyCamera*)::nameHolder
 D datamap_t* DataMapInit<CSlideshowDisplay>(CSlideshowDisplay*)::dataDesc
 D datamap_t* DataMapInit<CSlideshowDisplay>(CSlideshowDisplay*)::nameHolder
 D datamap_t* DataMapInit<CSmokeStack>(CSmokeStack*)::dataDesc
 D datamap_t* DataMapInit<CSmokeStack>(CSmokeStack*)::nameHolder
 D datamap_t* DataMapInit<CSmokeStackLightInfo>(CSmokeStackLightInfo*)::dataDesc
 D datamap_t* DataMapInit<CSmokeStackLightInfo>(CSmokeStackLightInfo*)::nameHolder
 D datamap_t* DataMapInit<CSniperDot>(CSniperDot*)::dataDesc
 D datamap_t* DataMapInit<CSniperDot>(CSniperDot*)::nameHolder
 D datamap_t* DataMapInit<CSound>(CSound*)::dataDesc
 D datamap_t* DataMapInit<CSound>(CSound*)::nameHolder
 D datamap_t* DataMapInit<CSoundEnt>(CSoundEnt*)::dataDesc
 D datamap_t* DataMapInit<CSoundEnt>(CSoundEnt*)::nameHolder
 D datamap_t* DataMapInit<CSoundEnvelope>(CSoundEnvelope*)::dataDesc
 D datamap_t* DataMapInit<CSoundEnvelope>(CSoundEnvelope*)::nameHolder
 D datamap_t* DataMapInit<CSoundPatch>(CSoundPatch*)::dataDesc
 D datamap_t* DataMapInit<CSoundPatch>(CSoundPatch*)::nameHolder
 D datamap_t* DataMapInit<CSpellPickup>(CSpellPickup*)::dataDesc
 D datamap_t* DataMapInit<CSpellPickup>(CSpellPickup*)::nameHolder
 D datamap_t* DataMapInit<CSpotlightEnd>(CSpotlightEnd*)::dataDesc
 D datamap_t* DataMapInit<CSpotlightEnd>(CSpotlightEnd*)::nameHolder
 D datamap_t* DataMapInit<CSprite>(CSprite*)::dataDesc
 D datamap_t* DataMapInit<CSprite>(CSprite*)::nameHolder
 D datamap_t* DataMapInit<CSpriteTrail>(CSpriteTrail*)::dataDesc
 D datamap_t* DataMapInit<CSpriteTrail>(CSpriteTrail*)::nameHolder
 D datamap_t* DataMapInit<CSteamJet>(CSteamJet*)::dataDesc
 D datamap_t* DataMapInit<CSteamJet>(CSteamJet*)::nameHolder
 D datamap_t* DataMapInit<CStopwatch>(CStopwatch*)::dataDesc
 D datamap_t* DataMapInit<CStopwatch>(CStopwatch*)::nameHolder
 D datamap_t* DataMapInit<CStopwatchBase>(CStopwatchBase*)::dataDesc
 D datamap_t* DataMapInit<CStopwatchBase>(CStopwatchBase*)::nameHolder
 D datamap_t* DataMapInit<CStripWeapons>(CStripWeapons*)::dataDesc
 D datamap_t* DataMapInit<CStripWeapons>(CStripWeapons*)::nameHolder
 D datamap_t* DataMapInit<CSun>(CSun*)::dataDesc
 D datamap_t* DataMapInit<CSun>(CSun*)::nameHolder
 D datamap_t* DataMapInit<CTFAmmoPack>(CTFAmmoPack*)::dataDesc
 D datamap_t* DataMapInit<CTFAmmoPack>(CTFAmmoPack*)::nameHolder
 D datamap_t* DataMapInit<CTFBaseBoss>(CTFBaseBoss*)::dataDesc
 D datamap_t* DataMapInit<CTFBaseBoss>(CTFBaseBoss*)::nameHolder
 D datamap_t* DataMapInit<CTFBaseProjectile>(CTFBaseProjectile*)::dataDesc
 D datamap_t* DataMapInit<CTFBaseProjectile>(CTFBaseProjectile*)::nameHolder
 D datamap_t* DataMapInit<CTFBaseRocket>(CTFBaseRocket*)::dataDesc
 D datamap_t* DataMapInit<CTFBaseRocket>(CTFBaseRocket*)::nameHolder
 D datamap_t* DataMapInit<CTFBotActionPoint>(CTFBotActionPoint*)::dataDesc
 D datamap_t* DataMapInit<CTFBotActionPoint>(CTFBotActionPoint*)::nameHolder
 D datamap_t* DataMapInit<CTFBotController>(CTFBotController*)::dataDesc
 D datamap_t* DataMapInit<CTFBotController>(CTFBotController*)::nameHolder
 D datamap_t* DataMapInit<CTFBotGenerator>(CTFBotGenerator*)::dataDesc
 D datamap_t* DataMapInit<CTFBotGenerator>(CTFBotGenerator*)::nameHolder
 D datamap_t* DataMapInit<CTFBotHint>(CTFBotHint*)::dataDesc
 D datamap_t* DataMapInit<CTFBotHint>(CTFBotHint*)::nameHolder
 D datamap_t* DataMapInit<CTFBotHintEngineerNest>(CTFBotHintEngineerNest*)::dataDesc
 D datamap_t* DataMapInit<CTFBotHintEngineerNest>(CTFBotHintEngineerNest*)::nameHolder
 D datamap_t* DataMapInit<CTFBotHintSentrygun>(CTFBotHintSentrygun*)::dataDesc
 D datamap_t* DataMapInit<CTFBotHintSentrygun>(CTFBotHintSentrygun*)::nameHolder
 D datamap_t* DataMapInit<CTFBotHintTeleporterExit>(CTFBotHintTeleporterExit*)::dataDesc
 D datamap_t* DataMapInit<CTFBotHintTeleporterExit>(CTFBotHintTeleporterExit*)::nameHolder
 D datamap_t* DataMapInit<CTFBotProxy>(CTFBotProxy*)::dataDesc
 D datamap_t* DataMapInit<CTFBotProxy>(CTFBotProxy*)::nameHolder
 D datamap_t* DataMapInit<CTFBotRoster>(CTFBotRoster*)::dataDesc
 D datamap_t* DataMapInit<CTFBotRoster>(CTFBotRoster*)::nameHolder
 D datamap_t* DataMapInit<CTFChargedSMG>(CTFChargedSMG*)::dataDesc
 D datamap_t* DataMapInit<CTFChargedSMG>(CTFChargedSMG*)::nameHolder
 D datamap_t* DataMapInit<CTFCompoundBow>(CTFCompoundBow*)::dataDesc
 D datamap_t* DataMapInit<CTFCompoundBow>(CTFCompoundBow*)::nameHolder
 D datamap_t* DataMapInit<CTFCrossbow>(CTFCrossbow*)::dataDesc
 D datamap_t* DataMapInit<CTFCrossbow>(CTFCrossbow*)::nameHolder
 D datamap_t* DataMapInit<CTFFlameThrower>(CTFFlameThrower*)::dataDesc
 D datamap_t* DataMapInit<CTFFlameThrower>(CTFFlameThrower*)::nameHolder
 D datamap_t* DataMapInit<CTFFlareGun>(CTFFlareGun*)::dataDesc
 D datamap_t* DataMapInit<CTFFlareGun>(CTFFlareGun*)::nameHolder
 D datamap_t* DataMapInit<CTFForceRespawn>(CTFForceRespawn*)::dataDesc
 D datamap_t* DataMapInit<CTFForceRespawn>(CTFForceRespawn*)::nameHolder
 D datamap_t* DataMapInit<CTFGameRulesProxy>(CTFGameRulesProxy*)::dataDesc
 D datamap_t* DataMapInit<CTFGameRulesProxy>(CTFGameRulesProxy*)::nameHolder
 D datamap_t* DataMapInit<CTFGenericBomb>(CTFGenericBomb*)::dataDesc
 D datamap_t* DataMapInit<CTFGenericBomb>(CTFGenericBomb*)::nameHolder
 D datamap_t* DataMapInit<CTFGlow>(CTFGlow*)::dataDesc
 D datamap_t* DataMapInit<CTFGlow>(CTFGlow*)::nameHolder
 D datamap_t* DataMapInit<CTFGrapplingHook>(CTFGrapplingHook*)::dataDesc
 D datamap_t* DataMapInit<CTFGrapplingHook>(CTFGrapplingHook*)::nameHolder
 D datamap_t* DataMapInit<CTFGrenadeLauncher>(CTFGrenadeLauncher*)::dataDesc
 D datamap_t* DataMapInit<CTFGrenadeLauncher>(CTFGrenadeLauncher*)::nameHolder
 D datamap_t* DataMapInit<CTFGrenadePipebombProjectile>(CTFGrenadePipebombProjectile*)::dataDesc
 D datamap_t* DataMapInit<CTFGrenadePipebombProjectile>(CTFGrenadePipebombProjectile*)::nameHolder
 D datamap_t* DataMapInit<CTFHalloweenFortuneTeller>(CTFHalloweenFortuneTeller*)::dataDesc
 D datamap_t* DataMapInit<CTFHalloweenFortuneTeller>(CTFHalloweenFortuneTeller*)::nameHolder
 D datamap_t* DataMapInit<CTFHalloweenMinigame>(CTFHalloweenMinigame*)::dataDesc
 D datamap_t* DataMapInit<CTFHalloweenMinigame>(CTFHalloweenMinigame*)::nameHolder
 D datamap_t* DataMapInit<CTFHalloweenMinigame_FallingPlatforms>(CTFHalloweenMinigame_FallingPlatforms*)::dataDesc
 D datamap_t* DataMapInit<CTFHalloweenMinigame_FallingPlatforms>(CTFHalloweenMinigame_FallingPlatforms*)::nameHolder
 D datamap_t* DataMapInit<CTFHellZap>(CTFHellZap*)::dataDesc
 D datamap_t* DataMapInit<CTFHellZap>(CTFHellZap*)::nameHolder
 D datamap_t* DataMapInit<CTFHolidayEntity>(CTFHolidayEntity*)::dataDesc
 D datamap_t* DataMapInit<CTFHolidayEntity>(CTFHolidayEntity*)::nameHolder
 D datamap_t* DataMapInit<CTFHudNotify>(CTFHudNotify*)::dataDesc
 D datamap_t* DataMapInit<CTFHudNotify>(CTFHudNotify*)::nameHolder
 D datamap_t* DataMapInit<CTFInfoPowerupSpawn>(CTFInfoPowerupSpawn*)::dataDesc
 D datamap_t* DataMapInit<CTFInfoPowerupSpawn>(CTFInfoPowerupSpawn*)::nameHolder
 D datamap_t* DataMapInit<CTFIntermission>(CTFIntermission*)::dataDesc
 D datamap_t* DataMapInit<CTFIntermission>(CTFIntermission*)::nameHolder
 D datamap_t* DataMapInit<CTFLunchBox>(CTFLunchBox*)::dataDesc
 D datamap_t* DataMapInit<CTFLunchBox>(CTFLunchBox*)::nameHolder
 D datamap_t* DataMapInit<CTFMedigunShield>(CTFMedigunShield*)::dataDesc
 D datamap_t* DataMapInit<CTFMedigunShield>(CTFMedigunShield*)::nameHolder
 D datamap_t* DataMapInit<CTFMiniGame>(CTFMiniGame*)::dataDesc
 D datamap_t* DataMapInit<CTFMiniGame>(CTFMiniGame*)::nameHolder
 D datamap_t* DataMapInit<CTFMinigameLogic>(CTFMinigameLogic*)::dataDesc
 D datamap_t* DataMapInit<CTFMinigameLogic>(CTFMinigameLogic*)::nameHolder
 D datamap_t* DataMapInit<CTFMinigun>(CTFMinigun*)::dataDesc
 D datamap_t* DataMapInit<CTFMinigun>(CTFMinigun*)::nameHolder
 D datamap_t* DataMapInit<CTFObjectiveResource>(CTFObjectiveResource*)::dataDesc
 D datamap_t* DataMapInit<CTFObjectiveResource>(CTFObjectiveResource*)::nameHolder
 D datamap_t* DataMapInit<CTFParticleCannon>(CTFParticleCannon*)::dataDesc
 D datamap_t* DataMapInit<CTFParticleCannon>(CTFParticleCannon*)::nameHolder
 D datamap_t* DataMapInit<CTFPasstimeLogic>(CTFPasstimeLogic*)::dataDesc
 D datamap_t* DataMapInit<CTFPasstimeLogic>(CTFPasstimeLogic*)::nameHolder
 D datamap_t* DataMapInit<CTFPipebombLauncher>(CTFPipebombLauncher*)::dataDesc
 D datamap_t* DataMapInit<CTFPipebombLauncher>(CTFPipebombLauncher*)::nameHolder
 D datamap_t* DataMapInit<CTFPistol>(CTFPistol*)::dataDesc
 D datamap_t* DataMapInit<CTFPistol>(CTFPistol*)::nameHolder
 D datamap_t* DataMapInit<CTFPlayer>(CTFPlayer*)::dataDesc
 D datamap_t* DataMapInit<CTFPlayer>(CTFPlayer*)::nameHolder
 D datamap_t* DataMapInit<CTFPlayerDestructionLogic>(CTFPlayerDestructionLogic*)::dataDesc
 D datamap_t* DataMapInit<CTFPlayerDestructionLogic>(CTFPlayerDestructionLogic*)::nameHolder
 D datamap_t* DataMapInit<CTFPointWeaponMimic>(CTFPointWeaponMimic*)::dataDesc
 D datamap_t* DataMapInit<CTFPointWeaponMimic>(CTFPointWeaponMimic*)::nameHolder
 D datamap_t* DataMapInit<CTFPowerup>(CTFPowerup*)::dataDesc
 D datamap_t* DataMapInit<CTFPowerup>(CTFPowerup*)::nameHolder
 D datamap_t* DataMapInit<CTFPowerupBottle>(CTFPowerupBottle*)::dataDesc
 D datamap_t* DataMapInit<CTFPowerupBottle>(CTFPowerupBottle*)::nameHolder
 D datamap_t* DataMapInit<CTFProjectile_Arrow>(CTFProjectile_Arrow*)::dataDesc
 D datamap_t* DataMapInit<CTFProjectile_Arrow>(CTFProjectile_Arrow*)::nameHolder
 D datamap_t* DataMapInit<CTFProjectile_EnergyBall>(CTFProjectile_EnergyBall*)::dataDesc
 D datamap_t* DataMapInit<CTFProjectile_EnergyBall>(CTFProjectile_EnergyBall*)::nameHolder
 D datamap_t* DataMapInit<CTFProjectile_Flare>(CTFProjectile_Flare*)::dataDesc
 D datamap_t* DataMapInit<CTFProjectile_Flare>(CTFProjectile_Flare*)::nameHolder
 D datamap_t* DataMapInit<CTFProjectile_GrapplingHook>(CTFProjectile_GrapplingHook*)::dataDesc
 D datamap_t* DataMapInit<CTFProjectile_GrapplingHook>(CTFProjectile_GrapplingHook*)::nameHolder
 D datamap_t* DataMapInit<CTFProjectile_HealingBolt>(CTFProjectile_HealingBolt*)::dataDesc
 D datamap_t* DataMapInit<CTFProjectile_HealingBolt>(CTFProjectile_HealingBolt*)::nameHolder
 D datamap_t* DataMapInit<CTFReviveMarker>(CTFReviveMarker*)::dataDesc
 D datamap_t* DataMapInit<CTFReviveMarker>(CTFReviveMarker*)::nameHolder
 D datamap_t* DataMapInit<CTFRevolver>(CTFRevolver*)::dataDesc
 D datamap_t* DataMapInit<CTFRevolver>(CTFRevolver*)::nameHolder
 D datamap_t* DataMapInit<CTFRobotDestructionLogic>(CTFRobotDestructionLogic*)::dataDesc
 D datamap_t* DataMapInit<CTFRobotDestructionLogic>(CTFRobotDestructionLogic*)::nameHolder
 D datamap_t* DataMapInit<CTFRobotDestruction_Robot>(CTFRobotDestruction_Robot*)::dataDesc
 D datamap_t* DataMapInit<CTFRobotDestruction_Robot>(CTFRobotDestruction_Robot*)::nameHolder
 D datamap_t* DataMapInit<CTFRobotDestruction_RobotGroup>(CTFRobotDestruction_RobotGroup*)::dataDesc
 D datamap_t* DataMapInit<CTFRobotDestruction_RobotGroup>(CTFRobotDestruction_RobotGroup*)::nameHolder
 D datamap_t* DataMapInit<CTFRobotDestruction_RobotSpawn>(CTFRobotDestruction_RobotSpawn*)::dataDesc
 D datamap_t* DataMapInit<CTFRobotDestruction_RobotSpawn>(CTFRobotDestruction_RobotSpawn*)::nameHolder
 D datamap_t* DataMapInit<CTFRocketLauncher>(CTFRocketLauncher*)::dataDesc
 D datamap_t* DataMapInit<CTFRocketLauncher>(CTFRocketLauncher*)::nameHolder
 D datamap_t* DataMapInit<CTFRocketLauncher_AirStrike>(CTFRocketLauncher_AirStrike*)::dataDesc
 D datamap_t* DataMapInit<CTFRocketLauncher_AirStrike>(CTFRocketLauncher_AirStrike*)::nameHolder
 D datamap_t* DataMapInit<CTFRocketLauncher_DirectHit>(CTFRocketLauncher_DirectHit*)::dataDesc
 D datamap_t* DataMapInit<CTFRocketLauncher_DirectHit>(CTFRocketLauncher_DirectHit*)::nameHolder
 D datamap_t* DataMapInit<CTFRocketLauncher_Mortar>(CTFRocketLauncher_Mortar*)::dataDesc
 D datamap_t* DataMapInit<CTFRocketLauncher_Mortar>(CTFRocketLauncher_Mortar*)::nameHolder
 D datamap_t* DataMapInit<CTFSMG>(CTFSMG*)::dataDesc
 D datamap_t* DataMapInit<CTFSMG>(CTFSMG*)::nameHolder
 D datamap_t* DataMapInit<CTFSniperRifle>(CTFSniperRifle*)::dataDesc
 D datamap_t* DataMapInit<CTFSniperRifle>(CTFSniperRifle*)::nameHolder
 D datamap_t* DataMapInit<CTFSpawner>(CTFSpawner*)::dataDesc
 D datamap_t* DataMapInit<CTFSpawner>(CTFSpawner*)::nameHolder
 D datamap_t* DataMapInit<CTFSpell_MeteorShowerSpawner>(CTFSpell_MeteorShowerSpawner*)::dataDesc
 D datamap_t* DataMapInit<CTFSpell_MeteorShowerSpawner>(CTFSpell_MeteorShowerSpawner*)::nameHolder
 D datamap_t* DataMapInit<CTFSyringeGun>(CTFSyringeGun*)::dataDesc
 D datamap_t* DataMapInit<CTFSyringeGun>(CTFSyringeGun*)::nameHolder
 D datamap_t* DataMapInit<CTFTankBoss>(CTFTankBoss*)::dataDesc
 D datamap_t* DataMapInit<CTFTankBoss>(CTFTankBoss*)::nameHolder
 D datamap_t* DataMapInit<CTFTankDestruction>(CTFTankDestruction*)::dataDesc
 D datamap_t* DataMapInit<CTFTankDestruction>(CTFTankDestruction*)::nameHolder
 D datamap_t* DataMapInit<CTFTeamSpawn>(CTFTeamSpawn*)::dataDesc
 D datamap_t* DataMapInit<CTFTeamSpawn>(CTFTeamSpawn*)::nameHolder
 D datamap_t* DataMapInit<CTFWeaponBase>(CTFWeaponBase*)::dataDesc
 D datamap_t* DataMapInit<CTFWeaponBase>(CTFWeaponBase*)::nameHolder
 D datamap_t* DataMapInit<CTFWeaponBaseGrenadeProj>(CTFWeaponBaseGrenadeProj*)::dataDesc
 D datamap_t* DataMapInit<CTFWeaponBaseGrenadeProj>(CTFWeaponBaseGrenadeProj*)::nameHolder
 D datamap_t* DataMapInit<CTFWeaponBaseGun>(CTFWeaponBaseGun*)::dataDesc
 D datamap_t* DataMapInit<CTFWeaponBaseGun>(CTFWeaponBaseGun*)::nameHolder
 D datamap_t* DataMapInit<CTFWeaponBaseMelee>(CTFWeaponBaseMelee*)::dataDesc
 D datamap_t* DataMapInit<CTFWeaponBaseMelee>(CTFWeaponBaseMelee*)::nameHolder
 D datamap_t* DataMapInit<CTFWeaponInvis>(CTFWeaponInvis*)::dataDesc
 D datamap_t* DataMapInit<CTFWeaponInvis>(CTFWeaponInvis*)::nameHolder
 D datamap_t* DataMapInit<CTFWeaponPDA>(CTFWeaponPDA*)::dataDesc
 D datamap_t* DataMapInit<CTFWeaponPDA>(CTFWeaponPDA*)::nameHolder
 D datamap_t* DataMapInit<CTFWeaponPDAExpansion_Dispenser>(CTFWeaponPDAExpansion_Dispenser*)::dataDesc
 D datamap_t* DataMapInit<CTFWeaponPDAExpansion_Dispenser>(CTFWeaponPDAExpansion_Dispenser*)::nameHolder
 D datamap_t* DataMapInit<CTFWeaponPDAExpansion_Teleporter>(CTFWeaponPDAExpansion_Teleporter*)::dataDesc
 D datamap_t* DataMapInit<CTFWeaponPDAExpansion_Teleporter>(CTFWeaponPDAExpansion_Teleporter*)::nameHolder
 D datamap_t* DataMapInit<CTFWearable>(CTFWearable*)::dataDesc
 D datamap_t* DataMapInit<CTFWearable>(CTFWearable*)::nameHolder
 D datamap_t* DataMapInit<CTFWearableDemoShield>(CTFWearableDemoShield*)::dataDesc
 D datamap_t* DataMapInit<CTFWearableDemoShield>(CTFWearableDemoShield*)::nameHolder
 D datamap_t* DataMapInit<CTFWearableItem>(CTFWearableItem*)::dataDesc
 D datamap_t* DataMapInit<CTFWearableItem>(CTFWearableItem*)::nameHolder
 D datamap_t* DataMapInit<CTFWearableLevelableItem>(CTFWearableLevelableItem*)::dataDesc
 D datamap_t* DataMapInit<CTFWearableLevelableItem>(CTFWearableLevelableItem*)::nameHolder
 D datamap_t* DataMapInit<CTakeDamageInfo>(CTakeDamageInfo*)::dataDesc
 D datamap_t* DataMapInit<CTakeDamageInfo>(CTakeDamageInfo*)::nameHolder
 D datamap_t* DataMapInit<CTankTargetChange>(CTankTargetChange*)::dataDesc
 D datamap_t* DataMapInit<CTankTargetChange>(CTankTargetChange*)::nameHolder
 D datamap_t* DataMapInit<CTankTrainAI>(CTankTrainAI*)::dataDesc
 D datamap_t* DataMapInit<CTankTrainAI>(CTankTrainAI*)::nameHolder
 D datamap_t* DataMapInit<CTargetCDAudioRep>(CTargetCDAudioRep*)::dataDesc
 D datamap_t* DataMapInit<CTargetCDAudioRep>(CTargetCDAudioRep*)::nameHolder
 D datamap_t* DataMapInit<CTargetChangeGravity>(CTargetChangeGravity*)::dataDesc
 D datamap_t* DataMapInit<CTargetChangeGravity>(CTargetChangeGravity*)::nameHolder
 D datamap_t* DataMapInit<CTeamControlPoint>(CTeamControlPoint*)::dataDesc
 D datamap_t* DataMapInit<CTeamControlPoint>(CTeamControlPoint*)::nameHolder
 D datamap_t* DataMapInit<CTeamControlPointMaster>(CTeamControlPointMaster*)::dataDesc
 D datamap_t* DataMapInit<CTeamControlPointMaster>(CTeamControlPointMaster*)::nameHolder
 D datamap_t* DataMapInit<CTeamControlPointRound>(CTeamControlPointRound*)::dataDesc
 D datamap_t* DataMapInit<CTeamControlPointRound>(CTeamControlPointRound*)::nameHolder
 D datamap_t* DataMapInit<CTeamRoundTimer>(CTeamRoundTimer*)::dataDesc
 D datamap_t* DataMapInit<CTeamRoundTimer>(CTeamRoundTimer*)::nameHolder
 D datamap_t* DataMapInit<CTeamTrainWatcher>(CTeamTrainWatcher*)::dataDesc
 D datamap_t* DataMapInit<CTeamTrainWatcher>(CTeamTrainWatcher*)::nameHolder
 D datamap_t* DataMapInit<CTeamplayRoundBasedRulesProxy>(CTeamplayRoundBasedRulesProxy*)::dataDesc
 D datamap_t* DataMapInit<CTeamplayRoundBasedRulesProxy>(CTeamplayRoundBasedRulesProxy*)::nameHolder
 D datamap_t* DataMapInit<CTeamplayRoundWin>(CTeamplayRoundWin*)::dataDesc
 D datamap_t* DataMapInit<CTeamplayRoundWin>(CTeamplayRoundWin*)::nameHolder
 D datamap_t* DataMapInit<CTeleportVortex>(CTeleportVortex*)::dataDesc
 D datamap_t* DataMapInit<CTeleportVortex>(CTeleportVortex*)::nameHolder
 D datamap_t* DataMapInit<CTemplateNPCMaker>(CTemplateNPCMaker*)::dataDesc
 D datamap_t* DataMapInit<CTemplateNPCMaker>(CTemplateNPCMaker*)::nameHolder
 D datamap_t* DataMapInit<CTesla>(CTesla*)::dataDesc
 D datamap_t* DataMapInit<CTesla>(CTesla*)::nameHolder
 D datamap_t* DataMapInit<CTestTraceline>(CTestTraceline*)::dataDesc
 D datamap_t* DataMapInit<CTestTraceline>(CTestTraceline*)::nameHolder
 D datamap_t* DataMapInit<CTextureToggle>(CTextureToggle*)::dataDesc
 D datamap_t* DataMapInit<CTextureToggle>(CTextureToggle*)::nameHolder
 D datamap_t* DataMapInit<CThrustController>(CThrustController*)::dataDesc
 D datamap_t* DataMapInit<CThrustController>(CThrustController*)::nameHolder
 D datamap_t* DataMapInit<CTimerEntity>(CTimerEntity*)::dataDesc
 D datamap_t* DataMapInit<CTimerEntity>(CTimerEntity*)::nameHolder
 D datamap_t* DataMapInit<CTrainingAnnotation>(CTrainingAnnotation*)::dataDesc
 D datamap_t* DataMapInit<CTrainingAnnotation>(CTrainingAnnotation*)::nameHolder
 D datamap_t* DataMapInit<CTrainingModeLogic>(CTrainingModeLogic*)::dataDesc
 D datamap_t* DataMapInit<CTrainingModeLogic>(CTrainingModeLogic*)::nameHolder
 D datamap_t* DataMapInit<CTriggerAddOrRemoveTFPlayerAttributes>(CTriggerAddOrRemoveTFPlayerAttributes*)::dataDesc
 D datamap_t* DataMapInit<CTriggerAddOrRemoveTFPlayerAttributes>(CTriggerAddOrRemoveTFPlayerAttributes*)::nameHolder
 D datamap_t* DataMapInit<CTriggerAddTFPlayerCondition>(CTriggerAddTFPlayerCondition*)::dataDesc
 D datamap_t* DataMapInit<CTriggerAddTFPlayerCondition>(CTriggerAddTFPlayerCondition*)::nameHolder
 D datamap_t* DataMapInit<CTriggerApplyImpulse>(CTriggerApplyImpulse*)::dataDesc
 D datamap_t* DataMapInit<CTriggerApplyImpulse>(CTriggerApplyImpulse*)::nameHolder
 D datamap_t* DataMapInit<CTriggerAreaCapture>(CTriggerAreaCapture*)::dataDesc
 D datamap_t* DataMapInit<CTriggerAreaCapture>(CTriggerAreaCapture*)::nameHolder
 D datamap_t* DataMapInit<CTriggerBotTag>(CTriggerBotTag*)::dataDesc
 D datamap_t* DataMapInit<CTriggerBotTag>(CTriggerBotTag*)::nameHolder
 D datamap_t* DataMapInit<CTriggerBrush>(CTriggerBrush*)::dataDesc
 D datamap_t* DataMapInit<CTriggerBrush>(CTriggerBrush*)::nameHolder
 D datamap_t* DataMapInit<CTriggerCamera>(CTriggerCamera*)::dataDesc
 D datamap_t* DataMapInit<CTriggerCamera>(CTriggerCamera*)::nameHolder
 D datamap_t* DataMapInit<CTriggerCatapult>(CTriggerCatapult*)::dataDesc
 D datamap_t* DataMapInit<CTriggerCatapult>(CTriggerCatapult*)::nameHolder
 D datamap_t* DataMapInit<CTriggerGravity>(CTriggerGravity*)::dataDesc
 D datamap_t* DataMapInit<CTriggerGravity>(CTriggerGravity*)::nameHolder
 D datamap_t* DataMapInit<CTriggerHurt>(CTriggerHurt*)::dataDesc
 D datamap_t* DataMapInit<CTriggerHurt>(CTriggerHurt*)::nameHolder
 D datamap_t* DataMapInit<CTriggerIgnite>(CTriggerIgnite*)::dataDesc
 D datamap_t* DataMapInit<CTriggerIgnite>(CTriggerIgnite*)::nameHolder
 D datamap_t* DataMapInit<CTriggerIgniteArrows>(CTriggerIgniteArrows*)::dataDesc
 D datamap_t* DataMapInit<CTriggerIgniteArrows>(CTriggerIgniteArrows*)::nameHolder
 D datamap_t* DataMapInit<CTriggerImpact>(CTriggerImpact*)::dataDesc
 D datamap_t* DataMapInit<CTriggerImpact>(CTriggerImpact*)::nameHolder
 D datamap_t* DataMapInit<CTriggerLook>(CTriggerLook*)::dataDesc
 D datamap_t* DataMapInit<CTriggerLook>(CTriggerLook*)::nameHolder
 D datamap_t* DataMapInit<CTriggerMultiple>(CTriggerMultiple*)::dataDesc
 D datamap_t* DataMapInit<CTriggerMultiple>(CTriggerMultiple*)::nameHolder
 D datamap_t* DataMapInit<CTriggerParticle>(CTriggerParticle*)::dataDesc
 D datamap_t* DataMapInit<CTriggerParticle>(CTriggerParticle*)::nameHolder
 D datamap_t* DataMapInit<CTriggerPasstimeBall>(CTriggerPasstimeBall*)::dataDesc
 D datamap_t* DataMapInit<CTriggerPasstimeBall>(CTriggerPasstimeBall*)::nameHolder
 D datamap_t* DataMapInit<CTriggerPlayerMovement>(CTriggerPlayerMovement*)::dataDesc
 D datamap_t* DataMapInit<CTriggerPlayerMovement>(CTriggerPlayerMovement*)::nameHolder
 D datamap_t* DataMapInit<CTriggerPlayerRespawnOverride>(CTriggerPlayerRespawnOverride*)::dataDesc
 D datamap_t* DataMapInit<CTriggerPlayerRespawnOverride>(CTriggerPlayerRespawnOverride*)::nameHolder
 D datamap_t* DataMapInit<CTriggerProximity>(CTriggerProximity*)::dataDesc
 D datamap_t* DataMapInit<CTriggerProximity>(CTriggerProximity*)::nameHolder
 D datamap_t* DataMapInit<CTriggerPush>(CTriggerPush*)::dataDesc
 D datamap_t* DataMapInit<CTriggerPush>(CTriggerPush*)::nameHolder
 D datamap_t* DataMapInit<CTriggerRemove>(CTriggerRemove*)::dataDesc
 D datamap_t* DataMapInit<CTriggerRemove>(CTriggerRemove*)::nameHolder
 D datamap_t* DataMapInit<CTriggerRemoveTFPlayerCondition>(CTriggerRemoveTFPlayerCondition*)::dataDesc
 D datamap_t* DataMapInit<CTriggerRemoveTFPlayerCondition>(CTriggerRemoveTFPlayerCondition*)::nameHolder
 D datamap_t* DataMapInit<CTriggerSave>(CTriggerSave*)::dataDesc
 D datamap_t* DataMapInit<CTriggerSave>(CTriggerSave*)::nameHolder
 D datamap_t* DataMapInit<CTriggerSoundscape>(CTriggerSoundscape*)::dataDesc
 D datamap_t* DataMapInit<CTriggerSoundscape>(CTriggerSoundscape*)::nameHolder
 D datamap_t* DataMapInit<CTriggerStun>(CTriggerStun*)::dataDesc
 D datamap_t* DataMapInit<CTriggerStun>(CTriggerStun*)::nameHolder
 D datamap_t* DataMapInit<CTriggerTeleport>(CTriggerTeleport*)::dataDesc
 D datamap_t* DataMapInit<CTriggerTeleport>(CTriggerTeleport*)::nameHolder
 D datamap_t* DataMapInit<CTriggerTeleportRelative>(CTriggerTeleportRelative*)::dataDesc
 D datamap_t* DataMapInit<CTriggerTeleportRelative>(CTriggerTeleportRelative*)::nameHolder
 D datamap_t* DataMapInit<CTriggerTimerDoor>(CTriggerTimerDoor*)::dataDesc
 D datamap_t* DataMapInit<CTriggerTimerDoor>(CTriggerTimerDoor*)::nameHolder
 D datamap_t* DataMapInit<CTriggerToggleSave>(CTriggerToggleSave*)::dataDesc
 D datamap_t* DataMapInit<CTriggerToggleSave>(CTriggerToggleSave*)::nameHolder
 D datamap_t* DataMapInit<CTriggerVPhysicsMotion>(CTriggerVPhysicsMotion*)::dataDesc
 D datamap_t* DataMapInit<CTriggerVPhysicsMotion>(CTriggerVPhysicsMotion*)::nameHolder
 D datamap_t* DataMapInit<CTriggerWind>(CTriggerWind*)::dataDesc
 D datamap_t* DataMapInit<CTriggerWind>(CTriggerWind*)::nameHolder
 D datamap_t* DataMapInit<CUpgrades>(CUpgrades*)::dataDesc
 D datamap_t* DataMapInit<CUpgrades>(CUpgrades*)::nameHolder
 D datamap_t* DataMapInit<CVGuiScreen>(CVGuiScreen*)::dataDesc
 D datamap_t* DataMapInit<CVGuiScreen>(CVGuiScreen*)::nameHolder
 D datamap_t* DataMapInit<CVoteController>(CVoteController*)::dataDesc
 D datamap_t* DataMapInit<CVoteController>(CVoteController*)::nameHolder
 D datamap_t* DataMapInit<CWC_UpdateIgnoreList>(CWC_UpdateIgnoreList*)::dataDesc
 D datamap_t* DataMapInit<CWC_UpdateIgnoreList>(CWC_UpdateIgnoreList*)::nameHolder
 D datamap_t* DataMapInit<CWaterBullet>(CWaterBullet*)::dataDesc
 D datamap_t* DataMapInit<CWaterBullet>(CWaterBullet*)::nameHolder
 D datamap_t* DataMapInit<CWaterLODControl>(CWaterLODControl*)::dataDesc
 D datamap_t* DataMapInit<CWaterLODControl>(CWaterLODControl*)::nameHolder
 D datamap_t* DataMapInit<CWeaponIFMBase>(CWeaponIFMBase*)::dataDesc
 D datamap_t* DataMapInit<CWeaponIFMBase>(CWeaponIFMBase*)::nameHolder
 D datamap_t* DataMapInit<CWeaponIFMBaseCamera>(CWeaponIFMBaseCamera*)::dataDesc
 D datamap_t* DataMapInit<CWeaponIFMBaseCamera>(CWeaponIFMBaseCamera*)::nameHolder
 D datamap_t* DataMapInit<CWeaponIFMSteadyCam>(CWeaponIFMSteadyCam*)::dataDesc
 D datamap_t* DataMapInit<CWeaponIFMSteadyCam>(CWeaponIFMSteadyCam*)::nameHolder
 D datamap_t* DataMapInit<CWeightButton>(CWeightButton*)::dataDesc
 D datamap_t* DataMapInit<CWeightButton>(CWeightButton*)::nameHolder
 D datamap_t* DataMapInit<CWheelOfDoom>(CWheelOfDoom*)::dataDesc
 D datamap_t* DataMapInit<CWheelOfDoom>(CWheelOfDoom*)::nameHolder
 D datamap_t* DataMapInit<CWheelOfDoomSpiral>(CWheelOfDoomSpiral*)::dataDesc
 D datamap_t* DataMapInit<CWheelOfDoomSpiral>(CWheelOfDoomSpiral*)::nameHolder
 D datamap_t* DataMapInit<CWindowPane>(CWindowPane*)::dataDesc
 D datamap_t* DataMapInit<CWindowPane>(CWindowPane*)::nameHolder
 D datamap_t* DataMapInit<CWorld>(CWorld*)::dataDesc
 D datamap_t* DataMapInit<CWorld>(CWorld*)::nameHolder
 D datamap_t* DataMapInit<CWorldItem>(CWorldItem*)::dataDesc
 D datamap_t* DataMapInit<CWorldItem>(CWorldItem*)::nameHolder
 D datamap_t* DataMapInit<CZombieSpawner>(CZombieSpawner*)::dataDesc
 D datamap_t* DataMapInit<CZombieSpawner>(CZombieSpawner*)::nameHolder
 D datamap_t* DataMapInit<ConceptHistory_t>(ConceptHistory_t*)::dataDesc
 D datamap_t* DataMapInit<ConceptHistory_t>(ConceptHistory_t*)::nameHolder
 D datamap_t* DataMapInit<DustTrail>(DustTrail*)::dataDesc
 D datamap_t* DataMapInit<DustTrail>(DustTrail*)::nameHolder
 D datamap_t* DataMapInit<EntityParticleTrailInfo_t>(EntityParticleTrailInfo_t*)::dataDesc
 D datamap_t* DataMapInit<EntityParticleTrailInfo_t>(EntityParticleTrailInfo_t*)::nameHolder
 D datamap_t* DataMapInit<EventQueuePrioritizedEvent_t>(EventQueuePrioritizedEvent_t*)::dataDesc
 D datamap_t* DataMapInit<EventQueuePrioritizedEvent_t>(EventQueuePrioritizedEvent_t*)::nameHolder
 D datamap_t* DataMapInit<FilterDamageType>(FilterDamageType*)::dataDesc
 D datamap_t* DataMapInit<FilterDamageType>(FilterDamageType*)::nameHolder
 D datamap_t* DataMapInit<FilterDamagedByWeaponInSlot>(FilterDamagedByWeaponInSlot*)::dataDesc
 D datamap_t* DataMapInit<FilterDamagedByWeaponInSlot>(FilterDamagedByWeaponInSlot*)::nameHolder
 D datamap_t* DataMapInit<FilterTeam>(FilterTeam*)::dataDesc
 D datamap_t* DataMapInit<FilterTeam>(FilterTeam*)::nameHolder
 D datamap_t* DataMapInit<HintNodeData>(HintNodeData*)::dataDesc
 D datamap_t* DataMapInit<HintNodeData>(HintNodeData*)::nameHolder
 D datamap_t* DataMapInit<NextBotCombatCharacter>(NextBotCombatCharacter*)::dataDesc
 D datamap_t* DataMapInit<NextBotCombatCharacter>(NextBotCombatCharacter*)::nameHolder
 D datamap_t* DataMapInit<ParticleSmokeGrenade>(ParticleSmokeGrenade*)::dataDesc
 D datamap_t* DataMapInit<ParticleSmokeGrenade>(ParticleSmokeGrenade*)::nameHolder
 D datamap_t* DataMapInit<PhysBlockHeader_t>(PhysBlockHeader_t*)::dataDesc
 D datamap_t* DataMapInit<PhysBlockHeader_t>(PhysBlockHeader_t*)::nameHolder
 D datamap_t* DataMapInit<PhysObjectHeader_t>(PhysObjectHeader_t*)::dataDesc
 D datamap_t* DataMapInit<PhysObjectHeader_t>(PhysObjectHeader_t*)::nameHolder
 D datamap_t* DataMapInit<Relationship_t>(Relationship_t*)::dataDesc
 D datamap_t* DataMapInit<Relationship_t>(Relationship_t*)::nameHolder
 D datamap_t* DataMapInit<Response>(Response*)::dataDesc
 D datamap_t* DataMapInit<Response>(Response*)::nameHolder
 D datamap_t* DataMapInit<ResponseContext_t>(ResponseContext_t*)::dataDesc
 D datamap_t* DataMapInit<ResponseContext_t>(ResponseContext_t*)::nameHolder
 D datamap_t* DataMapInit<ResponseGroup>(ResponseGroup*)::dataDesc
 D datamap_t* DataMapInit<ResponseGroup>(ResponseGroup*)::nameHolder
 D datamap_t* DataMapInit<RocketTrail>(RocketTrail*)::dataDesc
 D datamap_t* DataMapInit<RocketTrail>(RocketTrail*)::nameHolder
 D datamap_t* DataMapInit<SaveRestoreBlockHeader_t>(SaveRestoreBlockHeader_t*)::dataDesc
 D datamap_t* DataMapInit<SaveRestoreBlockHeader_t>(SaveRestoreBlockHeader_t*)::nameHolder
 D datamap_t* DataMapInit<ScriptedNPCInteraction_Phases_t>(ScriptedNPCInteraction_Phases_t*)::dataDesc
 D datamap_t* DataMapInit<ScriptedNPCInteraction_Phases_t>(ScriptedNPCInteraction_Phases_t*)::nameHolder
 D datamap_t* DataMapInit<ScriptedNPCInteraction_t>(ScriptedNPCInteraction_t*)::dataDesc
 D datamap_t* DataMapInit<ScriptedNPCInteraction_t>(ScriptedNPCInteraction_t*)::nameHolder
 D datamap_t* DataMapInit<SmokeTrail>(SmokeTrail*)::dataDesc
 D datamap_t* DataMapInit<SmokeTrail>(SmokeTrail*)::nameHolder
 D datamap_t* DataMapInit<SoundCommand_t>(SoundCommand_t*)::dataDesc
 D datamap_t* DataMapInit<SoundCommand_t>(SoundCommand_t*)::nameHolder
 D datamap_t* DataMapInit<SporeExplosion>(SporeExplosion*)::dataDesc
 D datamap_t* DataMapInit<SporeExplosion>(SporeExplosion*)::nameHolder
 D datamap_t* DataMapInit<SporeTrail>(SporeTrail*)::dataDesc
 D datamap_t* DataMapInit<SporeTrail>(SporeTrail*)::nameHolder
 D datamap_t* DataMapInit<TemplateEntityData_t>(TemplateEntityData_t*)::dataDesc
 D datamap_t* DataMapInit<TemplateEntityData_t>(TemplateEntityData_t*)::nameHolder
 D datamap_t* DataMapInit<UnreachableEnt_t>(UnreachableEnt_t*)::dataDesc
 D datamap_t* DataMapInit<UnreachableEnt_t>(UnreachableEnt_t*)::nameHolder
 D datamap_t* DataMapInit<ViewSmoothingData_t>(ViewSmoothingData_t*)::dataDesc
 D datamap_t* DataMapInit<ViewSmoothingData_t>(ViewSmoothingData_t*)::nameHolder
 D datamap_t* DataMapInit<audioparams_t>(audioparams_t*)::dataDesc
 D datamap_t* DataMapInit<audioparams_t>(audioparams_t*)::nameHolder
 D datamap_t* DataMapInit<entitytable_t>(entitytable_t*)::dataDesc
 D datamap_t* DataMapInit<entitytable_t>(entitytable_t*)::nameHolder
 D datamap_t* DataMapInit<flexsetting_t>(flexsetting_t*)::dataDesc
 D datamap_t* DataMapInit<flexsetting_t>(flexsetting_t*)::nameHolder
 D datamap_t* DataMapInit<flexsettinghdr_t>(flexsettinghdr_t*)::dataDesc
 D datamap_t* DataMapInit<flexsettinghdr_t>(flexsettinghdr_t*)::nameHolder
 D datamap_t* DataMapInit<flexweight_t>(flexweight_t*)::dataDesc
 D datamap_t* DataMapInit<flexweight_t>(flexweight_t*)::nameHolder
 D datamap_t* DataMapInit<fogparams_t>(fogparams_t*)::dataDesc
 D datamap_t* DataMapInit<fogparams_t>(fogparams_t*)::nameHolder
 D datamap_t* DataMapInit<fogplayerparams_t>(fogplayerparams_t*)::dataDesc
 D datamap_t* DataMapInit<fogplayerparams_t>(fogplayerparams_t*)::nameHolder
 D datamap_t* DataMapInit<globalentity_t>(globalentity_t*)::dataDesc
 D datamap_t* DataMapInit<globalentity_t>(globalentity_t*)::nameHolder
 D datamap_t* DataMapInit<locksound_t>(locksound_t*)::dataDesc
 D datamap_t* DataMapInit<locksound_t>(locksound_t*)::nameHolder
 D datamap_t* DataMapInit<magnetted_objects_t>(magnetted_objects_t*)::dataDesc
 D datamap_t* DataMapInit<magnetted_objects_t>(magnetted_objects_t*)::nameHolder
 D datamap_t* DataMapInit<modifiedconvars_t>(modifiedconvars_t*)::dataDesc
 D datamap_t* DataMapInit<modifiedconvars_t>(modifiedconvars_t*)::nameHolder
 D datamap_t* DataMapInit<physfollower_t>(physfollower_t*)::dataDesc
 D datamap_t* DataMapInit<physfollower_t>(physfollower_t*)::nameHolder
 D datamap_t* DataMapInit<sky3dparams_t>(sky3dparams_t*)::dataDesc
 D datamap_t* DataMapInit<sky3dparams_t>(sky3dparams_t*)::nameHolder
 D datamap_t* DataMapInit<template_t>(template_t*)::dataDesc
 D datamap_t* DataMapInit<template_t>(template_t*)::nameHolder
 D datamap_t* DataMapInit<thinkfunc_t>(thinkfunc_t*)::dataDesc
 D datamap_t* DataMapInit<thinkfunc_t>(thinkfunc_t*)::nameHolder
 D datamap_t* DataMapInit<vehicle_crashsound_t>(vehicle_crashsound_t*)::dataDesc
 D datamap_t* DataMapInit<vehicle_crashsound_t>(vehicle_crashsound_t*)::nameHolder
 D datamap_t* DataMapInit<vehicle_gear_t>(vehicle_gear_t*)::dataDesc
 D datamap_t* DataMapInit<vehicle_gear_t>(vehicle_gear_t*)::nameHolder
 D datamap_t* DataMapInit<vehiclesounds_t>(vehiclesounds_t*)::dataDesc
 D datamap_t* DataMapInit<vehiclesounds_t>(vehiclesounds_t*)::nameHolder
 D decalsystem
 D entitytable_t::m_DataMap
 D eventFuncs
 D flexsetting_t::m_DataMap
 D flexsettinghdr_t::m_DataMap
 D flexweight_t::m_DataMap
 D fogparams_t::m_DataMap
 D fogplayerparams_t::m_DataMap
 D gDefaultNPCImpactDamageTable
 D gDefaultPlayerImpactDamageTable
 D gDefaultPlayerVehicleImpactDamageTable
 D gGlassImpactDamageTable
 D gInitHUD
 D g_AI_Formations
 D g_AI_SaveRestoreBlockHandler
 D g_AchievementSaveRestoreBlockHandler
 D g_AttributeDescriptionFormats
 D g_Capabilities
 D g_ChoreoStringPool
 D g_ConceptCategoryInfos
 D g_ConceptHistoriesSaveDataOps
 D g_ConceptInfos
 D g_DebugConnectNode1
 D g_DebugConnectNode2
 D g_EffectTypes
 D g_EventsSaveDataOps
 D g_HACK_GunslingerEngineerArmsOverride
 D g_ItemFlags
 D g_KeyValuesErrorStack
 D g_MedigunEffects
 D g_MedigunResistConditions
 D g_PhysDefaultObjectParams
 D g_PhysGameTrace
 D g_ServerGameClients
 D g_SoldierBuffAttributeIDToConditionMap
 D g_SolidSetup
 D g_StandardSendProxies
 D g_StandoffParamsByAgression
 D g_TeamVisualSections
 D g_ThinkContextsSaveDataOps
 D g_VariantSaveDataOps
 D g_WearableAnimTypeStrings
 D g_XPSourceDefs
 D g_aAmmoNames
 D g_aCTFEventNames
 D g_aDebuffConditions
 D g_aPlayerClassNames
 D g_aPlayerClassNames_NonLocalized
 D g_aRawPlayerClassNamesShort
 D g_aRoundEndReasons
 D g_aTeamColors
 D g_aTeamNames
 D g_aWeaponDamageTypes
 D g_aWeaponNames
 D g_bClientFlex
 D g_bMovementOptimizations
 D g_bTestMoveTypeStepSimulation
 D g_fMaxViewModelLag
 D g_flDispenserAmmoRates
 D g_flDispenserHealRates
 D g_flFractionScale
 D g_iProjectileWeapons
 D g_iSoundsToStopOnExit
 D g_iTeleporterRechargeTimes
 D g_nActivityListVersion
 D g_nEventListVersion
 D g_nParticle_Multiplier
 D g_p4factory
 D g_pConstraintEvents
 D g_pEffects
 D g_pEntityList
 D g_pGameMovement
 D g_pGameSaveRestoreBlockSet
 D g_pMoveData
 D g_pNotify
 D g_pParticleSystemMgr
 D g_pParticleSystemQuery
 D g_pPhysSaveRestoreManager
 D g_pPushedEntities
 D g_pResponseSystem
 D g_pServerBenchmark
 D g_pTFPlayerClassDataMgr
 D g_pToolFrameworkServer
 D g_pVoiceGameMgrHelper
 D g_ppszGoalTypes
 D g_ppszTaskFailureText
 D g_pszArrowModels
 D g_pszAttrEncodeSeparator
 D g_pszBDayGibs
 D g_pszBisonImpactFleshSound
 D g_pszBisonImpactWorldSound
 D g_pszBisonTrailParticle
 D g_pszBisonTrailParticleCrit
 D g_pszBreadModels
 D g_pszDeathCallingCardModels
 D g_pszEnergyProjectileImpactParticle
 D g_pszEnergyRingModel
 D g_pszHelltowerAnnouncerLines
 D g_pszHintDescriptions
 D g_pszMPConcepts
 D g_pszPomsonImpactFleshSound
 D g_pszPomsonImpactWorldSound
 D g_pszPomsonTrailParticle
 D g_pszPomsonTrailParticleCrit
 D g_pszSCHED_ALERT_FACE
 D g_pszSCHED_ALERT_FACE_BESTSOUND
 D g_pszSCHED_ALERT_REACT_TO_COMBAT_SOUND
 D g_pszSCHED_ALERT_SCAN
 D g_pszSCHED_ALERT_STAND
 D g_pszSCHED_ALERT_WALK
 D g_pszSCHED_AMBUSH
 D g_pszSCHED_ARM_WEAPON
 D g_pszSCHED_BACK_AWAY_FROM_ENEMY
 D g_pszSCHED_BACK_AWAY_FROM_SAVE_POSITION
 D g_pszSCHED_BIG_FLINCH
 D g_pszSCHED_CHASE_ENEMY
 D g_pszSCHED_CHASE_ENEMY_FAILED
 D g_pszSCHED_COMBAT_FACE
 D g_pszSCHED_COMBAT_PATROL
 D g_pszSCHED_COMBAT_STAND
 D g_pszSCHED_COMBAT_SWEEP
 D g_pszSCHED_COMBAT_WALK
 D g_pszSCHED_COWER
 D g_pszSCHED_DIE
 D g_pszSCHED_DIE_RAGDOLL
 D g_pszSCHED_DISARM_WEAPON
 D g_pszSCHED_DROPSHIP_DUSTOFF
 D g_pszSCHED_DUCK_DODGE
 D g_pszSCHED_ESTABLISH_LINE_OF_FIRE
 D g_pszSCHED_ESTABLISH_LINE_OF_FIRE_FALLBACK
 D g_pszSCHED_FAIL
 D g_pszSCHED_FAIL_ESTABLISH_LINE_OF_FIRE
 D g_pszSCHED_FAIL_NOSTOP
 D g_pszSCHED_FAIL_TAKE_COVER
 D g_pszSCHED_FALL_TO_GROUND
 D g_pszSCHED_FEAR_FACE
 D g_pszSCHED_FLEE_FROM_BEST_SOUND
 D g_pszSCHED_FLINCH_PHYSICS
 D g_pszSCHED_FORCED_GO
 D g_pszSCHED_FORCED_GO_RUN
 D g_pszSCHED_GET_HEALTHKIT
 D g_pszSCHED_HIDE_AND_RELOAD
 D g_pszSCHED_IDLE_STAND
 D g_pszSCHED_IDLE_WALK
 D g_pszSCHED_IDLE_WANDER
 D g_pszSCHED_INTERACTION_MOVE_TO_PARTNER
 D g_pszSCHED_INTERACTION_WAIT_FOR_PARTNER
 D g_pszSCHED_INVESTIGATE_SOUND
 D g_pszSCHED_MELEE_ATTACK1
 D g_pszSCHED_MELEE_ATTACK2
 D g_pszSCHED_MOVE_AWAY
 D g_pszSCHED_MOVE_AWAY_END
 D g_pszSCHED_MOVE_AWAY_FAIL
 D g_pszSCHED_MOVE_AWAY_FROM_ENEMY
 D g_pszSCHED_MOVE_TO_WEAPON_RANGE
 D g_pszSCHED_NEW_WEAPON
 D g_pszSCHED_NEW_WEAPON_CHEAT
 D g_pszSCHED_NPC_FREEZE
 D g_pszSCHED_PATROL_RUN
 D g_pszSCHED_PATROL_WALK
 D g_pszSCHED_PRE_FAIL_ESTABLISH_LINE_OF_FIRE
 D g_pszSCHED_RANGE_ATTACK1
 D g_pszSCHED_RANGE_ATTACK2
 D g_pszSCHED_RELOAD
 D g_pszSCHED_RUN_FROM_ENEMY
 D g_pszSCHED_RUN_FROM_ENEMY_FALLBACK
 D g_pszSCHED_RUN_FROM_ENEMY_MOB
 D g_pszSCHED_RUN_RANDOM
 D g_pszSCHED_SCENE_GENERIC
 D g_pszSCHED_SCRIPTED_CUSTOM_MOVE
 D g_pszSCHED_SCRIPTED_FACE
 D g_pszSCHED_SCRIPTED_RUN
 D g_pszSCHED_SCRIPTED_WAIT
 D g_pszSCHED_SCRIPTED_WALK
 D g_pszSCHED_SHOOT_ENEMY_COVER
 D g_pszSCHED_SLEEP
 D g_pszSCHED_SMALL_FLINCH
 D g_pszSCHED_SPECIAL_ATTACK1
 D g_pszSCHED_SPECIAL_ATTACK2
 D g_pszSCHED_STANDOFF
 D g_pszSCHED_SWITCH_TO_PENDING_WEAPON
 D g_pszSCHED_TAKE_COVER_FROM_BEST_SOUND
 D g_pszSCHED_TAKE_COVER_FROM_ENEMY
 D g_pszSCHED_TAKE_COVER_FROM_ORIGIN
 D g_pszSCHED_TARGET_CHASE
 D g_pszSCHED_TARGET_FACE
 D g_pszSCHED_VICTORY_DANCE
 D g_pszSCHED_WAIT_FOR_SCRIPT
 D g_pszSCHED_WAIT_FOR_SPEAK_FINISH
 D g_pszSCHED_WAKE_ANGRY
 D g_sapperModel
 D g_sapperPlacementModel
 D g_szAccountLoadoutStrings
 D g_szAccountLoadoutStringsForDisplay
 D g_szDropTypeStrings
 D g_szDuckLeaderboardNames
 D g_szLadderLeaderboardNames
 D g_szLoadoutStrings
 D g_szLoadoutStringsForDisplay
 D g_szProjectileNames
 D g_szQualityStrings
 D g_szRecipeCategoryStrings
 D g_szSpecialDamageNames
 D g_szWeaponTypeSubstrings
 D gamestats
 D globalentity_t::m_DataMap
 D guard variable for AllocTempVector()::s_nIndex
 D guard variable for AllocTempVector()::s_vecTemp
 D guard variable for CCollectAndLabelSpawnRoomAreas::operator()(CNavArea*)::stepHeight
 D guard variable for CEyeballBossLocomotion::GetGroundNormal() const::up
 D guard variable for CMerasmusFlyingLocomotion::GetGroundNormal() const::up
 D guard variable for CSoundEmitterSystem::PrecacheScriptSound(char const*)::s_PrecacheScriptSoundFailures
 D guard variable for CStrangeEventValidator::BInitEventParams(IEconItemInterface*, CTFPlayer*, CTFPlayer*)::pAttrDef_KillEater
 D guard variable for CTFProjectile_SpellSpawnBoss::InitialExplodeEffects(CTFPlayer*, CGameTrace const*)::vTest
 D guard variable for CUtlRBTree<AI_CriteriaSet::CritEntry_t, short, bool (*)(AI_CriteriaSet::CritEntry_t const&, AI_CriteriaSet::CritEntry_t const&), CUtlMemory<UtlRBTreeNode_t<AI_CriteriaSet::CritEntry_t, short>, short> >::Links(short) const::s_Sentinel
 D guard variable for CUtlRBTree<CAI_BaseNPC*, unsigned short, bool (*)(CAI_BaseNPC* const&, CAI_BaseNPC* const&), CUtlMemory<UtlRBTreeNode_t<CAI_BaseNPC*, unsigned short>, unsigned short> >::Links(unsigned short) const::s_Sentinel
 D guard variable for CUtlRBTree<CBaseEntity*, unsigned short, bool (*)(CBaseEntity* const&, CBaseEntity* const&), CUtlMemory<UtlRBTreeNode_t<CBaseEntity*, unsigned short>, unsigned short> >::Links(unsigned short) const::s_Sentinel
 D guard variable for CUtlRBTree<CBaseFlex::FS_LocalToGlobal_t, unsigned short, bool (*)(CBaseFlex::FS_LocalToGlobal_t const&, CBaseFlex::FS_LocalToGlobal_t const&), CUtlMemory<UtlRBTreeNode_t<CBaseFlex::FS_LocalToGlobal_t, unsigned short>, unsigned short> >::Links(unsigned short) const::s_Sentinel
 D guard variable for CUtlRBTree<CBreakModelsPrecached::breakable_precache_t, unsigned short, bool (*)(CBreakModelsPrecached::breakable_precache_t const&, CBreakModelsPrecached::breakable_precache_t const&), CUtlMemory<UtlRBTreeNode_t<CBreakModelsPrecached::breakable_precache_t, unsigned short>, unsigned short> >::Links(unsigned short) const::s_Sentinel
 D guard variable for CUtlRBTree<CChoreoEvent*, unsigned short, bool (*)(CChoreoEvent* const&, CChoreoEvent* const&), CUtlMemory<UtlRBTreeNode_t<CChoreoEvent*, unsigned short>, unsigned short> >::Links(unsigned short) const::s_Sentinel
 D guard variable for CUtlRBTree<CChoreoScene::ActiveList, int, bool (*)(CChoreoScene::ActiveList const&, CChoreoScene::ActiveList const&), CUtlMemory<UtlRBTreeNode_t<CChoreoScene::ActiveList, int>, int> >::Links(int) const::s_Sentinel
 D guard variable for CUtlRBTree<CCombatCharVisCache::VisCacheEntry_t, unsigned short, CCombatCharVisCache::CVisCacheEntryLess, CUtlMemory<UtlRBTreeNode_t<CCombatCharVisCache::VisCacheEntry_t, unsigned short>, unsigned short> >::Links(unsigned short) const::s_Sentinel
 D guard variable for CUtlRBTree<CHLTVGameEvent, unsigned short, bool (*)(CHLTVGameEvent const&, CHLTVGameEvent const&), CUtlMemory<UtlRBTreeNode_t<CHLTVGameEvent, unsigned short>, unsigned short> >::Links(unsigned short) const::s_Sentinel
 D guard variable for CUtlRBTree<CSceneEntity::SpeakEventSound_t, unsigned short, bool (*)(CSceneEntity::SpeakEventSound_t const&, CSceneEntity::SpeakEventSound_t const&), CUtlMemory<UtlRBTreeNode_t<CSceneEntity::SpeakEventSound_t, unsigned short>, unsigned short> >::Links(unsigned short) const::s_Sentinel
 D guard variable for CUtlRBTree<CUtlCachedFileData<CModelSoundsCache>::ElementType_t, unsigned short, bool (*)(CUtlCachedFileData<CModelSoundsCache>::ElementType_t const&, CUtlCachedFileData<CModelSoundsCache>::ElementType_t const&), CUtlMemory<UtlRBTreeNode_t<CUtlCachedFileData<CModelSoundsCache>::ElementType_t, unsigned short>, unsigned short> >::Links(unsigned short) const::s_Sentinel
 D guard variable for CUtlRBTree<CUtlMap<CBaseEntity const*, float, unsigned short>::Node_t, unsigned short, CUtlMap<CBaseEntity const*, float, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<CBaseEntity const*, float, unsigned short>::Node_t, unsigned short>, unsigned short> >::Links(unsigned short) const::s_Sentinel
 D guard variable for CUtlRBTree<CUtlMap<CBaseEntity*, AI_EnemyInfo_t*, unsigned char>::Node_t, unsigned char, CUtlMap<CBaseEntity*, AI_EnemyInfo_t*, unsigned char>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<CBaseEntity*, AI_EnemyInfo_t*, unsigned char>::Node_t, unsigned char>, unsigned char> >::Links(unsigned char) const::s_Sentinel
 D guard variable for CUtlRBTree<CUtlMap<CBaseEntity*, CPhysSaveRestoreBlockHandler::CEntityRestoreSet*, unsigned short>::Node_t, unsigned short, CUtlMap<CBaseEntity*, CPhysSaveRestoreBlockHandler::CEntityRestoreSet*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<CBaseEntity*, CPhysSaveRestoreBlockHandler::CEntityRestoreSet*, unsigned short>::Node_t, unsigned short>, unsigned short> >::Links(unsigned short) const::s_Sentinel
 D guard variable for CUtlRBTree<CUtlMap<CBaseEntity*, int, unsigned short>::Node_t, unsigned short, CUtlMap<CBaseEntity*, int, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<CBaseEntity*, int, unsigned short>::Node_t, unsigned short>, unsigned short> >::Links(unsigned short) const::s_Sentinel
 D guard variable for CUtlRBTree<CUtlMap<CChoreoActor*, CBaseFlex*, unsigned short>::Node_t, unsigned short, CUtlMap<CChoreoActor*, CBaseFlex*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<CChoreoActor*, CBaseFlex*, unsigned short>::Node_t, unsigned short>, unsigned short> >::Links(unsigned short) const::s_Sentinel
 D guard variable for CUtlRBTree<CUtlMap<CMsgTFXPSource_XPSourceType, float, unsigned short>::Node_t, unsigned short, CUtlMap<CMsgTFXPSource_XPSourceType, float, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<CMsgTFXPSource_XPSourceType, float, unsigned short>::Node_t, unsigned short>, unsigned short> >::Links(unsigned short) const::s_Sentinel
 D guard variable for CUtlRBTree<CUtlMap<CPhysCollide const*, BBox_t, unsigned short>::Node_t, unsigned short, CUtlMap<CPhysCollide const*, BBox_t, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<CPhysCollide const*, BBox_t, unsigned short>::Node_t, unsigned short>, unsigned short> >::Links(unsigned short) const::s_Sentinel
 D guard variable for CUtlRBTree<CUtlMap<CSteamID, GCSDK::CGCClientSharedObjectCache*, unsigned short>::Node_t, unsigned short, CUtlMap<CSteamID, GCSDK::CGCClientSharedObjectCache*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<CSteamID, GCSDK::CGCClientSharedObjectCache*, unsigned short>::Node_t, unsigned short>, unsigned short> >::Links(unsigned short) const::s_Sentinel
 D guard variable for CUtlRBTree<CUtlMap<CSteamID, float, unsigned short>::Node_t, unsigned short, CUtlMap<CSteamID, float, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<CSteamID, float, unsigned short>::Node_t, unsigned short>, unsigned short> >::Links(unsigned short) const::s_Sentinel
 D guard variable for CUtlRBTree<CUtlMap<CUtlConstStringBase<char>, int, unsigned short>::Node_t, unsigned short, CUtlMap<CUtlConstStringBase<char>, int, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<CUtlConstStringBase<char>, int, unsigned short>::Node_t, unsigned short>, unsigned short> >::Links(unsigned short) const::s_Sentinel
 D guard variable for CUtlRBTree<CUtlMap<CUtlString, float, unsigned short>::Node_t, unsigned short, CUtlMap<CUtlString, float, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<CUtlString, float, unsigned short>::Node_t, unsigned short>, unsigned short> >::Links(unsigned short) const::s_Sentinel
 D guard variable for CUtlRBTree<CUtlMap<EGameCategory, SchemaGameCategory_t*, unsigned short>::Node_t, unsigned short, CUtlMap<EGameCategory, SchemaGameCategory_t*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<EGameCategory, SchemaGameCategory_t*, unsigned short>::Node_t, unsigned short>, unsigned short> >::Links(unsigned short) const::s_Sentinel
 D guard variable for CUtlRBTree<CUtlMap<EMatchmakingGroupType, SchemaMMGroup_t*, unsigned short>::Node_t, unsigned short, CUtlMap<EMatchmakingGroupType, SchemaMMGroup_t*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<EMatchmakingGroupType, SchemaMMGroup_t*, unsigned short>::Node_t, unsigned short>, unsigned short> >::Links(unsigned short) const::s_Sentinel
 D guard variable for CUtlRBTree<CUtlMap<IPhysicsObject*, CPhysCollide const*, unsigned short>::Node_t, unsigned short, CUtlMap<IPhysicsObject*, CPhysCollide const*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<IPhysicsObject*, CPhysCollide const*, unsigned short>::Node_t, unsigned short>, unsigned short> >::Links(unsigned short) const::s_Sentinel
 D guard variable for CUtlRBTree<CUtlMap<IPhysicsObject*, int, unsigned short>::Node_t, unsigned short, CUtlMap<IPhysicsObject*, int, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<IPhysicsObject*, int, unsigned short>::Node_t, unsigned short>, unsigned short> >::Links(unsigned short) const::s_Sentinel
 D guard variable for CUtlRBTree<CUtlMap<char const*, AchievementAward_t*, int>::Node_t, int, CUtlMap<char const*, AchievementAward_t*, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, AchievementAward_t*, int>::Node_t, int>, int> >::Links(int) const::s_Sentinel
 D guard variable for CUtlRBTree<CUtlMap<char const*, BasicGameStatsRecord_t, unsigned short>::Node_t, unsigned short, CUtlMap<char const*, BasicGameStatsRecord_t, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, BasicGameStatsRecord_t, unsigned short>::Node_t, unsigned short>, unsigned short> >::Links(unsigned short) const::s_Sentinel
 D guard variable for CUtlRBTree<CUtlMap<char const*, CActivityRemapCache, int>::Node_t, int, CUtlMap<char const*, CActivityRemapCache, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CActivityRemapCache, int>::Node_t, int>, int> >::Links(int) const::s_Sentinel
 D guard variable for CUtlRBTree<CUtlMap<char const*, CDecalEmitterSystem::DecalEntry, int>::Node_t, int, CUtlMap<char const*, CDecalEmitterSystem::DecalEntry, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CDecalEmitterSystem::DecalEntry, int>::Node_t, int>, int> >::Links(int) const::s_Sentinel
 D guard variable for CUtlRBTree<CUtlMap<char const*, CEconItemCollectionDefinition*, int>::Node_t, int, CUtlMap<char const*, CEconItemCollectionDefinition*, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CEconItemCollectionDefinition*, int>::Node_t, int>, int> >::Links(int) const::s_Sentinel
 D guard variable for CUtlRBTree<CUtlMap<char const*, CEconItemPaintKitDefinition*, int>::Node_t, int, CUtlMap<char const*, CEconItemPaintKitDefinition*, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CEconItemPaintKitDefinition*, int>::Node_t, int>, int> >::Links(int) const::s_Sentinel
 D guard variable for CUtlRBTree<CUtlMap<char const*, CEconItemSetDefinition*, int>::Node_t, int, CUtlMap<char const*, CEconItemSetDefinition*, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CEconItemSetDefinition*, int>::Node_t, int>, int> >::Links(int) const::s_Sentinel
 D guard variable for CUtlRBTree<CUtlMap<char const*, CEconLootListDefinition*, int>::Node_t, int, CUtlMap<char const*, CEconLootListDefinition*, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CEconLootListDefinition*, int>::Node_t, int>, int> >::Links(int) const::s_Sentinel
 D guard variable for CUtlRBTree<CUtlMap<char const*, CEconOperationDefinition*, int>::Node_t, int, CUtlMap<char const*, CEconOperationDefinition*, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CEconOperationDefinition*, int>::Node_t, int>, int> >::Links(int) const::s_Sentinel
 D guard variable for CUtlRBTree<CUtlMap<char const*, CInstancedResponseSystem*, int>::Node_t, int, CUtlMap<char const*, CInstancedResponseSystem*, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CInstancedResponseSystem*, int>::Node_t, int>, int> >::Links(int) const::s_Sentinel
 D guard variable for CUtlRBTree<CUtlMap<char const*, CNavArea*, int>::Node_t, int, CUtlMap<char const*, CNavArea*, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CNavArea*, int>::Node_t, int>, int> >::Links(int) const::s_Sentinel
 D guard variable for CUtlRBTree<CUtlMap<char const*, CQuestThemeDefinition*, int>::Node_t, int, CUtlMap<char const*, CQuestThemeDefinition*, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CQuestThemeDefinition*, int>::Node_t, int>, int> >::Links(int) const::s_Sentinel
 D guard variable for CUtlRBTree<CUtlMap<char const*, CResponseSystem::Enumeration, short>::Node_t, short, CUtlMap<char const*, CResponseSystem::Enumeration, short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CResponseSystem::Enumeration, short>::Node_t, short>, short> >::Links(short) const::s_Sentinel
 D guard variable for CUtlRBTree<CUtlMap<char const*, CUserMessage*, int>::Node_t, int, CUtlMap<char const*, CUserMessage*, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CUserMessage*, int>::Node_t, int>, int> >::Links(int) const::s_Sentinel
 D guard variable for CUtlRBTree<CUtlMap<char const*, CUtlConstStringBase<char>, int>::Node_t, int, CUtlMap<char const*, CUtlConstStringBase<char>, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CUtlConstStringBase<char>, int>::Node_t, int>, int> >::Links(int) const::s_Sentinel
 D guard variable for CUtlRBTree<CUtlMap<char const*, CUtlVector<CItemLevelingDefinition, CUtlMemory<CItemLevelingDefinition, int> >*, int>::Node_t, int, CUtlMap<char const*, CUtlVector<CItemLevelingDefinition, CUtlMemory<CItemLevelingDefinition, int> >*, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CUtlVector<CItemLevelingDefinition, CUtlMemory<CItemLevelingDefinition, int> >*, int>::Node_t, int>, int> >::Links(int) const::s_Sentinel
 D guard variable for CUtlRBTree<CUtlMap<char const*, CUtlVector<schema_string_table_entry_t, CUtlMemory<schema_string_table_entry_t, int> >*, int>::Node_t, int, CUtlMap<char const*, CUtlVector<schema_string_table_entry_t, CUtlMemory<schema_string_table_entry_t, int> >*, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CUtlVector<schema_string_table_entry_t, CUtlMemory<schema_string_table_entry_t, int> >*, int>::Node_t, int>, int> >::Links(int) const::s_Sentinel
 D guard variable for CUtlRBTree<CUtlMap<char const*, ConceptHistory_t, int>::Node_t, int, CUtlMap<char const*, ConceptHistory_t, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, ConceptHistory_t, int>::Node_t, int>, int> >::Links(int) const::s_Sentinel
 D guard variable for CUtlRBTree<CUtlMap<char const*, ConceptInfo_t*, unsigned short>::Node_t, unsigned short, CUtlMap<char const*, ConceptInfo_t*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, ConceptInfo_t*, unsigned short>::Node_t, unsigned short>, unsigned short> >::Links(unsigned short) const::s_Sentinel
 D guard variable for CUtlRBTree<CUtlMap<char const*, Criteria, short>::Node_t, short, CUtlMap<char const*, Criteria, short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, Criteria, short>::Node_t, short>, short> >::Links(short) const::s_Sentinel
 D guard variable for CUtlRBTree<CUtlMap<char const*, EEquipType_t, int>::Node_t, int, CUtlMap<char const*, EEquipType_t, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, EEquipType_t, int>::Node_t, int>, int> >::Links(int) const::s_Sentinel
 D guard variable for CUtlRBTree<CUtlMap<char const*, EventGroup, int>::Node_t, int, CUtlMap<char const*, EventGroup, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, EventGroup, int>::Node_t, int>, int> >::Links(int) const::s_Sentinel
 D guard variable for CUtlRBTree<CUtlMap<char const*, FilePlayerClassInfo_t*, unsigned short>::Node_t, unsigned short, CUtlMap<char const*, FilePlayerClassInfo_t*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, FilePlayerClassInfo_t*, unsigned short>::Node_t, unsigned short>, unsigned short> >::Links(unsigned short) const::s_Sentinel
 D guard variable for CUtlRBTree<CUtlMap<char const*, FileWeaponInfo_t*, unsigned short>::Node_t, unsigned short, CUtlMap<char const*, FileWeaponInfo_t*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, FileWeaponInfo_t*, unsigned short>::Node_t, unsigned short>, unsigned short> >::Links(unsigned short) const::s_Sentinel
 D guard variable for CUtlRBTree<CUtlMap<char const*, IEntityFactory*, unsigned short>::Node_t, unsigned short, CUtlMap<char const*, IEntityFactory*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, IEntityFactory*, unsigned short>::Node_t, unsigned short>, unsigned short> >::Links(unsigned short) const::s_Sentinel
 D guard variable for CUtlRBTree<CUtlMap<char const*, KeyValues*, int>::Node_t, int, CUtlMap<char const*, KeyValues*, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, KeyValues*, int>::Node_t, int>, int> >::Links(int) const::s_Sentinel
 D guard variable for CUtlRBTree<CUtlMap<char const*, QuestConditionEntry_t*, unsigned short>::Node_t, unsigned short, CUtlMap<char const*, QuestConditionEntry_t*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, QuestConditionEntry_t*, unsigned short>::Node_t, unsigned short>, unsigned short> >::Links(unsigned short) const::s_Sentinel
 D guard variable for CUtlRBTree<CUtlMap<char const*, RateLimitedSound_t*, unsigned short>::Node_t, unsigned short, CUtlMap<char const*, RateLimitedSound_t*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, RateLimitedSound_t*, unsigned short>::Node_t, unsigned short>, unsigned short> >::Links(unsigned short) const::s_Sentinel
 D guard variable for CUtlRBTree<CUtlMap<char const*, ResponseGroup, short>::Node_t, short, CUtlMap<char const*, ResponseGroup, short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, ResponseGroup, short>::Node_t, short>, short> >::Links(short) const::s_Sentinel
 D guard variable for CUtlRBTree<CUtlMap<char const*, Rule, short>::Node_t, short, CUtlMap<char const*, Rule, short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, Rule, short>::Node_t, short>, short> >::Links(short) const::s_Sentinel
 D guard variable for CUtlRBTree<CUtlMap<char const*, TF_Gamestats_LevelStats_t, unsigned short>::Node_t, unsigned short, CUtlMap<char const*, TF_Gamestats_LevelStats_t, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, TF_Gamestats_LevelStats_t, unsigned short>::Node_t, unsigned short>, unsigned short> >::Links(unsigned short) const::s_Sentinel
 D guard variable for CUtlRBTree<CUtlMap<char const*, bool, int>::Node_t, int, CUtlMap<char const*, bool, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, bool, int>::Node_t, int>, int> >::Links(int) const::s_Sentinel
 D guard variable for CUtlRBTree<CUtlMap<char const*, codecontrolledbodygroupdata_t, unsigned short>::Node_t, unsigned short, CUtlMap<char const*, codecontrolledbodygroupdata_t, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, codecontrolledbodygroupdata_t, unsigned short>::Node_t, unsigned short>, unsigned short> >::Links(unsigned short) const::s_Sentinel
 D guard variable for CUtlRBTree<CUtlMap<char const*, float, int>::Node_t, int, CUtlMap<char const*, float, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, float, int>::Node_t, int>, int> >::Links(int) const::s_Sentinel
 D guard variable for CUtlRBTree<CUtlMap<char const*, int, int>::Node_t, int, CUtlMap<char const*, int, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, int, int>::Node_t, int>, int> >::Links(int) const::s_Sentinel
 D guard variable for CUtlRBTree<CUtlMap<char const*, int, unsigned short>::Node_t, unsigned short, CUtlMap<char const*, int, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, int, unsigned short>::Node_t, unsigned short>, unsigned short> >::Links(unsigned short) const::s_Sentinel
 D guard variable for CUtlRBTree<CUtlMap<int, CAIHintVector, unsigned short>::Node_t, unsigned short, CUtlMap<int, CAIHintVector, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<int, CAIHintVector, unsigned short>::Node_t, unsigned short>, unsigned short> >::Links(unsigned short) const::s_Sentinel
 D guard variable for CUtlRBTree<CUtlMap<int, CBaseAchievement*, unsigned short>::Node_t, unsigned short, CUtlMap<int, CBaseAchievement*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<int, CBaseAchievement*, unsigned short>::Node_t, unsigned short>, unsigned short> >::Links(unsigned short) const::s_Sentinel
 D guard variable for CUtlRBTree<CUtlMap<int, CBaseObject::constructor_t, unsigned short>::Node_t, unsigned short, CUtlMap<int, CBaseObject::constructor_t, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<int, CBaseObject::constructor_t, unsigned short>::Node_t, unsigned short>, unsigned short> >::Links(unsigned short) const::s_Sentinel
 D guard variable for CUtlRBTree<CUtlMap<int, CEconCraftingRecipeDefinition*, int>::Node_t, int, CUtlMap<int, CEconCraftingRecipeDefinition*, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<int, CEconCraftingRecipeDefinition*, int>::Node_t, int>, int> >::Links(int) const::s_Sentinel
 D guard variable for CUtlRBTree<CUtlMap<int, CEconItemAttributeDefinition, int>::Node_t, int, CUtlMap<int, CEconItemAttributeDefinition, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<int, CEconItemAttributeDefinition, int>::Node_t, int>, int> >::Links(int) const::s_Sentinel
 D guard variable for CUtlRBTree<CUtlMap<int, CEconItemDefinition*, int>::Node_t, int, CUtlMap<int, CEconItemDefinition*, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<int, CEconItemDefinition*, int>::Node_t, int>, int> >::Links(int) const::s_Sentinel
 D guard variable for CUtlRBTree<CUtlMap<int, CEconItemQualityDefinition, int>::Node_t, int, CUtlMap<int, CEconItemQualityDefinition, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<int, CEconItemQualityDefinition, int>::Node_t, int>, int> >::Links(int) const::s_Sentinel
 D guard variable for CUtlRBTree<CUtlMap<int, CEconItemRarityDefinition, int>::Node_t, int, CUtlMap<int, CEconItemRarityDefinition, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<int, CEconItemRarityDefinition, int>::Node_t, int>, int> >::Links(int) const::s_Sentinel
 D guard variable for CUtlRBTree<CUtlMap<int, CEconItemSeriesDefinition, int>::Node_t, int, CUtlMap<int, CEconItemSeriesDefinition, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<int, CEconItemSeriesDefinition, int>::Node_t, int>, int> >::Links(int) const::s_Sentinel
 D guard variable for CUtlRBTree<CUtlMap<int, CQuestObjectiveDefinition*, int>::Node_t, int, CUtlMap<int, CQuestObjectiveDefinition*, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<int, CQuestObjectiveDefinition*, int>::Node_t, int>, int> >::Links(int) const::s_Sentinel
 D guard variable for CUtlRBTree<CUtlMap<int, CTakeDamageInfo, unsigned short>::Node_t, unsigned short, CUtlMap<int, CTakeDamageInfo, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<int, CTakeDamageInfo, unsigned short>::Node_t, unsigned short>, unsigned short> >::Links(unsigned short) const::s_Sentinel
 D guard variable for CUtlRBTree<CUtlMap<int, CTeamControlPoint*, unsigned short>::Node_t, unsigned short, CUtlMap<int, CTeamControlPoint*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<int, CTeamControlPoint*, unsigned short>::Node_t, unsigned short>, unsigned short> >::Links(unsigned short) const::s_Sentinel
 D guard variable for CUtlRBTree<CUtlMap<int, GCSDK::CSharedObject::SharedObjectInfo_t, unsigned short>::Node_t, unsigned short, CUtlMap<int, GCSDK::CSharedObject::SharedObjectInfo_t, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<int, GCSDK::CSharedObject::SharedObjectInfo_t, unsigned short>::Node_t, unsigned short>, unsigned short> >::Links(unsigned short) const::s_Sentinel
 D guard variable for CUtlRBTree<CUtlMap<int, GCSDK::CSharedObjectTypeCache*, unsigned short>::Node_t, unsigned short, CUtlMap<int, GCSDK::CSharedObjectTypeCache*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<int, GCSDK::CSharedObjectTypeCache*, unsigned short>::Node_t, unsigned short>, unsigned short> >::Links(unsigned short) const::s_Sentinel
 D guard variable for CUtlRBTree<CUtlMap<int, attachedparticlesystem_t, unsigned short>::Node_t, unsigned short, CUtlMap<int, attachedparticlesystem_t, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<int, attachedparticlesystem_t, unsigned short>::Node_t, unsigned short>, unsigned short> >::Links(unsigned short) const::s_Sentinel
 D guard variable for CUtlRBTree<CUtlMap<int, char const*, unsigned short>::Node_t, unsigned short, CUtlMap<int, char const*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<int, char const*, unsigned short>::Node_t, unsigned short>, unsigned short> >::Links(unsigned short) const::s_Sentinel
 D guard variable for CUtlRBTree<CUtlMap<int, float, unsigned short>::Node_t, unsigned short, CUtlMap<int, float, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<int, float, unsigned short>::Node_t, unsigned short>, unsigned short> >::Links(unsigned short) const::s_Sentinel
 D guard variable for CUtlRBTree<CUtlMap<int, int, unsigned short>::Node_t, unsigned short, CUtlMap<int, int, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<int, int, unsigned short>::Node_t, unsigned short>, unsigned short> >::Links(unsigned short) const::s_Sentinel
 D guard variable for CUtlRBTree<CUtlMap<string_t, CSimpleSimTimer, char>::Node_t, char, CUtlMap<string_t, CSimpleSimTimer, char>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<string_t, CSimpleSimTimer, char>::Node_t, char>, char> >::Links(char) const::s_Sentinel
 D guard variable for CUtlRBTree<CUtlMap<string_t, CUtlVector<CTFGameRules::TeleportLocation_t, CUtlMemory<CTFGameRules::TeleportLocation_t, int> >*, unsigned short>::Node_t, unsigned short, CUtlMap<string_t, CUtlVector<CTFGameRules::TeleportLocation_t, CUtlMemory<CTFGameRules::TeleportLocation_t, int> >*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<string_t, CUtlVector<CTFGameRules::TeleportLocation_t, CUtlMemory<CTFGameRules::TeleportLocation_t, int> >*, unsigned short>::Node_t, unsigned short>, unsigned short> >::Links(unsigned short) const::s_Sentinel
 D guard variable for CUtlRBTree<CUtlMap<unsigned char, CWarDefinition*, unsigned short>::Node_t, unsigned short, CUtlMap<unsigned char, CWarDefinition*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<unsigned char, CWarDefinition*, unsigned short>::Node_t, unsigned short>, unsigned short> >::Links(unsigned short) const::s_Sentinel
 D guard variable for CUtlRBTree<CUtlMap<unsigned char, CWarDefinition::CWarSideDefinition_t, unsigned short>::Node_t, unsigned short, CUtlMap<unsigned char, CWarDefinition::CWarSideDefinition_t, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<unsigned char, CWarDefinition::CWarSideDefinition_t, unsigned short>::Node_t, unsigned short>, unsigned short> >::Links(unsigned short) const::s_Sentinel
 D guard variable for CUtlRBTree<CUtlMap<unsigned int, AchievementAward_t*, unsigned short>::Node_t, unsigned short, CUtlMap<unsigned int, AchievementAward_t*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<unsigned int, AchievementAward_t*, unsigned short>::Node_t, unsigned short>, unsigned short> >::Links(unsigned short) const::s_Sentinel
 D guard variable for CUtlRBTree<CUtlMap<unsigned int, CTFQuestObjectiveConditionsDefinition*, unsigned short>::Node_t, unsigned short, CUtlMap<unsigned int, CTFQuestObjectiveConditionsDefinition*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<unsigned int, CTFQuestObjectiveConditionsDefinition*, unsigned short>::Node_t, unsigned short>, unsigned short> >::Links(unsigned short) const::s_Sentinel
 D guard variable for CUtlRBTree<CUtlMap<unsigned int, GCSDK::JobStatsBucket_t, int>::Node_t, int, CUtlMap<unsigned int, GCSDK::JobStatsBucket_t, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<unsigned int, GCSDK::JobStatsBucket_t, int>::Node_t, int>, int> >::Links(int) const::s_Sentinel
 D guard variable for CUtlRBTree<CUtlMap<unsigned int, int, int>::Node_t, int, CUtlMap<unsigned int, int, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<unsigned int, int, int>::Node_t, int>, int> >::Links(int) const::s_Sentinel
 D guard variable for CUtlRBTree<CUtlMap<unsigned int, kill_eater_score_type_t, unsigned short>::Node_t, unsigned short, CUtlMap<unsigned int, kill_eater_score_type_t, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<unsigned int, kill_eater_score_type_t, unsigned short>::Node_t, unsigned short>, unsigned short> >::Links(unsigned short) const::s_Sentinel
 D guard variable for CUtlRBTree<CUtlMap<unsigned int, unsigned int, unsigned short>::Node_t, unsigned short, CUtlMap<unsigned int, unsigned int, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<unsigned int, unsigned int, unsigned short>::Node_t, unsigned short>, unsigned short> >::Links(unsigned short) const::s_Sentinel
 D guard variable for CUtlRBTree<CUtlMap<unsigned long long, CBaseSOTracker*, unsigned short>::Node_t, unsigned short, CUtlMap<unsigned long long, CBaseSOTracker*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<unsigned long long, CBaseSOTracker*, unsigned short>::Node_t, unsigned short>, unsigned short> >::Links(unsigned short) const::s_Sentinel
 D guard variable for CUtlRBTree<CUtlMap<unsigned long long, CPlayerWaveSpendingStats, unsigned short>::Node_t, unsigned short, CUtlMap<unsigned long long, CPlayerWaveSpendingStats, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<unsigned long long, CPlayerWaveSpendingStats, unsigned short>::Node_t, unsigned short>, unsigned short> >::Links(unsigned short) const::s_Sentinel
 D guard variable for CUtlRBTree<CUtlMap<unsigned long long, CTFWorkshopMap*, unsigned short>::Node_t, unsigned short, CUtlMap<unsigned long long, CTFWorkshopMap*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<unsigned long long, CTFWorkshopMap*, unsigned short>::Node_t, unsigned short>, unsigned short> >::Links(unsigned short) const::s_Sentinel
 D guard variable for CUtlRBTree<CUtlMap<unsigned long long, CommitRecord_t*, unsigned short>::Node_t, unsigned short, CUtlMap<unsigned long long, CommitRecord_t*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<unsigned long long, CommitRecord_t*, unsigned short>::Node_t, unsigned short>, unsigned short> >::Links(unsigned short) const::s_Sentinel
 D guard variable for CUtlRBTree<CUtlMap<unsigned long long, GCSDK::CJob*, int>::Node_t, int, CUtlMap<unsigned long long, GCSDK::CJob*, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<unsigned long long, GCSDK::CJob*, int>::Node_t, int>, int> >::Links(int) const::s_Sentinel
 D guard variable for CUtlRBTree<CUtlMap<unsigned long long, float, unsigned short>::Node_t, unsigned short, CUtlMap<unsigned long long, float, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<unsigned long long, float, unsigned short>::Node_t, unsigned short>, unsigned short> >::Links(unsigned short) const::s_Sentinel
 D guard variable for CUtlRBTree<CUtlMap<unsigned long long, int, int>::Node_t, int, CUtlMap<unsigned long long, int, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<unsigned long long, int, int>::Node_t, int>, int> >::Links(int) const::s_Sentinel
 D guard variable for CUtlRBTree<CUtlMap<unsigned long long, int, unsigned short>::Node_t, unsigned short, CUtlMap<unsigned long long, int, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<unsigned long long, int, unsigned short>::Node_t, unsigned short>, unsigned short> >::Links(unsigned short) const::s_Sentinel
 D guard variable for CUtlRBTree<CUtlMap<unsigned short, unsigned short, unsigned short>::Node_t, unsigned short, CUtlMap<unsigned short, unsigned short, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<unsigned short, unsigned short, unsigned short>::Node_t, unsigned short>, unsigned short> >::Links(unsigned short) const::s_Sentinel
 D guard variable for CUtlRBTree<CUtlMap<void*, CThreadSafeMultiMemoryPool::RawAllocation_t, int>::Node_t, int, CUtlMap<void*, CThreadSafeMultiMemoryPool::RawAllocation_t, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<void*, CThreadSafeMultiMemoryPool::RawAllocation_t, int>::Node_t, int>, int> >::Links(int) const::s_Sentinel
 D guard variable for CUtlRBTree<CUtlString, unsigned short, bool (*)(CUtlString const&, CUtlString const&), CUtlMemory<UtlRBTreeNode_t<CUtlString, unsigned short>, unsigned short> >::Links(unsigned short) const::s_Sentinel
 D guard variable for CUtlRBTree<CUtlSymbolTable::CStringPoolIndex, unsigned short, CUtlSymbolTable::CLess, CUtlMemory<UtlRBTreeNode_t<CUtlSymbolTable::CStringPoolIndex, unsigned short>, unsigned short> >::Links(unsigned short) const::s_Sentinel
 D guard variable for CUtlRBTree<GCSDK::JobType_t const*, unsigned short, bool (*)(GCSDK::JobType_t const* const&, GCSDK::JobType_t const* const&), CUtlMemory<UtlRBTreeNode_t<GCSDK::JobType_t const*, unsigned short>, unsigned short> >::Links(unsigned short) const::s_Sentinel
 D guard variable for CUtlRBTree<ThinkSync, unsigned short, bool (*)(ThinkSync const&, ThinkSync const&), CUtlMemory<UtlRBTreeNode_t<ThinkSync, unsigned short>, unsigned short> >::Links(unsigned short) const::s_Sentinel
 D guard variable for CUtlRBTree<VisibilityCacheEntry_t, unsigned short, CVisibilityCacheEntryLess, CUtlMemory<UtlRBTreeNode_t<VisibilityCacheEntry_t, unsigned short>, unsigned short> >::Links(unsigned short) const::s_Sentinel
 D guard variable for CUtlRBTree<char const*, unsigned short, bool (*)(char const* const&, char const* const&), CUtlMemory<UtlRBTreeNode_t<char const*, unsigned short>, unsigned short> >::Links(unsigned short) const::s_Sentinel
 D guard variable for CUtlRBTree<int, unsigned short, bool (*)(int const&, int const&), CUtlMemory<UtlRBTreeNode_t<int, unsigned short>, unsigned short> >::Links(unsigned short) const::s_Sentinel
 D guard variable for CUtlString const& CDmxAttribute::GetValue<CUtlString>() const::defaultValue
 D guard variable for CUtlString const& CDmxElement::GetValue<CUtlString>(char const*) const::defaultValue
 D guard variable for CUtlVector<CDmxElement*, CUtlMemory<CDmxElement*, int> > const& CDmxAttribute::GetArray<CDmxElement*>() const::defaultArray
 D guard variable for CUtlVector<CDmxElement*, CUtlMemory<CDmxElement*, int> > const& CDmxElement::GetArray<CDmxElement*>(char const*) const::defaultValue
 D guard variable for CUtlVectorUltraConservative<NavConnect, CUtlVectorUltraConservativeAllocator>::StaticData()::staticData
 D guard variable for CryptoPP::Singleton<CryptoPP::Integer, CryptoPP::NewInteger<1l>, 0>::Ref() const::s_pObject
 D guard variable for CryptoPP::Singleton<CryptoPP::Integer, CryptoPP::NewObject<CryptoPP::Integer>, 0>::Ref() const::s_pObject
 D guard variable for CryptoPP::Singleton<CryptoPP::PKCS1v15_SignatureMessageEncodingMethod, CryptoPP::NewObject<CryptoPP::PKCS1v15_SignatureMessageEncodingMethod>, 0>::Ref() const::s_pObject
 D guard variable for DmxElementUnpackStructure_t* DmxElementUnpackInit<CParticleSystemDefinition>(CParticleSystemDefinition*)::unpack
 D guard variable for DmxElementUnpackStructure_t* DmxElementUnpackInit<ParticleChildrenInfo_t>(ParticleChildrenInfo_t*)::unpack
 D guard variable for IBody::GetHullMaxs() const::hullMaxs
 D guard variable for IBody::GetHullMins() const::hullMins
 D guard variable for ISaveRestoreOps* CUtlMapDataopsInstantiator<2, 10>::GetDataOps<CUtlMap<string_t, CSimpleSimTimer, char> >(CUtlMap<string_t, CSimpleSimTimer, char>*)::ops
 D guard variable for ISaveRestoreOps* CUtlVectorDataopsInstantiator<10>::GetDataOps<CAI_InterestTarget>(CAI_InterestTarget*)::ops
 D guard variable for ISaveRestoreOps* CUtlVectorDataopsInstantiator<10>::GetDataOps<CUtlVector<AISquadEnemyInfo_t, CUtlMemory<AISquadEnemyInfo_t, int> > >(CUtlVector<AISquadEnemyInfo_t, CUtlMemory<AISquadEnemyInfo_t, int> >*)::ops
 D guard variable for ISaveRestoreOps* CUtlVectorDataopsInstantiator<10>::GetDataOps<CUtlVector<AI_Waypoint_t, CUtlMemory<AI_Waypoint_t, int> > >(CUtlVector<AI_Waypoint_t, CUtlMemory<AI_Waypoint_t, int> >*)::ops
 D guard variable for ISaveRestoreOps* CUtlVectorDataopsInstantiator<10>::GetDataOps<CUtlVector<CAI_ScriptConditionsElement, CUtlMemory<CAI_ScriptConditionsElement, int> > >(CUtlVector<CAI_ScriptConditionsElement, CUtlMemory<CAI_ScriptConditionsElement, int> >*)::ops
 D guard variable for ISaveRestoreOps* CUtlVectorDataopsInstantiator<10>::GetDataOps<CUtlVector<CAnimationLayer, CUtlMemory<CAnimationLayer, int> > >(CUtlVector<CAnimationLayer, CUtlMemory<CAnimationLayer, int> >*)::ops
 D guard variable for ISaveRestoreOps* CUtlVectorDataopsInstantiator<10>::GetDataOps<CUtlVector<CPassengerInfo, CUtlMemory<CPassengerInfo, int> > >(CUtlVector<CPassengerInfo, CUtlMemory<CPassengerInfo, int> >*)::ops
 D guard variable for ISaveRestoreOps* CUtlVectorDataopsInstantiator<10>::GetDataOps<CUtlVector<Relationship_t, CUtlMemory<Relationship_t, int> > >(CUtlVector<Relationship_t, CUtlMemory<Relationship_t, int> >*)::ops
 D guard variable for ISaveRestoreOps* CUtlVectorDataopsInstantiator<10>::GetDataOps<CUtlVector<ResponseContext_t, CUtlMemory<ResponseContext_t, int> > >(CUtlVector<ResponseContext_t, CUtlMemory<ResponseContext_t, int> >*)::ops
 D guard variable for ISaveRestoreOps* CUtlVectorDataopsInstantiator<10>::GetDataOps<CUtlVector<SaveRestoreBlockHeader_t, CUtlMemory<SaveRestoreBlockHeader_t, int> > >(CUtlVector<SaveRestoreBlockHeader_t, CUtlMemory<SaveRestoreBlockHeader_t, int> >*)::ops
 D guard variable for ISaveRestoreOps* CUtlVectorDataopsInstantiator<10>::GetDataOps<CUtlVector<ScriptedNPCInteraction_t, CUtlMemory<ScriptedNPCInteraction_t, int> > >(CUtlVector<ScriptedNPCInteraction_t, CUtlMemory<ScriptedNPCInteraction_t, int> >*)::ops
 D guard variable for ISaveRestoreOps* CUtlVectorDataopsInstantiator<10>::GetDataOps<CUtlVector<UnreachableEnt_t, CUtlMemory<UnreachableEnt_t, int> > >(CUtlVector<UnreachableEnt_t, CUtlMemory<UnreachableEnt_t, int> >*)::ops
 D guard variable for ISaveRestoreOps* CUtlVectorDataopsInstantiator<10>::GetDataOps<CUtlVector<globalentity_t, CUtlMemory<globalentity_t, int> > >(CUtlVector<globalentity_t, CUtlMemory<globalentity_t, int> >*)::ops
 D guard variable for ISaveRestoreOps* CUtlVectorDataopsInstantiator<10>::GetDataOps<CUtlVector<magnetted_objects_t, CUtlMemory<magnetted_objects_t, int> > >(CUtlVector<magnetted_objects_t, CUtlMemory<magnetted_objects_t, int> >*)::ops
 D guard variable for ISaveRestoreOps* CUtlVectorDataopsInstantiator<10>::GetDataOps<CUtlVector<modifiedconvars_t, CUtlMemory<modifiedconvars_t, int> > >(CUtlVector<modifiedconvars_t, CUtlMemory<modifiedconvars_t, int> >*)::ops
 D guard variable for ISaveRestoreOps* CUtlVectorDataopsInstantiator<10>::GetDataOps<CUtlVector<physfollower_t, CUtlMemory<physfollower_t, int> > >(CUtlVector<physfollower_t, CUtlMemory<physfollower_t, int> >*)::ops
 D guard variable for ISaveRestoreOps* CUtlVectorDataopsInstantiator<10>::GetDataOps<CUtlVector<template_t, CUtlMemory<template_t, int> > >(CUtlVector<template_t, CUtlMemory<template_t, int> >*)::ops
 D guard variable for ISaveRestoreOps* CUtlVectorDataopsInstantiator<10>::GetDataOps<CUtlVector<thinkfunc_t, CUtlMemory<thinkfunc_t, int> > >(CUtlVector<thinkfunc_t, CUtlMemory<thinkfunc_t, int> >*)::ops
 D guard variable for ISaveRestoreOps* CUtlVectorDataopsInstantiator<10>::GetDataOps<CUtlVector<vehicle_crashsound_t, CUtlMemory<vehicle_crashsound_t, int> > >(CUtlVector<vehicle_crashsound_t, CUtlMemory<vehicle_crashsound_t, int> >*)::ops
 D guard variable for ISaveRestoreOps* CUtlVectorDataopsInstantiator<10>::GetDataOps<CUtlVector<vehicle_gear_t, CUtlMemory<vehicle_gear_t, int> > >(CUtlVector<vehicle_gear_t, CUtlMemory<vehicle_gear_t, int> >*)::ops
 D guard variable for ISaveRestoreOps* CUtlVectorDataopsInstantiator<12>::GetDataOps<CUtlVector<CBaseEntity*, CUtlMemory<CBaseEntity*, int> > >(CUtlVector<CBaseEntity*, CUtlMemory<CBaseEntity*, int> >*)::ops
 D guard variable for ISaveRestoreOps* CUtlVectorDataopsInstantiator<13>::GetDataOps<CUtlVector<CHandle<CAI_BaseNPC>, CUtlMemory<CHandle<CAI_BaseNPC>, int> > >(CUtlVector<CHandle<CAI_BaseNPC>, CUtlMemory<CHandle<CAI_BaseNPC>, int> >*)::ops
 D guard variable for ISaveRestoreOps* CUtlVectorDataopsInstantiator<13>::GetDataOps<CUtlVector<CHandle<CBaseEntity>, CUtlMemory<CHandle<CBaseEntity>, int> > >(CUtlVector<CHandle<CBaseEntity>, CUtlMemory<CHandle<CBaseEntity>, int> >*)::ops
 D guard variable for ISaveRestoreOps* CUtlVectorDataopsInstantiator<13>::GetDataOps<CUtlVector<CHandle<CBaseFlex>, CUtlMemory<CHandle<CBaseFlex>, int> > >(CUtlVector<CHandle<CBaseFlex>, CUtlMemory<CHandle<CBaseFlex>, int> >*)::ops
 D guard variable for ISaveRestoreOps* CUtlVectorDataopsInstantiator<13>::GetDataOps<CUtlVector<CHandle<CBasePlayer>, CUtlMemory<CHandle<CBasePlayer>, int> > >(CUtlVector<CHandle<CBasePlayer>, CUtlMemory<CHandle<CBasePlayer>, int> >*)::ops
 D guard variable for ISaveRestoreOps* CUtlVectorDataopsInstantiator<13>::GetDataOps<CUtlVector<CHandle<CFish>, CUtlMemory<CHandle<CFish>, int> > >(CUtlVector<CHandle<CFish>, CUtlMemory<CHandle<CFish>, int> >*)::ops
 D guard variable for ISaveRestoreOps* CUtlVectorDataopsInstantiator<13>::GetDataOps<CUtlVector<CHandle<CSceneEntity>, CUtlMemory<CHandle<CSceneEntity>, int> > >(CUtlVector<CHandle<CSceneEntity>, CUtlMemory<CHandle<CSceneEntity>, int> >*)::ops
 D guard variable for ISaveRestoreOps* CUtlVectorDataopsInstantiator<13>::GetDataOps<CUtlVector<CHandle<CSceneListManager>, CUtlMemory<CHandle<CSceneListManager>, int> > >(CUtlVector<CHandle<CSceneListManager>, CUtlMemory<CHandle<CSceneListManager>, int> >*)::ops
 D guard variable for ISaveRestoreOps* CUtlVectorDataopsInstantiator<13>::GetDataOps<CUtlVector<CHandle<CVGuiScreen>, CUtlMemory<CHandle<CVGuiScreen>, int> > >(CUtlVector<CHandle<CVGuiScreen>, CUtlMemory<CHandle<CVGuiScreen>, int> >*)::ops
 D guard variable for ISaveRestoreOps* CUtlVectorDataopsInstantiator<5>::GetDataOps<CUtlVector<int, CUtlMemory<int, int> > >(CUtlVector<int, CUtlMemory<int, int> >*)::ops
 D guard variable for ISaveRestoreOps* GetBitstringDataOps<CBitVec<32> >(CBitVec<32>*)::ops
 D guard variable for PlayerLocomotion::GetDesiredLean() const::junk
 D guard variable for TAutoList<CFuncPasstimeGoal>::m_autolist
 D guard variable for TAutoList<CPasstimeBallController>::m_autolist
 D guard variable for bool CNavMesh::ForAllAreasInRadius<NavAreaCollector>(NavAreaCollector&, Vector const&, float)::searchMarker
 D guard variable for bool CNavMesh::ForAllAreasOverlappingExtent<CCollectAndLabelSpawnRoomAreas>(CCollectAndLabelSpawnRoomAreas&, Extent const&)::searchMarker
 D guard variable for bool CNavMesh::ForAllAreasOverlappingExtent<CFuncNavBlocker>(CFuncNavBlocker&, Extent const&)::searchMarker
 D guard variable for bool CNavMesh::ForAllAreasOverlappingExtent<CFuncNavObstruction>(CFuncNavObstruction&, Extent const&)::searchMarker
 D guard variable for bool CNavMesh::ForAllAreasOverlappingExtent<COverlapCheck>(COverlapCheck&, Extent const&)::searchMarker
 D guard variable for bool CNavMesh::ForAllAreasOverlappingExtent<CRegisterPrerequisite>(CRegisterPrerequisite&, Extent const&)::searchMarker
 D guard variable for bool CNavMesh::ForAllAreasOverlappingExtent<NavAreaCollector>(NavAreaCollector&, Extent const&)::searchMarker
 D guard variable for datamap_t* DataMapInit<AIExtendedSaveHeader_t>(AIExtendedSaveHeader_t*)::nameHolder
 D guard variable for datamap_t* DataMapInit<AIScheduleState_t>(AIScheduleState_t*)::nameHolder
 D guard variable for datamap_t* DataMapInit<AISquadEnemyInfo_t>(AISquadEnemyInfo_t*)::dataDesc
 D guard variable for datamap_t* DataMapInit<AISquadEnemyInfo_t>(AISquadEnemyInfo_t*)::nameHolder
 D guard variable for datamap_t* DataMapInit<AI_EnemyInfo_t>(AI_EnemyInfo_t*)::nameHolder
 D guard variable for datamap_t* DataMapInit<AI_FollowNavInfo_t>(AI_FollowNavInfo_t*)::nameHolder
 D guard variable for datamap_t* DataMapInit<AI_FollowParams_t>(AI_FollowParams_t*)::nameHolder
 D guard variable for datamap_t* DataMapInit<AI_FreePassParams_t>(AI_FreePassParams_t*)::nameHolder
 D guard variable for datamap_t* DataMapInit<AI_LeadArgs_t>(AI_LeadArgs_t*)::nameHolder
 D guard variable for datamap_t* DataMapInit<AI_Response>(AI_Response*)::nameHolder
 D guard variable for datamap_t* DataMapInit<AI_ResponseParams>(AI_ResponseParams*)::nameHolder
 D guard variable for datamap_t* DataMapInit<AI_StandoffParams_t>(AI_StandoffParams_t*)::nameHolder
 D guard variable for datamap_t* DataMapInit<AI_Waypoint_t>(AI_Waypoint_t*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CAISound>(CAISound*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CAI_AccelDecay>(CAI_AccelDecay*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CAI_AllySpeechManager>(CAI_AllySpeechManager*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CAI_AllySpeechManager>(CAI_AllySpeechManager*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CAI_AssaultBehavior>(CAI_AssaultBehavior*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CAI_AssaultGoal>(CAI_AssaultGoal*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CAI_BaseActor>(CAI_BaseActor*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CAI_BaseActor>(CAI_BaseActor*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CAI_BaseFlyingBot>(CAI_BaseFlyingBot*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CAI_BaseNPC>(CAI_BaseNPC*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CAI_BaseNPC>(CAI_BaseNPC*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CAI_BasePhysicsFlyingBot>(CAI_BasePhysicsFlyingBot*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CAI_BasePhysicsFlyingBot>(CAI_BasePhysicsFlyingBot*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CAI_BattleLine>(CAI_BattleLine*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CAI_BattleLine>(CAI_BattleLine*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CAI_BehaviorBase>(CAI_BehaviorBase*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CAI_BlendedMotor>(CAI_BlendedMotor*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CAI_ChangeHintGroup>(CAI_ChangeHintGroup*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CAI_ChangeTarget>(CAI_ChangeTarget*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CAI_DynamicLink>(CAI_DynamicLink*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CAI_DynamicLinkController>(CAI_DynamicLinkController*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CAI_Enemies>(CAI_Enemies*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CAI_Expresser>(CAI_Expresser*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CAI_FearBehavior>(CAI_FearBehavior*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CAI_FollowBehavior>(CAI_FollowBehavior*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CAI_FollowBehavior>(CAI_FollowBehavior*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CAI_FollowGoal>(CAI_FollowGoal*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CAI_FreePass>(CAI_FreePass*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CAI_GoalEntity>(CAI_GoalEntity*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CAI_GoalEntity>(CAI_GoalEntity*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CAI_Hint>(CAI_Hint*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CAI_Hint>(CAI_Hint*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CAI_InterestTarget_t>(CAI_InterestTarget_t*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CAI_LeadBehavior>(CAI_LeadBehavior*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CAI_LeadGoal>(CAI_LeadGoal*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CAI_LeadGoal>(CAI_LeadGoal*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CAI_LeadGoal_Weapon>(CAI_LeadGoal_Weapon*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CAI_LocalNavigator>(CAI_LocalNavigator*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CAI_LookTarget>(CAI_LookTarget*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CAI_Motor>(CAI_Motor*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CAI_Motor>(CAI_Motor*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CAI_MoveAndShootOverlay>(CAI_MoveAndShootOverlay*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CAI_MoveMonitor>(CAI_MoveMonitor*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CAI_MoveProbe>(CAI_MoveProbe*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CAI_Navigator>(CAI_Navigator*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CAI_Navigator>(CAI_Navigator*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CAI_NetworkManager>(CAI_NetworkManager*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CAI_NetworkManager>(CAI_NetworkManager*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CAI_Path>(CAI_Path*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CAI_Path>(CAI_Path*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CAI_Pathfinder>(CAI_Pathfinder*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CAI_PlayerAlly>(CAI_PlayerAlly*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CAI_PlayerAlly>(CAI_PlayerAlly*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CAI_ProxTester>(CAI_ProxTester*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CAI_RadialLinkController>(CAI_RadialLinkController*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CAI_RadialLinkController>(CAI_RadialLinkController*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CAI_RappelBehavior>(CAI_RappelBehavior*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CAI_Relationship>(CAI_Relationship*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CAI_Relationship>(CAI_Relationship*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CAI_ScriptConditions>(CAI_ScriptConditions*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CAI_ScriptConditions>(CAI_ScriptConditions*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CAI_ScriptConditionsElement>(CAI_ScriptConditionsElement*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CAI_ScriptedSchedule>(CAI_ScriptedSchedule*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CAI_ScriptedSchedule>(CAI_ScriptedSchedule*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CAI_ScriptedSentence>(CAI_ScriptedSentence*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CAI_ScriptedSentence>(CAI_ScriptedSentence*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CAI_ScriptedSequence>(CAI_ScriptedSequence*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CAI_ScriptedSequence>(CAI_ScriptedSequence*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CAI_Senses>(CAI_Senses*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CAI_Senses>(CAI_Senses*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CAI_SentenceBase>(CAI_SentenceBase*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CAI_ShotRegulator>(CAI_ShotRegulator*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CAI_SpeechFilter>(CAI_SpeechFilter*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CAI_Squad>(CAI_Squad*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CAI_Squad>(CAI_Squad*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CAI_StandoffBehavior>(CAI_StandoffBehavior*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CAI_StandoffGoal>(CAI_StandoffGoal*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CAI_TacticalServices>(CAI_TacticalServices*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CAI_TrackPather>(CAI_TrackPather*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CAchievementZone>(CAchievementZone*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CAmbientGeneric>(CAmbientGeneric*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CAmbientGeneric>(CAmbientGeneric*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CAnimationLayer>(CAnimationLayer*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CAnimationLayer>(CAnimationLayer*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CAreaPortal>(CAreaPortal*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CArenaLogic>(CArenaLogic*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CArenaLogic>(CArenaLogic*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CAssaultPoint>(CAssaultPoint*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CAssaultPoint>(CAssaultPoint*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CAttributeContainer>(CAttributeContainer*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CAttributeContainerPlayer>(CAttributeContainerPlayer*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CAttributeList>(CAttributeList*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CAttributeManager>(CAttributeManager*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CAttributeManager>(CAttributeManager*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CBaseAchievement>(CBaseAchievement*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CBaseAnimating>(CBaseAnimating*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CBaseAnimating>(CBaseAnimating*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CBaseAnimatingOverlay>(CBaseAnimatingOverlay*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CBaseAnimatingOverlay>(CBaseAnimatingOverlay*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CBaseAttributableItem>(CBaseAttributableItem*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CBaseButton>(CBaseButton*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CBaseButton>(CBaseButton*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CBaseCombatCharacter>(CBaseCombatCharacter*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CBaseCombatCharacter>(CBaseCombatCharacter*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CBaseCombatWeapon>(CBaseCombatWeapon*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CBaseCombatWeapon>(CBaseCombatWeapon*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CBaseDMStart>(CBaseDMStart*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CBaseDoor>(CBaseDoor*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CBaseDoor>(CBaseDoor*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CBaseEntity>(CBaseEntity*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CBaseEntity>(CBaseEntity*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CBaseEntityOutput>(CBaseEntityOutput*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CBaseEntityOutput>(CBaseEntityOutput*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CBaseFilter>(CBaseFilter*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CBaseFilter>(CBaseFilter*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CBaseFire>(CBaseFire*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CBaseFlex>(CBaseFlex*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CBaseGrenade>(CBaseGrenade*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CBaseGrenade>(CBaseGrenade*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CBaseGrenadeConcussion>(CBaseGrenadeConcussion*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CBaseGrenadeConcussion>(CBaseGrenadeConcussion*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CBaseMoveBehavior>(CBaseMoveBehavior*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CBaseNPCMaker>(CBaseNPCMaker*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CBaseNPCMaker>(CBaseNPCMaker*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CBaseObject>(CBaseObject*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CBaseObject>(CBaseObject*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CBasePlatTrain>(CBasePlatTrain*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CBasePlatTrain>(CBasePlatTrain*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CBasePlayer>(CBasePlayer*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CBasePlayer>(CBasePlayer*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CBasePropDoor>(CBasePropDoor*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CBasePropDoor>(CBasePropDoor*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CBaseServerVehicle>(CBaseServerVehicle*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CBaseServerVehicle>(CBaseServerVehicle*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CBaseTFBotHintEntity>(CBaseTFBotHintEntity*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CBaseTeamObjectiveResource>(CBaseTeamObjectiveResource*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CBaseTeamObjectiveResource>(CBaseTeamObjectiveResource*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CBaseToggle>(CBaseToggle*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CBaseTrigger>(CBaseTrigger*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CBaseTrigger>(CBaseTrigger*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CBaseVPhysicsTrigger>(CBaseVPhysicsTrigger*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CBaseViewModel>(CBaseViewModel*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CBaseViewModel>(CBaseViewModel*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CBeam>(CBeam*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CBlood>(CBlood*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CBoneFollower>(CBoneFollower*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CBoneFollowerManager>(CBoneFollowerManager*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CBoneFollowerManager>(CBoneFollowerManager*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CBonusDuckPickup>(CBonusDuckPickup*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CBonusPack>(CBonusPack*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CBreakable>(CBreakable*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CBreakable>(CBreakable*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CBreakableProp>(CBreakableProp*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CBreakableProp>(CBreakableProp*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CBreakableSurface>(CBreakableSurface*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CBreakableSurface>(CBreakableSurface*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CBubbling>(CBubbling*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CBubbling>(CBubbling*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CCPTimerLogic>(CCPTimerLogic*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CCPTimerLogic>(CCPTimerLogic*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CCaptureFlag>(CCaptureFlag*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CCaptureFlag>(CCaptureFlag*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CCaptureZone>(CCaptureZone*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CCaptureZone>(CCaptureZone*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CChangeLevel>(CChangeLevel*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CChangeLevel>(CChangeLevel*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CCollisionProperty>(CCollisionProperty*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CColorCorrection>(CColorCorrection*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CColorCorrection>(CColorCorrection*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CColorCorrectionVolume>(CColorCorrectionVolume*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CColorCorrectionVolume>(CColorCorrectionVolume*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CCommentaryAuto>(CCommentaryAuto*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CCommentaryAuto>(CCommentaryAuto*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CCommentarySystem>(CCommentarySystem*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CCommentarySystem>(CCommentarySystem*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CCompetitiveLogic>(CCompetitiveLogic*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CCompetitiveLogic>(CCompetitiveLogic*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CConstantForceController>(CConstantForceController*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CConstraintAnchor>(CConstraintAnchor*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CCopyRecipientFilter>(CCopyRecipientFilter*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CCopyRecipientFilter>(CCopyRecipientFilter*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CCredits>(CCredits*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CCredits>(CCredits*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CDebugHistory>(CDebugHistory*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CDecal>(CDecal*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CDecal>(CDecal*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CDynamicLight>(CDynamicLight*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CDynamicLight>(CDynamicLight*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CDynamicProp>(CDynamicProp*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CDynamicProp>(CDynamicProp*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CEconEntity>(CEconEntity*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CEconItemView>(CEconItemView*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CEconWearable>(CEconWearable*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CEmbers>(CEmbers*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CEmbers>(CEmbers*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CEntityDissolve>(CEntityDissolve*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CEntityDissolve>(CEntityDissolve*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CEntityFlame>(CEntityFlame*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CEntityFlame>(CEntityFlame*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CEntityParticleTrail>(CEntityParticleTrail*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CEntitySpawnManager>(CEntitySpawnManager*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CEntitySpawnPoint>(CEntitySpawnPoint*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CEnvBeam>(CEnvBeam*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CEnvBeam>(CEnvBeam*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CEnvBeverage>(CEnvBeverage*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CEnvDustPuff>(CEnvDustPuff*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CEnvEffectsScript>(CEnvEffectsScript*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CEnvEffectsScript>(CEnvEffectsScript*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CEnvEntityMaker>(CEnvEntityMaker*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CEnvEntityMaker>(CEnvEntityMaker*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CEnvExplosion>(CEnvExplosion*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CEnvExplosion>(CEnvExplosion*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CEnvFade>(CEnvFade*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CEnvFade>(CEnvFade*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CEnvFireSensor>(CEnvFireSensor*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CEnvFireSensor>(CEnvFireSensor*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CEnvFireSource>(CEnvFireSource*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CEnvFunnel>(CEnvFunnel*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CEnvGlobal>(CEnvGlobal*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CEnvGlobal>(CEnvGlobal*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CEnvGunfire>(CEnvGunfire*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CEnvGunfire>(CEnvGunfire*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CEnvHudHint>(CEnvHudHint*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CEnvLaser>(CEnvLaser*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CEnvLaser>(CEnvLaser*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CEnvMicrophone>(CEnvMicrophone*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CEnvMicrophone>(CEnvMicrophone*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CEnvMuzzleFlash>(CEnvMuzzleFlash*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CEnvParticleScript>(CEnvParticleScript*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CEnvPlayerSurfaceTrigger>(CEnvPlayerSurfaceTrigger*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CEnvPlayerSurfaceTrigger>(CEnvPlayerSurfaceTrigger*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CEnvProjectedTexture>(CEnvProjectedTexture*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CEnvProjectedTexture>(CEnvProjectedTexture*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CEnvQuadraticBeam>(CEnvQuadraticBeam*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CEnvScreenEffect>(CEnvScreenEffect*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CEnvScreenOverlay>(CEnvScreenOverlay*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CEnvScreenOverlay>(CEnvScreenOverlay*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CEnvShake>(CEnvShake*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CEnvShake>(CEnvShake*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CEnvShooter>(CEnvShooter*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CEnvSoundscape>(CEnvSoundscape*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CEnvSoundscape>(CEnvSoundscape*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CEnvSoundscapeProxy>(CEnvSoundscapeProxy*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CEnvSoundscapeTriggerable>(CEnvSoundscapeTriggerable*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CEnvSpark>(CEnvSpark*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CEnvSpark>(CEnvSpark*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CEnvSplash>(CEnvSplash*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CEnvTonemapController>(CEnvTonemapController*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CEnvTonemapController>(CEnvTonemapController*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CEnvTracer>(CEnvTracer*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CEnvTracer>(CEnvTracer*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CEnvViewPunch>(CEnvViewPunch*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CEnvWind>(CEnvWind*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CEnvWind>(CEnvWind*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CEnvZoom>(CEnvZoom*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CEventAction>(CEventAction*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CEventQueue>(CEventQueue*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CExtraMapEntity>(CExtraMapEntity*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CExtraMapEntity>(CExtraMapEntity*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CFailableAchievement>(CFailableAchievement*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CFilterClass>(CFilterClass*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CFilterEnemy>(CFilterEnemy*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CFilterMassGreater>(CFilterMassGreater*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CFilterMultiple>(CFilterMultiple*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CFilterName>(CFilterName*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CFilterTFBotHasTag>(CFilterTFBotHasTag*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CFilterTFCanCap>(CFilterTFCanCap*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CFilterTFClass>(CFilterTFClass*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CFilterTFCondition>(CFilterTFCondition*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CFilterTFTeam>(CFilterTFTeam*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CFire>(CFire*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CFire>(CFire*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CFireSmoke>(CFireSmoke*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CFireTrail>(CFireTrail*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CFish>(CFish*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CFishPool>(CFishPool*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CFishPool>(CFishPool*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CFlagDetectionZone>(CFlagDetectionZone*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CFlagDetectionZone>(CFlagDetectionZone*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CFlexCycler>(CFlexCycler*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CFlextalkActor>(CFlextalkActor*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CFogController>(CFogController*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CFogController>(CFogController*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CFourWheelServerVehicle>(CFourWheelServerVehicle*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CFourWheelVehiclePhysics>(CFourWheelVehiclePhysics*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CFuncAreaPortalBase>(CFuncAreaPortalBase*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CFuncAreaPortalWindow>(CFuncAreaPortalWindow*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CFuncBrush>(CFuncBrush*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CFuncConveyor>(CFuncConveyor*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CFuncFlagAlertZone>(CFuncFlagAlertZone*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CFuncFlagAlertZone>(CFuncFlagAlertZone*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CFuncForceField>(CFuncForceField*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CFuncLadder>(CFuncLadder*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CFuncLadder>(CFuncLadder*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CFuncMonitor>(CFuncMonitor*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CFuncMoveLinear>(CFuncMoveLinear*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CFuncMoveLinear>(CFuncMoveLinear*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CFuncNavBlocker>(CFuncNavBlocker*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CFuncNavCost>(CFuncNavCost*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CFuncNavCost>(CFuncNavCost*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CFuncNavObstruction>(CFuncNavObstruction*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CFuncNavPrerequisite>(CFuncNavPrerequisite*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CFuncNoBuild>(CFuncNoBuild*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CFuncOccluder>(CFuncOccluder*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CFuncPasstimeGoal>(CFuncPasstimeGoal*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CFuncPasstimeGoal>(CFuncPasstimeGoal*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CFuncPasstimeGoalieZone>(CFuncPasstimeGoalieZone*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CFuncPasstimeNoBallZone>(CFuncPasstimeNoBallZone*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CFuncPlat>(CFuncPlat*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CFuncPlat>(CFuncPlat*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CFuncPlatRot>(CFuncPlatRot*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CFuncReflectiveGlass>(CFuncReflectiveGlass*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CFuncRespawnFlagZone>(CFuncRespawnFlagZone*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CFuncRespawnFlagZone>(CFuncRespawnFlagZone*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CFuncRespawnRoom>(CFuncRespawnRoom*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CFuncRespawnRoom>(CFuncRespawnRoom*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CFuncRespawnRoomVisualizer>(CFuncRespawnRoomVisualizer*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CFuncRotating>(CFuncRotating*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CFuncRotating>(CFuncRotating*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CFuncSmokeVolume>(CFuncSmokeVolume*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CFuncSuggestedBuild>(CFuncSuggestedBuild*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CFuncSuggestedBuild>(CFuncSuggestedBuild*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CFuncTankTrain>(CFuncTankTrain*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CFuncTankTrain>(CFuncTankTrain*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CFuncTrackAuto>(CFuncTrackAuto*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CFuncTrackChange>(CFuncTrackChange*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CFuncTrackChange>(CFuncTrackChange*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CFuncTrackTrain>(CFuncTrackTrain*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CFuncTrackTrain>(CFuncTrackTrain*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CFuncTrain>(CFuncTrain*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CFuncTrain>(CFuncTrain*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CFuncTrainControls>(CFuncTrainControls*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CFuncTrainControls>(CFuncTrainControls*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CFuncVPhysicsClip>(CFuncVPhysicsClip*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CFuncVehicleClip>(CFuncVehicleClip*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CFuncWall>(CFuncWall*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CFuncWallToggle>(CFuncWallToggle*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CFunc_Dust>(CFunc_Dust*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CFunc_LOD>(CFunc_LOD*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CGameEnd>(CGameEnd*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CGameGibManager>(CGameGibManager*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CGamePlayerEquip>(CGamePlayerEquip*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CGamePlayerZone>(CGamePlayerZone*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CGamePlayerZone>(CGamePlayerZone*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CGameScore>(CGameScore*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CGameText>(CGameText*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CGameUI>(CGameUI*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CGameUI>(CGameUI*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CGameWeaponManager>(CGameWeaponManager*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CGameWeaponManager>(CGameWeaponManager*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CGenericActor>(CGenericActor*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CGib>(CGib*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CGib>(CGib*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CGibShooter>(CGibShooter*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CGibShooter>(CGibShooter*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CGlobalState>(CGlobalState*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CGlobalState>(CGlobalState*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CGunTarget>(CGunTarget*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CGunTarget>(CGunTarget*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CHalloweenGiftPickup>(CHalloweenGiftPickup*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CHalloweenPickup>(CHalloweenPickup*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CHalloweenPickup>(CHalloweenPickup*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CHightower_TeleportVortex>(CHightower_TeleportVortex*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CInfoCameraLink>(CInfoCameraLink*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CInfoLightingRelative>(CInfoLightingRelative*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CInfoOverlayAccessor>(CInfoOverlayAccessor*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CInstancedSceneEntity>(CInstancedSceneEntity*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CIntroViewpoint>(CIntroViewpoint*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CItem>(CItem*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CItem>(CItem*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CItemSoda>(CItemSoda*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CItemSoda>(CItemSoda*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CKeepUpright>(CKeepUpright*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CKeepUpright>(CKeepUpright*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CKothLogic>(CKothLogic*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CLaserDot>(CLaserDot*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CLight>(CLight*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CLight>(CLight*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CLightGlow>(CLightGlow*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CLogicActiveAutosave>(CLogicActiveAutosave*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CLogicActiveAutosave>(CLogicActiveAutosave*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CLogicAuto>(CLogicAuto*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CLogicAuto>(CLogicAuto*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CLogicAutosave>(CLogicAutosave*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CLogicBranch>(CLogicBranch*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CLogicBranch>(CLogicBranch*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CLogicBranchList>(CLogicBranchList*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CLogicBranchList>(CLogicBranchList*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CLogicCase>(CLogicCase*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CLogicCase>(CLogicCase*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CLogicCollisionPair>(CLogicCollisionPair*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CLogicCompare>(CLogicCompare*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CLogicCompare>(CLogicCompare*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CLogicCompareInteger>(CLogicCompareInteger*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CLogicCompareInteger>(CLogicCompareInteger*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CLogicLineToEntity>(CLogicLineToEntity*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CLogicLineToEntity>(CLogicLineToEntity*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CLogicMannPower>(CLogicMannPower*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CLogicMeasureMovement>(CLogicMeasureMovement*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CLogicMeasureMovement>(CLogicMeasureMovement*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CLogicNavigation>(CLogicNavigation*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CLogicOnHoliday>(CLogicOnHoliday*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CLogicOnHoliday>(CLogicOnHoliday*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CLogicRelay>(CLogicRelay*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CLogicRelay>(CLogicRelay*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CMannVsMachineLogic>(CMannVsMachineLogic*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CMannVsMachineLogic>(CMannVsMachineLogic*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CMaterialModifyControl>(CMaterialModifyControl*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CMathColorBlend>(CMathColorBlend*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CMathColorBlend>(CMathColorBlend*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CMathCounter>(CMathCounter*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CMathCounter>(CMathCounter*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CMathRemap>(CMathRemap*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CMathRemap>(CMathRemap*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CMessage>(CMessage*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CMessage>(CMessage*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CMessageEntity>(CMessageEntity*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CMomentaryRotButton>(CMomentaryRotButton*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CMomentaryRotButton>(CMomentaryRotButton*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CMonsterResource>(CMonsterResource*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CMonsterResource>(CMonsterResource*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CMotorController>(CMotorController*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CMovementSpeedMod>(CMovementSpeedMod*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CMultiDamage>(CMultiDamage*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CMultiSource>(CMultiSource*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CMultiSource>(CMultiSource*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CNPCMaker>(CNPCMaker*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CNPCSpawnDestination>(CNPCSpawnDestination*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CNPCSpawnDestination>(CNPCSpawnDestination*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CNPC_Furniture>(CNPC_Furniture*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CNPC_VehicleDriver>(CNPC_VehicleDriver*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CNodeEnt>(CNodeEnt*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CObjectCartDispenser>(CObjectCartDispenser*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CObjectDispenser>(CObjectDispenser*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CObjectDispenser>(CObjectDispenser*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CObjectSapper>(CObjectSapper*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CObjectSapper>(CObjectSapper*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CObjectSentrygun>(CObjectSentrygun*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CObjectTeleporter>(CObjectTeleporter*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CObjectTeleporter>(CObjectTeleporter*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CObserverPoint>(CObserverPoint*)::nameHolder
 D guard variable for datamap_t* DataMapInit<COrnamentProp>(COrnamentProp*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CParticleFire>(CParticleFire*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CParticleLight>(CParticleLight*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CParticlePerformanceMonitor>(CParticlePerformanceMonitor*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CParticleSystem>(CParticleSystem*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CParticleSystem>(CParticleSystem*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CPassengerInfo>(CPassengerInfo*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CPasstimeBallSpawn>(CPasstimeBallSpawn*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CPasstimeBallSpawn>(CPasstimeBallSpawn*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CPathCorner>(CPathCorner*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CPathCorner>(CPathCorner*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CPathKeyFrame>(CPathKeyFrame*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CPathTrack>(CPathTrack*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CPathTrack>(CPathTrack*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CPhysBox>(CPhysBox*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CPhysBox>(CPhysBox*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CPhysBoxMultiplayer>(CPhysBoxMultiplayer*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CPhysConstraint>(CPhysConstraint*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CPhysConstraint>(CPhysConstraint*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CPhysConstraintSystem>(CPhysConstraintSystem*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CPhysConstraintSystem>(CPhysConstraintSystem*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CPhysConvert>(CPhysConvert*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CPhysConvert>(CPhysConvert*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CPhysExplosion>(CPhysExplosion*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CPhysExplosion>(CPhysExplosion*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CPhysForce>(CPhysForce*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CPhysForce>(CPhysForce*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CPhysHinge>(CPhysHinge*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CPhysImpact>(CPhysImpact*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CPhysImpact>(CPhysImpact*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CPhysLength>(CPhysLength*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CPhysMagnet>(CPhysMagnet*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CPhysMagnet>(CPhysMagnet*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CPhysMotor>(CPhysMotor*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CPhysMotor>(CPhysMotor*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CPhysPulley>(CPhysPulley*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CPhysSlideConstraint>(CPhysSlideConstraint*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CPhysThruster>(CPhysThruster*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CPhysTorque>(CPhysTorque*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CPhysicsCannister>(CPhysicsCannister*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CPhysicsCannister>(CPhysicsCannister*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CPhysicsEntitySolver>(CPhysicsEntitySolver*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CPhysicsNPCSolver>(CPhysicsNPCSolver*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CPhysicsNPCSolver>(CPhysicsNPCSolver*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CPhysicsProp>(CPhysicsProp*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CPhysicsProp>(CPhysicsProp*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CPhysicsPropMultiplayer>(CPhysicsPropMultiplayer*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CPhysicsPropRespawnable>(CPhysicsPropRespawnable*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CPhysicsPropRespawnable>(CPhysicsPropRespawnable*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CPhysicsShake>(CPhysicsShake*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CPhysicsSpring>(CPhysicsSpring*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CPhysicsSpring>(CPhysicsSpring*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CPhysicsWind>(CPhysicsWind*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CPhysicsWire>(CPhysicsWire*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CPlasma>(CPlasma*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CPlayerDestructionDispenser>(CPlayerDestructionDispenser*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CPlayerLocalData>(CPlayerLocalData*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CPlayerResource>(CPlayerResource*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CPlayerResource>(CPlayerResource*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CPlayerState>(CPlayerState*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CPointAngleSensor>(CPointAngleSensor*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CPointAngleSensor>(CPointAngleSensor*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CPointAngularVelocitySensor>(CPointAngularVelocitySensor*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CPointAngularVelocitySensor>(CPointAngularVelocitySensor*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CPointBonusMapsAccessor>(CPointBonusMapsAccessor*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CPointCamera>(CPointCamera*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CPointCamera>(CPointCamera*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CPointClientCommand>(CPointClientCommand*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CPointCommentaryNode>(CPointCommentaryNode*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CPointCommentaryNode>(CPointCommentaryNode*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CPointDevShotCamera>(CPointDevShotCamera*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CPointDevShotCamera>(CPointDevShotCamera*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CPointGamestatsCounter>(CPointGamestatsCounter*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CPointHurt>(CPointHurt*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CPointHurt>(CPointHurt*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CPointNavInterface>(CPointNavInterface*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CPointPlayerMoveConstraint>(CPointPlayerMoveConstraint*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CPointPlayerMoveConstraint>(CPointPlayerMoveConstraint*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CPointPopulatorInterface>(CPointPopulatorInterface*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CPointProximitySensor>(CPointProximitySensor*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CPointProximitySensor>(CPointProximitySensor*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CPointPush>(CPointPush*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CPointPush>(CPointPush*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CPointServerCommand>(CPointServerCommand*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CPointSpotlight>(CPointSpotlight*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CPointSpotlight>(CPointSpotlight*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CPointTeleport>(CPointTeleport*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CPointTemplate>(CPointTemplate*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CPointTemplate>(CPointTemplate*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CPointVelocitySensor>(CPointVelocitySensor*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CPointVelocitySensor>(CPointVelocitySensor*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CPopulationManager>(CPopulationManager*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CPopulationManager>(CPopulationManager*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CPoseController>(CPoseController*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CPoseController>(CPoseController*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CPrecipitation>(CPrecipitation*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CProjectedDecal>(CProjectedDecal*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CProjectedDecal>(CProjectedDecal*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CPropDoorRotating>(CPropDoorRotating*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CPropSoccerBall>(CPropSoccerBall*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CPropVehicle>(CPropVehicle*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CPropVehicle>(CPropVehicle*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CPropVehicleDriveable>(CPropVehicleDriveable*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CPropVehicleDriveable>(CPropVehicleDriveable*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CRagdollBoogie>(CRagdollBoogie*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CRagdollBoogie>(CRagdollBoogie*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CRagdollConstraint>(CRagdollConstraint*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CRagdollMagnet>(CRagdollMagnet*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CRagdollManager>(CRagdollManager*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CRagdollProp>(CRagdollProp*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CRagdollProp>(CRagdollProp*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CRagdollPropAttached>(CRagdollPropAttached*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CRagdollPropAttached>(CRagdollPropAttached*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CRallyPoint>(CRallyPoint*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CRallyPoint>(CRallyPoint*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CRandSimTimer>(CRandSimTimer*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CRandStopwatch>(CRandStopwatch*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CRegenerateZone>(CRegenerateZone*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CRegenerateZone>(CRegenerateZone*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CRevertSaved>(CRevertSaved*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CRevertSaved>(CRevertSaved*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CRobotDestructionVaultTrigger>(CRobotDestructionVaultTrigger*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CRobotDestructionVaultTrigger>(CRobotDestructionVaultTrigger*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CRobotDispenser>(CRobotDispenser*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CRopeAnchor>(CRopeAnchor*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CRopeAnchor>(CRopeAnchor*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CRopeKeyframe>(CRopeKeyframe*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CRotDoor>(CRotDoor*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CRotorWashShooter>(CRotorWashShooter*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CRuleEntity>(CRuleEntity*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CRulePointEntity>(CRulePointEntity*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CSceneEntity>(CSceneEntity*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CSceneEntity>(CSceneEntity*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CSceneListManager>(CSceneListManager*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CSceneListManager>(CSceneListManager*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CSceneManager>(CSceneManager*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CSceneManager>(CSceneManager*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CScriptedTarget>(CScriptedTarget*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CScriptedTarget>(CScriptedTarget*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CServerNetworkProperty>(CServerNetworkProperty*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CShadowControl>(CShadowControl*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CSimTimer>(CSimTimer*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CSimpleSimTimer>(CSimpleSimTimer*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CSkyCamera>(CSkyCamera*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CSlideshowDisplay>(CSlideshowDisplay*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CSmokeStack>(CSmokeStack*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CSmokeStackLightInfo>(CSmokeStackLightInfo*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CSniperDot>(CSniperDot*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CSound>(CSound*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CSoundEnt>(CSoundEnt*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CSoundEnvelope>(CSoundEnvelope*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CSoundPatch>(CSoundPatch*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CSpellPickup>(CSpellPickup*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CSpotlightEnd>(CSpotlightEnd*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CSprite>(CSprite*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CSprite>(CSprite*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CSpriteTrail>(CSpriteTrail*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CSteamJet>(CSteamJet*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CStopwatch>(CStopwatch*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CStopwatchBase>(CStopwatchBase*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CStripWeapons>(CStripWeapons*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CSun>(CSun*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CTFAmmoPack>(CTFAmmoPack*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CTFAmmoPack>(CTFAmmoPack*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CTFBaseBoss>(CTFBaseBoss*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CTFBaseBoss>(CTFBaseBoss*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CTFBaseProjectile>(CTFBaseProjectile*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CTFBaseProjectile>(CTFBaseProjectile*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CTFBaseRocket>(CTFBaseRocket*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CTFBotActionPoint>(CTFBotActionPoint*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CTFBotActionPoint>(CTFBotActionPoint*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CTFBotController>(CTFBotController*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CTFBotController>(CTFBotController*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CTFBotGenerator>(CTFBotGenerator*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CTFBotGenerator>(CTFBotGenerator*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CTFBotHint>(CTFBotHint*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CTFBotHintEngineerNest>(CTFBotHintEngineerNest*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CTFBotHintSentrygun>(CTFBotHintSentrygun*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CTFBotHintSentrygun>(CTFBotHintSentrygun*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CTFBotHintTeleporterExit>(CTFBotHintTeleporterExit*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CTFBotProxy>(CTFBotProxy*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CTFBotProxy>(CTFBotProxy*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CTFBotRoster>(CTFBotRoster*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CTFChargedSMG>(CTFChargedSMG*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CTFCompoundBow>(CTFCompoundBow*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CTFCrossbow>(CTFCrossbow*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CTFFlameThrower>(CTFFlameThrower*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CTFFlareGun>(CTFFlareGun*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CTFForceRespawn>(CTFForceRespawn*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CTFForceRespawn>(CTFForceRespawn*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CTFGameRulesProxy>(CTFGameRulesProxy*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CTFGameRulesProxy>(CTFGameRulesProxy*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CTFGenericBomb>(CTFGenericBomb*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CTFGenericBomb>(CTFGenericBomb*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CTFGlow>(CTFGlow*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CTFGrapplingHook>(CTFGrapplingHook*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CTFGrenadeLauncher>(CTFGrenadeLauncher*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CTFGrenadePipebombProjectile>(CTFGrenadePipebombProjectile*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CTFHalloweenFortuneTeller>(CTFHalloweenFortuneTeller*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CTFHalloweenFortuneTeller>(CTFHalloweenFortuneTeller*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CTFHalloweenMinigame>(CTFHalloweenMinigame*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CTFHalloweenMinigame_FallingPlatforms>(CTFHalloweenMinigame_FallingPlatforms*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CTFHalloweenMinigame_FallingPlatforms>(CTFHalloweenMinigame_FallingPlatforms*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CTFHellZap>(CTFHellZap*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CTFHolidayEntity>(CTFHolidayEntity*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CTFHudNotify>(CTFHudNotify*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CTFInfoPowerupSpawn>(CTFInfoPowerupSpawn*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CTFIntermission>(CTFIntermission*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CTFLunchBox>(CTFLunchBox*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CTFMedigunShield>(CTFMedigunShield*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CTFMedigunShield>(CTFMedigunShield*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CTFMiniGame>(CTFMiniGame*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CTFMiniGame>(CTFMiniGame*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CTFMinigameLogic>(CTFMinigameLogic*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CTFMinigun>(CTFMinigun*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CTFObjectiveResource>(CTFObjectiveResource*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CTFParticleCannon>(CTFParticleCannon*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CTFPasstimeLogic>(CTFPasstimeLogic*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CTFPasstimeLogic>(CTFPasstimeLogic*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CTFPipebombLauncher>(CTFPipebombLauncher*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CTFPistol>(CTFPistol*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CTFPlayer>(CTFPlayer*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CTFPlayerDestructionLogic>(CTFPlayerDestructionLogic*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CTFPlayerDestructionLogic>(CTFPlayerDestructionLogic*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CTFPointWeaponMimic>(CTFPointWeaponMimic*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CTFPowerup>(CTFPowerup*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CTFPowerupBottle>(CTFPowerupBottle*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CTFProjectile_Arrow>(CTFProjectile_Arrow*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CTFProjectile_Arrow>(CTFProjectile_Arrow*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CTFProjectile_EnergyBall>(CTFProjectile_EnergyBall*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CTFProjectile_Flare>(CTFProjectile_Flare*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CTFProjectile_Flare>(CTFProjectile_Flare*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CTFProjectile_GrapplingHook>(CTFProjectile_GrapplingHook*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CTFProjectile_HealingBolt>(CTFProjectile_HealingBolt*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CTFReviveMarker>(CTFReviveMarker*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CTFReviveMarker>(CTFReviveMarker*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CTFRevolver>(CTFRevolver*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CTFRobotDestructionLogic>(CTFRobotDestructionLogic*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CTFRobotDestructionLogic>(CTFRobotDestructionLogic*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CTFRobotDestruction_Robot>(CTFRobotDestruction_Robot*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CTFRobotDestruction_RobotGroup>(CTFRobotDestruction_RobotGroup*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CTFRobotDestruction_RobotGroup>(CTFRobotDestruction_RobotGroup*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CTFRobotDestruction_RobotSpawn>(CTFRobotDestruction_RobotSpawn*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CTFRobotDestruction_RobotSpawn>(CTFRobotDestruction_RobotSpawn*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CTFRocketLauncher>(CTFRocketLauncher*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CTFRocketLauncher_AirStrike>(CTFRocketLauncher_AirStrike*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CTFRocketLauncher_DirectHit>(CTFRocketLauncher_DirectHit*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CTFRocketLauncher_Mortar>(CTFRocketLauncher_Mortar*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CTFSMG>(CTFSMG*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CTFSniperRifle>(CTFSniperRifle*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CTFSpawner>(CTFSpawner*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CTFSpawner>(CTFSpawner*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CTFSpell_MeteorShowerSpawner>(CTFSpell_MeteorShowerSpawner*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CTFSyringeGun>(CTFSyringeGun*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CTFTankBoss>(CTFTankBoss*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CTFTankBoss>(CTFTankBoss*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CTFTankDestruction>(CTFTankDestruction*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CTFTankDestruction>(CTFTankDestruction*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CTFTeamSpawn>(CTFTeamSpawn*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CTFWeaponBase>(CTFWeaponBase*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CTFWeaponBase>(CTFWeaponBase*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CTFWeaponBaseGrenadeProj>(CTFWeaponBaseGrenadeProj*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CTFWeaponBaseGrenadeProj>(CTFWeaponBaseGrenadeProj*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CTFWeaponBaseGun>(CTFWeaponBaseGun*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CTFWeaponBaseGun>(CTFWeaponBaseGun*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CTFWeaponBaseMelee>(CTFWeaponBaseMelee*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CTFWeaponBaseMelee>(CTFWeaponBaseMelee*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CTFWeaponInvis>(CTFWeaponInvis*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CTFWeaponPDA>(CTFWeaponPDA*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CTFWeaponPDAExpansion_Dispenser>(CTFWeaponPDAExpansion_Dispenser*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CTFWeaponPDAExpansion_Teleporter>(CTFWeaponPDAExpansion_Teleporter*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CTFWearable>(CTFWearable*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CTFWearableDemoShield>(CTFWearableDemoShield*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CTFWearableItem>(CTFWearableItem*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CTFWearableLevelableItem>(CTFWearableLevelableItem*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CTakeDamageInfo>(CTakeDamageInfo*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CTankTargetChange>(CTankTargetChange*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CTankTrainAI>(CTankTrainAI*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CTankTrainAI>(CTankTrainAI*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CTargetCDAudioRep>(CTargetCDAudioRep*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CTargetChangeGravity>(CTargetChangeGravity*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CTeamControlPoint>(CTeamControlPoint*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CTeamControlPoint>(CTeamControlPoint*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CTeamControlPointMaster>(CTeamControlPointMaster*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CTeamControlPointMaster>(CTeamControlPointMaster*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CTeamControlPointRound>(CTeamControlPointRound*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CTeamControlPointRound>(CTeamControlPointRound*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CTeamRoundTimer>(CTeamRoundTimer*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CTeamRoundTimer>(CTeamRoundTimer*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CTeamTrainWatcher>(CTeamTrainWatcher*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CTeamTrainWatcher>(CTeamTrainWatcher*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CTeamplayRoundBasedRulesProxy>(CTeamplayRoundBasedRulesProxy*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CTeamplayRoundWin>(CTeamplayRoundWin*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CTeamplayRoundWin>(CTeamplayRoundWin*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CTeleportVortex>(CTeleportVortex*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CTemplateNPCMaker>(CTemplateNPCMaker*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CTesla>(CTesla*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CTesla>(CTesla*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CTestTraceline>(CTestTraceline*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CTestTraceline>(CTestTraceline*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CTextureToggle>(CTextureToggle*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CThrustController>(CThrustController*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CTimerEntity>(CTimerEntity*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CTimerEntity>(CTimerEntity*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CTrainingAnnotation>(CTrainingAnnotation*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CTrainingModeLogic>(CTrainingModeLogic*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CTrainingModeLogic>(CTrainingModeLogic*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CTriggerAddOrRemoveTFPlayerAttributes>(CTriggerAddOrRemoveTFPlayerAttributes*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CTriggerAddTFPlayerCondition>(CTriggerAddTFPlayerCondition*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CTriggerApplyImpulse>(CTriggerApplyImpulse*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CTriggerAreaCapture>(CTriggerAreaCapture*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CTriggerAreaCapture>(CTriggerAreaCapture*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CTriggerBotTag>(CTriggerBotTag*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CTriggerBrush>(CTriggerBrush*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CTriggerBrush>(CTriggerBrush*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CTriggerCamera>(CTriggerCamera*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CTriggerCamera>(CTriggerCamera*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CTriggerCatapult>(CTriggerCatapult*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CTriggerCatapult>(CTriggerCatapult*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CTriggerGravity>(CTriggerGravity*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CTriggerGravity>(CTriggerGravity*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CTriggerHurt>(CTriggerHurt*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CTriggerHurt>(CTriggerHurt*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CTriggerIgnite>(CTriggerIgnite*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CTriggerIgniteArrows>(CTriggerIgniteArrows*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CTriggerImpact>(CTriggerImpact*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CTriggerImpact>(CTriggerImpact*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CTriggerLook>(CTriggerLook*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CTriggerLook>(CTriggerLook*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CTriggerMultiple>(CTriggerMultiple*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CTriggerMultiple>(CTriggerMultiple*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CTriggerParticle>(CTriggerParticle*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CTriggerPasstimeBall>(CTriggerPasstimeBall*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CTriggerPasstimeBall>(CTriggerPasstimeBall*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CTriggerPlayerMovement>(CTriggerPlayerMovement*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CTriggerPlayerRespawnOverride>(CTriggerPlayerRespawnOverride*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CTriggerProximity>(CTriggerProximity*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CTriggerProximity>(CTriggerProximity*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CTriggerPush>(CTriggerPush*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CTriggerRemove>(CTriggerRemove*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CTriggerRemove>(CTriggerRemove*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CTriggerRemoveTFPlayerCondition>(CTriggerRemoveTFPlayerCondition*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CTriggerSave>(CTriggerSave*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CTriggerSoundscape>(CTriggerSoundscape*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CTriggerSoundscape>(CTriggerSoundscape*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CTriggerStun>(CTriggerStun*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CTriggerStun>(CTriggerStun*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CTriggerTeleport>(CTriggerTeleport*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CTriggerTeleportRelative>(CTriggerTeleportRelative*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CTriggerTimerDoor>(CTriggerTimerDoor*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CTriggerToggleSave>(CTriggerToggleSave*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CTriggerVPhysicsMotion>(CTriggerVPhysicsMotion*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CTriggerVPhysicsMotion>(CTriggerVPhysicsMotion*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CTriggerWind>(CTriggerWind*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CTriggerWind>(CTriggerWind*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CUpgrades>(CUpgrades*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CUpgrades>(CUpgrades*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CVGuiScreen>(CVGuiScreen*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CVoteController>(CVoteController*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CVoteController>(CVoteController*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CWC_UpdateIgnoreList>(CWC_UpdateIgnoreList*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CWaterBullet>(CWaterBullet*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CWaterBullet>(CWaterBullet*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CWaterLODControl>(CWaterLODControl*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CWeaponIFMBase>(CWeaponIFMBase*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CWeaponIFMBaseCamera>(CWeaponIFMBaseCamera*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CWeaponIFMSteadyCam>(CWeaponIFMSteadyCam*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CWeightButton>(CWeightButton*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CWeightButton>(CWeightButton*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CWheelOfDoom>(CWheelOfDoom*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CWheelOfDoom>(CWheelOfDoom*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CWheelOfDoomSpiral>(CWheelOfDoomSpiral*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CWindowPane>(CWindowPane*)::dataDesc
 D guard variable for datamap_t* DataMapInit<CWindowPane>(CWindowPane*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CWorld>(CWorld*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CWorldItem>(CWorldItem*)::nameHolder
 D guard variable for datamap_t* DataMapInit<CZombieSpawner>(CZombieSpawner*)::nameHolder
 D guard variable for datamap_t* DataMapInit<ConceptHistory_t>(ConceptHistory_t*)::nameHolder
 D guard variable for datamap_t* DataMapInit<DustTrail>(DustTrail*)::nameHolder
 D guard variable for datamap_t* DataMapInit<EntityParticleTrailInfo_t>(EntityParticleTrailInfo_t*)::nameHolder
 D guard variable for datamap_t* DataMapInit<EventQueuePrioritizedEvent_t>(EventQueuePrioritizedEvent_t*)::dataDesc
 D guard variable for datamap_t* DataMapInit<EventQueuePrioritizedEvent_t>(EventQueuePrioritizedEvent_t*)::nameHolder
 D guard variable for datamap_t* DataMapInit<FilterDamageType>(FilterDamageType*)::nameHolder
 D guard variable for datamap_t* DataMapInit<FilterDamagedByWeaponInSlot>(FilterDamagedByWeaponInSlot*)::nameHolder
 D guard variable for datamap_t* DataMapInit<FilterTeam>(FilterTeam*)::nameHolder
 D guard variable for datamap_t* DataMapInit<HintNodeData>(HintNodeData*)::nameHolder
 D guard variable for datamap_t* DataMapInit<NextBotCombatCharacter>(NextBotCombatCharacter*)::dataDesc
 D guard variable for datamap_t* DataMapInit<NextBotCombatCharacter>(NextBotCombatCharacter*)::nameHolder
 D guard variable for datamap_t* DataMapInit<ParticleSmokeGrenade>(ParticleSmokeGrenade*)::nameHolder
 D guard variable for datamap_t* DataMapInit<PhysBlockHeader_t>(PhysBlockHeader_t*)::nameHolder
 D guard variable for datamap_t* DataMapInit<PhysObjectHeader_t>(PhysObjectHeader_t*)::nameHolder
 D guard variable for datamap_t* DataMapInit<Relationship_t>(Relationship_t*)::nameHolder
 D guard variable for datamap_t* DataMapInit<Response>(Response*)::nameHolder
 D guard variable for datamap_t* DataMapInit<ResponseContext_t>(ResponseContext_t*)::nameHolder
 D guard variable for datamap_t* DataMapInit<ResponseGroup>(ResponseGroup*)::nameHolder
 D guard variable for datamap_t* DataMapInit<RocketTrail>(RocketTrail*)::nameHolder
 D guard variable for datamap_t* DataMapInit<SaveRestoreBlockHeader_t>(SaveRestoreBlockHeader_t*)::nameHolder
 D guard variable for datamap_t* DataMapInit<ScriptedNPCInteraction_Phases_t>(ScriptedNPCInteraction_Phases_t*)::nameHolder
 D guard variable for datamap_t* DataMapInit<ScriptedNPCInteraction_t>(ScriptedNPCInteraction_t*)::nameHolder
 D guard variable for datamap_t* DataMapInit<SmokeTrail>(SmokeTrail*)::nameHolder
 D guard variable for datamap_t* DataMapInit<SoundCommand_t>(SoundCommand_t*)::nameHolder
 D guard variable for datamap_t* DataMapInit<SporeExplosion>(SporeExplosion*)::nameHolder
 D guard variable for datamap_t* DataMapInit<SporeTrail>(SporeTrail*)::nameHolder
 D guard variable for datamap_t* DataMapInit<TemplateEntityData_t>(TemplateEntityData_t*)::nameHolder
 D guard variable for datamap_t* DataMapInit<UnreachableEnt_t>(UnreachableEnt_t*)::nameHolder
 D guard variable for datamap_t* DataMapInit<ViewSmoothingData_t>(ViewSmoothingData_t*)::nameHolder
 D guard variable for datamap_t* DataMapInit<audioparams_t>(audioparams_t*)::nameHolder
 D guard variable for datamap_t* DataMapInit<entitytable_t>(entitytable_t*)::nameHolder
 D guard variable for datamap_t* DataMapInit<flexsetting_t>(flexsetting_t*)::nameHolder
 D guard variable for datamap_t* DataMapInit<flexsettinghdr_t>(flexsettinghdr_t*)::nameHolder
 D guard variable for datamap_t* DataMapInit<flexweight_t>(flexweight_t*)::nameHolder
 D guard variable for datamap_t* DataMapInit<fogparams_t>(fogparams_t*)::nameHolder
 D guard variable for datamap_t* DataMapInit<fogplayerparams_t>(fogplayerparams_t*)::nameHolder
 D guard variable for datamap_t* DataMapInit<globalentity_t>(globalentity_t*)::nameHolder
 D guard variable for datamap_t* DataMapInit<locksound_t>(locksound_t*)::nameHolder
 D guard variable for datamap_t* DataMapInit<magnetted_objects_t>(magnetted_objects_t*)::dataDesc
 D guard variable for datamap_t* DataMapInit<magnetted_objects_t>(magnetted_objects_t*)::nameHolder
 D guard variable for datamap_t* DataMapInit<modifiedconvars_t>(modifiedconvars_t*)::nameHolder
 D guard variable for datamap_t* DataMapInit<physfollower_t>(physfollower_t*)::nameHolder
 D guard variable for datamap_t* DataMapInit<sky3dparams_t>(sky3dparams_t*)::nameHolder
 D guard variable for datamap_t* DataMapInit<template_t>(template_t*)::nameHolder
 D guard variable for datamap_t* DataMapInit<thinkfunc_t>(thinkfunc_t*)::nameHolder
 D guard variable for datamap_t* DataMapInit<vehicle_crashsound_t>(vehicle_crashsound_t*)::nameHolder
 D guard variable for datamap_t* DataMapInit<vehicle_gear_t>(vehicle_gear_t*)::nameHolder
 D guard variable for datamap_t* DataMapInit<vehiclesounds_t>(vehiclesounds_t*)::dataDesc
 D guard variable for datamap_t* DataMapInit<vehiclesounds_t>(vehiclesounds_t*)::nameHolder
 D guard variable for int ServerClassInit<DT_AI_BaseNPC::ignored>(DT_AI_BaseNPC::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_AmmoPack::ignored>(DT_AmmoPack::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_AnimTimeMustBeFirst::ignored>(DT_AnimTimeMustBeFirst::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_Animationlayer::ignored>(DT_Animationlayer::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_AttributeContainer::ignored>(DT_AttributeContainer::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_AttributeContainerPlayer::ignored>(DT_AttributeContainerPlayer::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_AttributeList::ignored>(DT_AttributeList::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_AttributeManager::ignored>(DT_AttributeManager::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_BCCLocalPlayerExclusive::ignored>(DT_BCCLocalPlayerExclusive::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_BaseAnimating::ignored>(DT_BaseAnimating::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_BaseAnimatingOverlay::ignored>(DT_BaseAnimatingOverlay::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_BaseAttributableItem::ignored>(DT_BaseAttributableItem::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_BaseBeam::ignored>(DT_BaseBeam::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_BaseCombatCharacter::ignored>(DT_BaseCombatCharacter::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_BaseCombatWeapon::ignored>(DT_BaseCombatWeapon::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_BaseDoor::ignored>(DT_BaseDoor::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_BaseEntity::ignored>(DT_BaseEntity::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_BaseFlex::ignored>(DT_BaseFlex::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_BaseGrenade::ignored>(DT_BaseGrenade::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_BaseObject::ignored>(DT_BaseObject::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_BaseObjectUpgrade::ignored>(DT_BaseObjectUpgrade::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_BaseParticleEntity::ignored>(DT_BaseParticleEntity::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_BasePlayer::ignored>(DT_BasePlayer::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_BaseProjectile::ignored>(DT_BaseProjectile::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_BasePropDoor::ignored>(DT_BasePropDoor::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_BaseTeamObjectiveResource::ignored>(DT_BaseTeamObjectiveResource::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_BaseTempEntity::ignored>(DT_BaseTempEntity::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_BaseViewModel::ignored>(DT_BaseViewModel::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_Beam::ignored>(DT_Beam::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_BeamPredictableId::ignored>(DT_BeamPredictableId::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_BoneFollower::ignored>(DT_BoneFollower::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_BonusRoundLogic::ignored>(DT_BonusRoundLogic::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_BreakableProp::ignored>(DT_BreakableProp::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_BreakableSurface::ignored>(DT_BreakableSurface::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_BuilderLocalData::ignored>(DT_BuilderLocalData::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_CBonusDuckPickup::ignored>(DT_CBonusDuckPickup::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_CBonusPack::ignored>(DT_CBonusPack::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_CFish::ignored>(DT_CFish::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_CHalloweenGiftPickup::ignored>(DT_CHalloweenGiftPickup::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_CHalloweenPickup::ignored>(DT_CHalloweenPickup::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_CMannVsMachineWaveStats::ignored>(DT_CMannVsMachineWaveStats::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_CaptureFlag::ignored>(DT_CaptureFlag::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_CaptureFlagReturnIcon::ignored>(DT_CaptureFlagReturnIcon::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_CaptureZone::ignored>(DT_CaptureZone::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_CollisionProperty::ignored>(DT_CollisionProperty::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_ColorCorrection::ignored>(DT_ColorCorrection::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_ColorCorrectionVolume::ignored>(DT_ColorCorrectionVolume::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_Crossbow::ignored>(DT_Crossbow::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_CurrencyPack::ignored>(DT_CurrencyPack::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_DetailController::ignored>(DT_DetailController::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_DustTrail::ignored>(DT_DustTrail::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_DynamicLight::ignored>(DT_DynamicLight::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_DynamicProp::ignored>(DT_DynamicProp::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_EconEntity::ignored>(DT_EconEntity::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_EffectData::ignored>(DT_EffectData::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_Embers::ignored>(DT_Embers::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_EntityDissolve::ignored>(DT_EntityDissolve::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_EntityFlame::ignored>(DT_EntityFlame::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_EntityParticleTrail::ignored>(DT_EntityParticleTrail::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_EntityParticleTrailInfo::ignored>(DT_EntityParticleTrailInfo::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_EnvParticleScript::ignored>(DT_EnvParticleScript::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_EnvProjectedTexture::ignored>(DT_EnvProjectedTexture::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_EnvScreenEffect::ignored>(DT_EnvScreenEffect::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_EnvScreenOverlay::ignored>(DT_EnvScreenOverlay::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_EnvTonemapController::ignored>(DT_EnvTonemapController::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_EnvWind::ignored>(DT_EnvWind::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_EnvWindShared::ignored>(DT_EnvWindShared::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_EyeballBoss::ignored>(DT_EyeballBoss::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_FireSmoke::ignored>(DT_FireSmoke::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_FireTrail::ignored>(DT_FireTrail::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_FogController::ignored>(DT_FogController::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_FuncAreaPortalWindow::ignored>(DT_FuncAreaPortalWindow::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_FuncConveyor::ignored>(DT_FuncConveyor::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_FuncForceField::ignored>(DT_FuncForceField::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_FuncLadder::ignored>(DT_FuncLadder::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_FuncMonitor::ignored>(DT_FuncMonitor::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_FuncOccluder::ignored>(DT_FuncOccluder::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_FuncPasstimeGoal::ignored>(DT_FuncPasstimeGoal::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_FuncReflectiveGlass::ignored>(DT_FuncReflectiveGlass::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_FuncRespawnRoom::ignored>(DT_FuncRespawnRoom::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_FuncRespawnRoomVisualizer::ignored>(DT_FuncRespawnRoomVisualizer::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_FuncRotating::ignored>(DT_FuncRotating::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_FuncSmokeVolume::ignored>(DT_FuncSmokeVolume::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_FuncTrackTrain::ignored>(DT_FuncTrackTrain::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_Func_Dust::ignored>(DT_Func_Dust::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_Func_LOD::ignored>(DT_Func_LOD::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_GameRulesProxy::ignored>(DT_GameRulesProxy::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_GrapplingHook::ignored>(DT_GrapplingHook::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_HalloweenSoulPack::ignored>(DT_HalloweenSoulPack::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_HandleTest::ignored>(DT_HandleTest::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_HeadlessHatman::ignored>(DT_HeadlessHatman::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_Hightower_TeleportVortex::ignored>(DT_Hightower_TeleportVortex::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_InfoLadderDismount::ignored>(DT_InfoLadderDismount::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_InfoLightingRelative::ignored>(DT_InfoLightingRelative::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_InfoOverlayAccessor::ignored>(DT_InfoOverlayAccessor::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_LaserDot::ignored>(DT_LaserDot::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_LaserPointerLocalData::ignored>(DT_LaserPointerLocalData::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_LightGlow::ignored>(DT_LightGlow::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_Local::ignored>(DT_Local::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_LocalActiveWeaponData::ignored>(DT_LocalActiveWeaponData::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_LocalFlameThrower::ignored>(DT_LocalFlameThrower::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_LocalPlayerExclusive::ignored>(DT_LocalPlayerExclusive::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_LocalTFWeaponData::ignored>(DT_LocalTFWeaponData::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_LocalTFWeaponMedigunData::ignored>(DT_LocalTFWeaponMedigunData::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_LocalWeaponData::ignored>(DT_LocalWeaponData::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_MannVsMachineStats::ignored>(DT_MannVsMachineStats::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_MaterialModifyControl::ignored>(DT_MaterialModifyControl::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_Merasmus::ignored>(DT_Merasmus::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_MerasmusDancer::ignored>(DT_MerasmusDancer::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_MonsterResource::ignored>(DT_MonsterResource::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_MovieExplosion::ignored>(DT_MovieExplosion::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_NextBot::ignored>(DT_NextBot::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_ObjectCartDispenser::ignored>(DT_ObjectCartDispenser::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_ObjectDispenser::ignored>(DT_ObjectDispenser::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_ObjectSapper::ignored>(DT_ObjectSapper::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_ObjectSentrygun::ignored>(DT_ObjectSentrygun::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_ObjectTeleporter::ignored>(DT_ObjectTeleporter::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_OverlayVars::ignored>(DT_OverlayVars::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_ParticleCannon::ignored>(DT_ParticleCannon::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_ParticleFire::ignored>(DT_ParticleFire::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_ParticlePerformanceMonitor::ignored>(DT_ParticlePerformanceMonitor::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_ParticleSmokeGrenade::ignored>(DT_ParticleSmokeGrenade::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_ParticleSystem::ignored>(DT_ParticleSystem::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_PasstimeBall::ignored>(DT_PasstimeBall::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_PasstimeGun::ignored>(DT_PasstimeGun::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_PhysBox::ignored>(DT_PhysBox::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_PhysBoxMultiplayer::ignored>(DT_PhysBoxMultiplayer::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_PhysMagnet::ignored>(DT_PhysMagnet::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_PhysicsProp::ignored>(DT_PhysicsProp::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_PhysicsPropMultiplayer::ignored>(DT_PhysicsPropMultiplayer::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_PipebombLauncherLocalData::ignored>(DT_PipebombLauncherLocalData::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_Plasma::ignored>(DT_Plasma::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_PlayerDestructionDispenser::ignored>(DT_PlayerDestructionDispenser::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_PlayerResource::ignored>(DT_PlayerResource::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_PlayerState::ignored>(DT_PlayerState::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_PointCamera::ignored>(DT_PointCamera::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_PointCommentaryNode::ignored>(DT_PointCommentaryNode::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_PoseController::ignored>(DT_PoseController::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_Precipitation::ignored>(DT_Precipitation::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_PredictableId::ignored>(DT_PredictableId::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_PropVehicleDriveable::ignored>(DT_PropVehicleDriveable::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_ProxyToggle::ignored>(DT_ProxyToggle::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_ProxyToggle_ProxiedData::ignored>(DT_ProxyToggle_ProxiedData::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_QuadraticBeam::ignored>(DT_QuadraticBeam::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_Ragdoll::ignored>(DT_Ragdoll::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_RagdollManager::ignored>(DT_RagdollManager::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_Ragdoll_Attached::ignored>(DT_Ragdoll_Attached::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_RobotDispenser::ignored>(DT_RobotDispenser::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_RocketTrail::ignored>(DT_RocketTrail::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_RopeKeyframe::ignored>(DT_RopeKeyframe::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_SceneEntity::ignored>(DT_SceneEntity::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_ScriptCreatedAttribute::ignored>(DT_ScriptCreatedAttribute::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_ScriptCreatedItem::ignored>(DT_ScriptCreatedItem::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_SentrygunLocalData::ignored>(DT_SentrygunLocalData::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_ServerAnimationData::ignored>(DT_ServerAnimationData::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_ShadowControl::ignored>(DT_ShadowControl::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_SlideshowDisplay::ignored>(DT_SlideshowDisplay::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_SmokeStack::ignored>(DT_SmokeStack::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_SmokeTrail::ignored>(DT_SmokeTrail::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_SniperDot::ignored>(DT_SniperDot::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_SniperRifleLocalData::ignored>(DT_SniperRifleLocalData::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_SporeExplosion::ignored>(DT_SporeExplosion::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_SporeTrail::ignored>(DT_SporeTrail::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_SpotlightEnd::ignored>(DT_SpotlightEnd::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_Sprite::ignored>(DT_Sprite::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_SpriteOriented::ignored>(DT_SpriteOriented::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_SpriteTrail::ignored>(DT_SpriteTrail::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_SteamJet::ignored>(DT_SteamJet::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_Sun::ignored>(DT_Sun::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_TEArmorRicochet::ignored>(DT_TEArmorRicochet::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_TEBSPDecal::ignored>(DT_TEBSPDecal::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_TEBeamEntPoint::ignored>(DT_TEBeamEntPoint::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_TEBeamEnts::ignored>(DT_TEBeamEnts::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_TEBeamFollow::ignored>(DT_TEBeamFollow::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_TEBeamLaser::ignored>(DT_TEBeamLaser::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_TEBeamPoints::ignored>(DT_TEBeamPoints::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_TEBeamRing::ignored>(DT_TEBeamRing::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_TEBeamRingPoint::ignored>(DT_TEBeamRingPoint::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_TEBeamSpline::ignored>(DT_TEBeamSpline::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_TEBloodSprite::ignored>(DT_TEBloodSprite::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_TEBloodStream::ignored>(DT_TEBloodStream::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_TEBreakModel::ignored>(DT_TEBreakModel::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_TEBubbleTrail::ignored>(DT_TEBubbleTrail::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_TEBubbles::ignored>(DT_TEBubbles::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_TEClientProjectile::ignored>(DT_TEClientProjectile::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_TEDecal::ignored>(DT_TEDecal::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_TEDust::ignored>(DT_TEDust::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_TEDynamicLight::ignored>(DT_TEDynamicLight::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_TEEffectDispatch::ignored>(DT_TEEffectDispatch::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_TEEnergySplash::ignored>(DT_TEEnergySplash::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_TEExplosion::ignored>(DT_TEExplosion::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_TEFireBullets::ignored>(DT_TEFireBullets::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_TEFizz::ignored>(DT_TEFizz::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_TEFootprintDecal::ignored>(DT_TEFootprintDecal::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_TEGaussExplosion::ignored>(DT_TEGaussExplosion::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_TEGlowSprite::ignored>(DT_TEGlowSprite::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_TEImpact::ignored>(DT_TEImpact::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_TEKillPlayerAttachments::ignored>(DT_TEKillPlayerAttachments::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_TELargeFunnel::ignored>(DT_TELargeFunnel::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_TEMetalSparks::ignored>(DT_TEMetalSparks::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_TEMuzzleFlash::ignored>(DT_TEMuzzleFlash::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_TEParticleSystem::ignored>(DT_TEParticleSystem::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_TEPhysicsProp::ignored>(DT_TEPhysicsProp::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_TEPlayerAnimEvent::ignored>(DT_TEPlayerAnimEvent::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_TEPlayerDecal::ignored>(DT_TEPlayerDecal::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_TEProjectedDecal::ignored>(DT_TEProjectedDecal::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_TEShatterSurface::ignored>(DT_TEShatterSurface::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_TEShowLine::ignored>(DT_TEShowLine::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_TESmoke::ignored>(DT_TESmoke::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_TESparks::ignored>(DT_TESparks::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_TESprite::ignored>(DT_TESprite::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_TESpriteSpray::ignored>(DT_TESpriteSpray::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_TETFBlood::ignored>(DT_TETFBlood::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_TETFExplosion::ignored>(DT_TETFExplosion::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_TETFParticleEffect::ignored>(DT_TETFParticleEffect::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_TEWorldDecal::ignored>(DT_TEWorldDecal::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_TFBaseBoss::ignored>(DT_TFBaseBoss::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_TFBaseProjectile::ignored>(DT_TFBaseProjectile::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_TFBaseRocket::ignored>(DT_TFBaseRocket::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_TFBotHintEngineerNest::ignored>(DT_TFBotHintEngineerNest::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_TFCannon::ignored>(DT_TFCannon::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_TFDroppedWeapon::ignored>(DT_TFDroppedWeapon::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_TFFlameRocket::ignored>(DT_TFFlameRocket::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_TFGameRules::ignored>(DT_TFGameRules::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_TFGameRulesProxy::ignored>(DT_TFGameRulesProxy::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_TFGenericBomb::ignored>(DT_TFGenericBomb::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_TFGlow::ignored>(DT_TFGlow::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_TFHalloweenMinigame::ignored>(DT_TFHalloweenMinigame::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_TFHalloweenMinigame_FallingPlatforms::ignored>(DT_TFHalloweenMinigame_FallingPlatforms::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_TFHellZap::ignored>(DT_TFHellZap::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_TFItem::ignored>(DT_TFItem::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_TFLaserPointer::ignored>(DT_TFLaserPointer::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_TFLocalPlayerExclusive::ignored>(DT_TFLocalPlayerExclusive::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_TFLunchBox_Drink::ignored>(DT_TFLunchBox_Drink::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_TFMechanicalArm::ignored>(DT_TFMechanicalArm::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_TFMedigunShield::ignored>(DT_TFMedigunShield::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_TFMinigame::ignored>(DT_TFMinigame::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_TFMinigameLogic::ignored>(DT_TFMinigameLogic::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_TFNonLocalPlayerExclusive::ignored>(DT_TFNonLocalPlayerExclusive::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_TFObjectiveResource::ignored>(DT_TFObjectiveResource::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_TFPEPBrawlerBlaster::ignored>(DT_TFPEPBrawlerBlaster::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_TFParachute::ignored>(DT_TFParachute::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_TFParachute_Primary::ignored>(DT_TFParachute_Primary::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_TFParachute_Secondary::ignored>(DT_TFParachute_Secondary::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_TFPasstimeLogic::ignored>(DT_TFPasstimeLogic::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_TFPlayer::ignored>(DT_TFPlayer::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_TFPlayerClassShared::ignored>(DT_TFPlayerClassShared::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_TFPlayerConditionListExclusive::ignored>(DT_TFPlayerConditionListExclusive::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_TFPlayerConditionSource::ignored>(DT_TFPlayerConditionSource::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_TFPlayerDestructionLogic::ignored>(DT_TFPlayerDestructionLogic::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_TFPlayerResource::ignored>(DT_TFPlayerResource::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_TFPlayerScoringDataExclusive::ignored>(DT_TFPlayerScoringDataExclusive::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_TFPlayerShared::ignored>(DT_TFPlayerShared::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_TFPlayerSharedLocal::ignored>(DT_TFPlayerSharedLocal::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_TFPowerupBottle::ignored>(DT_TFPowerupBottle::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_TFProjectileBall_Ornament::ignored>(DT_TFProjectileBall_Ornament::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_TFProjectile_Arrow::ignored>(DT_TFProjectile_Arrow::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_TFProjectile_Cleaver::ignored>(DT_TFProjectile_Cleaver::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_TFProjectile_EnergyBall::ignored>(DT_TFProjectile_EnergyBall::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_TFProjectile_EnergyRing::ignored>(DT_TFProjectile_EnergyRing::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_TFProjectile_Flare::ignored>(DT_TFProjectile_Flare::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_TFProjectile_GrapplingHook::ignored>(DT_TFProjectile_GrapplingHook::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_TFProjectile_HealingBolt::ignored>(DT_TFProjectile_HealingBolt::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_TFProjectile_Jar::ignored>(DT_TFProjectile_Jar::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_TFProjectile_JarMilk::ignored>(DT_TFProjectile_JarMilk::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_TFProjectile_Pipebomb::ignored>(DT_TFProjectile_Pipebomb::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_TFProjectile_Rocket::ignored>(DT_TFProjectile_Rocket::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_TFProjectile_SentryRocket::ignored>(DT_TFProjectile_SentryRocket::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_TFProjectile_SpellBats::ignored>(DT_TFProjectile_SpellBats::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_TFProjectile_SpellFireball::ignored>(DT_TFProjectile_SpellFireball::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_TFProjectile_SpellKartBats::ignored>(DT_TFProjectile_SpellKartBats::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_TFProjectile_SpellKartOrb::ignored>(DT_TFProjectile_SpellKartOrb::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_TFProjectile_SpellLightningOrb::ignored>(DT_TFProjectile_SpellLightningOrb::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_TFProjectile_SpellMeteorShower::ignored>(DT_TFProjectile_SpellMeteorShower::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_TFProjectile_SpellMirv::ignored>(DT_TFProjectile_SpellMirv::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_TFProjectile_SpellPumpkin::ignored>(DT_TFProjectile_SpellPumpkin::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_TFProjectile_SpellSpawnBoss::ignored>(DT_TFProjectile_SpellSpawnBoss::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_TFProjectile_SpellSpawnHorde::ignored>(DT_TFProjectile_SpellSpawnHorde::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_TFProjectile_SpellSpawnZombie::ignored>(DT_TFProjectile_SpellSpawnZombie::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_TFProjectile_StunBall::ignored>(DT_TFProjectile_StunBall::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_TFProjectile_Throwable::ignored>(DT_TFProjectile_Throwable::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_TFProjectile_ThrowableBreadMonster::ignored>(DT_TFProjectile_ThrowableBreadMonster::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_TFProjectile_ThrowableBrick::ignored>(DT_TFProjectile_ThrowableBrick::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_TFProjectile_ThrowableRepel::ignored>(DT_TFProjectile_ThrowableRepel::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_TFPumpkinBomb::ignored>(DT_TFPumpkinBomb::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_TFRagdoll::ignored>(DT_TFRagdoll::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_TFReviveMarker::ignored>(DT_TFReviveMarker::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_TFRobotDestructionLogic::ignored>(DT_TFRobotDestructionLogic::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_TFRobotDestructionRobotSpawn::ignored>(DT_TFRobotDestructionRobotSpawn::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_TFRobotDestruction_Robot::ignored>(DT_TFRobotDestruction_Robot::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_TFRobotDestruction_RobotGroup::ignored>(DT_TFRobotDestruction_RobotGroup::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_TFSMG::ignored>(DT_TFSMG::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_TFScatterGun::ignored>(DT_TFScatterGun::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_TFSendHealersDataTable::ignored>(DT_TFSendHealersDataTable::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_TFShotgun::ignored>(DT_TFShotgun::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_TFShotgunBuildingRescue::ignored>(DT_TFShotgunBuildingRescue::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_TFShotgun_HWG::ignored>(DT_TFShotgun_HWG::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_TFShotgun_Pyro::ignored>(DT_TFShotgun_Pyro::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_TFShotgun_Revenge::ignored>(DT_TFShotgun_Revenge::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_TFShotgun_Soldier::ignored>(DT_TFShotgun_Soldier::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_TFSniperRifle::ignored>(DT_TFSniperRifle::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_TFSniperRifleClassic::ignored>(DT_TFSniperRifleClassic::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_TFSniperRifleDecap::ignored>(DT_TFSniperRifleDecap::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_TFSodaPopper::ignored>(DT_TFSodaPopper::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_TFTankBoss::ignored>(DT_TFTankBoss::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_TFTauntProp::ignored>(DT_TFTauntProp::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_TFTeam::ignored>(DT_TFTeam::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_TFViewModel::ignored>(DT_TFViewModel::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_TFWeaponBase::ignored>(DT_TFWeaponBase::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_TFWeaponBaseGrenadeProj::ignored>(DT_TFWeaponBaseGrenadeProj::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_TFWeaponBaseGun::ignored>(DT_TFWeaponBaseGun::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_TFWeaponBaseMelee::ignored>(DT_TFWeaponBaseMelee::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_TFWeaponBaseMerasmusGrenade::ignored>(DT_TFWeaponBaseMerasmusGrenade::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_TFWeaponBat::ignored>(DT_TFWeaponBat::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_TFWeaponBat_Fish::ignored>(DT_TFWeaponBat_Fish::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_TFWeaponBat_Giftwrap::ignored>(DT_TFWeaponBat_Giftwrap::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_TFWeaponBat_Wood::ignored>(DT_TFWeaponBat_Wood::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_TFWeaponBonesaw::ignored>(DT_TFWeaponBonesaw::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_TFWeaponBottle::ignored>(DT_TFWeaponBottle::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_TFWeaponBuffItem::ignored>(DT_TFWeaponBuffItem::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_TFWeaponBuilder::ignored>(DT_TFWeaponBuilder::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_TFWeaponCleaver::ignored>(DT_TFWeaponCleaver::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_TFWeaponClub::ignored>(DT_TFWeaponClub::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_TFWeaponDataNonLocal::ignored>(DT_TFWeaponDataNonLocal::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_TFWeaponFireAxe::ignored>(DT_TFWeaponFireAxe::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_TFWeaponFists::ignored>(DT_TFWeaponFists::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_TFWeaponInvis::ignored>(DT_TFWeaponInvis::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_TFWeaponJar::ignored>(DT_TFWeaponJar::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_TFWeaponJarMilk::ignored>(DT_TFWeaponJarMilk::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_TFWeaponKatana::ignored>(DT_TFWeaponKatana::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_TFWeaponKnife::ignored>(DT_TFWeaponKnife::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_TFWeaponMedigunDataNonLocal::ignored>(DT_TFWeaponMedigunDataNonLocal::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_TFWeaponPDA::ignored>(DT_TFWeaponPDA::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_TFWeaponPDAExpansion_Dispenser::ignored>(DT_TFWeaponPDAExpansion_Dispenser::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_TFWeaponPDAExpansion_Teleporter::ignored>(DT_TFWeaponPDAExpansion_Teleporter::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_TFWeaponPDA_Engineer_Build::ignored>(DT_TFWeaponPDA_Engineer_Build::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_TFWeaponPDA_Engineer_Destroy::ignored>(DT_TFWeaponPDA_Engineer_Destroy::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_TFWeaponPDA_Spy::ignored>(DT_TFWeaponPDA_Spy::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_TFWeaponRobotArm::ignored>(DT_TFWeaponRobotArm::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_TFWeaponSapper::ignored>(DT_TFWeaponSapper::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_TFWeaponShovel::ignored>(DT_TFWeaponShovel::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_TFWeaponSpellBook::ignored>(DT_TFWeaponSpellBook::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_TFWeaponStickBomb::ignored>(DT_TFWeaponStickBomb::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_TFWeaponSword::ignored>(DT_TFWeaponSword::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_TFWeaponThrowable::ignored>(DT_TFWeaponThrowable::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_TFWeaponWrench::ignored>(DT_TFWeaponWrench::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_TFWearable::ignored>(DT_TFWearable::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_TFWearableDemoShield::ignored>(DT_TFWearableDemoShield::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_TFWearableItem::ignored>(DT_TFWearableItem::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_TFWearableLevelableItem::ignored>(DT_TFWearableLevelableItem::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_TFWearableRobotArm::ignored>(DT_TFWearableRobotArm::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_TFWearableVM::ignored>(DT_TFWearableVM::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_Team::ignored>(DT_Team::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_TeamRoundTimer::ignored>(DT_TeamRoundTimer::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_TeamTrainWatcher::ignored>(DT_TeamTrainWatcher::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_TeamplayRoundBasedRules::ignored>(DT_TeamplayRoundBasedRules::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_TeamplayRoundBasedRulesProxy::ignored>(DT_TeamplayRoundBasedRulesProxy::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_TeleportVortex::ignored>(DT_TeleportVortex::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_Tesla::ignored>(DT_Tesla::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_TestTraceline::ignored>(DT_TestTraceline::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_VGuiScreen::ignored>(DT_VGuiScreen::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_VoteController::ignored>(DT_VoteController::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_WORLD::ignored>(DT_WORLD::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_WaterBullet::ignored>(DT_WaterBullet::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_WaterLODControl::ignored>(DT_WaterLODControl::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_WeaponChargedSMG::ignored>(DT_WeaponChargedSMG::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_WeaponCompoundBow::ignored>(DT_WeaponCompoundBow::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_WeaponDRGPomson::ignored>(DT_WeaponDRGPomson::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_WeaponFlameThrower::ignored>(DT_WeaponFlameThrower::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_WeaponFlareGun::ignored>(DT_WeaponFlareGun::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_WeaponFlareGun_Revenge::ignored>(DT_WeaponFlareGun_Revenge::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_WeaponGrenadeLauncher::ignored>(DT_WeaponGrenadeLauncher::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_WeaponIFMBase::ignored>(DT_WeaponIFMBase::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_WeaponIFMBaseCamera::ignored>(DT_WeaponIFMBaseCamera::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_WeaponIFMSteadyCam::ignored>(DT_WeaponIFMSteadyCam::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_WeaponLunchBox::ignored>(DT_WeaponLunchBox::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_WeaponMedigun::ignored>(DT_WeaponMedigun::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_WeaponMinigun::ignored>(DT_WeaponMinigun::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_WeaponPipebombLauncher::ignored>(DT_WeaponPipebombLauncher::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_WeaponPistol::ignored>(DT_WeaponPistol::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_WeaponPistol_Scout::ignored>(DT_WeaponPistol_Scout::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_WeaponPistol_ScoutPrimary::ignored>(DT_WeaponPistol_ScoutPrimary::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_WeaponPistol_ScoutSecondary::ignored>(DT_WeaponPistol_ScoutSecondary::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_WeaponRaygun::ignored>(DT_WeaponRaygun::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_WeaponRevolver::ignored>(DT_WeaponRevolver::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_WeaponRocketLauncher::ignored>(DT_WeaponRocketLauncher::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_WeaponRocketLauncher_AirStrike::ignored>(DT_WeaponRocketLauncher_AirStrike::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_WeaponRocketLauncher_DirectHit::ignored>(DT_WeaponRocketLauncher_DirectHit::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_WeaponRocketLauncher_Mortar::ignored>(DT_WeaponRocketLauncher_Mortar::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_WeaponSyringeGun::ignored>(DT_WeaponSyringeGun::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_WearableItem::ignored>(DT_WearableItem::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<DT_Zombie::ignored>(DT_Zombie::ignored*)::g_SendProps
 D guard variable for int ServerClassInit<SpellTransposeTeleport::ignored>(SpellTransposeTeleport::ignored*)::g_SendProps
 D guard variable for unsigned int GetAttributeTypeUniqueIdentifier<CAttribute_DynamicRecipeComponent>()::s_unUniqueCounter
 D guard variable for unsigned int GetAttributeTypeUniqueIdentifier<CAttribute_ItemSlotCriteria>()::s_unUniqueCounter
 D guard variable for unsigned int GetAttributeTypeUniqueIdentifier<CAttribute_String>()::s_unUniqueCounter
 D guard variable for unsigned int GetAttributeTypeUniqueIdentifier<CAttribute_WorldItemPlacement>()::s_unUniqueCounter
 D guard variable for unsigned int GetAttributeTypeUniqueIdentifier<float>()::s_unUniqueCounter
 D guard variable for unsigned int GetAttributeTypeUniqueIdentifier<unsigned int>()::s_unUniqueCounter
 D guard variable for unsigned int GetAttributeTypeUniqueIdentifier<unsigned long long>()::s_unUniqueCounter
 D guard variable for variant_t::Entity() const::hNull
 D guard variable for void CNavMesh::CollectAreasOverlappingExtent<CNavArea>(Extent const&, CUtlVector<CNavArea*, CUtlMemory<CNavArea*, int> >*)::searchMarker
 D guard variable for void CNavMesh::CollectAreasOverlappingExtent<CTFNavArea>(Extent const&, CUtlVector<CTFNavArea*, CUtlMemory<CTFNavArea*, int> >*)::searchMarker
 D hull
 D int ServerClassInit<DT_AI_BaseNPC::ignored>(DT_AI_BaseNPC::ignored*)::g_SendProps
 D int ServerClassInit<DT_AI_BaseNPC::ignored>(DT_AI_BaseNPC::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_AmmoPack::ignored>(DT_AmmoPack::ignored*)::g_SendProps
 D int ServerClassInit<DT_AmmoPack::ignored>(DT_AmmoPack::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_AnimTimeMustBeFirst::ignored>(DT_AnimTimeMustBeFirst::ignored*)::g_SendProps
 D int ServerClassInit<DT_AnimTimeMustBeFirst::ignored>(DT_AnimTimeMustBeFirst::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_Animationlayer::ignored>(DT_Animationlayer::ignored*)::g_SendProps
 D int ServerClassInit<DT_Animationlayer::ignored>(DT_Animationlayer::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_AttributeContainer::ignored>(DT_AttributeContainer::ignored*)::g_SendProps
 D int ServerClassInit<DT_AttributeContainer::ignored>(DT_AttributeContainer::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_AttributeContainerPlayer::ignored>(DT_AttributeContainerPlayer::ignored*)::g_SendProps
 D int ServerClassInit<DT_AttributeContainerPlayer::ignored>(DT_AttributeContainerPlayer::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_AttributeList::ignored>(DT_AttributeList::ignored*)::g_SendProps
 D int ServerClassInit<DT_AttributeList::ignored>(DT_AttributeList::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_AttributeManager::ignored>(DT_AttributeManager::ignored*)::g_SendProps
 D int ServerClassInit<DT_AttributeManager::ignored>(DT_AttributeManager::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_BCCLocalPlayerExclusive::ignored>(DT_BCCLocalPlayerExclusive::ignored*)::g_SendProps
 D int ServerClassInit<DT_BCCLocalPlayerExclusive::ignored>(DT_BCCLocalPlayerExclusive::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_BaseAnimating::ignored>(DT_BaseAnimating::ignored*)::g_SendProps
 D int ServerClassInit<DT_BaseAnimating::ignored>(DT_BaseAnimating::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_BaseAnimatingOverlay::ignored>(DT_BaseAnimatingOverlay::ignored*)::g_SendProps
 D int ServerClassInit<DT_BaseAnimatingOverlay::ignored>(DT_BaseAnimatingOverlay::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_BaseAttributableItem::ignored>(DT_BaseAttributableItem::ignored*)::g_SendProps
 D int ServerClassInit<DT_BaseAttributableItem::ignored>(DT_BaseAttributableItem::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_BaseBeam::ignored>(DT_BaseBeam::ignored*)::g_SendProps
 D int ServerClassInit<DT_BaseBeam::ignored>(DT_BaseBeam::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_BaseCombatCharacter::ignored>(DT_BaseCombatCharacter::ignored*)::g_SendProps
 D int ServerClassInit<DT_BaseCombatCharacter::ignored>(DT_BaseCombatCharacter::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_BaseCombatWeapon::ignored>(DT_BaseCombatWeapon::ignored*)::g_SendProps
 D int ServerClassInit<DT_BaseCombatWeapon::ignored>(DT_BaseCombatWeapon::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_BaseDoor::ignored>(DT_BaseDoor::ignored*)::g_SendProps
 D int ServerClassInit<DT_BaseDoor::ignored>(DT_BaseDoor::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_BaseEntity::ignored>(DT_BaseEntity::ignored*)::g_SendProps
 D int ServerClassInit<DT_BaseEntity::ignored>(DT_BaseEntity::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_BaseFlex::ignored>(DT_BaseFlex::ignored*)::g_SendProps
 D int ServerClassInit<DT_BaseFlex::ignored>(DT_BaseFlex::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_BaseGrenade::ignored>(DT_BaseGrenade::ignored*)::g_SendProps
 D int ServerClassInit<DT_BaseGrenade::ignored>(DT_BaseGrenade::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_BaseObject::ignored>(DT_BaseObject::ignored*)::g_SendProps
 D int ServerClassInit<DT_BaseObject::ignored>(DT_BaseObject::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_BaseObjectUpgrade::ignored>(DT_BaseObjectUpgrade::ignored*)::g_SendProps
 D int ServerClassInit<DT_BaseObjectUpgrade::ignored>(DT_BaseObjectUpgrade::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_BaseParticleEntity::ignored>(DT_BaseParticleEntity::ignored*)::g_SendProps
 D int ServerClassInit<DT_BaseParticleEntity::ignored>(DT_BaseParticleEntity::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_BasePlayer::ignored>(DT_BasePlayer::ignored*)::g_SendProps
 D int ServerClassInit<DT_BasePlayer::ignored>(DT_BasePlayer::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_BaseProjectile::ignored>(DT_BaseProjectile::ignored*)::g_SendProps
 D int ServerClassInit<DT_BaseProjectile::ignored>(DT_BaseProjectile::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_BasePropDoor::ignored>(DT_BasePropDoor::ignored*)::g_SendProps
 D int ServerClassInit<DT_BasePropDoor::ignored>(DT_BasePropDoor::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_BaseTeamObjectiveResource::ignored>(DT_BaseTeamObjectiveResource::ignored*)::g_SendProps
 D int ServerClassInit<DT_BaseTeamObjectiveResource::ignored>(DT_BaseTeamObjectiveResource::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_BaseTempEntity::ignored>(DT_BaseTempEntity::ignored*)::g_SendProps
 D int ServerClassInit<DT_BaseTempEntity::ignored>(DT_BaseTempEntity::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_BaseViewModel::ignored>(DT_BaseViewModel::ignored*)::g_SendProps
 D int ServerClassInit<DT_BaseViewModel::ignored>(DT_BaseViewModel::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_Beam::ignored>(DT_Beam::ignored*)::g_SendProps
 D int ServerClassInit<DT_Beam::ignored>(DT_Beam::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_BeamPredictableId::ignored>(DT_BeamPredictableId::ignored*)::g_SendProps
 D int ServerClassInit<DT_BeamPredictableId::ignored>(DT_BeamPredictableId::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_BoneFollower::ignored>(DT_BoneFollower::ignored*)::g_SendProps
 D int ServerClassInit<DT_BoneFollower::ignored>(DT_BoneFollower::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_BonusRoundLogic::ignored>(DT_BonusRoundLogic::ignored*)::g_SendProps
 D int ServerClassInit<DT_BonusRoundLogic::ignored>(DT_BonusRoundLogic::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_BreakableProp::ignored>(DT_BreakableProp::ignored*)::g_SendProps
 D int ServerClassInit<DT_BreakableProp::ignored>(DT_BreakableProp::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_BreakableSurface::ignored>(DT_BreakableSurface::ignored*)::g_SendProps
 D int ServerClassInit<DT_BreakableSurface::ignored>(DT_BreakableSurface::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_BuilderLocalData::ignored>(DT_BuilderLocalData::ignored*)::g_SendProps
 D int ServerClassInit<DT_BuilderLocalData::ignored>(DT_BuilderLocalData::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_CBonusDuckPickup::ignored>(DT_CBonusDuckPickup::ignored*)::g_SendProps
 D int ServerClassInit<DT_CBonusDuckPickup::ignored>(DT_CBonusDuckPickup::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_CBonusPack::ignored>(DT_CBonusPack::ignored*)::g_SendProps
 D int ServerClassInit<DT_CBonusPack::ignored>(DT_CBonusPack::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_CFish::ignored>(DT_CFish::ignored*)::g_SendProps
 D int ServerClassInit<DT_CFish::ignored>(DT_CFish::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_CHalloweenGiftPickup::ignored>(DT_CHalloweenGiftPickup::ignored*)::g_SendProps
 D int ServerClassInit<DT_CHalloweenGiftPickup::ignored>(DT_CHalloweenGiftPickup::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_CHalloweenPickup::ignored>(DT_CHalloweenPickup::ignored*)::g_SendProps
 D int ServerClassInit<DT_CHalloweenPickup::ignored>(DT_CHalloweenPickup::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_CMannVsMachineWaveStats::ignored>(DT_CMannVsMachineWaveStats::ignored*)::g_SendProps
 D int ServerClassInit<DT_CMannVsMachineWaveStats::ignored>(DT_CMannVsMachineWaveStats::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_CaptureFlag::ignored>(DT_CaptureFlag::ignored*)::g_SendProps
 D int ServerClassInit<DT_CaptureFlag::ignored>(DT_CaptureFlag::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_CaptureFlagReturnIcon::ignored>(DT_CaptureFlagReturnIcon::ignored*)::g_SendProps
 D int ServerClassInit<DT_CaptureFlagReturnIcon::ignored>(DT_CaptureFlagReturnIcon::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_CaptureZone::ignored>(DT_CaptureZone::ignored*)::g_SendProps
 D int ServerClassInit<DT_CaptureZone::ignored>(DT_CaptureZone::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_CollisionProperty::ignored>(DT_CollisionProperty::ignored*)::g_SendProps
 D int ServerClassInit<DT_CollisionProperty::ignored>(DT_CollisionProperty::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_ColorCorrection::ignored>(DT_ColorCorrection::ignored*)::g_SendProps
 D int ServerClassInit<DT_ColorCorrection::ignored>(DT_ColorCorrection::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_ColorCorrectionVolume::ignored>(DT_ColorCorrectionVolume::ignored*)::g_SendProps
 D int ServerClassInit<DT_ColorCorrectionVolume::ignored>(DT_ColorCorrectionVolume::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_Crossbow::ignored>(DT_Crossbow::ignored*)::g_SendProps
 D int ServerClassInit<DT_Crossbow::ignored>(DT_Crossbow::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_CurrencyPack::ignored>(DT_CurrencyPack::ignored*)::g_SendProps
 D int ServerClassInit<DT_CurrencyPack::ignored>(DT_CurrencyPack::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_DetailController::ignored>(DT_DetailController::ignored*)::g_SendProps
 D int ServerClassInit<DT_DetailController::ignored>(DT_DetailController::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_DustTrail::ignored>(DT_DustTrail::ignored*)::g_SendProps
 D int ServerClassInit<DT_DustTrail::ignored>(DT_DustTrail::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_DynamicLight::ignored>(DT_DynamicLight::ignored*)::g_SendProps
 D int ServerClassInit<DT_DynamicLight::ignored>(DT_DynamicLight::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_DynamicProp::ignored>(DT_DynamicProp::ignored*)::g_SendProps
 D int ServerClassInit<DT_DynamicProp::ignored>(DT_DynamicProp::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_EconEntity::ignored>(DT_EconEntity::ignored*)::g_SendProps
 D int ServerClassInit<DT_EconEntity::ignored>(DT_EconEntity::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_EffectData::ignored>(DT_EffectData::ignored*)::g_SendProps
 D int ServerClassInit<DT_EffectData::ignored>(DT_EffectData::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_Embers::ignored>(DT_Embers::ignored*)::g_SendProps
 D int ServerClassInit<DT_Embers::ignored>(DT_Embers::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_EntityDissolve::ignored>(DT_EntityDissolve::ignored*)::g_SendProps
 D int ServerClassInit<DT_EntityDissolve::ignored>(DT_EntityDissolve::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_EntityFlame::ignored>(DT_EntityFlame::ignored*)::g_SendProps
 D int ServerClassInit<DT_EntityFlame::ignored>(DT_EntityFlame::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_EntityParticleTrail::ignored>(DT_EntityParticleTrail::ignored*)::g_SendProps
 D int ServerClassInit<DT_EntityParticleTrail::ignored>(DT_EntityParticleTrail::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_EntityParticleTrailInfo::ignored>(DT_EntityParticleTrailInfo::ignored*)::g_SendProps
 D int ServerClassInit<DT_EntityParticleTrailInfo::ignored>(DT_EntityParticleTrailInfo::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_EnvParticleScript::ignored>(DT_EnvParticleScript::ignored*)::g_SendProps
 D int ServerClassInit<DT_EnvParticleScript::ignored>(DT_EnvParticleScript::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_EnvProjectedTexture::ignored>(DT_EnvProjectedTexture::ignored*)::g_SendProps
 D int ServerClassInit<DT_EnvProjectedTexture::ignored>(DT_EnvProjectedTexture::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_EnvScreenEffect::ignored>(DT_EnvScreenEffect::ignored*)::g_SendProps
 D int ServerClassInit<DT_EnvScreenEffect::ignored>(DT_EnvScreenEffect::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_EnvScreenOverlay::ignored>(DT_EnvScreenOverlay::ignored*)::g_SendProps
 D int ServerClassInit<DT_EnvScreenOverlay::ignored>(DT_EnvScreenOverlay::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_EnvTonemapController::ignored>(DT_EnvTonemapController::ignored*)::g_SendProps
 D int ServerClassInit<DT_EnvTonemapController::ignored>(DT_EnvTonemapController::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_EnvWind::ignored>(DT_EnvWind::ignored*)::g_SendProps
 D int ServerClassInit<DT_EnvWind::ignored>(DT_EnvWind::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_EnvWindShared::ignored>(DT_EnvWindShared::ignored*)::g_SendProps
 D int ServerClassInit<DT_EnvWindShared::ignored>(DT_EnvWindShared::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_EyeballBoss::ignored>(DT_EyeballBoss::ignored*)::g_SendProps
 D int ServerClassInit<DT_EyeballBoss::ignored>(DT_EyeballBoss::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_FireSmoke::ignored>(DT_FireSmoke::ignored*)::g_SendProps
 D int ServerClassInit<DT_FireSmoke::ignored>(DT_FireSmoke::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_FireTrail::ignored>(DT_FireTrail::ignored*)::g_SendProps
 D int ServerClassInit<DT_FireTrail::ignored>(DT_FireTrail::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_FogController::ignored>(DT_FogController::ignored*)::g_SendProps
 D int ServerClassInit<DT_FogController::ignored>(DT_FogController::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_FuncAreaPortalWindow::ignored>(DT_FuncAreaPortalWindow::ignored*)::g_SendProps
 D int ServerClassInit<DT_FuncAreaPortalWindow::ignored>(DT_FuncAreaPortalWindow::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_FuncConveyor::ignored>(DT_FuncConveyor::ignored*)::g_SendProps
 D int ServerClassInit<DT_FuncConveyor::ignored>(DT_FuncConveyor::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_FuncForceField::ignored>(DT_FuncForceField::ignored*)::g_SendProps
 D int ServerClassInit<DT_FuncForceField::ignored>(DT_FuncForceField::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_FuncLadder::ignored>(DT_FuncLadder::ignored*)::g_SendProps
 D int ServerClassInit<DT_FuncLadder::ignored>(DT_FuncLadder::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_FuncMonitor::ignored>(DT_FuncMonitor::ignored*)::g_SendProps
 D int ServerClassInit<DT_FuncMonitor::ignored>(DT_FuncMonitor::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_FuncOccluder::ignored>(DT_FuncOccluder::ignored*)::g_SendProps
 D int ServerClassInit<DT_FuncOccluder::ignored>(DT_FuncOccluder::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_FuncPasstimeGoal::ignored>(DT_FuncPasstimeGoal::ignored*)::g_SendProps
 D int ServerClassInit<DT_FuncPasstimeGoal::ignored>(DT_FuncPasstimeGoal::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_FuncReflectiveGlass::ignored>(DT_FuncReflectiveGlass::ignored*)::g_SendProps
 D int ServerClassInit<DT_FuncReflectiveGlass::ignored>(DT_FuncReflectiveGlass::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_FuncRespawnRoom::ignored>(DT_FuncRespawnRoom::ignored*)::g_SendProps
 D int ServerClassInit<DT_FuncRespawnRoom::ignored>(DT_FuncRespawnRoom::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_FuncRespawnRoomVisualizer::ignored>(DT_FuncRespawnRoomVisualizer::ignored*)::g_SendProps
 D int ServerClassInit<DT_FuncRespawnRoomVisualizer::ignored>(DT_FuncRespawnRoomVisualizer::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_FuncRotating::ignored>(DT_FuncRotating::ignored*)::g_SendProps
 D int ServerClassInit<DT_FuncRotating::ignored>(DT_FuncRotating::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_FuncSmokeVolume::ignored>(DT_FuncSmokeVolume::ignored*)::g_SendProps
 D int ServerClassInit<DT_FuncSmokeVolume::ignored>(DT_FuncSmokeVolume::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_FuncTrackTrain::ignored>(DT_FuncTrackTrain::ignored*)::g_SendProps
 D int ServerClassInit<DT_FuncTrackTrain::ignored>(DT_FuncTrackTrain::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_Func_Dust::ignored>(DT_Func_Dust::ignored*)::g_SendProps
 D int ServerClassInit<DT_Func_Dust::ignored>(DT_Func_Dust::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_Func_LOD::ignored>(DT_Func_LOD::ignored*)::g_SendProps
 D int ServerClassInit<DT_Func_LOD::ignored>(DT_Func_LOD::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_GameRulesProxy::ignored>(DT_GameRulesProxy::ignored*)::g_SendProps
 D int ServerClassInit<DT_GameRulesProxy::ignored>(DT_GameRulesProxy::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_GrapplingHook::ignored>(DT_GrapplingHook::ignored*)::g_SendProps
 D int ServerClassInit<DT_GrapplingHook::ignored>(DT_GrapplingHook::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_HalloweenSoulPack::ignored>(DT_HalloweenSoulPack::ignored*)::g_SendProps
 D int ServerClassInit<DT_HalloweenSoulPack::ignored>(DT_HalloweenSoulPack::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_HandleTest::ignored>(DT_HandleTest::ignored*)::g_SendProps
 D int ServerClassInit<DT_HandleTest::ignored>(DT_HandleTest::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_HeadlessHatman::ignored>(DT_HeadlessHatman::ignored*)::g_SendProps
 D int ServerClassInit<DT_HeadlessHatman::ignored>(DT_HeadlessHatman::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_Hightower_TeleportVortex::ignored>(DT_Hightower_TeleportVortex::ignored*)::g_SendProps
 D int ServerClassInit<DT_Hightower_TeleportVortex::ignored>(DT_Hightower_TeleportVortex::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_InfoLadderDismount::ignored>(DT_InfoLadderDismount::ignored*)::g_SendProps
 D int ServerClassInit<DT_InfoLadderDismount::ignored>(DT_InfoLadderDismount::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_InfoLightingRelative::ignored>(DT_InfoLightingRelative::ignored*)::g_SendProps
 D int ServerClassInit<DT_InfoLightingRelative::ignored>(DT_InfoLightingRelative::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_InfoOverlayAccessor::ignored>(DT_InfoOverlayAccessor::ignored*)::g_SendProps
 D int ServerClassInit<DT_InfoOverlayAccessor::ignored>(DT_InfoOverlayAccessor::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_LaserDot::ignored>(DT_LaserDot::ignored*)::g_SendProps
 D int ServerClassInit<DT_LaserDot::ignored>(DT_LaserDot::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_LaserPointerLocalData::ignored>(DT_LaserPointerLocalData::ignored*)::g_SendProps
 D int ServerClassInit<DT_LaserPointerLocalData::ignored>(DT_LaserPointerLocalData::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_LightGlow::ignored>(DT_LightGlow::ignored*)::g_SendProps
 D int ServerClassInit<DT_LightGlow::ignored>(DT_LightGlow::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_Local::ignored>(DT_Local::ignored*)::g_SendProps
 D int ServerClassInit<DT_Local::ignored>(DT_Local::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_LocalActiveWeaponData::ignored>(DT_LocalActiveWeaponData::ignored*)::g_SendProps
 D int ServerClassInit<DT_LocalActiveWeaponData::ignored>(DT_LocalActiveWeaponData::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_LocalFlameThrower::ignored>(DT_LocalFlameThrower::ignored*)::g_SendProps
 D int ServerClassInit<DT_LocalFlameThrower::ignored>(DT_LocalFlameThrower::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_LocalPlayerExclusive::ignored>(DT_LocalPlayerExclusive::ignored*)::g_SendProps
 D int ServerClassInit<DT_LocalPlayerExclusive::ignored>(DT_LocalPlayerExclusive::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_LocalTFWeaponData::ignored>(DT_LocalTFWeaponData::ignored*)::g_SendProps
 D int ServerClassInit<DT_LocalTFWeaponData::ignored>(DT_LocalTFWeaponData::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_LocalTFWeaponMedigunData::ignored>(DT_LocalTFWeaponMedigunData::ignored*)::g_SendProps
 D int ServerClassInit<DT_LocalTFWeaponMedigunData::ignored>(DT_LocalTFWeaponMedigunData::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_LocalWeaponData::ignored>(DT_LocalWeaponData::ignored*)::g_SendProps
 D int ServerClassInit<DT_LocalWeaponData::ignored>(DT_LocalWeaponData::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_MannVsMachineStats::ignored>(DT_MannVsMachineStats::ignored*)::g_SendProps
 D int ServerClassInit<DT_MannVsMachineStats::ignored>(DT_MannVsMachineStats::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_MaterialModifyControl::ignored>(DT_MaterialModifyControl::ignored*)::g_SendProps
 D int ServerClassInit<DT_MaterialModifyControl::ignored>(DT_MaterialModifyControl::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_Merasmus::ignored>(DT_Merasmus::ignored*)::g_SendProps
 D int ServerClassInit<DT_Merasmus::ignored>(DT_Merasmus::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_MerasmusDancer::ignored>(DT_MerasmusDancer::ignored*)::g_SendProps
 D int ServerClassInit<DT_MerasmusDancer::ignored>(DT_MerasmusDancer::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_MonsterResource::ignored>(DT_MonsterResource::ignored*)::g_SendProps
 D int ServerClassInit<DT_MonsterResource::ignored>(DT_MonsterResource::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_MovieExplosion::ignored>(DT_MovieExplosion::ignored*)::g_SendProps
 D int ServerClassInit<DT_MovieExplosion::ignored>(DT_MovieExplosion::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_NextBot::ignored>(DT_NextBot::ignored*)::g_SendProps
 D int ServerClassInit<DT_NextBot::ignored>(DT_NextBot::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_ObjectCartDispenser::ignored>(DT_ObjectCartDispenser::ignored*)::g_SendProps
 D int ServerClassInit<DT_ObjectCartDispenser::ignored>(DT_ObjectCartDispenser::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_ObjectDispenser::ignored>(DT_ObjectDispenser::ignored*)::g_SendProps
 D int ServerClassInit<DT_ObjectDispenser::ignored>(DT_ObjectDispenser::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_ObjectSapper::ignored>(DT_ObjectSapper::ignored*)::g_SendProps
 D int ServerClassInit<DT_ObjectSapper::ignored>(DT_ObjectSapper::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_ObjectSentrygun::ignored>(DT_ObjectSentrygun::ignored*)::g_SendProps
 D int ServerClassInit<DT_ObjectSentrygun::ignored>(DT_ObjectSentrygun::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_ObjectTeleporter::ignored>(DT_ObjectTeleporter::ignored*)::g_SendProps
 D int ServerClassInit<DT_ObjectTeleporter::ignored>(DT_ObjectTeleporter::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_OverlayVars::ignored>(DT_OverlayVars::ignored*)::g_SendProps
 D int ServerClassInit<DT_OverlayVars::ignored>(DT_OverlayVars::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_ParticleCannon::ignored>(DT_ParticleCannon::ignored*)::g_SendProps
 D int ServerClassInit<DT_ParticleCannon::ignored>(DT_ParticleCannon::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_ParticleFire::ignored>(DT_ParticleFire::ignored*)::g_SendProps
 D int ServerClassInit<DT_ParticleFire::ignored>(DT_ParticleFire::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_ParticlePerformanceMonitor::ignored>(DT_ParticlePerformanceMonitor::ignored*)::g_SendProps
 D int ServerClassInit<DT_ParticlePerformanceMonitor::ignored>(DT_ParticlePerformanceMonitor::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_ParticleSmokeGrenade::ignored>(DT_ParticleSmokeGrenade::ignored*)::g_SendProps
 D int ServerClassInit<DT_ParticleSmokeGrenade::ignored>(DT_ParticleSmokeGrenade::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_ParticleSystem::ignored>(DT_ParticleSystem::ignored*)::g_SendProps
 D int ServerClassInit<DT_ParticleSystem::ignored>(DT_ParticleSystem::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_PasstimeBall::ignored>(DT_PasstimeBall::ignored*)::g_SendProps
 D int ServerClassInit<DT_PasstimeBall::ignored>(DT_PasstimeBall::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_PasstimeGun::ignored>(DT_PasstimeGun::ignored*)::g_SendProps
 D int ServerClassInit<DT_PasstimeGun::ignored>(DT_PasstimeGun::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_PhysBox::ignored>(DT_PhysBox::ignored*)::g_SendProps
 D int ServerClassInit<DT_PhysBox::ignored>(DT_PhysBox::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_PhysBoxMultiplayer::ignored>(DT_PhysBoxMultiplayer::ignored*)::g_SendProps
 D int ServerClassInit<DT_PhysBoxMultiplayer::ignored>(DT_PhysBoxMultiplayer::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_PhysMagnet::ignored>(DT_PhysMagnet::ignored*)::g_SendProps
 D int ServerClassInit<DT_PhysMagnet::ignored>(DT_PhysMagnet::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_PhysicsProp::ignored>(DT_PhysicsProp::ignored*)::g_SendProps
 D int ServerClassInit<DT_PhysicsProp::ignored>(DT_PhysicsProp::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_PhysicsPropMultiplayer::ignored>(DT_PhysicsPropMultiplayer::ignored*)::g_SendProps
 D int ServerClassInit<DT_PhysicsPropMultiplayer::ignored>(DT_PhysicsPropMultiplayer::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_PipebombLauncherLocalData::ignored>(DT_PipebombLauncherLocalData::ignored*)::g_SendProps
 D int ServerClassInit<DT_PipebombLauncherLocalData::ignored>(DT_PipebombLauncherLocalData::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_Plasma::ignored>(DT_Plasma::ignored*)::g_SendProps
 D int ServerClassInit<DT_Plasma::ignored>(DT_Plasma::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_PlayerDestructionDispenser::ignored>(DT_PlayerDestructionDispenser::ignored*)::g_SendProps
 D int ServerClassInit<DT_PlayerDestructionDispenser::ignored>(DT_PlayerDestructionDispenser::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_PlayerResource::ignored>(DT_PlayerResource::ignored*)::g_SendProps
 D int ServerClassInit<DT_PlayerResource::ignored>(DT_PlayerResource::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_PlayerState::ignored>(DT_PlayerState::ignored*)::g_SendProps
 D int ServerClassInit<DT_PlayerState::ignored>(DT_PlayerState::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_PointCamera::ignored>(DT_PointCamera::ignored*)::g_SendProps
 D int ServerClassInit<DT_PointCamera::ignored>(DT_PointCamera::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_PointCommentaryNode::ignored>(DT_PointCommentaryNode::ignored*)::g_SendProps
 D int ServerClassInit<DT_PointCommentaryNode::ignored>(DT_PointCommentaryNode::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_PoseController::ignored>(DT_PoseController::ignored*)::g_SendProps
 D int ServerClassInit<DT_PoseController::ignored>(DT_PoseController::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_Precipitation::ignored>(DT_Precipitation::ignored*)::g_SendProps
 D int ServerClassInit<DT_Precipitation::ignored>(DT_Precipitation::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_PredictableId::ignored>(DT_PredictableId::ignored*)::g_SendProps
 D int ServerClassInit<DT_PredictableId::ignored>(DT_PredictableId::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_PropVehicleDriveable::ignored>(DT_PropVehicleDriveable::ignored*)::g_SendProps
 D int ServerClassInit<DT_PropVehicleDriveable::ignored>(DT_PropVehicleDriveable::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_ProxyToggle::ignored>(DT_ProxyToggle::ignored*)::g_SendProps
 D int ServerClassInit<DT_ProxyToggle::ignored>(DT_ProxyToggle::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_ProxyToggle_ProxiedData::ignored>(DT_ProxyToggle_ProxiedData::ignored*)::g_SendProps
 D int ServerClassInit<DT_ProxyToggle_ProxiedData::ignored>(DT_ProxyToggle_ProxiedData::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_QuadraticBeam::ignored>(DT_QuadraticBeam::ignored*)::g_SendProps
 D int ServerClassInit<DT_QuadraticBeam::ignored>(DT_QuadraticBeam::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_Ragdoll::ignored>(DT_Ragdoll::ignored*)::g_SendProps
 D int ServerClassInit<DT_Ragdoll::ignored>(DT_Ragdoll::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_RagdollManager::ignored>(DT_RagdollManager::ignored*)::g_SendProps
 D int ServerClassInit<DT_RagdollManager::ignored>(DT_RagdollManager::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_Ragdoll_Attached::ignored>(DT_Ragdoll_Attached::ignored*)::g_SendProps
 D int ServerClassInit<DT_Ragdoll_Attached::ignored>(DT_Ragdoll_Attached::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_RobotDispenser::ignored>(DT_RobotDispenser::ignored*)::g_SendProps
 D int ServerClassInit<DT_RobotDispenser::ignored>(DT_RobotDispenser::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_RocketTrail::ignored>(DT_RocketTrail::ignored*)::g_SendProps
 D int ServerClassInit<DT_RocketTrail::ignored>(DT_RocketTrail::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_RopeKeyframe::ignored>(DT_RopeKeyframe::ignored*)::g_SendProps
 D int ServerClassInit<DT_RopeKeyframe::ignored>(DT_RopeKeyframe::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_SceneEntity::ignored>(DT_SceneEntity::ignored*)::g_SendProps
 D int ServerClassInit<DT_SceneEntity::ignored>(DT_SceneEntity::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_ScriptCreatedAttribute::ignored>(DT_ScriptCreatedAttribute::ignored*)::g_SendProps
 D int ServerClassInit<DT_ScriptCreatedAttribute::ignored>(DT_ScriptCreatedAttribute::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_ScriptCreatedItem::ignored>(DT_ScriptCreatedItem::ignored*)::g_SendProps
 D int ServerClassInit<DT_ScriptCreatedItem::ignored>(DT_ScriptCreatedItem::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_SentrygunLocalData::ignored>(DT_SentrygunLocalData::ignored*)::g_SendProps
 D int ServerClassInit<DT_SentrygunLocalData::ignored>(DT_SentrygunLocalData::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_ServerAnimationData::ignored>(DT_ServerAnimationData::ignored*)::g_SendProps
 D int ServerClassInit<DT_ServerAnimationData::ignored>(DT_ServerAnimationData::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_ShadowControl::ignored>(DT_ShadowControl::ignored*)::g_SendProps
 D int ServerClassInit<DT_ShadowControl::ignored>(DT_ShadowControl::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_SlideshowDisplay::ignored>(DT_SlideshowDisplay::ignored*)::g_SendProps
 D int ServerClassInit<DT_SlideshowDisplay::ignored>(DT_SlideshowDisplay::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_SmokeStack::ignored>(DT_SmokeStack::ignored*)::g_SendProps
 D int ServerClassInit<DT_SmokeStack::ignored>(DT_SmokeStack::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_SmokeTrail::ignored>(DT_SmokeTrail::ignored*)::g_SendProps
 D int ServerClassInit<DT_SmokeTrail::ignored>(DT_SmokeTrail::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_SniperDot::ignored>(DT_SniperDot::ignored*)::g_SendProps
 D int ServerClassInit<DT_SniperDot::ignored>(DT_SniperDot::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_SniperRifleLocalData::ignored>(DT_SniperRifleLocalData::ignored*)::g_SendProps
 D int ServerClassInit<DT_SniperRifleLocalData::ignored>(DT_SniperRifleLocalData::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_SporeExplosion::ignored>(DT_SporeExplosion::ignored*)::g_SendProps
 D int ServerClassInit<DT_SporeExplosion::ignored>(DT_SporeExplosion::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_SporeTrail::ignored>(DT_SporeTrail::ignored*)::g_SendProps
 D int ServerClassInit<DT_SporeTrail::ignored>(DT_SporeTrail::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_SpotlightEnd::ignored>(DT_SpotlightEnd::ignored*)::g_SendProps
 D int ServerClassInit<DT_SpotlightEnd::ignored>(DT_SpotlightEnd::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_Sprite::ignored>(DT_Sprite::ignored*)::g_SendProps
 D int ServerClassInit<DT_Sprite::ignored>(DT_Sprite::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_SpriteOriented::ignored>(DT_SpriteOriented::ignored*)::g_SendProps
 D int ServerClassInit<DT_SpriteOriented::ignored>(DT_SpriteOriented::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_SpriteTrail::ignored>(DT_SpriteTrail::ignored*)::g_SendProps
 D int ServerClassInit<DT_SpriteTrail::ignored>(DT_SpriteTrail::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_SteamJet::ignored>(DT_SteamJet::ignored*)::g_SendProps
 D int ServerClassInit<DT_SteamJet::ignored>(DT_SteamJet::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_Sun::ignored>(DT_Sun::ignored*)::g_SendProps
 D int ServerClassInit<DT_Sun::ignored>(DT_Sun::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_TEArmorRicochet::ignored>(DT_TEArmorRicochet::ignored*)::g_SendProps
 D int ServerClassInit<DT_TEArmorRicochet::ignored>(DT_TEArmorRicochet::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_TEBSPDecal::ignored>(DT_TEBSPDecal::ignored*)::g_SendProps
 D int ServerClassInit<DT_TEBSPDecal::ignored>(DT_TEBSPDecal::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_TEBeamEntPoint::ignored>(DT_TEBeamEntPoint::ignored*)::g_SendProps
 D int ServerClassInit<DT_TEBeamEntPoint::ignored>(DT_TEBeamEntPoint::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_TEBeamEnts::ignored>(DT_TEBeamEnts::ignored*)::g_SendProps
 D int ServerClassInit<DT_TEBeamEnts::ignored>(DT_TEBeamEnts::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_TEBeamFollow::ignored>(DT_TEBeamFollow::ignored*)::g_SendProps
 D int ServerClassInit<DT_TEBeamFollow::ignored>(DT_TEBeamFollow::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_TEBeamLaser::ignored>(DT_TEBeamLaser::ignored*)::g_SendProps
 D int ServerClassInit<DT_TEBeamLaser::ignored>(DT_TEBeamLaser::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_TEBeamPoints::ignored>(DT_TEBeamPoints::ignored*)::g_SendProps
 D int ServerClassInit<DT_TEBeamPoints::ignored>(DT_TEBeamPoints::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_TEBeamRing::ignored>(DT_TEBeamRing::ignored*)::g_SendProps
 D int ServerClassInit<DT_TEBeamRing::ignored>(DT_TEBeamRing::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_TEBeamRingPoint::ignored>(DT_TEBeamRingPoint::ignored*)::g_SendProps
 D int ServerClassInit<DT_TEBeamRingPoint::ignored>(DT_TEBeamRingPoint::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_TEBeamSpline::ignored>(DT_TEBeamSpline::ignored*)::g_SendProps
 D int ServerClassInit<DT_TEBeamSpline::ignored>(DT_TEBeamSpline::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_TEBloodSprite::ignored>(DT_TEBloodSprite::ignored*)::g_SendProps
 D int ServerClassInit<DT_TEBloodSprite::ignored>(DT_TEBloodSprite::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_TEBloodStream::ignored>(DT_TEBloodStream::ignored*)::g_SendProps
 D int ServerClassInit<DT_TEBloodStream::ignored>(DT_TEBloodStream::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_TEBreakModel::ignored>(DT_TEBreakModel::ignored*)::g_SendProps
 D int ServerClassInit<DT_TEBreakModel::ignored>(DT_TEBreakModel::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_TEBubbleTrail::ignored>(DT_TEBubbleTrail::ignored*)::g_SendProps
 D int ServerClassInit<DT_TEBubbleTrail::ignored>(DT_TEBubbleTrail::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_TEBubbles::ignored>(DT_TEBubbles::ignored*)::g_SendProps
 D int ServerClassInit<DT_TEBubbles::ignored>(DT_TEBubbles::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_TEClientProjectile::ignored>(DT_TEClientProjectile::ignored*)::g_SendProps
 D int ServerClassInit<DT_TEClientProjectile::ignored>(DT_TEClientProjectile::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_TEDecal::ignored>(DT_TEDecal::ignored*)::g_SendProps
 D int ServerClassInit<DT_TEDecal::ignored>(DT_TEDecal::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_TEDust::ignored>(DT_TEDust::ignored*)::g_SendProps
 D int ServerClassInit<DT_TEDust::ignored>(DT_TEDust::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_TEDynamicLight::ignored>(DT_TEDynamicLight::ignored*)::g_SendProps
 D int ServerClassInit<DT_TEDynamicLight::ignored>(DT_TEDynamicLight::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_TEEffectDispatch::ignored>(DT_TEEffectDispatch::ignored*)::g_SendProps
 D int ServerClassInit<DT_TEEffectDispatch::ignored>(DT_TEEffectDispatch::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_TEEnergySplash::ignored>(DT_TEEnergySplash::ignored*)::g_SendProps
 D int ServerClassInit<DT_TEEnergySplash::ignored>(DT_TEEnergySplash::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_TEExplosion::ignored>(DT_TEExplosion::ignored*)::g_SendProps
 D int ServerClassInit<DT_TEExplosion::ignored>(DT_TEExplosion::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_TEFireBullets::ignored>(DT_TEFireBullets::ignored*)::g_SendProps
 D int ServerClassInit<DT_TEFireBullets::ignored>(DT_TEFireBullets::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_TEFizz::ignored>(DT_TEFizz::ignored*)::g_SendProps
 D int ServerClassInit<DT_TEFizz::ignored>(DT_TEFizz::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_TEFootprintDecal::ignored>(DT_TEFootprintDecal::ignored*)::g_SendProps
 D int ServerClassInit<DT_TEFootprintDecal::ignored>(DT_TEFootprintDecal::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_TEGaussExplosion::ignored>(DT_TEGaussExplosion::ignored*)::g_SendProps
 D int ServerClassInit<DT_TEGaussExplosion::ignored>(DT_TEGaussExplosion::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_TEGlowSprite::ignored>(DT_TEGlowSprite::ignored*)::g_SendProps
 D int ServerClassInit<DT_TEGlowSprite::ignored>(DT_TEGlowSprite::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_TEImpact::ignored>(DT_TEImpact::ignored*)::g_SendProps
 D int ServerClassInit<DT_TEImpact::ignored>(DT_TEImpact::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_TEKillPlayerAttachments::ignored>(DT_TEKillPlayerAttachments::ignored*)::g_SendProps
 D int ServerClassInit<DT_TEKillPlayerAttachments::ignored>(DT_TEKillPlayerAttachments::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_TELargeFunnel::ignored>(DT_TELargeFunnel::ignored*)::g_SendProps
 D int ServerClassInit<DT_TELargeFunnel::ignored>(DT_TELargeFunnel::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_TEMetalSparks::ignored>(DT_TEMetalSparks::ignored*)::g_SendProps
 D int ServerClassInit<DT_TEMetalSparks::ignored>(DT_TEMetalSparks::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_TEMuzzleFlash::ignored>(DT_TEMuzzleFlash::ignored*)::g_SendProps
 D int ServerClassInit<DT_TEMuzzleFlash::ignored>(DT_TEMuzzleFlash::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_TEParticleSystem::ignored>(DT_TEParticleSystem::ignored*)::g_SendProps
 D int ServerClassInit<DT_TEParticleSystem::ignored>(DT_TEParticleSystem::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_TEPhysicsProp::ignored>(DT_TEPhysicsProp::ignored*)::g_SendProps
 D int ServerClassInit<DT_TEPhysicsProp::ignored>(DT_TEPhysicsProp::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_TEPlayerAnimEvent::ignored>(DT_TEPlayerAnimEvent::ignored*)::g_SendProps
 D int ServerClassInit<DT_TEPlayerAnimEvent::ignored>(DT_TEPlayerAnimEvent::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_TEPlayerDecal::ignored>(DT_TEPlayerDecal::ignored*)::g_SendProps
 D int ServerClassInit<DT_TEPlayerDecal::ignored>(DT_TEPlayerDecal::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_TEProjectedDecal::ignored>(DT_TEProjectedDecal::ignored*)::g_SendProps
 D int ServerClassInit<DT_TEProjectedDecal::ignored>(DT_TEProjectedDecal::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_TEShatterSurface::ignored>(DT_TEShatterSurface::ignored*)::g_SendProps
 D int ServerClassInit<DT_TEShatterSurface::ignored>(DT_TEShatterSurface::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_TEShowLine::ignored>(DT_TEShowLine::ignored*)::g_SendProps
 D int ServerClassInit<DT_TEShowLine::ignored>(DT_TEShowLine::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_TESmoke::ignored>(DT_TESmoke::ignored*)::g_SendProps
 D int ServerClassInit<DT_TESmoke::ignored>(DT_TESmoke::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_TESparks::ignored>(DT_TESparks::ignored*)::g_SendProps
 D int ServerClassInit<DT_TESparks::ignored>(DT_TESparks::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_TESprite::ignored>(DT_TESprite::ignored*)::g_SendProps
 D int ServerClassInit<DT_TESprite::ignored>(DT_TESprite::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_TESpriteSpray::ignored>(DT_TESpriteSpray::ignored*)::g_SendProps
 D int ServerClassInit<DT_TESpriteSpray::ignored>(DT_TESpriteSpray::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_TETFBlood::ignored>(DT_TETFBlood::ignored*)::g_SendProps
 D int ServerClassInit<DT_TETFBlood::ignored>(DT_TETFBlood::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_TETFExplosion::ignored>(DT_TETFExplosion::ignored*)::g_SendProps
 D int ServerClassInit<DT_TETFExplosion::ignored>(DT_TETFExplosion::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_TETFParticleEffect::ignored>(DT_TETFParticleEffect::ignored*)::g_SendProps
 D int ServerClassInit<DT_TETFParticleEffect::ignored>(DT_TETFParticleEffect::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_TEWorldDecal::ignored>(DT_TEWorldDecal::ignored*)::g_SendProps
 D int ServerClassInit<DT_TEWorldDecal::ignored>(DT_TEWorldDecal::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_TFBaseBoss::ignored>(DT_TFBaseBoss::ignored*)::g_SendProps
 D int ServerClassInit<DT_TFBaseBoss::ignored>(DT_TFBaseBoss::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_TFBaseProjectile::ignored>(DT_TFBaseProjectile::ignored*)::g_SendProps
 D int ServerClassInit<DT_TFBaseProjectile::ignored>(DT_TFBaseProjectile::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_TFBaseRocket::ignored>(DT_TFBaseRocket::ignored*)::g_SendProps
 D int ServerClassInit<DT_TFBaseRocket::ignored>(DT_TFBaseRocket::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_TFBotHintEngineerNest::ignored>(DT_TFBotHintEngineerNest::ignored*)::g_SendProps
 D int ServerClassInit<DT_TFBotHintEngineerNest::ignored>(DT_TFBotHintEngineerNest::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_TFCannon::ignored>(DT_TFCannon::ignored*)::g_SendProps
 D int ServerClassInit<DT_TFCannon::ignored>(DT_TFCannon::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_TFDroppedWeapon::ignored>(DT_TFDroppedWeapon::ignored*)::g_SendProps
 D int ServerClassInit<DT_TFDroppedWeapon::ignored>(DT_TFDroppedWeapon::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_TFFlameRocket::ignored>(DT_TFFlameRocket::ignored*)::g_SendProps
 D int ServerClassInit<DT_TFFlameRocket::ignored>(DT_TFFlameRocket::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_TFGameRules::ignored>(DT_TFGameRules::ignored*)::g_SendProps
 D int ServerClassInit<DT_TFGameRules::ignored>(DT_TFGameRules::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_TFGameRulesProxy::ignored>(DT_TFGameRulesProxy::ignored*)::g_SendProps
 D int ServerClassInit<DT_TFGameRulesProxy::ignored>(DT_TFGameRulesProxy::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_TFGenericBomb::ignored>(DT_TFGenericBomb::ignored*)::g_SendProps
 D int ServerClassInit<DT_TFGenericBomb::ignored>(DT_TFGenericBomb::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_TFGlow::ignored>(DT_TFGlow::ignored*)::g_SendProps
 D int ServerClassInit<DT_TFGlow::ignored>(DT_TFGlow::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_TFHalloweenMinigame::ignored>(DT_TFHalloweenMinigame::ignored*)::g_SendProps
 D int ServerClassInit<DT_TFHalloweenMinigame::ignored>(DT_TFHalloweenMinigame::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_TFHalloweenMinigame_FallingPlatforms::ignored>(DT_TFHalloweenMinigame_FallingPlatforms::ignored*)::g_SendProps
 D int ServerClassInit<DT_TFHalloweenMinigame_FallingPlatforms::ignored>(DT_TFHalloweenMinigame_FallingPlatforms::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_TFHellZap::ignored>(DT_TFHellZap::ignored*)::g_SendProps
 D int ServerClassInit<DT_TFHellZap::ignored>(DT_TFHellZap::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_TFItem::ignored>(DT_TFItem::ignored*)::g_SendProps
 D int ServerClassInit<DT_TFItem::ignored>(DT_TFItem::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_TFLaserPointer::ignored>(DT_TFLaserPointer::ignored*)::g_SendProps
 D int ServerClassInit<DT_TFLaserPointer::ignored>(DT_TFLaserPointer::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_TFLocalPlayerExclusive::ignored>(DT_TFLocalPlayerExclusive::ignored*)::g_SendProps
 D int ServerClassInit<DT_TFLocalPlayerExclusive::ignored>(DT_TFLocalPlayerExclusive::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_TFLunchBox_Drink::ignored>(DT_TFLunchBox_Drink::ignored*)::g_SendProps
 D int ServerClassInit<DT_TFLunchBox_Drink::ignored>(DT_TFLunchBox_Drink::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_TFMechanicalArm::ignored>(DT_TFMechanicalArm::ignored*)::g_SendProps
 D int ServerClassInit<DT_TFMechanicalArm::ignored>(DT_TFMechanicalArm::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_TFMedigunShield::ignored>(DT_TFMedigunShield::ignored*)::g_SendProps
 D int ServerClassInit<DT_TFMedigunShield::ignored>(DT_TFMedigunShield::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_TFMinigame::ignored>(DT_TFMinigame::ignored*)::g_SendProps
 D int ServerClassInit<DT_TFMinigame::ignored>(DT_TFMinigame::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_TFMinigameLogic::ignored>(DT_TFMinigameLogic::ignored*)::g_SendProps
 D int ServerClassInit<DT_TFMinigameLogic::ignored>(DT_TFMinigameLogic::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_TFNonLocalPlayerExclusive::ignored>(DT_TFNonLocalPlayerExclusive::ignored*)::g_SendProps
 D int ServerClassInit<DT_TFNonLocalPlayerExclusive::ignored>(DT_TFNonLocalPlayerExclusive::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_TFObjectiveResource::ignored>(DT_TFObjectiveResource::ignored*)::g_SendProps
 D int ServerClassInit<DT_TFObjectiveResource::ignored>(DT_TFObjectiveResource::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_TFPEPBrawlerBlaster::ignored>(DT_TFPEPBrawlerBlaster::ignored*)::g_SendProps
 D int ServerClassInit<DT_TFPEPBrawlerBlaster::ignored>(DT_TFPEPBrawlerBlaster::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_TFParachute::ignored>(DT_TFParachute::ignored*)::g_SendProps
 D int ServerClassInit<DT_TFParachute::ignored>(DT_TFParachute::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_TFParachute_Primary::ignored>(DT_TFParachute_Primary::ignored*)::g_SendProps
 D int ServerClassInit<DT_TFParachute_Primary::ignored>(DT_TFParachute_Primary::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_TFParachute_Secondary::ignored>(DT_TFParachute_Secondary::ignored*)::g_SendProps
 D int ServerClassInit<DT_TFParachute_Secondary::ignored>(DT_TFParachute_Secondary::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_TFPasstimeLogic::ignored>(DT_TFPasstimeLogic::ignored*)::g_SendProps
 D int ServerClassInit<DT_TFPasstimeLogic::ignored>(DT_TFPasstimeLogic::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_TFPlayer::ignored>(DT_TFPlayer::ignored*)::g_SendProps
 D int ServerClassInit<DT_TFPlayer::ignored>(DT_TFPlayer::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_TFPlayerClassShared::ignored>(DT_TFPlayerClassShared::ignored*)::g_SendProps
 D int ServerClassInit<DT_TFPlayerClassShared::ignored>(DT_TFPlayerClassShared::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_TFPlayerConditionListExclusive::ignored>(DT_TFPlayerConditionListExclusive::ignored*)::g_SendProps
 D int ServerClassInit<DT_TFPlayerConditionListExclusive::ignored>(DT_TFPlayerConditionListExclusive::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_TFPlayerConditionSource::ignored>(DT_TFPlayerConditionSource::ignored*)::g_SendProps
 D int ServerClassInit<DT_TFPlayerConditionSource::ignored>(DT_TFPlayerConditionSource::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_TFPlayerDestructionLogic::ignored>(DT_TFPlayerDestructionLogic::ignored*)::g_SendProps
 D int ServerClassInit<DT_TFPlayerDestructionLogic::ignored>(DT_TFPlayerDestructionLogic::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_TFPlayerResource::ignored>(DT_TFPlayerResource::ignored*)::g_SendProps
 D int ServerClassInit<DT_TFPlayerResource::ignored>(DT_TFPlayerResource::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_TFPlayerScoringDataExclusive::ignored>(DT_TFPlayerScoringDataExclusive::ignored*)::g_SendProps
 D int ServerClassInit<DT_TFPlayerScoringDataExclusive::ignored>(DT_TFPlayerScoringDataExclusive::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_TFPlayerShared::ignored>(DT_TFPlayerShared::ignored*)::g_SendProps
 D int ServerClassInit<DT_TFPlayerShared::ignored>(DT_TFPlayerShared::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_TFPlayerSharedLocal::ignored>(DT_TFPlayerSharedLocal::ignored*)::g_SendProps
 D int ServerClassInit<DT_TFPlayerSharedLocal::ignored>(DT_TFPlayerSharedLocal::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_TFPowerupBottle::ignored>(DT_TFPowerupBottle::ignored*)::g_SendProps
 D int ServerClassInit<DT_TFPowerupBottle::ignored>(DT_TFPowerupBottle::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_TFProjectileBall_Ornament::ignored>(DT_TFProjectileBall_Ornament::ignored*)::g_SendProps
 D int ServerClassInit<DT_TFProjectileBall_Ornament::ignored>(DT_TFProjectileBall_Ornament::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_TFProjectile_Arrow::ignored>(DT_TFProjectile_Arrow::ignored*)::g_SendProps
 D int ServerClassInit<DT_TFProjectile_Arrow::ignored>(DT_TFProjectile_Arrow::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_TFProjectile_Cleaver::ignored>(DT_TFProjectile_Cleaver::ignored*)::g_SendProps
 D int ServerClassInit<DT_TFProjectile_Cleaver::ignored>(DT_TFProjectile_Cleaver::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_TFProjectile_EnergyBall::ignored>(DT_TFProjectile_EnergyBall::ignored*)::g_SendProps
 D int ServerClassInit<DT_TFProjectile_EnergyBall::ignored>(DT_TFProjectile_EnergyBall::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_TFProjectile_EnergyRing::ignored>(DT_TFProjectile_EnergyRing::ignored*)::g_SendProps
 D int ServerClassInit<DT_TFProjectile_EnergyRing::ignored>(DT_TFProjectile_EnergyRing::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_TFProjectile_Flare::ignored>(DT_TFProjectile_Flare::ignored*)::g_SendProps
 D int ServerClassInit<DT_TFProjectile_Flare::ignored>(DT_TFProjectile_Flare::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_TFProjectile_GrapplingHook::ignored>(DT_TFProjectile_GrapplingHook::ignored*)::g_SendProps
 D int ServerClassInit<DT_TFProjectile_GrapplingHook::ignored>(DT_TFProjectile_GrapplingHook::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_TFProjectile_HealingBolt::ignored>(DT_TFProjectile_HealingBolt::ignored*)::g_SendProps
 D int ServerClassInit<DT_TFProjectile_HealingBolt::ignored>(DT_TFProjectile_HealingBolt::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_TFProjectile_Jar::ignored>(DT_TFProjectile_Jar::ignored*)::g_SendProps
 D int ServerClassInit<DT_TFProjectile_Jar::ignored>(DT_TFProjectile_Jar::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_TFProjectile_JarMilk::ignored>(DT_TFProjectile_JarMilk::ignored*)::g_SendProps
 D int ServerClassInit<DT_TFProjectile_JarMilk::ignored>(DT_TFProjectile_JarMilk::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_TFProjectile_Pipebomb::ignored>(DT_TFProjectile_Pipebomb::ignored*)::g_SendProps
 D int ServerClassInit<DT_TFProjectile_Pipebomb::ignored>(DT_TFProjectile_Pipebomb::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_TFProjectile_Rocket::ignored>(DT_TFProjectile_Rocket::ignored*)::g_SendProps
 D int ServerClassInit<DT_TFProjectile_Rocket::ignored>(DT_TFProjectile_Rocket::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_TFProjectile_SentryRocket::ignored>(DT_TFProjectile_SentryRocket::ignored*)::g_SendProps
 D int ServerClassInit<DT_TFProjectile_SentryRocket::ignored>(DT_TFProjectile_SentryRocket::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_TFProjectile_SpellBats::ignored>(DT_TFProjectile_SpellBats::ignored*)::g_SendProps
 D int ServerClassInit<DT_TFProjectile_SpellBats::ignored>(DT_TFProjectile_SpellBats::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_TFProjectile_SpellFireball::ignored>(DT_TFProjectile_SpellFireball::ignored*)::g_SendProps
 D int ServerClassInit<DT_TFProjectile_SpellFireball::ignored>(DT_TFProjectile_SpellFireball::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_TFProjectile_SpellKartBats::ignored>(DT_TFProjectile_SpellKartBats::ignored*)::g_SendProps
 D int ServerClassInit<DT_TFProjectile_SpellKartBats::ignored>(DT_TFProjectile_SpellKartBats::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_TFProjectile_SpellKartOrb::ignored>(DT_TFProjectile_SpellKartOrb::ignored*)::g_SendProps
 D int ServerClassInit<DT_TFProjectile_SpellKartOrb::ignored>(DT_TFProjectile_SpellKartOrb::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_TFProjectile_SpellLightningOrb::ignored>(DT_TFProjectile_SpellLightningOrb::ignored*)::g_SendProps
 D int ServerClassInit<DT_TFProjectile_SpellLightningOrb::ignored>(DT_TFProjectile_SpellLightningOrb::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_TFProjectile_SpellMeteorShower::ignored>(DT_TFProjectile_SpellMeteorShower::ignored*)::g_SendProps
 D int ServerClassInit<DT_TFProjectile_SpellMeteorShower::ignored>(DT_TFProjectile_SpellMeteorShower::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_TFProjectile_SpellMirv::ignored>(DT_TFProjectile_SpellMirv::ignored*)::g_SendProps
 D int ServerClassInit<DT_TFProjectile_SpellMirv::ignored>(DT_TFProjectile_SpellMirv::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_TFProjectile_SpellPumpkin::ignored>(DT_TFProjectile_SpellPumpkin::ignored*)::g_SendProps
 D int ServerClassInit<DT_TFProjectile_SpellPumpkin::ignored>(DT_TFProjectile_SpellPumpkin::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_TFProjectile_SpellSpawnBoss::ignored>(DT_TFProjectile_SpellSpawnBoss::ignored*)::g_SendProps
 D int ServerClassInit<DT_TFProjectile_SpellSpawnBoss::ignored>(DT_TFProjectile_SpellSpawnBoss::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_TFProjectile_SpellSpawnHorde::ignored>(DT_TFProjectile_SpellSpawnHorde::ignored*)::g_SendProps
 D int ServerClassInit<DT_TFProjectile_SpellSpawnHorde::ignored>(DT_TFProjectile_SpellSpawnHorde::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_TFProjectile_SpellSpawnZombie::ignored>(DT_TFProjectile_SpellSpawnZombie::ignored*)::g_SendProps
 D int ServerClassInit<DT_TFProjectile_SpellSpawnZombie::ignored>(DT_TFProjectile_SpellSpawnZombie::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_TFProjectile_StunBall::ignored>(DT_TFProjectile_StunBall::ignored*)::g_SendProps
 D int ServerClassInit<DT_TFProjectile_StunBall::ignored>(DT_TFProjectile_StunBall::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_TFProjectile_Throwable::ignored>(DT_TFProjectile_Throwable::ignored*)::g_SendProps
 D int ServerClassInit<DT_TFProjectile_Throwable::ignored>(DT_TFProjectile_Throwable::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_TFProjectile_ThrowableBreadMonster::ignored>(DT_TFProjectile_ThrowableBreadMonster::ignored*)::g_SendProps
 D int ServerClassInit<DT_TFProjectile_ThrowableBreadMonster::ignored>(DT_TFProjectile_ThrowableBreadMonster::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_TFProjectile_ThrowableBrick::ignored>(DT_TFProjectile_ThrowableBrick::ignored*)::g_SendProps
 D int ServerClassInit<DT_TFProjectile_ThrowableBrick::ignored>(DT_TFProjectile_ThrowableBrick::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_TFProjectile_ThrowableRepel::ignored>(DT_TFProjectile_ThrowableRepel::ignored*)::g_SendProps
 D int ServerClassInit<DT_TFProjectile_ThrowableRepel::ignored>(DT_TFProjectile_ThrowableRepel::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_TFPumpkinBomb::ignored>(DT_TFPumpkinBomb::ignored*)::g_SendProps
 D int ServerClassInit<DT_TFPumpkinBomb::ignored>(DT_TFPumpkinBomb::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_TFRagdoll::ignored>(DT_TFRagdoll::ignored*)::g_SendProps
 D int ServerClassInit<DT_TFRagdoll::ignored>(DT_TFRagdoll::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_TFReviveMarker::ignored>(DT_TFReviveMarker::ignored*)::g_SendProps
 D int ServerClassInit<DT_TFReviveMarker::ignored>(DT_TFReviveMarker::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_TFRobotDestructionLogic::ignored>(DT_TFRobotDestructionLogic::ignored*)::g_SendProps
 D int ServerClassInit<DT_TFRobotDestructionLogic::ignored>(DT_TFRobotDestructionLogic::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_TFRobotDestructionRobotSpawn::ignored>(DT_TFRobotDestructionRobotSpawn::ignored*)::g_SendProps
 D int ServerClassInit<DT_TFRobotDestructionRobotSpawn::ignored>(DT_TFRobotDestructionRobotSpawn::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_TFRobotDestruction_Robot::ignored>(DT_TFRobotDestruction_Robot::ignored*)::g_SendProps
 D int ServerClassInit<DT_TFRobotDestruction_Robot::ignored>(DT_TFRobotDestruction_Robot::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_TFRobotDestruction_RobotGroup::ignored>(DT_TFRobotDestruction_RobotGroup::ignored*)::g_SendProps
 D int ServerClassInit<DT_TFRobotDestruction_RobotGroup::ignored>(DT_TFRobotDestruction_RobotGroup::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_TFSMG::ignored>(DT_TFSMG::ignored*)::g_SendProps
 D int ServerClassInit<DT_TFSMG::ignored>(DT_TFSMG::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_TFScatterGun::ignored>(DT_TFScatterGun::ignored*)::g_SendProps
 D int ServerClassInit<DT_TFScatterGun::ignored>(DT_TFScatterGun::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_TFSendHealersDataTable::ignored>(DT_TFSendHealersDataTable::ignored*)::g_SendProps
 D int ServerClassInit<DT_TFSendHealersDataTable::ignored>(DT_TFSendHealersDataTable::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_TFShotgun::ignored>(DT_TFShotgun::ignored*)::g_SendProps
 D int ServerClassInit<DT_TFShotgun::ignored>(DT_TFShotgun::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_TFShotgunBuildingRescue::ignored>(DT_TFShotgunBuildingRescue::ignored*)::g_SendProps
 D int ServerClassInit<DT_TFShotgunBuildingRescue::ignored>(DT_TFShotgunBuildingRescue::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_TFShotgun_HWG::ignored>(DT_TFShotgun_HWG::ignored*)::g_SendProps
 D int ServerClassInit<DT_TFShotgun_HWG::ignored>(DT_TFShotgun_HWG::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_TFShotgun_Pyro::ignored>(DT_TFShotgun_Pyro::ignored*)::g_SendProps
 D int ServerClassInit<DT_TFShotgun_Pyro::ignored>(DT_TFShotgun_Pyro::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_TFShotgun_Revenge::ignored>(DT_TFShotgun_Revenge::ignored*)::g_SendProps
 D int ServerClassInit<DT_TFShotgun_Revenge::ignored>(DT_TFShotgun_Revenge::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_TFShotgun_Soldier::ignored>(DT_TFShotgun_Soldier::ignored*)::g_SendProps
 D int ServerClassInit<DT_TFShotgun_Soldier::ignored>(DT_TFShotgun_Soldier::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_TFSniperRifle::ignored>(DT_TFSniperRifle::ignored*)::g_SendProps
 D int ServerClassInit<DT_TFSniperRifle::ignored>(DT_TFSniperRifle::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_TFSniperRifleClassic::ignored>(DT_TFSniperRifleClassic::ignored*)::g_SendProps
 D int ServerClassInit<DT_TFSniperRifleClassic::ignored>(DT_TFSniperRifleClassic::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_TFSniperRifleDecap::ignored>(DT_TFSniperRifleDecap::ignored*)::g_SendProps
 D int ServerClassInit<DT_TFSniperRifleDecap::ignored>(DT_TFSniperRifleDecap::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_TFSodaPopper::ignored>(DT_TFSodaPopper::ignored*)::g_SendProps
 D int ServerClassInit<DT_TFSodaPopper::ignored>(DT_TFSodaPopper::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_TFTankBoss::ignored>(DT_TFTankBoss::ignored*)::g_SendProps
 D int ServerClassInit<DT_TFTankBoss::ignored>(DT_TFTankBoss::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_TFTauntProp::ignored>(DT_TFTauntProp::ignored*)::g_SendProps
 D int ServerClassInit<DT_TFTauntProp::ignored>(DT_TFTauntProp::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_TFTeam::ignored>(DT_TFTeam::ignored*)::g_SendProps
 D int ServerClassInit<DT_TFTeam::ignored>(DT_TFTeam::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_TFViewModel::ignored>(DT_TFViewModel::ignored*)::g_SendProps
 D int ServerClassInit<DT_TFViewModel::ignored>(DT_TFViewModel::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_TFWeaponBase::ignored>(DT_TFWeaponBase::ignored*)::g_SendProps
 D int ServerClassInit<DT_TFWeaponBase::ignored>(DT_TFWeaponBase::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_TFWeaponBaseGrenadeProj::ignored>(DT_TFWeaponBaseGrenadeProj::ignored*)::g_SendProps
 D int ServerClassInit<DT_TFWeaponBaseGrenadeProj::ignored>(DT_TFWeaponBaseGrenadeProj::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_TFWeaponBaseGun::ignored>(DT_TFWeaponBaseGun::ignored*)::g_SendProps
 D int ServerClassInit<DT_TFWeaponBaseGun::ignored>(DT_TFWeaponBaseGun::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_TFWeaponBaseMelee::ignored>(DT_TFWeaponBaseMelee::ignored*)::g_SendProps
 D int ServerClassInit<DT_TFWeaponBaseMelee::ignored>(DT_TFWeaponBaseMelee::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_TFWeaponBaseMerasmusGrenade::ignored>(DT_TFWeaponBaseMerasmusGrenade::ignored*)::g_SendProps
 D int ServerClassInit<DT_TFWeaponBaseMerasmusGrenade::ignored>(DT_TFWeaponBaseMerasmusGrenade::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_TFWeaponBat::ignored>(DT_TFWeaponBat::ignored*)::g_SendProps
 D int ServerClassInit<DT_TFWeaponBat::ignored>(DT_TFWeaponBat::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_TFWeaponBat_Fish::ignored>(DT_TFWeaponBat_Fish::ignored*)::g_SendProps
 D int ServerClassInit<DT_TFWeaponBat_Fish::ignored>(DT_TFWeaponBat_Fish::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_TFWeaponBat_Giftwrap::ignored>(DT_TFWeaponBat_Giftwrap::ignored*)::g_SendProps
 D int ServerClassInit<DT_TFWeaponBat_Giftwrap::ignored>(DT_TFWeaponBat_Giftwrap::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_TFWeaponBat_Wood::ignored>(DT_TFWeaponBat_Wood::ignored*)::g_SendProps
 D int ServerClassInit<DT_TFWeaponBat_Wood::ignored>(DT_TFWeaponBat_Wood::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_TFWeaponBonesaw::ignored>(DT_TFWeaponBonesaw::ignored*)::g_SendProps
 D int ServerClassInit<DT_TFWeaponBonesaw::ignored>(DT_TFWeaponBonesaw::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_TFWeaponBottle::ignored>(DT_TFWeaponBottle::ignored*)::g_SendProps
 D int ServerClassInit<DT_TFWeaponBottle::ignored>(DT_TFWeaponBottle::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_TFWeaponBuffItem::ignored>(DT_TFWeaponBuffItem::ignored*)::g_SendProps
 D int ServerClassInit<DT_TFWeaponBuffItem::ignored>(DT_TFWeaponBuffItem::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_TFWeaponBuilder::ignored>(DT_TFWeaponBuilder::ignored*)::g_SendProps
 D int ServerClassInit<DT_TFWeaponBuilder::ignored>(DT_TFWeaponBuilder::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_TFWeaponCleaver::ignored>(DT_TFWeaponCleaver::ignored*)::g_SendProps
 D int ServerClassInit<DT_TFWeaponCleaver::ignored>(DT_TFWeaponCleaver::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_TFWeaponClub::ignored>(DT_TFWeaponClub::ignored*)::g_SendProps
 D int ServerClassInit<DT_TFWeaponClub::ignored>(DT_TFWeaponClub::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_TFWeaponDataNonLocal::ignored>(DT_TFWeaponDataNonLocal::ignored*)::g_SendProps
 D int ServerClassInit<DT_TFWeaponDataNonLocal::ignored>(DT_TFWeaponDataNonLocal::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_TFWeaponFireAxe::ignored>(DT_TFWeaponFireAxe::ignored*)::g_SendProps
 D int ServerClassInit<DT_TFWeaponFireAxe::ignored>(DT_TFWeaponFireAxe::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_TFWeaponFists::ignored>(DT_TFWeaponFists::ignored*)::g_SendProps
 D int ServerClassInit<DT_TFWeaponFists::ignored>(DT_TFWeaponFists::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_TFWeaponInvis::ignored>(DT_TFWeaponInvis::ignored*)::g_SendProps
 D int ServerClassInit<DT_TFWeaponInvis::ignored>(DT_TFWeaponInvis::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_TFWeaponJar::ignored>(DT_TFWeaponJar::ignored*)::g_SendProps
 D int ServerClassInit<DT_TFWeaponJar::ignored>(DT_TFWeaponJar::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_TFWeaponJarMilk::ignored>(DT_TFWeaponJarMilk::ignored*)::g_SendProps
 D int ServerClassInit<DT_TFWeaponJarMilk::ignored>(DT_TFWeaponJarMilk::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_TFWeaponKatana::ignored>(DT_TFWeaponKatana::ignored*)::g_SendProps
 D int ServerClassInit<DT_TFWeaponKatana::ignored>(DT_TFWeaponKatana::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_TFWeaponKnife::ignored>(DT_TFWeaponKnife::ignored*)::g_SendProps
 D int ServerClassInit<DT_TFWeaponKnife::ignored>(DT_TFWeaponKnife::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_TFWeaponMedigunDataNonLocal::ignored>(DT_TFWeaponMedigunDataNonLocal::ignored*)::g_SendProps
 D int ServerClassInit<DT_TFWeaponMedigunDataNonLocal::ignored>(DT_TFWeaponMedigunDataNonLocal::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_TFWeaponPDA::ignored>(DT_TFWeaponPDA::ignored*)::g_SendProps
 D int ServerClassInit<DT_TFWeaponPDA::ignored>(DT_TFWeaponPDA::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_TFWeaponPDAExpansion_Dispenser::ignored>(DT_TFWeaponPDAExpansion_Dispenser::ignored*)::g_SendProps
 D int ServerClassInit<DT_TFWeaponPDAExpansion_Dispenser::ignored>(DT_TFWeaponPDAExpansion_Dispenser::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_TFWeaponPDAExpansion_Teleporter::ignored>(DT_TFWeaponPDAExpansion_Teleporter::ignored*)::g_SendProps
 D int ServerClassInit<DT_TFWeaponPDAExpansion_Teleporter::ignored>(DT_TFWeaponPDAExpansion_Teleporter::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_TFWeaponPDA_Engineer_Build::ignored>(DT_TFWeaponPDA_Engineer_Build::ignored*)::g_SendProps
 D int ServerClassInit<DT_TFWeaponPDA_Engineer_Build::ignored>(DT_TFWeaponPDA_Engineer_Build::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_TFWeaponPDA_Engineer_Destroy::ignored>(DT_TFWeaponPDA_Engineer_Destroy::ignored*)::g_SendProps
 D int ServerClassInit<DT_TFWeaponPDA_Engineer_Destroy::ignored>(DT_TFWeaponPDA_Engineer_Destroy::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_TFWeaponPDA_Spy::ignored>(DT_TFWeaponPDA_Spy::ignored*)::g_SendProps
 D int ServerClassInit<DT_TFWeaponPDA_Spy::ignored>(DT_TFWeaponPDA_Spy::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_TFWeaponRobotArm::ignored>(DT_TFWeaponRobotArm::ignored*)::g_SendProps
 D int ServerClassInit<DT_TFWeaponRobotArm::ignored>(DT_TFWeaponRobotArm::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_TFWeaponSapper::ignored>(DT_TFWeaponSapper::ignored*)::g_SendProps
 D int ServerClassInit<DT_TFWeaponSapper::ignored>(DT_TFWeaponSapper::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_TFWeaponShovel::ignored>(DT_TFWeaponShovel::ignored*)::g_SendProps
 D int ServerClassInit<DT_TFWeaponShovel::ignored>(DT_TFWeaponShovel::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_TFWeaponSpellBook::ignored>(DT_TFWeaponSpellBook::ignored*)::g_SendProps
 D int ServerClassInit<DT_TFWeaponSpellBook::ignored>(DT_TFWeaponSpellBook::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_TFWeaponStickBomb::ignored>(DT_TFWeaponStickBomb::ignored*)::g_SendProps
 D int ServerClassInit<DT_TFWeaponStickBomb::ignored>(DT_TFWeaponStickBomb::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_TFWeaponSword::ignored>(DT_TFWeaponSword::ignored*)::g_SendProps
 D int ServerClassInit<DT_TFWeaponSword::ignored>(DT_TFWeaponSword::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_TFWeaponThrowable::ignored>(DT_TFWeaponThrowable::ignored*)::g_SendProps
 D int ServerClassInit<DT_TFWeaponThrowable::ignored>(DT_TFWeaponThrowable::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_TFWeaponWrench::ignored>(DT_TFWeaponWrench::ignored*)::g_SendProps
 D int ServerClassInit<DT_TFWeaponWrench::ignored>(DT_TFWeaponWrench::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_TFWearable::ignored>(DT_TFWearable::ignored*)::g_SendProps
 D int ServerClassInit<DT_TFWearable::ignored>(DT_TFWearable::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_TFWearableDemoShield::ignored>(DT_TFWearableDemoShield::ignored*)::g_SendProps
 D int ServerClassInit<DT_TFWearableDemoShield::ignored>(DT_TFWearableDemoShield::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_TFWearableItem::ignored>(DT_TFWearableItem::ignored*)::g_SendProps
 D int ServerClassInit<DT_TFWearableItem::ignored>(DT_TFWearableItem::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_TFWearableLevelableItem::ignored>(DT_TFWearableLevelableItem::ignored*)::g_SendProps
 D int ServerClassInit<DT_TFWearableLevelableItem::ignored>(DT_TFWearableLevelableItem::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_TFWearableRobotArm::ignored>(DT_TFWearableRobotArm::ignored*)::g_SendProps
 D int ServerClassInit<DT_TFWearableRobotArm::ignored>(DT_TFWearableRobotArm::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_TFWearableVM::ignored>(DT_TFWearableVM::ignored*)::g_SendProps
 D int ServerClassInit<DT_TFWearableVM::ignored>(DT_TFWearableVM::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_Team::ignored>(DT_Team::ignored*)::g_SendProps
 D int ServerClassInit<DT_Team::ignored>(DT_Team::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_TeamRoundTimer::ignored>(DT_TeamRoundTimer::ignored*)::g_SendProps
 D int ServerClassInit<DT_TeamRoundTimer::ignored>(DT_TeamRoundTimer::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_TeamTrainWatcher::ignored>(DT_TeamTrainWatcher::ignored*)::g_SendProps
 D int ServerClassInit<DT_TeamTrainWatcher::ignored>(DT_TeamTrainWatcher::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_TeamplayRoundBasedRules::ignored>(DT_TeamplayRoundBasedRules::ignored*)::g_SendProps
 D int ServerClassInit<DT_TeamplayRoundBasedRules::ignored>(DT_TeamplayRoundBasedRules::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_TeamplayRoundBasedRulesProxy::ignored>(DT_TeamplayRoundBasedRulesProxy::ignored*)::g_SendProps
 D int ServerClassInit<DT_TeamplayRoundBasedRulesProxy::ignored>(DT_TeamplayRoundBasedRulesProxy::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_TeleportVortex::ignored>(DT_TeleportVortex::ignored*)::g_SendProps
 D int ServerClassInit<DT_TeleportVortex::ignored>(DT_TeleportVortex::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_Tesla::ignored>(DT_Tesla::ignored*)::g_SendProps
 D int ServerClassInit<DT_Tesla::ignored>(DT_Tesla::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_TestTraceline::ignored>(DT_TestTraceline::ignored*)::g_SendProps
 D int ServerClassInit<DT_TestTraceline::ignored>(DT_TestTraceline::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_VGuiScreen::ignored>(DT_VGuiScreen::ignored*)::g_SendProps
 D int ServerClassInit<DT_VGuiScreen::ignored>(DT_VGuiScreen::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_VoteController::ignored>(DT_VoteController::ignored*)::g_SendProps
 D int ServerClassInit<DT_VoteController::ignored>(DT_VoteController::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_WORLD::ignored>(DT_WORLD::ignored*)::g_SendProps
 D int ServerClassInit<DT_WORLD::ignored>(DT_WORLD::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_WaterBullet::ignored>(DT_WaterBullet::ignored*)::g_SendProps
 D int ServerClassInit<DT_WaterBullet::ignored>(DT_WaterBullet::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_WaterLODControl::ignored>(DT_WaterLODControl::ignored*)::g_SendProps
 D int ServerClassInit<DT_WaterLODControl::ignored>(DT_WaterLODControl::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_WeaponChargedSMG::ignored>(DT_WeaponChargedSMG::ignored*)::g_SendProps
 D int ServerClassInit<DT_WeaponChargedSMG::ignored>(DT_WeaponChargedSMG::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_WeaponCompoundBow::ignored>(DT_WeaponCompoundBow::ignored*)::g_SendProps
 D int ServerClassInit<DT_WeaponCompoundBow::ignored>(DT_WeaponCompoundBow::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_WeaponDRGPomson::ignored>(DT_WeaponDRGPomson::ignored*)::g_SendProps
 D int ServerClassInit<DT_WeaponDRGPomson::ignored>(DT_WeaponDRGPomson::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_WeaponFlameThrower::ignored>(DT_WeaponFlameThrower::ignored*)::g_SendProps
 D int ServerClassInit<DT_WeaponFlameThrower::ignored>(DT_WeaponFlameThrower::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_WeaponFlareGun::ignored>(DT_WeaponFlareGun::ignored*)::g_SendProps
 D int ServerClassInit<DT_WeaponFlareGun::ignored>(DT_WeaponFlareGun::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_WeaponFlareGun_Revenge::ignored>(DT_WeaponFlareGun_Revenge::ignored*)::g_SendProps
 D int ServerClassInit<DT_WeaponFlareGun_Revenge::ignored>(DT_WeaponFlareGun_Revenge::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_WeaponGrenadeLauncher::ignored>(DT_WeaponGrenadeLauncher::ignored*)::g_SendProps
 D int ServerClassInit<DT_WeaponGrenadeLauncher::ignored>(DT_WeaponGrenadeLauncher::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_WeaponIFMBase::ignored>(DT_WeaponIFMBase::ignored*)::g_SendProps
 D int ServerClassInit<DT_WeaponIFMBase::ignored>(DT_WeaponIFMBase::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_WeaponIFMBaseCamera::ignored>(DT_WeaponIFMBaseCamera::ignored*)::g_SendProps
 D int ServerClassInit<DT_WeaponIFMBaseCamera::ignored>(DT_WeaponIFMBaseCamera::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_WeaponIFMSteadyCam::ignored>(DT_WeaponIFMSteadyCam::ignored*)::g_SendProps
 D int ServerClassInit<DT_WeaponIFMSteadyCam::ignored>(DT_WeaponIFMSteadyCam::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_WeaponLunchBox::ignored>(DT_WeaponLunchBox::ignored*)::g_SendProps
 D int ServerClassInit<DT_WeaponLunchBox::ignored>(DT_WeaponLunchBox::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_WeaponMedigun::ignored>(DT_WeaponMedigun::ignored*)::g_SendProps
 D int ServerClassInit<DT_WeaponMedigun::ignored>(DT_WeaponMedigun::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_WeaponMinigun::ignored>(DT_WeaponMinigun::ignored*)::g_SendProps
 D int ServerClassInit<DT_WeaponMinigun::ignored>(DT_WeaponMinigun::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_WeaponPipebombLauncher::ignored>(DT_WeaponPipebombLauncher::ignored*)::g_SendProps
 D int ServerClassInit<DT_WeaponPipebombLauncher::ignored>(DT_WeaponPipebombLauncher::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_WeaponPistol::ignored>(DT_WeaponPistol::ignored*)::g_SendProps
 D int ServerClassInit<DT_WeaponPistol::ignored>(DT_WeaponPistol::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_WeaponPistol_Scout::ignored>(DT_WeaponPistol_Scout::ignored*)::g_SendProps
 D int ServerClassInit<DT_WeaponPistol_Scout::ignored>(DT_WeaponPistol_Scout::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_WeaponPistol_ScoutPrimary::ignored>(DT_WeaponPistol_ScoutPrimary::ignored*)::g_SendProps
 D int ServerClassInit<DT_WeaponPistol_ScoutPrimary::ignored>(DT_WeaponPistol_ScoutPrimary::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_WeaponPistol_ScoutSecondary::ignored>(DT_WeaponPistol_ScoutSecondary::ignored*)::g_SendProps
 D int ServerClassInit<DT_WeaponPistol_ScoutSecondary::ignored>(DT_WeaponPistol_ScoutSecondary::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_WeaponRaygun::ignored>(DT_WeaponRaygun::ignored*)::g_SendProps
 D int ServerClassInit<DT_WeaponRaygun::ignored>(DT_WeaponRaygun::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_WeaponRevolver::ignored>(DT_WeaponRevolver::ignored*)::g_SendProps
 D int ServerClassInit<DT_WeaponRevolver::ignored>(DT_WeaponRevolver::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_WeaponRocketLauncher::ignored>(DT_WeaponRocketLauncher::ignored*)::g_SendProps
 D int ServerClassInit<DT_WeaponRocketLauncher::ignored>(DT_WeaponRocketLauncher::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_WeaponRocketLauncher_AirStrike::ignored>(DT_WeaponRocketLauncher_AirStrike::ignored*)::g_SendProps
 D int ServerClassInit<DT_WeaponRocketLauncher_AirStrike::ignored>(DT_WeaponRocketLauncher_AirStrike::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_WeaponRocketLauncher_DirectHit::ignored>(DT_WeaponRocketLauncher_DirectHit::ignored*)::g_SendProps
 D int ServerClassInit<DT_WeaponRocketLauncher_DirectHit::ignored>(DT_WeaponRocketLauncher_DirectHit::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_WeaponRocketLauncher_Mortar::ignored>(DT_WeaponRocketLauncher_Mortar::ignored*)::g_SendProps
 D int ServerClassInit<DT_WeaponRocketLauncher_Mortar::ignored>(DT_WeaponRocketLauncher_Mortar::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_WeaponSyringeGun::ignored>(DT_WeaponSyringeGun::ignored*)::g_SendProps
 D int ServerClassInit<DT_WeaponSyringeGun::ignored>(DT_WeaponSyringeGun::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_WearableItem::ignored>(DT_WearableItem::ignored*)::g_SendProps
 D int ServerClassInit<DT_WearableItem::ignored>(DT_WearableItem::ignored*)::g_pSendTableName
 D int ServerClassInit<DT_Zombie::ignored>(DT_Zombie::ignored*)::g_SendProps
 D int ServerClassInit<DT_Zombie::ignored>(DT_Zombie::ignored*)::g_pSendTableName
 D int ServerClassInit<SpellTransposeTeleport::ignored>(SpellTransposeTeleport::ignored*)::g_SendProps
 D int ServerClassInit<SpellTransposeTeleport::ignored>(SpellTransposeTeleport::ignored*)::g_pSendTableName
 D k_flMaxEntityEulerAngle
 D k_flMaxEntityPosCoord
 D k_flMaxEntitySpeed
 D k_flMaxEntitySpinRate
 D k_pszQuestConditionRequiredFieldStrings
 D lagcompensation
 D locksound_t::m_DataMap
 D m_nDebugOverlayIndex
 D magnetted_objects_t::m_DataMap
 D modifiedconvars_t::m_DataMap
 D pFGDPropData
 D pSoundStateNames
 D pWeaponSoundCategories
 D pfFastCos
 D pfFastSinCos
 D pfInvRSquared
 D pfRSqrt
 D pfRSqrtFast
 D pfSqrt
 D pfVectorNormalize
 D pfVectorNormalizeFast
 D physfollower_t::m_DataMap
 D physgametrace
 D powerplaymask
 D predef_flexcontroller_names
 D predef_flexcontroller_values
 D pszWpnEntTranslationList
 D rgdpvpreset
 D sAllowPointServerCommand
 D sPropdataInteractionSections
 D s_ElementNames
 D s_PluginCheck
 D s_aGestureSlotNames
 D s_aPlayerClassFiles
 D s_acttableBuilding
 D s_acttableItem1
 D s_acttableItem2
 D s_acttableMelee
 D s_acttableMeleeAllclass
 D s_acttablePDA
 D s_acttablePrimary
 D s_acttablePrimary2
 D s_acttableSecondary
 D s_acttableSecondary2
 D s_grapplinghook_engineer_acttable
 D s_grapplinghook_engineer_poseparamtable
 D s_grapplinghook_normal_acttable
 D s_grapplinghook_normal_poseparamtable
 D s_pDebrisContext
 D s_pFadeOutContext
 D s_pszGameModes
 D s_pszMMTypes
 D s_pszMatchGroups
 D s_viewmodelacttable
 D sky3dparams_t::m_DataMap
 D steamapicontext
 D steamgameserverapicontext
 D te
 D template_t::m_DataMap
 D thinkcontextFuncs
 D thinkfunc_t::m_DataMap
 D typeinfo for Action<CBotNPCArcher>
 D typeinfo for Action<CBotNPCDecoy>
 D typeinfo for Action<CEyeballBoss>
 D typeinfo for Action<CGhost>
 D typeinfo for Action<CHeadlessHatman>
 D typeinfo for Action<CMerasmus>
 D typeinfo for Action<CSimpleBot>
 D typeinfo for Action<CTFBot>
 D typeinfo for Action<CTFRobotDestruction_Robot>
 D typeinfo for Action<CZombie>
 D typeinfo for Behavior<CBotNPCArcher>
 D typeinfo for Behavior<CBotNPCDecoy>
 D typeinfo for Behavior<CEyeballBoss>
 D typeinfo for Behavior<CGhost>
 D typeinfo for Behavior<CHeadlessHatman>
 D typeinfo for Behavior<CMerasmus>
 D typeinfo for Behavior<CSimpleBot>
 D typeinfo for Behavior<CTFBot>
 D typeinfo for Behavior<CTFRobotDestruction_Robot>
 D typeinfo for Behavior<CZombie>
 D typeinfo for CAISound
 D typeinfo for CAI_AllySpeechManager
 D typeinfo for CAI_AssaultBehavior
 D typeinfo for CAI_AssaultGoal
 D typeinfo for CAI_BaseActor
 D typeinfo for CAI_BaseHumanoid
 D typeinfo for CAI_BaseNPC
 D typeinfo for CAI_BattleLine
 D typeinfo for CAI_Behavior<CAI_BaseNPC, 100000>
 D typeinfo for CAI_BehaviorBase
 D typeinfo for CAI_BehaviorHost<CAI_BaseNPC>
 D typeinfo for CAI_BlendedMotor
 D typeinfo for CAI_BlendingHost<CAI_BehaviorHost<CAI_BaseNPC> >
 D typeinfo for CAI_ChangeHintGroup
 D typeinfo for CAI_ChangeTarget
 D typeinfo for CAI_Component
 D typeinfo for CAI_ComponentWithOuter<CAI_BaseNPC, CAI_BehaviorBase>
 D typeinfo for CAI_DefMovementSink
 D typeinfo for CAI_DynamicLink
 D typeinfo for CAI_DynamicLinkController
 D typeinfo for CAI_EnemiesListSaveRestoreOps
 D typeinfo for CAI_Expresser
 D typeinfo for CAI_ExpresserHost<CAI_BaseHumanoid>
 D typeinfo for CAI_ExpresserHost<CBasePlayer>
 D typeinfo for CAI_ExpresserSink
 D typeinfo for CAI_FollowBehavior
 D typeinfo for CAI_FollowGoal
 D typeinfo for CAI_GoalEntity
 D typeinfo for CAI_Hint
 D typeinfo for CAI_LeadBehavior
 D typeinfo for CAI_LeadBehaviorHandler
 D typeinfo for CAI_LeadGoal
 D typeinfo for CAI_LeadGoal_Weapon
 D typeinfo for CAI_LocalNavigator
 D typeinfo for CAI_MappedActivityBehavior_Temporary
 D typeinfo for CAI_Motor
 D typeinfo for CAI_MoveAndShootOverlay
 D typeinfo for CAI_MoveProbe
 D typeinfo for CAI_NavInHintGroupFilter
 D typeinfo for CAI_Navigator
 D typeinfo for CAI_Network
 D typeinfo for CAI_NetworkManager
 D typeinfo for CAI_Pathfinder
 D typeinfo for CAI_PlayerAlly
 D typeinfo for CAI_ProxyMovementSink
 D typeinfo for CAI_RadialLinkController
 D typeinfo for CAI_Relationship
 D typeinfo for CAI_SaveRestoreBlockHandler
 D typeinfo for CAI_ScriptConditions
 D typeinfo for CAI_ScriptedSchedule
 D typeinfo for CAI_ScriptedSentence
 D typeinfo for CAI_ScriptedSequence
 D typeinfo for CAI_SensedObjectsManager
 D typeinfo for CAI_Senses
 D typeinfo for CAI_SpeechFilter
 D typeinfo for CAI_StandoffBehavior
 D typeinfo for CAI_StandoffGoal
 D typeinfo for CAI_SystemHook
 D typeinfo for CAI_TacticalServices
 D typeinfo for CAI_TestHull
 D typeinfo for CAchievementMgr
 D typeinfo for CAchievementSaveRestoreBlockHandler
 D typeinfo for CAchievementSaveThread
 D typeinfo for CAchievementZone
 D typeinfo for CActivityDataOps
 D typeinfo for CAimTargetManager
 D typeinfo for CAmbientGeneric
 D typeinfo for CAmmoDef
 D typeinfo for CAmmoFilter
 D typeinfo for CAmmoPack
 D typeinfo for CAmmoPackMedium
 D typeinfo for CAmmoPackSmall
 D typeinfo for CAnchorList
 D typeinfo for CAreaPortal
 D typeinfo for CArenaLogic
 D typeinfo for CArmor
 D typeinfo for CAssaultPoint
 D typeinfo for CAttributeContainer
 D typeinfo for CAttributeContainer::NetworkVar_m_Item
 D typeinfo for CAttributeContainerPlayer
 D typeinfo for CAttributeIterator_GetTypedAttributeValue<CAttribute_DynamicRecipeComponent, CAttribute_DynamicRecipeComponent>
 D typeinfo for CAttributeIterator_GetTypedAttributeValue<CAttribute_ItemSlotCriteria, CAttribute_ItemSlotCriteria>
 D typeinfo for CAttributeIterator_GetTypedAttributeValue<CAttribute_String, CAttribute_String>
 D typeinfo for CAttributeIterator_GetTypedAttributeValue<CAttribute_String, char const*>
 D typeinfo for CAttributeIterator_GetTypedAttributeValue<CAttribute_WorldItemPlacement, CAttribute_WorldItemPlacement>
 D typeinfo for CAttributeIterator_GetTypedAttributeValue<float, float>
 D typeinfo for CAttributeIterator_GetTypedAttributeValue<unsigned int, float>
 D typeinfo for CAttributeIterator_GetTypedAttributeValue<unsigned int, unsigned int>
 D typeinfo for CAttributeIterator_GetTypedAttributeValue<unsigned long long, unsigned long long>
 D typeinfo for CAttributeIterator_HasAttribute
 D typeinfo for CAttributeList
 D typeinfo for CAttributeManager
 D typeinfo for CAttribute_DynamicRecipeComponent
 D typeinfo for CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT
 D typeinfo for CAttribute_ItemSlotCriteria
 D typeinfo for CAttribute_String
 D typeinfo for CAttribute_WorldItemPlacement
 D typeinfo for CAutoGameSystem
 D typeinfo for CAutoGameSystemPerFrame
 D typeinfo for CBallPlayerToucher
 D typeinfo for CBaseAchievement
 D typeinfo for CBaseAnimating
 D typeinfo for CBaseAnimatingOverlay
 D typeinfo for CBaseAppSystem<IParticleSystemQuery>
 D typeinfo for CBaseButton
 D typeinfo for CBaseCombatCharacter
 D typeinfo for CBaseCombatWeapon
 D typeinfo for CBaseDMStart
 D typeinfo for CBaseDoor
 D typeinfo for CBaseEntity
 D typeinfo for CBaseEntity::NetworkVar_m_Collision
 D typeinfo for CBaseEntityClassList
 D typeinfo for CBaseEntityList
 D typeinfo for CBaseEntityModelLoadProxy::Handler
 D typeinfo for CBaseFilter
 D typeinfo for CBaseFire
 D typeinfo for CBaseFlex
 D typeinfo for CBaseGameStats
 D typeinfo for CBaseGameStats_Driver
 D typeinfo for CBaseGameSystem
 D typeinfo for CBaseGameSystemPerFrame
 D typeinfo for CBaseGrenade
 D typeinfo for CBaseGrenadeConcussion
 D typeinfo for CBaseGrenadeContact
 D typeinfo for CBaseGrenadeTimed
 D typeinfo for CBaseIssue
 D typeinfo for CBaseMoveBehavior
 D typeinfo for CBaseMultiplayerPlayer
 D typeinfo for CBaseNPCMaker
 D typeinfo for CBaseObject
 D typeinfo for CBaseObjectUpgrade
 D typeinfo for CBaseParticleEntity
 D typeinfo for CBasePlatTrain
 D typeinfo for CBasePlayer
 D typeinfo for CBasePlayer::NetworkVar_m_AttributeList
 D typeinfo for CBasePlayer::NetworkVar_m_Local
 D typeinfo for CBasePlayer::NetworkVar_pl
 D typeinfo for CBaseProjectile
 D typeinfo for CBaseProp
 D typeinfo for CBasePropDoor
 D typeinfo for CBaseQuestObjectiveTracker
 D typeinfo for CBaseSOTracker
 D typeinfo for CBaseServerVehicle
 D typeinfo for CBaseTFBotHintEntity
 D typeinfo for CBaseTFIssue
 D typeinfo for CBaseTeamObjectiveResource
 D typeinfo for CBaseTempEntity
 D typeinfo for CBaseToggle
 D typeinfo for CBaseTrigger
 D typeinfo for CBaseVPhysicsTrigger
 D typeinfo for CBaseViewModel
 D typeinfo for CBeam
 D typeinfo for CBlood
 D typeinfo for CBloodSplat
 D typeinfo for CBoneFollower
 D typeinfo for CBonusDuckPickup
 D typeinfo for CBonusPack
 D typeinfo for CBonusRoundLogic
 D typeinfo for CBonusRoundLogic::NetworkVar_m_Item
 D typeinfo for CBotCmd
 D typeinfo for CBotNPCArcher
 D typeinfo for CBotNPCArcher::CBotNPCArcherIntention
 D typeinfo for CBotNPCArcherBehavior
 D typeinfo for CBotNPCArcherGuardSpot
 D typeinfo for CBotNPCArcherMoveToMark
 D typeinfo for CBotNPCArcherShootBow
 D typeinfo for CBotNPCArcherSurrender
 D typeinfo for CBotNPCBody
 D typeinfo for CBotNPCDecoy
 D typeinfo for CBotNPCDecoy::CBotNPCDecoyIntention
 D typeinfo for CBotNPCDecoyBehavior
 D typeinfo for CBotNPCDecoyLocomotion
 D typeinfo for CBreakModelsPrecached
 D typeinfo for CBreakParser
 D typeinfo for CBreakable
 D typeinfo for CBreakableProp
 D typeinfo for CBreakableSurface
 D typeinfo for CBroadcastNonOwnerRecipientFilter
 D typeinfo for CBroadcastRecipientFilter
 D typeinfo for CBubbling
 D typeinfo for CBulletPenetrateEnum
 D typeinfo for CBulletsTraceFilter
 D typeinfo for CCPTimerLogic
 D typeinfo for CCallResult<CGCUpdateItemSchema, HTTPRequestCompleted_t>
 D typeinfo for CCallResult<CLeaderboardInfo, LeaderboardFindResult_t>
 D typeinfo for CCallResult<CLeaderboardInfo, LeaderboardScoresDownloaded_t>
 D typeinfo for CCallResult<CMapInfoContainer, LeaderboardFindResult_t>
 D typeinfo for CCallResult<CMapInfoContainer, LeaderboardScoresDownloaded_t>
 D typeinfo for CCallResult<CTFWorkshopMap, SteamUGCQueryCompleted_t>
 D typeinfo for CCallback<CGCClientSystem, SteamServersConnected_t, true>
 D typeinfo for CCallback<CSteamWorksGameStatsUploader, GameStatsSessionClosed_t, true>
 D typeinfo for CCallback<CSteamWorksGameStatsUploader, GameStatsSessionIssued_t, true>
 D typeinfo for CCallback<CTFMapsWorkshop, DownloadItemResult_t, false>
 D typeinfo for CCallback<CTFMapsWorkshop, DownloadItemResult_t, true>
 D typeinfo for CCallback<CTFMapsWorkshop, ItemInstalled_t, false>
 D typeinfo for CCallback<CTFMapsWorkshop, ItemInstalled_t, true>
 D typeinfo for CCallback<GCSDK::CGCClient, GCMessageAvailable_t, false>
 D typeinfo for CCallbackBase
 D typeinfo for CCallbackImpl<12>
 D typeinfo for CCallbackImpl<16>
 D typeinfo for CCallbackImpl<1>
 D typeinfo for CCallbackImpl<4>
 D typeinfo for CCaptureFlag
 D typeinfo for CCaptureFlagReturnIcon
 D typeinfo for CCaptureZone
 D typeinfo for CCaptureZoneShim
 D typeinfo for CCasualMatchGroupDescription
 D typeinfo for CCasualMatchGroupDescription::CCasualProgressionDesc
 D typeinfo for CChangeClassZone
 D typeinfo for CChangeLevel
 D typeinfo for CChangeLevelIssue
 D typeinfo for CCheckClient
 D typeinfo for CChildOperatorDefinition
 D typeinfo for CChoreoEvent
 D typeinfo for CChoreoScene
 D typeinfo for CChoreoStringPool
 D typeinfo for CClassLimitsIssue
 D typeinfo for CClassPtrSaveRestoreOps
 D typeinfo for CCleanupDefaultRelationShips
 D typeinfo for CCollectPayloadGuardVantagePoints
 D typeinfo for CCollectReachableObjects
 D typeinfo for CCollisionEvent
 D typeinfo for CCollisionProperty
 D typeinfo for CColorCorrection
 D typeinfo for CColorCorrectionVolume
 D typeinfo for CCombatCharVisCache
 D typeinfo for CCommentaryAuto
 D typeinfo for CCommentarySystem
 D typeinfo for CCommentaryViewPosition
 D typeinfo for CCommentary_SaveRestoreBlockHandler
 D typeinfo for CCompareFriendFoeInfluence
 D typeinfo for CCompetitiveLogic
 D typeinfo for CConceptHistoriesDataOps
 D typeinfo for CConditionFortuneTellerEffect
 D typeinfo for CConstantForceController
 D typeinfo for CConstraintAnchor
 D typeinfo for CCopyRecipientFilter
 D typeinfo for CCopyableUtlVector<MvMTourMission_t>
 D typeinfo for CCopyableUtlVector<int>
 D typeinfo for CCopyableUtlVector<static_attrib_t>
 D typeinfo for CCountUserGeneratedAttributeIterator
 D typeinfo for CCredits
 D typeinfo for CCurrencyPack
 D typeinfo for CCurrencyPackCustom
 D typeinfo for CCurrencyPackMedium
 D typeinfo for CCurrencyPackSmall
 D typeinfo for CCyclicalHoliday
 D typeinfo for CDataManager<CBoneCache, bonecacheparams_t, CBoneCache*, CThreadFastMutex>
 D typeinfo for CDataManagerBase
 D typeinfo for CDataObjectAccessSystem
 D typeinfo for CDateBasedHoliday
 D typeinfo for CDateBasedHolidayNoSpecificYear
 D typeinfo for CDebugHistory
 D typeinfo for CDecal
 D typeinfo for CDecalEmitterSystem
 D typeinfo for CDefSaveRestoreBlockHandler
 D typeinfo for CDefSaveRestoreOps
 D typeinfo for CDefaultAccessor
 D typeinfo for CDefaultParticleSystemQuery
 D typeinfo for CDefaultPlayerPickupVPhysics
 D typeinfo for CDefaultResponseSystem
 D typeinfo for CDefaultResponseSystemSaveRestoreBlockHandler
 D typeinfo for CDevShotSystem
 D typeinfo for CDirtySpatialPartitionEntityList
 D typeinfo for CDisableVision
 D typeinfo for CDispenserTouchTrigger
 D typeinfo for CDllDemandLoader
 D typeinfo for CDmgAccumulator
 D typeinfo for CDynamicLight
 D typeinfo for CDynamicProp
 D typeinfo for CEconClaimCode
 D typeinfo for CEconCraftingRecipeDefinition
 D typeinfo for CEconEntity
 D typeinfo for CEconEntity::NetworkVar_m_AttributeManager
 D typeinfo for CEconGameAccountForGameServers
 D typeinfo for CEconItem
 D typeinfo for CEconItemAttribute
 D typeinfo for CEconItemAttributeIterator_ApplyAttributeFloat
 D typeinfo for CEconItemAttributeIterator_ApplyAttributeString
 D typeinfo for CEconItemDefinition
 D typeinfo for CEconItemHandle
 D typeinfo for CEconItemPreviewDataBlock
 D typeinfo for CEconItemSchema
 D typeinfo for CEconItemSpecificAttributeIterator
 D typeinfo for CEconItemSystem
 D typeinfo for CEconItemView
 D typeinfo for CEconItemView::NetworkVar_m_AttributeList
 D typeinfo for CEconItemView::NetworkVar_m_NetworkedDynamicAttributesForDemos
 D typeinfo for CEconLootListDefinition
 D typeinfo for CEconStyleInfo
 D typeinfo for CEconTool_AccountUpgradeToPremium
 D typeinfo for CEconTool_BackpackExpander
 D typeinfo for CEconTool_ClaimCode
 D typeinfo for CEconTool_ClassTransmogrifier
 D typeinfo for CEconTool_CrateKey
 D typeinfo for CEconTool_CustomizeTexture
 D typeinfo for CEconTool_Default
 D typeinfo for CEconTool_DescTag
 D typeinfo for CEconTool_DuckToken
 D typeinfo for CEconTool_DuelingMinigame
 D typeinfo for CEconTool_Festivizer
 D typeinfo for CEconTool_Gift
 D typeinfo for CEconTool_GiftWrap
 D typeinfo for CEconTool_GrantOperationPass
 D typeinfo for CEconTool_ItemDynamicRecipe
 D typeinfo for CEconTool_ItemDynamicRecipe::CBaseRecipeComponent
 D typeinfo for CEconTool_ItemDynamicRecipe::CDynamicRecipeComponentDefinedItem
 D typeinfo for CEconTool_ItemDynamicRecipe::CDynamicRecipeComponentLootList
 D typeinfo for CEconTool_ItemEaterRecharger
 D typeinfo for CEconTool_KillStreakifier
 D typeinfo for CEconTool_NameTag
 D typeinfo for CEconTool_Noisemaker
 D typeinfo for CEconTool_PaintCan
 D typeinfo for CEconTool_StrangeCountTransfer
 D typeinfo for CEconTool_StrangePart
 D typeinfo for CEconTool_StrangePartRestriction
 D typeinfo for CEconTool_Strangifier
 D typeinfo for CEconTool_TFEventEnableHalloween
 D typeinfo for CEconTool_TFSpellbookPage
 D typeinfo for CEconTool_Unusualifier
 D typeinfo for CEconTool_UpgradeCard
 D typeinfo for CEconTool_WeddingRing
 D typeinfo for CEconTool_WrappedGift
 D typeinfo for CEconTool_Xifier
 D typeinfo for CEconWearable
 D typeinfo for CEffectsServer
 D typeinfo for CEmbers
 D typeinfo for CEmptyConVar
 D typeinfo for CEnableMotionFixup
 D typeinfo for CEnableTemporaryHalloweenIssue
 D typeinfo for CEntFireAutoCompletionFunctor
 D typeinfo for CEntityBird
 D typeinfo for CEntityBlocker
 D typeinfo for CEntityClassList<CPhysicsNPCSolver>
 D typeinfo for CEntityClassList<CPointCamera>
 D typeinfo for CEntityClassList<CSkyCamera>
 D typeinfo for CEntityDataInstantiator<CWatcherList>
 D typeinfo for CEntityDataInstantiator<ModelScale>
 D typeinfo for CEntityDataInstantiator<StepSimulationData>
 D typeinfo for CEntityDataInstantiator<groundlink_t>
 D typeinfo for CEntityDataInstantiator<physicspushlist_t>
 D typeinfo for CEntityDataInstantiator<touchlink_t>
 D typeinfo for CEntityDataInstantiator<vphysicsupdateai_t>
 D typeinfo for CEntityDissolve
 D typeinfo for CEntityFactory<CAISound>
 D typeinfo for CEntityFactory<CAI_AllySpeechManager>
 D typeinfo for CEntityFactory<CAI_AssaultGoal>
 D typeinfo for CEntityFactory<CAI_BattleLine>
 D typeinfo for CEntityFactory<CAI_ChangeHintGroup>
 D typeinfo for CEntityFactory<CAI_ChangeTarget>
 D typeinfo for CEntityFactory<CAI_DynamicLink>
 D typeinfo for CEntityFactory<CAI_DynamicLinkController>
 D typeinfo for CEntityFactory<CAI_FollowGoal>
 D typeinfo for CEntityFactory<CAI_Hint>
 D typeinfo for CEntityFactory<CAI_LeadGoal>
 D typeinfo for CEntityFactory<CAI_LeadGoal_Weapon>
 D typeinfo for CEntityFactory<CAI_NetworkManager>
 D typeinfo for CEntityFactory<CAI_RadialLinkController>
 D typeinfo for CEntityFactory<CAI_Relationship>
 D typeinfo for CEntityFactory<CAI_ScriptConditions>
 D typeinfo for CEntityFactory<CAI_ScriptedSchedule>
 D typeinfo for CEntityFactory<CAI_ScriptedSentence>
 D typeinfo for CEntityFactory<CAI_ScriptedSequence>
 D typeinfo for CEntityFactory<CAI_SpeechFilter>
 D typeinfo for CEntityFactory<CAI_StandoffGoal>
 D typeinfo for CEntityFactory<CAI_TestHull>
 D typeinfo for CEntityFactory<CAchievementZone>
 D typeinfo for CEntityFactory<CAmbientGeneric>
 D typeinfo for CEntityFactory<CAmmoPack>
 D typeinfo for CEntityFactory<CAmmoPackMedium>
 D typeinfo for CEntityFactory<CAmmoPackSmall>
 D typeinfo for CEntityFactory<CAreaPortal>
 D typeinfo for CEntityFactory<CArenaLogic>
 D typeinfo for CEntityFactory<CArmor>
 D typeinfo for CEntityFactory<CAssaultPoint>
 D typeinfo for CEntityFactory<CBallPlayerToucher>
 D typeinfo for CEntityFactory<CBaseButton>
 D typeinfo for CEntityFactory<CBaseDMStart>
 D typeinfo for CEntityFactory<CBaseDoor>
 D typeinfo for CEntityFactory<CBaseEntity>
 D typeinfo for CEntityFactory<CBaseFilter>
 D typeinfo for CEntityFactory<CBaseFlex>
 D typeinfo for CEntityFactory<CBaseGrenade>
 D typeinfo for CEntityFactory<CBaseGrenadeConcussion>
 D typeinfo for CEntityFactory<CBaseGrenadeContact>
 D typeinfo for CEntityFactory<CBaseGrenadeTimed>
 D typeinfo for CEntityFactory<CBaseMoveBehavior>
 D typeinfo for CEntityFactory<CBaseTrigger>
 D typeinfo for CEntityFactory<CBaseViewModel>
 D typeinfo for CEntityFactory<CBeam>
 D typeinfo for CEntityFactory<CBlood>
 D typeinfo for CEntityFactory<CBoneFollower>
 D typeinfo for CEntityFactory<CBonusDuckPickup>
 D typeinfo for CEntityFactory<CBonusPack>
 D typeinfo for CEntityFactory<CBonusRoundLogic>
 D typeinfo for CEntityFactory<CBotNPCArcher>
 D typeinfo for CEntityFactory<CBotNPCDecoy>
 D typeinfo for CEntityFactory<CBreakable>
 D typeinfo for CEntityFactory<CBreakableSurface>
 D typeinfo for CEntityFactory<CBubbling>
 D typeinfo for CEntityFactory<CCPTimerLogic>
 D typeinfo for CEntityFactory<CCaptureFlag>
 D typeinfo for CEntityFactory<CCaptureFlagReturnIcon>
 D typeinfo for CEntityFactory<CCaptureZone>
 D typeinfo for CEntityFactory<CChangeClassZone>
 D typeinfo for CEntityFactory<CChangeLevel>
 D typeinfo for CEntityFactory<CColorCorrection>
 D typeinfo for CEntityFactory<CColorCorrectionVolume>
 D typeinfo for CEntityFactory<CCommentaryAuto>
 D typeinfo for CEntityFactory<CCommentaryViewPosition>
 D typeinfo for CEntityFactory<CCompetitiveLogic>
 D typeinfo for CEntityFactory<CConstraintAnchor>
 D typeinfo for CEntityFactory<CCredits>
 D typeinfo for CEntityFactory<CCurrencyPack>
 D typeinfo for CEntityFactory<CCurrencyPackCustom>
 D typeinfo for CEntityFactory<CCurrencyPackMedium>
 D typeinfo for CEntityFactory<CCurrencyPackSmall>
 D typeinfo for CEntityFactory<CDebugHistory>
 D typeinfo for CEntityFactory<CDecal>
 D typeinfo for CEntityFactory<CDispenserTouchTrigger>
 D typeinfo for CEntityFactory<CDynamicLight>
 D typeinfo for CEntityFactory<CDynamicProp>
 D typeinfo for CEntityFactory<CEconWearable>
 D typeinfo for CEntityFactory<CEmbers>
 D typeinfo for CEntityFactory<CEnableMotionFixup>
 D typeinfo for CEntityFactory<CEntityBird>
 D typeinfo for CEntityFactory<CEntityBlocker>
 D typeinfo for CEntityFactory<CEntityDissolve>
 D typeinfo for CEntityFactory<CEntityFlame>
 D typeinfo for CEntityFactory<CEntityParticleTrail>
 D typeinfo for CEntityFactory<CEntitySpawnManager>
 D typeinfo for CEntityFactory<CEntitySpawnPoint>
 D typeinfo for CEntityFactory<CEnvBeam>
 D typeinfo for CEntityFactory<CEnvBeverage>
 D typeinfo for CEntityFactory<CEnvDetailController>
 D typeinfo for CEntityFactory<CEnvDustPuff>
 D typeinfo for CEntityFactory<CEnvEffectsScript>
 D typeinfo for CEntityFactory<CEnvEntityMaker>
 D typeinfo for CEntityFactory<CEnvExplosion>
 D typeinfo for CEntityFactory<CEnvFade>
 D typeinfo for CEntityFactory<CEnvFireSensor>
 D typeinfo for CEntityFactory<CEnvFireSource>
 D typeinfo for CEntityFactory<CEnvFunnel>
 D typeinfo for CEntityFactory<CEnvGlobal>
 D typeinfo for CEntityFactory<CEnvGunfire>
 D typeinfo for CEntityFactory<CEnvHudHint>
 D typeinfo for CEntityFactory<CEnvLaser>
 D typeinfo for CEntityFactory<CEnvLight>
 D typeinfo for CEntityFactory<CEnvMicrophone>
 D typeinfo for CEntityFactory<CEnvMuzzleFlash>
 D typeinfo for CEntityFactory<CEnvParticleScript>
 D typeinfo for CEntityFactory<CEnvPlayerSurfaceTrigger>
 D typeinfo for CEntityFactory<CEnvProjectedTexture>
 D typeinfo for CEntityFactory<CEnvQuadraticBeam>
 D typeinfo for CEntityFactory<CEnvScreenEffect>
 D typeinfo for CEntityFactory<CEnvScreenOverlay>
 D typeinfo for CEntityFactory<CEnvShake>
 D typeinfo for CEntityFactory<CEnvShooter>
 D typeinfo for CEntityFactory<CEnvSoundscape>
 D typeinfo for CEntityFactory<CEnvSoundscapeProxy>
 D typeinfo for CEntityFactory<CEnvSoundscapeTriggerable>
 D typeinfo for CEntityFactory<CEnvSpark>
 D typeinfo for CEntityFactory<CEnvSplash>
 D typeinfo for CEntityFactory<CEnvTonemapController>
 D typeinfo for CEntityFactory<CEnvTracer>
 D typeinfo for CEntityFactory<CEnvViewPunch>
 D typeinfo for CEntityFactory<CEnvWind>
 D typeinfo for CEntityFactory<CEnvZoom>
 D typeinfo for CEntityFactory<CEventQueueSaveLoadProxy>
 D typeinfo for CEntityFactory<CExtraMapEntity_Carrier>
 D typeinfo for CEntityFactory<CExtraMapEntity_Rocket>
 D typeinfo for CEntityFactory<CExtraMapEntity_Saucer>
 D typeinfo for CEntityFactory<CExtraMapEntity_Sign>
 D typeinfo for CEntityFactory<CEyeballBoss>
 D typeinfo for CEntityFactory<CFilterClass>
 D typeinfo for CEntityFactory<CFilterEnemy>
 D typeinfo for CEntityFactory<CFilterMassGreater>
 D typeinfo for CEntityFactory<CFilterMultiple>
 D typeinfo for CEntityFactory<CFilterName>
 D typeinfo for CEntityFactory<CFilterTFBotHasTag>
 D typeinfo for CEntityFactory<CFilterTFCanCap>
 D typeinfo for CEntityFactory<CFilterTFClass>
 D typeinfo for CEntityFactory<CFilterTFCondition>
 D typeinfo for CEntityFactory<CFilterTFTeam>
 D typeinfo for CEntityFactory<CFire>
 D typeinfo for CEntityFactory<CFireSmoke>
 D typeinfo for CEntityFactory<CFireTrail>
 D typeinfo for CEntityFactory<CFish>
 D typeinfo for CEntityFactory<CFishPool>
 D typeinfo for CEntityFactory<CFlagDetectionZone>
 D typeinfo for CEntityFactory<CFlextalkActor>
 D typeinfo for CEntityFactory<CFogController>
 D typeinfo for CEntityFactory<CFuncAreaPortalWindow>
 D typeinfo for CEntityFactory<CFuncBrush>
 D typeinfo for CEntityFactory<CFuncConveyor>
 D typeinfo for CEntityFactory<CFuncFlagAlertZone>
 D typeinfo for CEntityFactory<CFuncForceField>
 D typeinfo for CEntityFactory<CFuncIllusionary>
 D typeinfo for CEntityFactory<CFuncLadder>
 D typeinfo for CEntityFactory<CFuncLadderEndPoint>
 D typeinfo for CEntityFactory<CFuncMonitor>
 D typeinfo for CEntityFactory<CFuncMoveLinear>
 D typeinfo for CEntityFactory<CFuncNavAvoid>
 D typeinfo for CEntityFactory<CFuncNavBlocker>
 D typeinfo for CEntityFactory<CFuncNavObstruction>
 D typeinfo for CEntityFactory<CFuncNavPrefer>
 D typeinfo for CEntityFactory<CFuncNavPrerequisite>
 D typeinfo for CEntityFactory<CFuncNoBuild>
 D typeinfo for CEntityFactory<CFuncOccluder>
 D typeinfo for CEntityFactory<CFuncPasstimeGoal>
 D typeinfo for CEntityFactory<CFuncPasstimeGoalieZone>
 D typeinfo for CEntityFactory<CFuncPasstimeNoBallZone>
 D typeinfo for CEntityFactory<CFuncPlat>
 D typeinfo for CEntityFactory<CFuncPlatRot>
 D typeinfo for CEntityFactory<CFuncReflectiveGlass>
 D typeinfo for CEntityFactory<CFuncRespawnFlagZone>
 D typeinfo for CEntityFactory<CFuncRespawnRoom>
 D typeinfo for CEntityFactory<CFuncRespawnRoomVisualizer>
 D typeinfo for CEntityFactory<CFuncRotating>
 D typeinfo for CEntityFactory<CFuncSmokeVolume>
 D typeinfo for CEntityFactory<CFuncSuggestedBuild>
 D typeinfo for CEntityFactory<CFuncTankTrain>
 D typeinfo for CEntityFactory<CFuncTrackAuto>
 D typeinfo for CEntityFactory<CFuncTrackChange>
 D typeinfo for CEntityFactory<CFuncTrackTrain>
 D typeinfo for CEntityFactory<CFuncTrain>
 D typeinfo for CEntityFactory<CFuncTrainControls>
 D typeinfo for CEntityFactory<CFuncVPhysicsClip>
 D typeinfo for CEntityFactory<CFuncVehicleClip>
 D typeinfo for CEntityFactory<CFuncWall>
 D typeinfo for CEntityFactory<CFuncWallToggle>
 D typeinfo for CEntityFactory<CFunc_DustCloud>
 D typeinfo for CEntityFactory<CFunc_DustMotes>
 D typeinfo for CEntityFactory<CFunc_LOD>
 D typeinfo for CEntityFactory<CGameEnd>
 D typeinfo for CEntityFactory<CGameGibManager>
 D typeinfo for CEntityFactory<CGamePlayerEquip>
 D typeinfo for CEntityFactory<CGamePlayerTeam>
 D typeinfo for CEntityFactory<CGamePlayerZone>
 D typeinfo for CEntityFactory<CGameScore>
 D typeinfo for CEntityFactory<CGameText>
 D typeinfo for CEntityFactory<CGameUI>
 D typeinfo for CEntityFactory<CGameWeaponManager>
 D typeinfo for CEntityFactory<CGenericActor>
 D typeinfo for CEntityFactory<CGenericFlexCycler>
 D typeinfo for CEntityFactory<CGenericNPC>
 D typeinfo for CEntityFactory<CGhost>
 D typeinfo for CEntityFactory<CGib>
 D typeinfo for CEntityFactory<CGibShooter>
 D typeinfo for CEntityFactory<CGunTarget>
 D typeinfo for CEntityFactory<CHalloweenGiftPickup>
 D typeinfo for CEntityFactory<CHalloweenGiftSpawnLocation>
 D typeinfo for CEntityFactory<CHalloweenPickup>
 D typeinfo for CEntityFactory<CHalloweenSoulPack>
 D typeinfo for CEntityFactory<CHandleDummy>
 D typeinfo for CEntityFactory<CHandleTest>
 D typeinfo for CEntityFactory<CHeadlessHatman>
 D typeinfo for CEntityFactory<CHealthAmmoKit>
 D typeinfo for CEntityFactory<CHealthKit>
 D typeinfo for CEntityFactory<CHealthKitMedium>
 D typeinfo for CEntityFactory<CHealthKitSmall>
 D typeinfo for CEntityFactory<CHightower_TeleportVortex>
 D typeinfo for CEntityFactory<CHybridMap_CTF_CP>
 D typeinfo for CEntityFactory<CInfoCameraLink>
 D typeinfo for CEntityFactory<CInfoIntermission>
 D typeinfo for CEntityFactory<CInfoLadderDismount>
 D typeinfo for CEntityFactory<CInfoLightingRelative>
 D typeinfo for CEntityFactory<CInfoMassCenter>
 D typeinfo for CEntityFactory<CInfoOverlayAccessor>
 D typeinfo for CEntityFactory<CInfoTarget>
 D typeinfo for CEntityFactory<CInstancedSceneEntity>
 D typeinfo for CEntityFactory<CIntroViewpoint>
 D typeinfo for CEntityFactory<CItemSoda>
 D typeinfo for CEntityFactory<CKeepUpright>
 D typeinfo for CEntityFactory<CKothLogic>
 D typeinfo for CEntityFactory<CLaserDot>
 D typeinfo for CEntityFactory<CLight>
 D typeinfo for CEntityFactory<CLightGlow>
 D typeinfo for CEntityFactory<CLogicActiveAutosave>
 D typeinfo for CEntityFactory<CLogicAuto>
 D typeinfo for CEntityFactory<CLogicAutosave>
 D typeinfo for CEntityFactory<CLogicBranch>
 D typeinfo for CEntityFactory<CLogicBranchList>
 D typeinfo for CEntityFactory<CLogicCase>
 D typeinfo for CEntityFactory<CLogicCollisionPair>
 D typeinfo for CEntityFactory<CLogicCompare>
 D typeinfo for CEntityFactory<CLogicCompareInteger>
 D typeinfo for CEntityFactory<CLogicLineToEntity>
 D typeinfo for CEntityFactory<CLogicMannPower>
 D typeinfo for CEntityFactory<CLogicMeasureMovement>
 D typeinfo for CEntityFactory<CLogicNavigation>
 D typeinfo for CEntityFactory<CLogicOnHoliday>
 D typeinfo for CEntityFactory<CLogicRelay>
 D typeinfo for CEntityFactory<CMannVsMachineLogic>
 D typeinfo for CEntityFactory<CMannVsMachineStats>
 D typeinfo for CEntityFactory<CMaterialModifyControl>
 D typeinfo for CEntityFactory<CMathColorBlend>
 D typeinfo for CEntityFactory<CMathCounter>
 D typeinfo for CEntityFactory<CMathRemap>
 D typeinfo for CEntityFactory<CMedievalLogic>
 D typeinfo for CEntityFactory<CMerasmus>
 D typeinfo for CEntityFactory<CMerasmusDancer>
 D typeinfo for CEntityFactory<CMessage>
 D typeinfo for CEntityFactory<CMessageEntity>
 D typeinfo for CEntityFactory<CMomentaryRotButton>
 D typeinfo for CEntityFactory<CMonsterResource>
 D typeinfo for CEntityFactory<CMovementSpeedMod>
 D typeinfo for CEntityFactory<CMultiSource>
 D typeinfo for CEntityFactory<CMultipleEscort>
 D typeinfo for CEntityFactory<CNPCMaker>
 D typeinfo for CEntityFactory<CNPCSpawnDestination>
 D typeinfo for CEntityFactory<CNPC_Furniture>
 D typeinfo for CEntityFactory<CNPC_VehicleDriver>
 D typeinfo for CEntityFactory<CNoGrenadesZone>
 D typeinfo for CEntityFactory<CNodeEnt>
 D typeinfo for CEntityFactory<CNullEntity>
 D typeinfo for CEntityFactory<CObjectCartDispenser>
 D typeinfo for CEntityFactory<CObjectDispenser>
 D typeinfo for CEntityFactory<CObjectSapper>
 D typeinfo for CEntityFactory<CObjectSentrygun>
 D typeinfo for CEntityFactory<CObjectTeleporter>
 D typeinfo for CEntityFactory<CObserverPoint>
 D typeinfo for CEntityFactory<COrnamentProp>
 D typeinfo for CEntityFactory<CParticleFire>
 D typeinfo for CEntityFactory<CParticleLight>
 D typeinfo for CEntityFactory<CParticlePerformanceMonitor>
 D typeinfo for CEntityFactory<CParticleSystem>
 D typeinfo for CEntityFactory<CPasstimeBall>
 D typeinfo for CEntityFactory<CPasstimeBallSpawn>
 D typeinfo for CEntityFactory<CPasstimeGun>
 D typeinfo for CEntityFactory<CPathCorner>
 D typeinfo for CEntityFactory<CPathCornerCrash>
 D typeinfo for CEntityFactory<CPathKeyFrame>
 D typeinfo for CEntityFactory<CPathTrack>
 D typeinfo for CEntityFactory<CPhysBallSocket>
 D typeinfo for CEntityFactory<CPhysBox>
 D typeinfo for CEntityFactory<CPhysBoxMultiplayer>
 D typeinfo for CEntityFactory<CPhysConstraintSystem>
 D typeinfo for CEntityFactory<CPhysConvert>
 D typeinfo for CEntityFactory<CPhysExplosion>
 D typeinfo for CEntityFactory<CPhysFixed>
 D typeinfo for CEntityFactory<CPhysHinge>
 D typeinfo for CEntityFactory<CPhysImpact>
 D typeinfo for CEntityFactory<CPhysLength>
 D typeinfo for CEntityFactory<CPhysMagnet>
 D typeinfo for CEntityFactory<CPhysMotor>
 D typeinfo for CEntityFactory<CPhysPulley>
 D typeinfo for CEntityFactory<CPhysSlideConstraint>
 D typeinfo for CEntityFactory<CPhysSphere>
 D typeinfo for CEntityFactory<CPhysThruster>
 D typeinfo for CEntityFactory<CPhysTorque>
 D typeinfo for CEntityFactory<CPhysicsCannister>
 D typeinfo for CEntityFactory<CPhysicsEntitySolver>
 D typeinfo for CEntityFactory<CPhysicsNPCSolver>
 D typeinfo for CEntityFactory<CPhysicsProp>
 D typeinfo for CEntityFactory<CPhysicsPropMultiplayer>
 D typeinfo for CEntityFactory<CPhysicsPropRespawnable>
 D typeinfo for CEntityFactory<CPhysicsSpring>
 D typeinfo for CEntityFactory<CPhysicsWire>
 D typeinfo for CEntityFactory<CPlasma>
 D typeinfo for CEntityFactory<CPlayerDestructionDispenser>
 D typeinfo for CEntityFactory<CPlayerResource>
 D typeinfo for CEntityFactory<CPointAngleSensor>
 D typeinfo for CEntityFactory<CPointAngularVelocitySensor>
 D typeinfo for CEntityFactory<CPointBonusMapsAccessor>
 D typeinfo for CEntityFactory<CPointCamera>
 D typeinfo for CEntityFactory<CPointClientCommand>
 D typeinfo for CEntityFactory<CPointCommentaryNode>
 D typeinfo for CEntityFactory<CPointDevShotCamera>
 D typeinfo for CEntityFactory<CPointEntity>
 D typeinfo for CEntityFactory<CPointGamestatsCounter>
 D typeinfo for CEntityFactory<CPointHurt>
 D typeinfo for CEntityFactory<CPointNavInterface>
 D typeinfo for CEntityFactory<CPointPlayerMoveConstraint>
 D typeinfo for CEntityFactory<CPointPopulatorInterface>
 D typeinfo for CEntityFactory<CPointProximitySensor>
 D typeinfo for CEntityFactory<CPointPush>
 D typeinfo for CEntityFactory<CPointServerCommand>
 D typeinfo for CEntityFactory<CPointSpotlight>
 D typeinfo for CEntityFactory<CPointTeleport>
 D typeinfo for CEntityFactory<CPointTemplate>
 D typeinfo for CEntityFactory<CPointVelocitySensor>
 D typeinfo for CEntityFactory<CPopulationManager>
 D typeinfo for CEntityFactory<CPopulatorInternalSpawnPoint>
 D typeinfo for CEntityFactory<CPoseController>
 D typeinfo for CEntityFactory<CPowerupVolume>
 D typeinfo for CEntityFactory<CPrecipitation>
 D typeinfo for CEntityFactory<CProjectedDecal>
 D typeinfo for CEntityFactory<CPropDoorRotating>
 D typeinfo for CEntityFactory<CPropSoccerBall>
 D typeinfo for CEntityFactory<CPropVehicle>
 D typeinfo for CEntityFactory<CPropVehicleDriveable>
 D typeinfo for CEntityFactory<CPushable>
 D typeinfo for CEntityFactory<CRagGib>
 D typeinfo for CEntityFactory<CRagdollBoogie>
 D typeinfo for CEntityFactory<CRagdollConstraint>
 D typeinfo for CEntityFactory<CRagdollMagnet>
 D typeinfo for CEntityFactory<CRagdollManager>
 D typeinfo for CEntityFactory<CRagdollProp>
 D typeinfo for CEntityFactory<CRagdollPropAttached>
 D typeinfo for CEntityFactory<CRallyPoint>
 D typeinfo for CEntityFactory<CRegenerateZone>
 D typeinfo for CEntityFactory<CRevertSaved>
 D typeinfo for CEntityFactory<CRobotDestructionVaultTrigger>
 D typeinfo for CEntityFactory<CRobotDispenser>
 D typeinfo for CEntityFactory<CRopeAnchor>
 D typeinfo for CEntityFactory<CRopeKeyframe>
 D typeinfo for CEntityFactory<CRotButton>
 D typeinfo for CEntityFactory<CRotDoor>
 D typeinfo for CEntityFactory<CRotorWashShooter>
 D typeinfo for CEntityFactory<CSceneEntity>
 D typeinfo for CEntityFactory<CSceneListManager>
 D typeinfo for CEntityFactory<CSceneManager>
 D typeinfo for CEntityFactory<CScriptedTarget>
 D typeinfo for CEntityFactory<CServerRagdollTrigger>
 D typeinfo for CEntityFactory<CShadowControl>
 D typeinfo for CEntityFactory<CShower>
 D typeinfo for CEntityFactory<CSimpleBot>
 D typeinfo for CEntityFactory<CSimplePhysicsBrush>
 D typeinfo for CEntityFactory<CSimplePhysicsProp>
 D typeinfo for CEntityFactory<CSkyCamera>
 D typeinfo for CEntityFactory<CSlideshowDisplay>
 D typeinfo for CEntityFactory<CSmokeStack>
 D typeinfo for CEntityFactory<CSniperDot>
 D typeinfo for CEntityFactory<CSoundEnt>
 D typeinfo for CEntityFactory<CSpellPickup>
 D typeinfo for CEntityFactory<CSpotlightEnd>
 D typeinfo for CEntityFactory<CSprayCan>
 D typeinfo for CEntityFactory<CSprite>
 D typeinfo for CEntityFactory<CSpriteOriented>
 D typeinfo for CEntityFactory<CSpriteTrail>
 D typeinfo for CEntityFactory<CSteamJet>
 D typeinfo for CEntityFactory<CStripWeapons>
 D typeinfo for CEntityFactory<CSun>
 D typeinfo for CEntityFactory<CTFAmmoPack>
 D typeinfo for CEntityFactory<CTFArcherProxy>
 D typeinfo for CEntityFactory<CTFBall_Ornament>
 D typeinfo for CEntityFactory<CTFBaseBoss>
 D typeinfo for CEntityFactory<CTFBat>
 D typeinfo for CEntityFactory<CTFBat_Fish>
 D typeinfo for CEntityFactory<CTFBat_Giftwrap>
 D typeinfo for CEntityFactory<CTFBat_Wood>
 D typeinfo for CEntityFactory<CTFBonesaw>
 D typeinfo for CEntityFactory<CTFBot>
 D typeinfo for CEntityFactory<CTFBotActionPoint>
 D typeinfo for CEntityFactory<CTFBotController>
 D typeinfo for CEntityFactory<CTFBotGenerator>
 D typeinfo for CEntityFactory<CTFBotHint>
 D typeinfo for CEntityFactory<CTFBotHintEngineerNest>
 D typeinfo for CEntityFactory<CTFBotHintSentrygun>
 D typeinfo for CEntityFactory<CTFBotHintTeleporterExit>
 D typeinfo for CEntityFactory<CTFBotProxy>
 D typeinfo for CEntityFactory<CTFBotRoster>
 D typeinfo for CEntityFactory<CTFBottle>
 D typeinfo for CEntityFactory<CTFBuffItem>
 D typeinfo for CEntityFactory<CTFCannon>
 D typeinfo for CEntityFactory<CTFChargedSMG>
 D typeinfo for CEntityFactory<CTFCleaver>
 D typeinfo for CEntityFactory<CTFClub>
 D typeinfo for CEntityFactory<CTFCompoundBow>
 D typeinfo for CEntityFactory<CTFCrossbow>
 D typeinfo for CEntityFactory<CTFDRGPomson>
 D typeinfo for CEntityFactory<CTFDroppedWeapon>
 D typeinfo for CEntityFactory<CTFFireAxe>
 D typeinfo for CEntityFactory<CTFFists>
 D typeinfo for CEntityFactory<CTFFlameEntity>
 D typeinfo for CEntityFactory<CTFFlameThrower>
 D typeinfo for CEntityFactory<CTFFlareGun>
 D typeinfo for CEntityFactory<CTFFlareGun_Revenge>
 D typeinfo for CEntityFactory<CTFForceRespawn>
 D typeinfo for CEntityFactory<CTFGameRulesProxy>
 D typeinfo for CEntityFactory<CTFGenericBomb>
 D typeinfo for CEntityFactory<CTFGlow>
 D typeinfo for CEntityFactory<CTFGrapplingHook>
 D typeinfo for CEntityFactory<CTFGrenadeLauncher>
 D typeinfo for CEntityFactory<CTFGrenadePipebombProjectile>
 D typeinfo for CEntityFactory<CTFHalloweenFortuneTeller>
 D typeinfo for CEntityFactory<CTFHalloweenMinigame>
 D typeinfo for CEntityFactory<CTFHalloweenMinigame_FallingPlatforms>
 D typeinfo for CEntityFactory<CTFHellZap>
 D typeinfo for CEntityFactory<CTFHolidayEntity>
 D typeinfo for CEntityFactory<CTFHudNotify>
 D typeinfo for CEntityFactory<CTFInfoPowerupSpawn>
 D typeinfo for CEntityFactory<CTFIntermission>
 D typeinfo for CEntityFactory<CTFJar>
 D typeinfo for CEntityFactory<CTFJarMilk>
 D typeinfo for CEntityFactory<CTFKatana>
 D typeinfo for CEntityFactory<CTFKnife>
 D typeinfo for CEntityFactory<CTFLaserPointer>
 D typeinfo for CEntityFactory<CTFLunchBox>
 D typeinfo for CEntityFactory<CTFLunchBox_Drink>
 D typeinfo for CEntityFactory<CTFMechanicalArm>
 D typeinfo for CEntityFactory<CTFMedigunShield>
 D typeinfo for CEntityFactory<CTFMerasmusTrickOrTreatProp>
 D typeinfo for CEntityFactory<CTFMiniGame>
 D typeinfo for CEntityFactory<CTFMinigameLogic>
 D typeinfo for CEntityFactory<CTFMinigun>
 D typeinfo for CEntityFactory<CTFObjectiveResource>
 D typeinfo for CEntityFactory<CTFPEPBrawlerBlaster>
 D typeinfo for CEntityFactory<CTFParachute>
 D typeinfo for CEntityFactory<CTFParachute_Primary>
 D typeinfo for CEntityFactory<CTFParachute_Secondary>
 D typeinfo for CEntityFactory<CTFParticleCannon>
 D typeinfo for CEntityFactory<CTFPasstimeLogic>
 D typeinfo for CEntityFactory<CTFPipebombLauncher>
 D typeinfo for CEntityFactory<CTFPistol>
 D typeinfo for CEntityFactory<CTFPistol_Scout>
 D typeinfo for CEntityFactory<CTFPistol_ScoutPrimary>
 D typeinfo for CEntityFactory<CTFPistol_ScoutSecondary>
 D typeinfo for CEntityFactory<CTFPlayer>
 D typeinfo for CEntityFactory<CTFPlayerDestructionLogic>
 D typeinfo for CEntityFactory<CTFPlayerResource>
 D typeinfo for CEntityFactory<CTFPointWeaponMimic>
 D typeinfo for CEntityFactory<CTFPowerupBottle>
 D typeinfo for CEntityFactory<CTFProjectile_Arrow>
 D typeinfo for CEntityFactory<CTFProjectile_Cleaver>
 D typeinfo for CEntityFactory<CTFProjectile_EnergyBall>
 D typeinfo for CEntityFactory<CTFProjectile_EnergyRing>
 D typeinfo for CEntityFactory<CTFProjectile_Flare>
 D typeinfo for CEntityFactory<CTFProjectile_GrapplingHook>
 D typeinfo for CEntityFactory<CTFProjectile_HealingBolt>
 D typeinfo for CEntityFactory<CTFProjectile_Jar>
 D typeinfo for CEntityFactory<CTFProjectile_JarMilk>
 D typeinfo for CEntityFactory<CTFProjectile_Rocket>
 D typeinfo for CEntityFactory<CTFProjectile_SentryRocket>
 D typeinfo for CEntityFactory<CTFProjectile_SpellBats>
 D typeinfo for CEntityFactory<CTFProjectile_SpellFireball>
 D typeinfo for CEntityFactory<CTFProjectile_SpellKartBats>
 D typeinfo for CEntityFactory<CTFProjectile_SpellKartOrb>
 D typeinfo for CEntityFactory<CTFProjectile_SpellLightningOrb>
 D typeinfo for CEntityFactory<CTFProjectile_SpellMeteorShower>
 D typeinfo for CEntityFactory<CTFProjectile_SpellMirv>
 D typeinfo for CEntityFactory<CTFProjectile_SpellPumpkin>
 D typeinfo for CEntityFactory<CTFProjectile_SpellSpawnBoss>
 D typeinfo for CEntityFactory<CTFProjectile_SpellSpawnHorde>
 D typeinfo for CEntityFactory<CTFProjectile_SpellSpawnZombie>
 D typeinfo for CEntityFactory<CTFProjectile_SpellTransposeTeleport>
 D typeinfo for CEntityFactory<CTFProjectile_Syringe>
 D typeinfo for CEntityFactory<CTFProjectile_Throwable>
 D typeinfo for CEntityFactory<CTFProjectile_ThrowableBreadMonster>
 D typeinfo for CEntityFactory<CTFProjectile_ThrowableBrick>
 D typeinfo for CEntityFactory<CTFProjectile_ThrowableRepel>
 D typeinfo for CEntityFactory<CTFPumpkinBomb>
 D typeinfo for CEntityFactory<CTFRagdoll>
 D typeinfo for CEntityFactory<CTFRaygun>
 D typeinfo for CEntityFactory<CTFReviveMarker>
 D typeinfo for CEntityFactory<CTFRevolver>
 D typeinfo for CEntityFactory<CTFRobotArm>
 D typeinfo for CEntityFactory<CTFRobotDestructionLogic>
 D typeinfo for CEntityFactory<CTFRobotDestruction_Robot>
 D typeinfo for CEntityFactory<CTFRobotDestruction_RobotGroup>
 D typeinfo for CEntityFactory<CTFRobotDestruction_RobotSpawn>
 D typeinfo for CEntityFactory<CTFRocketLauncher>
 D typeinfo for CEntityFactory<CTFRocketLauncher_AirStrike>
 D typeinfo for CEntityFactory<CTFRocketLauncher_DirectHit>
 D typeinfo for CEntityFactory<CTFRune>
 D typeinfo for CEntityFactory<CTFRuneTemp>
 D typeinfo for CEntityFactory<CTFRuneTempCrit>
 D typeinfo for CEntityFactory<CTFRuneTempUber>
 D typeinfo for CEntityFactory<CTFSMG>
 D typeinfo for CEntityFactory<CTFScatterGun>
 D typeinfo for CEntityFactory<CTFShotgun>
 D typeinfo for CEntityFactory<CTFShotgunBuildingRescue>
 D typeinfo for CEntityFactory<CTFShotgun_HWG>
 D typeinfo for CEntityFactory<CTFShotgun_Pyro>
 D typeinfo for CEntityFactory<CTFShotgun_Revenge>
 D typeinfo for CEntityFactory<CTFShotgun_Soldier>
 D typeinfo for CEntityFactory<CTFShovel>
 D typeinfo for CEntityFactory<CTFSniperRifle>
 D typeinfo for CEntityFactory<CTFSniperRifleClassic>
 D typeinfo for CEntityFactory<CTFSniperRifleDecap>
 D typeinfo for CEntityFactory<CTFSodaPopper>
 D typeinfo for CEntityFactory<CTFSpawner>
 D typeinfo for CEntityFactory<CTFSpellBook>
 D typeinfo for CEntityFactory<CTFSpell_MeteorShowerSpawner>
 D typeinfo for CEntityFactory<CTFStickBomb>
 D typeinfo for CEntityFactory<CTFStunBall>
 D typeinfo for CEntityFactory<CTFSword>
 D typeinfo for CEntityFactory<CTFSyringeGun>
 D typeinfo for CEntityFactory<CTFTankBoss>
 D typeinfo for CEntityFactory<CTFTankDestruction>
 D typeinfo for CEntityFactory<CTFTargetDummy>
 D typeinfo for CEntityFactory<CTFTauntProp>
 D typeinfo for CEntityFactory<CTFTeam>
 D typeinfo for CEntityFactory<CTFTeamSpawn>
 D typeinfo for CEntityFactory<CTFTeleportLocation>
 D typeinfo for CEntityFactory<CTFTrainingDynamicProp>
 D typeinfo for CEntityFactory<CTFViewModel>
 D typeinfo for CEntityFactory<CTFWeaponBase>
 D typeinfo for CEntityFactory<CTFWeaponBaseGrenadeProj>
 D typeinfo for CEntityFactory<CTFWeaponBaseMelee>
 D typeinfo for CEntityFactory<CTFWeaponBaseMerasmusGrenade>
 D typeinfo for CEntityFactory<CTFWeaponBuilder>
 D typeinfo for CEntityFactory<CTFWeaponInvis>
 D typeinfo for CEntityFactory<CTFWeaponPDAExpansion_Dispenser>
 D typeinfo for CEntityFactory<CTFWeaponPDAExpansion_Teleporter>
 D typeinfo for CEntityFactory<CTFWeaponPDA_Engineer_Build>
 D typeinfo for CEntityFactory<CTFWeaponPDA_Engineer_Destroy>
 D typeinfo for CEntityFactory<CTFWeaponPDA_Spy>
 D typeinfo for CEntityFactory<CTFWeaponSapper>
 D typeinfo for CEntityFactory<CTFWearable>
 D typeinfo for CEntityFactory<CTFWearableDemoShield>
 D typeinfo for CEntityFactory<CTFWearableLevelableItem>
 D typeinfo for CEntityFactory<CTFWearableRobotArm>
 D typeinfo for CEntityFactory<CTFWearableVM>
 D typeinfo for CEntityFactory<CTFWrench>
 D typeinfo for CEntityFactory<CTankTargetChange>
 D typeinfo for CEntityFactory<CTankTrainAI>
 D typeinfo for CEntityFactory<CTargetCDAudioRep>
 D typeinfo for CEntityFactory<CTargetChangeGravity>
 D typeinfo for CEntityFactory<CTeam>
 D typeinfo for CEntityFactory<CTeamControlPoint>
 D typeinfo for CEntityFactory<CTeamControlPointMaster>
 D typeinfo for CEntityFactory<CTeamControlPointRound>
 D typeinfo for CEntityFactory<CTeamRoundTimer>
 D typeinfo for CEntityFactory<CTeamTrainWatcher>
 D typeinfo for CEntityFactory<CTeamplayRoundWin>
 D typeinfo for CEntityFactory<CTeleportVortex>
 D typeinfo for CEntityFactory<CTempEntTester>
 D typeinfo for CEntityFactory<CTemplateNPCMaker>
 D typeinfo for CEntityFactory<CTesla>
 D typeinfo for CEntityFactory<CTestEffect>
 D typeinfo for CEntityFactory<CTestTraceline>
 D typeinfo for CEntityFactory<CTest_ProxyToggle_Networkable>
 D typeinfo for CEntityFactory<CTextureToggle>
 D typeinfo for CEntityFactory<CTimerEntity>
 D typeinfo for CEntityFactory<CTrainingAnnotation>
 D typeinfo for CEntityFactory<CTrainingModeLogic>
 D typeinfo for CEntityFactory<CTriggerAddOrRemoveTFPlayerAttributes>
 D typeinfo for CEntityFactory<CTriggerAddTFPlayerCondition>
 D typeinfo for CEntityFactory<CTriggerApplyImpulse>
 D typeinfo for CEntityFactory<CTriggerAreaCapture>
 D typeinfo for CEntityFactory<CTriggerBotTag>
 D typeinfo for CEntityFactory<CTriggerBrush>
 D typeinfo for CEntityFactory<CTriggerCDAudio>
 D typeinfo for CEntityFactory<CTriggerCamera>
 D typeinfo for CEntityFactory<CTriggerCatapult>
 D typeinfo for CEntityFactory<CTriggerGravity>
 D typeinfo for CEntityFactory<CTriggerHurt>
 D typeinfo for CEntityFactory<CTriggerIgnite>
 D typeinfo for CEntityFactory<CTriggerIgniteArrows>
 D typeinfo for CEntityFactory<CTriggerImpact>
 D typeinfo for CEntityFactory<CTriggerLook>
 D typeinfo for CEntityFactory<CTriggerMultiple>
 D typeinfo for CEntityFactory<CTriggerOnce>
 D typeinfo for CEntityFactory<CTriggerParticle>
 D typeinfo for CEntityFactory<CTriggerPasstimeBall>
 D typeinfo for CEntityFactory<CTriggerPlayerMovement>
 D typeinfo for CEntityFactory<CTriggerPlayerRespawnOverride>
 D typeinfo for CEntityFactory<CTriggerProximity>
 D typeinfo for CEntityFactory<CTriggerPush>
 D typeinfo for CEntityFactory<CTriggerRemove>
 D typeinfo for CEntityFactory<CTriggerRemoveTFPlayerCondition>
 D typeinfo for CEntityFactory<CTriggerSave>
 D typeinfo for CEntityFactory<CTriggerSoundscape>
 D typeinfo for CEntityFactory<CTriggerStun>
 D typeinfo for CEntityFactory<CTriggerTeleport>
 D typeinfo for CEntityFactory<CTriggerTeleportRelative>
 D typeinfo for CEntityFactory<CTriggerTimerDoor>
 D typeinfo for CEntityFactory<CTriggerToggleSave>
 D typeinfo for CEntityFactory<CTriggerVPhysicsMotion>
 D typeinfo for CEntityFactory<CTriggerVolume>
 D typeinfo for CEntityFactory<CTriggerWind>
 D typeinfo for CEntityFactory<CUpgrades>
 D typeinfo for CEntityFactory<CVGuiScreen>
 D typeinfo for CEntityFactory<CVoteController>
 D typeinfo for CEntityFactory<CWC_UpdateIgnoreList>
 D typeinfo for CEntityFactory<CWaterBullet>
 D typeinfo for CEntityFactory<CWaterLODControl>
 D typeinfo for CEntityFactory<CWeaponIFMBase>
 D typeinfo for CEntityFactory<CWeaponIFMBaseCamera>
 D typeinfo for CEntityFactory<CWeaponIFMSteadyCam>
 D typeinfo for CEntityFactory<CWeaponMedigun>
 D typeinfo for CEntityFactory<CWeightButton>
 D typeinfo for CEntityFactory<CWheelOfDoom>
 D typeinfo for CEntityFactory<CWheelOfDoomSpiral>
 D typeinfo for CEntityFactory<CWindowPane>
 D typeinfo for CEntityFactory<CWorld>
 D typeinfo for CEntityFactory<CWorldItem>
 D typeinfo for CEntityFactory<CZombie>
 D typeinfo for CEntityFactory<CZombieSpawner>
 D typeinfo for CEntityFactory<DustTrail>
 D typeinfo for CEntityFactory<FilterDamageType>
 D typeinfo for CEntityFactory<FilterDamagedByWeaponInSlot>
 D typeinfo for CEntityFactory<FilterTeam>
 D typeinfo for CEntityFactory<MovieExplosion>
 D typeinfo for CEntityFactory<ParticleSmokeGrenade>
 D typeinfo for CEntityFactory<RocketTrail>
 D typeinfo for CEntityFactory<SmokeTrail>
 D typeinfo for CEntityFactory<SporeExplosion>
 D typeinfo for CEntityFactory<SporeTrail>
 D typeinfo for CEntityFactoryDictionary
 D typeinfo for CEntityFlame
 D typeinfo for CEntityListSystem
 D typeinfo for CEntityParticleTrail
 D typeinfo for CEntityParticleTrail::NetworkVar_m_Info
 D typeinfo for CEntitySaveRestoreBlockHandler
 D typeinfo for CEntitySaveUtils
 D typeinfo for CEntitySpawnManager
 D typeinfo for CEntitySpawnPoint
 D typeinfo for CEntityTouchManager
 D typeinfo for CEnvBeam
 D typeinfo for CEnvBeverage
 D typeinfo for CEnvDetailController
 D typeinfo for CEnvDustPuff
 D typeinfo for CEnvEffectsScript
 D typeinfo for CEnvEntityMaker
 D typeinfo for CEnvExplosion
 D typeinfo for CEnvFade
 D typeinfo for CEnvFireSensor
 D typeinfo for CEnvFireSource
 D typeinfo for CEnvFunnel
 D typeinfo for CEnvGlobal
 D typeinfo for CEnvGunfire
 D typeinfo for CEnvHudHint
 D typeinfo for CEnvLaser
 D typeinfo for CEnvLight
 D typeinfo for CEnvMicrophone
 D typeinfo for CEnvMuzzleFlash
 D typeinfo for CEnvParticleScript
 D typeinfo for CEnvPlayerSurfaceTrigger
 D typeinfo for CEnvProjectedTexture
 D typeinfo for CEnvQuadraticBeam
 D typeinfo for CEnvScreenEffect
 D typeinfo for CEnvScreenOverlay
 D typeinfo for CEnvShake
 D typeinfo for CEnvShooter
 D typeinfo for CEnvSoundscape
 D typeinfo for CEnvSoundscapeProxy
 D typeinfo for CEnvSoundscapeTriggerable
 D typeinfo for CEnvSpark
 D typeinfo for CEnvSplash
 D typeinfo for CEnvTonemapController
 D typeinfo for CEnvTracer
 D typeinfo for CEnvViewPunch
 D typeinfo for CEnvWind
 D typeinfo for CEnvWindShared
 D typeinfo for CEnvZoom
 D typeinfo for CEventLog
 D typeinfo for CEventQueueSaveLoadProxy
 D typeinfo for CEventQueue_SaveRestoreBlockHandler
 D typeinfo for CEventsSaveDataOps
 D typeinfo for CExtendLevelIssue
 D typeinfo for CExtraMapEntity
 D typeinfo for CExtraMapEntity_Carrier
 D typeinfo for CExtraMapEntity_Rocket
 D typeinfo for CExtraMapEntity_Saucer
 D typeinfo for CExtraMapEntity_Sign
 D typeinfo for CEyeballBoss
 D typeinfo for CEyeballBoss::CEyeballBossIntention
 D typeinfo for CEyeballBossApproachTarget
 D typeinfo for CEyeballBossBehavior
 D typeinfo for CEyeballBossBody
 D typeinfo for CEyeballBossDead
 D typeinfo for CEyeballBossEmerge
 D typeinfo for CEyeballBossEmote
 D typeinfo for CEyeballBossEscape
 D typeinfo for CEyeballBossIdle
 D typeinfo for CEyeballBossLaunchRockets
 D typeinfo for CEyeballBossLocomotion
 D typeinfo for CEyeballBossNotice
 D typeinfo for CEyeballBossStunned
 D typeinfo for CEyeballBossTeleport
 D typeinfo for CFilterClass
 D typeinfo for CFilterEnemy
 D typeinfo for CFilterMassGreater
 D typeinfo for CFilterMultiple
 D typeinfo for CFilterName
 D typeinfo for CFilterTFBotHasTag
 D typeinfo for CFilterTFCanCap
 D typeinfo for CFilterTFClass
 D typeinfo for CFilterTFCondition
 D typeinfo for CFilterTFTeam
 D typeinfo for CFindMostInjuredNeighbor
 D typeinfo for CFire
 D typeinfo for CFireSmoke
 D typeinfo for CFireSphere
 D typeinfo for CFireTrail
 D typeinfo for CFish
 D typeinfo for CFishPool
 D typeinfo for CFlagDetectionZone
 D typeinfo for CFlaggedEntitiesEnum
 D typeinfo for CFlameEntityEnum
 D typeinfo for CFlexAnimationTrack
 D typeinfo for CFlexCycler
 D typeinfo for CFlexSceneFileManager
 D typeinfo for CFlextalkActor
 D typeinfo for CFmtStrN<1024, false>
 D typeinfo for CFmtStrN<128, false>
 D typeinfo for CFmtStrN<256, false>
 D typeinfo for CFmtStrN<32, false>
 D typeinfo for CFogController
 D typeinfo for CFogController::NetworkVar_m_fog
 D typeinfo for CFogSystem
 D typeinfo for CFourWheelServerVehicle
 D typeinfo for CFourWheelVehiclePhysics
 D typeinfo for CFuncAreaPortalBase
 D typeinfo for CFuncAreaPortalWindow
 D typeinfo for CFuncBrush
 D typeinfo for CFuncConveyor
 D typeinfo for CFuncFlagAlertZone
 D typeinfo for CFuncForceField
 D typeinfo for CFuncIllusionary
 D typeinfo for CFuncLadder
 D typeinfo for CFuncLadderEndPoint
 D typeinfo for CFuncMonitor
 D typeinfo for CFuncMoveLinear
 D typeinfo for CFuncNavAvoid
 D typeinfo for CFuncNavBlocker
 D typeinfo for CFuncNavCost
 D typeinfo for CFuncNavObstruction
 D typeinfo for CFuncNavPrefer
 D typeinfo for CFuncNavPrerequisite
 D typeinfo for CFuncNoBuild
 D typeinfo for CFuncOccluder
 D typeinfo for CFuncPasstimeGoal
 D typeinfo for CFuncPasstimeGoalShim
 D typeinfo for CFuncPasstimeGoalieZone
 D typeinfo for CFuncPasstimeNoBallZone
 D typeinfo for CFuncPlat
 D typeinfo for CFuncPlatRot
 D typeinfo for CFuncReflectiveGlass
 D typeinfo for CFuncRespawnFlagZone
 D typeinfo for CFuncRespawnRoom
 D typeinfo for CFuncRespawnRoomShim
 D typeinfo for CFuncRespawnRoomVisualizer
 D typeinfo for CFuncRotating
 D typeinfo for CFuncSmokeVolume
 D typeinfo for CFuncSuggestedBuild
 D typeinfo for CFuncTankTrain
 D typeinfo for CFuncTrackAuto
 D typeinfo for CFuncTrackChange
 D typeinfo for CFuncTrackTrain
 D typeinfo for CFuncTrain
 D typeinfo for CFuncTrainControls
 D typeinfo for CFuncVPhysicsClip
 D typeinfo for CFuncVehicleClip
 D typeinfo for CFuncWall
 D typeinfo for CFuncWallToggle
 D typeinfo for CFunc_Dust
 D typeinfo for CFunc_DustCloud
 D typeinfo for CFunc_DustMotes
 D typeinfo for CFunc_LOD
 D typeinfo for CFunctor
 D typeinfo for CFunctor2<void (*)(CFunctor**, unsigned int), CFunctor**, int, CRefCounted1<CFunctor, CRefCountServiceBase<true, CRefMT> > >
 D typeinfo for CFunctor3<void (*)(IPhysicsObject*, Vector const&, Vector const&), IPhysicsObject*, Vector, Vector, CRefCounted1<CFunctor, CRefCountServiceBase<true, CRefMT> > >
 D typeinfo for CFunctor4<CBaseEntity* (*)(CBaseEntity*, CBaseEntity*, bool, float), CBaseEntity*, CBaseEntity*, bool, float, CRefCounted1<CFunctor, CRefCountServiceBase<true, CRefMT> > >
 D typeinfo for CGCClientJobServerGoodbye
 D typeinfo for CGCClientJobServerWelcome
 D typeinfo for CGCClientSystem
 D typeinfo for CGCCoaching_CoachJoining
 D typeinfo for CGCCoaching_RemoveCurrentCoach
 D typeinfo for CGCCompetitiveDailyStatsRollupJob
 D typeinfo for CGCDev_NewItemRequestResponse
 D typeinfo for CGCKickPlayerFromLobbyJob
 D typeinfo for CGCMsgGC_PlayerDuckLeaderboard_IndividualUpdate
 D typeinfo for CGCMsgGC_War_GlobalStatsResponse
 D typeinfo for CGCMsgGC_War_GlobalStatsResponse_SideScore
 D typeinfo for CGCMsgGC_War_IndividualUpdate
 D typeinfo for CGCMsgGC_War_JoinWar
 D typeinfo for CGCMsgGC_War_RequestGlobalStats
 D typeinfo for CGCMsgGetIPLocation
 D typeinfo for CGCMsgGetIPLocationResponse
 D typeinfo for CGCMsgGetSystemStats
 D typeinfo for CGCMsgGetSystemStatsResponse
 D typeinfo for CGCMsgMemCachedDelete
 D typeinfo for CGCMsgMemCachedGet
 D typeinfo for CGCMsgMemCachedGetResponse
 D typeinfo for CGCMsgMemCachedGetResponse_ValueTag
 D typeinfo for CGCMsgMemCachedSet
 D typeinfo for CGCMsgMemCachedSet_KeyPair
 D typeinfo for CGCMsgMemCachedStats
 D typeinfo for CGCMsgMemCachedStatsResponse
 D typeinfo for CGCMsgSQLStats
 D typeinfo for CGCMsgSQLStatsResponse
 D typeinfo for CGCMsgSystemStatsSchema
 D typeinfo for CGCMsgTFHelloResponse
 D typeinfo for CGCMsgTFSync
 D typeinfo for CGCMsgTFSyncEx
 D typeinfo for CGCMsg_WorldItemPlacement_Update
 D typeinfo for CGCQuestObjective_PointsChangeResponse
 D typeinfo for CGCReplicateConVars
 D typeinfo for CGCStorePurchaseInit_LineItem
 D typeinfo for CGCSystemMsg_GetAccountDetails
 D typeinfo for CGCSystemMsg_GetAccountDetails_Response
 D typeinfo for CGCSystemMsg_GetPurchaseTrust_Request
 D typeinfo for CGCSystemMsg_GetPurchaseTrust_Response
 D typeinfo for CGCTFItemAcknowledged
 D typeinfo for CGCTFQuickplay_PlayerJoining
 D typeinfo for CGCToGCMsgMasterAck
 D typeinfo for CGCToGCMsgMasterAck_Response
 D typeinfo for CGCToGCMsgMasterStartupComplete
 D typeinfo for CGCToGCMsgMasterStartupComplete_GCInfo
 D typeinfo for CGCToGCMsgRouted
 D typeinfo for CGCToGCMsgRoutedReply
 D typeinfo for CGCUpdateConVar
 D typeinfo for CGCUpdateItemSchema
 D typeinfo for CGCUpdateServerModificationItemStateJob
 D typeinfo for CGCUseServerModificationItemJob
 D typeinfo for CGCVoteSystemVoteKickResponse
 D typeinfo for CGC_GameServer_AuthChallenge
 D typeinfo for CGC_GameServer_AuthResult
 D typeinfo for CGC_GameServer_Duel_Request
 D typeinfo for CGC_GameServer_Duel_Response
 D typeinfo for CGC_RespawnPostLoadoutChange
 D typeinfo for CGameDLL_ConVarAccessor
 D typeinfo for CGameEnd
 D typeinfo for CGameEventListener
 D typeinfo for CGameGibManager
 D typeinfo for CGameMovement
 D typeinfo for CGamePlayerEquip
 D typeinfo for CGamePlayerTeam
 D typeinfo for CGamePlayerZone
 D typeinfo for CGameRules
 D typeinfo for CGameRulesProxy
 D typeinfo for CGameScore
 D typeinfo for CGameStringPool
 D typeinfo for CGameText
 D typeinfo for CGameUI
 D typeinfo for CGameWeaponManager
 D typeinfo for CGenericActor
 D typeinfo for CGenericFlexCycler
 D typeinfo for CGenericNPC
 D typeinfo for CGhost
 D typeinfo for CGhost::CGhostIntention
 D typeinfo for CGhostBehavior
 D typeinfo for CGhostLocomotion
 D typeinfo for CGib
 D typeinfo for CGibShooter
 D typeinfo for CGlobalEntityList
 D typeinfo for CGlobalState
 D typeinfo for CGunTarget
 D typeinfo for CHLTVDirector
 D typeinfo for CHalloweenBaseBoss
 D typeinfo for CHalloweenGiftPickup
 D typeinfo for CHalloweenGiftSpawnLocation
 D typeinfo for CHalloweenPickup
 D typeinfo for CHalloweenSoulPack
 D typeinfo for CHandleDummy
 D typeinfo for CHandleTest
 D typeinfo for CHeadlessHatman
 D typeinfo for CHeadlessHatmanAttack
 D typeinfo for CHeadlessHatmanBehavior
 D typeinfo for CHeadlessHatmanBody
 D typeinfo for CHeadlessHatmanDying
 D typeinfo for CHeadlessHatmanEmerge
 D typeinfo for CHeadlessHatmanIntention
 D typeinfo for CHeadlessHatmanLocomotion
 D typeinfo for CHeadlessHatmanPathCost
 D typeinfo for CHeadlessHatmanTerrify
 D typeinfo for CHealthAmmoKit
 D typeinfo for CHealthFilter
 D typeinfo for CHealthKit
 D typeinfo for CHealthKitMedium
 D typeinfo for CHealthKitSmall
 D typeinfo for CHightower_TeleportVortex
 D typeinfo for CHybridMap_CTF_CP
 D typeinfo for CIKSaveRestoreOps
 D typeinfo for CIPLocationInfo
 D typeinfo for CInfoCameraLink
 D typeinfo for CInfoIntermission
 D typeinfo for CInfoLadderDismount
 D typeinfo for CInfoLightingRelative
 D typeinfo for CInfoMassCenter
 D typeinfo for CInfoOverlayAccessor
 D typeinfo for CInfoTarget
 D typeinfo for CInstancedResponseSystem
 D typeinfo for CInstancedSceneEntity
 D typeinfo for CIntroViewpoint
 D typeinfo for CInventoryManager
 D typeinfo for CItem
 D typeinfo for CItemGeneration
 D typeinfo for CItemSelectionCriteria::CCondition
 D typeinfo for CItemSelectionCriteria::CFloatCondition
 D typeinfo for CItemSelectionCriteria::CSetCondition
 D typeinfo for CItemSelectionCriteria::CStringCondition
 D typeinfo for CItemSelectionCriteria::ICondition
 D typeinfo for CItemSoda
 D typeinfo for CJobSendMsgUntilConfirmed<CMsgGCRematchRequest, CMsgGCRematchRequestResponse, (ETFGCMsg)6533>
 D typeinfo for CJobSendMsgUntilConfirmed<CMsgGC_Match_Result, CMsgGC_Match_ResultResponse, (ETFGCMsg)6520>
 D typeinfo for CJobSendMsgUntilConfirmed<CMsgGameServerKickingLobby, CMsgGameServerKickingLobbyResponse, (ETFGCMsg)6521>
 D typeinfo for CJobSendMsgUntilConfirmed<CMsgMvMVictory, CMsgMvMMannUpVictoryReply, (ETFGCMsg)6298>
 D typeinfo for CJobSendMsgUntilConfirmed<CMsgPlayerLeftMatch, CMsgPlayerLeftMatchResponse, (ETFGCMsg)6523>
 D typeinfo for CKeepUpright
 D typeinfo for CKeyValuesDumpContextAsDevMsg
 D typeinfo for CKickIssue
 D typeinfo for CKnownCollector
 D typeinfo for CKnownEntity
 D typeinfo for CKothLogic
 D typeinfo for CLadderMatchGroupDescription
 D typeinfo for CLadderMatchGroupDescription::CLadderProgressionDesc
 D typeinfo for CLagCompensationManager
 D typeinfo for CLaserDot
 D typeinfo for CLight
 D typeinfo for CLightGlow
 D typeinfo for CListMissions
 D typeinfo for CLobbyPendingPlayerReport
 D typeinfo for CLogicActiveAutosave
 D typeinfo for CLogicAuto
 D typeinfo for CLogicAutosave
 D typeinfo for CLogicBranch
 D typeinfo for CLogicBranchList
 D typeinfo for CLogicCase
 D typeinfo for CLogicCollisionPair
 D typeinfo for CLogicCompare
 D typeinfo for CLogicCompareInteger
 D typeinfo for CLogicLineToEntity
 D typeinfo for CLogicMannPower
 D typeinfo for CLogicMeasureMovement
 D typeinfo for CLogicNavigation
 D typeinfo for CLogicOnHoliday
 D typeinfo for CLogicRelay
 D typeinfo for CLogicalEntity
 D typeinfo for CMannVsMachineChangeChallengeIssue
 D typeinfo for CMannVsMachineLogic
 D typeinfo for CMannVsMachineStats
 D typeinfo for CMannVsMachineUpgradeManager
 D typeinfo for CMannVsMachineWaveStats
 D typeinfo for CMapInfoContainer
 D typeinfo for CMapLoadEntityFilter
 D typeinfo for CMaterialModifyControl
 D typeinfo for CMaterialOverrideContainer<IEconItemInterface>
 D typeinfo for CMathColorBlend
 D typeinfo for CMathCounter
 D typeinfo for CMathRemap
 D typeinfo for CMedievalLogic
 D typeinfo for CMedigunFilter
 D typeinfo for CMemberFunctor0<CParallelProcessor<CNavArea*, CFuncJobItemProcessor<CNavArea*> >*, void (CParallelProcessor<CNavArea*, CFuncJobItemProcessor<CNavArea*> >::*)(), CRefCounted1<CFunctor, CRefCountServiceBase<true, CRefMT> >, CFuncMemPolicyNone>
 D typeinfo for CMemberFunctor0<CParallelProcessor<QueryCacheUpdateRecord_t, CFuncJobItemProcessor<QueryCacheUpdateRecord_t> >*, void (CParallelProcessor<QueryCacheUpdateRecord_t, CFuncJobItemProcessor<QueryCacheUpdateRecord_t> >::*)(), CRefCounted1<CFunctor, CRefCountServiceBase<true, CRefMT> >, CFuncMemPolicyNone>
 D typeinfo for CMemberFunctor1<CAI_Navigator*, bool (CAI_Navigator::*)(Vector const&), Vector, CRefCounted1<CFunctor, CRefCountServiceBase<true, CRefMT> >, CFuncMemPolicyNone>
 D typeinfo for CMemberFunctor1<IPhysicsObject*, void (IPhysicsObject::*)(bool), bool, CRefCounted1<CFunctor, CRefCountServiceBase<true, CRefMT> >, CFuncMemPolicyNone>
 D typeinfo for CMemberFunctor2<CAI_Navigator*, bool (CAI_Navigator::*)(AI_NavGoal_t const&, unsigned int), AI_NavGoal_t, unsigned int, CRefCounted1<CFunctor, CRefCountServiceBase<true, CRefMT> >, CFuncMemPolicyNone>
 D typeinfo for CMemberFunctor3<CBreakableProp*, void (CBreakableProp::*)(Vector const&, Vector const&, QAngle const&), Vector, Vector, QAngle, CRefCounted1<CFunctor, CRefCountServiceBase<true, CRefMT> >, CFuncMemPolicyNone>
 D typeinfo for CMerasmus
 D typeinfo for CMerasmusAOEAttack
 D typeinfo for CMerasmusAttack
 D typeinfo for CMerasmusBehavior
 D typeinfo for CMerasmusBody
 D typeinfo for CMerasmusDancer
 D typeinfo for CMerasmusDisguise
 D typeinfo for CMerasmusDying
 D typeinfo for CMerasmusEscape
 D typeinfo for CMerasmusFlyingLocomotion
 D typeinfo for CMerasmusIntention
 D typeinfo for CMerasmusLocomotion
 D typeinfo for CMerasmusPathCost
 D typeinfo for CMerasmusReveal
 D typeinfo for CMerasmusStaffAttack
 D typeinfo for CMerasmusStunned
 D typeinfo for CMerasmusTeleport
 D typeinfo for CMerasmusThrowingGrenade
 D typeinfo for CMerasmusZap
 D typeinfo for CMessage
 D typeinfo for CMessageEntity
 D typeinfo for CMissionPopulator
 D typeinfo for CMobSpawner
 D typeinfo for CModelSoundsCache
 D typeinfo for CModelSoundsCacheSaver
 D typeinfo for CMomentaryRotButton
 D typeinfo for CMonsterResource
 D typeinfo for CMotorController
 D typeinfo for CMoveHelperServer
 D typeinfo for CMovementSpeedMod
 D typeinfo for CMsgAMAddFreeLicense
 D typeinfo for CMsgAMAddFreeLicenseResponse
 D typeinfo for CMsgAMFindAccounts
 D typeinfo for CMsgAMFindAccountsResponse
 D typeinfo for CMsgAMGetLicenses
 D typeinfo for CMsgAMGetLicensesResponse
 D typeinfo for CMsgAMGetUserGameStats
 D typeinfo for CMsgAMGetUserGameStatsResponse
 D typeinfo for CMsgAMGetUserGameStatsResponse_Achievement_Blocks
 D typeinfo for CMsgAMGetUserGameStatsResponse_Stats
 D typeinfo for CMsgAMGrantGuestPasses2
 D typeinfo for CMsgAMGrantGuestPasses2Response
 D typeinfo for CMsgAMSendEmail
 D typeinfo for CMsgAMSendEmailResponse
 D typeinfo for CMsgAMSendEmail_PersonaNameReplacementToken
 D typeinfo for CMsgAMSendEmail_ReplacementToken
 D typeinfo for CMsgAcceptInvite
 D typeinfo for CMsgAcceptInviteResponse
 D typeinfo for CMsgAcknowledgeXP
 D typeinfo for CMsgAdjustItemEquippedState
 D typeinfo for CMsgApplyAutograph
 D typeinfo for CMsgApplyStrangeCountTransfer
 D typeinfo for CMsgApplyStrangePart
 D typeinfo for CMsgApplyStrangeRestriction
 D typeinfo for CMsgApplyToolToBaseItem
 D typeinfo for CMsgApplyToolToItem
 D typeinfo for CMsgApplyUpgradeCard
 D typeinfo for CMsgCasualMatchmakingSearchCriteria
 D typeinfo for CMsgClientGoodbye
 D typeinfo for CMsgClientHello
 D typeinfo for CMsgClientWelcome
 D typeinfo for CMsgConVarValue
 D typeinfo for CMsgConnectionStatus
 D typeinfo for CMsgConsumableExhausted
 D typeinfo for CMsgCraftCollectionUpgrade
 D typeinfo for CMsgCraftCommonStatClock
 D typeinfo for CMsgCraftHalloweenOffering
 D typeinfo for CMsgCraftingResponse
 D typeinfo for CMsgCreateOrUpdateParty
 D typeinfo for CMsgCreateOrUpdatePartyReply
 D typeinfo for CMsgDeliverGiftResponseGiver
 D typeinfo for CMsgDevDebugRollLootRequest
 D typeinfo for CMsgDevNewItemRequest
 D typeinfo for CMsgEconPlayerStrangeCountAdjustment
 D typeinfo for CMsgEconPlayerStrangeCountAdjustment_CStrangeCountAdjustment
 D typeinfo for CMsgExitMatchmaking
 D typeinfo for CMsgFulfillDynamicRecipeComponent
 D typeinfo for CMsgGCBannedWordListRequest
 D typeinfo for CMsgGCCasualCriteriaStatsResponse
 D typeinfo for CMsgGCCasualCriteriaStatsResponse_DataCenterPopulation
 D typeinfo for CMsgGCCheckClanMembership
 D typeinfo for CMsgGCCheckClanMembership_Response
 D typeinfo for CMsgGCCheckFriendship
 D typeinfo for CMsgGCCheckFriendship_Response
 D typeinfo for CMsgGCClientDisplayNotification
 D typeinfo for CMsgGCClientMarketData
 D typeinfo for CMsgGCClientMarketDataEntry
 D typeinfo for CMsgGCClientMarketDataRequest
 D typeinfo for CMsgGCClientPing
 D typeinfo for CMsgGCCollectItem
 D typeinfo for CMsgGCDataCenterPing_Update
 D typeinfo for CMsgGCDataCenterPing_Update_PingEntry
 D typeinfo for CMsgGCError
 D typeinfo for CMsgGCGetCommandList
 D typeinfo for CMsgGCGetCommandListResponse
 D typeinfo for CMsgGCGetEmailTemplate
 D typeinfo for CMsgGCGetEmailTemplateResponse
 D typeinfo for CMsgGCGetPartnerAccountLink
 D typeinfo for CMsgGCGetPartnerAccountLink_Response
 D typeinfo for CMsgGCGetPersonaNames
 D typeinfo for CMsgGCGetPersonaNames_Response
 D typeinfo for CMsgGCGetPersonaNames_Response_PersonaName
 D typeinfo for CMsgGCGiftedItems
 D typeinfo for CMsgGCHAccountLockStatusChange
 D typeinfo for CMsgGCHAccountPhoneNumberChange
 D typeinfo for CMsgGCHAccountTradeBanStatusChange
 D typeinfo for CMsgGCHAccountTwoFactorChange
 D typeinfo for CMsgGCHAccountVacStatusChange
 D typeinfo for CMsgGCHUpdateSession
 D typeinfo for CMsgGCHUpdateSession_ExtraField
 D typeinfo for CMsgGCHVacVerificationChange
 D typeinfo for CMsgGCIncrementKillCountResponse
 D typeinfo for CMsgGCItemPreviewItemBoughtNotification
 D typeinfo for CMsgGCMatchHistoryLoad
 D typeinfo for CMsgGCMsgMasterSetClientMsgRouting
 D typeinfo for CMsgGCMsgMasterSetClientMsgRouting_Entry
 D typeinfo for CMsgGCMsgMasterSetClientMsgRouting_Response
 D typeinfo for CMsgGCMsgMasterSetDirectory
 D typeinfo for CMsgGCMsgMasterSetDirectory_Response
 D typeinfo for CMsgGCMsgMasterSetDirectory_SubGC
 D typeinfo for CMsgGCMsgMasterSetWebAPIRouting
 D typeinfo for CMsgGCMsgMasterSetWebAPIRouting_Entry
 D typeinfo for CMsgGCMsgMasterSetWebAPIRouting_Response
 D typeinfo for CMsgGCMsgSetOptions
 D typeinfo for CMsgGCMsgSetOptions_MessageRange
 D typeinfo for CMsgGCMsgWebAPIJobRequestForwardResponse
 D typeinfo for CMsgGCMultiplexMessage
 D typeinfo for CMsgGCNameItemNotification
 D typeinfo for CMsgGCNotification
 D typeinfo for CMsgGCNotificationQueue
 D typeinfo for CMsgGCQuestComplete_Request
 D typeinfo for CMsgGCQuestCompleted
 D typeinfo for CMsgGCQuestDiscard_Request
 D typeinfo for CMsgGCQuestObjective_PointsChange
 D typeinfo for CMsgGCQuestObjective_Progress
 D typeinfo for CMsgGCQuestObjective_RequestLoanerItems
 D typeinfo for CMsgGCQuestObjective_RequestLoanerResponse
 D typeinfo for CMsgGCRematchRequest
 D typeinfo for CMsgGCRematchRequestResponse
 D typeinfo for CMsgGCRematchRequest_PartyEntry
 D typeinfo for CMsgGCRemoveCustomizationAttributeSimple
 D typeinfo for CMsgGCRemoveStrangePart
 D typeinfo for CMsgGCRemoveUpgradeCard
 D typeinfo for CMsgGCReportAbuse
 D typeinfo for CMsgGCReportAbuseResponse
 D typeinfo for CMsgGCRequestCasualCriteriaStats
 D typeinfo for CMsgGCRequestStoreSalesData
 D typeinfo for CMsgGCRequestStoreSalesDataResponse
 D typeinfo for CMsgGCRequestStoreSalesDataResponse_Price
 D typeinfo for CMsgGCRequestStoreSalesDataUpToDateResponse
 D typeinfo for CMsgGCRequestSubGCSessionInfo
 D typeinfo for CMsgGCRequestSubGCSessionInfoResponse
 D typeinfo for CMsgGCResetStrangeScores
 D typeinfo for CMsgGCRoutingInfo
 D typeinfo for CMsgGCShowItemsPickedUp
 D typeinfo for CMsgGCShuffleCrateContents
 D typeinfo for CMsgGCStorePurchaseCancel
 D typeinfo for CMsgGCStorePurchaseCancelResponse
 D typeinfo for CMsgGCStorePurchaseFinalize
 D typeinfo for CMsgGCStorePurchaseFinalizeResponse
 D typeinfo for CMsgGCStorePurchaseInit
 D typeinfo for CMsgGCStorePurchaseInitResponse
 D typeinfo for CMsgGCSurveyRequest
 D typeinfo for CMsgGCSurveyResponse
 D typeinfo for CMsgGCTFSpecificItemBroadcast
 D typeinfo for CMsgGCToGCGetUserServerMembers
 D typeinfo for CMsgGCToGCGetUserServerMembersResponse
 D typeinfo for CMsgGCToGCGetUserSessionServer
 D typeinfo for CMsgGCToGCGetUserSessionServerResponse
 D typeinfo for CMsgGCToGCGrantSelfMadeItemToAccount
 D typeinfo for CMsgGCToGCIncrementRecruitmentLevel
 D typeinfo for CMsgGCToGCPingRequest
 D typeinfo for CMsgGCToGCPingResponse
 D typeinfo for CMsgGCToGCSOCacheSubscribe
 D typeinfo for CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions
 D typeinfo for CMsgGCToGCSOCacheUnsubscribe
 D typeinfo for CMsgGCToGCThankedByNewUser
 D typeinfo for CMsgGCUpdateSubGCSessionInfo
 D typeinfo for CMsgGCUpdateSubGCSessionInfo_CMsgUpdate
 D typeinfo for CMsgGC_Client2GCEconPreviewDataBlockRequest
 D typeinfo for CMsgGC_Client2GCEconPreviewDataBlockResponse
 D typeinfo for CMsgGC_Client_UseServerModificationItem
 D typeinfo for CMsgGC_Client_UseServerModificationItem_Response
 D typeinfo for CMsgGC_DailyCompetitiveStatsRollup
 D typeinfo for CMsgGC_DailyCompetitiveStatsRollup_Response
 D typeinfo for CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry
 D typeinfo for CMsgGC_GameServer_AckPolicy
 D typeinfo for CMsgGC_GameServer_AckPolicyResponse
 D typeinfo for CMsgGC_GameServer_AuthChallenge
 D typeinfo for CMsgGC_GameServer_AuthChallengeResponse
 D typeinfo for CMsgGC_GameServer_AuthResult
 D typeinfo for CMsgGC_GameServer_CreateIdentity
 D typeinfo for CMsgGC_GameServer_CreateIdentityResponse
 D typeinfo for CMsgGC_GameServer_LevelInfo
 D typeinfo for CMsgGC_GameServer_List
 D typeinfo for CMsgGC_GameServer_ListResponse
 D typeinfo for CMsgGC_GameServer_ListResponse_GameServerIdentity
 D typeinfo for CMsgGC_GameServer_ResetIdentity
 D typeinfo for CMsgGC_GameServer_ResetIdentityResponse
 D typeinfo for CMsgGC_GameServer_ServerModificationItem
 D typeinfo for CMsgGC_GameServer_ServerModificationItemExpired
 D typeinfo for CMsgGC_GameServer_UseServerModificationItem
 D typeinfo for CMsgGC_GameServer_UseServerModificationItem_Response
 D typeinfo for CMsgGC_Halloween_GrantItem
 D typeinfo for CMsgGC_Halloween_GrantItemResponse
 D typeinfo for CMsgGC_Halloween_ItemClaimed
 D typeinfo for CMsgGC_Halloween_ReservedItem
 D typeinfo for CMsgGC_KickPlayerFromLobby
 D typeinfo for CMsgGC_Match_Result
 D typeinfo for CMsgGC_Match_ResultResponse
 D typeinfo for CMsgGC_Match_Result_Player
 D typeinfo for CMsgGC_PickupItemEligibility_Query
 D typeinfo for CMsgGC_PickupItemEligibility_QueryResponse
 D typeinfo for CMsgGC_ReportPlayer
 D typeinfo for CMsgGC_TFVoteKickPlayerRequest
 D typeinfo for CMsgGC_VoteKickPlayerRequestResponse
 D typeinfo for CMsgGameServerKickingLobby
 D typeinfo for CMsgGameServerKickingLobbyResponse
 D typeinfo for CMsgGameServerMatchmakingStatus
 D typeinfo for CMsgGameServerMatchmakingStatus_Player
 D typeinfo for CMsgHalloween_Merasmus2012
 D typeinfo for CMsgHalloween_ServerBossEvent
 D typeinfo for CMsgHttpRequest
 D typeinfo for CMsgHttpRequest_QueryParam
 D typeinfo for CMsgHttpRequest_RequestHeader
 D typeinfo for CMsgHttpResponse
 D typeinfo for CMsgHttpResponse_ResponseHeader
 D typeinfo for CMsgIncrementKillCountAttribute
 D typeinfo for CMsgIncrementKillCountAttribute_Multiple
 D typeinfo for CMsgInvitationCreated
 D typeinfo for CMsgInviteToParty
 D typeinfo for CMsgItemAcknowledged
 D typeinfo for CMsgKickFromParty
 D typeinfo for CMsgKickedFromMatchmakingQueue
 D typeinfo for CMsgLANServerAvailable
 D typeinfo for CMsgLeaveGameAndPrepareToJoinParty
 D typeinfo for CMsgLeaveParty
 D typeinfo for CMsgLookupMultipleAccountNames
 D typeinfo for CMsgLookupMultipleAccountNamesResponse
 D typeinfo for CMsgLookupMultipleAccountNamesResponse_Account
 D typeinfo for CMsgMatchSearchCriteria
 D typeinfo for CMsgMatchmakingProgress
 D typeinfo for CMsgMatchmakingSearchCountRequest
 D typeinfo for CMsgMatchmakingSearchCountResponse
 D typeinfo for CMsgMvMMannUpVictoryReply
 D typeinfo for CMsgMvMVictory
 D typeinfo for CMsgMvMVictoryInfo
 D typeinfo for CMsgMvMVictoryInfo_Item
 D typeinfo for CMsgMvMVictoryInfo_Player
 D typeinfo for CMsgMvMVictory_Player
 D typeinfo for CMsgNotificationAcknowledge
 D typeinfo for CMsgNotificationAcknowledgeReply
 D typeinfo for CMsgNotificationOfSuspiciousActivity
 D typeinfo for CMsgNotificationOfSuspiciousActivity_MultipleGameInstances
 D typeinfo for CMsgNotifyWatchdog
 D typeinfo for CMsgPackageLicense
 D typeinfo for CMsgPartyInviteResponse
 D typeinfo for CMsgPlayerLeftMatch
 D typeinfo for CMsgPlayerLeftMatchResponse
 D typeinfo for CMsgProtoBufHeader
 D typeinfo for CMsgReadyUp
 D typeinfo for CMsgRecipeComponent
 D typeinfo for CMsgReplaySubmitContestEntry
 D typeinfo for CMsgReplaySubmitContestEntryResponse
 D typeinfo for CMsgReplayUploadedToYouTube
 D typeinfo for CMsgReplicateConVars
 D typeinfo for CMsgRequestInventoryRefresh
 D typeinfo for CMsgRequestItemPurgatory_FinalizePurchase
 D typeinfo for CMsgRequestItemPurgatory_FinalizePurchaseResponse
 D typeinfo for CMsgRequestItemPurgatory_RefundPurchase
 D typeinfo for CMsgRequestItemPurgatory_RefundPurchaseResponse
 D typeinfo for CMsgSOCacheHaveVersion
 D typeinfo for CMsgSOCacheSubscribed
 D typeinfo for CMsgSOCacheSubscribedUpToDate
 D typeinfo for CMsgSOCacheSubscribed_SubscribedType
 D typeinfo for CMsgSOCacheSubscriptionCheck
 D typeinfo for CMsgSOCacheSubscriptionRefresh
 D typeinfo for CMsgSOCacheUnsubscribed
 D typeinfo for CMsgSOCacheVersion
 D typeinfo for CMsgSOIDOwner
 D typeinfo for CMsgSOMultipleObjects
 D typeinfo for CMsgSOMultipleObjects_SingleObject
 D typeinfo for CMsgSOSingleObject
 D typeinfo for CMsgSaxxyAwarded
 D typeinfo for CMsgSelectPresetForClass
 D typeinfo for CMsgServerAvailable
 D typeinfo for CMsgServerGoodbye
 D typeinfo for CMsgServerHello
 D typeinfo for CMsgServerWelcome
 D typeinfo for CMsgSetHatEffectUseHeadOrigin
 D typeinfo for CMsgSetItemEffectVerticalOffset
 D typeinfo for CMsgSetItemPositions
 D typeinfo for CMsgSetItemPositions_ItemPosition
 D typeinfo for CMsgSetItemSlotAttribute
 D typeinfo for CMsgSetPresetItemPosition
 D typeinfo for CMsgSortItems
 D typeinfo for CMsgStoreGetUserData
 D typeinfo for CMsgStoreGetUserDataResponse
 D typeinfo for CMsgSystemBroadcast
 D typeinfo for CMsgTFClientInit
 D typeinfo for CMsgTFCoaching_AddToCoaches
 D typeinfo for CMsgTFCoaching_AskCoach
 D typeinfo for CMsgTFCoaching_AskCoachResponse
 D typeinfo for CMsgTFCoaching_CoachJoinGame
 D typeinfo for CMsgTFCoaching_CoachJoined
 D typeinfo for CMsgTFCoaching_CoachJoining
 D typeinfo for CMsgTFCoaching_FindCoach
 D typeinfo for CMsgTFCoaching_FindCoachResponse
 D typeinfo for CMsgTFCoaching_LikeCurrentCoach
 D typeinfo for CMsgTFCoaching_RemoveCurrentCoach
 D typeinfo for CMsgTFCoaching_RemoveFromCoaches
 D typeinfo for CMsgTFFreeTrialChooseMostHelpfulFriend
 D typeinfo for CMsgTFFreeTrialConvertedToPremium
 D typeinfo for CMsgTFGoldenWrenchBroadcast
 D typeinfo for CMsgTFJoinChatChannel
 D typeinfo for CMsgTFJoinChatChannelResponse
 D typeinfo for CMsgTFJoinChatChannelResponse_ChatMember
 D typeinfo for CMsgTFLeaveChatChannel
 D typeinfo for CMsgTFOtherJoinedChatChannel
 D typeinfo for CMsgTFOtherLeftChatChannel
 D typeinfo for CMsgTFQuickplay_PlayerJoining
 D typeinfo for CMsgTFQuickplay_ScoreServers
 D typeinfo for CMsgTFQuickplay_ScoreServersResponse
 D typeinfo for CMsgTFQuickplay_ScoreServersResponse_ServerInfo
 D typeinfo for CMsgTFQuickplay_ScoreServers_ServerInfo
 D typeinfo for CMsgTFRequestChatChannelList
 D typeinfo for CMsgTFRequestChatChannelListResponse
 D typeinfo for CMsgTFRequestChatChannelListResponse_ChatChannel
 D typeinfo for CMsgTFRequestDefaultChatChannel
 D typeinfo for CMsgTFRequestDefaultChatChannelResponse
 D typeinfo for CMsgTFRequestTF2Friends
 D typeinfo for CMsgTFRequestTF2FriendsResponse
 D typeinfo for CMsgTFSaxxyBroadcast
 D typeinfo for CMsgTFThankedBySomeone
 D typeinfo for CMsgTFThankedSomeone
 D typeinfo for CMsgTFVoteKickBanPlayer
 D typeinfo for CMsgTFVoteKickBanPlayerResult
 D typeinfo for CMsgTFWorldStatus
 D typeinfo for CMsgTFXPSource
 D typeinfo for CMsgTFXPSourceBreakdown
 D typeinfo for CMsgTrackUniquePlayerPairEvent
 D typeinfo for CMsgUpdateHalloweenMerasmusLootLevel
 D typeinfo for CMsgUpdateHalloweenMerasmusLootLevel_Player
 D typeinfo for CMsgUpdateItemSchema
 D typeinfo for CMsgUpdatePeriodicEvent
 D typeinfo for CMsgUseItem
 D typeinfo for CMsgWebAPIKey
 D typeinfo for CMsgWebAPIRequest
 D typeinfo for CMultiPlayerAnimState
 D typeinfo for CMultiSource
 D typeinfo for CMultiplayRules
 D typeinfo for CMultiplayer_Expresser
 D typeinfo for CMultipleEscort
 D typeinfo for CMvMMatchGroupDescription
 D typeinfo for CNPCMaker
 D typeinfo for CNPCSpawnDestination
 D typeinfo for CNPC_Furniture
 D typeinfo for CNPC_VehicleDriver
 D typeinfo for CNavArea
 D typeinfo for CNavAreaCriticalData
 D typeinfo for CNavMesh
 D typeinfo for CNextLevelIssue
 D typeinfo for CNoGrenadesZone
 D typeinfo for CNoHoliday
 D typeinfo for CNodeEnt
 D typeinfo for CNodeFilter
 D typeinfo for CNotifyList
 D typeinfo for CNullEntity
 D typeinfo for CObjectCartDispenser
 D typeinfo for CObjectDispenser
 D typeinfo for CObjectSapper
 D typeinfo for CObjectSentrygun
 D typeinfo for CObjectTeleporter
 D typeinfo for CObjectsFileLoad
 D typeinfo for CObserverPoint
 D typeinfo for COrHoliday
 D typeinfo for COrnamentProp
 D typeinfo for CP4File
 D typeinfo for CP4File_Dummy
 D typeinfo for CPASAttenuationFilter
 D typeinfo for CPASFilter
 D typeinfo for CPVSFilter
 D typeinfo for CParticleFire
 D typeinfo for CParticleLight
 D typeinfo for CParticlePerformanceMonitor
 D typeinfo for CParticleSystem
 D typeinfo for CParticleSystemQuery
 D typeinfo for CPasstimeBall
 D typeinfo for CPasstimeBallController
 D typeinfo for CPasstimeBallControllerHoming
 D typeinfo for CPasstimeBallControllerPlayerSeek
 D typeinfo for CPasstimeBallSpawn
 D typeinfo for CPasstimeGun
 D typeinfo for CPathCorner
 D typeinfo for CPathCornerCrash
 D typeinfo for CPathKeyFrame
 D typeinfo for CPathTrack
 D typeinfo for CPathfindNearestNodeFilter
 D typeinfo for CPauseGameIssue
 D typeinfo for CPeriodicSpawnPopulator
 D typeinfo for CPhysBallSocket
 D typeinfo for CPhysBox
 D typeinfo for CPhysBoxMultiplayer
 D typeinfo for CPhysConstraint
 D typeinfo for CPhysConstraintEvents
 D typeinfo for CPhysConstraintSystem
 D typeinfo for CPhysConvert
 D typeinfo for CPhysExplosion
 D typeinfo for CPhysFixed
 D typeinfo for CPhysForce
 D typeinfo for CPhysHinge
 D typeinfo for CPhysImpact
 D typeinfo for CPhysLength
 D typeinfo for CPhysMagnet
 D typeinfo for CPhysMotor
 D typeinfo for CPhysObjSaveRestoreOps
 D typeinfo for CPhysPulley
 D typeinfo for CPhysSaveRestoreBlockHandler
 D typeinfo for CPhysSlideConstraint
 D typeinfo for CPhysSphere
 D typeinfo for CPhysThruster
 D typeinfo for CPhysTorque
 D typeinfo for CPhysicsCannister
 D typeinfo for CPhysicsEntitySolver
 D typeinfo for CPhysicsGameTrace
 D typeinfo for CPhysicsHook
 D typeinfo for CPhysicsNPCSolver
 D typeinfo for CPhysicsProp
 D typeinfo for CPhysicsPropMultiplayer
 D typeinfo for CPhysicsPropRespawnable
 D typeinfo for CPhysicsPushedEntities
 D typeinfo for CPhysicsShake
 D typeinfo for CPhysicsSpring
 D typeinfo for CPhysicsWind
 D typeinfo for CPhysicsWire
 D typeinfo for CPlasma
 D typeinfo for CPlatTrigger
 D typeinfo for CPlayerDestructionDispenser
 D typeinfo for CPlayerInfo
 D typeinfo for CPlayerInfoManager
 D typeinfo for CPlayerInventory
 D typeinfo for CPlayerLocalData
 D typeinfo for CPlayerLocalData::NetworkVar_m_PlayerFog
 D typeinfo for CPlayerLocalData::NetworkVar_m_audio
 D typeinfo for CPlayerLocalData::NetworkVar_m_skybox3d
 D typeinfo for CPlayerMove
 D typeinfo for CPlayerResource
 D typeinfo for CPlayerState
 D typeinfo for CPluginBotManager
 D typeinfo for CPluginHelpersCheck
 D typeinfo for CPointAngleSensor
 D typeinfo for CPointAngularVelocitySensor
 D typeinfo for CPointBonusMapsAccessor
 D typeinfo for CPointCamera
 D typeinfo for CPointClientCommand
 D typeinfo for CPointCommentaryNode
 D typeinfo for CPointDevShotCamera
 D typeinfo for CPointEntity
 D typeinfo for CPointGamestatsCounter
 D typeinfo for CPointHurt
 D typeinfo for CPointNavInterface
 D typeinfo for CPointPlayerMoveConstraint
 D typeinfo for CPointPopulatorInterface
 D typeinfo for CPointProximitySensor
 D typeinfo for CPointPush
 D typeinfo for CPointServerCommand
 D typeinfo for CPointSpotlight
 D typeinfo for CPointTeleport
 D typeinfo for CPointTemplate
 D typeinfo for CPointTemplatePrecacher
 D typeinfo for CPointVelocitySensor
 D typeinfo for CPopulationManager
 D typeinfo for CPopulatorInternalSpawnPoint
 D typeinfo for CPoseController
 D typeinfo for CPostFrameNavigationHook
 D typeinfo for CPowerupVolume
 D typeinfo for CPrecacheOtherList
 D typeinfo for CPrecipitation
 D typeinfo for CProjectedDecal
 D typeinfo for CPropData
 D typeinfo for CPropDoorRotating
 D typeinfo for CPropSoccerBall
 D typeinfo for CPropVehicle
 D typeinfo for CPropVehicleDriveable
 D typeinfo for CPushBlockerEnum
 D typeinfo for CPushable
 D typeinfo for CQuestItemTracker
 D typeinfo for CQuestObjectiveDefinition
 D typeinfo for CQuestObjectiveManager
 D typeinfo for CQuestThemeDefinition
 D typeinfo for CRagGib
 D typeinfo for CRagdollAnimatedFriction
 D typeinfo for CRagdollBoogie
 D typeinfo for CRagdollCollisionRules
 D typeinfo for CRagdollConstraint
 D typeinfo for CRagdollLRURetirement
 D typeinfo for CRagdollMagnet
 D typeinfo for CRagdollManager
 D typeinfo for CRagdollProp
 D typeinfo for CRagdollPropAttached
 D typeinfo for CRallyPoint
 D typeinfo for CRandomChoiceSpawner
 D typeinfo for CRandomPlacementPopulator
 D typeinfo for CRecipeComponentMatchingIterator
 D typeinfo for CRecipientFilter
 D typeinfo for CRefCountServiceBase<true, CRefMT>
 D typeinfo for CRefCounted1<CFunctor, CRefCountServiceBase<true, CRefMT> >
 D typeinfo for CRegenerateZone
 D typeinfo for CReliableBroadcastRecipientFilter
 D typeinfo for CReplayCachedContestData
 D typeinfo for CRespawnEntitiesFilter
 D typeinfo for CResponseSystem
 D typeinfo for CRestartGameIssue
 D typeinfo for CRestore
 D typeinfo for CRevertSaved
 D typeinfo for CRobotBehavior
 D typeinfo for CRobotDestructionVaultTrigger
 D typeinfo for CRobotDispenser
 D typeinfo for CRobotEnterPanic
 D typeinfo for CRobotIntention
 D typeinfo for CRobotLeavePanic
 D typeinfo for CRobotLocomotion
 D typeinfo for CRobotMaterialize
 D typeinfo for CRobotPanic
 D typeinfo for CRobotPathCost
 D typeinfo for CRobotPatrol
 D typeinfo for CRobotSpawn
 D typeinfo for CRopeAnchor
 D typeinfo for CRopeKeyframe
 D typeinfo for CRotButton
 D typeinfo for CRotDoor
 D typeinfo for CRotorWashShooter
 D typeinfo for CRuleBrushEntity
 D typeinfo for CRuleEntity
 D typeinfo for CRulePointEntity
 D typeinfo for CSHA1
 D typeinfo for CSOClassPresetClientData
 D typeinfo for CSOEconClaimCode
 D typeinfo for CSOEconGameAccountClient
 D typeinfo for CSOEconGameAccountForGameServers
 D typeinfo for CSOEconItem
 D typeinfo for CSOEconItemAttribute
 D typeinfo for CSOEconItemEquipped
 D typeinfo for CSOEconItemPresetInstance
 D typeinfo for CSOItemCriteria
 D typeinfo for CSOItemCriteriaCondition
 D typeinfo for CSOItemRecipe
 D typeinfo for CSOLobbyInvite
 D typeinfo for CSOPartyInvite
 D typeinfo for CSOTFDuelSummary
 D typeinfo for CSOTFGameServerLobby
 D typeinfo for CSOTFLadderData
 D typeinfo for CSOTFLadderPlayerStats
 D typeinfo for CSOTFMapContribution
 D typeinfo for CSOTFMatchResultPlayerStats
 D typeinfo for CSOTFParty
 D typeinfo for CSOTFPartyInvite
 D typeinfo for CSOTFPartyInvite_PartyMember
 D typeinfo for CSOTFPartyMember
 D typeinfo for CSOTFPlayerInfo
 D typeinfo for CSOTrackerManager
 D typeinfo for CSOWarData
 D typeinfo for CSave
 D typeinfo for CSaveRestoreBlockSet
 D typeinfo for CSceneEntity
 D typeinfo for CSceneFindMarkFilter
 D typeinfo for CSceneFindNearestMarkFilter
 D typeinfo for CSceneListManager
 D typeinfo for CSceneManager
 D typeinfo for CSceneTokenProcessor
 D typeinfo for CSchemaAttributeTypeBase<CAttribute_DynamicRecipeComponent>
 D typeinfo for CSchemaAttributeTypeBase<CAttribute_ItemSlotCriteria>
 D typeinfo for CSchemaAttributeTypeBase<CAttribute_String>
 D typeinfo for CSchemaAttributeTypeBase<CAttribute_WorldItemPlacement>
 D typeinfo for CSchemaAttributeTypeBase<float>
 D typeinfo for CSchemaAttributeTypeBase<unsigned int>
 D typeinfo for CSchemaAttributeTypeBase<unsigned long long>
 D typeinfo for CSchemaAttributeTypeProtobufBase<CAttribute_DynamicRecipeComponent>
 D typeinfo for CSchemaAttributeTypeProtobufBase<CAttribute_ItemSlotCriteria>
 D typeinfo for CSchemaAttributeTypeProtobufBase<CAttribute_String>
 D typeinfo for CSchemaAttributeTypeProtobufBase<CAttribute_WorldItemPlacement>
 D typeinfo for CSchemaAttributeType_Default
 D typeinfo for CSchemaAttributeType_DynamicRecipeComponentDefinedItem
 D typeinfo for CSchemaAttributeType_Float
 D typeinfo for CSchemaAttributeType_ItemSlotCriteria
 D typeinfo for CSchemaAttributeType_String
 D typeinfo for CSchemaAttributeType_UInt64
 D typeinfo for CSchemaAttributeType_WorldItemPlacement
 D typeinfo for CScrambleTeams
 D typeinfo for CScriptedTarget
 D typeinfo for CSearchForCover
 D typeinfo for CSelectDefenseAreaForPoint
 D typeinfo for CSelectPrimaryPatient
 D typeinfo for CSentryGunSpawner
 D typeinfo for CServerBenchmark
 D typeinfo for CServerBenchmarkHook
 D typeinfo for CServerChoreoTools
 D typeinfo for CServerDLLSharedAppSystems
 D typeinfo for CServerGameClients
 D typeinfo for CServerGameDLL
 D typeinfo for CServerGameEnts
 D typeinfo for CServerGameTags
 D typeinfo for CServerNetworkProperty
 D typeinfo for CServerOnlyEntity
 D typeinfo for CServerOnlyPointEntity
 D typeinfo for CServerRagdollTrigger
 D typeinfo for CServerReplayImp
 D typeinfo for CServerTools
 D typeinfo for CShadowControl
 D typeinfo for CShowZone
 D typeinfo for CShower
 D typeinfo for CSimThinkManager
 D typeinfo for CSimpleBot
 D typeinfo for CSimpleBot::CSimpleBotIntention
 D typeinfo for CSimpleBotPathCost
 D typeinfo for CSimpleBotRoam
 D typeinfo for CSimplePhysicsBrush
 D typeinfo for CSimplePhysicsProp
 D typeinfo for CSingleUserRecipientFilter
 D typeinfo for CSingleUserReliableRecipientFilter
 D typeinfo for CSkipKeys
 D typeinfo for CSkyCamera
 D typeinfo for CSlideshowDisplay
 D typeinfo for CSmokeStack
 D typeinfo for CSniperDot
 D typeinfo for CSolidSetDefaults
 D typeinfo for CSoundControllerImp
 D typeinfo for CSoundEmitterSystem
 D typeinfo for CSoundEnt
 D typeinfo for CSoundEnvelopeController
 D typeinfo for CSoundPatchSaveRestoreOps
 D typeinfo for CSoundscapeSystem
 D typeinfo for CSpellPickup
 D typeinfo for CSpotlightEnd
 D typeinfo for CSprayCan
 D typeinfo for CSprite
 D typeinfo for CSpriteOriented
 D typeinfo for CSpriteTrail
 D typeinfo for CSquadSpawner
 D typeinfo for CStdStringSaveRestoreOps
 D typeinfo for CSteamJet
 D typeinfo for CSteamWorksGameStatsUploader
 D typeinfo for CStringTableSaveRestoreOps
 D typeinfo for CStripWeapons
 D typeinfo for CSun
 D typeinfo for CTEArmorRicochet
 D typeinfo for CTEBSPDecal
 D typeinfo for CTEBaseBeam
 D typeinfo for CTEBeamEntPoint
 D typeinfo for CTEBeamEnts
 D typeinfo for CTEBeamFollow
 D typeinfo for CTEBeamLaser
 D typeinfo for CTEBeamPoints
 D typeinfo for CTEBeamRing
 D typeinfo for CTEBeamRingPoint
 D typeinfo for CTEBeamSpline
 D typeinfo for CTEBloodSprite
 D typeinfo for CTEBloodStream
 D typeinfo for CTEBreakModel
 D typeinfo for CTEBubbleTrail
 D typeinfo for CTEBubbles
 D typeinfo for CTEClientProjectile
 D typeinfo for CTEDecal
 D typeinfo for CTEDust
 D typeinfo for CTEDynamicLight
 D typeinfo for CTEEffectDispatch
 D typeinfo for CTEEnergySplash
 D typeinfo for CTEExplosion
 D typeinfo for CTEFireBullets
 D typeinfo for CTEFizz
 D typeinfo for CTEFootprintDecal
 D typeinfo for CTEGaussExplosion
 D typeinfo for CTEGlowSprite
 D typeinfo for CTEImpact
 D typeinfo for CTEKillPlayerAttachments
 D typeinfo for CTELargeFunnel
 D typeinfo for CTEMetalSparks
 D typeinfo for CTEMuzzleFlash
 D typeinfo for CTEParticleSystem
 D typeinfo for CTEPhysicsProp
 D typeinfo for CTEPlayerAnimEvent
 D typeinfo for CTEPlayerDecal
 D typeinfo for CTEProjectedDecal
 D typeinfo for CTEShatterSurface
 D typeinfo for CTEShowLine
 D typeinfo for CTESmoke
 D typeinfo for CTESparks
 D typeinfo for CTESprite
 D typeinfo for CTESpriteSpray
 D typeinfo for CTETFBlood
 D typeinfo for CTETFExplosion
 D typeinfo for CTETFParticleEffect
 D typeinfo for CTEWorldDecal
 D typeinfo for CTFAmmoPack
 D typeinfo for CTFArcherProxy
 D typeinfo for CTFBall_Ornament
 D typeinfo for CTFBaseBoss
 D typeinfo for CTFBaseBossLocomotion
 D typeinfo for CTFBaseProjectile
 D typeinfo for CTFBaseRocket
 D typeinfo for CTFBat
 D typeinfo for CTFBat_Fish
 D typeinfo for CTFBat_Giftwrap
 D typeinfo for CTFBat_Wood
 D typeinfo for CTFBonesaw
 D typeinfo for CTFBot
 D typeinfo for CTFBot::CTFBotIntention
 D typeinfo for CTFBotActionPoint
 D typeinfo for CTFBotAttack
 D typeinfo for CTFBotAttackFlagDefenders
 D typeinfo for CTFBotBody
 D typeinfo for CTFBotCapturePoint
 D typeinfo for CTFBotController
 D typeinfo for CTFBotDead
 D typeinfo for CTFBotDefendPoint
 D typeinfo for CTFBotDefendPointBlockCapture
 D typeinfo for CTFBotDeliverFlag
 D typeinfo for CTFBotDestroyEnemySentry
 D typeinfo for CTFBotEngineerBuild
 D typeinfo for CTFBotEngineerBuildDispenser
 D typeinfo for CTFBotEngineerBuildSentryGun
 D typeinfo for CTFBotEngineerBuildTeleportEntrance
 D typeinfo for CTFBotEngineerBuildTeleportExit
 D typeinfo for CTFBotEngineerBuilding
 D typeinfo for CTFBotEngineerMoveToBuild
 D typeinfo for CTFBotEscortFlagCarrier
 D typeinfo for CTFBotEscortSquadLeader
 D typeinfo for CTFBotFetchFlag
 D typeinfo for CTFBotGenerator
 D typeinfo for CTFBotGetAmmo
 D typeinfo for CTFBotGetHealth
 D typeinfo for CTFBotHint
 D typeinfo for CTFBotHintEngineerNest
 D typeinfo for CTFBotHintSentrygun
 D typeinfo for CTFBotHintTeleporterExit
 D typeinfo for CTFBotLocomotion
 D typeinfo for CTFBotMainAction
 D typeinfo for CTFBotManager
 D typeinfo for CTFBotMedicHeal
 D typeinfo for CTFBotMedicRetreat
 D typeinfo for CTFBotMeleeAttack
 D typeinfo for CTFBotMissionSuicideBomber
 D typeinfo for CTFBotMvMDeployBomb
 D typeinfo for CTFBotMvMEngineerBuildSentryGun
 D typeinfo for CTFBotMvMEngineerBuildTeleportExit
 D typeinfo for CTFBotMvMEngineerIdle
 D typeinfo for CTFBotMvMEngineerTeleportSpawn
 D typeinfo for CTFBotNavEntMoveTo
 D typeinfo for CTFBotNavEntWait
 D typeinfo for CTFBotPathCost
 D typeinfo for CTFBotPayloadBlock
 D typeinfo for CTFBotPayloadGuard
 D typeinfo for CTFBotPayloadPush
 D typeinfo for CTFBotPrepareStickybombTrap
 D typeinfo for CTFBotProxy
 D typeinfo for CTFBotPushToCapturePoint
 D typeinfo for CTFBotRetreatToCover
 D typeinfo for CTFBotRoster
 D typeinfo for CTFBotScenarioMonitor
 D typeinfo for CTFBotSeekAndDestroy
 D typeinfo for CTFBotSniperLurk
 D typeinfo for CTFBotSpawner
 D typeinfo for CTFBotSpyAttack
 D typeinfo for CTFBotSpyHide
 D typeinfo for CTFBotSpyInfiltrate
 D typeinfo for CTFBotSpyLeaveSpawnRoom
 D typeinfo for CTFBotSpyLurk
 D typeinfo for CTFBotSpySap
 D typeinfo for CTFBotSquad
 D typeinfo for CTFBotStickybombSentrygun
 D typeinfo for CTFBotTacticalMonitor
 D typeinfo for CTFBotTaunt
 D typeinfo for CTFBotUberAttackEnemySentry
 D typeinfo for CTFBotUseItem
 D typeinfo for CTFBotUseTeleporter
 D typeinfo for CTFBotVision
 D typeinfo for CTFBotWaitForOutOfPositionSquadMember
 D typeinfo for CTFBottle
 D typeinfo for CTFBuffItem
 D typeinfo for CTFCannon
 D typeinfo for CTFChargedSMG
 D typeinfo for CTFCleaver
 D typeinfo for CTFClub
 D typeinfo for CTFCompoundBow
 D typeinfo for CTFCondition
 D typeinfo for CTFConditionList
 D typeinfo for CTFConditionQuestCondition
 D typeinfo for CTFCondition_CritBoost
 D typeinfo for CTFCraftingRecipeDefinition
 D typeinfo for CTFCrossbow
 D typeinfo for CTFDRGPomson
 D typeinfo for CTFDamageEvent
 D typeinfo for CTFDecapitationMeleeWeaponBase
 D typeinfo for CTFDefendPointMission
 D typeinfo for CTFDefendPointSniperZone
 D typeinfo for CTFDespawn
 D typeinfo for CTFDroppedWeapon
 D typeinfo for CTFDroppedWeapon::NetworkVar_m_Item
 D typeinfo for CTFDuelSummary
 D typeinfo for CTFEventLog
 D typeinfo for CTFFireAxe
 D typeinfo for CTFFists
 D typeinfo for CTFFlagEventTypeRestriction
 D typeinfo for CTFFlameEntity
 D typeinfo for CTFFlameThrower
 D typeinfo for CTFFlareGun
 D typeinfo for CTFFlareGun_Revenge
 D typeinfo for CTFForceRespawn
 D typeinfo for CTFGCServerSystem
 D typeinfo for CTFGSLobby
 D typeinfo for CTFGameModeHistory
 D typeinfo for CTFGameMovement
 D typeinfo for CTFGameRules
 D typeinfo for CTFGameRulesProxy
 D typeinfo for CTFGameStats
 D typeinfo for CTFGenericBomb
 D typeinfo for CTFGenericBombShim
 D typeinfo for CTFGenericStringRestriction
 D typeinfo for CTFGenericSubStringRestriction
 D typeinfo for CTFGlow
 D typeinfo for CTFGotoActionPoint
 D typeinfo for CTFGrapplingHook
 D typeinfo for CTFGrenadeLauncher
 D typeinfo for CTFGrenadePipebombProjectile
 D typeinfo for CTFHLTVDirector
 D typeinfo for CTFHalloweenFortuneTeller
 D typeinfo for CTFHalloweenMinigame
 D typeinfo for CTFHalloweenMinigame_FallingPlatforms
 D typeinfo for CTFHellZap
 D typeinfo for CTFHolidayEntity
 D typeinfo for CTFHudNotify
 D typeinfo for CTFInfoPowerupSpawn
 D typeinfo for CTFIntermission
 D typeinfo for CTFInventoryManager
 D typeinfo for CTFItem
 D typeinfo for CTFItemDefinition
 D typeinfo for CTFItemSchema
 D typeinfo for CTFItemSystem
 D typeinfo for CTFJar
 D typeinfo for CTFJarMilk
 D typeinfo for CTFKatana
 D typeinfo for CTFKnife
 D typeinfo for CTFLaserPointer
 D typeinfo for CTFLobbyMember
 D typeinfo for CTFLunchBox
 D typeinfo for CTFLunchBox_Drink
 D typeinfo for CTFMapContribution
 D typeinfo for CTFMapsWorkshop
 D typeinfo for CTFMechanicalArm
 D typeinfo for CTFMedigunShield
 D typeinfo for CTFMerasmusTrickOrTreatProp
 D typeinfo for CTFMiniGame
 D typeinfo for CTFMinigameLogic
 D typeinfo for CTFMinigun
 D typeinfo for CTFNavArea
 D typeinfo for CTFNavMesh
 D typeinfo for CTFObjectiveResource
 D typeinfo for CTFPEPBrawlerBlaster
 D typeinfo for CTFParachute
 D typeinfo for CTFParachute_Primary
 D typeinfo for CTFParachute_Secondary
 D typeinfo for CTFParticleCannon
 D typeinfo for CTFParty
 D typeinfo for CTFPasstimeLogic
 D typeinfo for CTFPhysicsPushEntities
 D typeinfo for CTFPipebombLauncher
 D typeinfo for CTFPistol
 D typeinfo for CTFPistol_Scout
 D typeinfo for CTFPistol_ScoutPrimary
 D typeinfo for CTFPistol_ScoutSecondary
 D typeinfo for CTFPlayer
 D typeinfo for CTFPlayer::NetworkVar_m_AttributeManager
 D typeinfo for CTFPlayer::NetworkVar_m_Shared
 D typeinfo for CTFPlayerAnimState
 D typeinfo for CTFPlayerClass
 D typeinfo for CTFPlayerClassDataMgr
 D typeinfo for CTFPlayerClassShared
 D typeinfo for CTFPlayerDestructionLogic
 D typeinfo for CTFPlayerInfo
 D typeinfo for CTFPlayerInventory
 D typeinfo for CTFPlayerMove
 D typeinfo for CTFPlayerResource
 D typeinfo for CTFPlayerShared
 D typeinfo for CTFPlayerShared::NetworkVar_m_ConditionList
 D typeinfo for CTFPlayerShared::NetworkVar_m_RoundScoreData
 D typeinfo for CTFPlayerShared::NetworkVar_m_ScoreData
 D typeinfo for CTFPlayertPathCost
 D typeinfo for CTFPointWeaponMimic
 D typeinfo for CTFPowerup
 D typeinfo for CTFPowerupBottle
 D typeinfo for CTFProjectile_Arrow
 D typeinfo for CTFProjectile_Cleaver
 D typeinfo for CTFProjectile_EnergyBall
 D typeinfo for CTFProjectile_EnergyRing
 D typeinfo for CTFProjectile_Flare
 D typeinfo for CTFProjectile_GrapplingHook
 D typeinfo for CTFProjectile_HealingBolt
 D typeinfo for CTFProjectile_Jar
 D typeinfo for CTFProjectile_JarMilk
 D typeinfo for CTFProjectile_Rocket
 D typeinfo for CTFProjectile_SentryRocket
 D typeinfo for CTFProjectile_SpellBats
 D typeinfo for CTFProjectile_SpellFireball
 D typeinfo for CTFProjectile_SpellKartBats
 D typeinfo for CTFProjectile_SpellKartOrb
 D typeinfo for CTFProjectile_SpellLightningOrb
 D typeinfo for CTFProjectile_SpellMeteorShower
 D typeinfo for CTFProjectile_SpellMirv
 D typeinfo for CTFProjectile_SpellPumpkin
 D typeinfo for CTFProjectile_SpellSpawnBoss
 D typeinfo for CTFProjectile_SpellSpawnHorde
 D typeinfo for CTFProjectile_SpellSpawnZombie
 D typeinfo for CTFProjectile_SpellTransposeTeleport
 D typeinfo for CTFProjectile_Syringe
 D typeinfo for CTFProjectile_Throwable
 D typeinfo for CTFProjectile_ThrowableBreadMonster
 D typeinfo for CTFProjectile_ThrowableBrick
 D typeinfo for CTFProjectile_ThrowableRepel
 D typeinfo for CTFPumpkinBomb
 D typeinfo for CTFPumpkinBombShim
 D typeinfo for CTFQuestAndOperatorRestriction
 D typeinfo for CTFQuestBasePlayerRestriction
 D typeinfo for CTFQuestCondition
 D typeinfo for CTFQuestCountEvaluator
 D typeinfo for CTFQuestCustomDamageRestriction
 D typeinfo for CTFQuestEvaluator
 D typeinfo for CTFQuestEventListener
 D typeinfo for CTFQuestGameTypeRestriction
 D typeinfo for CTFQuestLoadoutPositionRestriction
 D typeinfo for CTFQuestMapRestriction
 D typeinfo for CTFQuestNotOperatorRestriction
 D typeinfo for CTFQuestObjectiveConditionsDefinition
 D typeinfo for CTFQuestObjectiveDefinition
 D typeinfo for CTFQuestOperatorRestriction
 D typeinfo for CTFQuestOrOperatorRestriction
 D typeinfo for CTFQuestPlayerAliveRestriction
 D typeinfo for CTFQuestPlayerClassRestriction
 D typeinfo for CTFQuestPlayerConditionRestriction
 D typeinfo for CTFQuestPlayerDisguiseRestriction
 D typeinfo for CTFQuestPlayerDistanceRestriction
 D typeinfo for CTFQuestPlayerIsOwnerRestriction
 D typeinfo for CTFQuestPlayerJumpingRestriction
 D typeinfo for CTFQuestPlayerObjectRestriction
 D typeinfo for CTFQuestRestriction
 D typeinfo for CTFQuestScorerRestriction
 D typeinfo for CTFQuestTeamRestriction
 D typeinfo for CTFQuestWeaponTypeRestriction
 D typeinfo for CTFRagdoll
 D typeinfo for CTFRaygun
 D typeinfo for CTFReviveMarker
 D typeinfo for CTFRevolver
 D typeinfo for CTFRobotArm
 D typeinfo for CTFRobotDestructionLogic
 D typeinfo for CTFRobotDestruction_Robot
 D typeinfo for CTFRobotDestruction_RobotGroup
 D typeinfo for CTFRobotDestruction_RobotSpawn
 D typeinfo for CTFRocketLauncher
 D typeinfo for CTFRocketLauncher_AirStrike
 D typeinfo for CTFRocketLauncher_DirectHit
 D typeinfo for CTFRune
 D typeinfo for CTFRuneTemp
 D typeinfo for CTFRuneTempCrit
 D typeinfo for CTFRuneTempUber
 D typeinfo for CTFSMG
 D typeinfo for CTFScatterGun
 D typeinfo for CTFServerBenchmark
 D typeinfo for CTFShotgun
 D typeinfo for CTFShotgunBuildingRescue
 D typeinfo for CTFShotgun_HWG
 D typeinfo for CTFShotgun_Pyro
 D typeinfo for CTFShotgun_Revenge
 D typeinfo for CTFShotgun_Soldier
 D typeinfo for CTFShovel
 D typeinfo for CTFSniperRifle
 D typeinfo for CTFSniperRifleClassic
 D typeinfo for CTFSniperRifleDecap
 D typeinfo for CTFSodaPopper
 D typeinfo for CTFSpawnTemplate
 D typeinfo for CTFSpawner
 D typeinfo for CTFSpellBook
 D typeinfo for CTFSpell_MeteorShowerSpawner
 D typeinfo for CTFStickBomb
 D typeinfo for CTFStunBall
 D typeinfo for CTFStyleInfo
 D typeinfo for CTFSword
 D typeinfo for CTFSyringeGun
 D typeinfo for CTFTacticalMissionManager
 D typeinfo for CTFTankBoss
 D typeinfo for CTFTankBossBody
 D typeinfo for CTFTankDestruction
 D typeinfo for CTFTargetDummy
 D typeinfo for CTFTauntProp
 D typeinfo for CTFTeam
 D typeinfo for CTFTeamSpawn
 D typeinfo for CTFTeleportLocation
 D typeinfo for CTFThrowable
 D typeinfo for CTFTrainingAttackSentryActionPoint
 D typeinfo for CTFTrainingDynamicProp
 D typeinfo for CTFViewModel
 D typeinfo for CTFWarTracker
 D typeinfo for CTFWarTrackerManager
 D typeinfo for CTFWeaponBase
 D typeinfo for CTFWeaponBaseGrenadeProj
 D typeinfo for CTFWeaponBaseGun
 D typeinfo for CTFWeaponBaseMelee
 D typeinfo for CTFWeaponBaseMerasmusGrenade
 D typeinfo for CTFWeaponBuilder
 D typeinfo for CTFWeaponClassRestriction
 D typeinfo for CTFWeaponInfo
 D typeinfo for CTFWeaponInvis
 D typeinfo for CTFWeaponPDA
 D typeinfo for CTFWeaponPDAExpansion_Dispenser
 D typeinfo for CTFWeaponPDAExpansion_Teleporter
 D typeinfo for CTFWeaponPDA_Engineer_Build
 D typeinfo for CTFWeaponPDA_Engineer_Destroy
 D typeinfo for CTFWeaponPDA_Spy
 D typeinfo for CTFWeaponSapper
 D typeinfo for CTFWearable
 D typeinfo for CTFWearableDemoShield
 D typeinfo for CTFWearableLevelableItem
 D typeinfo for CTFWearableRobotArm
 D typeinfo for CTFWearableVM
 D typeinfo for CTFWrench
 D typeinfo for CTacticalMission
 D typeinfo for CTacticalMissionManager
 D typeinfo for CTacticalMissionManager::IForEachMission
 D typeinfo for CTacticalMissionZone
 D typeinfo for CTankSpawner
 D typeinfo for CTankTargetChange
 D typeinfo for CTankTrainAI
 D typeinfo for CTargetCDAudioRep
 D typeinfo for CTargetChangeGravity
 D typeinfo for CTargetOnlyFilter
 D typeinfo for CTeam
 D typeinfo for CTeamAutoBalanceIssue
 D typeinfo for CTeamControlPoint
 D typeinfo for CTeamControlPointMaster
 D typeinfo for CTeamControlPointRound
 D typeinfo for CTeamRecipientFilter
 D typeinfo for CTeamRoundTimer
 D typeinfo for CTeamTrainWatcher
 D typeinfo for CTeamplayRoundBasedRules
 D typeinfo for CTeamplayRoundBasedRulesProxy
 D typeinfo for CTeamplayRoundWin
 D typeinfo for CTeamplayRules
 D typeinfo for CTeleportVortex
 D typeinfo for CTempEntTester
 D typeinfo for CTempEntsSystem
 D typeinfo for CTemplateNPCMaker
 D typeinfo for CTemplate_SaveRestoreBlockHandler
 D typeinfo for CTemplatesHook
 D typeinfo for CTesla
 D typeinfo for CTestAreaAgainstThreats
 D typeinfo for CTestEffect
 D typeinfo for CTestTraceline
 D typeinfo for CTest_ProxyToggle_Networkable
 D typeinfo for CTextureToggle
 D typeinfo for CThinkContextsSaveDataOps
 D typeinfo for CThrustController
 D typeinfo for CTimerEntity
 D typeinfo for CToolFrameworkServer
 D typeinfo for CTraceFilter
 D typeinfo for CTraceFilterAgainstEntityList
 D typeinfo for CTraceFilterChain
 D typeinfo for CTraceFilterCollisionArrows
 D typeinfo for CTraceFilterCollisionGrenades
 D typeinfo for CTraceFilterDeflection
 D typeinfo for CTraceFilterDoor
 D typeinfo for CTraceFilterEntitiesOnly
 D typeinfo for CTraceFilterEntity
 D typeinfo for CTraceFilterEntityIgnoreOther
 D typeinfo for CTraceFilterGroundEntities
 D typeinfo for CTraceFilterIgnoreFriendlyCombatItems
 D typeinfo for CTraceFilterIgnoreObjects
 D typeinfo for CTraceFilterIgnorePlayers
 D typeinfo for CTraceFilterIgnoreTeammates
 D typeinfo for CTraceFilterIgnoreTeammatesAndTeamObjects
 D typeinfo for CTraceFilterLOS
 D typeinfo for CTraceFilterMelee
 D typeinfo for CTraceFilterNav
 D typeinfo for CTraceFilterNoCombatCharacters
 D typeinfo for CTraceFilterNoNPCsOrPlayer
 D typeinfo for CTraceFilterObject
 D typeinfo for CTraceFilterOnlyNPCsAndPlayer
 D typeinfo for CTraceFilterPlayersNPCs
 D typeinfo for CTraceFilterPlayersNPCsPhysicsProps
 D typeinfo for CTraceFilterPushFinal
 D typeinfo for CTraceFilterPushMove
 D typeinfo for CTraceFilterSimple
 D typeinfo for CTraceFilterSimpleClassnameList
 D typeinfo for CTraceFilterSimpleList
 D typeinfo for CTraceFilterSkipClassname
 D typeinfo for CTraceFilterSkipNPCs
 D typeinfo for CTraceFilterSkipTwoEntities
 D typeinfo for CTraceFilterWalkableEntities
 D typeinfo for CTraceListData
 D typeinfo for CTracePassFilter
 D typeinfo for CTrainingAnnotation
 D typeinfo for CTrainingModeLogic
 D typeinfo for CTriggerAddOrRemoveTFPlayerAttributes
 D typeinfo for CTriggerAddTFPlayerCondition
 D typeinfo for CTriggerApplyImpulse
 D typeinfo for CTriggerAreaCapture
 D typeinfo for CTriggerAreaCaptureShim
 D typeinfo for CTriggerBotTag
 D typeinfo for CTriggerBrush
 D typeinfo for CTriggerCDAudio
 D typeinfo for CTriggerCamera
 D typeinfo for CTriggerCatapult
 D typeinfo for CTriggerGravity
 D typeinfo for CTriggerHurt
 D typeinfo for CTriggerHurtShim
 D typeinfo for CTriggerIgnite
 D typeinfo for CTriggerIgniteArrows
 D typeinfo for CTriggerImpact
 D typeinfo for CTriggerLook
 D typeinfo for CTriggerMultiple
 D typeinfo for CTriggerOnce
 D typeinfo for CTriggerParticle
 D typeinfo for CTriggerPasstimeBall
 D typeinfo for CTriggerPlayerMovement
 D typeinfo for CTriggerPlayerRespawnOverride
 D typeinfo for CTriggerProximity
 D typeinfo for CTriggerPush
 D typeinfo for CTriggerRemove
 D typeinfo for CTriggerRemoveTFPlayerCondition
 D typeinfo for CTriggerSave
 D typeinfo for CTriggerSoundscape
 D typeinfo for CTriggerStun
 D typeinfo for CTriggerTeleport
 D typeinfo for CTriggerTeleportRelative
 D typeinfo for CTriggerTimerDoor
 D typeinfo for CTriggerToggleSave
 D typeinfo for CTriggerTraceEnum
 D typeinfo for CTriggerVPhysicsMotion
 D typeinfo for CTriggerVolume
 D typeinfo for CTriggerWind
 D typeinfo for CUpgrades
 D typeinfo for CUsePushFilter
 D typeinfo for CUsefulHealTargetFilter
 D typeinfo for CUserCmd
 D typeinfo for CUtlCStringConversion
 D typeinfo for CUtlCachedFileData<CModelSoundsCache>
 D typeinfo for CUtlCharConversion
 D typeinfo for CUtlMapDataOps<CUtlMap<string_t, CSimpleSimTimer, char>, 2, 10>
 D typeinfo for CUtlNoEscConversion
 D typeinfo for CUtlSymbolDataOps
 D typeinfo for CUtlVector<MvMTourMission_t, CUtlMemory<MvMTourMission_t, int> >
 D typeinfo for CUtlVector<int, CUtlMemory<int, int> >
 D typeinfo for CUtlVector<static_attrib_t, CUtlMemory<static_attrib_t, int> >
 D typeinfo for CUtlVectorDataOps<CAI_InterestTarget, 10>
 D typeinfo for CUtlVectorDataOps<CUtlVector<AISquadEnemyInfo_t, CUtlMemory<AISquadEnemyInfo_t, int> >, 10>
 D typeinfo for CUtlVectorDataOps<CUtlVector<AI_Waypoint_t, CUtlMemory<AI_Waypoint_t, int> >, 10>
 D typeinfo for CUtlVectorDataOps<CUtlVector<CAI_ScriptConditionsElement, CUtlMemory<CAI_ScriptConditionsElement, int> >, 10>
 D typeinfo for CUtlVectorDataOps<CUtlVector<CAnimationLayer, CUtlMemory<CAnimationLayer, int> >, 10>
 D typeinfo for CUtlVectorDataOps<CUtlVector<CBaseEntity*, CUtlMemory<CBaseEntity*, int> >, 12>
 D typeinfo for CUtlVectorDataOps<CUtlVector<CHandle<CAI_BaseNPC>, CUtlMemory<CHandle<CAI_BaseNPC>, int> >, 13>
 D typeinfo for CUtlVectorDataOps<CUtlVector<CHandle<CBaseEntity>, CUtlMemory<CHandle<CBaseEntity>, int> >, 13>
 D typeinfo for CUtlVectorDataOps<CUtlVector<CHandle<CBaseFlex>, CUtlMemory<CHandle<CBaseFlex>, int> >, 13>
 D typeinfo for CUtlVectorDataOps<CUtlVector<CHandle<CBasePlayer>, CUtlMemory<CHandle<CBasePlayer>, int> >, 13>
 D typeinfo for CUtlVectorDataOps<CUtlVector<CHandle<CFish>, CUtlMemory<CHandle<CFish>, int> >, 13>
 D typeinfo for CUtlVectorDataOps<CUtlVector<CHandle<CSceneEntity>, CUtlMemory<CHandle<CSceneEntity>, int> >, 13>
 D typeinfo for CUtlVectorDataOps<CUtlVector<CHandle<CSceneListManager>, CUtlMemory<CHandle<CSceneListManager>, int> >, 13>
 D typeinfo for CUtlVectorDataOps<CUtlVector<CHandle<CVGuiScreen>, CUtlMemory<CHandle<CVGuiScreen>, int> >, 13>
 D typeinfo for CUtlVectorDataOps<CUtlVector<CPassengerInfo, CUtlMemory<CPassengerInfo, int> >, 10>
 D typeinfo for CUtlVectorDataOps<CUtlVector<Relationship_t, CUtlMemory<Relationship_t, int> >, 10>
 D typeinfo for CUtlVectorDataOps<CUtlVector<ResponseContext_t, CUtlMemory<ResponseContext_t, int> >, 10>
 D typeinfo for CUtlVectorDataOps<CUtlVector<SaveRestoreBlockHeader_t, CUtlMemory<SaveRestoreBlockHeader_t, int> >, 10>
 D typeinfo for CUtlVectorDataOps<CUtlVector<ScriptedNPCInteraction_t, CUtlMemory<ScriptedNPCInteraction_t, int> >, 10>
 D typeinfo for CUtlVectorDataOps<CUtlVector<UnreachableEnt_t, CUtlMemory<UnreachableEnt_t, int> >, 10>
 D typeinfo for CUtlVectorDataOps<CUtlVector<globalentity_t, CUtlMemory<globalentity_t, int> >, 10>
 D typeinfo for CUtlVectorDataOps<CUtlVector<int, CUtlMemory<int, int> >, 5>
 D typeinfo for CUtlVectorDataOps<CUtlVector<magnetted_objects_t, CUtlMemory<magnetted_objects_t, int> >, 10>
 D typeinfo for CUtlVectorDataOps<CUtlVector<modifiedconvars_t, CUtlMemory<modifiedconvars_t, int> >, 10>
 D typeinfo for CUtlVectorDataOps<CUtlVector<physfollower_t, CUtlMemory<physfollower_t, int> >, 10>
 D typeinfo for CUtlVectorDataOps<CUtlVector<template_t, CUtlMemory<template_t, int> >, 10>
 D typeinfo for CUtlVectorDataOps<CUtlVector<thinkfunc_t, CUtlMemory<thinkfunc_t, int> >, 10>
 D typeinfo for CUtlVectorDataOps<CUtlVector<vehicle_crashsound_t, CUtlMemory<vehicle_crashsound_t, int> >, 10>
 D typeinfo for CUtlVectorDataOps<CUtlVector<vehicle_gear_t, CUtlMemory<vehicle_gear_t, int> >, 10>
 D typeinfo for CVGuiScreen
 D typeinfo for CVarBitVecSaveRestoreOps<CBitVec<32> >
 D typeinfo for CVariantSaveDataOps
 D typeinfo for CVehicleSoundsParser
 D typeinfo for CVoiceGameMgr
 D typeinfo for CVoiceGameMgrHelper
 D typeinfo for CVoteController
 D typeinfo for CVoteControllerSystem
 D typeinfo for CWC_UpdateIgnoreList
 D typeinfo for CWarData
 D typeinfo for CWaterBullet
 D typeinfo for CWaterLODControl
 D typeinfo for CWave
 D typeinfo for CWaveSpawnPopulator
 D typeinfo for CWeaponIFMBase
 D typeinfo for CWeaponIFMBaseCamera
 D typeinfo for CWeaponIFMSteadyCam
 D typeinfo for CWeaponLOSFilter
 D typeinfo for CWeaponList
 D typeinfo for CWeaponMedigun
 D typeinfo for CWeightButton
 D typeinfo for CWheelOfDoom
 D typeinfo for CWheelOfDoom::WOD_BaseEffect
 D typeinfo for CWheelOfDoom::WOD_BigHeadEffect
 D typeinfo for CWheelOfDoom::WOD_Burn
 D typeinfo for CWheelOfDoom::WOD_CritsEffect
 D typeinfo for CWheelOfDoom::WOD_Dance
 D typeinfo for CWheelOfDoom::WOD_Ghosts
 D typeinfo for CWheelOfDoom::WOD_LowGravityEffect
 D typeinfo for CWheelOfDoom::WOD_Pee
 D typeinfo for CWheelOfDoom::WOD_SmallHeadEffect
 D typeinfo for CWheelOfDoom::WOD_SuperJumpEffect
 D typeinfo for CWheelOfDoom::WOD_SuperSpeedEffect
 D typeinfo for CWheelOfDoom::WOD_UberEffect
 D typeinfo for CWheelOfDoomSpiral
 D typeinfo for CWindowPane
 D typeinfo for CWorkerThread
 D typeinfo for CWorkshop_GetContributors_Request
 D typeinfo for CWorkshop_GetContributors_Response
 D typeinfo for CWorkshop_PopulateItemDescriptions_Request
 D typeinfo for CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock
 D typeinfo for CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription
 D typeinfo for CWorkshop_SetItemPaymentRules_Request
 D typeinfo for CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule
 D typeinfo for CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule
 D typeinfo for CWorkshop_SetItemPaymentRules_Response
 D typeinfo for CWorld
 D typeinfo for CWorldItem
 D typeinfo for CZombie
 D typeinfo for CZombieAttack
 D typeinfo for CZombieBehavior
 D typeinfo for CZombieIntention
 D typeinfo for CZombieLocomotion
 D typeinfo for CZombiePathCost
 D typeinfo for CZombieSpawn
 D typeinfo for CZombieSpawner
 D typeinfo for CZombieSpecialAttack
 D typeinfo for ChasePath
 D typeinfo for ConCommand
 D typeinfo for ConCommandBase
 D typeinfo for ConVar
 D typeinfo for CountdownTimer
 D typeinfo for CryptoPP::ASN1CryptoMaterial<CryptoPP::PublicKey>
 D typeinfo for CryptoPP::ASN1Object
 D typeinfo for CryptoPP::AbstractEuclideanDomain<CryptoPP::Integer>
 D typeinfo for CryptoPP::AbstractGroup<CryptoPP::Integer>
 D typeinfo for CryptoPP::AbstractRing<CryptoPP::Integer>
 D typeinfo for CryptoPP::AbstractRing<CryptoPP::Integer>::MultiplicativeGroupT
 D typeinfo for CryptoPP::Algorithm
 D typeinfo for CryptoPP::AlgorithmImpl<CryptoPP::IteratedHash<unsigned int, CryptoPP::EnumToType<CryptoPP::ByteOrder, 1>, 64u, CryptoPP::HashTransformation>, CryptoPP::SHA256>
 D typeinfo for CryptoPP::AlgorithmImpl<CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher, CryptoPP::Rijndael_Info>, CryptoPP::TwoBases<CryptoPP::BlockCipher, CryptoPP::Rijndael_Info> >, CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher, CryptoPP::Rijndael_Info>, CryptoPP::TwoBases<CryptoPP::BlockCipher, CryptoPP::Rijndael_Info> > >
 D typeinfo for CryptoPP::AlgorithmImpl<CryptoPP::TF_VerifierBase, CryptoPP::TF_SS<CryptoPP::PKCS1v15, CryptoPP::SHA256, CryptoPP::RSA, int> >
 D typeinfo for CryptoPP::AlgorithmParameters
 D typeinfo for CryptoPP::AlgorithmParametersBase
 D typeinfo for CryptoPP::AlgorithmParametersBase::ParameterNotUsed
 D typeinfo for CryptoPP::AlgorithmParametersTemplate<CryptoPP::ConstByteArrayParameter>
 D typeinfo for CryptoPP::ArraySink
 D typeinfo for CryptoPP::AsymmetricAlgorithm
 D typeinfo for CryptoPP::AutoSeededX917RNG<CryptoPP::Rijndael>
 D typeinfo for CryptoPP::AutoSignaling<CryptoPP::BufferedTransformation>
 D typeinfo for CryptoPP::AutoSignaling<CryptoPP::InputRejecting<CryptoPP::BufferedTransformation> >
 D typeinfo for CryptoPP::BERDecodeErr
 D typeinfo for CryptoPP::BERGeneralDecoder
 D typeinfo for CryptoPP::BERSequenceDecoder
 D typeinfo for CryptoPP::BitBucket
 D typeinfo for CryptoPP::BlockCipher
 D typeinfo for CryptoPP::BlockCipherFinal<(CryptoPP::CipherDir)0, CryptoPP::Rijndael::Enc>
 D typeinfo for CryptoPP::BlockCipherImpl<CryptoPP::Rijndael_Info, CryptoPP::BlockCipher>
 D typeinfo for CryptoPP::BlockPaddingSchemeDef::BlockPaddingScheme
 D typeinfo for CryptoPP::BlockTransformation
 D typeinfo for CryptoPP::BlockingRng
 D typeinfo for CryptoPP::BufferedTransformation
 D typeinfo for CryptoPP::BufferedTransformation::NoChannelSupport
 D typeinfo for CryptoPP::Bufferless<CryptoPP::BufferedTransformation>
 D typeinfo for CryptoPP::Bufferless<CryptoPP::Sink>
 D typeinfo for CryptoPP::ByteArrayParameter
 D typeinfo for CryptoPP::ByteQueue
 D typeinfo for CryptoPP::ByteQueue::Walker
 D typeinfo for CryptoPP::ClassNullRNG
 D typeinfo for CryptoPP::Clonable
 D typeinfo for CryptoPP::ClonableImpl<CryptoPP::BlockCipherFinal<(CryptoPP::CipherDir)0, CryptoPP::Rijndael::Enc>, CryptoPP::Rijndael::Enc>
 D typeinfo for CryptoPP::ClonableImpl<CryptoPP::SHA256, CryptoPP::AlgorithmImpl<CryptoPP::IteratedHash<unsigned int, CryptoPP::EnumToType<CryptoPP::ByteOrder, 1>, 64u, CryptoPP::HashTransformation>, CryptoPP::SHA256> >
 D typeinfo for CryptoPP::ConstByteArrayParameter
 D typeinfo for CryptoPP::CryptoMaterial
 D typeinfo for CryptoPP::CryptoMaterial::InvalidMaterial
 D typeinfo for CryptoPP::DERGeneralEncoder
 D typeinfo for CryptoPP::DERSequenceEncoder
 D typeinfo for CryptoPP::DL_BadElement
 D typeinfo for CryptoPP::EuclideanDomainOf<CryptoPP::Integer>
 D typeinfo for CryptoPP::Exception
 D typeinfo for CryptoPP::Filter
 D typeinfo for CryptoPP::FixedBlockSize<16u>
 D typeinfo for CryptoPP::HashInputTooLong
 D typeinfo for CryptoPP::HashTransformation
 D typeinfo for CryptoPP::InitializeInteger
 D typeinfo for CryptoPP::InputRejecting<CryptoPP::BufferedTransformation>
 D typeinfo for CryptoPP::InputRejecting<CryptoPP::BufferedTransformation>::InputRejected
 D typeinfo for CryptoPP::InputRejecting<CryptoPP::Filter>
 D typeinfo for CryptoPP::InputRejecting<CryptoPP::Filter>::InputRejected
 D typeinfo for CryptoPP::Integer
 D typeinfo for CryptoPP::Integer::DivideByZero
 D typeinfo for CryptoPP::Integer::RandomNumberNotFound
 D typeinfo for CryptoPP::Integer::RandomNumberType
 D typeinfo for CryptoPP::InvalidArgument
 D typeinfo for CryptoPP::InvalidDataFormat
 D typeinfo for CryptoPP::InvalidKeyLength
 D typeinfo for CryptoPP::IteratedHash<unsigned int, CryptoPP::EnumToType<CryptoPP::ByteOrder, 1>, 64u, CryptoPP::HashTransformation>
 D typeinfo for CryptoPP::IteratedHashBase<unsigned int, CryptoPP::HashTransformation>
 D typeinfo for CryptoPP::IteratedHashWithStaticTransform<unsigned int, CryptoPP::EnumToType<CryptoPP::ByteOrder, 1>, 64u, 32u, CryptoPP::SHA256, 32u, true>
 D typeinfo for CryptoPP::MessageQueue
 D typeinfo for CryptoPP::ModularArithmetic
 D typeinfo for CryptoPP::MontgomeryRepresentation
 D typeinfo for CryptoPP::NameValuePairs
 D typeinfo for CryptoPP::NameValuePairs::ValueTypeMismatch
 D typeinfo for CryptoPP::NonblockingRng
 D typeinfo for CryptoPP::NotCopyable
 D typeinfo for CryptoPP::NotImplemented
 D typeinfo for CryptoPP::NullNameValuePairs
 D typeinfo for CryptoPP::OS_RNG_Err
 D typeinfo for CryptoPP::ObjectHolder<CryptoPP::SHA256>
 D typeinfo for CryptoPP::PKCS1v15_SignatureMessageEncodingMethod
 D typeinfo for CryptoPP::PK_DeterministicSignatureMessageEncodingMethod
 D typeinfo for CryptoPP::PK_FinalTemplate<CryptoPP::TF_VerifierImpl<CryptoPP::TF_SignatureSchemeOptions<CryptoPP::TF_SS<CryptoPP::PKCS1v15, CryptoPP::SHA256, CryptoPP::RSA, int>, CryptoPP::RSA, CryptoPP::PKCS1v15_SignatureMessageEncodingMethod, CryptoPP::SHA256> > >
 D typeinfo for CryptoPP::PK_MessageAccumulator
 D typeinfo for CryptoPP::PK_MessageAccumulatorBase
 D typeinfo for CryptoPP::PK_MessageAccumulatorImpl<CryptoPP::SHA256>
 D typeinfo for CryptoPP::PK_SignatureMessageEncodingMethod
 D typeinfo for CryptoPP::PK_SignatureScheme
 D typeinfo for CryptoPP::PK_SignatureScheme::InvalidKeyLength
 D typeinfo for CryptoPP::PK_SignatureScheme::KeyTooShort
 D typeinfo for CryptoPP::PK_Verifier
 D typeinfo for CryptoPP::PublicKey
 D typeinfo for CryptoPP::PublicKeyAlgorithm
 D typeinfo for CryptoPP::RSAFunction
 D typeinfo for CryptoPP::RSAFunction*
 D typeinfo for CryptoPP::RandomNumberGenerator
 D typeinfo for CryptoPP::RandomizedTrapdoorFunction
 D typeinfo for CryptoPP::Rijndael::Base
 D typeinfo for CryptoPP::Rijndael::Enc
 D typeinfo for CryptoPP::Rijndael_Info
 D typeinfo for CryptoPP::SHA256
 D typeinfo for CryptoPP::SelfTestFailure
 D typeinfo for CryptoPP::SimpleKeyingInterface
 D typeinfo for CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher, CryptoPP::Rijndael_Info>, CryptoPP::TwoBases<CryptoPP::BlockCipher, CryptoPP::Rijndael_Info> >
 D typeinfo for CryptoPP::Sink
 D typeinfo for CryptoPP::Source
 D typeinfo for CryptoPP::SourceTemplate<CryptoPP::StringStore>
 D typeinfo for CryptoPP::Store
 D typeinfo for CryptoPP::StringSource
 D typeinfo for CryptoPP::StringStore
 D typeinfo for CryptoPP::TF_Base<CryptoPP::TrapdoorFunction, CryptoPP::PK_SignatureMessageEncodingMethod>
 D typeinfo for CryptoPP::TF_ObjectImpl<CryptoPP::TF_VerifierBase, CryptoPP::TF_SignatureSchemeOptions<CryptoPP::TF_SS<CryptoPP::PKCS1v15, CryptoPP::SHA256, CryptoPP::RSA, int>, CryptoPP::RSA, CryptoPP::PKCS1v15_SignatureMessageEncodingMethod, CryptoPP::SHA256>, CryptoPP::RSAFunction>
 D typeinfo for CryptoPP::TF_ObjectImplBase<CryptoPP::TF_VerifierBase, CryptoPP::TF_SignatureSchemeOptions<CryptoPP::TF_SS<CryptoPP::PKCS1v15, CryptoPP::SHA256, CryptoPP::RSA, int>, CryptoPP::RSA, CryptoPP::PKCS1v15_SignatureMessageEncodingMethod, CryptoPP::SHA256>, CryptoPP::RSAFunction>
 D typeinfo for CryptoPP::TF_SignatureSchemeBase<CryptoPP::PK_Verifier, CryptoPP::TF_Base<CryptoPP::TrapdoorFunction, CryptoPP::PK_SignatureMessageEncodingMethod> >
 D typeinfo for CryptoPP::TF_VerifierBase
 D typeinfo for CryptoPP::TF_VerifierImpl<CryptoPP::TF_SignatureSchemeOptions<CryptoPP::TF_SS<CryptoPP::PKCS1v15, CryptoPP::SHA256, CryptoPP::RSA, int>, CryptoPP::RSA, CryptoPP::PKCS1v15_SignatureMessageEncodingMethod, CryptoPP::SHA256> >
 D typeinfo for CryptoPP::TrapdoorFunction
 D typeinfo for CryptoPP::TrapdoorFunctionBounds
 D typeinfo for CryptoPP::TwoBases<CryptoPP::BlockCipher, CryptoPP::Rijndael_Info>
 D typeinfo for CryptoPP::VariableKeyLength<16u, 16u, 32u, 8u, 4u, 0u>
 D typeinfo for CryptoPP::Waitable
 D typeinfo for CryptoPP::X509PublicKey
 D typeinfo for CryptoPP::X917RNG
 D typeinfo for DelayedSchemaData_GCDirectData
 D typeinfo for DelayedSchemaData_HTTPResponseData
 D typeinfo for DustTrail
 D typeinfo for EntityParticleTrailInfo_t
 D typeinfo for FilePlayerClassInfo_t
 D typeinfo for FileWeaponInfo_t
 D typeinfo for FilterDamageType
 D typeinfo for FilterDamagedByWeaponInSlot
 D typeinfo for FilterTeam
 D typeinfo for FindSafeSentryApproachAreaScan
 D typeinfo for GCSDK::CGCClient
 D typeinfo for GCSDK::CGCClientJob
 D typeinfo for GCSDK::CGCClientSharedObjectCache
 D typeinfo for GCSDK::CGCClientSharedObjectTypeCache
 D typeinfo for GCSDK::CGCMsg<MsgGCVerifyCacheSubscription_t>
 D typeinfo for GCSDK::CGCMsg<MsgGC_Duel_Results_t>
 D typeinfo for GCSDK::CGCSOCacheSubscribedJob
 D typeinfo for GCSDK::CGCSOCacheSubscriptionCheck
 D typeinfo for GCSDK::CGCSOCacheUnsubscribedJob
 D typeinfo for GCSDK::CGCSOCreateJob
 D typeinfo for GCSDK::CGCSODestroyJob
 D typeinfo for GCSDK::CGCSOUpdateJob
 D typeinfo for GCSDK::CGCSOUpdateMultipleJob
 D typeinfo for GCSDK::CJob
 D typeinfo for GCSDK::CMsgBase_t<GCSDK::GCMsgHdrEx_t>
 D typeinfo for GCSDK::CProtoBufGCClientSendHandler
 D typeinfo for GCSDK::CProtoBufMsg<CGCMsgGC_War_IndividualUpdate>
 D typeinfo for GCSDK::CProtoBufMsg<CMsgConVarValue>
 D typeinfo for GCSDK::CProtoBufMsg<CMsgGCQuestObjective_PointsChange>
 D typeinfo for GCSDK::CProtoBufMsg<CMsgGCRematchRequest>
 D typeinfo for GCSDK::CProtoBufMsg<CMsgGCRematchRequestResponse>
 D typeinfo for GCSDK::CProtoBufMsg<CMsgGC_DailyCompetitiveStatsRollup>
 D typeinfo for GCSDK::CProtoBufMsg<CMsgGC_DailyCompetitiveStatsRollup_Response>
 D typeinfo for GCSDK::CProtoBufMsg<CMsgGC_GameServer_AuthChallenge>
 D typeinfo for GCSDK::CProtoBufMsg<CMsgGC_GameServer_AuthChallengeResponse>
 D typeinfo for GCSDK::CProtoBufMsg<CMsgGC_GameServer_AuthResult>
 D typeinfo for GCSDK::CProtoBufMsg<CMsgGC_GameServer_LevelInfo>
 D typeinfo for GCSDK::CProtoBufMsg<CMsgGC_GameServer_ServerModificationItem>
 D typeinfo for GCSDK::CProtoBufMsg<CMsgGC_GameServer_ServerModificationItemExpired>
 D typeinfo for GCSDK::CProtoBufMsg<CMsgGC_GameServer_UseServerModificationItem>
 D typeinfo for GCSDK::CProtoBufMsg<CMsgGC_GameServer_UseServerModificationItem_Response>
 D typeinfo for GCSDK::CProtoBufMsg<CMsgGC_KickPlayerFromLobby>
 D typeinfo for GCSDK::CProtoBufMsg<CMsgGC_Match_Result>
 D typeinfo for GCSDK::CProtoBufMsg<CMsgGC_Match_ResultResponse>
 D typeinfo for GCSDK::CProtoBufMsg<CMsgGC_TFVoteKickPlayerRequest>
 D typeinfo for GCSDK::CProtoBufMsg<CMsgGC_VoteKickPlayerRequestResponse>
 D typeinfo for GCSDK::CProtoBufMsg<CMsgGameServerKickingLobby>
 D typeinfo for GCSDK::CProtoBufMsg<CMsgGameServerKickingLobbyResponse>
 D typeinfo for GCSDK::CProtoBufMsg<CMsgGameServerMatchmakingStatus>
 D typeinfo for GCSDK::CProtoBufMsg<CMsgHalloween_Merasmus2012>
 D typeinfo for GCSDK::CProtoBufMsg<CMsgIncrementKillCountAttribute>
 D typeinfo for GCSDK::CProtoBufMsg<CMsgIncrementKillCountAttribute_Multiple>
 D typeinfo for GCSDK::CProtoBufMsg<CMsgItemAcknowledged>
 D typeinfo for GCSDK::CProtoBufMsg<CMsgMvMMannUpVictoryReply>
 D typeinfo for GCSDK::CProtoBufMsg<CMsgMvMVictory>
 D typeinfo for GCSDK::CProtoBufMsg<CMsgPlayerLeftMatch>
 D typeinfo for GCSDK::CProtoBufMsg<CMsgPlayerLeftMatchResponse>
 D typeinfo for GCSDK::CProtoBufMsg<CMsgReplicateConVars>
 D typeinfo for GCSDK::CProtoBufMsg<CMsgSOCacheSubscribed>
 D typeinfo for GCSDK::CProtoBufMsg<CMsgSOCacheSubscriptionCheck>
 D typeinfo for GCSDK::CProtoBufMsg<CMsgSOCacheSubscriptionRefresh>
 D typeinfo for GCSDK::CProtoBufMsg<CMsgSOCacheUnsubscribed>
 D typeinfo for GCSDK::CProtoBufMsg<CMsgSOMultipleObjects>
 D typeinfo for GCSDK::CProtoBufMsg<CMsgSOSingleObject>
 D typeinfo for GCSDK::CProtoBufMsg<CMsgServerGoodbye>
 D typeinfo for GCSDK::CProtoBufMsg<CMsgServerHello>
 D typeinfo for GCSDK::CProtoBufMsg<CMsgServerWelcome>
 D typeinfo for GCSDK::CProtoBufMsg<CMsgTFCoaching_CoachJoined>
 D typeinfo for GCSDK::CProtoBufMsg<CMsgTFCoaching_CoachJoining>
 D typeinfo for GCSDK::CProtoBufMsg<CMsgTFCoaching_RemoveCurrentCoach>
 D typeinfo for GCSDK::CProtoBufMsg<CMsgTFQuickplay_PlayerJoining>
 D typeinfo for GCSDK::CProtoBufMsg<CMsgTFVoteKickBanPlayerResult>
 D typeinfo for GCSDK::CProtoBufMsg<CMsgTrackUniquePlayerPairEvent>
 D typeinfo for GCSDK::CProtoBufMsg<CMsgUpdateHalloweenMerasmusLootLevel>
 D typeinfo for GCSDK::CProtoBufMsg<CMsgUpdateItemSchema>
 D typeinfo for GCSDK::CProtoBufMsgBase
 D typeinfo for GCSDK::CProtoBufMsgBase::IProtoBufSendHandler
 D typeinfo for GCSDK::CProtoBufMsgMemoryPool<CGCMsgGC_War_IndividualUpdate>
 D typeinfo for GCSDK::CProtoBufMsgMemoryPool<CMsgConVarValue>
 D typeinfo for GCSDK::CProtoBufMsgMemoryPool<CMsgGCQuestObjective_PointsChange>
 D typeinfo for GCSDK::CProtoBufMsgMemoryPool<CMsgGCRematchRequest>
 D typeinfo for GCSDK::CProtoBufMsgMemoryPool<CMsgGCRematchRequestResponse>
 D typeinfo for GCSDK::CProtoBufMsgMemoryPool<CMsgGC_DailyCompetitiveStatsRollup>
 D typeinfo for GCSDK::CProtoBufMsgMemoryPool<CMsgGC_DailyCompetitiveStatsRollup_Response>
 D typeinfo for GCSDK::CProtoBufMsgMemoryPool<CMsgGC_GameServer_AuthChallenge>
 D typeinfo for GCSDK::CProtoBufMsgMemoryPool<CMsgGC_GameServer_AuthChallengeResponse>
 D typeinfo for GCSDK::CProtoBufMsgMemoryPool<CMsgGC_GameServer_AuthResult>
 D typeinfo for GCSDK::CProtoBufMsgMemoryPool<CMsgGC_GameServer_LevelInfo>
 D typeinfo for GCSDK::CProtoBufMsgMemoryPool<CMsgGC_GameServer_ServerModificationItem>
 D typeinfo for GCSDK::CProtoBufMsgMemoryPool<CMsgGC_GameServer_ServerModificationItemExpired>
 D typeinfo for GCSDK::CProtoBufMsgMemoryPool<CMsgGC_GameServer_UseServerModificationItem>
 D typeinfo for GCSDK::CProtoBufMsgMemoryPool<CMsgGC_GameServer_UseServerModificationItem_Response>
 D typeinfo for GCSDK::CProtoBufMsgMemoryPool<CMsgGC_KickPlayerFromLobby>
 D typeinfo for GCSDK::CProtoBufMsgMemoryPool<CMsgGC_Match_Result>
 D typeinfo for GCSDK::CProtoBufMsgMemoryPool<CMsgGC_Match_ResultResponse>
 D typeinfo for GCSDK::CProtoBufMsgMemoryPool<CMsgGC_TFVoteKickPlayerRequest>
 D typeinfo for GCSDK::CProtoBufMsgMemoryPool<CMsgGC_VoteKickPlayerRequestResponse>
 D typeinfo for GCSDK::CProtoBufMsgMemoryPool<CMsgGameServerKickingLobby>
 D typeinfo for GCSDK::CProtoBufMsgMemoryPool<CMsgGameServerKickingLobbyResponse>
 D typeinfo for GCSDK::CProtoBufMsgMemoryPool<CMsgGameServerMatchmakingStatus>
 D typeinfo for GCSDK::CProtoBufMsgMemoryPool<CMsgHalloween_Merasmus2012>
 D typeinfo for GCSDK::CProtoBufMsgMemoryPool<CMsgIncrementKillCountAttribute>
 D typeinfo for GCSDK::CProtoBufMsgMemoryPool<CMsgIncrementKillCountAttribute_Multiple>
 D typeinfo for GCSDK::CProtoBufMsgMemoryPool<CMsgItemAcknowledged>
 D typeinfo for GCSDK::CProtoBufMsgMemoryPool<CMsgMvMMannUpVictoryReply>
 D typeinfo for GCSDK::CProtoBufMsgMemoryPool<CMsgMvMVictory>
 D typeinfo for GCSDK::CProtoBufMsgMemoryPool<CMsgPlayerLeftMatch>
 D typeinfo for GCSDK::CProtoBufMsgMemoryPool<CMsgPlayerLeftMatchResponse>
 D typeinfo for GCSDK::CProtoBufMsgMemoryPool<CMsgProtoBufHeader>
 D typeinfo for GCSDK::CProtoBufMsgMemoryPool<CMsgReplicateConVars>
 D typeinfo for GCSDK::CProtoBufMsgMemoryPool<CMsgSOCacheSubscribed>
 D typeinfo for GCSDK::CProtoBufMsgMemoryPool<CMsgSOCacheSubscriptionCheck>
 D typeinfo for GCSDK::CProtoBufMsgMemoryPool<CMsgSOCacheSubscriptionRefresh>
 D typeinfo for GCSDK::CProtoBufMsgMemoryPool<CMsgSOCacheUnsubscribed>
 D typeinfo for GCSDK::CProtoBufMsgMemoryPool<CMsgSOMultipleObjects>
 D typeinfo for GCSDK::CProtoBufMsgMemoryPool<CMsgSOSingleObject>
 D typeinfo for GCSDK::CProtoBufMsgMemoryPool<CMsgServerGoodbye>
 D typeinfo for GCSDK::CProtoBufMsgMemoryPool<CMsgServerHello>
 D typeinfo for GCSDK::CProtoBufMsgMemoryPool<CMsgServerWelcome>
 D typeinfo for GCSDK::CProtoBufMsgMemoryPool<CMsgTFCoaching_CoachJoined>
 D typeinfo for GCSDK::CProtoBufMsgMemoryPool<CMsgTFCoaching_CoachJoining>
 D typeinfo for GCSDK::CProtoBufMsgMemoryPool<CMsgTFCoaching_RemoveCurrentCoach>
 D typeinfo for GCSDK::CProtoBufMsgMemoryPool<CMsgTFQuickplay_PlayerJoining>
 D typeinfo for GCSDK::CProtoBufMsgMemoryPool<CMsgTFVoteKickBanPlayerResult>
 D typeinfo for GCSDK::CProtoBufMsgMemoryPool<CMsgTrackUniquePlayerPairEvent>
 D typeinfo for GCSDK::CProtoBufMsgMemoryPool<CMsgUpdateHalloweenMerasmusLootLevel>
 D typeinfo for GCSDK::CProtoBufMsgMemoryPool<CMsgUpdateItemSchema>
 D typeinfo for GCSDK::CProtoBufMsgMemoryPoolBase
 D typeinfo for GCSDK::CProtoBufNetPacket
 D typeinfo for GCSDK::CProtoBufSharedObject<CSOEconClaimCode, 3>
 D typeinfo for GCSDK::CProtoBufSharedObject<CSOEconGameAccountForGameServers, 37>
 D typeinfo for GCSDK::CProtoBufSharedObject<CSOTFDuelSummary, 19>
 D typeinfo for GCSDK::CProtoBufSharedObject<CSOTFGameServerLobby, 2004>
 D typeinfo for GCSDK::CProtoBufSharedObject<CSOTFLadderPlayerStats, 39>
 D typeinfo for GCSDK::CProtoBufSharedObject<CSOTFMapContribution, 28>
 D typeinfo for GCSDK::CProtoBufSharedObject<CSOTFParty, 2003>
 D typeinfo for GCSDK::CProtoBufSharedObject<CSOTFPlayerInfo, 2>
 D typeinfo for GCSDK::CProtoBufSharedObject<CSOWarData, 38>
 D typeinfo for GCSDK::CProtoBufSharedObjectBase
 D typeinfo for GCSDK::CRefCount
 D typeinfo for GCSDK::CSharedObject
 D typeinfo for GCSDK::CSharedObjectCache
 D typeinfo for GCSDK::CSharedObjectTypeCache
 D typeinfo for GCSDK::CStructNetPacket
 D typeinfo for GCSDK::CWorkThreadPool
 D typeinfo for GCSDK::IMsgNetPacket
 D typeinfo for GCSDK::IParty
 D typeinfo for GCSDK::IPlayerGroup
 D typeinfo for GCSDK::ISharedObjectListener
 D typeinfo for GroundLocomotionCollisionTraceFilter
 D typeinfo for HidingSpot
 D typeinfo for IAI_MovementSink
 D typeinfo for IAchievement
 D typeinfo for IAchievementMgr
 D typeinfo for IAppSystem
 D typeinfo for IBaseCacheInfo
 D typeinfo for IBaseInterface
 D typeinfo for IBaseObjectAutoList
 D typeinfo for IBaseProjectileAutoList
 D typeinfo for IBehaviorBackBridge
 D typeinfo for IBody
 D typeinfo for IBonusPackAutoList
 D typeinfo for IBotController
 D typeinfo for IBotManager
 D typeinfo for IBreakableWithPropData
 D typeinfo for ICaptureFlagAutoList
 D typeinfo for ICaptureZoneAutoList
 D typeinfo for IChoreoEventCallback
 D typeinfo for IChoreoStringPool
 D typeinfo for ICollideable
 D typeinfo for ICommandCallback
 D typeinfo for ICommandCompletionCallback
 D typeinfo for IConCommandBaseAccessor
 D typeinfo for IConVar
 D typeinfo for IContextualQuery
 D typeinfo for ICurrencyPackAutoList
 D typeinfo for ICurveDataAccessor
 D typeinfo for IDecalEmitterSystem
 D typeinfo for IDelayedSchemaData
 D typeinfo for IDrivableVehicle
 D typeinfo for IDroppedWeaponAutoList
 D typeinfo for IEconItemAttributeIterator
 D typeinfo for IEconItemInterface
 D typeinfo for IEconItemUntypedAttributeIterator
 D typeinfo for IEconLootList
 D typeinfo for IEconTool
 D typeinfo for IEffects
 D typeinfo for IEntityDataInstantiator
 D typeinfo for IEntityEnumerator
 D typeinfo for IEntityFactory
 D typeinfo for IEntityFactoryDictionary
 D typeinfo for IEntityFindFilter
 D typeinfo for IEntityListener
 D typeinfo for IEntitySaveUtils
 D typeinfo for IEventRegisterCallback
 D typeinfo for IExtraMapEntityAutoList
 D typeinfo for IEyeballBossAutoList
 D typeinfo for IFlagDetectionZoneAutoList
 D typeinfo for IForEachNavArea
 D typeinfo for IFuncForceFieldAutoList
 D typeinfo for IFuncNavPrerequisiteAutoList
 D typeinfo for IFuncNoBuildAutoList
 D typeinfo for IFuncPasstimeGoalieZoneAutoList
 D typeinfo for IFuncPasstimeNoBallZoneAutoList
 D typeinfo for IFuncPowerupVolumeAutoList
 D typeinfo for IFuncRespawnRoomAutoList
 D typeinfo for IFuncRespawnRoomVisualizerAutoList
 D typeinfo for IGameEventListener2
 D typeinfo for IGameMovement
 D typeinfo for IGameSystem
 D typeinfo for IGameSystemPerFrame
 D typeinfo for IHLTVDirector
 D typeinfo for IHalloweenGiftSpawnAutoList
 D typeinfo for IHandleEntity
 D typeinfo for IHasAttributes
 D typeinfo for IHasBuildPoints
 D typeinfo for IHasOwner
 D typeinfo for IHealthKitAutoList
 D typeinfo for IInfoPowerupSpawnAutoList
 D typeinfo for IIntention
 D typeinfo for IInventoryUpdateListener
 D typeinfo for IIsHolidayActive
 D typeinfo for IKeyValuesDumpContext
 D typeinfo for IKeyValuesDumpContextAsText
 D typeinfo for ILagCompensationManager
 D typeinfo for ILocomotion
 D typeinfo for IMapEntityFilter
 D typeinfo for IMatchGroupDescription
 D typeinfo for IMerasmusAutoList
 D typeinfo for IMinigameAutoList
 D typeinfo for IModelLoadCallback
 D typeinfo for IMotionEvent
 D typeinfo for IMoveHelper
 D typeinfo for IMoveHelperServer
 D typeinfo for IMultiplayerPhysics
 D typeinfo for INPCPassengerCarrier
 D typeinfo for INavAvoidanceObstacle
 D typeinfo for INearestNodeFilter
 D typeinfo for INextBot
 D typeinfo for INextBotComponent
 D typeinfo for INextBotEntityFilter
 D typeinfo for INextBotEventResponder
 D typeinfo for INextBotFilter
 D typeinfo for INextBotPlayerInput
 D typeinfo for INextBotReply
 D typeinfo for INodeListFilter
 D typeinfo for INotify
 D typeinfo for IParentPropInteraction
 D typeinfo for IParticleOperatorDefinition
 D typeinfo for IParticleSystemQuery
 D typeinfo for IPartitionEnumerator
 D typeinfo for IPartitionQueryCallback
 D typeinfo for IPasstimeBallSpawnAutoList
 D typeinfo for IPathCost
 D typeinfo for IPhysSaveRestoreManager
 D typeinfo for IPhysicsCollisionEvent
 D typeinfo for IPhysicsCollisionSolver
 D typeinfo for IPhysicsConstraintEvent
 D typeinfo for IPhysicsGameTrace
 D typeinfo for IPhysicsObjectEvent
 D typeinfo for IPhysicsPropAutoList
 D typeinfo for IPlayerInfo
 D typeinfo for IPlayerInfoManager
 D typeinfo for IPlayerPickupVPhysics
 D typeinfo for IPluginHelpersCheck
 D typeinfo for IPopulationSpawner
 D typeinfo for IPopulator
 D typeinfo for IPositionWatcher
 D typeinfo for IPredictionSystem
 D typeinfo for IProgressionDesc
 D typeinfo for IRecipientFilter
 D typeinfo for IRefCounted
 D typeinfo for IResponseFilter
 D typeinfo for IResponseSystem
 D typeinfo for IRestore
 D typeinfo for IRobotDestructionGroupAutoList
 D typeinfo for IRotorWashShooter
 D typeinfo for ISave
 D typeinfo for ISaveRestoreBlockHandler
 D typeinfo for ISaveRestoreBlockSet
 D typeinfo for ISaveRestoreOps
 D typeinfo for ISceneTokenProcessor
 D typeinfo for ISchemaAttributeType
 D typeinfo for ISchemaAttributeTypeBase<CAttribute_DynamicRecipeComponent>
 D typeinfo for ISchemaAttributeTypeBase<CAttribute_ItemSlotCriteria>
 D typeinfo for ISchemaAttributeTypeBase<CAttribute_String>
 D typeinfo for ISchemaAttributeTypeBase<CAttribute_WorldItemPlacement>
 D typeinfo for ISchemaAttributeTypeBase<float>
 D typeinfo for ISchemaAttributeTypeBase<unsigned int>
 D typeinfo for ISchemaAttributeTypeBase<unsigned long long>
 D typeinfo for IScorer
 D typeinfo for ISearchSurroundingAreasFunctor
 D typeinfo for IServerBenchmark
 D typeinfo for IServerChoreoTools
 D typeinfo for IServerDLLSharedAppSystems
 D typeinfo for IServerEntity
 D typeinfo for IServerGCLobby
 D typeinfo for IServerGameClients
 D typeinfo for IServerGameDLL
 D typeinfo for IServerGameEnts
 D typeinfo for IServerGameTags
 D typeinfo for IServerNetworkable
 D typeinfo for IServerReplay
 D typeinfo for IServerTools
 D typeinfo for IServerUnknown
 D typeinfo for IServerVehicle
 D typeinfo for ITFBotHintEntityAutoList
 D typeinfo for ITFChargeUpWeapon
 D typeinfo for ITFFlameEntityAutoList
 D typeinfo for ITFGenericBomb
 D typeinfo for ITFMerasmusTrickOrTreatProp
 D typeinfo for ITFPumpkinBomb
 D typeinfo for ITFTargetDummy
 D typeinfo for ITFTeamSpawnAutoList
 D typeinfo for ITFTeamTrainWatcher
 D typeinfo for ITFTeleportLocationAutoList
 D typeinfo for ITempEntsSystem
 D typeinfo for IToolFrameworkServer
 D typeinfo for ITraceFilter
 D typeinfo for ITriggerAreaCaptureAutoList
 D typeinfo for ITriggerHurtAutoList
 D typeinfo for ITriggerPlayerRespawnOverride
 D typeinfo for IVPhysicsKeyHandler
 D typeinfo for IVPhysicsWatcher
 D typeinfo for IVehicle
 D typeinfo for IVision
 D typeinfo for IVision::IForEachKnownEntity
 D typeinfo for IVoiceGameMgrHelper
 D typeinfo for IWatcherCallback
 D typeinfo for IZombieAutoList
 D typeinfo for MovieExplosion
 D typeinfo for NextBotCombatCharacter
 D typeinfo for NextBotGroundLocomotion
 D typeinfo for NextBotManager
 D typeinfo for NextBotPlayer<CTFPlayer>
 D typeinfo for NextBotTraceFilterIgnoreActors
 D typeinfo for NextBotTraceFilterOnlyActors
 D typeinfo for NextBotTraversableTraceFilter
 D typeinfo for NextBotVisionTraceFilter
 D typeinfo for ParticleSmokeGrenade
 D typeinfo for Path
 D typeinfo for PathFollower
 D typeinfo for PlaceStickyBombReply
 D typeinfo for PlayerBody
 D typeinfo for PlayerLocomotion
 D typeinfo for PressFireButtonIfValidBuildPositionReply
 D typeinfo for RocketTrail
 D typeinfo for SendProp
 D typeinfo for SmokeTrail
 D typeinfo for SporeExplosion
 D typeinfo for SporeTrail
 D typeinfo for TAutoList<CFuncPasstimeGoal>
 D typeinfo for TAutoList<CPasstimeBallController>
 D typeinfo for audioparams_t
 D typeinfo for base_vector_t
 D typeinfo for condition_source_t
 D typeinfo for fogparams_t
 D typeinfo for fogplayerparams_t
 D typeinfo for localplayerscoring_t
 D typeinfo for locksound_t
 D typeinfo for sky3dparams_t
 D typeinfo for sky3dparams_t::NetworkVar_fog
 D typeinfo for std::string
 D typeinfo for vehicle_crashsound_t
 D typeinfo for vehicle_gear_t
 D typeinfo for vehiclesounds_t
 D unsigned int GetAttributeTypeUniqueIdentifier<CAttribute_DynamicRecipeComponent>()::s_unUniqueCounter
 D unsigned int GetAttributeTypeUniqueIdentifier<CAttribute_ItemSlotCriteria>()::s_unUniqueCounter
 D unsigned int GetAttributeTypeUniqueIdentifier<CAttribute_String>()::s_unUniqueCounter
 D unsigned int GetAttributeTypeUniqueIdentifier<CAttribute_WorldItemPlacement>()::s_unUniqueCounter
 D unsigned int GetAttributeTypeUniqueIdentifier<float>()::s_unUniqueCounter
 D unsigned int GetAttributeTypeUniqueIdentifier<unsigned int>()::s_unUniqueCounter
 D unsigned int GetAttributeTypeUniqueIdentifier<unsigned long long>()::s_unUniqueCounter
 D usermessages
 D variantFuncs
 D variant_t::Entity() const::hNull
 D variant_t::m_SaveBool
 D variant_t::m_SaveColor
 D variant_t::m_SaveEHandle
 D variant_t::m_SaveFloat
 D variant_t::m_SaveInt
 D variant_t::m_SavePositionVector
 D variant_t::m_SaveString
 D variant_t::m_SaveVector
 D vehicle_crashsound_t::m_DataMap
 D vehicle_gear_t::m_DataMap
 D vehiclesound_parsenames
 D vehiclesounds_t::m_DataMap
 D void CNavMesh::CollectAreasOverlappingExtent<CNavArea>(Extent const&, CUtlVector<CNavArea*, CUtlMemory<CNavArea*, int> >*)::__executeCount
 D void CNavMesh::CollectAreasOverlappingExtent<CNavArea>(Extent const&, CUtlVector<CNavArea*, CUtlMemory<CNavArea*, int> >*)::searchMarker
 D void CNavMesh::CollectAreasOverlappingExtent<CTFNavArea>(Extent const&, CUtlVector<CTFNavArea*, CUtlMemory<CTFNavArea*, int> >*)::__executeCount
 D void CNavMesh::CollectAreasOverlappingExtent<CTFNavArea>(Extent const&, CUtlVector<CTFNavArea*, CUtlMemory<CTFNavArea*, int> >*)::searchMarker
 D vtable for Action<CBotNPCArcher>
 D vtable for Action<CBotNPCDecoy>
 D vtable for Action<CEyeballBoss>
 D vtable for Action<CGhost>
 D vtable for Action<CHeadlessHatman>
 D vtable for Action<CMerasmus>
 D vtable for Action<CSimpleBot>
 D vtable for Action<CTFBot>
 D vtable for Action<CTFRobotDestruction_Robot>
 D vtable for Action<CZombie>
 D vtable for Behavior<CBotNPCArcher>
 D vtable for Behavior<CBotNPCDecoy>
 D vtable for Behavior<CEyeballBoss>
 D vtable for Behavior<CGhost>
 D vtable for Behavior<CHeadlessHatman>
 D vtable for Behavior<CMerasmus>
 D vtable for Behavior<CSimpleBot>
 D vtable for Behavior<CTFBot>
 D vtable for Behavior<CTFRobotDestruction_Robot>
 D vtable for Behavior<CZombie>
 D vtable for CAISound
 D vtable for CAI_AllySpeechManager
 D vtable for CAI_AssaultGoal
 D vtable for CAI_BaseActor
 D vtable for CAI_BaseNPC
 D vtable for CAI_BattleLine
 D vtable for CAI_BehaviorHost<CAI_BaseNPC>
 D vtable for CAI_BlendedMotor
 D vtable for CAI_ChangeHintGroup
 D vtable for CAI_ChangeTarget
 D vtable for CAI_DynamicLink
 D vtable for CAI_DynamicLinkController
 D vtable for CAI_EnemiesListSaveRestoreOps
 D vtable for CAI_Expresser
 D vtable for CAI_FollowGoal
 D vtable for CAI_GoalEntity
 D vtable for CAI_Hint
 D vtable for CAI_LeadGoal
 D vtable for CAI_LeadGoal_Weapon
 D vtable for CAI_LocalNavigator
 D vtable for CAI_Motor
 D vtable for CAI_MoveAndShootOverlay
 D vtable for CAI_MoveProbe
 D vtable for CAI_NavInHintGroupFilter
 D vtable for CAI_Navigator
 D vtable for CAI_Network
 D vtable for CAI_NetworkManager
 D vtable for CAI_Pathfinder
 D vtable for CAI_RadialLinkController
 D vtable for CAI_Relationship
 D vtable for CAI_SaveRestoreBlockHandler
 D vtable for CAI_ScriptConditions
 D vtable for CAI_ScriptedSchedule
 D vtable for CAI_ScriptedSentence
 D vtable for CAI_ScriptedSequence
 D vtable for CAI_SensedObjectsManager
 D vtable for CAI_Senses
 D vtable for CAI_SpeechFilter
 D vtable for CAI_StandoffGoal
 D vtable for CAI_SystemHook
 D vtable for CAI_TacticalServices
 D vtable for CAI_TestHull
 D vtable for CAchievementSaveRestoreBlockHandler
 D vtable for CAchievementSaveThread
 D vtable for CAchievementZone
 D vtable for CActivityDataOps
 D vtable for CAimTargetManager
 D vtable for CAmbientGeneric
 D vtable for CAmmoDef
 D vtable for CAmmoFilter
 D vtable for CAmmoPack
 D vtable for CAmmoPackMedium
 D vtable for CAmmoPackSmall
 D vtable for CAnchorList
 D vtable for CAreaPortal
 D vtable for CArenaLogic
 D vtable for CArmor
 D vtable for CAssaultPoint
 D vtable for CAttributeContainer
 D vtable for CAttributeContainer::NetworkVar_m_Item
 D vtable for CAttributeIterator_GetTypedAttributeValue<CAttribute_DynamicRecipeComponent, CAttribute_DynamicRecipeComponent>
 D vtable for CAttributeIterator_GetTypedAttributeValue<CAttribute_ItemSlotCriteria, CAttribute_ItemSlotCriteria>
 D vtable for CAttributeIterator_GetTypedAttributeValue<CAttribute_String, CAttribute_String>
 D vtable for CAttributeIterator_GetTypedAttributeValue<CAttribute_String, char const*>
 D vtable for CAttributeIterator_GetTypedAttributeValue<CAttribute_WorldItemPlacement, CAttribute_WorldItemPlacement>
 D vtable for CAttributeIterator_GetTypedAttributeValue<float, float>
 D vtable for CAttributeIterator_GetTypedAttributeValue<unsigned int, float>
 D vtable for CAttributeIterator_GetTypedAttributeValue<unsigned int, unsigned int>
 D vtable for CAttributeIterator_GetTypedAttributeValue<unsigned long long, unsigned long long>
 D vtable for CAttributeIterator_HasAttribute
 D vtable for CAttributeList
 D vtable for CAttributeManager
 D vtable for CAttribute_DynamicRecipeComponent
 D vtable for CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT
 D vtable for CAttribute_ItemSlotCriteria
 D vtable for CAttribute_String
 D vtable for CAttribute_WorldItemPlacement
 D vtable for CAutoGameSystem
 D vtable for CAutoGameSystemPerFrame
 D vtable for CBallPlayerToucher
 D vtable for CBaseAchievement
 D vtable for CBaseAnimating
 D vtable for CBaseAnimatingOverlay
 D vtable for CBaseButton
 D vtable for CBaseCombatCharacter
 D vtable for CBaseCombatWeapon
 D vtable for CBaseDMStart
 D vtable for CBaseDoor
 D vtable for CBaseEntity
 D vtable for CBaseEntity::NetworkVar_m_Collision
 D vtable for CBaseEntityClassList
 D vtable for CBaseEntityList
 D vtable for CBaseEntityModelLoadProxy::Handler
 D vtable for CBaseFilter
 D vtable for CBaseFire
 D vtable for CBaseFlex
 D vtable for CBaseGameStats
 D vtable for CBaseGameStats_Driver
 D vtable for CBaseGrenade
 D vtable for CBaseGrenadeConcussion
 D vtable for CBaseGrenadeContact
 D vtable for CBaseGrenadeTimed
 D vtable for CBaseIssue
 D vtable for CBaseMoveBehavior
 D vtable for CBaseMultiplayerPlayer
 D vtable for CBaseNPCMaker
 D vtable for CBaseObject
 D vtable for CBaseObjectUpgrade
 D vtable for CBaseParticleEntity
 D vtable for CBasePlatTrain
 D vtable for CBasePlayer
 D vtable for CBasePlayer::NetworkVar_m_AttributeList
 D vtable for CBasePlayer::NetworkVar_m_Local
 D vtable for CBasePlayer::NetworkVar_pl
 D vtable for CBaseProjectile
 D vtable for CBasePropDoor
 D vtable for CBaseQuestObjectiveTracker
 D vtable for CBaseSOTracker
 D vtable for CBaseServerVehicle
 D vtable for CBaseTFBotHintEntity
 D vtable for CBaseTeamObjectiveResource
 D vtable for CBaseTempEntity
 D vtable for CBaseToggle
 D vtable for CBaseTrigger
 D vtable for CBaseViewModel
 D vtable for CBeam
 D vtable for CBlood
 D vtable for CBloodSplat
 D vtable for CBoneFollower
 D vtable for CBonusDuckPickup
 D vtable for CBonusPack
 D vtable for CBonusRoundLogic
 D vtable for CBonusRoundLogic::NetworkVar_m_Item
 D vtable for CBotCmd
 D vtable for CBotNPCArcher
 D vtable for CBotNPCArcher::CBotNPCArcherIntention
 D vtable for CBotNPCArcherBehavior
 D vtable for CBotNPCArcherGuardSpot
 D vtable for CBotNPCArcherMoveToMark
 D vtable for CBotNPCArcherShootBow
 D vtable for CBotNPCArcherSurrender
 D vtable for CBotNPCBody
 D vtable for CBotNPCDecoy
 D vtable for CBotNPCDecoy::CBotNPCDecoyIntention
 D vtable for CBotNPCDecoyBehavior
 D vtable for CBotNPCDecoyLocomotion
 D vtable for CBreakModelsPrecached
 D vtable for CBreakParser
 D vtable for CBreakable
 D vtable for CBreakableProp
 D vtable for CBreakableSurface
 D vtable for CBroadcastNonOwnerRecipientFilter
 D vtable for CBroadcastRecipientFilter
 D vtable for CBubbling
 D vtable for CBulletPenetrateEnum
 D vtable for CBulletsTraceFilter
 D vtable for CCPTimerLogic
 D vtable for CCallResult<CGCUpdateItemSchema, HTTPRequestCompleted_t>
 D vtable for CCallResult<CLeaderboardInfo, LeaderboardFindResult_t>
 D vtable for CCallResult<CLeaderboardInfo, LeaderboardScoresDownloaded_t>
 D vtable for CCallResult<CMapInfoContainer, LeaderboardFindResult_t>
 D vtable for CCallResult<CMapInfoContainer, LeaderboardScoresDownloaded_t>
 D vtable for CCallResult<CTFWorkshopMap, SteamUGCQueryCompleted_t>
 D vtable for CCallback<CGCClientSystem, SteamServersConnected_t, true>
 D vtable for CCallback<CSteamWorksGameStatsUploader, GameStatsSessionClosed_t, true>
 D vtable for CCallback<CSteamWorksGameStatsUploader, GameStatsSessionIssued_t, true>
 D vtable for CCallback<CTFMapsWorkshop, DownloadItemResult_t, false>
 D vtable for CCallback<CTFMapsWorkshop, DownloadItemResult_t, true>
 D vtable for CCallback<CTFMapsWorkshop, ItemInstalled_t, false>
 D vtable for CCallback<CTFMapsWorkshop, ItemInstalled_t, true>
 D vtable for CCallback<GCSDK::CGCClient, GCMessageAvailable_t, false>
 D vtable for CCallbackImpl<12>
 D vtable for CCallbackImpl<16>
 D vtable for CCallbackImpl<1>
 D vtable for CCallbackImpl<4>
 D vtable for CCaptureFlag
 D vtable for CCaptureFlagReturnIcon
 D vtable for CCaptureZone
 D vtable for CCaptureZoneShim
 D vtable for CCasualMatchGroupDescription
 D vtable for CCasualMatchGroupDescription::CCasualProgressionDesc
 D vtable for CChangeClassZone
 D vtable for CChangeLevel
 D vtable for CChangeLevelIssue
 D vtable for CCheckClient
 D vtable for CChildOperatorDefinition
 D vtable for CChoreoEvent
 D vtable for CChoreoScene
 D vtable for CChoreoStringPool
 D vtable for CClassLimitsIssue
 D vtable for CCleanupDefaultRelationShips
 D vtable for CCollectPayloadGuardVantagePoints
 D vtable for CCollectReachableObjects
 D vtable for CCollisionEvent
 D vtable for CCollisionProperty
 D vtable for CColorCorrection
 D vtable for CColorCorrectionVolume
 D vtable for CCombatCharVisCache
 D vtable for CCommentaryAuto
 D vtable for CCommentarySystem
 D vtable for CCommentaryViewPosition
 D vtable for CCommentary_SaveRestoreBlockHandler
 D vtable for CCompareFriendFoeInfluence
 D vtable for CCompetitiveLogic
 D vtable for CConceptHistoriesDataOps
 D vtable for CConditionFortuneTellerEffect
 D vtable for CConstantForceController
 D vtable for CConstraintAnchor
 D vtable for CCopyRecipientFilter
 D vtable for CCopyableUtlVector<MvMTourMission_t>
 D vtable for CCopyableUtlVector<int>
 D vtable for CCopyableUtlVector<static_attrib_t>
 D vtable for CCountUserGeneratedAttributeIterator
 D vtable for CCredits
 D vtable for CCurrencyPack
 D vtable for CCurrencyPackCustom
 D vtable for CCurrencyPackMedium
 D vtable for CCurrencyPackSmall
 D vtable for CCyclicalHoliday
 D vtable for CDataManager<CBoneCache, bonecacheparams_t, CBoneCache*, CThreadFastMutex>
 D vtable for CDataManagerBase
 D vtable for CDataObjectAccessSystem
 D vtable for CDateBasedHoliday
 D vtable for CDateBasedHolidayNoSpecificYear
 D vtable for CDebugHistory
 D vtable for CDecal
 D vtable for CDecalEmitterSystem
 D vtable for CDefaultAccessor
 D vtable for CDefaultParticleSystemQuery
 D vtable for CDefaultResponseSystem
 D vtable for CDefaultResponseSystemSaveRestoreBlockHandler
 D vtable for CDevShotSystem
 D vtable for CDirtySpatialPartitionEntityList
 D vtable for CDisableVision
 D vtable for CDispenserTouchTrigger
 D vtable for CDllDemandLoader
 D vtable for CDmgAccumulator
 D vtable for CDynamicLight
 D vtable for CDynamicProp
 D vtable for CEconClaimCode
 D vtable for CEconCraftingRecipeDefinition
 D vtable for CEconEntity
 D vtable for CEconEntity::NetworkVar_m_AttributeManager
 D vtable for CEconGameAccountForGameServers
 D vtable for CEconItem
 D vtable for CEconItemAttribute
 D vtable for CEconItemAttributeIterator_ApplyAttributeFloat
 D vtable for CEconItemAttributeIterator_ApplyAttributeString
 D vtable for CEconItemDefinition
 D vtable for CEconItemHandle
 D vtable for CEconItemPreviewDataBlock
 D vtable for CEconItemSchema
 D vtable for CEconItemSystem
 D vtable for CEconItemView
 D vtable for CEconItemView::NetworkVar_m_AttributeList
 D vtable for CEconItemView::NetworkVar_m_NetworkedDynamicAttributesForDemos
 D vtable for CEconLootListDefinition
 D vtable for CEconStyleInfo
 D vtable for CEconTool_AccountUpgradeToPremium
 D vtable for CEconTool_BackpackExpander
 D vtable for CEconTool_ClaimCode
 D vtable for CEconTool_ClassTransmogrifier
 D vtable for CEconTool_CrateKey
 D vtable for CEconTool_CustomizeTexture
 D vtable for CEconTool_Default
 D vtable for CEconTool_DescTag
 D vtable for CEconTool_DuckToken
 D vtable for CEconTool_DuelingMinigame
 D vtable for CEconTool_Festivizer
 D vtable for CEconTool_Gift
 D vtable for CEconTool_GiftWrap
 D vtable for CEconTool_GrantOperationPass
 D vtable for CEconTool_ItemDynamicRecipe
 D vtable for CEconTool_ItemDynamicRecipe::CBaseRecipeComponent
 D vtable for CEconTool_ItemDynamicRecipe::CDynamicRecipeComponentDefinedItem
 D vtable for CEconTool_ItemDynamicRecipe::CDynamicRecipeComponentLootList
 D vtable for CEconTool_ItemEaterRecharger
 D vtable for CEconTool_KillStreakifier
 D vtable for CEconTool_NameTag
 D vtable for CEconTool_Noisemaker
 D vtable for CEconTool_PaintCan
 D vtable for CEconTool_StrangeCountTransfer
 D vtable for CEconTool_StrangePart
 D vtable for CEconTool_StrangePartRestriction
 D vtable for CEconTool_Strangifier
 D vtable for CEconTool_TFEventEnableHalloween
 D vtable for CEconTool_TFSpellbookPage
 D vtable for CEconTool_Unusualifier
 D vtable for CEconTool_UpgradeCard
 D vtable for CEconTool_WeddingRing
 D vtable for CEconTool_WrappedGift
 D vtable for CEconTool_Xifier
 D vtable for CEconWearable
 D vtable for CEffectsServer
 D vtable for CEmbers
 D vtable for CEmptyConVar
 D vtable for CEnableMotionFixup
 D vtable for CEnableTemporaryHalloweenIssue
 D vtable for CEntFireAutoCompletionFunctor
 D vtable for CEntityBird
 D vtable for CEntityBlocker
 D vtable for CEntityClassList<CPhysicsNPCSolver>
 D vtable for CEntityClassList<CPointCamera>
 D vtable for CEntityClassList<CSkyCamera>
 D vtable for CEntityDataInstantiator<CWatcherList>
 D vtable for CEntityDataInstantiator<ModelScale>
 D vtable for CEntityDataInstantiator<StepSimulationData>
 D vtable for CEntityDataInstantiator<groundlink_t>
 D vtable for CEntityDataInstantiator<physicspushlist_t>
 D vtable for CEntityDataInstantiator<touchlink_t>
 D vtable for CEntityDataInstantiator<vphysicsupdateai_t>
 D vtable for CEntityDissolve
 D vtable for CEntityFactory<CAISound>
 D vtable for CEntityFactory<CAI_AllySpeechManager>
 D vtable for CEntityFactory<CAI_AssaultGoal>
 D vtable for CEntityFactory<CAI_BattleLine>
 D vtable for CEntityFactory<CAI_ChangeHintGroup>
 D vtable for CEntityFactory<CAI_ChangeTarget>
 D vtable for CEntityFactory<CAI_DynamicLink>
 D vtable for CEntityFactory<CAI_DynamicLinkController>
 D vtable for CEntityFactory<CAI_FollowGoal>
 D vtable for CEntityFactory<CAI_Hint>
 D vtable for CEntityFactory<CAI_LeadGoal>
 D vtable for CEntityFactory<CAI_LeadGoal_Weapon>
 D vtable for CEntityFactory<CAI_NetworkManager>
 D vtable for CEntityFactory<CAI_RadialLinkController>
 D vtable for CEntityFactory<CAI_Relationship>
 D vtable for CEntityFactory<CAI_ScriptConditions>
 D vtable for CEntityFactory<CAI_ScriptedSchedule>
 D vtable for CEntityFactory<CAI_ScriptedSentence>
 D vtable for CEntityFactory<CAI_ScriptedSequence>
 D vtable for CEntityFactory<CAI_SpeechFilter>
 D vtable for CEntityFactory<CAI_StandoffGoal>
 D vtable for CEntityFactory<CAI_TestHull>
 D vtable for CEntityFactory<CAchievementZone>
 D vtable for CEntityFactory<CAmbientGeneric>
 D vtable for CEntityFactory<CAmmoPack>
 D vtable for CEntityFactory<CAmmoPackMedium>
 D vtable for CEntityFactory<CAmmoPackSmall>
 D vtable for CEntityFactory<CAreaPortal>
 D vtable for CEntityFactory<CArenaLogic>
 D vtable for CEntityFactory<CArmor>
 D vtable for CEntityFactory<CAssaultPoint>
 D vtable for CEntityFactory<CBallPlayerToucher>
 D vtable for CEntityFactory<CBaseButton>
 D vtable for CEntityFactory<CBaseDMStart>
 D vtable for CEntityFactory<CBaseDoor>
 D vtable for CEntityFactory<CBaseEntity>
 D vtable for CEntityFactory<CBaseFilter>
 D vtable for CEntityFactory<CBaseFlex>
 D vtable for CEntityFactory<CBaseGrenade>
 D vtable for CEntityFactory<CBaseGrenadeConcussion>
 D vtable for CEntityFactory<CBaseGrenadeContact>
 D vtable for CEntityFactory<CBaseGrenadeTimed>
 D vtable for CEntityFactory<CBaseMoveBehavior>
 D vtable for CEntityFactory<CBaseTrigger>
 D vtable for CEntityFactory<CBaseViewModel>
 D vtable for CEntityFactory<CBeam>
 D vtable for CEntityFactory<CBlood>
 D vtable for CEntityFactory<CBoneFollower>
 D vtable for CEntityFactory<CBonusDuckPickup>
 D vtable for CEntityFactory<CBonusPack>
 D vtable for CEntityFactory<CBonusRoundLogic>
 D vtable for CEntityFactory<CBotNPCArcher>
 D vtable for CEntityFactory<CBotNPCDecoy>
 D vtable for CEntityFactory<CBreakable>
 D vtable for CEntityFactory<CBreakableSurface>
 D vtable for CEntityFactory<CBubbling>
 D vtable for CEntityFactory<CCPTimerLogic>
 D vtable for CEntityFactory<CCaptureFlag>
 D vtable for CEntityFactory<CCaptureFlagReturnIcon>
 D vtable for CEntityFactory<CCaptureZone>
 D vtable for CEntityFactory<CChangeClassZone>
 D vtable for CEntityFactory<CChangeLevel>
 D vtable for CEntityFactory<CColorCorrection>
 D vtable for CEntityFactory<CColorCorrectionVolume>
 D vtable for CEntityFactory<CCommentaryAuto>
 D vtable for CEntityFactory<CCommentaryViewPosition>
 D vtable for CEntityFactory<CCompetitiveLogic>
 D vtable for CEntityFactory<CConstraintAnchor>
 D vtable for CEntityFactory<CCredits>
 D vtable for CEntityFactory<CCurrencyPack>
 D vtable for CEntityFactory<CCurrencyPackCustom>
 D vtable for CEntityFactory<CCurrencyPackMedium>
 D vtable for CEntityFactory<CCurrencyPackSmall>
 D vtable for CEntityFactory<CDebugHistory>
 D vtable for CEntityFactory<CDecal>
 D vtable for CEntityFactory<CDispenserTouchTrigger>
 D vtable for CEntityFactory<CDynamicLight>
 D vtable for CEntityFactory<CDynamicProp>
 D vtable for CEntityFactory<CEconWearable>
 D vtable for CEntityFactory<CEmbers>
 D vtable for CEntityFactory<CEnableMotionFixup>
 D vtable for CEntityFactory<CEntityBird>
 D vtable for CEntityFactory<CEntityBlocker>
 D vtable for CEntityFactory<CEntityDissolve>
 D vtable for CEntityFactory<CEntityFlame>
 D vtable for CEntityFactory<CEntityParticleTrail>
 D vtable for CEntityFactory<CEntitySpawnManager>
 D vtable for CEntityFactory<CEntitySpawnPoint>
 D vtable for CEntityFactory<CEnvBeam>
 D vtable for CEntityFactory<CEnvBeverage>
 D vtable for CEntityFactory<CEnvDetailController>
 D vtable for CEntityFactory<CEnvDustPuff>
 D vtable for CEntityFactory<CEnvEffectsScript>
 D vtable for CEntityFactory<CEnvEntityMaker>
 D vtable for CEntityFactory<CEnvExplosion>
 D vtable for CEntityFactory<CEnvFade>
 D vtable for CEntityFactory<CEnvFireSensor>
 D vtable for CEntityFactory<CEnvFireSource>
 D vtable for CEntityFactory<CEnvFunnel>
 D vtable for CEntityFactory<CEnvGlobal>
 D vtable for CEntityFactory<CEnvGunfire>
 D vtable for CEntityFactory<CEnvHudHint>
 D vtable for CEntityFactory<CEnvLaser>
 D vtable for CEntityFactory<CEnvLight>
 D vtable for CEntityFactory<CEnvMicrophone>
 D vtable for CEntityFactory<CEnvMuzzleFlash>
 D vtable for CEntityFactory<CEnvParticleScript>
 D vtable for CEntityFactory<CEnvPlayerSurfaceTrigger>
 D vtable for CEntityFactory<CEnvProjectedTexture>
 D vtable for CEntityFactory<CEnvQuadraticBeam>
 D vtable for CEntityFactory<CEnvScreenEffect>
 D vtable for CEntityFactory<CEnvScreenOverlay>
 D vtable for CEntityFactory<CEnvShake>
 D vtable for CEntityFactory<CEnvShooter>
 D vtable for CEntityFactory<CEnvSoundscape>
 D vtable for CEntityFactory<CEnvSoundscapeProxy>
 D vtable for CEntityFactory<CEnvSoundscapeTriggerable>
 D vtable for CEntityFactory<CEnvSpark>
 D vtable for CEntityFactory<CEnvSplash>
 D vtable for CEntityFactory<CEnvTonemapController>
 D vtable for CEntityFactory<CEnvTracer>
 D vtable for CEntityFactory<CEnvViewPunch>
 D vtable for CEntityFactory<CEnvWind>
 D vtable for CEntityFactory<CEnvZoom>
 D vtable for CEntityFactory<CEventQueueSaveLoadProxy>
 D vtable for CEntityFactory<CExtraMapEntity_Carrier>
 D vtable for CEntityFactory<CExtraMapEntity_Rocket>
 D vtable for CEntityFactory<CExtraMapEntity_Saucer>
 D vtable for CEntityFactory<CExtraMapEntity_Sign>
 D vtable for CEntityFactory<CEyeballBoss>
 D vtable for CEntityFactory<CFilterClass>
 D vtable for CEntityFactory<CFilterEnemy>
 D vtable for CEntityFactory<CFilterMassGreater>
 D vtable for CEntityFactory<CFilterMultiple>
 D vtable for CEntityFactory<CFilterName>
 D vtable for CEntityFactory<CFilterTFBotHasTag>
 D vtable for CEntityFactory<CFilterTFCanCap>
 D vtable for CEntityFactory<CFilterTFClass>
 D vtable for CEntityFactory<CFilterTFCondition>
 D vtable for CEntityFactory<CFilterTFTeam>
 D vtable for CEntityFactory<CFire>
 D vtable for CEntityFactory<CFireSmoke>
 D vtable for CEntityFactory<CFireTrail>
 D vtable for CEntityFactory<CFish>
 D vtable for CEntityFactory<CFishPool>
 D vtable for CEntityFactory<CFlagDetectionZone>
 D vtable for CEntityFactory<CFlextalkActor>
 D vtable for CEntityFactory<CFogController>
 D vtable for CEntityFactory<CFuncAreaPortalWindow>
 D vtable for CEntityFactory<CFuncBrush>
 D vtable for CEntityFactory<CFuncConveyor>
 D vtable for CEntityFactory<CFuncFlagAlertZone>
 D vtable for CEntityFactory<CFuncForceField>
 D vtable for CEntityFactory<CFuncIllusionary>
 D vtable for CEntityFactory<CFuncLadder>
 D vtable for CEntityFactory<CFuncLadderEndPoint>
 D vtable for CEntityFactory<CFuncMonitor>
 D vtable for CEntityFactory<CFuncMoveLinear>
 D vtable for CEntityFactory<CFuncNavAvoid>
 D vtable for CEntityFactory<CFuncNavBlocker>
 D vtable for CEntityFactory<CFuncNavObstruction>
 D vtable for CEntityFactory<CFuncNavPrefer>
 D vtable for CEntityFactory<CFuncNavPrerequisite>
 D vtable for CEntityFactory<CFuncNoBuild>
 D vtable for CEntityFactory<CFuncOccluder>
 D vtable for CEntityFactory<CFuncPasstimeGoal>
 D vtable for CEntityFactory<CFuncPasstimeGoalieZone>
 D vtable for CEntityFactory<CFuncPasstimeNoBallZone>
 D vtable for CEntityFactory<CFuncPlat>
 D vtable for CEntityFactory<CFuncPlatRot>
 D vtable for CEntityFactory<CFuncReflectiveGlass>
 D vtable for CEntityFactory<CFuncRespawnFlagZone>
 D vtable for CEntityFactory<CFuncRespawnRoom>
 D vtable for CEntityFactory<CFuncRespawnRoomVisualizer>
 D vtable for CEntityFactory<CFuncRotating>
 D vtable for CEntityFactory<CFuncSmokeVolume>
 D vtable for CEntityFactory<CFuncSuggestedBuild>
 D vtable for CEntityFactory<CFuncTankTrain>
 D vtable for CEntityFactory<CFuncTrackAuto>
 D vtable for CEntityFactory<CFuncTrackChange>
 D vtable for CEntityFactory<CFuncTrackTrain>
 D vtable for CEntityFactory<CFuncTrain>
 D vtable for CEntityFactory<CFuncTrainControls>
 D vtable for CEntityFactory<CFuncVPhysicsClip>
 D vtable for CEntityFactory<CFuncVehicleClip>
 D vtable for CEntityFactory<CFuncWall>
 D vtable for CEntityFactory<CFuncWallToggle>
 D vtable for CEntityFactory<CFunc_DustCloud>
 D vtable for CEntityFactory<CFunc_DustMotes>
 D vtable for CEntityFactory<CFunc_LOD>
 D vtable for CEntityFactory<CGameEnd>
 D vtable for CEntityFactory<CGameGibManager>
 D vtable for CEntityFactory<CGamePlayerEquip>
 D vtable for CEntityFactory<CGamePlayerTeam>
 D vtable for CEntityFactory<CGamePlayerZone>
 D vtable for CEntityFactory<CGameScore>
 D vtable for CEntityFactory<CGameText>
 D vtable for CEntityFactory<CGameUI>
 D vtable for CEntityFactory<CGameWeaponManager>
 D vtable for CEntityFactory<CGenericActor>
 D vtable for CEntityFactory<CGenericFlexCycler>
 D vtable for CEntityFactory<CGenericNPC>
 D vtable for CEntityFactory<CGhost>
 D vtable for CEntityFactory<CGib>
 D vtable for CEntityFactory<CGibShooter>
 D vtable for CEntityFactory<CGunTarget>
 D vtable for CEntityFactory<CHalloweenGiftPickup>
 D vtable for CEntityFactory<CHalloweenGiftSpawnLocation>
 D vtable for CEntityFactory<CHalloweenPickup>
 D vtable for CEntityFactory<CHalloweenSoulPack>
 D vtable for CEntityFactory<CHandleDummy>
 D vtable for CEntityFactory<CHandleTest>
 D vtable for CEntityFactory<CHeadlessHatman>
 D vtable for CEntityFactory<CHealthAmmoKit>
 D vtable for CEntityFactory<CHealthKit>
 D vtable for CEntityFactory<CHealthKitMedium>
 D vtable for CEntityFactory<CHealthKitSmall>
 D vtable for CEntityFactory<CHightower_TeleportVortex>
 D vtable for CEntityFactory<CHybridMap_CTF_CP>
 D vtable for CEntityFactory<CInfoCameraLink>
 D vtable for CEntityFactory<CInfoIntermission>
 D vtable for CEntityFactory<CInfoLadderDismount>
 D vtable for CEntityFactory<CInfoLightingRelative>
 D vtable for CEntityFactory<CInfoMassCenter>
 D vtable for CEntityFactory<CInfoOverlayAccessor>
 D vtable for CEntityFactory<CInfoTarget>
 D vtable for CEntityFactory<CInstancedSceneEntity>
 D vtable for CEntityFactory<CIntroViewpoint>
 D vtable for CEntityFactory<CItemSoda>
 D vtable for CEntityFactory<CKeepUpright>
 D vtable for CEntityFactory<CKothLogic>
 D vtable for CEntityFactory<CLaserDot>
 D vtable for CEntityFactory<CLight>
 D vtable for CEntityFactory<CLightGlow>
 D vtable for CEntityFactory<CLogicActiveAutosave>
 D vtable for CEntityFactory<CLogicAuto>
 D vtable for CEntityFactory<CLogicAutosave>
 D vtable for CEntityFactory<CLogicBranch>
 D vtable for CEntityFactory<CLogicBranchList>
 D vtable for CEntityFactory<CLogicCase>
 D vtable for CEntityFactory<CLogicCollisionPair>
 D vtable for CEntityFactory<CLogicCompare>
 D vtable for CEntityFactory<CLogicCompareInteger>
 D vtable for CEntityFactory<CLogicLineToEntity>
 D vtable for CEntityFactory<CLogicMannPower>
 D vtable for CEntityFactory<CLogicMeasureMovement>
 D vtable for CEntityFactory<CLogicNavigation>
 D vtable for CEntityFactory<CLogicOnHoliday>
 D vtable for CEntityFactory<CLogicRelay>
 D vtable for CEntityFactory<CMannVsMachineLogic>
 D vtable for CEntityFactory<CMannVsMachineStats>
 D vtable for CEntityFactory<CMaterialModifyControl>
 D vtable for CEntityFactory<CMathColorBlend>
 D vtable for CEntityFactory<CMathCounter>
 D vtable for CEntityFactory<CMathRemap>
 D vtable for CEntityFactory<CMedievalLogic>
 D vtable for CEntityFactory<CMerasmus>
 D vtable for CEntityFactory<CMerasmusDancer>
 D vtable for CEntityFactory<CMessage>
 D vtable for CEntityFactory<CMessageEntity>
 D vtable for CEntityFactory<CMomentaryRotButton>
 D vtable for CEntityFactory<CMonsterResource>
 D vtable for CEntityFactory<CMovementSpeedMod>
 D vtable for CEntityFactory<CMultiSource>
 D vtable for CEntityFactory<CMultipleEscort>
 D vtable for CEntityFactory<CNPCMaker>
 D vtable for CEntityFactory<CNPCSpawnDestination>
 D vtable for CEntityFactory<CNPC_Furniture>
 D vtable for CEntityFactory<CNPC_VehicleDriver>
 D vtable for CEntityFactory<CNoGrenadesZone>
 D vtable for CEntityFactory<CNodeEnt>
 D vtable for CEntityFactory<CNullEntity>
 D vtable for CEntityFactory<CObjectCartDispenser>
 D vtable for CEntityFactory<CObjectDispenser>
 D vtable for CEntityFactory<CObjectSapper>
 D vtable for CEntityFactory<CObjectSentrygun>
 D vtable for CEntityFactory<CObjectTeleporter>
 D vtable for CEntityFactory<CObserverPoint>
 D vtable for CEntityFactory<COrnamentProp>
 D vtable for CEntityFactory<CParticleFire>
 D vtable for CEntityFactory<CParticleLight>
 D vtable for CEntityFactory<CParticlePerformanceMonitor>
 D vtable for CEntityFactory<CParticleSystem>
 D vtable for CEntityFactory<CPasstimeBall>
 D vtable for CEntityFactory<CPasstimeBallSpawn>
 D vtable for CEntityFactory<CPasstimeGun>
 D vtable for CEntityFactory<CPathCorner>
 D vtable for CEntityFactory<CPathCornerCrash>
 D vtable for CEntityFactory<CPathKeyFrame>
 D vtable for CEntityFactory<CPathTrack>
 D vtable for CEntityFactory<CPhysBallSocket>
 D vtable for CEntityFactory<CPhysBox>
 D vtable for CEntityFactory<CPhysBoxMultiplayer>
 D vtable for CEntityFactory<CPhysConstraintSystem>
 D vtable for CEntityFactory<CPhysConvert>
 D vtable for CEntityFactory<CPhysExplosion>
 D vtable for CEntityFactory<CPhysFixed>
 D vtable for CEntityFactory<CPhysHinge>
 D vtable for CEntityFactory<CPhysImpact>
 D vtable for CEntityFactory<CPhysLength>
 D vtable for CEntityFactory<CPhysMagnet>
 D vtable for CEntityFactory<CPhysMotor>
 D vtable for CEntityFactory<CPhysPulley>
 D vtable for CEntityFactory<CPhysSlideConstraint>
 D vtable for CEntityFactory<CPhysSphere>
 D vtable for CEntityFactory<CPhysThruster>
 D vtable for CEntityFactory<CPhysTorque>
 D vtable for CEntityFactory<CPhysicsCannister>
 D vtable for CEntityFactory<CPhysicsEntitySolver>
 D vtable for CEntityFactory<CPhysicsNPCSolver>
 D vtable for CEntityFactory<CPhysicsProp>
 D vtable for CEntityFactory<CPhysicsPropMultiplayer>
 D vtable for CEntityFactory<CPhysicsPropRespawnable>
 D vtable for CEntityFactory<CPhysicsSpring>
 D vtable for CEntityFactory<CPhysicsWire>
 D vtable for CEntityFactory<CPlasma>
 D vtable for CEntityFactory<CPlayerDestructionDispenser>
 D vtable for CEntityFactory<CPlayerResource>
 D vtable for CEntityFactory<CPointAngleSensor>
 D vtable for CEntityFactory<CPointAngularVelocitySensor>
 D vtable for CEntityFactory<CPointBonusMapsAccessor>
 D vtable for CEntityFactory<CPointCamera>
 D vtable for CEntityFactory<CPointClientCommand>
 D vtable for CEntityFactory<CPointCommentaryNode>
 D vtable for CEntityFactory<CPointDevShotCamera>
 D vtable for CEntityFactory<CPointEntity>
 D vtable for CEntityFactory<CPointGamestatsCounter>
 D vtable for CEntityFactory<CPointHurt>
 D vtable for CEntityFactory<CPointNavInterface>
 D vtable for CEntityFactory<CPointPlayerMoveConstraint>
 D vtable for CEntityFactory<CPointPopulatorInterface>
 D vtable for CEntityFactory<CPointProximitySensor>
 D vtable for CEntityFactory<CPointPush>
 D vtable for CEntityFactory<CPointServerCommand>
 D vtable for CEntityFactory<CPointSpotlight>
 D vtable for CEntityFactory<CPointTeleport>
 D vtable for CEntityFactory<CPointTemplate>
 D vtable for CEntityFactory<CPointVelocitySensor>
 D vtable for CEntityFactory<CPopulationManager>
 D vtable for CEntityFactory<CPopulatorInternalSpawnPoint>
 D vtable for CEntityFactory<CPoseController>
 D vtable for CEntityFactory<CPowerupVolume>
 D vtable for CEntityFactory<CPrecipitation>
 D vtable for CEntityFactory<CProjectedDecal>
 D vtable for CEntityFactory<CPropDoorRotating>
 D vtable for CEntityFactory<CPropSoccerBall>
 D vtable for CEntityFactory<CPropVehicle>
 D vtable for CEntityFactory<CPropVehicleDriveable>
 D vtable for CEntityFactory<CPushable>
 D vtable for CEntityFactory<CRagGib>
 D vtable for CEntityFactory<CRagdollBoogie>
 D vtable for CEntityFactory<CRagdollConstraint>
 D vtable for CEntityFactory<CRagdollMagnet>
 D vtable for CEntityFactory<CRagdollManager>
 D vtable for CEntityFactory<CRagdollProp>
 D vtable for CEntityFactory<CRagdollPropAttached>
 D vtable for CEntityFactory<CRallyPoint>
 D vtable for CEntityFactory<CRegenerateZone>
 D vtable for CEntityFactory<CRevertSaved>
 D vtable for CEntityFactory<CRobotDestructionVaultTrigger>
 D vtable for CEntityFactory<CRobotDispenser>
 D vtable for CEntityFactory<CRopeAnchor>
 D vtable for CEntityFactory<CRopeKeyframe>
 D vtable for CEntityFactory<CRotButton>
 D vtable for CEntityFactory<CRotDoor>
 D vtable for CEntityFactory<CRotorWashShooter>
 D vtable for CEntityFactory<CSceneEntity>
 D vtable for CEntityFactory<CSceneListManager>
 D vtable for CEntityFactory<CSceneManager>
 D vtable for CEntityFactory<CScriptedTarget>
 D vtable for CEntityFactory<CServerRagdollTrigger>
 D vtable for CEntityFactory<CShadowControl>
 D vtable for CEntityFactory<CShower>
 D vtable for CEntityFactory<CSimpleBot>
 D vtable for CEntityFactory<CSimplePhysicsBrush>
 D vtable for CEntityFactory<CSimplePhysicsProp>
 D vtable for CEntityFactory<CSkyCamera>
 D vtable for CEntityFactory<CSlideshowDisplay>
 D vtable for CEntityFactory<CSmokeStack>
 D vtable for CEntityFactory<CSniperDot>
 D vtable for CEntityFactory<CSoundEnt>
 D vtable for CEntityFactory<CSpellPickup>
 D vtable for CEntityFactory<CSpotlightEnd>
 D vtable for CEntityFactory<CSprayCan>
 D vtable for CEntityFactory<CSprite>
 D vtable for CEntityFactory<CSpriteOriented>
 D vtable for CEntityFactory<CSpriteTrail>
 D vtable for CEntityFactory<CSteamJet>
 D vtable for CEntityFactory<CStripWeapons>
 D vtable for CEntityFactory<CSun>
 D vtable for CEntityFactory<CTFAmmoPack>
 D vtable for CEntityFactory<CTFArcherProxy>
 D vtable for CEntityFactory<CTFBall_Ornament>
 D vtable for CEntityFactory<CTFBaseBoss>
 D vtable for CEntityFactory<CTFBat>
 D vtable for CEntityFactory<CTFBat_Fish>
 D vtable for CEntityFactory<CTFBat_Giftwrap>
 D vtable for CEntityFactory<CTFBat_Wood>
 D vtable for CEntityFactory<CTFBonesaw>
 D vtable for CEntityFactory<CTFBot>
 D vtable for CEntityFactory<CTFBotActionPoint>
 D vtable for CEntityFactory<CTFBotController>
 D vtable for CEntityFactory<CTFBotGenerator>
 D vtable for CEntityFactory<CTFBotHint>
 D vtable for CEntityFactory<CTFBotHintEngineerNest>
 D vtable for CEntityFactory<CTFBotHintSentrygun>
 D vtable for CEntityFactory<CTFBotHintTeleporterExit>
 D vtable for CEntityFactory<CTFBotProxy>
 D vtable for CEntityFactory<CTFBotRoster>
 D vtable for CEntityFactory<CTFBottle>
 D vtable for CEntityFactory<CTFBuffItem>
 D vtable for CEntityFactory<CTFCannon>
 D vtable for CEntityFactory<CTFChargedSMG>
 D vtable for CEntityFactory<CTFCleaver>
 D vtable for CEntityFactory<CTFClub>
 D vtable for CEntityFactory<CTFCompoundBow>
 D vtable for CEntityFactory<CTFCrossbow>
 D vtable for CEntityFactory<CTFDRGPomson>
 D vtable for CEntityFactory<CTFDroppedWeapon>
 D vtable for CEntityFactory<CTFFireAxe>
 D vtable for CEntityFactory<CTFFists>
 D vtable for CEntityFactory<CTFFlameEntity>
 D vtable for CEntityFactory<CTFFlameThrower>
 D vtable for CEntityFactory<CTFFlareGun>
 D vtable for CEntityFactory<CTFFlareGun_Revenge>
 D vtable for CEntityFactory<CTFForceRespawn>
 D vtable for CEntityFactory<CTFGameRulesProxy>
 D vtable for CEntityFactory<CTFGenericBomb>
 D vtable for CEntityFactory<CTFGlow>
 D vtable for CEntityFactory<CTFGrapplingHook>
 D vtable for CEntityFactory<CTFGrenadeLauncher>
 D vtable for CEntityFactory<CTFGrenadePipebombProjectile>
 D vtable for CEntityFactory<CTFHalloweenFortuneTeller>
 D vtable for CEntityFactory<CTFHalloweenMinigame>
 D vtable for CEntityFactory<CTFHalloweenMinigame_FallingPlatforms>
 D vtable for CEntityFactory<CTFHellZap>
 D vtable for CEntityFactory<CTFHolidayEntity>
 D vtable for CEntityFactory<CTFHudNotify>
 D vtable for CEntityFactory<CTFInfoPowerupSpawn>
 D vtable for CEntityFactory<CTFIntermission>
 D vtable for CEntityFactory<CTFJar>
 D vtable for CEntityFactory<CTFJarMilk>
 D vtable for CEntityFactory<CTFKatana>
 D vtable for CEntityFactory<CTFKnife>
 D vtable for CEntityFactory<CTFLaserPointer>
 D vtable for CEntityFactory<CTFLunchBox>
 D vtable for CEntityFactory<CTFLunchBox_Drink>
 D vtable for CEntityFactory<CTFMechanicalArm>
 D vtable for CEntityFactory<CTFMedigunShield>
 D vtable for CEntityFactory<CTFMerasmusTrickOrTreatProp>
 D vtable for CEntityFactory<CTFMiniGame>
 D vtable for CEntityFactory<CTFMinigameLogic>
 D vtable for CEntityFactory<CTFMinigun>
 D vtable for CEntityFactory<CTFObjectiveResource>
 D vtable for CEntityFactory<CTFPEPBrawlerBlaster>
 D vtable for CEntityFactory<CTFParachute>
 D vtable for CEntityFactory<CTFParachute_Primary>
 D vtable for CEntityFactory<CTFParachute_Secondary>
 D vtable for CEntityFactory<CTFParticleCannon>
 D vtable for CEntityFactory<CTFPasstimeLogic>
 D vtable for CEntityFactory<CTFPipebombLauncher>
 D vtable for CEntityFactory<CTFPistol>
 D vtable for CEntityFactory<CTFPistol_Scout>
 D vtable for CEntityFactory<CTFPistol_ScoutPrimary>
 D vtable for CEntityFactory<CTFPistol_ScoutSecondary>
 D vtable for CEntityFactory<CTFPlayer>
 D vtable for CEntityFactory<CTFPlayerDestructionLogic>
 D vtable for CEntityFactory<CTFPlayerResource>
 D vtable for CEntityFactory<CTFPointWeaponMimic>
 D vtable for CEntityFactory<CTFPowerupBottle>
 D vtable for CEntityFactory<CTFProjectile_Arrow>
 D vtable for CEntityFactory<CTFProjectile_Cleaver>
 D vtable for CEntityFactory<CTFProjectile_EnergyBall>
 D vtable for CEntityFactory<CTFProjectile_EnergyRing>
 D vtable for CEntityFactory<CTFProjectile_Flare>
 D vtable for CEntityFactory<CTFProjectile_GrapplingHook>
 D vtable for CEntityFactory<CTFProjectile_HealingBolt>
 D vtable for CEntityFactory<CTFProjectile_Jar>
 D vtable for CEntityFactory<CTFProjectile_JarMilk>
 D vtable for CEntityFactory<CTFProjectile_Rocket>
 D vtable for CEntityFactory<CTFProjectile_SentryRocket>
 D vtable for CEntityFactory<CTFProjectile_SpellBats>
 D vtable for CEntityFactory<CTFProjectile_SpellFireball>
 D vtable for CEntityFactory<CTFProjectile_SpellKartBats>
 D vtable for CEntityFactory<CTFProjectile_SpellKartOrb>
 D vtable for CEntityFactory<CTFProjectile_SpellLightningOrb>
 D vtable for CEntityFactory<CTFProjectile_SpellMeteorShower>
 D vtable for CEntityFactory<CTFProjectile_SpellMirv>
 D vtable for CEntityFactory<CTFProjectile_SpellPumpkin>
 D vtable for CEntityFactory<CTFProjectile_SpellSpawnBoss>
 D vtable for CEntityFactory<CTFProjectile_SpellSpawnHorde>
 D vtable for CEntityFactory<CTFProjectile_SpellSpawnZombie>
 D vtable for CEntityFactory<CTFProjectile_SpellTransposeTeleport>
 D vtable for CEntityFactory<CTFProjectile_Syringe>
 D vtable for CEntityFactory<CTFProjectile_Throwable>
 D vtable for CEntityFactory<CTFProjectile_ThrowableBreadMonster>
 D vtable for CEntityFactory<CTFProjectile_ThrowableBrick>
 D vtable for CEntityFactory<CTFProjectile_ThrowableRepel>
 D vtable for CEntityFactory<CTFPumpkinBomb>
 D vtable for CEntityFactory<CTFRagdoll>
 D vtable for CEntityFactory<CTFRaygun>
 D vtable for CEntityFactory<CTFReviveMarker>
 D vtable for CEntityFactory<CTFRevolver>
 D vtable for CEntityFactory<CTFRobotArm>
 D vtable for CEntityFactory<CTFRobotDestructionLogic>
 D vtable for CEntityFactory<CTFRobotDestruction_Robot>
 D vtable for CEntityFactory<CTFRobotDestruction_RobotGroup>
 D vtable for CEntityFactory<CTFRobotDestruction_RobotSpawn>
 D vtable for CEntityFactory<CTFRocketLauncher>
 D vtable for CEntityFactory<CTFRocketLauncher_AirStrike>
 D vtable for CEntityFactory<CTFRocketLauncher_DirectHit>
 D vtable for CEntityFactory<CTFRune>
 D vtable for CEntityFactory<CTFRuneTemp>
 D vtable for CEntityFactory<CTFRuneTempCrit>
 D vtable for CEntityFactory<CTFRuneTempUber>
 D vtable for CEntityFactory<CTFSMG>
 D vtable for CEntityFactory<CTFScatterGun>
 D vtable for CEntityFactory<CTFShotgun>
 D vtable for CEntityFactory<CTFShotgunBuildingRescue>
 D vtable for CEntityFactory<CTFShotgun_HWG>
 D vtable for CEntityFactory<CTFShotgun_Pyro>
 D vtable for CEntityFactory<CTFShotgun_Revenge>
 D vtable for CEntityFactory<CTFShotgun_Soldier>
 D vtable for CEntityFactory<CTFShovel>
 D vtable for CEntityFactory<CTFSniperRifle>
 D vtable for CEntityFactory<CTFSniperRifleClassic>
 D vtable for CEntityFactory<CTFSniperRifleDecap>
 D vtable for CEntityFactory<CTFSodaPopper>
 D vtable for CEntityFactory<CTFSpawner>
 D vtable for CEntityFactory<CTFSpellBook>
 D vtable for CEntityFactory<CTFSpell_MeteorShowerSpawner>
 D vtable for CEntityFactory<CTFStickBomb>
 D vtable for CEntityFactory<CTFStunBall>
 D vtable for CEntityFactory<CTFSword>
 D vtable for CEntityFactory<CTFSyringeGun>
 D vtable for CEntityFactory<CTFTankBoss>
 D vtable for CEntityFactory<CTFTankDestruction>
 D vtable for CEntityFactory<CTFTargetDummy>
 D vtable for CEntityFactory<CTFTauntProp>
 D vtable for CEntityFactory<CTFTeam>
 D vtable for CEntityFactory<CTFTeamSpawn>
 D vtable for CEntityFactory<CTFTeleportLocation>
 D vtable for CEntityFactory<CTFTrainingDynamicProp>
 D vtable for CEntityFactory<CTFViewModel>
 D vtable for CEntityFactory<CTFWeaponBase>
 D vtable for CEntityFactory<CTFWeaponBaseGrenadeProj>
 D vtable for CEntityFactory<CTFWeaponBaseMelee>
 D vtable for CEntityFactory<CTFWeaponBaseMerasmusGrenade>
 D vtable for CEntityFactory<CTFWeaponBuilder>
 D vtable for CEntityFactory<CTFWeaponInvis>
 D vtable for CEntityFactory<CTFWeaponPDAExpansion_Dispenser>
 D vtable for CEntityFactory<CTFWeaponPDAExpansion_Teleporter>
 D vtable for CEntityFactory<CTFWeaponPDA_Engineer_Build>
 D vtable for CEntityFactory<CTFWeaponPDA_Engineer_Destroy>
 D vtable for CEntityFactory<CTFWeaponPDA_Spy>
 D vtable for CEntityFactory<CTFWeaponSapper>
 D vtable for CEntityFactory<CTFWearable>
 D vtable for CEntityFactory<CTFWearableDemoShield>
 D vtable for CEntityFactory<CTFWearableLevelableItem>
 D vtable for CEntityFactory<CTFWearableRobotArm>
 D vtable for CEntityFactory<CTFWearableVM>
 D vtable for CEntityFactory<CTFWrench>
 D vtable for CEntityFactory<CTankTargetChange>
 D vtable for CEntityFactory<CTankTrainAI>
 D vtable for CEntityFactory<CTargetCDAudioRep>
 D vtable for CEntityFactory<CTargetChangeGravity>
 D vtable for CEntityFactory<CTeam>
 D vtable for CEntityFactory<CTeamControlPoint>
 D vtable for CEntityFactory<CTeamControlPointMaster>
 D vtable for CEntityFactory<CTeamControlPointRound>
 D vtable for CEntityFactory<CTeamRoundTimer>
 D vtable for CEntityFactory<CTeamTrainWatcher>
 D vtable for CEntityFactory<CTeamplayRoundWin>
 D vtable for CEntityFactory<CTeleportVortex>
 D vtable for CEntityFactory<CTempEntTester>
 D vtable for CEntityFactory<CTemplateNPCMaker>
 D vtable for CEntityFactory<CTesla>
 D vtable for CEntityFactory<CTestEffect>
 D vtable for CEntityFactory<CTestTraceline>
 D vtable for CEntityFactory<CTest_ProxyToggle_Networkable>
 D vtable for CEntityFactory<CTextureToggle>
 D vtable for CEntityFactory<CTimerEntity>
 D vtable for CEntityFactory<CTrainingAnnotation>
 D vtable for CEntityFactory<CTrainingModeLogic>
 D vtable for CEntityFactory<CTriggerAddOrRemoveTFPlayerAttributes>
 D vtable for CEntityFactory<CTriggerAddTFPlayerCondition>
 D vtable for CEntityFactory<CTriggerApplyImpulse>
 D vtable for CEntityFactory<CTriggerAreaCapture>
 D vtable for CEntityFactory<CTriggerBotTag>
 D vtable for CEntityFactory<CTriggerBrush>
 D vtable for CEntityFactory<CTriggerCDAudio>
 D vtable for CEntityFactory<CTriggerCamera>
 D vtable for CEntityFactory<CTriggerCatapult>
 D vtable for CEntityFactory<CTriggerGravity>
 D vtable for CEntityFactory<CTriggerHurt>
 D vtable for CEntityFactory<CTriggerIgnite>
 D vtable for CEntityFactory<CTriggerIgniteArrows>
 D vtable for CEntityFactory<CTriggerImpact>
 D vtable for CEntityFactory<CTriggerLook>
 D vtable for CEntityFactory<CTriggerMultiple>
 D vtable for CEntityFactory<CTriggerOnce>
 D vtable for CEntityFactory<CTriggerParticle>
 D vtable for CEntityFactory<CTriggerPasstimeBall>
 D vtable for CEntityFactory<CTriggerPlayerMovement>
 D vtable for CEntityFactory<CTriggerPlayerRespawnOverride>
 D vtable for CEntityFactory<CTriggerProximity>
 D vtable for CEntityFactory<CTriggerPush>
 D vtable for CEntityFactory<CTriggerRemove>
 D vtable for CEntityFactory<CTriggerRemoveTFPlayerCondition>
 D vtable for CEntityFactory<CTriggerSave>
 D vtable for CEntityFactory<CTriggerSoundscape>
 D vtable for CEntityFactory<CTriggerStun>
 D vtable for CEntityFactory<CTriggerTeleport>
 D vtable for CEntityFactory<CTriggerTeleportRelative>
 D vtable for CEntityFactory<CTriggerTimerDoor>
 D vtable for CEntityFactory<CTriggerToggleSave>
 D vtable for CEntityFactory<CTriggerVPhysicsMotion>
 D vtable for CEntityFactory<CTriggerVolume>
 D vtable for CEntityFactory<CTriggerWind>
 D vtable for CEntityFactory<CUpgrades>
 D vtable for CEntityFactory<CVGuiScreen>
 D vtable for CEntityFactory<CVoteController>
 D vtable for CEntityFactory<CWC_UpdateIgnoreList>
 D vtable for CEntityFactory<CWaterBullet>
 D vtable for CEntityFactory<CWaterLODControl>
 D vtable for CEntityFactory<CWeaponIFMBase>
 D vtable for CEntityFactory<CWeaponIFMBaseCamera>
 D vtable for CEntityFactory<CWeaponIFMSteadyCam>
 D vtable for CEntityFactory<CWeaponMedigun>
 D vtable for CEntityFactory<CWeightButton>
 D vtable for CEntityFactory<CWheelOfDoom>
 D vtable for CEntityFactory<CWheelOfDoomSpiral>
 D vtable for CEntityFactory<CWindowPane>
 D vtable for CEntityFactory<CWorld>
 D vtable for CEntityFactory<CWorldItem>
 D vtable for CEntityFactory<CZombie>
 D vtable for CEntityFactory<CZombieSpawner>
 D vtable for CEntityFactory<DustTrail>
 D vtable for CEntityFactory<FilterDamageType>
 D vtable for CEntityFactory<FilterDamagedByWeaponInSlot>
 D vtable for CEntityFactory<FilterTeam>
 D vtable for CEntityFactory<MovieExplosion>
 D vtable for CEntityFactory<ParticleSmokeGrenade>
 D vtable for CEntityFactory<RocketTrail>
 D vtable for CEntityFactory<SmokeTrail>
 D vtable for CEntityFactory<SporeExplosion>
 D vtable for CEntityFactory<SporeTrail>
 D vtable for CEntityFactoryDictionary
 D vtable for CEntityFlame
 D vtable for CEntityListSystem
 D vtable for CEntityParticleTrail
 D vtable for CEntityParticleTrail::NetworkVar_m_Info
 D vtable for CEntitySaveRestoreBlockHandler
 D vtable for CEntitySaveUtils
 D vtable for CEntitySpawnManager
 D vtable for CEntitySpawnPoint
 D vtable for CEntityTouchManager
 D vtable for CEnvBeam
 D vtable for CEnvBeverage
 D vtable for CEnvDetailController
 D vtable for CEnvDustPuff
 D vtable for CEnvEffectsScript
 D vtable for CEnvEntityMaker
 D vtable for CEnvExplosion
 D vtable for CEnvFade
 D vtable for CEnvFireSensor
 D vtable for CEnvFireSource
 D vtable for CEnvFunnel
 D vtable for CEnvGlobal
 D vtable for CEnvGunfire
 D vtable for CEnvHudHint
 D vtable for CEnvLaser
 D vtable for CEnvLight
 D vtable for CEnvMicrophone
 D vtable for CEnvMuzzleFlash
 D vtable for CEnvParticleScript
 D vtable for CEnvPlayerSurfaceTrigger
 D vtable for CEnvProjectedTexture
 D vtable for CEnvQuadraticBeam
 D vtable for CEnvScreenEffect
 D vtable for CEnvScreenOverlay
 D vtable for CEnvShake
 D vtable for CEnvShooter
 D vtable for CEnvSoundscape
 D vtable for CEnvSoundscapeProxy
 D vtable for CEnvSoundscapeTriggerable
 D vtable for CEnvSpark
 D vtable for CEnvSplash
 D vtable for CEnvTonemapController
 D vtable for CEnvTracer
 D vtable for CEnvViewPunch
 D vtable for CEnvWind
 D vtable for CEnvWindShared
 D vtable for CEnvZoom
 D vtable for CEventLog
 D vtable for CEventQueueSaveLoadProxy
 D vtable for CEventQueue_SaveRestoreBlockHandler
 D vtable for CEventsSaveDataOps
 D vtable for CExtendLevelIssue
 D vtable for CExtraMapEntity_Carrier
 D vtable for CExtraMapEntity_Rocket
 D vtable for CExtraMapEntity_Saucer
 D vtable for CExtraMapEntity_Sign
 D vtable for CEyeballBoss
 D vtable for CEyeballBoss::CEyeballBossIntention
 D vtable for CEyeballBossApproachTarget
 D vtable for CEyeballBossBehavior
 D vtable for CEyeballBossBody
 D vtable for CEyeballBossDead
 D vtable for CEyeballBossEmerge
 D vtable for CEyeballBossEmote
 D vtable for CEyeballBossEscape
 D vtable for CEyeballBossIdle
 D vtable for CEyeballBossLaunchRockets
 D vtable for CEyeballBossLocomotion
 D vtable for CEyeballBossNotice
 D vtable for CEyeballBossStunned
 D vtable for CEyeballBossTeleport
 D vtable for CFilterClass
 D vtable for CFilterEnemy
 D vtable for CFilterMassGreater
 D vtable for CFilterMultiple
 D vtable for CFilterName
 D vtable for CFilterTFBotHasTag
 D vtable for CFilterTFCanCap
 D vtable for CFilterTFClass
 D vtable for CFilterTFCondition
 D vtable for CFilterTFTeam
 D vtable for CFindMostInjuredNeighbor
 D vtable for CFire
 D vtable for CFireSmoke
 D vtable for CFireSphere
 D vtable for CFireTrail
 D vtable for CFish
 D vtable for CFishPool
 D vtable for CFlagDetectionZone
 D vtable for CFlaggedEntitiesEnum
 D vtable for CFlameEntityEnum
 D vtable for CFlexAnimationTrack
 D vtable for CFlexSceneFileManager
 D vtable for CFlextalkActor
 D vtable for CFmtStrN<1024, false>
 D vtable for CFmtStrN<128, false>
 D vtable for CFmtStrN<256, false>
 D vtable for CFmtStrN<32, false>
 D vtable for CFogController
 D vtable for CFogController::NetworkVar_m_fog
 D vtable for CFogSystem
 D vtable for CFourWheelServerVehicle
 D vtable for CFourWheelVehiclePhysics
 D vtable for CFuncAreaPortalBase
 D vtable for CFuncAreaPortalWindow
 D vtable for CFuncBrush
 D vtable for CFuncConveyor
 D vtable for CFuncFlagAlertZone
 D vtable for CFuncForceField
 D vtable for CFuncIllusionary
 D vtable for CFuncLadder
 D vtable for CFuncLadderEndPoint
 D vtable for CFuncMonitor
 D vtable for CFuncMoveLinear
 D vtable for CFuncNavAvoid
 D vtable for CFuncNavBlocker
 D vtable for CFuncNavCost
 D vtable for CFuncNavObstruction
 D vtable for CFuncNavPrefer
 D vtable for CFuncNavPrerequisite
 D vtable for CFuncNoBuild
 D vtable for CFuncOccluder
 D vtable for CFuncPasstimeGoal
 D vtable for CFuncPasstimeGoalShim
 D vtable for CFuncPasstimeGoalieZone
 D vtable for CFuncPasstimeNoBallZone
 D vtable for CFuncPlat
 D vtable for CFuncPlatRot
 D vtable for CFuncReflectiveGlass
 D vtable for CFuncRespawnFlagZone
 D vtable for CFuncRespawnRoom
 D vtable for CFuncRespawnRoomShim
 D vtable for CFuncRespawnRoomVisualizer
 D vtable for CFuncRotating
 D vtable for CFuncSmokeVolume
 D vtable for CFuncSuggestedBuild
 D vtable for CFuncTankTrain
 D vtable for CFuncTrackAuto
 D vtable for CFuncTrackChange
 D vtable for CFuncTrackTrain
 D vtable for CFuncTrain
 D vtable for CFuncTrainControls
 D vtable for CFuncVPhysicsClip
 D vtable for CFuncVehicleClip
 D vtable for CFuncWall
 D vtable for CFuncWallToggle
 D vtable for CFunc_Dust
 D vtable for CFunc_DustCloud
 D vtable for CFunc_DustMotes
 D vtable for CFunc_LOD
 D vtable for CFunctor2<void (*)(CFunctor**, unsigned int), CFunctor**, int, CRefCounted1<CFunctor, CRefCountServiceBase<true, CRefMT> > >
 D vtable for CFunctor3<void (*)(IPhysicsObject*, Vector const&, Vector const&), IPhysicsObject*, Vector, Vector, CRefCounted1<CFunctor, CRefCountServiceBase<true, CRefMT> > >
 D vtable for CFunctor4<CBaseEntity* (*)(CBaseEntity*, CBaseEntity*, bool, float), CBaseEntity*, CBaseEntity*, bool, float, CRefCounted1<CFunctor, CRefCountServiceBase<true, CRefMT> > >
 D vtable for CGCClientJobServerGoodbye
 D vtable for CGCClientJobServerWelcome
 D vtable for CGCClientSystem
 D vtable for CGCCoaching_CoachJoining
 D vtable for CGCCoaching_RemoveCurrentCoach
 D vtable for CGCCompetitiveDailyStatsRollupJob
 D vtable for CGCDev_NewItemRequestResponse
 D vtable for CGCKickPlayerFromLobbyJob
 D vtable for CGCMsgGC_PlayerDuckLeaderboard_IndividualUpdate
 D vtable for CGCMsgGC_War_GlobalStatsResponse
 D vtable for CGCMsgGC_War_GlobalStatsResponse_SideScore
 D vtable for CGCMsgGC_War_IndividualUpdate
 D vtable for CGCMsgGC_War_JoinWar
 D vtable for CGCMsgGC_War_RequestGlobalStats
 D vtable for CGCMsgGetIPLocation
 D vtable for CGCMsgGetIPLocationResponse
 D vtable for CGCMsgGetSystemStats
 D vtable for CGCMsgGetSystemStatsResponse
 D vtable for CGCMsgMemCachedDelete
 D vtable for CGCMsgMemCachedGet
 D vtable for CGCMsgMemCachedGetResponse
 D vtable for CGCMsgMemCachedGetResponse_ValueTag
 D vtable for CGCMsgMemCachedSet
 D vtable for CGCMsgMemCachedSet_KeyPair
 D vtable for CGCMsgMemCachedStats
 D vtable for CGCMsgMemCachedStatsResponse
 D vtable for CGCMsgSQLStats
 D vtable for CGCMsgSQLStatsResponse
 D vtable for CGCMsgSystemStatsSchema
 D vtable for CGCMsgTFHelloResponse
 D vtable for CGCMsgTFSync
 D vtable for CGCMsgTFSyncEx
 D vtable for CGCMsg_WorldItemPlacement_Update
 D vtable for CGCQuestObjective_PointsChangeResponse
 D vtable for CGCReplicateConVars
 D vtable for CGCStorePurchaseInit_LineItem
 D vtable for CGCSystemMsg_GetAccountDetails
 D vtable for CGCSystemMsg_GetAccountDetails_Response
 D vtable for CGCSystemMsg_GetPurchaseTrust_Request
 D vtable for CGCSystemMsg_GetPurchaseTrust_Response
 D vtable for CGCTFItemAcknowledged
 D vtable for CGCTFQuickplay_PlayerJoining
 D vtable for CGCToGCMsgMasterAck
 D vtable for CGCToGCMsgMasterAck_Response
 D vtable for CGCToGCMsgMasterStartupComplete
 D vtable for CGCToGCMsgMasterStartupComplete_GCInfo
 D vtable for CGCToGCMsgRouted
 D vtable for CGCToGCMsgRoutedReply
 D vtable for CGCUpdateConVar
 D vtable for CGCUpdateItemSchema
 D vtable for CGCUpdateServerModificationItemStateJob
 D vtable for CGCUseServerModificationItemJob
 D vtable for CGCVoteSystemVoteKickResponse
 D vtable for CGC_GameServer_AuthChallenge
 D vtable for CGC_GameServer_AuthResult
 D vtable for CGC_GameServer_Duel_Request
 D vtable for CGC_GameServer_Duel_Response
 D vtable for CGC_RespawnPostLoadoutChange
 D vtable for CGameDLL_ConVarAccessor
 D vtable for CGameEnd
 D vtable for CGameEventListener
 D vtable for CGameGibManager
 D vtable for CGameMovement
 D vtable for CGamePlayerEquip
 D vtable for CGamePlayerTeam
 D vtable for CGamePlayerZone
 D vtable for CGameRules
 D vtable for CGameRulesProxy
 D vtable for CGameScore
 D vtable for CGameStringPool
 D vtable for CGameText
 D vtable for CGameUI
 D vtable for CGameWeaponManager
 D vtable for CGenericActor
 D vtable for CGenericFlexCycler
 D vtable for CGenericNPC
 D vtable for CGhost
 D vtable for CGhost::CGhostIntention
 D vtable for CGhostBehavior
 D vtable for CGhostLocomotion
 D vtable for CGib
 D vtable for CGibShooter
 D vtable for CGlobalEntityList
 D vtable for CGlobalState
 D vtable for CGunTarget
 D vtable for CHLTVDirector
 D vtable for CHalloweenBaseBoss
 D vtable for CHalloweenGiftPickup
 D vtable for CHalloweenGiftSpawnLocation
 D vtable for CHalloweenPickup
 D vtable for CHalloweenSoulPack
 D vtable for CHandleDummy
 D vtable for CHandleTest
 D vtable for CHeadlessHatman
 D vtable for CHeadlessHatmanAttack
 D vtable for CHeadlessHatmanBehavior
 D vtable for CHeadlessHatmanBody
 D vtable for CHeadlessHatmanDying
 D vtable for CHeadlessHatmanEmerge
 D vtable for CHeadlessHatmanIntention
 D vtable for CHeadlessHatmanLocomotion
 D vtable for CHeadlessHatmanPathCost
 D vtable for CHeadlessHatmanTerrify
 D vtable for CHealthAmmoKit
 D vtable for CHealthFilter
 D vtable for CHealthKit
 D vtable for CHealthKitMedium
 D vtable for CHealthKitSmall
 D vtable for CHightower_TeleportVortex
 D vtable for CHybridMap_CTF_CP
 D vtable for CIKSaveRestoreOps
 D vtable for CIPLocationInfo
 D vtable for CInfoCameraLink
 D vtable for CInfoIntermission
 D vtable for CInfoLadderDismount
 D vtable for CInfoLightingRelative
 D vtable for CInfoMassCenter
 D vtable for CInfoOverlayAccessor
 D vtable for CInfoTarget
 D vtable for CInstancedResponseSystem
 D vtable for CInstancedSceneEntity
 D vtable for CIntroViewpoint
 D vtable for CInventoryManager
 D vtable for CItem
 D vtable for CItemGeneration
 D vtable for CItemSelectionCriteria::CCondition
 D vtable for CItemSelectionCriteria::CFloatCondition
 D vtable for CItemSelectionCriteria::CSetCondition
 D vtable for CItemSelectionCriteria::CStringCondition
 D vtable for CItemSoda
 D vtable for CJobSendMsgUntilConfirmed<CMsgGCRematchRequest, CMsgGCRematchRequestResponse, (ETFGCMsg)6533>
 D vtable for CJobSendMsgUntilConfirmed<CMsgGC_Match_Result, CMsgGC_Match_ResultResponse, (ETFGCMsg)6520>
 D vtable for CJobSendMsgUntilConfirmed<CMsgGameServerKickingLobby, CMsgGameServerKickingLobbyResponse, (ETFGCMsg)6521>
 D vtable for CJobSendMsgUntilConfirmed<CMsgMvMVictory, CMsgMvMMannUpVictoryReply, (ETFGCMsg)6298>
 D vtable for CJobSendMsgUntilConfirmed<CMsgPlayerLeftMatch, CMsgPlayerLeftMatchResponse, (ETFGCMsg)6523>
 D vtable for CKeepUpright
 D vtable for CKeyValuesDumpContextAsDevMsg
 D vtable for CKickIssue
 D vtable for CKnownCollector
 D vtable for CKnownEntity
 D vtable for CKothLogic
 D vtable for CLadderMatchGroupDescription
 D vtable for CLadderMatchGroupDescription::CLadderProgressionDesc
 D vtable for CLagCompensationManager
 D vtable for CLaserDot
 D vtable for CLight
 D vtable for CLightGlow
 D vtable for CListMissions
 D vtable for CLobbyPendingPlayerReport
 D vtable for CLogicActiveAutosave
 D vtable for CLogicAuto
 D vtable for CLogicAutosave
 D vtable for CLogicBranch
 D vtable for CLogicBranchList
 D vtable for CLogicCase
 D vtable for CLogicCollisionPair
 D vtable for CLogicCompare
 D vtable for CLogicCompareInteger
 D vtable for CLogicLineToEntity
 D vtable for CLogicMannPower
 D vtable for CLogicMeasureMovement
 D vtable for CLogicNavigation
 D vtable for CLogicOnHoliday
 D vtable for CLogicRelay
 D vtable for CMannVsMachineChangeChallengeIssue
 D vtable for CMannVsMachineLogic
 D vtable for CMannVsMachineStats
 D vtable for CMannVsMachineUpgradeManager
 D vtable for CMannVsMachineWaveStats
 D vtable for CMapInfoContainer
 D vtable for CMapLoadEntityFilter
 D vtable for CMaterialModifyControl
 D vtable for CMathColorBlend
 D vtable for CMathCounter
 D vtable for CMathRemap
 D vtable for CMedievalLogic
 D vtable for CMedigunFilter
 D vtable for CMemberFunctor0<CParallelProcessor<CNavArea*, CFuncJobItemProcessor<CNavArea*> >*, void (CParallelProcessor<CNavArea*, CFuncJobItemProcessor<CNavArea*> >::*)(), CRefCounted1<CFunctor, CRefCountServiceBase<true, CRefMT> >, CFuncMemPolicyNone>
 D vtable for CMemberFunctor0<CParallelProcessor<QueryCacheUpdateRecord_t, CFuncJobItemProcessor<QueryCacheUpdateRecord_t> >*, void (CParallelProcessor<QueryCacheUpdateRecord_t, CFuncJobItemProcessor<QueryCacheUpdateRecord_t> >::*)(), CRefCounted1<CFunctor, CRefCountServiceBase<true, CRefMT> >, CFuncMemPolicyNone>
 D vtable for CMemberFunctor1<CAI_Navigator*, bool (CAI_Navigator::*)(Vector const&), Vector, CRefCounted1<CFunctor, CRefCountServiceBase<true, CRefMT> >, CFuncMemPolicyNone>
 D vtable for CMemberFunctor1<IPhysicsObject*, void (IPhysicsObject::*)(bool), bool, CRefCounted1<CFunctor, CRefCountServiceBase<true, CRefMT> >, CFuncMemPolicyNone>
 D vtable for CMemberFunctor2<CAI_Navigator*, bool (CAI_Navigator::*)(AI_NavGoal_t const&, unsigned int), AI_NavGoal_t, unsigned int, CRefCounted1<CFunctor, CRefCountServiceBase<true, CRefMT> >, CFuncMemPolicyNone>
 D vtable for CMemberFunctor3<CBreakableProp*, void (CBreakableProp::*)(Vector const&, Vector const&, QAngle const&), Vector, Vector, QAngle, CRefCounted1<CFunctor, CRefCountServiceBase<true, CRefMT> >, CFuncMemPolicyNone>
 D vtable for CMerasmus
 D vtable for CMerasmusAOEAttack
 D vtable for CMerasmusAttack
 D vtable for CMerasmusBehavior
 D vtable for CMerasmusBody
 D vtable for CMerasmusDancer
 D vtable for CMerasmusDisguise
 D vtable for CMerasmusDying
 D vtable for CMerasmusEscape
 D vtable for CMerasmusFlyingLocomotion
 D vtable for CMerasmusIntention
 D vtable for CMerasmusLocomotion
 D vtable for CMerasmusPathCost
 D vtable for CMerasmusReveal
 D vtable for CMerasmusStaffAttack
 D vtable for CMerasmusStunned
 D vtable for CMerasmusTeleport
 D vtable for CMerasmusThrowingGrenade
 D vtable for CMerasmusZap
 D vtable for CMessage
 D vtable for CMessageEntity
 D vtable for CMissionPopulator
 D vtable for CMobSpawner
 D vtable for CModelSoundsCache
 D vtable for CModelSoundsCacheSaver
 D vtable for CMomentaryRotButton
 D vtable for CMonsterResource
 D vtable for CMotorController
 D vtable for CMoveHelperServer
 D vtable for CMovementSpeedMod
 D vtable for CMsgAMAddFreeLicense
 D vtable for CMsgAMAddFreeLicenseResponse
 D vtable for CMsgAMFindAccounts
 D vtable for CMsgAMFindAccountsResponse
 D vtable for CMsgAMGetLicenses
 D vtable for CMsgAMGetLicensesResponse
 D vtable for CMsgAMGetUserGameStats
 D vtable for CMsgAMGetUserGameStatsResponse
 D vtable for CMsgAMGetUserGameStatsResponse_Achievement_Blocks
 D vtable for CMsgAMGetUserGameStatsResponse_Stats
 D vtable for CMsgAMGrantGuestPasses2
 D vtable for CMsgAMGrantGuestPasses2Response
 D vtable for CMsgAMSendEmail
 D vtable for CMsgAMSendEmailResponse
 D vtable for CMsgAMSendEmail_PersonaNameReplacementToken
 D vtable for CMsgAMSendEmail_ReplacementToken
 D vtable for CMsgAcceptInvite
 D vtable for CMsgAcceptInviteResponse
 D vtable for CMsgAcknowledgeXP
 D vtable for CMsgAdjustItemEquippedState
 D vtable for CMsgApplyAutograph
 D vtable for CMsgApplyStrangeCountTransfer
 D vtable for CMsgApplyStrangePart
 D vtable for CMsgApplyStrangeRestriction
 D vtable for CMsgApplyToolToBaseItem
 D vtable for CMsgApplyToolToItem
 D vtable for CMsgApplyUpgradeCard
 D vtable for CMsgCasualMatchmakingSearchCriteria
 D vtable for CMsgClientGoodbye
 D vtable for CMsgClientHello
 D vtable for CMsgClientWelcome
 D vtable for CMsgConVarValue
 D vtable for CMsgConnectionStatus
 D vtable for CMsgConsumableExhausted
 D vtable for CMsgCraftCollectionUpgrade
 D vtable for CMsgCraftCommonStatClock
 D vtable for CMsgCraftHalloweenOffering
 D vtable for CMsgCraftingResponse
 D vtable for CMsgCreateOrUpdateParty
 D vtable for CMsgCreateOrUpdatePartyReply
 D vtable for CMsgDeliverGiftResponseGiver
 D vtable for CMsgDevDebugRollLootRequest
 D vtable for CMsgDevNewItemRequest
 D vtable for CMsgEconPlayerStrangeCountAdjustment
 D vtable for CMsgEconPlayerStrangeCountAdjustment_CStrangeCountAdjustment
 D vtable for CMsgExitMatchmaking
 D vtable for CMsgFulfillDynamicRecipeComponent
 D vtable for CMsgGCBannedWordListRequest
 D vtable for CMsgGCCasualCriteriaStatsResponse
 D vtable for CMsgGCCasualCriteriaStatsResponse_DataCenterPopulation
 D vtable for CMsgGCCheckClanMembership
 D vtable for CMsgGCCheckClanMembership_Response
 D vtable for CMsgGCCheckFriendship
 D vtable for CMsgGCCheckFriendship_Response
 D vtable for CMsgGCClientDisplayNotification
 D vtable for CMsgGCClientMarketData
 D vtable for CMsgGCClientMarketDataEntry
 D vtable for CMsgGCClientMarketDataRequest
 D vtable for CMsgGCClientPing
 D vtable for CMsgGCCollectItem
 D vtable for CMsgGCDataCenterPing_Update
 D vtable for CMsgGCDataCenterPing_Update_PingEntry
 D vtable for CMsgGCError
 D vtable for CMsgGCGetCommandList
 D vtable for CMsgGCGetCommandListResponse
 D vtable for CMsgGCGetEmailTemplate
 D vtable for CMsgGCGetEmailTemplateResponse
 D vtable for CMsgGCGetPartnerAccountLink
 D vtable for CMsgGCGetPartnerAccountLink_Response
 D vtable for CMsgGCGetPersonaNames
 D vtable for CMsgGCGetPersonaNames_Response
 D vtable for CMsgGCGetPersonaNames_Response_PersonaName
 D vtable for CMsgGCGiftedItems
 D vtable for CMsgGCHAccountLockStatusChange
 D vtable for CMsgGCHAccountPhoneNumberChange
 D vtable for CMsgGCHAccountTradeBanStatusChange
 D vtable for CMsgGCHAccountTwoFactorChange
 D vtable for CMsgGCHAccountVacStatusChange
 D vtable for CMsgGCHUpdateSession
 D vtable for CMsgGCHUpdateSession_ExtraField
 D vtable for CMsgGCHVacVerificationChange
 D vtable for CMsgGCIncrementKillCountResponse
 D vtable for CMsgGCItemPreviewItemBoughtNotification
 D vtable for CMsgGCMatchHistoryLoad
 D vtable for CMsgGCMsgMasterSetClientMsgRouting
 D vtable for CMsgGCMsgMasterSetClientMsgRouting_Entry
 D vtable for CMsgGCMsgMasterSetClientMsgRouting_Response
 D vtable for CMsgGCMsgMasterSetDirectory
 D vtable for CMsgGCMsgMasterSetDirectory_Response
 D vtable for CMsgGCMsgMasterSetDirectory_SubGC
 D vtable for CMsgGCMsgMasterSetWebAPIRouting
 D vtable for CMsgGCMsgMasterSetWebAPIRouting_Entry
 D vtable for CMsgGCMsgMasterSetWebAPIRouting_Response
 D vtable for CMsgGCMsgSetOptions
 D vtable for CMsgGCMsgSetOptions_MessageRange
 D vtable for CMsgGCMsgWebAPIJobRequestForwardResponse
 D vtable for CMsgGCMultiplexMessage
 D vtable for CMsgGCNameItemNotification
 D vtable for CMsgGCNotification
 D vtable for CMsgGCNotificationQueue
 D vtable for CMsgGCQuestComplete_Request
 D vtable for CMsgGCQuestCompleted
 D vtable for CMsgGCQuestDiscard_Request
 D vtable for CMsgGCQuestObjective_PointsChange
 D vtable for CMsgGCQuestObjective_Progress
 D vtable for CMsgGCQuestObjective_RequestLoanerItems
 D vtable for CMsgGCQuestObjective_RequestLoanerResponse
 D vtable for CMsgGCRematchRequest
 D vtable for CMsgGCRematchRequestResponse
 D vtable for CMsgGCRematchRequest_PartyEntry
 D vtable for CMsgGCRemoveCustomizationAttributeSimple
 D vtable for CMsgGCRemoveStrangePart
 D vtable for CMsgGCRemoveUpgradeCard
 D vtable for CMsgGCReportAbuse
 D vtable for CMsgGCReportAbuseResponse
 D vtable for CMsgGCRequestCasualCriteriaStats
 D vtable for CMsgGCRequestStoreSalesData
 D vtable for CMsgGCRequestStoreSalesDataResponse
 D vtable for CMsgGCRequestStoreSalesDataResponse_Price
 D vtable for CMsgGCRequestStoreSalesDataUpToDateResponse
 D vtable for CMsgGCRequestSubGCSessionInfo
 D vtable for CMsgGCRequestSubGCSessionInfoResponse
 D vtable for CMsgGCResetStrangeScores
 D vtable for CMsgGCRoutingInfo
 D vtable for CMsgGCShowItemsPickedUp
 D vtable for CMsgGCShuffleCrateContents
 D vtable for CMsgGCStorePurchaseCancel
 D vtable for CMsgGCStorePurchaseCancelResponse
 D vtable for CMsgGCStorePurchaseFinalize
 D vtable for CMsgGCStorePurchaseFinalizeResponse
 D vtable for CMsgGCStorePurchaseInit
 D vtable for CMsgGCStorePurchaseInitResponse
 D vtable for CMsgGCSurveyRequest
 D vtable for CMsgGCSurveyResponse
 D vtable for CMsgGCTFSpecificItemBroadcast
 D vtable for CMsgGCToGCGetUserServerMembers
 D vtable for CMsgGCToGCGetUserServerMembersResponse
 D vtable for CMsgGCToGCGetUserSessionServer
 D vtable for CMsgGCToGCGetUserSessionServerResponse
 D vtable for CMsgGCToGCGrantSelfMadeItemToAccount
 D vtable for CMsgGCToGCIncrementRecruitmentLevel
 D vtable for CMsgGCToGCPingRequest
 D vtable for CMsgGCToGCPingResponse
 D vtable for CMsgGCToGCSOCacheSubscribe
 D vtable for CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions
 D vtable for CMsgGCToGCSOCacheUnsubscribe
 D vtable for CMsgGCToGCThankedByNewUser
 D vtable for CMsgGCUpdateSubGCSessionInfo
 D vtable for CMsgGCUpdateSubGCSessionInfo_CMsgUpdate
 D vtable for CMsgGC_Client2GCEconPreviewDataBlockRequest
 D vtable for CMsgGC_Client2GCEconPreviewDataBlockResponse
 D vtable for CMsgGC_Client_UseServerModificationItem
 D vtable for CMsgGC_Client_UseServerModificationItem_Response
 D vtable for CMsgGC_DailyCompetitiveStatsRollup
 D vtable for CMsgGC_DailyCompetitiveStatsRollup_Response
 D vtable for CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry
 D vtable for CMsgGC_GameServer_AckPolicy
 D vtable for CMsgGC_GameServer_AckPolicyResponse
 D vtable for CMsgGC_GameServer_AuthChallenge
 D vtable for CMsgGC_GameServer_AuthChallengeResponse
 D vtable for CMsgGC_GameServer_AuthResult
 D vtable for CMsgGC_GameServer_CreateIdentity
 D vtable for CMsgGC_GameServer_CreateIdentityResponse
 D vtable for CMsgGC_GameServer_LevelInfo
 D vtable for CMsgGC_GameServer_List
 D vtable for CMsgGC_GameServer_ListResponse
 D vtable for CMsgGC_GameServer_ListResponse_GameServerIdentity
 D vtable for CMsgGC_GameServer_ResetIdentity
 D vtable for CMsgGC_GameServer_ResetIdentityResponse
 D vtable for CMsgGC_GameServer_ServerModificationItem
 D vtable for CMsgGC_GameServer_ServerModificationItemExpired
 D vtable for CMsgGC_GameServer_UseServerModificationItem
 D vtable for CMsgGC_GameServer_UseServerModificationItem_Response
 D vtable for CMsgGC_Halloween_GrantItem
 D vtable for CMsgGC_Halloween_GrantItemResponse
 D vtable for CMsgGC_Halloween_ItemClaimed
 D vtable for CMsgGC_Halloween_ReservedItem
 D vtable for CMsgGC_KickPlayerFromLobby
 D vtable for CMsgGC_Match_Result
 D vtable for CMsgGC_Match_ResultResponse
 D vtable for CMsgGC_Match_Result_Player
 D vtable for CMsgGC_PickupItemEligibility_Query
 D vtable for CMsgGC_PickupItemEligibility_QueryResponse
 D vtable for CMsgGC_ReportPlayer
 D vtable for CMsgGC_TFVoteKickPlayerRequest
 D vtable for CMsgGC_VoteKickPlayerRequestResponse
 D vtable for CMsgGameServerKickingLobby
 D vtable for CMsgGameServerKickingLobbyResponse
 D vtable for CMsgGameServerMatchmakingStatus
 D vtable for CMsgGameServerMatchmakingStatus_Player
 D vtable for CMsgHalloween_Merasmus2012
 D vtable for CMsgHalloween_ServerBossEvent
 D vtable for CMsgHttpRequest
 D vtable for CMsgHttpRequest_QueryParam
 D vtable for CMsgHttpRequest_RequestHeader
 D vtable for CMsgHttpResponse
 D vtable for CMsgHttpResponse_ResponseHeader
 D vtable for CMsgIncrementKillCountAttribute
 D vtable for CMsgIncrementKillCountAttribute_Multiple
 D vtable for CMsgInvitationCreated
 D vtable for CMsgInviteToParty
 D vtable for CMsgItemAcknowledged
 D vtable for CMsgKickFromParty
 D vtable for CMsgKickedFromMatchmakingQueue
 D vtable for CMsgLANServerAvailable
 D vtable for CMsgLeaveGameAndPrepareToJoinParty
 D vtable for CMsgLeaveParty
 D vtable for CMsgLookupMultipleAccountNames
 D vtable for CMsgLookupMultipleAccountNamesResponse
 D vtable for CMsgLookupMultipleAccountNamesResponse_Account
 D vtable for CMsgMatchSearchCriteria
 D vtable for CMsgMatchmakingProgress
 D vtable for CMsgMatchmakingSearchCountRequest
 D vtable for CMsgMatchmakingSearchCountResponse
 D vtable for CMsgMvMMannUpVictoryReply
 D vtable for CMsgMvMVictory
 D vtable for CMsgMvMVictoryInfo
 D vtable for CMsgMvMVictoryInfo_Item
 D vtable for CMsgMvMVictoryInfo_Player
 D vtable for CMsgMvMVictory_Player
 D vtable for CMsgNotificationAcknowledge
 D vtable for CMsgNotificationAcknowledgeReply
 D vtable for CMsgNotificationOfSuspiciousActivity
 D vtable for CMsgNotificationOfSuspiciousActivity_MultipleGameInstances
 D vtable for CMsgNotifyWatchdog
 D vtable for CMsgPackageLicense
 D vtable for CMsgPartyInviteResponse
 D vtable for CMsgPlayerLeftMatch
 D vtable for CMsgPlayerLeftMatchResponse
 D vtable for CMsgProtoBufHeader
 D vtable for CMsgReadyUp
 D vtable for CMsgRecipeComponent
 D vtable for CMsgReplaySubmitContestEntry
 D vtable for CMsgReplaySubmitContestEntryResponse
 D vtable for CMsgReplayUploadedToYouTube
 D vtable for CMsgReplicateConVars
 D vtable for CMsgRequestInventoryRefresh
 D vtable for CMsgRequestItemPurgatory_FinalizePurchase
 D vtable for CMsgRequestItemPurgatory_FinalizePurchaseResponse
 D vtable for CMsgRequestItemPurgatory_RefundPurchase
 D vtable for CMsgRequestItemPurgatory_RefundPurchaseResponse
 D vtable for CMsgSOCacheHaveVersion
 D vtable for CMsgSOCacheSubscribed
 D vtable for CMsgSOCacheSubscribedUpToDate
 D vtable for CMsgSOCacheSubscribed_SubscribedType
 D vtable for CMsgSOCacheSubscriptionCheck
 D vtable for CMsgSOCacheSubscriptionRefresh
 D vtable for CMsgSOCacheUnsubscribed
 D vtable for CMsgSOCacheVersion
 D vtable for CMsgSOIDOwner
 D vtable for CMsgSOMultipleObjects
 D vtable for CMsgSOMultipleObjects_SingleObject
 D vtable for CMsgSOSingleObject
 D vtable for CMsgSaxxyAwarded
 D vtable for CMsgSelectPresetForClass
 D vtable for CMsgServerAvailable
 D vtable for CMsgServerGoodbye
 D vtable for CMsgServerHello
 D vtable for CMsgServerWelcome
 D vtable for CMsgSetHatEffectUseHeadOrigin
 D vtable for CMsgSetItemEffectVerticalOffset
 D vtable for CMsgSetItemPositions
 D vtable for CMsgSetItemPositions_ItemPosition
 D vtable for CMsgSetItemSlotAttribute
 D vtable for CMsgSetPresetItemPosition
 D vtable for CMsgSortItems
 D vtable for CMsgStoreGetUserData
 D vtable for CMsgStoreGetUserDataResponse
 D vtable for CMsgSystemBroadcast
 D vtable for CMsgTFClientInit
 D vtable for CMsgTFCoaching_AddToCoaches
 D vtable for CMsgTFCoaching_AskCoach
 D vtable for CMsgTFCoaching_AskCoachResponse
 D vtable for CMsgTFCoaching_CoachJoinGame
 D vtable for CMsgTFCoaching_CoachJoined
 D vtable for CMsgTFCoaching_CoachJoining
 D vtable for CMsgTFCoaching_FindCoach
 D vtable for CMsgTFCoaching_FindCoachResponse
 D vtable for CMsgTFCoaching_LikeCurrentCoach
 D vtable for CMsgTFCoaching_RemoveCurrentCoach
 D vtable for CMsgTFCoaching_RemoveFromCoaches
 D vtable for CMsgTFFreeTrialChooseMostHelpfulFriend
 D vtable for CMsgTFFreeTrialConvertedToPremium
 D vtable for CMsgTFGoldenWrenchBroadcast
 D vtable for CMsgTFJoinChatChannel
 D vtable for CMsgTFJoinChatChannelResponse
 D vtable for CMsgTFJoinChatChannelResponse_ChatMember
 D vtable for CMsgTFLeaveChatChannel
 D vtable for CMsgTFOtherJoinedChatChannel
 D vtable for CMsgTFOtherLeftChatChannel
 D vtable for CMsgTFQuickplay_PlayerJoining
 D vtable for CMsgTFQuickplay_ScoreServers
 D vtable for CMsgTFQuickplay_ScoreServersResponse
 D vtable for CMsgTFQuickplay_ScoreServersResponse_ServerInfo
 D vtable for CMsgTFQuickplay_ScoreServers_ServerInfo
 D vtable for CMsgTFRequestChatChannelList
 D vtable for CMsgTFRequestChatChannelListResponse
 D vtable for CMsgTFRequestChatChannelListResponse_ChatChannel
 D vtable for CMsgTFRequestDefaultChatChannel
 D vtable for CMsgTFRequestDefaultChatChannelResponse
 D vtable for CMsgTFRequestTF2Friends
 D vtable for CMsgTFRequestTF2FriendsResponse
 D vtable for CMsgTFSaxxyBroadcast
 D vtable for CMsgTFThankedBySomeone
 D vtable for CMsgTFThankedSomeone
 D vtable for CMsgTFVoteKickBanPlayer
 D vtable for CMsgTFVoteKickBanPlayerResult
 D vtable for CMsgTFWorldStatus
 D vtable for CMsgTFXPSource
 D vtable for CMsgTFXPSourceBreakdown
 D vtable for CMsgTrackUniquePlayerPairEvent
 D vtable for CMsgUpdateHalloweenMerasmusLootLevel
 D vtable for CMsgUpdateHalloweenMerasmusLootLevel_Player
 D vtable for CMsgUpdateItemSchema
 D vtable for CMsgUpdatePeriodicEvent
 D vtable for CMsgUseItem
 D vtable for CMsgWebAPIKey
 D vtable for CMsgWebAPIRequest
 D vtable for CMultiPlayerAnimState
 D vtable for CMultiSource
 D vtable for CMultiplayRules
 D vtable for CMultiplayer_Expresser
 D vtable for CMultipleEscort
 D vtable for CMvMMatchGroupDescription
 D vtable for CNPCMaker
 D vtable for CNPCSpawnDestination
 D vtable for CNPC_Furniture
 D vtable for CNPC_VehicleDriver
 D vtable for CNavArea
 D vtable for CNavMesh
 D vtable for CNextLevelIssue
 D vtable for CNoGrenadesZone
 D vtable for CNoHoliday
 D vtable for CNodeEnt
 D vtable for CNodeFilter
 D vtable for CNotifyList
 D vtable for CNullEntity
 D vtable for CObjectCartDispenser
 D vtable for CObjectDispenser
 D vtable for CObjectSapper
 D vtable for CObjectSentrygun
 D vtable for CObjectTeleporter
 D vtable for CObjectsFileLoad
 D vtable for CObserverPoint
 D vtable for COrHoliday
 D vtable for COrnamentProp
 D vtable for CP4File
 D vtable for CP4File_Dummy
 D vtable for CPASAttenuationFilter
 D vtable for CPASFilter
 D vtable for CPVSFilter
 D vtable for CParticleFire
 D vtable for CParticleLight
 D vtable for CParticlePerformanceMonitor
 D vtable for CParticleSystem
 D vtable for CParticleSystemQuery
 D vtable for CPasstimeBall
 D vtable for CPasstimeBallController
 D vtable for CPasstimeBallControllerHoming
 D vtable for CPasstimeBallControllerPlayerSeek
 D vtable for CPasstimeBallSpawn
 D vtable for CPasstimeGun
 D vtable for CPathCorner
 D vtable for CPathCornerCrash
 D vtable for CPathKeyFrame
 D vtable for CPathTrack
 D vtable for CPathfindNearestNodeFilter
 D vtable for CPauseGameIssue
 D vtable for CPeriodicSpawnPopulator
 D vtable for CPhysBallSocket
 D vtable for CPhysBox
 D vtable for CPhysBoxMultiplayer
 D vtable for CPhysConstraint
 D vtable for CPhysConstraintEvents
 D vtable for CPhysConstraintSystem
 D vtable for CPhysConvert
 D vtable for CPhysExplosion
 D vtable for CPhysFixed
 D vtable for CPhysForce
 D vtable for CPhysHinge
 D vtable for CPhysImpact
 D vtable for CPhysLength
 D vtable for CPhysMagnet
 D vtable for CPhysMotor
 D vtable for CPhysObjSaveRestoreOps
 D vtable for CPhysPulley
 D vtable for CPhysSaveRestoreBlockHandler
 D vtable for CPhysSlideConstraint
 D vtable for CPhysSphere
 D vtable for CPhysThruster
 D vtable for CPhysTorque
 D vtable for CPhysicsCannister
 D vtable for CPhysicsEntitySolver
 D vtable for CPhysicsGameTrace
 D vtable for CPhysicsHook
 D vtable for CPhysicsNPCSolver
 D vtable for CPhysicsProp
 D vtable for CPhysicsPropMultiplayer
 D vtable for CPhysicsPropRespawnable
 D vtable for CPhysicsPushedEntities
 D vtable for CPhysicsShake
 D vtable for CPhysicsSpring
 D vtable for CPhysicsWind
 D vtable for CPhysicsWire
 D vtable for CPlasma
 D vtable for CPlatTrigger
 D vtable for CPlayerDestructionDispenser
 D vtable for CPlayerInfo
 D vtable for CPlayerInfoManager
 D vtable for CPlayerInventory
 D vtable for CPlayerLocalData
 D vtable for CPlayerLocalData::NetworkVar_m_PlayerFog
 D vtable for CPlayerLocalData::NetworkVar_m_audio
 D vtable for CPlayerLocalData::NetworkVar_m_skybox3d
 D vtable for CPlayerMove
 D vtable for CPlayerResource
 D vtable for CPluginBotManager
 D vtable for CPluginHelpersCheck
 D vtable for CPointAngleSensor
 D vtable for CPointAngularVelocitySensor
 D vtable for CPointBonusMapsAccessor
 D vtable for CPointCamera
 D vtable for CPointClientCommand
 D vtable for CPointCommentaryNode
 D vtable for CPointDevShotCamera
 D vtable for CPointEntity
 D vtable for CPointGamestatsCounter
 D vtable for CPointHurt
 D vtable for CPointNavInterface
 D vtable for CPointPlayerMoveConstraint
 D vtable for CPointPopulatorInterface
 D vtable for CPointProximitySensor
 D vtable for CPointPush
 D vtable for CPointServerCommand
 D vtable for CPointSpotlight
 D vtable for CPointTeleport
 D vtable for CPointTemplate
 D vtable for CPointTemplatePrecacher
 D vtable for CPointVelocitySensor
 D vtable for CPopulationManager
 D vtable for CPopulatorInternalSpawnPoint
 D vtable for CPoseController
 D vtable for CPostFrameNavigationHook
 D vtable for CPowerupVolume
 D vtable for CPrecacheOtherList
 D vtable for CPrecipitation
 D vtable for CProjectedDecal
 D vtable for CPropData
 D vtable for CPropDoorRotating
 D vtable for CPropSoccerBall
 D vtable for CPropVehicle
 D vtable for CPropVehicleDriveable
 D vtable for CPushBlockerEnum
 D vtable for CPushable
 D vtable for CQuestItemTracker
 D vtable for CQuestObjectiveDefinition
 D vtable for CQuestObjectiveManager
 D vtable for CQuestThemeDefinition
 D vtable for CRagGib
 D vtable for CRagdollAnimatedFriction
 D vtable for CRagdollBoogie
 D vtable for CRagdollCollisionRules
 D vtable for CRagdollConstraint
 D vtable for CRagdollLRURetirement
 D vtable for CRagdollMagnet
 D vtable for CRagdollManager
 D vtable for CRagdollProp
 D vtable for CRagdollPropAttached
 D vtable for CRallyPoint
 D vtable for CRandomChoiceSpawner
 D vtable for CRandomPlacementPopulator
 D vtable for CRecipeComponentMatchingIterator
 D vtable for CRecipientFilter
 D vtable for CRegenerateZone
 D vtable for CReliableBroadcastRecipientFilter
 D vtable for CReplayCachedContestData
 D vtable for CRespawnEntitiesFilter
 D vtable for CResponseSystem
 D vtable for CRestartGameIssue
 D vtable for CRestore
 D vtable for CRevertSaved
 D vtable for CRobotBehavior
 D vtable for CRobotDestructionVaultTrigger
 D vtable for CRobotDispenser
 D vtable for CRobotEnterPanic
 D vtable for CRobotIntention
 D vtable for CRobotLeavePanic
 D vtable for CRobotLocomotion
 D vtable for CRobotMaterialize
 D vtable for CRobotPanic
 D vtable for CRobotPathCost
 D vtable for CRobotPatrol
 D vtable for CRobotSpawn
 D vtable for CRopeAnchor
 D vtable for CRopeKeyframe
 D vtable for CRotButton
 D vtable for CRotDoor
 D vtable for CRotorWashShooter
 D vtable for CSHA1
 D vtable for CSOClassPresetClientData
 D vtable for CSOEconClaimCode
 D vtable for CSOEconGameAccountClient
 D vtable for CSOEconGameAccountForGameServers
 D vtable for CSOEconItem
 D vtable for CSOEconItemAttribute
 D vtable for CSOEconItemEquipped
 D vtable for CSOEconItemPresetInstance
 D vtable for CSOItemCriteria
 D vtable for CSOItemCriteriaCondition
 D vtable for CSOItemRecipe
 D vtable for CSOLobbyInvite
 D vtable for CSOPartyInvite
 D vtable for CSOTFDuelSummary
 D vtable for CSOTFGameServerLobby
 D vtable for CSOTFLadderData
 D vtable for CSOTFLadderPlayerStats
 D vtable for CSOTFMapContribution
 D vtable for CSOTFMatchResultPlayerStats
 D vtable for CSOTFParty
 D vtable for CSOTFPartyInvite
 D vtable for CSOTFPartyInvite_PartyMember
 D vtable for CSOTFPartyMember
 D vtable for CSOTFPlayerInfo
 D vtable for CSOTrackerManager
 D vtable for CSOWarData
 D vtable for CSave
 D vtable for CSaveRestoreBlockSet
 D vtable for CSceneEntity
 D vtable for CSceneFindMarkFilter
 D vtable for CSceneFindNearestMarkFilter
 D vtable for CSceneListManager
 D vtable for CSceneManager
 D vtable for CSceneTokenProcessor
 D vtable for CSchemaAttributeType_Default
 D vtable for CSchemaAttributeType_DynamicRecipeComponentDefinedItem
 D vtable for CSchemaAttributeType_Float
 D vtable for CSchemaAttributeType_ItemSlotCriteria
 D vtable for CSchemaAttributeType_String
 D vtable for CSchemaAttributeType_UInt64
 D vtable for CSchemaAttributeType_WorldItemPlacement
 D vtable for CScrambleTeams
 D vtable for CScriptedTarget
 D vtable for CSearchForCover
 D vtable for CSelectDefenseAreaForPoint
 D vtable for CSelectPrimaryPatient
 D vtable for CSentryGunSpawner
 D vtable for CServerBenchmark
 D vtable for CServerBenchmarkHook
 D vtable for CServerChoreoTools
 D vtable for CServerDLLSharedAppSystems
 D vtable for CServerGameClients
 D vtable for CServerGameDLL
 D vtable for CServerGameEnts
 D vtable for CServerGameTags
 D vtable for CServerNetworkProperty
 D vtable for CServerRagdollTrigger
 D vtable for CServerReplayImp
 D vtable for CServerTools
 D vtable for CShadowControl
 D vtable for CShowZone
 D vtable for CShower
 D vtable for CSimThinkManager
 D vtable for CSimpleBot
 D vtable for CSimpleBot::CSimpleBotIntention
 D vtable for CSimpleBotPathCost
 D vtable for CSimpleBotRoam
 D vtable for CSimplePhysicsBrush
 D vtable for CSimplePhysicsProp
 D vtable for CSingleUserRecipientFilter
 D vtable for CSingleUserReliableRecipientFilter
 D vtable for CSkipKeys
 D vtable for CSkyCamera
 D vtable for CSlideshowDisplay
 D vtable for CSmokeStack
 D vtable for CSniperDot
 D vtable for CSolidSetDefaults
 D vtable for CSoundControllerImp
 D vtable for CSoundEmitterSystem
 D vtable for CSoundEnt
 D vtable for CSoundEnvelopeController
 D vtable for CSoundPatchSaveRestoreOps
 D vtable for CSoundscapeSystem
 D vtable for CSpellPickup
 D vtable for CSpotlightEnd
 D vtable for CSprayCan
 D vtable for CSprite
 D vtable for CSpriteOriented
 D vtable for CSpriteTrail
 D vtable for CSquadSpawner
 D vtable for CStdStringSaveRestoreOps
 D vtable for CSteamJet
 D vtable for CSteamWorksGameStatsUploader
 D vtable for CStringTableSaveRestoreOps
 D vtable for CStripWeapons
 D vtable for CSun
 D vtable for CTEArmorRicochet
 D vtable for CTEBSPDecal
 D vtable for CTEBaseBeam
 D vtable for CTEBeamEntPoint
 D vtable for CTEBeamEnts
 D vtable for CTEBeamFollow
 D vtable for CTEBeamLaser
 D vtable for CTEBeamPoints
 D vtable for CTEBeamRing
 D vtable for CTEBeamRingPoint
 D vtable for CTEBeamSpline
 D vtable for CTEBloodSprite
 D vtable for CTEBloodStream
 D vtable for CTEBreakModel
 D vtable for CTEBubbleTrail
 D vtable for CTEBubbles
 D vtable for CTEClientProjectile
 D vtable for CTEDecal
 D vtable for CTEDust
 D vtable for CTEDynamicLight
 D vtable for CTEEffectDispatch
 D vtable for CTEEnergySplash
 D vtable for CTEExplosion
 D vtable for CTEFireBullets
 D vtable for CTEFizz
 D vtable for CTEFootprintDecal
 D vtable for CTEGaussExplosion
 D vtable for CTEGlowSprite
 D vtable for CTEImpact
 D vtable for CTEKillPlayerAttachments
 D vtable for CTELargeFunnel
 D vtable for CTEMetalSparks
 D vtable for CTEMuzzleFlash
 D vtable for CTEPhysicsProp
 D vtable for CTEPlayerAnimEvent
 D vtable for CTEPlayerDecal
 D vtable for CTEProjectedDecal
 D vtable for CTEShatterSurface
 D vtable for CTEShowLine
 D vtable for CTESmoke
 D vtable for CTESparks
 D vtable for CTESprite
 D vtable for CTESpriteSpray
 D vtable for CTETFBlood
 D vtable for CTETFExplosion
 D vtable for CTETFParticleEffect
 D vtable for CTEWorldDecal
 D vtable for CTFAmmoPack
 D vtable for CTFArcherProxy
 D vtable for CTFBall_Ornament
 D vtable for CTFBaseBoss
 D vtable for CTFBaseBossLocomotion
 D vtable for CTFBaseProjectile
 D vtable for CTFBaseRocket
 D vtable for CTFBat
 D vtable for CTFBat_Fish
 D vtable for CTFBat_Giftwrap
 D vtable for CTFBat_Wood
 D vtable for CTFBonesaw
 D vtable for CTFBot
 D vtable for CTFBot::CTFBotIntention
 D vtable for CTFBotActionPoint
 D vtable for CTFBotAttack
 D vtable for CTFBotAttackFlagDefenders
 D vtable for CTFBotBody
 D vtable for CTFBotCapturePoint
 D vtable for CTFBotController
 D vtable for CTFBotDead
 D vtable for CTFBotDefendPoint
 D vtable for CTFBotDefendPointBlockCapture
 D vtable for CTFBotDeliverFlag
 D vtable for CTFBotDestroyEnemySentry
 D vtable for CTFBotEngineerBuild
 D vtable for CTFBotEngineerBuildDispenser
 D vtable for CTFBotEngineerBuildSentryGun
 D vtable for CTFBotEngineerBuildTeleportEntrance
 D vtable for CTFBotEngineerBuildTeleportExit
 D vtable for CTFBotEngineerBuilding
 D vtable for CTFBotEngineerMoveToBuild
 D vtable for CTFBotEscortFlagCarrier
 D vtable for CTFBotEscortSquadLeader
 D vtable for CTFBotFetchFlag
 D vtable for CTFBotGenerator
 D vtable for CTFBotGetAmmo
 D vtable for CTFBotGetHealth
 D vtable for CTFBotHint
 D vtable for CTFBotHintEngineerNest
 D vtable for CTFBotHintSentrygun
 D vtable for CTFBotHintTeleporterExit
 D vtable for CTFBotLocomotion
 D vtable for CTFBotMainAction
 D vtable for CTFBotManager
 D vtable for CTFBotMedicHeal
 D vtable for CTFBotMedicRetreat
 D vtable for CTFBotMeleeAttack
 D vtable for CTFBotMissionSuicideBomber
 D vtable for CTFBotMvMDeployBomb
 D vtable for CTFBotMvMEngineerBuildSentryGun
 D vtable for CTFBotMvMEngineerBuildTeleportExit
 D vtable for CTFBotMvMEngineerIdle
 D vtable for CTFBotMvMEngineerTeleportSpawn
 D vtable for CTFBotNavEntMoveTo
 D vtable for CTFBotNavEntWait
 D vtable for CTFBotPathCost
 D vtable for CTFBotPayloadBlock
 D vtable for CTFBotPayloadGuard
 D vtable for CTFBotPayloadPush
 D vtable for CTFBotPrepareStickybombTrap
 D vtable for CTFBotProxy
 D vtable for CTFBotPushToCapturePoint
 D vtable for CTFBotRetreatToCover
 D vtable for CTFBotRoster
 D vtable for CTFBotScenarioMonitor
 D vtable for CTFBotSeekAndDestroy
 D vtable for CTFBotSniperLurk
 D vtable for CTFBotSpawner
 D vtable for CTFBotSpyAttack
 D vtable for CTFBotSpyHide
 D vtable for CTFBotSpyInfiltrate
 D vtable for CTFBotSpyLeaveSpawnRoom
 D vtable for CTFBotSpyLurk
 D vtable for CTFBotSpySap
 D vtable for CTFBotSquad
 D vtable for CTFBotStickybombSentrygun
 D vtable for CTFBotTacticalMonitor
 D vtable for CTFBotTaunt
 D vtable for CTFBotUberAttackEnemySentry
 D vtable for CTFBotUseItem
 D vtable for CTFBotUseTeleporter
 D vtable for CTFBotVision
 D vtable for CTFBotWaitForOutOfPositionSquadMember
 D vtable for CTFBottle
 D vtable for CTFBuffItem
 D vtable for CTFCannon
 D vtable for CTFChargedSMG
 D vtable for CTFCleaver
 D vtable for CTFClub
 D vtable for CTFCompoundBow
 D vtable for CTFCondition
 D vtable for CTFConditionList
 D vtable for CTFConditionQuestCondition
 D vtable for CTFCondition_CritBoost
 D vtable for CTFCraftingRecipeDefinition
 D vtable for CTFCrossbow
 D vtable for CTFDRGPomson
 D vtable for CTFDamageEvent
 D vtable for CTFDefendPointMission
 D vtable for CTFDefendPointSniperZone
 D vtable for CTFDespawn
 D vtable for CTFDroppedWeapon
 D vtable for CTFDroppedWeapon::NetworkVar_m_Item
 D vtable for CTFDuelSummary
 D vtable for CTFEventLog
 D vtable for CTFFireAxe
 D vtable for CTFFists
 D vtable for CTFFlagEventTypeRestriction
 D vtable for CTFFlameEntity
 D vtable for CTFFlameThrower
 D vtable for CTFFlareGun
 D vtable for CTFFlareGun_Revenge
 D vtable for CTFForceRespawn
 D vtable for CTFGCServerSystem
 D vtable for CTFGSLobby
 D vtable for CTFGameModeHistory
 D vtable for CTFGameMovement
 D vtable for CTFGameRules
 D vtable for CTFGameRulesProxy
 D vtable for CTFGameStats
 D vtable for CTFGenericBomb
 D vtable for CTFGenericBombShim
 D vtable for CTFGenericStringRestriction
 D vtable for CTFGenericSubStringRestriction
 D vtable for CTFGlow
 D vtable for CTFGotoActionPoint
 D vtable for CTFGrapplingHook
 D vtable for CTFGrenadeLauncher
 D vtable for CTFGrenadePipebombProjectile
 D vtable for CTFHLTVDirector
 D vtable for CTFHalloweenFortuneTeller
 D vtable for CTFHalloweenMinigame
 D vtable for CTFHalloweenMinigame_FallingPlatforms
 D vtable for CTFHellZap
 D vtable for CTFHolidayEntity
 D vtable for CTFHudNotify
 D vtable for CTFInfoPowerupSpawn
 D vtable for CTFIntermission
 D vtable for CTFInventoryManager
 D vtable for CTFItem
 D vtable for CTFItemDefinition
 D vtable for CTFItemSchema
 D vtable for CTFItemSystem
 D vtable for CTFJar
 D vtable for CTFJarMilk
 D vtable for CTFKatana
 D vtable for CTFKnife
 D vtable for CTFLaserPointer
 D vtable for CTFLobbyMember
 D vtable for CTFLunchBox
 D vtable for CTFLunchBox_Drink
 D vtable for CTFMapContribution
 D vtable for CTFMapsWorkshop
 D vtable for CTFMechanicalArm
 D vtable for CTFMedigunShield
 D vtable for CTFMerasmusTrickOrTreatProp
 D vtable for CTFMiniGame
 D vtable for CTFMinigameLogic
 D vtable for CTFMinigun
 D vtable for CTFNavArea
 D vtable for CTFNavMesh
 D vtable for CTFObjectiveResource
 D vtable for CTFPEPBrawlerBlaster
 D vtable for CTFParachute
 D vtable for CTFParachute_Primary
 D vtable for CTFParachute_Secondary
 D vtable for CTFParticleCannon
 D vtable for CTFParty
 D vtable for CTFPasstimeLogic
 D vtable for CTFPhysicsPushEntities
 D vtable for CTFPipebombLauncher
 D vtable for CTFPistol
 D vtable for CTFPistol_Scout
 D vtable for CTFPistol_ScoutPrimary
 D vtable for CTFPistol_ScoutSecondary
 D vtable for CTFPlayer
 D vtable for CTFPlayer::NetworkVar_m_AttributeManager
 D vtable for CTFPlayer::NetworkVar_m_Shared
 D vtable for CTFPlayerAnimState
 D vtable for CTFPlayerClass
 D vtable for CTFPlayerClassDataMgr
 D vtable for CTFPlayerClassShared
 D vtable for CTFPlayerDestructionLogic
 D vtable for CTFPlayerInfo
 D vtable for CTFPlayerInventory
 D vtable for CTFPlayerMove
 D vtable for CTFPlayerResource
 D vtable for CTFPlayerShared
 D vtable for CTFPlayerShared::NetworkVar_m_ConditionList
 D vtable for CTFPlayerShared::NetworkVar_m_RoundScoreData
 D vtable for CTFPlayerShared::NetworkVar_m_ScoreData
 D vtable for CTFPlayertPathCost
 D vtable for CTFPointWeaponMimic
 D vtable for CTFPowerup
 D vtable for CTFPowerupBottle
 D vtable for CTFProjectile_Arrow
 D vtable for CTFProjectile_Cleaver
 D vtable for CTFProjectile_EnergyBall
 D vtable for CTFProjectile_EnergyRing
 D vtable for CTFProjectile_Flare
 D vtable for CTFProjectile_GrapplingHook
 D vtable for CTFProjectile_HealingBolt
 D vtable for CTFProjectile_Jar
 D vtable for CTFProjectile_JarMilk
 D vtable for CTFProjectile_Rocket
 D vtable for CTFProjectile_SentryRocket
 D vtable for CTFProjectile_SpellBats
 D vtable for CTFProjectile_SpellFireball
 D vtable for CTFProjectile_SpellKartBats
 D vtable for CTFProjectile_SpellKartOrb
 D vtable for CTFProjectile_SpellLightningOrb
 D vtable for CTFProjectile_SpellMeteorShower
 D vtable for CTFProjectile_SpellMirv
 D vtable for CTFProjectile_SpellPumpkin
 D vtable for CTFProjectile_SpellSpawnBoss
 D vtable for CTFProjectile_SpellSpawnHorde
 D vtable for CTFProjectile_SpellSpawnZombie
 D vtable for CTFProjectile_SpellTransposeTeleport
 D vtable for CTFProjectile_Syringe
 D vtable for CTFProjectile_Throwable
 D vtable for CTFProjectile_ThrowableBreadMonster
 D vtable for CTFProjectile_ThrowableBrick
 D vtable for CTFProjectile_ThrowableRepel
 D vtable for CTFPumpkinBomb
 D vtable for CTFPumpkinBombShim
 D vtable for CTFQuestAndOperatorRestriction
 D vtable for CTFQuestCountEvaluator
 D vtable for CTFQuestCustomDamageRestriction
 D vtable for CTFQuestEvaluator
 D vtable for CTFQuestEventListener
 D vtable for CTFQuestGameTypeRestriction
 D vtable for CTFQuestLoadoutPositionRestriction
 D vtable for CTFQuestMapRestriction
 D vtable for CTFQuestNotOperatorRestriction
 D vtable for CTFQuestObjectiveConditionsDefinition
 D vtable for CTFQuestObjectiveDefinition
 D vtable for CTFQuestOperatorRestriction
 D vtable for CTFQuestOrOperatorRestriction
 D vtable for CTFQuestPlayerAliveRestriction
 D vtable for CTFQuestPlayerClassRestriction
 D vtable for CTFQuestPlayerConditionRestriction
 D vtable for CTFQuestPlayerDisguiseRestriction
 D vtable for CTFQuestPlayerDistanceRestriction
 D vtable for CTFQuestPlayerIsOwnerRestriction
 D vtable for CTFQuestPlayerJumpingRestriction
 D vtable for CTFQuestPlayerObjectRestriction
 D vtable for CTFQuestScorerRestriction
 D vtable for CTFQuestTeamRestriction
 D vtable for CTFQuestWeaponTypeRestriction
 D vtable for CTFRagdoll
 D vtable for CTFRaygun
 D vtable for CTFReviveMarker
 D vtable for CTFRevolver
 D vtable for CTFRobotArm
 D vtable for CTFRobotDestructionLogic
 D vtable for CTFRobotDestruction_Robot
 D vtable for CTFRobotDestruction_RobotGroup
 D vtable for CTFRobotDestruction_RobotSpawn
 D vtable for CTFRocketLauncher
 D vtable for CTFRocketLauncher_AirStrike
 D vtable for CTFRocketLauncher_DirectHit
 D vtable for CTFRune
 D vtable for CTFRuneTemp
 D vtable for CTFRuneTempCrit
 D vtable for CTFRuneTempUber
 D vtable for CTFSMG
 D vtable for CTFScatterGun
 D vtable for CTFServerBenchmark
 D vtable for CTFShotgun
 D vtable for CTFShotgunBuildingRescue
 D vtable for CTFShotgun_HWG
 D vtable for CTFShotgun_Pyro
 D vtable for CTFShotgun_Revenge
 D vtable for CTFShotgun_Soldier
 D vtable for CTFShovel
 D vtable for CTFSniperRifle
 D vtable for CTFSniperRifleClassic
 D vtable for CTFSniperRifleDecap
 D vtable for CTFSodaPopper
 D vtable for CTFSpawner
 D vtable for CTFSpellBook
 D vtable for CTFSpell_MeteorShowerSpawner
 D vtable for CTFStickBomb
 D vtable for CTFStunBall
 D vtable for CTFStyleInfo
 D vtable for CTFSword
 D vtable for CTFSyringeGun
 D vtable for CTFTacticalMissionManager
 D vtable for CTFTankBoss
 D vtable for CTFTankBossBody
 D vtable for CTFTankDestruction
 D vtable for CTFTargetDummy
 D vtable for CTFTauntProp
 D vtable for CTFTeam
 D vtable for CTFTeamSpawn
 D vtable for CTFTeleportLocation
 D vtable for CTFThrowable
 D vtable for CTFTrainingAttackSentryActionPoint
 D vtable for CTFTrainingDynamicProp
 D vtable for CTFViewModel
 D vtable for CTFWarTracker
 D vtable for CTFWarTrackerManager
 D vtable for CTFWeaponBase
 D vtable for CTFWeaponBaseGrenadeProj
 D vtable for CTFWeaponBaseGun
 D vtable for CTFWeaponBaseMelee
 D vtable for CTFWeaponBaseMerasmusGrenade
 D vtable for CTFWeaponBuilder
 D vtable for CTFWeaponClassRestriction
 D vtable for CTFWeaponInfo
 D vtable for CTFWeaponInvis
 D vtable for CTFWeaponPDAExpansion_Dispenser
 D vtable for CTFWeaponPDAExpansion_Teleporter
 D vtable for CTFWeaponPDA_Engineer_Build
 D vtable for CTFWeaponPDA_Engineer_Destroy
 D vtable for CTFWeaponPDA_Spy
 D vtable for CTFWeaponSapper
 D vtable for CTFWearable
 D vtable for CTFWearableDemoShield
 D vtable for CTFWearableLevelableItem
 D vtable for CTFWearableRobotArm
 D vtable for CTFWearableVM
 D vtable for CTFWrench
 D vtable for CTacticalMissionManager
 D vtable for CTacticalMissionZone
 D vtable for CTankSpawner
 D vtable for CTankTargetChange
 D vtable for CTankTrainAI
 D vtable for CTargetCDAudioRep
 D vtable for CTargetChangeGravity
 D vtable for CTargetOnlyFilter
 D vtable for CTeam
 D vtable for CTeamAutoBalanceIssue
 D vtable for CTeamControlPoint
 D vtable for CTeamControlPointMaster
 D vtable for CTeamControlPointRound
 D vtable for CTeamRecipientFilter
 D vtable for CTeamRoundTimer
 D vtable for CTeamTrainWatcher
 D vtable for CTeamplayRoundBasedRules
 D vtable for CTeamplayRoundWin
 D vtable for CTeamplayRules
 D vtable for CTeleportVortex
 D vtable for CTempEntTester
 D vtable for CTempEntsSystem
 D vtable for CTemplateNPCMaker
 D vtable for CTemplate_SaveRestoreBlockHandler
 D vtable for CTemplatesHook
 D vtable for CTesla
 D vtable for CTestAreaAgainstThreats
 D vtable for CTestEffect
 D vtable for CTestTraceline
 D vtable for CTest_ProxyToggle_Networkable
 D vtable for CTextureToggle
 D vtable for CThinkContextsSaveDataOps
 D vtable for CThrustController
 D vtable for CTimerEntity
 D vtable for CToolFrameworkServer
 D vtable for CTraceFilterAgainstEntityList
 D vtable for CTraceFilterChain
 D vtable for CTraceFilterCollisionArrows
 D vtable for CTraceFilterCollisionGrenades
 D vtable for CTraceFilterDeflection
 D vtable for CTraceFilterDoor
 D vtable for CTraceFilterEntity
 D vtable for CTraceFilterEntityIgnoreOther
 D vtable for CTraceFilterGroundEntities
 D vtable for CTraceFilterIgnoreFriendlyCombatItems
 D vtable for CTraceFilterIgnoreObjects
 D vtable for CTraceFilterIgnorePlayers
 D vtable for CTraceFilterIgnoreTeammates
 D vtable for CTraceFilterIgnoreTeammatesAndTeamObjects
 D vtable for CTraceFilterLOS
 D vtable for CTraceFilterMelee
 D vtable for CTraceFilterNav
 D vtable for CTraceFilterNoCombatCharacters
 D vtable for CTraceFilterNoNPCsOrPlayer
 D vtable for CTraceFilterObject
 D vtable for CTraceFilterOnlyNPCsAndPlayer
 D vtable for CTraceFilterPlayersNPCs
 D vtable for CTraceFilterPlayersNPCsPhysicsProps
 D vtable for CTraceFilterPushFinal
 D vtable for CTraceFilterPushMove
 D vtable for CTraceFilterSimple
 D vtable for CTraceFilterSimpleClassnameList
 D vtable for CTraceFilterSimpleList
 D vtable for CTraceFilterSkipClassname
 D vtable for CTraceFilterSkipNPCs
 D vtable for CTraceFilterSkipTwoEntities
 D vtable for CTraceFilterWalkableEntities
 D vtable for CTraceListData
 D vtable for CTracePassFilter
 D vtable for CTrainingAnnotation
 D vtable for CTrainingModeLogic
 D vtable for CTriggerAddOrRemoveTFPlayerAttributes
 D vtable for CTriggerAddTFPlayerCondition
 D vtable for CTriggerApplyImpulse
 D vtable for CTriggerAreaCapture
 D vtable for CTriggerAreaCaptureShim
 D vtable for CTriggerBotTag
 D vtable for CTriggerBrush
 D vtable for CTriggerCDAudio
 D vtable for CTriggerCamera
 D vtable for CTriggerCatapult
 D vtable for CTriggerGravity
 D vtable for CTriggerHurt
 D vtable for CTriggerHurtShim
 D vtable for CTriggerIgnite
 D vtable for CTriggerIgniteArrows
 D vtable for CTriggerImpact
 D vtable for CTriggerLook
 D vtable for CTriggerMultiple
 D vtable for CTriggerOnce
 D vtable for CTriggerParticle
 D vtable for CTriggerPasstimeBall
 D vtable for CTriggerPlayerMovement
 D vtable for CTriggerPlayerRespawnOverride
 D vtable for CTriggerProximity
 D vtable for CTriggerPush
 D vtable for CTriggerRemove
 D vtable for CTriggerRemoveTFPlayerCondition
 D vtable for CTriggerSave
 D vtable for CTriggerSoundscape
 D vtable for CTriggerStun
 D vtable for CTriggerTeleport
 D vtable for CTriggerTeleportRelative
 D vtable for CTriggerTimerDoor
 D vtable for CTriggerToggleSave
 D vtable for CTriggerTraceEnum
 D vtable for CTriggerVPhysicsMotion
 D vtable for CTriggerVolume
 D vtable for CTriggerWind
 D vtable for CUpgrades
 D vtable for CUsePushFilter
 D vtable for CUsefulHealTargetFilter
 D vtable for CUserCmd
 D vtable for CUtlCStringConversion
 D vtable for CUtlCachedFileData<CModelSoundsCache>
 D vtable for CUtlCharConversion
 D vtable for CUtlMapDataOps<CUtlMap<string_t, CSimpleSimTimer, char>, 2, 10>
 D vtable for CUtlNoEscConversion
 D vtable for CUtlSymbolDataOps
 D vtable for CUtlVectorDataOps<CAI_InterestTarget, 10>
 D vtable for CUtlVectorDataOps<CUtlVector<AISquadEnemyInfo_t, CUtlMemory<AISquadEnemyInfo_t, int> >, 10>
 D vtable for CUtlVectorDataOps<CUtlVector<AI_Waypoint_t, CUtlMemory<AI_Waypoint_t, int> >, 10>
 D vtable for CUtlVectorDataOps<CUtlVector<CAI_ScriptConditionsElement, CUtlMemory<CAI_ScriptConditionsElement, int> >, 10>
 D vtable for CUtlVectorDataOps<CUtlVector<CAnimationLayer, CUtlMemory<CAnimationLayer, int> >, 10>
 D vtable for CUtlVectorDataOps<CUtlVector<CBaseEntity*, CUtlMemory<CBaseEntity*, int> >, 12>
 D vtable for CUtlVectorDataOps<CUtlVector<CHandle<CAI_BaseNPC>, CUtlMemory<CHandle<CAI_BaseNPC>, int> >, 13>
 D vtable for CUtlVectorDataOps<CUtlVector<CHandle<CBaseEntity>, CUtlMemory<CHandle<CBaseEntity>, int> >, 13>
 D vtable for CUtlVectorDataOps<CUtlVector<CHandle<CBaseFlex>, CUtlMemory<CHandle<CBaseFlex>, int> >, 13>
 D vtable for CUtlVectorDataOps<CUtlVector<CHandle<CBasePlayer>, CUtlMemory<CHandle<CBasePlayer>, int> >, 13>
 D vtable for CUtlVectorDataOps<CUtlVector<CHandle<CFish>, CUtlMemory<CHandle<CFish>, int> >, 13>
 D vtable for CUtlVectorDataOps<CUtlVector<CHandle<CSceneEntity>, CUtlMemory<CHandle<CSceneEntity>, int> >, 13>
 D vtable for CUtlVectorDataOps<CUtlVector<CHandle<CSceneListManager>, CUtlMemory<CHandle<CSceneListManager>, int> >, 13>
 D vtable for CUtlVectorDataOps<CUtlVector<CHandle<CVGuiScreen>, CUtlMemory<CHandle<CVGuiScreen>, int> >, 13>
 D vtable for CUtlVectorDataOps<CUtlVector<CPassengerInfo, CUtlMemory<CPassengerInfo, int> >, 10>
 D vtable for CUtlVectorDataOps<CUtlVector<Relationship_t, CUtlMemory<Relationship_t, int> >, 10>
 D vtable for CUtlVectorDataOps<CUtlVector<ResponseContext_t, CUtlMemory<ResponseContext_t, int> >, 10>
 D vtable for CUtlVectorDataOps<CUtlVector<SaveRestoreBlockHeader_t, CUtlMemory<SaveRestoreBlockHeader_t, int> >, 10>
 D vtable for CUtlVectorDataOps<CUtlVector<ScriptedNPCInteraction_t, CUtlMemory<ScriptedNPCInteraction_t, int> >, 10>
 D vtable for CUtlVectorDataOps<CUtlVector<UnreachableEnt_t, CUtlMemory<UnreachableEnt_t, int> >, 10>
 D vtable for CUtlVectorDataOps<CUtlVector<globalentity_t, CUtlMemory<globalentity_t, int> >, 10>
 D vtable for CUtlVectorDataOps<CUtlVector<int, CUtlMemory<int, int> >, 5>
 D vtable for CUtlVectorDataOps<CUtlVector<magnetted_objects_t, CUtlMemory<magnetted_objects_t, int> >, 10>
 D vtable for CUtlVectorDataOps<CUtlVector<modifiedconvars_t, CUtlMemory<modifiedconvars_t, int> >, 10>
 D vtable for CUtlVectorDataOps<CUtlVector<physfollower_t, CUtlMemory<physfollower_t, int> >, 10>
 D vtable for CUtlVectorDataOps<CUtlVector<template_t, CUtlMemory<template_t, int> >, 10>
 D vtable for CUtlVectorDataOps<CUtlVector<thinkfunc_t, CUtlMemory<thinkfunc_t, int> >, 10>
 D vtable for CUtlVectorDataOps<CUtlVector<vehicle_crashsound_t, CUtlMemory<vehicle_crashsound_t, int> >, 10>
 D vtable for CUtlVectorDataOps<CUtlVector<vehicle_gear_t, CUtlMemory<vehicle_gear_t, int> >, 10>
 D vtable for CVGuiScreen
 D vtable for CVarBitVecSaveRestoreOps<CBitVec<32> >
 D vtable for CVariantSaveDataOps
 D vtable for CVehicleSoundsParser
 D vtable for CVoiceGameMgr
 D vtable for CVoiceGameMgrHelper
 D vtable for CVoteController
 D vtable for CVoteControllerSystem
 D vtable for CWC_UpdateIgnoreList
 D vtable for CWarData
 D vtable for CWaterBullet
 D vtable for CWaterLODControl
 D vtable for CWave
 D vtable for CWaveSpawnPopulator
 D vtable for CWeaponIFMBase
 D vtable for CWeaponIFMBaseCamera
 D vtable for CWeaponIFMSteadyCam
 D vtable for CWeaponLOSFilter
 D vtable for CWeaponList
 D vtable for CWeaponMedigun
 D vtable for CWeightButton
 D vtable for CWheelOfDoom
 D vtable for CWheelOfDoom::WOD_BigHeadEffect
 D vtable for CWheelOfDoom::WOD_Burn
 D vtable for CWheelOfDoom::WOD_CritsEffect
 D vtable for CWheelOfDoom::WOD_Dance
 D vtable for CWheelOfDoom::WOD_Ghosts
 D vtable for CWheelOfDoom::WOD_LowGravityEffect
 D vtable for CWheelOfDoom::WOD_Pee
 D vtable for CWheelOfDoom::WOD_SmallHeadEffect
 D vtable for CWheelOfDoom::WOD_SuperJumpEffect
 D vtable for CWheelOfDoom::WOD_SuperSpeedEffect
 D vtable for CWheelOfDoom::WOD_UberEffect
 D vtable for CWheelOfDoomSpiral
 D vtable for CWindowPane
 D vtable for CWorkerThread
 D vtable for CWorkshop_GetContributors_Request
 D vtable for CWorkshop_GetContributors_Response
 D vtable for CWorkshop_PopulateItemDescriptions_Request
 D vtable for CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock
 D vtable for CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription
 D vtable for CWorkshop_SetItemPaymentRules_Request
 D vtable for CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule
 D vtable for CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule
 D vtable for CWorkshop_SetItemPaymentRules_Response
 D vtable for CWorld
 D vtable for CWorldItem
 D vtable for CZombie
 D vtable for CZombieAttack
 D vtable for CZombieBehavior
 D vtable for CZombieIntention
 D vtable for CZombieLocomotion
 D vtable for CZombiePathCost
 D vtable for CZombieSpawn
 D vtable for CZombieSpawner
 D vtable for CZombieSpecialAttack
 D vtable for ChasePath
 D vtable for ConCommand
 D vtable for ConVar
 D vtable for CountdownTimer
 D vtable for CryptoPP::ASN1CryptoMaterial<CryptoPP::PublicKey>
 D vtable for CryptoPP::ASN1Object
 D vtable for CryptoPP::AbstractEuclideanDomain<CryptoPP::Integer>
 D vtable for CryptoPP::AbstractGroup<CryptoPP::Integer>
 D vtable for CryptoPP::AbstractRing<CryptoPP::Integer>
 D vtable for CryptoPP::AbstractRing<CryptoPP::Integer>::MultiplicativeGroupT
 D vtable for CryptoPP::Algorithm
 D vtable for CryptoPP::AlgorithmImpl<CryptoPP::IteratedHash<unsigned int, CryptoPP::EnumToType<CryptoPP::ByteOrder, 1>, 64u, CryptoPP::HashTransformation>, CryptoPP::SHA256>
 D vtable for CryptoPP::AlgorithmParameters
 D vtable for CryptoPP::AlgorithmParametersBase
 D vtable for CryptoPP::AlgorithmParametersBase::ParameterNotUsed
 D vtable for CryptoPP::AlgorithmParametersTemplate<CryptoPP::ConstByteArrayParameter>
 D vtable for CryptoPP::ArraySink
 D vtable for CryptoPP::AutoSeededX917RNG<CryptoPP::Rijndael>
 D vtable for CryptoPP::AutoSignaling<CryptoPP::BufferedTransformation>
 D vtable for CryptoPP::BERDecodeErr
 D vtable for CryptoPP::BERGeneralDecoder
 D vtable for CryptoPP::BERSequenceDecoder
 D vtable for CryptoPP::BitBucket
 D vtable for CryptoPP::BlockCipher
 D vtable for CryptoPP::BlockCipherFinal<(CryptoPP::CipherDir)0, CryptoPP::Rijndael::Enc>
 D vtable for CryptoPP::BlockingRng
 D vtable for CryptoPP::BufferedTransformation
 D vtable for CryptoPP::BufferedTransformation::NoChannelSupport
 D vtable for CryptoPP::Bufferless<CryptoPP::BufferedTransformation>
 D vtable for CryptoPP::ByteQueue
 D vtable for CryptoPP::ByteQueue::Walker
 D vtable for CryptoPP::ClassNullRNG
 D vtable for CryptoPP::Clonable
 D vtable for CryptoPP::CryptoMaterial
 D vtable for CryptoPP::CryptoMaterial::InvalidMaterial
 D vtable for CryptoPP::DERGeneralEncoder
 D vtable for CryptoPP::DERSequenceEncoder
 D vtable for CryptoPP::EuclideanDomainOf<CryptoPP::Integer>
 D vtable for CryptoPP::Exception
 D vtable for CryptoPP::Filter
 D vtable for CryptoPP::HashInputTooLong
 D vtable for CryptoPP::InputRejecting<CryptoPP::BufferedTransformation>
 D vtable for CryptoPP::InputRejecting<CryptoPP::BufferedTransformation>::InputRejected
 D vtable for CryptoPP::InputRejecting<CryptoPP::Filter>::InputRejected
 D vtable for CryptoPP::Integer
 D vtable for CryptoPP::Integer::DivideByZero
 D vtable for CryptoPP::Integer::RandomNumberNotFound
 D vtable for CryptoPP::InvalidArgument
 D vtable for CryptoPP::InvalidDataFormat
 D vtable for CryptoPP::InvalidKeyLength
 D vtable for CryptoPP::IteratedHash<unsigned int, CryptoPP::EnumToType<CryptoPP::ByteOrder, 1>, 64u, CryptoPP::HashTransformation>
 D vtable for CryptoPP::IteratedHashWithStaticTransform<unsigned int, CryptoPP::EnumToType<CryptoPP::ByteOrder, 1>, 64u, 32u, CryptoPP::SHA256, 32u, true>
 D vtable for CryptoPP::MessageQueue
 D vtable for CryptoPP::ModularArithmetic
 D vtable for CryptoPP::MontgomeryRepresentation
 D vtable for CryptoPP::NameValuePairs
 D vtable for CryptoPP::NameValuePairs::ValueTypeMismatch
 D vtable for CryptoPP::NonblockingRng
 D vtable for CryptoPP::NotImplemented
 D vtable for CryptoPP::NullNameValuePairs
 D vtable for CryptoPP::OS_RNG_Err
 D vtable for CryptoPP::PKCS1v15_SignatureMessageEncodingMethod
 D vtable for CryptoPP::PK_DeterministicSignatureMessageEncodingMethod
 D vtable for CryptoPP::PK_FinalTemplate<CryptoPP::TF_VerifierImpl<CryptoPP::TF_SignatureSchemeOptions<CryptoPP::TF_SS<CryptoPP::PKCS1v15, CryptoPP::SHA256, CryptoPP::RSA, int>, CryptoPP::RSA, CryptoPP::PKCS1v15_SignatureMessageEncodingMethod, CryptoPP::SHA256> > >
 D vtable for CryptoPP::PK_MessageAccumulatorBase
 D vtable for CryptoPP::PK_MessageAccumulatorImpl<CryptoPP::SHA256>
 D vtable for CryptoPP::PK_SignatureScheme
 D vtable for CryptoPP::PK_SignatureScheme::InvalidKeyLength
 D vtable for CryptoPP::PK_SignatureScheme::KeyTooShort
 D vtable for CryptoPP::RSAFunction
 D vtable for CryptoPP::RandomizedTrapdoorFunction
 D vtable for CryptoPP::Rijndael::Base
 D vtable for CryptoPP::SHA256
 D vtable for CryptoPP::SelfTestFailure
 D vtable for CryptoPP::SimpleKeyingInterface
 D vtable for CryptoPP::Sink
 D vtable for CryptoPP::Source
 D vtable for CryptoPP::SourceTemplate<CryptoPP::StringStore>
 D vtable for CryptoPP::StringSource
 D vtable for CryptoPP::StringStore
 D vtable for CryptoPP::TF_ObjectImpl<CryptoPP::TF_VerifierBase, CryptoPP::TF_SignatureSchemeOptions<CryptoPP::TF_SS<CryptoPP::PKCS1v15, CryptoPP::SHA256, CryptoPP::RSA, int>, CryptoPP::RSA, CryptoPP::PKCS1v15_SignatureMessageEncodingMethod, CryptoPP::SHA256>, CryptoPP::RSAFunction>
 D vtable for CryptoPP::TrapdoorFunction
 D vtable for CryptoPP::X509PublicKey
 D vtable for CryptoPP::X917RNG
 D vtable for DelayedSchemaData_GCDirectData
 D vtable for DelayedSchemaData_HTTPResponseData
 D vtable for DustTrail
 D vtable for EntityParticleTrailInfo_t
 D vtable for FilePlayerClassInfo_t
 D vtable for FileWeaponInfo_t
 D vtable for FilterDamageType
 D vtable for FilterDamagedByWeaponInSlot
 D vtable for FilterTeam
 D vtable for FindSafeSentryApproachAreaScan
 D vtable for GCSDK::CGCClient
 D vtable for GCSDK::CGCClientSharedObjectCache
 D vtable for GCSDK::CGCClientSharedObjectTypeCache
 D vtable for GCSDK::CGCMsg<MsgGCVerifyCacheSubscription_t>
 D vtable for GCSDK::CGCMsg<MsgGC_Duel_Results_t>
 D vtable for GCSDK::CGCSOCacheSubscribedJob
 D vtable for GCSDK::CGCSOCacheSubscriptionCheck
 D vtable for GCSDK::CGCSOCacheUnsubscribedJob
 D vtable for GCSDK::CGCSOCreateJob
 D vtable for GCSDK::CGCSODestroyJob
 D vtable for GCSDK::CGCSOUpdateJob
 D vtable for GCSDK::CGCSOUpdateMultipleJob
 D vtable for GCSDK::CJob
 D vtable for GCSDK::CMsgBase_t<GCSDK::GCMsgHdrEx_t>
 D vtable for GCSDK::CProtoBufGCClientSendHandler
 D vtable for GCSDK::CProtoBufMsg<CGCMsgGC_War_IndividualUpdate>
 D vtable for GCSDK::CProtoBufMsg<CMsgConVarValue>
 D vtable for GCSDK::CProtoBufMsg<CMsgGCQuestObjective_PointsChange>
 D vtable for GCSDK::CProtoBufMsg<CMsgGCRematchRequest>
 D vtable for GCSDK::CProtoBufMsg<CMsgGCRematchRequestResponse>
 D vtable for GCSDK::CProtoBufMsg<CMsgGC_DailyCompetitiveStatsRollup>
 D vtable for GCSDK::CProtoBufMsg<CMsgGC_DailyCompetitiveStatsRollup_Response>
 D vtable for GCSDK::CProtoBufMsg<CMsgGC_GameServer_AuthChallenge>
 D vtable for GCSDK::CProtoBufMsg<CMsgGC_GameServer_AuthChallengeResponse>
 D vtable for GCSDK::CProtoBufMsg<CMsgGC_GameServer_AuthResult>
 D vtable for GCSDK::CProtoBufMsg<CMsgGC_GameServer_LevelInfo>
 D vtable for GCSDK::CProtoBufMsg<CMsgGC_GameServer_ServerModificationItem>
 D vtable for GCSDK::CProtoBufMsg<CMsgGC_GameServer_ServerModificationItemExpired>
 D vtable for GCSDK::CProtoBufMsg<CMsgGC_GameServer_UseServerModificationItem>
 D vtable for GCSDK::CProtoBufMsg<CMsgGC_GameServer_UseServerModificationItem_Response>
 D vtable for GCSDK::CProtoBufMsg<CMsgGC_KickPlayerFromLobby>
 D vtable for GCSDK::CProtoBufMsg<CMsgGC_Match_Result>
 D vtable for GCSDK::CProtoBufMsg<CMsgGC_Match_ResultResponse>
 D vtable for GCSDK::CProtoBufMsg<CMsgGC_TFVoteKickPlayerRequest>
 D vtable for GCSDK::CProtoBufMsg<CMsgGC_VoteKickPlayerRequestResponse>
 D vtable for GCSDK::CProtoBufMsg<CMsgGameServerKickingLobby>
 D vtable for GCSDK::CProtoBufMsg<CMsgGameServerKickingLobbyResponse>
 D vtable for GCSDK::CProtoBufMsg<CMsgGameServerMatchmakingStatus>
 D vtable for GCSDK::CProtoBufMsg<CMsgHalloween_Merasmus2012>
 D vtable for GCSDK::CProtoBufMsg<CMsgIncrementKillCountAttribute>
 D vtable for GCSDK::CProtoBufMsg<CMsgIncrementKillCountAttribute_Multiple>
 D vtable for GCSDK::CProtoBufMsg<CMsgItemAcknowledged>
 D vtable for GCSDK::CProtoBufMsg<CMsgMvMMannUpVictoryReply>
 D vtable for GCSDK::CProtoBufMsg<CMsgMvMVictory>
 D vtable for GCSDK::CProtoBufMsg<CMsgPlayerLeftMatch>
 D vtable for GCSDK::CProtoBufMsg<CMsgPlayerLeftMatchResponse>
 D vtable for GCSDK::CProtoBufMsg<CMsgReplicateConVars>
 D vtable for GCSDK::CProtoBufMsg<CMsgSOCacheSubscribed>
 D vtable for GCSDK::CProtoBufMsg<CMsgSOCacheSubscriptionCheck>
 D vtable for GCSDK::CProtoBufMsg<CMsgSOCacheSubscriptionRefresh>
 D vtable for GCSDK::CProtoBufMsg<CMsgSOCacheUnsubscribed>
 D vtable for GCSDK::CProtoBufMsg<CMsgSOMultipleObjects>
 D vtable for GCSDK::CProtoBufMsg<CMsgSOSingleObject>
 D vtable for GCSDK::CProtoBufMsg<CMsgServerGoodbye>
 D vtable for GCSDK::CProtoBufMsg<CMsgServerHello>
 D vtable for GCSDK::CProtoBufMsg<CMsgServerWelcome>
 D vtable for GCSDK::CProtoBufMsg<CMsgTFCoaching_CoachJoined>
 D vtable for GCSDK::CProtoBufMsg<CMsgTFCoaching_CoachJoining>
 D vtable for GCSDK::CProtoBufMsg<CMsgTFCoaching_RemoveCurrentCoach>
 D vtable for GCSDK::CProtoBufMsg<CMsgTFQuickplay_PlayerJoining>
 D vtable for GCSDK::CProtoBufMsg<CMsgTFVoteKickBanPlayerResult>
 D vtable for GCSDK::CProtoBufMsg<CMsgTrackUniquePlayerPairEvent>
 D vtable for GCSDK::CProtoBufMsg<CMsgUpdateHalloweenMerasmusLootLevel>
 D vtable for GCSDK::CProtoBufMsg<CMsgUpdateItemSchema>
 D vtable for GCSDK::CProtoBufMsgBase
 D vtable for GCSDK::CProtoBufMsgMemoryPool<CGCMsgGC_War_IndividualUpdate>
 D vtable for GCSDK::CProtoBufMsgMemoryPool<CMsgConVarValue>
 D vtable for GCSDK::CProtoBufMsgMemoryPool<CMsgGCQuestObjective_PointsChange>
 D vtable for GCSDK::CProtoBufMsgMemoryPool<CMsgGCRematchRequest>
 D vtable for GCSDK::CProtoBufMsgMemoryPool<CMsgGCRematchRequestResponse>
 D vtable for GCSDK::CProtoBufMsgMemoryPool<CMsgGC_DailyCompetitiveStatsRollup>
 D vtable for GCSDK::CProtoBufMsgMemoryPool<CMsgGC_DailyCompetitiveStatsRollup_Response>
 D vtable for GCSDK::CProtoBufMsgMemoryPool<CMsgGC_GameServer_AuthChallenge>
 D vtable for GCSDK::CProtoBufMsgMemoryPool<CMsgGC_GameServer_AuthChallengeResponse>
 D vtable for GCSDK::CProtoBufMsgMemoryPool<CMsgGC_GameServer_AuthResult>
 D vtable for GCSDK::CProtoBufMsgMemoryPool<CMsgGC_GameServer_LevelInfo>
 D vtable for GCSDK::CProtoBufMsgMemoryPool<CMsgGC_GameServer_ServerModificationItem>
 D vtable for GCSDK::CProtoBufMsgMemoryPool<CMsgGC_GameServer_ServerModificationItemExpired>
 D vtable for GCSDK::CProtoBufMsgMemoryPool<CMsgGC_GameServer_UseServerModificationItem>
 D vtable for GCSDK::CProtoBufMsgMemoryPool<CMsgGC_GameServer_UseServerModificationItem_Response>
 D vtable for GCSDK::CProtoBufMsgMemoryPool<CMsgGC_KickPlayerFromLobby>
 D vtable for GCSDK::CProtoBufMsgMemoryPool<CMsgGC_Match_Result>
 D vtable for GCSDK::CProtoBufMsgMemoryPool<CMsgGC_Match_ResultResponse>
 D vtable for GCSDK::CProtoBufMsgMemoryPool<CMsgGC_TFVoteKickPlayerRequest>
 D vtable for GCSDK::CProtoBufMsgMemoryPool<CMsgGC_VoteKickPlayerRequestResponse>
 D vtable for GCSDK::CProtoBufMsgMemoryPool<CMsgGameServerKickingLobby>
 D vtable for GCSDK::CProtoBufMsgMemoryPool<CMsgGameServerKickingLobbyResponse>
 D vtable for GCSDK::CProtoBufMsgMemoryPool<CMsgGameServerMatchmakingStatus>
 D vtable for GCSDK::CProtoBufMsgMemoryPool<CMsgHalloween_Merasmus2012>
 D vtable for GCSDK::CProtoBufMsgMemoryPool<CMsgIncrementKillCountAttribute>
 D vtable for GCSDK::CProtoBufMsgMemoryPool<CMsgIncrementKillCountAttribute_Multiple>
 D vtable for GCSDK::CProtoBufMsgMemoryPool<CMsgItemAcknowledged>
 D vtable for GCSDK::CProtoBufMsgMemoryPool<CMsgMvMMannUpVictoryReply>
 D vtable for GCSDK::CProtoBufMsgMemoryPool<CMsgMvMVictory>
 D vtable for GCSDK::CProtoBufMsgMemoryPool<CMsgPlayerLeftMatch>
 D vtable for GCSDK::CProtoBufMsgMemoryPool<CMsgPlayerLeftMatchResponse>
 D vtable for GCSDK::CProtoBufMsgMemoryPool<CMsgProtoBufHeader>
 D vtable for GCSDK::CProtoBufMsgMemoryPool<CMsgReplicateConVars>
 D vtable for GCSDK::CProtoBufMsgMemoryPool<CMsgSOCacheSubscribed>
 D vtable for GCSDK::CProtoBufMsgMemoryPool<CMsgSOCacheSubscriptionCheck>
 D vtable for GCSDK::CProtoBufMsgMemoryPool<CMsgSOCacheSubscriptionRefresh>
 D vtable for GCSDK::CProtoBufMsgMemoryPool<CMsgSOCacheUnsubscribed>
 D vtable for GCSDK::CProtoBufMsgMemoryPool<CMsgSOMultipleObjects>
 D vtable for GCSDK::CProtoBufMsgMemoryPool<CMsgSOSingleObject>
 D vtable for GCSDK::CProtoBufMsgMemoryPool<CMsgServerGoodbye>
 D vtable for GCSDK::CProtoBufMsgMemoryPool<CMsgServerHello>
 D vtable for GCSDK::CProtoBufMsgMemoryPool<CMsgServerWelcome>
 D vtable for GCSDK::CProtoBufMsgMemoryPool<CMsgTFCoaching_CoachJoined>
 D vtable for GCSDK::CProtoBufMsgMemoryPool<CMsgTFCoaching_CoachJoining>
 D vtable for GCSDK::CProtoBufMsgMemoryPool<CMsgTFCoaching_RemoveCurrentCoach>
 D vtable for GCSDK::CProtoBufMsgMemoryPool<CMsgTFQuickplay_PlayerJoining>
 D vtable for GCSDK::CProtoBufMsgMemoryPool<CMsgTFVoteKickBanPlayerResult>
 D vtable for GCSDK::CProtoBufMsgMemoryPool<CMsgTrackUniquePlayerPairEvent>
 D vtable for GCSDK::CProtoBufMsgMemoryPool<CMsgUpdateHalloweenMerasmusLootLevel>
 D vtable for GCSDK::CProtoBufMsgMemoryPool<CMsgUpdateItemSchema>
 D vtable for GCSDK::CProtoBufMsgMemoryPoolBase
 D vtable for GCSDK::CProtoBufNetPacket
 D vtable for GCSDK::CProtoBufSharedObject<CSOEconClaimCode, 3>
 D vtable for GCSDK::CProtoBufSharedObject<CSOEconGameAccountForGameServers, 37>
 D vtable for GCSDK::CProtoBufSharedObject<CSOTFDuelSummary, 19>
 D vtable for GCSDK::CProtoBufSharedObject<CSOTFGameServerLobby, 2004>
 D vtable for GCSDK::CProtoBufSharedObject<CSOTFLadderPlayerStats, 39>
 D vtable for GCSDK::CProtoBufSharedObject<CSOTFMapContribution, 28>
 D vtable for GCSDK::CProtoBufSharedObject<CSOTFParty, 2003>
 D vtable for GCSDK::CProtoBufSharedObject<CSOTFPlayerInfo, 2>
 D vtable for GCSDK::CProtoBufSharedObject<CSOWarData, 38>
 D vtable for GCSDK::CRefCount
 D vtable for GCSDK::CSharedObjectCache
 D vtable for GCSDK::CSharedObjectTypeCache
 D vtable for GCSDK::CStructNetPacket
 D vtable for GCSDK::CWorkThreadPool
 D vtable for GCSDK::ISharedObjectListener
 D vtable for GroundLocomotionCollisionTraceFilter
 D vtable for HidingSpot
 D vtable for IBaseObjectAutoList
 D vtable for IBaseProjectileAutoList
 D vtable for IBody
 D vtable for IBonusPackAutoList
 D vtable for ICaptureFlagAutoList
 D vtable for ICaptureZoneAutoList
 D vtable for ICurrencyPackAutoList
 D vtable for IDecalEmitterSystem
 D vtable for IDroppedWeaponAutoList
 D vtable for IExtraMapEntityAutoList
 D vtable for IEyeballBossAutoList
 D vtable for IFlagDetectionZoneAutoList
 D vtable for IFuncForceFieldAutoList
 D vtable for IFuncNavPrerequisiteAutoList
 D vtable for IFuncNoBuildAutoList
 D vtable for IFuncPasstimeGoalieZoneAutoList
 D vtable for IFuncPasstimeNoBallZoneAutoList
 D vtable for IFuncPowerupVolumeAutoList
 D vtable for IFuncRespawnRoomAutoList
 D vtable for IFuncRespawnRoomVisualizerAutoList
 D vtable for IGameSystem
 D vtable for IGameSystemPerFrame
 D vtable for IHalloweenGiftSpawnAutoList
 D vtable for IHasBuildPoints
 D vtable for IHealthKitAutoList
 D vtable for IInfoPowerupSpawnAutoList
 D vtable for IIntention
 D vtable for ILocomotion
 D vtable for IMerasmusAutoList
 D vtable for IMinigameAutoList
 D vtable for IModelLoadCallback
 D vtable for INextBot
 D vtable for INextBotComponent
 D vtable for IPasstimeBallSpawnAutoList
 D vtable for IPhysicsPropAutoList
 D vtable for IPopulator
 D vtable for IPredictionSystem
 D vtable for IProgressionDesc
 D vtable for IRobotDestructionGroupAutoList
 D vtable for IScorer
 D vtable for ITFBotHintEntityAutoList
 D vtable for ITFFlameEntityAutoList
 D vtable for ITFGenericBomb
 D vtable for ITFMerasmusTrickOrTreatProp
 D vtable for ITFPumpkinBomb
 D vtable for ITFTargetDummy
 D vtable for ITFTeamSpawnAutoList
 D vtable for ITFTeamTrainWatcher
 D vtable for ITFTeleportLocationAutoList
 D vtable for ITriggerAreaCaptureAutoList
 D vtable for ITriggerHurtAutoList
 D vtable for ITriggerPlayerRespawnOverride
 D vtable for IVision
 D vtable for IZombieAutoList
 D vtable for MovieExplosion
 D vtable for NextBotCombatCharacter
 D vtable for NextBotGroundLocomotion
 D vtable for NextBotManager
 D vtable for NextBotPlayer<CTFPlayer>
 D vtable for NextBotTraceFilterIgnoreActors
 D vtable for NextBotTraceFilterOnlyActors
 D vtable for NextBotTraversableTraceFilter
 D vtable for NextBotVisionTraceFilter
 D vtable for ParticleSmokeGrenade
 D vtable for Path
 D vtable for PathFollower
 D vtable for PlaceStickyBombReply
 D vtable for PlayerBody
 D vtable for PlayerLocomotion
 D vtable for PressFireButtonIfValidBuildPositionReply
 D vtable for RocketTrail
 D vtable for SendProp
 D vtable for SmokeTrail
 D vtable for SporeExplosion
 D vtable for SporeTrail
 D vtable for TAutoList<CFuncPasstimeGoal>
 D vtable for TAutoList<CPasstimeBallController>
 D vtable for condition_source_t
 D vtable for fogparams_t
 D vtable for localplayerscoring_t
 D vtable for locksound_t
 D vtable for sky3dparams_t
 D vtable for sky3dparams_t::NetworkVar_fog
 D vtable for vehicle_crashsound_t
 D vtable for vehicle_gear_t
 D vtable for vehiclesounds_t
 DMsg
 DevMsg
 DevMsg(char const*, ...)
 DevWarning
 DevWarning(char const*, ...)
 DoNewAssertDialog
 Error
 GetCPUInformation
 GetCPUUsage
 HushAsserts
 KeyValuesSystem
 Log
 MemAllocScratch
 MemFreeScratch
 Msg
 Plat_FloatTime
 Plat_IsInBenchmarkMode
 Plat_IsInDebugSession
 Plat_MSTime
 Plat_SetBenchmarkMode
 Plat_gmtime
 Plat_localtime
 R CryptoPP::PKCS_DigestDecoration<CryptoPP::SHA256>::decoration
 R CryptoPP::PKCS_DigestDecoration<CryptoPP::SHA256>::length
 R CryptoPP::Rijndael::Base::Sd
 R CryptoPP::Rijndael::Base::Se
 R CryptoPP::Rijndael::Base::rcon
 R CryptoPP::SHA256_K
 R Four_Epsilons
 R Four_FLT_MAX
 R Four_Negative_FLT_MAX
 R Four_Ones
 R Four_Zeros
 R g_SIMD_ComponentMask
 R g_SIMD_clear_wmask
 R g_szBotBossModels
 R g_szBotBossSentryBusterModel
 R g_szBotModels
 R g_szRomePromoItems_Hat
 R g_szRomePromoItems_Misc
 R nanmask
 R std::tr1::__detail::_Primes<4>::__primes
 R typeinfo name for Action<CBotNPCArcher>
 R typeinfo name for Action<CBotNPCDecoy>
 R typeinfo name for Action<CEyeballBoss>
 R typeinfo name for Action<CGhost>
 R typeinfo name for Action<CHeadlessHatman>
 R typeinfo name for Action<CMerasmus>
 R typeinfo name for Action<CSimpleBot>
 R typeinfo name for Action<CTFBot>
 R typeinfo name for Action<CTFRobotDestruction_Robot>
 R typeinfo name for Action<CZombie>
 R typeinfo name for Behavior<CBotNPCArcher>
 R typeinfo name for Behavior<CBotNPCDecoy>
 R typeinfo name for Behavior<CEyeballBoss>
 R typeinfo name for Behavior<CGhost>
 R typeinfo name for Behavior<CHeadlessHatman>
 R typeinfo name for Behavior<CMerasmus>
 R typeinfo name for Behavior<CSimpleBot>
 R typeinfo name for Behavior<CTFBot>
 R typeinfo name for Behavior<CTFRobotDestruction_Robot>
 R typeinfo name for Behavior<CZombie>
 R typeinfo name for CAISound
 R typeinfo name for CAI_AllySpeechManager
 R typeinfo name for CAI_AssaultBehavior
 R typeinfo name for CAI_AssaultGoal
 R typeinfo name for CAI_BaseActor
 R typeinfo name for CAI_BaseHumanoid
 R typeinfo name for CAI_BaseNPC
 R typeinfo name for CAI_BattleLine
 R typeinfo name for CAI_Behavior<CAI_BaseNPC, 100000>
 R typeinfo name for CAI_BehaviorBase
 R typeinfo name for CAI_BehaviorHost<CAI_BaseNPC>
 R typeinfo name for CAI_BlendedMotor
 R typeinfo name for CAI_BlendingHost<CAI_BehaviorHost<CAI_BaseNPC> >
 R typeinfo name for CAI_ChangeHintGroup
 R typeinfo name for CAI_ChangeTarget
 R typeinfo name for CAI_Component
 R typeinfo name for CAI_ComponentWithOuter<CAI_BaseNPC, CAI_BehaviorBase>
 R typeinfo name for CAI_DefMovementSink
 R typeinfo name for CAI_DynamicLink
 R typeinfo name for CAI_DynamicLinkController
 R typeinfo name for CAI_EnemiesListSaveRestoreOps
 R typeinfo name for CAI_Expresser
 R typeinfo name for CAI_ExpresserHost<CAI_BaseHumanoid>
 R typeinfo name for CAI_ExpresserHost<CBasePlayer>
 R typeinfo name for CAI_ExpresserSink
 R typeinfo name for CAI_FollowBehavior
 R typeinfo name for CAI_FollowGoal
 R typeinfo name for CAI_GoalEntity
 R typeinfo name for CAI_Hint
 R typeinfo name for CAI_LeadBehavior
 R typeinfo name for CAI_LeadBehaviorHandler
 R typeinfo name for CAI_LeadGoal
 R typeinfo name for CAI_LeadGoal_Weapon
 R typeinfo name for CAI_LocalNavigator
 R typeinfo name for CAI_MappedActivityBehavior_Temporary
 R typeinfo name for CAI_Motor
 R typeinfo name for CAI_MoveAndShootOverlay
 R typeinfo name for CAI_MoveProbe
 R typeinfo name for CAI_NavInHintGroupFilter
 R typeinfo name for CAI_Navigator
 R typeinfo name for CAI_Network
 R typeinfo name for CAI_NetworkManager
 R typeinfo name for CAI_Pathfinder
 R typeinfo name for CAI_PlayerAlly
 R typeinfo name for CAI_ProxyMovementSink
 R typeinfo name for CAI_RadialLinkController
 R typeinfo name for CAI_Relationship
 R typeinfo name for CAI_SaveRestoreBlockHandler
 R typeinfo name for CAI_ScriptConditions
 R typeinfo name for CAI_ScriptedSchedule
 R typeinfo name for CAI_ScriptedSentence
 R typeinfo name for CAI_ScriptedSequence
 R typeinfo name for CAI_SensedObjectsManager
 R typeinfo name for CAI_Senses
 R typeinfo name for CAI_SpeechFilter
 R typeinfo name for CAI_StandoffBehavior
 R typeinfo name for CAI_StandoffGoal
 R typeinfo name for CAI_SystemHook
 R typeinfo name for CAI_TacticalServices
 R typeinfo name for CAI_TestHull
 R typeinfo name for CAchievementMgr
 R typeinfo name for CAchievementSaveRestoreBlockHandler
 R typeinfo name for CAchievementSaveThread
 R typeinfo name for CAchievementZone
 R typeinfo name for CActivityDataOps
 R typeinfo name for CAimTargetManager
 R typeinfo name for CAmbientGeneric
 R typeinfo name for CAmmoDef
 R typeinfo name for CAmmoFilter
 R typeinfo name for CAmmoPack
 R typeinfo name for CAmmoPackMedium
 R typeinfo name for CAmmoPackSmall
 R typeinfo name for CAnchorList
 R typeinfo name for CAreaPortal
 R typeinfo name for CArenaLogic
 R typeinfo name for CArmor
 R typeinfo name for CAssaultPoint
 R typeinfo name for CAttributeContainer
 R typeinfo name for CAttributeContainer::NetworkVar_m_Item
 R typeinfo name for CAttributeContainerPlayer
 R typeinfo name for CAttributeIterator_GetTypedAttributeValue<CAttribute_DynamicRecipeComponent, CAttribute_DynamicRecipeComponent>
 R typeinfo name for CAttributeIterator_GetTypedAttributeValue<CAttribute_ItemSlotCriteria, CAttribute_ItemSlotCriteria>
 R typeinfo name for CAttributeIterator_GetTypedAttributeValue<CAttribute_String, CAttribute_String>
 R typeinfo name for CAttributeIterator_GetTypedAttributeValue<CAttribute_String, char const*>
 R typeinfo name for CAttributeIterator_GetTypedAttributeValue<CAttribute_WorldItemPlacement, CAttribute_WorldItemPlacement>
 R typeinfo name for CAttributeIterator_GetTypedAttributeValue<float, float>
 R typeinfo name for CAttributeIterator_GetTypedAttributeValue<unsigned int, float>
 R typeinfo name for CAttributeIterator_GetTypedAttributeValue<unsigned int, unsigned int>
 R typeinfo name for CAttributeIterator_GetTypedAttributeValue<unsigned long long, unsigned long long>
 R typeinfo name for CAttributeIterator_HasAttribute
 R typeinfo name for CAttributeList
 R typeinfo name for CAttributeManager
 R typeinfo name for CAttribute_DynamicRecipeComponent
 R typeinfo name for CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT
 R typeinfo name for CAttribute_ItemSlotCriteria
 R typeinfo name for CAttribute_String
 R typeinfo name for CAttribute_WorldItemPlacement
 R typeinfo name for CAutoGameSystem
 R typeinfo name for CAutoGameSystemPerFrame
 R typeinfo name for CBallPlayerToucher
 R typeinfo name for CBaseAchievement
 R typeinfo name for CBaseAnimating
 R typeinfo name for CBaseAnimatingOverlay
 R typeinfo name for CBaseAppSystem<IParticleSystemQuery>
 R typeinfo name for CBaseButton
 R typeinfo name for CBaseCombatCharacter
 R typeinfo name for CBaseCombatWeapon
 R typeinfo name for CBaseDMStart
 R typeinfo name for CBaseDoor
 R typeinfo name for CBaseEntity
 R typeinfo name for CBaseEntity*
 R typeinfo name for CBaseEntity::NetworkVar_m_Collision
 R typeinfo name for CBaseEntityClassList
 R typeinfo name for CBaseEntityList
 R typeinfo name for CBaseEntityModelLoadProxy::Handler
 R typeinfo name for CBaseFilter
 R typeinfo name for CBaseFire
 R typeinfo name for CBaseFlex
 R typeinfo name for CBaseGameStats
 R typeinfo name for CBaseGameStats_Driver
 R typeinfo name for CBaseGameSystem
 R typeinfo name for CBaseGameSystemPerFrame
 R typeinfo name for CBaseGrenade
 R typeinfo name for CBaseGrenadeConcussion
 R typeinfo name for CBaseGrenadeContact
 R typeinfo name for CBaseGrenadeTimed
 R typeinfo name for CBaseIssue
 R typeinfo name for CBaseMoveBehavior
 R typeinfo name for CBaseMultiplayerPlayer
 R typeinfo name for CBaseNPCMaker
 R typeinfo name for CBaseObject
 R typeinfo name for CBaseObjectUpgrade
 R typeinfo name for CBaseParticleEntity
 R typeinfo name for CBasePlatTrain
 R typeinfo name for CBasePlayer
 R typeinfo name for CBasePlayer::NetworkVar_m_AttributeList
 R typeinfo name for CBasePlayer::NetworkVar_m_Local
 R typeinfo name for CBasePlayer::NetworkVar_pl
 R typeinfo name for CBaseProjectile
 R typeinfo name for CBaseProp
 R typeinfo name for CBasePropDoor
 R typeinfo name for CBaseQuestObjectiveTracker
 R typeinfo name for CBaseSOTracker
 R typeinfo name for CBaseServerVehicle
 R typeinfo name for CBaseTFBotHintEntity
 R typeinfo name for CBaseTFIssue
 R typeinfo name for CBaseTeamObjectiveResource
 R typeinfo name for CBaseTempEntity
 R typeinfo name for CBaseToggle
 R typeinfo name for CBaseTrigger
 R typeinfo name for CBaseVPhysicsTrigger
 R typeinfo name for CBaseViewModel
 R typeinfo name for CBeam
 R typeinfo name for CBlood
 R typeinfo name for CBloodSplat
 R typeinfo name for CBoneFollower
 R typeinfo name for CBonusDuckPickup
 R typeinfo name for CBonusPack
 R typeinfo name for CBonusRoundLogic
 R typeinfo name for CBonusRoundLogic::NetworkVar_m_Item
 R typeinfo name for CBotCmd
 R typeinfo name for CBotNPCArcher
 R typeinfo name for CBotNPCArcher::CBotNPCArcherIntention
 R typeinfo name for CBotNPCArcherBehavior
 R typeinfo name for CBotNPCArcherGuardSpot
 R typeinfo name for CBotNPCArcherMoveToMark
 R typeinfo name for CBotNPCArcherShootBow
 R typeinfo name for CBotNPCArcherSurrender
 R typeinfo name for CBotNPCBody
 R typeinfo name for CBotNPCDecoy
 R typeinfo name for CBotNPCDecoy::CBotNPCDecoyIntention
 R typeinfo name for CBotNPCDecoyBehavior
 R typeinfo name for CBotNPCDecoyLocomotion
 R typeinfo name for CBreakModelsPrecached
 R typeinfo name for CBreakParser
 R typeinfo name for CBreakable
 R typeinfo name for CBreakableProp
 R typeinfo name for CBreakableSurface
 R typeinfo name for CBroadcastNonOwnerRecipientFilter
 R typeinfo name for CBroadcastRecipientFilter
 R typeinfo name for CBubbling
 R typeinfo name for CBulletPenetrateEnum
 R typeinfo name for CBulletsTraceFilter
 R typeinfo name for CCPTimerLogic
 R typeinfo name for CCallResult<CGCUpdateItemSchema, HTTPRequestCompleted_t>
 R typeinfo name for CCallResult<CLeaderboardInfo, LeaderboardFindResult_t>
 R typeinfo name for CCallResult<CLeaderboardInfo, LeaderboardScoresDownloaded_t>
 R typeinfo name for CCallResult<CMapInfoContainer, LeaderboardFindResult_t>
 R typeinfo name for CCallResult<CMapInfoContainer, LeaderboardScoresDownloaded_t>
 R typeinfo name for CCallResult<CTFWorkshopMap, SteamUGCQueryCompleted_t>
 R typeinfo name for CCallback<CGCClientSystem, SteamServersConnected_t, true>
 R typeinfo name for CCallback<CSteamWorksGameStatsUploader, GameStatsSessionClosed_t, true>
 R typeinfo name for CCallback<CSteamWorksGameStatsUploader, GameStatsSessionIssued_t, true>
 R typeinfo name for CCallback<CTFMapsWorkshop, DownloadItemResult_t, false>
 R typeinfo name for CCallback<CTFMapsWorkshop, DownloadItemResult_t, true>
 R typeinfo name for CCallback<CTFMapsWorkshop, ItemInstalled_t, false>
 R typeinfo name for CCallback<CTFMapsWorkshop, ItemInstalled_t, true>
 R typeinfo name for CCallback<GCSDK::CGCClient, GCMessageAvailable_t, false>
 R typeinfo name for CCallbackBase
 R typeinfo name for CCallbackImpl<12>
 R typeinfo name for CCallbackImpl<16>
 R typeinfo name for CCallbackImpl<1>
 R typeinfo name for CCallbackImpl<4>
 R typeinfo name for CCaptureFlag
 R typeinfo name for CCaptureFlagReturnIcon
 R typeinfo name for CCaptureZone
 R typeinfo name for CCaptureZoneShim
 R typeinfo name for CCasualMatchGroupDescription
 R typeinfo name for CCasualMatchGroupDescription::CCasualProgressionDesc
 R typeinfo name for CChangeClassZone
 R typeinfo name for CChangeLevel
 R typeinfo name for CChangeLevelIssue
 R typeinfo name for CCheckClient
 R typeinfo name for CChildOperatorDefinition
 R typeinfo name for CChoreoEvent
 R typeinfo name for CChoreoScene
 R typeinfo name for CChoreoStringPool
 R typeinfo name for CClassLimitsIssue
 R typeinfo name for CClassPtrSaveRestoreOps
 R typeinfo name for CCleanupDefaultRelationShips
 R typeinfo name for CCollectPayloadGuardVantagePoints
 R typeinfo name for CCollectReachableObjects
 R typeinfo name for CCollisionEvent
 R typeinfo name for CCollisionProperty
 R typeinfo name for CColorCorrection
 R typeinfo name for CColorCorrectionVolume
 R typeinfo name for CCombatCharVisCache
 R typeinfo name for CCommentaryAuto
 R typeinfo name for CCommentarySystem
 R typeinfo name for CCommentaryViewPosition
 R typeinfo name for CCommentary_SaveRestoreBlockHandler
 R typeinfo name for CCompareFriendFoeInfluence
 R typeinfo name for CCompetitiveLogic
 R typeinfo name for CConceptHistoriesDataOps
 R typeinfo name for CConditionFortuneTellerEffect
 R typeinfo name for CConstantForceController
 R typeinfo name for CConstraintAnchor
 R typeinfo name for CCopyRecipientFilter
 R typeinfo name for CCopyableUtlVector<MvMTourMission_t>
 R typeinfo name for CCopyableUtlVector<int>
 R typeinfo name for CCopyableUtlVector<static_attrib_t>
 R typeinfo name for CCountUserGeneratedAttributeIterator
 R typeinfo name for CCredits
 R typeinfo name for CCurrencyPack
 R typeinfo name for CCurrencyPackCustom
 R typeinfo name for CCurrencyPackMedium
 R typeinfo name for CCurrencyPackSmall
 R typeinfo name for CCyclicalHoliday
 R typeinfo name for CDataManager<CBoneCache, bonecacheparams_t, CBoneCache*, CThreadFastMutex>
 R typeinfo name for CDataManagerBase
 R typeinfo name for CDataObjectAccessSystem
 R typeinfo name for CDateBasedHoliday
 R typeinfo name for CDateBasedHolidayNoSpecificYear
 R typeinfo name for CDebugHistory
 R typeinfo name for CDecal
 R typeinfo name for CDecalEmitterSystem
 R typeinfo name for CDefSaveRestoreBlockHandler
 R typeinfo name for CDefSaveRestoreOps
 R typeinfo name for CDefaultAccessor
 R typeinfo name for CDefaultParticleSystemQuery
 R typeinfo name for CDefaultPlayerPickupVPhysics
 R typeinfo name for CDefaultResponseSystem
 R typeinfo name for CDefaultResponseSystemSaveRestoreBlockHandler
 R typeinfo name for CDevShotSystem
 R typeinfo name for CDirtySpatialPartitionEntityList
 R typeinfo name for CDisableVision
 R typeinfo name for CDispenserTouchTrigger
 R typeinfo name for CDllDemandLoader
 R typeinfo name for CDmgAccumulator
 R typeinfo name for CDynamicLight
 R typeinfo name for CDynamicProp
 R typeinfo name for CEconClaimCode
 R typeinfo name for CEconCraftingRecipeDefinition
 R typeinfo name for CEconEntity
 R typeinfo name for CEconEntity::NetworkVar_m_AttributeManager
 R typeinfo name for CEconGameAccountForGameServers
 R typeinfo name for CEconItem
 R typeinfo name for CEconItemAttribute
 R typeinfo name for CEconItemAttributeIterator_ApplyAttributeFloat
 R typeinfo name for CEconItemAttributeIterator_ApplyAttributeString
 R typeinfo name for CEconItemDefinition
 R typeinfo name for CEconItemHandle
 R typeinfo name for CEconItemPreviewDataBlock
 R typeinfo name for CEconItemSchema
 R typeinfo name for CEconItemSpecificAttributeIterator
 R typeinfo name for CEconItemSystem
 R typeinfo name for CEconItemView
 R typeinfo name for CEconItemView::NetworkVar_m_AttributeList
 R typeinfo name for CEconItemView::NetworkVar_m_NetworkedDynamicAttributesForDemos
 R typeinfo name for CEconLootListDefinition
 R typeinfo name for CEconStyleInfo
 R typeinfo name for CEconTool_AccountUpgradeToPremium
 R typeinfo name for CEconTool_BackpackExpander
 R typeinfo name for CEconTool_ClaimCode
 R typeinfo name for CEconTool_ClassTransmogrifier
 R typeinfo name for CEconTool_CrateKey
 R typeinfo name for CEconTool_CustomizeTexture
 R typeinfo name for CEconTool_Default
 R typeinfo name for CEconTool_DescTag
 R typeinfo name for CEconTool_DuckToken
 R typeinfo name for CEconTool_DuelingMinigame
 R typeinfo name for CEconTool_Festivizer
 R typeinfo name for CEconTool_Gift
 R typeinfo name for CEconTool_GiftWrap
 R typeinfo name for CEconTool_GrantOperationPass
 R typeinfo name for CEconTool_ItemDynamicRecipe
 R typeinfo name for CEconTool_ItemDynamicRecipe::CBaseRecipeComponent
 R typeinfo name for CEconTool_ItemDynamicRecipe::CDynamicRecipeComponentDefinedItem
 R typeinfo name for CEconTool_ItemDynamicRecipe::CDynamicRecipeComponentLootList
 R typeinfo name for CEconTool_ItemEaterRecharger
 R typeinfo name for CEconTool_KillStreakifier
 R typeinfo name for CEconTool_NameTag
 R typeinfo name for CEconTool_Noisemaker
 R typeinfo name for CEconTool_PaintCan
 R typeinfo name for CEconTool_StrangeCountTransfer
 R typeinfo name for CEconTool_StrangePart
 R typeinfo name for CEconTool_StrangePartRestriction
 R typeinfo name for CEconTool_Strangifier
 R typeinfo name for CEconTool_TFEventEnableHalloween
 R typeinfo name for CEconTool_TFSpellbookPage
 R typeinfo name for CEconTool_Unusualifier
 R typeinfo name for CEconTool_UpgradeCard
 R typeinfo name for CEconTool_WeddingRing
 R typeinfo name for CEconTool_WrappedGift
 R typeinfo name for CEconTool_Xifier
 R typeinfo name for CEconWearable
 R typeinfo name for CEffectsServer
 R typeinfo name for CEmbers
 R typeinfo name for CEmptyConVar
 R typeinfo name for CEnableMotionFixup
 R typeinfo name for CEnableTemporaryHalloweenIssue
 R typeinfo name for CEntFireAutoCompletionFunctor
 R typeinfo name for CEntityBird
 R typeinfo name for CEntityBlocker
 R typeinfo name for CEntityClassList<CPhysicsNPCSolver>
 R typeinfo name for CEntityClassList<CPointCamera>
 R typeinfo name for CEntityClassList<CSkyCamera>
 R typeinfo name for CEntityDataInstantiator<CWatcherList>
 R typeinfo name for CEntityDataInstantiator<ModelScale>
 R typeinfo name for CEntityDataInstantiator<StepSimulationData>
 R typeinfo name for CEntityDataInstantiator<groundlink_t>
 R typeinfo name for CEntityDataInstantiator<physicspushlist_t>
 R typeinfo name for CEntityDataInstantiator<touchlink_t>
 R typeinfo name for CEntityDataInstantiator<vphysicsupdateai_t>
 R typeinfo name for CEntityDissolve
 R typeinfo name for CEntityFactory<CAISound>
 R typeinfo name for CEntityFactory<CAI_AllySpeechManager>
 R typeinfo name for CEntityFactory<CAI_AssaultGoal>
 R typeinfo name for CEntityFactory<CAI_BattleLine>
 R typeinfo name for CEntityFactory<CAI_ChangeHintGroup>
 R typeinfo name for CEntityFactory<CAI_ChangeTarget>
 R typeinfo name for CEntityFactory<CAI_DynamicLink>
 R typeinfo name for CEntityFactory<CAI_DynamicLinkController>
 R typeinfo name for CEntityFactory<CAI_FollowGoal>
 R typeinfo name for CEntityFactory<CAI_Hint>
 R typeinfo name for CEntityFactory<CAI_LeadGoal>
 R typeinfo name for CEntityFactory<CAI_LeadGoal_Weapon>
 R typeinfo name for CEntityFactory<CAI_NetworkManager>
 R typeinfo name for CEntityFactory<CAI_RadialLinkController>
 R typeinfo name for CEntityFactory<CAI_Relationship>
 R typeinfo name for CEntityFactory<CAI_ScriptConditions>
 R typeinfo name for CEntityFactory<CAI_ScriptedSchedule>
 R typeinfo name for CEntityFactory<CAI_ScriptedSentence>
 R typeinfo name for CEntityFactory<CAI_ScriptedSequence>
 R typeinfo name for CEntityFactory<CAI_SpeechFilter>
 R typeinfo name for CEntityFactory<CAI_StandoffGoal>
 R typeinfo name for CEntityFactory<CAI_TestHull>
 R typeinfo name for CEntityFactory<CAchievementZone>
 R typeinfo name for CEntityFactory<CAmbientGeneric>
 R typeinfo name for CEntityFactory<CAmmoPack>
 R typeinfo name for CEntityFactory<CAmmoPackMedium>
 R typeinfo name for CEntityFactory<CAmmoPackSmall>
 R typeinfo name for CEntityFactory<CAreaPortal>
 R typeinfo name for CEntityFactory<CArenaLogic>
 R typeinfo name for CEntityFactory<CArmor>
 R typeinfo name for CEntityFactory<CAssaultPoint>
 R typeinfo name for CEntityFactory<CBallPlayerToucher>
 R typeinfo name for CEntityFactory<CBaseButton>
 R typeinfo name for CEntityFactory<CBaseDMStart>
 R typeinfo name for CEntityFactory<CBaseDoor>
 R typeinfo name for CEntityFactory<CBaseEntity>
 R typeinfo name for CEntityFactory<CBaseFilter>
 R typeinfo name for CEntityFactory<CBaseFlex>
 R typeinfo name for CEntityFactory<CBaseGrenade>
 R typeinfo name for CEntityFactory<CBaseGrenadeConcussion>
 R typeinfo name for CEntityFactory<CBaseGrenadeContact>
 R typeinfo name for CEntityFactory<CBaseGrenadeTimed>
 R typeinfo name for CEntityFactory<CBaseMoveBehavior>
 R typeinfo name for CEntityFactory<CBaseTrigger>
 R typeinfo name for CEntityFactory<CBaseViewModel>
 R typeinfo name for CEntityFactory<CBeam>
 R typeinfo name for CEntityFactory<CBlood>
 R typeinfo name for CEntityFactory<CBoneFollower>
 R typeinfo name for CEntityFactory<CBonusDuckPickup>
 R typeinfo name for CEntityFactory<CBonusPack>
 R typeinfo name for CEntityFactory<CBonusRoundLogic>
 R typeinfo name for CEntityFactory<CBotNPCArcher>
 R typeinfo name for CEntityFactory<CBotNPCDecoy>
 R typeinfo name for CEntityFactory<CBreakable>
 R typeinfo name for CEntityFactory<CBreakableSurface>
 R typeinfo name for CEntityFactory<CBubbling>
 R typeinfo name for CEntityFactory<CCPTimerLogic>
 R typeinfo name for CEntityFactory<CCaptureFlag>
 R typeinfo name for CEntityFactory<CCaptureFlagReturnIcon>
 R typeinfo name for CEntityFactory<CCaptureZone>
 R typeinfo name for CEntityFactory<CChangeClassZone>
 R typeinfo name for CEntityFactory<CChangeLevel>
 R typeinfo name for CEntityFactory<CColorCorrection>
 R typeinfo name for CEntityFactory<CColorCorrectionVolume>
 R typeinfo name for CEntityFactory<CCommentaryAuto>
 R typeinfo name for CEntityFactory<CCommentaryViewPosition>
 R typeinfo name for CEntityFactory<CCompetitiveLogic>
 R typeinfo name for CEntityFactory<CConstraintAnchor>
 R typeinfo name for CEntityFactory<CCredits>
 R typeinfo name for CEntityFactory<CCurrencyPack>
 R typeinfo name for CEntityFactory<CCurrencyPackCustom>
 R typeinfo name for CEntityFactory<CCurrencyPackMedium>
 R typeinfo name for CEntityFactory<CCurrencyPackSmall>
 R typeinfo name for CEntityFactory<CDebugHistory>
 R typeinfo name for CEntityFactory<CDecal>
 R typeinfo name for CEntityFactory<CDispenserTouchTrigger>
 R typeinfo name for CEntityFactory<CDynamicLight>
 R typeinfo name for CEntityFactory<CDynamicProp>
 R typeinfo name for CEntityFactory<CEconWearable>
 R typeinfo name for CEntityFactory<CEmbers>
 R typeinfo name for CEntityFactory<CEnableMotionFixup>
 R typeinfo name for CEntityFactory<CEntityBird>
 R typeinfo name for CEntityFactory<CEntityBlocker>
 R typeinfo name for CEntityFactory<CEntityDissolve>
 R typeinfo name for CEntityFactory<CEntityFlame>
 R typeinfo name for CEntityFactory<CEntityParticleTrail>
 R typeinfo name for CEntityFactory<CEntitySpawnManager>
 R typeinfo name for CEntityFactory<CEntitySpawnPoint>
 R typeinfo name for CEntityFactory<CEnvBeam>
 R typeinfo name for CEntityFactory<CEnvBeverage>
 R typeinfo name for CEntityFactory<CEnvDetailController>
 R typeinfo name for CEntityFactory<CEnvDustPuff>
 R typeinfo name for CEntityFactory<CEnvEffectsScript>
 R typeinfo name for CEntityFactory<CEnvEntityMaker>
 R typeinfo name for CEntityFactory<CEnvExplosion>
 R typeinfo name for CEntityFactory<CEnvFade>
 R typeinfo name for CEntityFactory<CEnvFireSensor>
 R typeinfo name for CEntityFactory<CEnvFireSource>
 R typeinfo name for CEntityFactory<CEnvFunnel>
 R typeinfo name for CEntityFactory<CEnvGlobal>
 R typeinfo name for CEntityFactory<CEnvGunfire>
 R typeinfo name for CEntityFactory<CEnvHudHint>
 R typeinfo name for CEntityFactory<CEnvLaser>
 R typeinfo name for CEntityFactory<CEnvLight>
 R typeinfo name for CEntityFactory<CEnvMicrophone>
 R typeinfo name for CEntityFactory<CEnvMuzzleFlash>
 R typeinfo name for CEntityFactory<CEnvParticleScript>
 R typeinfo name for CEntityFactory<CEnvPlayerSurfaceTrigger>
 R typeinfo name for CEntityFactory<CEnvProjectedTexture>
 R typeinfo name for CEntityFactory<CEnvQuadraticBeam>
 R typeinfo name for CEntityFactory<CEnvScreenEffect>
 R typeinfo name for CEntityFactory<CEnvScreenOverlay>
 R typeinfo name for CEntityFactory<CEnvShake>
 R typeinfo name for CEntityFactory<CEnvShooter>
 R typeinfo name for CEntityFactory<CEnvSoundscape>
 R typeinfo name for CEntityFactory<CEnvSoundscapeProxy>
 R typeinfo name for CEntityFactory<CEnvSoundscapeTriggerable>
 R typeinfo name for CEntityFactory<CEnvSpark>
 R typeinfo name for CEntityFactory<CEnvSplash>
 R typeinfo name for CEntityFactory<CEnvTonemapController>
 R typeinfo name for CEntityFactory<CEnvTracer>
 R typeinfo name for CEntityFactory<CEnvViewPunch>
 R typeinfo name for CEntityFactory<CEnvWind>
 R typeinfo name for CEntityFactory<CEnvZoom>
 R typeinfo name for CEntityFactory<CEventQueueSaveLoadProxy>
 R typeinfo name for CEntityFactory<CExtraMapEntity_Carrier>
 R typeinfo name for CEntityFactory<CExtraMapEntity_Rocket>
 R typeinfo name for CEntityFactory<CExtraMapEntity_Saucer>
 R typeinfo name for CEntityFactory<CExtraMapEntity_Sign>
 R typeinfo name for CEntityFactory<CEyeballBoss>
 R typeinfo name for CEntityFactory<CFilterClass>
 R typeinfo name for CEntityFactory<CFilterEnemy>
 R typeinfo name for CEntityFactory<CFilterMassGreater>
 R typeinfo name for CEntityFactory<CFilterMultiple>
 R typeinfo name for CEntityFactory<CFilterName>
 R typeinfo name for CEntityFactory<CFilterTFBotHasTag>
 R typeinfo name for CEntityFactory<CFilterTFCanCap>
 R typeinfo name for CEntityFactory<CFilterTFClass>
 R typeinfo name for CEntityFactory<CFilterTFCondition>
 R typeinfo name for CEntityFactory<CFilterTFTeam>
 R typeinfo name for CEntityFactory<CFire>
 R typeinfo name for CEntityFactory<CFireSmoke>
 R typeinfo name for CEntityFactory<CFireTrail>
 R typeinfo name for CEntityFactory<CFish>
 R typeinfo name for CEntityFactory<CFishPool>
 R typeinfo name for CEntityFactory<CFlagDetectionZone>
 R typeinfo name for CEntityFactory<CFlextalkActor>
 R typeinfo name for CEntityFactory<CFogController>
 R typeinfo name for CEntityFactory<CFuncAreaPortalWindow>
 R typeinfo name for CEntityFactory<CFuncBrush>
 R typeinfo name for CEntityFactory<CFuncConveyor>
 R typeinfo name for CEntityFactory<CFuncFlagAlertZone>
 R typeinfo name for CEntityFactory<CFuncForceField>
 R typeinfo name for CEntityFactory<CFuncIllusionary>
 R typeinfo name for CEntityFactory<CFuncLadder>
 R typeinfo name for CEntityFactory<CFuncLadderEndPoint>
 R typeinfo name for CEntityFactory<CFuncMonitor>
 R typeinfo name for CEntityFactory<CFuncMoveLinear>
 R typeinfo name for CEntityFactory<CFuncNavAvoid>
 R typeinfo name for CEntityFactory<CFuncNavBlocker>
 R typeinfo name for CEntityFactory<CFuncNavObstruction>
 R typeinfo name for CEntityFactory<CFuncNavPrefer>
 R typeinfo name for CEntityFactory<CFuncNavPrerequisite>
 R typeinfo name for CEntityFactory<CFuncNoBuild>
 R typeinfo name for CEntityFactory<CFuncOccluder>
 R typeinfo name for CEntityFactory<CFuncPasstimeGoal>
 R typeinfo name for CEntityFactory<CFuncPasstimeGoalieZone>
 R typeinfo name for CEntityFactory<CFuncPasstimeNoBallZone>
 R typeinfo name for CEntityFactory<CFuncPlat>
 R typeinfo name for CEntityFactory<CFuncPlatRot>
 R typeinfo name for CEntityFactory<CFuncReflectiveGlass>
 R typeinfo name for CEntityFactory<CFuncRespawnFlagZone>
 R typeinfo name for CEntityFactory<CFuncRespawnRoom>
 R typeinfo name for CEntityFactory<CFuncRespawnRoomVisualizer>
 R typeinfo name for CEntityFactory<CFuncRotating>
 R typeinfo name for CEntityFactory<CFuncSmokeVolume>
 R typeinfo name for CEntityFactory<CFuncSuggestedBuild>
 R typeinfo name for CEntityFactory<CFuncTankTrain>
 R typeinfo name for CEntityFactory<CFuncTrackAuto>
 R typeinfo name for CEntityFactory<CFuncTrackChange>
 R typeinfo name for CEntityFactory<CFuncTrackTrain>
 R typeinfo name for CEntityFactory<CFuncTrain>
 R typeinfo name for CEntityFactory<CFuncTrainControls>
 R typeinfo name for CEntityFactory<CFuncVPhysicsClip>
 R typeinfo name for CEntityFactory<CFuncVehicleClip>
 R typeinfo name for CEntityFactory<CFuncWall>
 R typeinfo name for CEntityFactory<CFuncWallToggle>
 R typeinfo name for CEntityFactory<CFunc_DustCloud>
 R typeinfo name for CEntityFactory<CFunc_DustMotes>
 R typeinfo name for CEntityFactory<CFunc_LOD>
 R typeinfo name for CEntityFactory<CGameEnd>
 R typeinfo name for CEntityFactory<CGameGibManager>
 R typeinfo name for CEntityFactory<CGamePlayerEquip>
 R typeinfo name for CEntityFactory<CGamePlayerTeam>
 R typeinfo name for CEntityFactory<CGamePlayerZone>
 R typeinfo name for CEntityFactory<CGameScore>
 R typeinfo name for CEntityFactory<CGameText>
 R typeinfo name for CEntityFactory<CGameUI>
 R typeinfo name for CEntityFactory<CGameWeaponManager>
 R typeinfo name for CEntityFactory<CGenericActor>
 R typeinfo name for CEntityFactory<CGenericFlexCycler>
 R typeinfo name for CEntityFactory<CGenericNPC>
 R typeinfo name for CEntityFactory<CGhost>
 R typeinfo name for CEntityFactory<CGib>
 R typeinfo name for CEntityFactory<CGibShooter>
 R typeinfo name for CEntityFactory<CGunTarget>
 R typeinfo name for CEntityFactory<CHalloweenGiftPickup>
 R typeinfo name for CEntityFactory<CHalloweenGiftSpawnLocation>
 R typeinfo name for CEntityFactory<CHalloweenPickup>
 R typeinfo name for CEntityFactory<CHalloweenSoulPack>
 R typeinfo name for CEntityFactory<CHandleDummy>
 R typeinfo name for CEntityFactory<CHandleTest>
 R typeinfo name for CEntityFactory<CHeadlessHatman>
 R typeinfo name for CEntityFactory<CHealthAmmoKit>
 R typeinfo name for CEntityFactory<CHealthKit>
 R typeinfo name for CEntityFactory<CHealthKitMedium>
 R typeinfo name for CEntityFactory<CHealthKitSmall>
 R typeinfo name for CEntityFactory<CHightower_TeleportVortex>
 R typeinfo name for CEntityFactory<CHybridMap_CTF_CP>
 R typeinfo name for CEntityFactory<CInfoCameraLink>
 R typeinfo name for CEntityFactory<CInfoIntermission>
 R typeinfo name for CEntityFactory<CInfoLadderDismount>
 R typeinfo name for CEntityFactory<CInfoLightingRelative>
 R typeinfo name for CEntityFactory<CInfoMassCenter>
 R typeinfo name for CEntityFactory<CInfoOverlayAccessor>
 R typeinfo name for CEntityFactory<CInfoTarget>
 R typeinfo name for CEntityFactory<CInstancedSceneEntity>
 R typeinfo name for CEntityFactory<CIntroViewpoint>
 R typeinfo name for CEntityFactory<CItemSoda>
 R typeinfo name for CEntityFactory<CKeepUpright>
 R typeinfo name for CEntityFactory<CKothLogic>
 R typeinfo name for CEntityFactory<CLaserDot>
 R typeinfo name for CEntityFactory<CLight>
 R typeinfo name for CEntityFactory<CLightGlow>
 R typeinfo name for CEntityFactory<CLogicActiveAutosave>
 R typeinfo name for CEntityFactory<CLogicAuto>
 R typeinfo name for CEntityFactory<CLogicAutosave>
 R typeinfo name for CEntityFactory<CLogicBranch>
 R typeinfo name for CEntityFactory<CLogicBranchList>
 R typeinfo name for CEntityFactory<CLogicCase>
 R typeinfo name for CEntityFactory<CLogicCollisionPair>
 R typeinfo name for CEntityFactory<CLogicCompare>
 R typeinfo name for CEntityFactory<CLogicCompareInteger>
 R typeinfo name for CEntityFactory<CLogicLineToEntity>
 R typeinfo name for CEntityFactory<CLogicMannPower>
 R typeinfo name for CEntityFactory<CLogicMeasureMovement>
 R typeinfo name for CEntityFactory<CLogicNavigation>
 R typeinfo name for CEntityFactory<CLogicOnHoliday>
 R typeinfo name for CEntityFactory<CLogicRelay>
 R typeinfo name for CEntityFactory<CMannVsMachineLogic>
 R typeinfo name for CEntityFactory<CMannVsMachineStats>
 R typeinfo name for CEntityFactory<CMaterialModifyControl>
 R typeinfo name for CEntityFactory<CMathColorBlend>
 R typeinfo name for CEntityFactory<CMathCounter>
 R typeinfo name for CEntityFactory<CMathRemap>
 R typeinfo name for CEntityFactory<CMedievalLogic>
 R typeinfo name for CEntityFactory<CMerasmus>
 R typeinfo name for CEntityFactory<CMerasmusDancer>
 R typeinfo name for CEntityFactory<CMessage>
 R typeinfo name for CEntityFactory<CMessageEntity>
 R typeinfo name for CEntityFactory<CMomentaryRotButton>
 R typeinfo name for CEntityFactory<CMonsterResource>
 R typeinfo name for CEntityFactory<CMovementSpeedMod>
 R typeinfo name for CEntityFactory<CMultiSource>
 R typeinfo name for CEntityFactory<CMultipleEscort>
 R typeinfo name for CEntityFactory<CNPCMaker>
 R typeinfo name for CEntityFactory<CNPCSpawnDestination>
 R typeinfo name for CEntityFactory<CNPC_Furniture>
 R typeinfo name for CEntityFactory<CNPC_VehicleDriver>
 R typeinfo name for CEntityFactory<CNoGrenadesZone>
 R typeinfo name for CEntityFactory<CNodeEnt>
 R typeinfo name for CEntityFactory<CNullEntity>
 R typeinfo name for CEntityFactory<CObjectCartDispenser>
 R typeinfo name for CEntityFactory<CObjectDispenser>
 R typeinfo name for CEntityFactory<CObjectSapper>
 R typeinfo name for CEntityFactory<CObjectSentrygun>
 R typeinfo name for CEntityFactory<CObjectTeleporter>
 R typeinfo name for CEntityFactory<CObserverPoint>
 R typeinfo name for CEntityFactory<COrnamentProp>
 R typeinfo name for CEntityFactory<CParticleFire>
 R typeinfo name for CEntityFactory<CParticleLight>
 R typeinfo name for CEntityFactory<CParticlePerformanceMonitor>
 R typeinfo name for CEntityFactory<CParticleSystem>
 R typeinfo name for CEntityFactory<CPasstimeBall>
 R typeinfo name for CEntityFactory<CPasstimeBallSpawn>
 R typeinfo name for CEntityFactory<CPasstimeGun>
 R typeinfo name for CEntityFactory<CPathCorner>
 R typeinfo name for CEntityFactory<CPathCornerCrash>
 R typeinfo name for CEntityFactory<CPathKeyFrame>
 R typeinfo name for CEntityFactory<CPathTrack>
 R typeinfo name for CEntityFactory<CPhysBallSocket>
 R typeinfo name for CEntityFactory<CPhysBox>
 R typeinfo name for CEntityFactory<CPhysBoxMultiplayer>
 R typeinfo name for CEntityFactory<CPhysConstraintSystem>
 R typeinfo name for CEntityFactory<CPhysConvert>
 R typeinfo name for CEntityFactory<CPhysExplosion>
 R typeinfo name for CEntityFactory<CPhysFixed>
 R typeinfo name for CEntityFactory<CPhysHinge>
 R typeinfo name for CEntityFactory<CPhysImpact>
 R typeinfo name for CEntityFactory<CPhysLength>
 R typeinfo name for CEntityFactory<CPhysMagnet>
 R typeinfo name for CEntityFactory<CPhysMotor>
 R typeinfo name for CEntityFactory<CPhysPulley>
 R typeinfo name for CEntityFactory<CPhysSlideConstraint>
 R typeinfo name for CEntityFactory<CPhysSphere>
 R typeinfo name for CEntityFactory<CPhysThruster>
 R typeinfo name for CEntityFactory<CPhysTorque>
 R typeinfo name for CEntityFactory<CPhysicsCannister>
 R typeinfo name for CEntityFactory<CPhysicsEntitySolver>
 R typeinfo name for CEntityFactory<CPhysicsNPCSolver>
 R typeinfo name for CEntityFactory<CPhysicsProp>
 R typeinfo name for CEntityFactory<CPhysicsPropMultiplayer>
 R typeinfo name for CEntityFactory<CPhysicsPropRespawnable>
 R typeinfo name for CEntityFactory<CPhysicsSpring>
 R typeinfo name for CEntityFactory<CPhysicsWire>
 R typeinfo name for CEntityFactory<CPlasma>
 R typeinfo name for CEntityFactory<CPlayerDestructionDispenser>
 R typeinfo name for CEntityFactory<CPlayerResource>
 R typeinfo name for CEntityFactory<CPointAngleSensor>
 R typeinfo name for CEntityFactory<CPointAngularVelocitySensor>
 R typeinfo name for CEntityFactory<CPointBonusMapsAccessor>
 R typeinfo name for CEntityFactory<CPointCamera>
 R typeinfo name for CEntityFactory<CPointClientCommand>
 R typeinfo name for CEntityFactory<CPointCommentaryNode>
 R typeinfo name for CEntityFactory<CPointDevShotCamera>
 R typeinfo name for CEntityFactory<CPointEntity>
 R typeinfo name for CEntityFactory<CPointGamestatsCounter>
 R typeinfo name for CEntityFactory<CPointHurt>
 R typeinfo name for CEntityFactory<CPointNavInterface>
 R typeinfo name for CEntityFactory<CPointPlayerMoveConstraint>
 R typeinfo name for CEntityFactory<CPointPopulatorInterface>
 R typeinfo name for CEntityFactory<CPointProximitySensor>
 R typeinfo name for CEntityFactory<CPointPush>
 R typeinfo name for CEntityFactory<CPointServerCommand>
 R typeinfo name for CEntityFactory<CPointSpotlight>
 R typeinfo name for CEntityFactory<CPointTeleport>
 R typeinfo name for CEntityFactory<CPointTemplate>
 R typeinfo name for CEntityFactory<CPointVelocitySensor>
 R typeinfo name for CEntityFactory<CPopulationManager>
 R typeinfo name for CEntityFactory<CPopulatorInternalSpawnPoint>
 R typeinfo name for CEntityFactory<CPoseController>
 R typeinfo name for CEntityFactory<CPowerupVolume>
 R typeinfo name for CEntityFactory<CPrecipitation>
 R typeinfo name for CEntityFactory<CProjectedDecal>
 R typeinfo name for CEntityFactory<CPropDoorRotating>
 R typeinfo name for CEntityFactory<CPropSoccerBall>
 R typeinfo name for CEntityFactory<CPropVehicle>
 R typeinfo name for CEntityFactory<CPropVehicleDriveable>
 R typeinfo name for CEntityFactory<CPushable>
 R typeinfo name for CEntityFactory<CRagGib>
 R typeinfo name for CEntityFactory<CRagdollBoogie>
 R typeinfo name for CEntityFactory<CRagdollConstraint>
 R typeinfo name for CEntityFactory<CRagdollMagnet>
 R typeinfo name for CEntityFactory<CRagdollManager>
 R typeinfo name for CEntityFactory<CRagdollProp>
 R typeinfo name for CEntityFactory<CRagdollPropAttached>
 R typeinfo name for CEntityFactory<CRallyPoint>
 R typeinfo name for CEntityFactory<CRegenerateZone>
 R typeinfo name for CEntityFactory<CRevertSaved>
 R typeinfo name for CEntityFactory<CRobotDestructionVaultTrigger>
 R typeinfo name for CEntityFactory<CRobotDispenser>
 R typeinfo name for CEntityFactory<CRopeAnchor>
 R typeinfo name for CEntityFactory<CRopeKeyframe>
 R typeinfo name for CEntityFactory<CRotButton>
 R typeinfo name for CEntityFactory<CRotDoor>
 R typeinfo name for CEntityFactory<CRotorWashShooter>
 R typeinfo name for CEntityFactory<CSceneEntity>
 R typeinfo name for CEntityFactory<CSceneListManager>
 R typeinfo name for CEntityFactory<CSceneManager>
 R typeinfo name for CEntityFactory<CScriptedTarget>
 R typeinfo name for CEntityFactory<CServerRagdollTrigger>
 R typeinfo name for CEntityFactory<CShadowControl>
 R typeinfo name for CEntityFactory<CShower>
 R typeinfo name for CEntityFactory<CSimpleBot>
 R typeinfo name for CEntityFactory<CSimplePhysicsBrush>
 R typeinfo name for CEntityFactory<CSimplePhysicsProp>
 R typeinfo name for CEntityFactory<CSkyCamera>
 R typeinfo name for CEntityFactory<CSlideshowDisplay>
 R typeinfo name for CEntityFactory<CSmokeStack>
 R typeinfo name for CEntityFactory<CSniperDot>
 R typeinfo name for CEntityFactory<CSoundEnt>
 R typeinfo name for CEntityFactory<CSpellPickup>
 R typeinfo name for CEntityFactory<CSpotlightEnd>
 R typeinfo name for CEntityFactory<CSprayCan>
 R typeinfo name for CEntityFactory<CSprite>
 R typeinfo name for CEntityFactory<CSpriteOriented>
 R typeinfo name for CEntityFactory<CSpriteTrail>
 R typeinfo name for CEntityFactory<CSteamJet>
 R typeinfo name for CEntityFactory<CStripWeapons>
 R typeinfo name for CEntityFactory<CSun>
 R typeinfo name for CEntityFactory<CTFAmmoPack>
 R typeinfo name for CEntityFactory<CTFArcherProxy>
 R typeinfo name for CEntityFactory<CTFBall_Ornament>
 R typeinfo name for CEntityFactory<CTFBaseBoss>
 R typeinfo name for CEntityFactory<CTFBat>
 R typeinfo name for CEntityFactory<CTFBat_Fish>
 R typeinfo name for CEntityFactory<CTFBat_Giftwrap>
 R typeinfo name for CEntityFactory<CTFBat_Wood>
 R typeinfo name for CEntityFactory<CTFBonesaw>
 R typeinfo name for CEntityFactory<CTFBot>
 R typeinfo name for CEntityFactory<CTFBotActionPoint>
 R typeinfo name for CEntityFactory<CTFBotController>
 R typeinfo name for CEntityFactory<CTFBotGenerator>
 R typeinfo name for CEntityFactory<CTFBotHint>
 R typeinfo name for CEntityFactory<CTFBotHintEngineerNest>
 R typeinfo name for CEntityFactory<CTFBotHintSentrygun>
 R typeinfo name for CEntityFactory<CTFBotHintTeleporterExit>
 R typeinfo name for CEntityFactory<CTFBotProxy>
 R typeinfo name for CEntityFactory<CTFBotRoster>
 R typeinfo name for CEntityFactory<CTFBottle>
 R typeinfo name for CEntityFactory<CTFBuffItem>
 R typeinfo name for CEntityFactory<CTFCannon>
 R typeinfo name for CEntityFactory<CTFChargedSMG>
 R typeinfo name for CEntityFactory<CTFCleaver>
 R typeinfo name for CEntityFactory<CTFClub>
 R typeinfo name for CEntityFactory<CTFCompoundBow>
 R typeinfo name for CEntityFactory<CTFCrossbow>
 R typeinfo name for CEntityFactory<CTFDRGPomson>
 R typeinfo name for CEntityFactory<CTFDroppedWeapon>
 R typeinfo name for CEntityFactory<CTFFireAxe>
 R typeinfo name for CEntityFactory<CTFFists>
 R typeinfo name for CEntityFactory<CTFFlameEntity>
 R typeinfo name for CEntityFactory<CTFFlameThrower>
 R typeinfo name for CEntityFactory<CTFFlareGun>
 R typeinfo name for CEntityFactory<CTFFlareGun_Revenge>
 R typeinfo name for CEntityFactory<CTFForceRespawn>
 R typeinfo name for CEntityFactory<CTFGameRulesProxy>
 R typeinfo name for CEntityFactory<CTFGenericBomb>
 R typeinfo name for CEntityFactory<CTFGlow>
 R typeinfo name for CEntityFactory<CTFGrapplingHook>
 R typeinfo name for CEntityFactory<CTFGrenadeLauncher>
 R typeinfo name for CEntityFactory<CTFGrenadePipebombProjectile>
 R typeinfo name for CEntityFactory<CTFHalloweenFortuneTeller>
 R typeinfo name for CEntityFactory<CTFHalloweenMinigame>
 R typeinfo name for CEntityFactory<CTFHalloweenMinigame_FallingPlatforms>
 R typeinfo name for CEntityFactory<CTFHellZap>
 R typeinfo name for CEntityFactory<CTFHolidayEntity>
 R typeinfo name for CEntityFactory<CTFHudNotify>
 R typeinfo name for CEntityFactory<CTFInfoPowerupSpawn>
 R typeinfo name for CEntityFactory<CTFIntermission>
 R typeinfo name for CEntityFactory<CTFJar>
 R typeinfo name for CEntityFactory<CTFJarMilk>
 R typeinfo name for CEntityFactory<CTFKatana>
 R typeinfo name for CEntityFactory<CTFKnife>
 R typeinfo name for CEntityFactory<CTFLaserPointer>
 R typeinfo name for CEntityFactory<CTFLunchBox>
 R typeinfo name for CEntityFactory<CTFLunchBox_Drink>
 R typeinfo name for CEntityFactory<CTFMechanicalArm>
 R typeinfo name for CEntityFactory<CTFMedigunShield>
 R typeinfo name for CEntityFactory<CTFMerasmusTrickOrTreatProp>
 R typeinfo name for CEntityFactory<CTFMiniGame>
 R typeinfo name for CEntityFactory<CTFMinigameLogic>
 R typeinfo name for CEntityFactory<CTFMinigun>
 R typeinfo name for CEntityFactory<CTFObjectiveResource>
 R typeinfo name for CEntityFactory<CTFPEPBrawlerBlaster>
 R typeinfo name for CEntityFactory<CTFParachute>
 R typeinfo name for CEntityFactory<CTFParachute_Primary>
 R typeinfo name for CEntityFactory<CTFParachute_Secondary>
 R typeinfo name for CEntityFactory<CTFParticleCannon>
 R typeinfo name for CEntityFactory<CTFPasstimeLogic>
 R typeinfo name for CEntityFactory<CTFPipebombLauncher>
 R typeinfo name for CEntityFactory<CTFPistol>
 R typeinfo name for CEntityFactory<CTFPistol_Scout>
 R typeinfo name for CEntityFactory<CTFPistol_ScoutPrimary>
 R typeinfo name for CEntityFactory<CTFPistol_ScoutSecondary>
 R typeinfo name for CEntityFactory<CTFPlayer>
 R typeinfo name for CEntityFactory<CTFPlayerDestructionLogic>
 R typeinfo name for CEntityFactory<CTFPlayerResource>
 R typeinfo name for CEntityFactory<CTFPointWeaponMimic>
 R typeinfo name for CEntityFactory<CTFPowerupBottle>
 R typeinfo name for CEntityFactory<CTFProjectile_Arrow>
 R typeinfo name for CEntityFactory<CTFProjectile_Cleaver>
 R typeinfo name for CEntityFactory<CTFProjectile_EnergyBall>
 R typeinfo name for CEntityFactory<CTFProjectile_EnergyRing>
 R typeinfo name for CEntityFactory<CTFProjectile_Flare>
 R typeinfo name for CEntityFactory<CTFProjectile_GrapplingHook>
 R typeinfo name for CEntityFactory<CTFProjectile_HealingBolt>
 R typeinfo name for CEntityFactory<CTFProjectile_Jar>
 R typeinfo name for CEntityFactory<CTFProjectile_JarMilk>
 R typeinfo name for CEntityFactory<CTFProjectile_Rocket>
 R typeinfo name for CEntityFactory<CTFProjectile_SentryRocket>
 R typeinfo name for CEntityFactory<CTFProjectile_SpellBats>
 R typeinfo name for CEntityFactory<CTFProjectile_SpellFireball>
 R typeinfo name for CEntityFactory<CTFProjectile_SpellKartBats>
 R typeinfo name for CEntityFactory<CTFProjectile_SpellKartOrb>
 R typeinfo name for CEntityFactory<CTFProjectile_SpellLightningOrb>
 R typeinfo name for CEntityFactory<CTFProjectile_SpellMeteorShower>
 R typeinfo name for CEntityFactory<CTFProjectile_SpellMirv>
 R typeinfo name for CEntityFactory<CTFProjectile_SpellPumpkin>
 R typeinfo name for CEntityFactory<CTFProjectile_SpellSpawnBoss>
 R typeinfo name for CEntityFactory<CTFProjectile_SpellSpawnHorde>
 R typeinfo name for CEntityFactory<CTFProjectile_SpellSpawnZombie>
 R typeinfo name for CEntityFactory<CTFProjectile_SpellTransposeTeleport>
 R typeinfo name for CEntityFactory<CTFProjectile_Syringe>
 R typeinfo name for CEntityFactory<CTFProjectile_Throwable>
 R typeinfo name for CEntityFactory<CTFProjectile_ThrowableBreadMonster>
 R typeinfo name for CEntityFactory<CTFProjectile_ThrowableBrick>
 R typeinfo name for CEntityFactory<CTFProjectile_ThrowableRepel>
 R typeinfo name for CEntityFactory<CTFPumpkinBomb>
 R typeinfo name for CEntityFactory<CTFRagdoll>
 R typeinfo name for CEntityFactory<CTFRaygun>
 R typeinfo name for CEntityFactory<CTFReviveMarker>
 R typeinfo name for CEntityFactory<CTFRevolver>
 R typeinfo name for CEntityFactory<CTFRobotArm>
 R typeinfo name for CEntityFactory<CTFRobotDestructionLogic>
 R typeinfo name for CEntityFactory<CTFRobotDestruction_Robot>
 R typeinfo name for CEntityFactory<CTFRobotDestruction_RobotGroup>
 R typeinfo name for CEntityFactory<CTFRobotDestruction_RobotSpawn>
 R typeinfo name for CEntityFactory<CTFRocketLauncher>
 R typeinfo name for CEntityFactory<CTFRocketLauncher_AirStrike>
 R typeinfo name for CEntityFactory<CTFRocketLauncher_DirectHit>
 R typeinfo name for CEntityFactory<CTFRune>
 R typeinfo name for CEntityFactory<CTFRuneTemp>
 R typeinfo name for CEntityFactory<CTFRuneTempCrit>
 R typeinfo name for CEntityFactory<CTFRuneTempUber>
 R typeinfo name for CEntityFactory<CTFSMG>
 R typeinfo name for CEntityFactory<CTFScatterGun>
 R typeinfo name for CEntityFactory<CTFShotgun>
 R typeinfo name for CEntityFactory<CTFShotgunBuildingRescue>
 R typeinfo name for CEntityFactory<CTFShotgun_HWG>
 R typeinfo name for CEntityFactory<CTFShotgun_Pyro>
 R typeinfo name for CEntityFactory<CTFShotgun_Revenge>
 R typeinfo name for CEntityFactory<CTFShotgun_Soldier>
 R typeinfo name for CEntityFactory<CTFShovel>
 R typeinfo name for CEntityFactory<CTFSniperRifle>
 R typeinfo name for CEntityFactory<CTFSniperRifleClassic>
 R typeinfo name for CEntityFactory<CTFSniperRifleDecap>
 R typeinfo name for CEntityFactory<CTFSodaPopper>
 R typeinfo name for CEntityFactory<CTFSpawner>
 R typeinfo name for CEntityFactory<CTFSpellBook>
 R typeinfo name for CEntityFactory<CTFSpell_MeteorShowerSpawner>
 R typeinfo name for CEntityFactory<CTFStickBomb>
 R typeinfo name for CEntityFactory<CTFStunBall>
 R typeinfo name for CEntityFactory<CTFSword>
 R typeinfo name for CEntityFactory<CTFSyringeGun>
 R typeinfo name for CEntityFactory<CTFTankBoss>
 R typeinfo name for CEntityFactory<CTFTankDestruction>
 R typeinfo name for CEntityFactory<CTFTargetDummy>
 R typeinfo name for CEntityFactory<CTFTauntProp>
 R typeinfo name for CEntityFactory<CTFTeam>
 R typeinfo name for CEntityFactory<CTFTeamSpawn>
 R typeinfo name for CEntityFactory<CTFTeleportLocation>
 R typeinfo name for CEntityFactory<CTFTrainingDynamicProp>
 R typeinfo name for CEntityFactory<CTFViewModel>
 R typeinfo name for CEntityFactory<CTFWeaponBase>
 R typeinfo name for CEntityFactory<CTFWeaponBaseGrenadeProj>
 R typeinfo name for CEntityFactory<CTFWeaponBaseMelee>
 R typeinfo name for CEntityFactory<CTFWeaponBaseMerasmusGrenade>
 R typeinfo name for CEntityFactory<CTFWeaponBuilder>
 R typeinfo name for CEntityFactory<CTFWeaponInvis>
 R typeinfo name for CEntityFactory<CTFWeaponPDAExpansion_Dispenser>
 R typeinfo name for CEntityFactory<CTFWeaponPDAExpansion_Teleporter>
 R typeinfo name for CEntityFactory<CTFWeaponPDA_Engineer_Build>
 R typeinfo name for CEntityFactory<CTFWeaponPDA_Engineer_Destroy>
 R typeinfo name for CEntityFactory<CTFWeaponPDA_Spy>
 R typeinfo name for CEntityFactory<CTFWeaponSapper>
 R typeinfo name for CEntityFactory<CTFWearable>
 R typeinfo name for CEntityFactory<CTFWearableDemoShield>
 R typeinfo name for CEntityFactory<CTFWearableLevelableItem>
 R typeinfo name for CEntityFactory<CTFWearableRobotArm>
 R typeinfo name for CEntityFactory<CTFWearableVM>
 R typeinfo name for CEntityFactory<CTFWrench>
 R typeinfo name for CEntityFactory<CTankTargetChange>
 R typeinfo name for CEntityFactory<CTankTrainAI>
 R typeinfo name for CEntityFactory<CTargetCDAudioRep>
 R typeinfo name for CEntityFactory<CTargetChangeGravity>
 R typeinfo name for CEntityFactory<CTeam>
 R typeinfo name for CEntityFactory<CTeamControlPoint>
 R typeinfo name for CEntityFactory<CTeamControlPointMaster>
 R typeinfo name for CEntityFactory<CTeamControlPointRound>
 R typeinfo name for CEntityFactory<CTeamRoundTimer>
 R typeinfo name for CEntityFactory<CTeamTrainWatcher>
 R typeinfo name for CEntityFactory<CTeamplayRoundWin>
 R typeinfo name for CEntityFactory<CTeleportVortex>
 R typeinfo name for CEntityFactory<CTempEntTester>
 R typeinfo name for CEntityFactory<CTemplateNPCMaker>
 R typeinfo name for CEntityFactory<CTesla>
 R typeinfo name for CEntityFactory<CTestEffect>
 R typeinfo name for CEntityFactory<CTestTraceline>
 R typeinfo name for CEntityFactory<CTest_ProxyToggle_Networkable>
 R typeinfo name for CEntityFactory<CTextureToggle>
 R typeinfo name for CEntityFactory<CTimerEntity>
 R typeinfo name for CEntityFactory<CTrainingAnnotation>
 R typeinfo name for CEntityFactory<CTrainingModeLogic>
 R typeinfo name for CEntityFactory<CTriggerAddOrRemoveTFPlayerAttributes>
 R typeinfo name for CEntityFactory<CTriggerAddTFPlayerCondition>
 R typeinfo name for CEntityFactory<CTriggerApplyImpulse>
 R typeinfo name for CEntityFactory<CTriggerAreaCapture>
 R typeinfo name for CEntityFactory<CTriggerBotTag>
 R typeinfo name for CEntityFactory<CTriggerBrush>
 R typeinfo name for CEntityFactory<CTriggerCDAudio>
 R typeinfo name for CEntityFactory<CTriggerCamera>
 R typeinfo name for CEntityFactory<CTriggerCatapult>
 R typeinfo name for CEntityFactory<CTriggerGravity>
 R typeinfo name for CEntityFactory<CTriggerHurt>
 R typeinfo name for CEntityFactory<CTriggerIgnite>
 R typeinfo name for CEntityFactory<CTriggerIgniteArrows>
 R typeinfo name for CEntityFactory<CTriggerImpact>
 R typeinfo name for CEntityFactory<CTriggerLook>
 R typeinfo name for CEntityFactory<CTriggerMultiple>
 R typeinfo name for CEntityFactory<CTriggerOnce>
 R typeinfo name for CEntityFactory<CTriggerParticle>
 R typeinfo name for CEntityFactory<CTriggerPasstimeBall>
 R typeinfo name for CEntityFactory<CTriggerPlayerMovement>
 R typeinfo name for CEntityFactory<CTriggerPlayerRespawnOverride>
 R typeinfo name for CEntityFactory<CTriggerProximity>
 R typeinfo name for CEntityFactory<CTriggerPush>
 R typeinfo name for CEntityFactory<CTriggerRemove>
 R typeinfo name for CEntityFactory<CTriggerRemoveTFPlayerCondition>
 R typeinfo name for CEntityFactory<CTriggerSave>
 R typeinfo name for CEntityFactory<CTriggerSoundscape>
 R typeinfo name for CEntityFactory<CTriggerStun>
 R typeinfo name for CEntityFactory<CTriggerTeleport>
 R typeinfo name for CEntityFactory<CTriggerTeleportRelative>
 R typeinfo name for CEntityFactory<CTriggerTimerDoor>
 R typeinfo name for CEntityFactory<CTriggerToggleSave>
 R typeinfo name for CEntityFactory<CTriggerVPhysicsMotion>
 R typeinfo name for CEntityFactory<CTriggerVolume>
 R typeinfo name for CEntityFactory<CTriggerWind>
 R typeinfo name for CEntityFactory<CUpgrades>
 R typeinfo name for CEntityFactory<CVGuiScreen>
 R typeinfo name for CEntityFactory<CVoteController>
 R typeinfo name for CEntityFactory<CWC_UpdateIgnoreList>
 R typeinfo name for CEntityFactory<CWaterBullet>
 R typeinfo name for CEntityFactory<CWaterLODControl>
 R typeinfo name for CEntityFactory<CWeaponIFMBase>
 R typeinfo name for CEntityFactory<CWeaponIFMBaseCamera>
 R typeinfo name for CEntityFactory<CWeaponIFMSteadyCam>
 R typeinfo name for CEntityFactory<CWeaponMedigun>
 R typeinfo name for CEntityFactory<CWeightButton>
 R typeinfo name for CEntityFactory<CWheelOfDoom>
 R typeinfo name for CEntityFactory<CWheelOfDoomSpiral>
 R typeinfo name for CEntityFactory<CWindowPane>
 R typeinfo name for CEntityFactory<CWorld>
 R typeinfo name for CEntityFactory<CWorldItem>
 R typeinfo name for CEntityFactory<CZombie>
 R typeinfo name for CEntityFactory<CZombieSpawner>
 R typeinfo name for CEntityFactory<DustTrail>
 R typeinfo name for CEntityFactory<FilterDamageType>
 R typeinfo name for CEntityFactory<FilterDamagedByWeaponInSlot>
 R typeinfo name for CEntityFactory<FilterTeam>
 R typeinfo name for CEntityFactory<MovieExplosion>
 R typeinfo name for CEntityFactory<ParticleSmokeGrenade>
 R typeinfo name for CEntityFactory<RocketTrail>
 R typeinfo name for CEntityFactory<SmokeTrail>
 R typeinfo name for CEntityFactory<SporeExplosion>
 R typeinfo name for CEntityFactory<SporeTrail>
 R typeinfo name for CEntityFactoryDictionary
 R typeinfo name for CEntityFlame
 R typeinfo name for CEntityListSystem
 R typeinfo name for CEntityParticleTrail
 R typeinfo name for CEntityParticleTrail::NetworkVar_m_Info
 R typeinfo name for CEntitySaveRestoreBlockHandler
 R typeinfo name for CEntitySaveUtils
 R typeinfo name for CEntitySpawnManager
 R typeinfo name for CEntitySpawnPoint
 R typeinfo name for CEntityTouchManager
 R typeinfo name for CEnvBeam
 R typeinfo name for CEnvBeverage
 R typeinfo name for CEnvDetailController
 R typeinfo name for CEnvDustPuff
 R typeinfo name for CEnvEffectsScript
 R typeinfo name for CEnvEntityMaker
 R typeinfo name for CEnvExplosion
 R typeinfo name for CEnvFade
 R typeinfo name for CEnvFireSensor
 R typeinfo name for CEnvFireSource
 R typeinfo name for CEnvFunnel
 R typeinfo name for CEnvGlobal
 R typeinfo name for CEnvGunfire
 R typeinfo name for CEnvHudHint
 R typeinfo name for CEnvLaser
 R typeinfo name for CEnvLight
 R typeinfo name for CEnvMicrophone
 R typeinfo name for CEnvMuzzleFlash
 R typeinfo name for CEnvParticleScript
 R typeinfo name for CEnvPlayerSurfaceTrigger
 R typeinfo name for CEnvProjectedTexture
 R typeinfo name for CEnvQuadraticBeam
 R typeinfo name for CEnvScreenEffect
 R typeinfo name for CEnvScreenOverlay
 R typeinfo name for CEnvShake
 R typeinfo name for CEnvShooter
 R typeinfo name for CEnvSoundscape
 R typeinfo name for CEnvSoundscapeProxy
 R typeinfo name for CEnvSoundscapeTriggerable
 R typeinfo name for CEnvSpark
 R typeinfo name for CEnvSplash
 R typeinfo name for CEnvTonemapController
 R typeinfo name for CEnvTracer
 R typeinfo name for CEnvViewPunch
 R typeinfo name for CEnvWind
 R typeinfo name for CEnvWindShared
 R typeinfo name for CEnvZoom
 R typeinfo name for CEventLog
 R typeinfo name for CEventQueueSaveLoadProxy
 R typeinfo name for CEventQueue_SaveRestoreBlockHandler
 R typeinfo name for CEventsSaveDataOps
 R typeinfo name for CExtendLevelIssue
 R typeinfo name for CExtraMapEntity
 R typeinfo name for CExtraMapEntity_Carrier
 R typeinfo name for CExtraMapEntity_Rocket
 R typeinfo name for CExtraMapEntity_Saucer
 R typeinfo name for CExtraMapEntity_Sign
 R typeinfo name for CEyeballBoss
 R typeinfo name for CEyeballBoss::CEyeballBossIntention
 R typeinfo name for CEyeballBossApproachTarget
 R typeinfo name for CEyeballBossBehavior
 R typeinfo name for CEyeballBossBody
 R typeinfo name for CEyeballBossDead
 R typeinfo name for CEyeballBossEmerge
 R typeinfo name for CEyeballBossEmote
 R typeinfo name for CEyeballBossEscape
 R typeinfo name for CEyeballBossIdle
 R typeinfo name for CEyeballBossLaunchRockets
 R typeinfo name for CEyeballBossLocomotion
 R typeinfo name for CEyeballBossNotice
 R typeinfo name for CEyeballBossStunned
 R typeinfo name for CEyeballBossTeleport
 R typeinfo name for CFilterClass
 R typeinfo name for CFilterEnemy
 R typeinfo name for CFilterMassGreater
 R typeinfo name for CFilterMultiple
 R typeinfo name for CFilterName
 R typeinfo name for CFilterTFBotHasTag
 R typeinfo name for CFilterTFCanCap
 R typeinfo name for CFilterTFClass
 R typeinfo name for CFilterTFCondition
 R typeinfo name for CFilterTFTeam
 R typeinfo name for CFindMostInjuredNeighbor
 R typeinfo name for CFire
 R typeinfo name for CFireSmoke
 R typeinfo name for CFireSphere
 R typeinfo name for CFireTrail
 R typeinfo name for CFish
 R typeinfo name for CFishPool
 R typeinfo name for CFlagDetectionZone
 R typeinfo name for CFlaggedEntitiesEnum
 R typeinfo name for CFlameEntityEnum
 R typeinfo name for CFlexAnimationTrack
 R typeinfo name for CFlexCycler
 R typeinfo name for CFlexSceneFileManager
 R typeinfo name for CFlextalkActor
 R typeinfo name for CFmtStrN<1024, false>
 R typeinfo name for CFmtStrN<128, false>
 R typeinfo name for CFmtStrN<256, false>
 R typeinfo name for CFmtStrN<32, false>
 R typeinfo name for CFogController
 R typeinfo name for CFogController::NetworkVar_m_fog
 R typeinfo name for CFogSystem
 R typeinfo name for CFourWheelServerVehicle
 R typeinfo name for CFourWheelVehiclePhysics
 R typeinfo name for CFuncAreaPortalBase
 R typeinfo name for CFuncAreaPortalWindow
 R typeinfo name for CFuncBrush
 R typeinfo name for CFuncConveyor
 R typeinfo name for CFuncFlagAlertZone
 R typeinfo name for CFuncForceField
 R typeinfo name for CFuncIllusionary
 R typeinfo name for CFuncLadder
 R typeinfo name for CFuncLadderEndPoint
 R typeinfo name for CFuncMonitor
 R typeinfo name for CFuncMoveLinear
 R typeinfo name for CFuncNavAvoid
 R typeinfo name for CFuncNavBlocker
 R typeinfo name for CFuncNavCost
 R typeinfo name for CFuncNavObstruction
 R typeinfo name for CFuncNavPrefer
 R typeinfo name for CFuncNavPrerequisite
 R typeinfo name for CFuncNoBuild
 R typeinfo name for CFuncOccluder
 R typeinfo name for CFuncPasstimeGoal
 R typeinfo name for CFuncPasstimeGoalShim
 R typeinfo name for CFuncPasstimeGoalieZone
 R typeinfo name for CFuncPasstimeNoBallZone
 R typeinfo name for CFuncPlat
 R typeinfo name for CFuncPlatRot
 R typeinfo name for CFuncReflectiveGlass
 R typeinfo name for CFuncRespawnFlagZone
 R typeinfo name for CFuncRespawnRoom
 R typeinfo name for CFuncRespawnRoomShim
 R typeinfo name for CFuncRespawnRoomVisualizer
 R typeinfo name for CFuncRotating
 R typeinfo name for CFuncSmokeVolume
 R typeinfo name for CFuncSuggestedBuild
 R typeinfo name for CFuncTankTrain
 R typeinfo name for CFuncTrackAuto
 R typeinfo name for CFuncTrackChange
 R typeinfo name for CFuncTrackTrain
 R typeinfo name for CFuncTrain
 R typeinfo name for CFuncTrainControls
 R typeinfo name for CFuncVPhysicsClip
 R typeinfo name for CFuncVehicleClip
 R typeinfo name for CFuncWall
 R typeinfo name for CFuncWallToggle
 R typeinfo name for CFunc_Dust
 R typeinfo name for CFunc_DustCloud
 R typeinfo name for CFunc_DustMotes
 R typeinfo name for CFunc_LOD
 R typeinfo name for CFunctor
 R typeinfo name for CFunctor2<void (*)(CFunctor**, unsigned int), CFunctor**, int, CRefCounted1<CFunctor, CRefCountServiceBase<true, CRefMT> > >
 R typeinfo name for CFunctor3<void (*)(IPhysicsObject*, Vector const&, Vector const&), IPhysicsObject*, Vector, Vector, CRefCounted1<CFunctor, CRefCountServiceBase<true, CRefMT> > >
 R typeinfo name for CFunctor4<CBaseEntity* (*)(CBaseEntity*, CBaseEntity*, bool, float), CBaseEntity*, CBaseEntity*, bool, float, CRefCounted1<CFunctor, CRefCountServiceBase<true, CRefMT> > >
 R typeinfo name for CGCClientJobServerGoodbye
 R typeinfo name for CGCClientJobServerWelcome
 R typeinfo name for CGCClientSystem
 R typeinfo name for CGCCoaching_CoachJoining
 R typeinfo name for CGCCoaching_RemoveCurrentCoach
 R typeinfo name for CGCCompetitiveDailyStatsRollupJob
 R typeinfo name for CGCDev_NewItemRequestResponse
 R typeinfo name for CGCKickPlayerFromLobbyJob
 R typeinfo name for CGCMsgGC_PlayerDuckLeaderboard_IndividualUpdate
 R typeinfo name for CGCMsgGC_War_GlobalStatsResponse
 R typeinfo name for CGCMsgGC_War_GlobalStatsResponse_SideScore
 R typeinfo name for CGCMsgGC_War_IndividualUpdate
 R typeinfo name for CGCMsgGC_War_JoinWar
 R typeinfo name for CGCMsgGC_War_RequestGlobalStats
 R typeinfo name for CGCMsgGetIPLocation
 R typeinfo name for CGCMsgGetIPLocationResponse
 R typeinfo name for CGCMsgGetSystemStats
 R typeinfo name for CGCMsgGetSystemStatsResponse
 R typeinfo name for CGCMsgMemCachedDelete
 R typeinfo name for CGCMsgMemCachedGet
 R typeinfo name for CGCMsgMemCachedGetResponse
 R typeinfo name for CGCMsgMemCachedGetResponse_ValueTag
 R typeinfo name for CGCMsgMemCachedSet
 R typeinfo name for CGCMsgMemCachedSet_KeyPair
 R typeinfo name for CGCMsgMemCachedStats
 R typeinfo name for CGCMsgMemCachedStatsResponse
 R typeinfo name for CGCMsgSQLStats
 R typeinfo name for CGCMsgSQLStatsResponse
 R typeinfo name for CGCMsgSystemStatsSchema
 R typeinfo name for CGCMsgTFHelloResponse
 R typeinfo name for CGCMsgTFSync
 R typeinfo name for CGCMsgTFSyncEx
 R typeinfo name for CGCMsg_WorldItemPlacement_Update
 R typeinfo name for CGCQuestObjective_PointsChangeResponse
 R typeinfo name for CGCReplicateConVars
 R typeinfo name for CGCStorePurchaseInit_LineItem
 R typeinfo name for CGCSystemMsg_GetAccountDetails
 R typeinfo name for CGCSystemMsg_GetAccountDetails_Response
 R typeinfo name for CGCSystemMsg_GetPurchaseTrust_Request
 R typeinfo name for CGCSystemMsg_GetPurchaseTrust_Response
 R typeinfo name for CGCTFItemAcknowledged
 R typeinfo name for CGCTFQuickplay_PlayerJoining
 R typeinfo name for CGCToGCMsgMasterAck
 R typeinfo name for CGCToGCMsgMasterAck_Response
 R typeinfo name for CGCToGCMsgMasterStartupComplete
 R typeinfo name for CGCToGCMsgMasterStartupComplete_GCInfo
 R typeinfo name for CGCToGCMsgRouted
 R typeinfo name for CGCToGCMsgRoutedReply
 R typeinfo name for CGCUpdateConVar
 R typeinfo name for CGCUpdateItemSchema
 R typeinfo name for CGCUpdateServerModificationItemStateJob
 R typeinfo name for CGCUseServerModificationItemJob
 R typeinfo name for CGCVoteSystemVoteKickResponse
 R typeinfo name for CGC_GameServer_AuthChallenge
 R typeinfo name for CGC_GameServer_AuthResult
 R typeinfo name for CGC_GameServer_Duel_Request
 R typeinfo name for CGC_GameServer_Duel_Response
 R typeinfo name for CGC_RespawnPostLoadoutChange
 R typeinfo name for CGameDLL_ConVarAccessor
 R typeinfo name for CGameEnd
 R typeinfo name for CGameEventListener
 R typeinfo name for CGameGibManager
 R typeinfo name for CGameMovement
 R typeinfo name for CGamePlayerEquip
 R typeinfo name for CGamePlayerTeam
 R typeinfo name for CGamePlayerZone
 R typeinfo name for CGameRules
 R typeinfo name for CGameRulesProxy
 R typeinfo name for CGameScore
 R typeinfo name for CGameStringPool
 R typeinfo name for CGameText
 R typeinfo name for CGameUI
 R typeinfo name for CGameWeaponManager
 R typeinfo name for CGenericActor
 R typeinfo name for CGenericFlexCycler
 R typeinfo name for CGenericNPC
 R typeinfo name for CGhost
 R typeinfo name for CGhost::CGhostIntention
 R typeinfo name for CGhostBehavior
 R typeinfo name for CGhostLocomotion
 R typeinfo name for CGib
 R typeinfo name for CGibShooter
 R typeinfo name for CGlobalEntityList
 R typeinfo name for CGlobalState
 R typeinfo name for CGunTarget
 R typeinfo name for CHLTVDirector
 R typeinfo name for CHalloweenBaseBoss
 R typeinfo name for CHalloweenGiftPickup
 R typeinfo name for CHalloweenGiftSpawnLocation
 R typeinfo name for CHalloweenPickup
 R typeinfo name for CHalloweenSoulPack
 R typeinfo name for CHandleDummy
 R typeinfo name for CHandleTest
 R typeinfo name for CHeadlessHatman
 R typeinfo name for CHeadlessHatmanAttack
 R typeinfo name for CHeadlessHatmanBehavior
 R typeinfo name for CHeadlessHatmanBody
 R typeinfo name for CHeadlessHatmanDying
 R typeinfo name for CHeadlessHatmanEmerge
 R typeinfo name for CHeadlessHatmanIntention
 R typeinfo name for CHeadlessHatmanLocomotion
 R typeinfo name for CHeadlessHatmanPathCost
 R typeinfo name for CHeadlessHatmanTerrify
 R typeinfo name for CHealthAmmoKit
 R typeinfo name for CHealthFilter
 R typeinfo name for CHealthKit
 R typeinfo name for CHealthKitMedium
 R typeinfo name for CHealthKitSmall
 R typeinfo name for CHightower_TeleportVortex
 R typeinfo name for CHybridMap_CTF_CP
 R typeinfo name for CIKSaveRestoreOps
 R typeinfo name for CIPLocationInfo
 R typeinfo name for CInfoCameraLink
 R typeinfo name for CInfoIntermission
 R typeinfo name for CInfoLadderDismount
 R typeinfo name for CInfoLightingRelative
 R typeinfo name for CInfoMassCenter
 R typeinfo name for CInfoOverlayAccessor
 R typeinfo name for CInfoTarget
 R typeinfo name for CInstancedResponseSystem
 R typeinfo name for CInstancedSceneEntity
 R typeinfo name for CIntroViewpoint
 R typeinfo name for CInventoryManager
 R typeinfo name for CItem
 R typeinfo name for CItemGeneration
 R typeinfo name for CItemSelectionCriteria::CCondition
 R typeinfo name for CItemSelectionCriteria::CFloatCondition
 R typeinfo name for CItemSelectionCriteria::CSetCondition
 R typeinfo name for CItemSelectionCriteria::CStringCondition
 R typeinfo name for CItemSelectionCriteria::ICondition
 R typeinfo name for CItemSoda
 R typeinfo name for CJobSendMsgUntilConfirmed<CMsgGCRematchRequest, CMsgGCRematchRequestResponse, (ETFGCMsg)6533>
 R typeinfo name for CJobSendMsgUntilConfirmed<CMsgGC_Match_Result, CMsgGC_Match_ResultResponse, (ETFGCMsg)6520>
 R typeinfo name for CJobSendMsgUntilConfirmed<CMsgGameServerKickingLobby, CMsgGameServerKickingLobbyResponse, (ETFGCMsg)6521>
 R typeinfo name for CJobSendMsgUntilConfirmed<CMsgMvMVictory, CMsgMvMMannUpVictoryReply, (ETFGCMsg)6298>
 R typeinfo name for CJobSendMsgUntilConfirmed<CMsgPlayerLeftMatch, CMsgPlayerLeftMatchResponse, (ETFGCMsg)6523>
 R typeinfo name for CKeepUpright
 R typeinfo name for CKeyValuesDumpContextAsDevMsg
 R typeinfo name for CKickIssue
 R typeinfo name for CKnownCollector
 R typeinfo name for CKnownEntity
 R typeinfo name for CKothLogic
 R typeinfo name for CLadderMatchGroupDescription
 R typeinfo name for CLadderMatchGroupDescription::CLadderProgressionDesc
 R typeinfo name for CLagCompensationManager
 R typeinfo name for CLaserDot
 R typeinfo name for CLight
 R typeinfo name for CLightGlow
 R typeinfo name for CListMissions
 R typeinfo name for CLobbyPendingPlayerReport
 R typeinfo name for CLogicActiveAutosave
 R typeinfo name for CLogicAuto
 R typeinfo name for CLogicAutosave
 R typeinfo name for CLogicBranch
 R typeinfo name for CLogicBranchList
 R typeinfo name for CLogicCase
 R typeinfo name for CLogicCollisionPair
 R typeinfo name for CLogicCompare
 R typeinfo name for CLogicCompareInteger
 R typeinfo name for CLogicLineToEntity
 R typeinfo name for CLogicMannPower
 R typeinfo name for CLogicMeasureMovement
 R typeinfo name for CLogicNavigation
 R typeinfo name for CLogicOnHoliday
 R typeinfo name for CLogicRelay
 R typeinfo name for CLogicalEntity
 R typeinfo name for CMannVsMachineChangeChallengeIssue
 R typeinfo name for CMannVsMachineLogic
 R typeinfo name for CMannVsMachineStats
 R typeinfo name for CMannVsMachineUpgradeManager
 R typeinfo name for CMannVsMachineWaveStats
 R typeinfo name for CMapInfoContainer
 R typeinfo name for CMapLoadEntityFilter
 R typeinfo name for CMaterialModifyControl
 R typeinfo name for CMaterialOverrideContainer<IEconItemInterface>
 R typeinfo name for CMathColorBlend
 R typeinfo name for CMathCounter
 R typeinfo name for CMathRemap
 R typeinfo name for CMedievalLogic
 R typeinfo name for CMedigunFilter
 R typeinfo name for CMemberFunctor0<CParallelProcessor<CNavArea*, CFuncJobItemProcessor<CNavArea*> >*, void (CParallelProcessor<CNavArea*, CFuncJobItemProcessor<CNavArea*> >::*)(), CRefCounted1<CFunctor, CRefCountServiceBase<true, CRefMT> >, CFuncMemPolicyNone>
 R typeinfo name for CMemberFunctor0<CParallelProcessor<QueryCacheUpdateRecord_t, CFuncJobItemProcessor<QueryCacheUpdateRecord_t> >*, void (CParallelProcessor<QueryCacheUpdateRecord_t, CFuncJobItemProcessor<QueryCacheUpdateRecord_t> >::*)(), CRefCounted1<CFunctor, CRefCountServiceBase<true, CRefMT> >, CFuncMemPolicyNone>
 R typeinfo name for CMemberFunctor1<CAI_Navigator*, bool (CAI_Navigator::*)(Vector const&), Vector, CRefCounted1<CFunctor, CRefCountServiceBase<true, CRefMT> >, CFuncMemPolicyNone>
 R typeinfo name for CMemberFunctor1<IPhysicsObject*, void (IPhysicsObject::*)(bool), bool, CRefCounted1<CFunctor, CRefCountServiceBase<true, CRefMT> >, CFuncMemPolicyNone>
 R typeinfo name for CMemberFunctor2<CAI_Navigator*, bool (CAI_Navigator::*)(AI_NavGoal_t const&, unsigned int), AI_NavGoal_t, unsigned int, CRefCounted1<CFunctor, CRefCountServiceBase<true, CRefMT> >, CFuncMemPolicyNone>
 R typeinfo name for CMemberFunctor3<CBreakableProp*, void (CBreakableProp::*)(Vector const&, Vector const&, QAngle const&), Vector, Vector, QAngle, CRefCounted1<CFunctor, CRefCountServiceBase<true, CRefMT> >, CFuncMemPolicyNone>
 R typeinfo name for CMerasmus
 R typeinfo name for CMerasmusAOEAttack
 R typeinfo name for CMerasmusAttack
 R typeinfo name for CMerasmusBehavior
 R typeinfo name for CMerasmusBody
 R typeinfo name for CMerasmusDancer
 R typeinfo name for CMerasmusDisguise
 R typeinfo name for CMerasmusDying
 R typeinfo name for CMerasmusEscape
 R typeinfo name for CMerasmusFlyingLocomotion
 R typeinfo name for CMerasmusIntention
 R typeinfo name for CMerasmusLocomotion
 R typeinfo name for CMerasmusPathCost
 R typeinfo name for CMerasmusReveal
 R typeinfo name for CMerasmusStaffAttack
 R typeinfo name for CMerasmusStunned
 R typeinfo name for CMerasmusTeleport
 R typeinfo name for CMerasmusThrowingGrenade
 R typeinfo name for CMerasmusZap
 R typeinfo name for CMessage
 R typeinfo name for CMessageEntity
 R typeinfo name for CMissionPopulator
 R typeinfo name for CMobSpawner
 R typeinfo name for CModelSoundsCache
 R typeinfo name for CModelSoundsCacheSaver
 R typeinfo name for CMomentaryRotButton
 R typeinfo name for CMonsterResource
 R typeinfo name for CMotorController
 R typeinfo name for CMoveHelperServer
 R typeinfo name for CMovementSpeedMod
 R typeinfo name for CMsgAMAddFreeLicense
 R typeinfo name for CMsgAMAddFreeLicenseResponse
 R typeinfo name for CMsgAMFindAccounts
 R typeinfo name for CMsgAMFindAccountsResponse
 R typeinfo name for CMsgAMGetLicenses
 R typeinfo name for CMsgAMGetLicensesResponse
 R typeinfo name for CMsgAMGetUserGameStats
 R typeinfo name for CMsgAMGetUserGameStatsResponse
 R typeinfo name for CMsgAMGetUserGameStatsResponse_Achievement_Blocks
 R typeinfo name for CMsgAMGetUserGameStatsResponse_Stats
 R typeinfo name for CMsgAMGrantGuestPasses2
 R typeinfo name for CMsgAMGrantGuestPasses2Response
 R typeinfo name for CMsgAMSendEmail
 R typeinfo name for CMsgAMSendEmailResponse
 R typeinfo name for CMsgAMSendEmail_PersonaNameReplacementToken
 R typeinfo name for CMsgAMSendEmail_ReplacementToken
 R typeinfo name for CMsgAcceptInvite
 R typeinfo name for CMsgAcceptInviteResponse
 R typeinfo name for CMsgAcknowledgeXP
 R typeinfo name for CMsgAdjustItemEquippedState
 R typeinfo name for CMsgApplyAutograph
 R typeinfo name for CMsgApplyStrangeCountTransfer
 R typeinfo name for CMsgApplyStrangePart
 R typeinfo name for CMsgApplyStrangeRestriction
 R typeinfo name for CMsgApplyToolToBaseItem
 R typeinfo name for CMsgApplyToolToItem
 R typeinfo name for CMsgApplyUpgradeCard
 R typeinfo name for CMsgCasualMatchmakingSearchCriteria
 R typeinfo name for CMsgClientGoodbye
 R typeinfo name for CMsgClientHello
 R typeinfo name for CMsgClientWelcome
 R typeinfo name for CMsgConVarValue
 R typeinfo name for CMsgConnectionStatus
 R typeinfo name for CMsgConsumableExhausted
 R typeinfo name for CMsgCraftCollectionUpgrade
 R typeinfo name for CMsgCraftCommonStatClock
 R typeinfo name for CMsgCraftHalloweenOffering
 R typeinfo name for CMsgCraftingResponse
 R typeinfo name for CMsgCreateOrUpdateParty
 R typeinfo name for CMsgCreateOrUpdatePartyReply
 R typeinfo name for CMsgDeliverGiftResponseGiver
 R typeinfo name for CMsgDevDebugRollLootRequest
 R typeinfo name for CMsgDevNewItemRequest
 R typeinfo name for CMsgEconPlayerStrangeCountAdjustment
 R typeinfo name for CMsgEconPlayerStrangeCountAdjustment_CStrangeCountAdjustment
 R typeinfo name for CMsgExitMatchmaking
 R typeinfo name for CMsgFulfillDynamicRecipeComponent
 R typeinfo name for CMsgGCBannedWordListRequest
 R typeinfo name for CMsgGCCasualCriteriaStatsResponse
 R typeinfo name for CMsgGCCasualCriteriaStatsResponse_DataCenterPopulation
 R typeinfo name for CMsgGCCheckClanMembership
 R typeinfo name for CMsgGCCheckClanMembership_Response
 R typeinfo name for CMsgGCCheckFriendship
 R typeinfo name for CMsgGCCheckFriendship_Response
 R typeinfo name for CMsgGCClientDisplayNotification
 R typeinfo name for CMsgGCClientMarketData
 R typeinfo name for CMsgGCClientMarketDataEntry
 R typeinfo name for CMsgGCClientMarketDataRequest
 R typeinfo name for CMsgGCClientPing
 R typeinfo name for CMsgGCCollectItem
 R typeinfo name for CMsgGCDataCenterPing_Update
 R typeinfo name for CMsgGCDataCenterPing_Update_PingEntry
 R typeinfo name for CMsgGCError
 R typeinfo name for CMsgGCGetCommandList
 R typeinfo name for CMsgGCGetCommandListResponse
 R typeinfo name for CMsgGCGetEmailTemplate
 R typeinfo name for CMsgGCGetEmailTemplateResponse
 R typeinfo name for CMsgGCGetPartnerAccountLink
 R typeinfo name for CMsgGCGetPartnerAccountLink_Response
 R typeinfo name for CMsgGCGetPersonaNames
 R typeinfo name for CMsgGCGetPersonaNames_Response
 R typeinfo name for CMsgGCGetPersonaNames_Response_PersonaName
 R typeinfo name for CMsgGCGiftedItems
 R typeinfo name for CMsgGCHAccountLockStatusChange
 R typeinfo name for CMsgGCHAccountPhoneNumberChange
 R typeinfo name for CMsgGCHAccountTradeBanStatusChange
 R typeinfo name for CMsgGCHAccountTwoFactorChange
 R typeinfo name for CMsgGCHAccountVacStatusChange
 R typeinfo name for CMsgGCHUpdateSession
 R typeinfo name for CMsgGCHUpdateSession_ExtraField
 R typeinfo name for CMsgGCHVacVerificationChange
 R typeinfo name for CMsgGCIncrementKillCountResponse
 R typeinfo name for CMsgGCItemPreviewItemBoughtNotification
 R typeinfo name for CMsgGCMatchHistoryLoad
 R typeinfo name for CMsgGCMsgMasterSetClientMsgRouting
 R typeinfo name for CMsgGCMsgMasterSetClientMsgRouting_Entry
 R typeinfo name for CMsgGCMsgMasterSetClientMsgRouting_Response
 R typeinfo name for CMsgGCMsgMasterSetDirectory
 R typeinfo name for CMsgGCMsgMasterSetDirectory_Response
 R typeinfo name for CMsgGCMsgMasterSetDirectory_SubGC
 R typeinfo name for CMsgGCMsgMasterSetWebAPIRouting
 R typeinfo name for CMsgGCMsgMasterSetWebAPIRouting_Entry
 R typeinfo name for CMsgGCMsgMasterSetWebAPIRouting_Response
 R typeinfo name for CMsgGCMsgSetOptions
 R typeinfo name for CMsgGCMsgSetOptions_MessageRange
 R typeinfo name for CMsgGCMsgWebAPIJobRequestForwardResponse
 R typeinfo name for CMsgGCMultiplexMessage
 R typeinfo name for CMsgGCNameItemNotification
 R typeinfo name for CMsgGCNotification
 R typeinfo name for CMsgGCNotificationQueue
 R typeinfo name for CMsgGCQuestComplete_Request
 R typeinfo name for CMsgGCQuestCompleted
 R typeinfo name for CMsgGCQuestDiscard_Request
 R typeinfo name for CMsgGCQuestObjective_PointsChange
 R typeinfo name for CMsgGCQuestObjective_Progress
 R typeinfo name for CMsgGCQuestObjective_RequestLoanerItems
 R typeinfo name for CMsgGCQuestObjective_RequestLoanerResponse
 R typeinfo name for CMsgGCRematchRequest
 R typeinfo name for CMsgGCRematchRequestResponse
 R typeinfo name for CMsgGCRematchRequest_PartyEntry
 R typeinfo name for CMsgGCRemoveCustomizationAttributeSimple
 R typeinfo name for CMsgGCRemoveStrangePart
 R typeinfo name for CMsgGCRemoveUpgradeCard
 R typeinfo name for CMsgGCReportAbuse
 R typeinfo name for CMsgGCReportAbuseResponse
 R typeinfo name for CMsgGCRequestCasualCriteriaStats
 R typeinfo name for CMsgGCRequestStoreSalesData
 R typeinfo name for CMsgGCRequestStoreSalesDataResponse
 R typeinfo name for CMsgGCRequestStoreSalesDataResponse_Price
 R typeinfo name for CMsgGCRequestStoreSalesDataUpToDateResponse
 R typeinfo name for CMsgGCRequestSubGCSessionInfo
 R typeinfo name for CMsgGCRequestSubGCSessionInfoResponse
 R typeinfo name for CMsgGCResetStrangeScores
 R typeinfo name for CMsgGCRoutingInfo
 R typeinfo name for CMsgGCShowItemsPickedUp
 R typeinfo name for CMsgGCShuffleCrateContents
 R typeinfo name for CMsgGCStorePurchaseCancel
 R typeinfo name for CMsgGCStorePurchaseCancelResponse
 R typeinfo name for CMsgGCStorePurchaseFinalize
 R typeinfo name for CMsgGCStorePurchaseFinalizeResponse
 R typeinfo name for CMsgGCStorePurchaseInit
 R typeinfo name for CMsgGCStorePurchaseInitResponse
 R typeinfo name for CMsgGCSurveyRequest
 R typeinfo name for CMsgGCSurveyResponse
 R typeinfo name for CMsgGCTFSpecificItemBroadcast
 R typeinfo name for CMsgGCToGCGetUserServerMembers
 R typeinfo name for CMsgGCToGCGetUserServerMembersResponse
 R typeinfo name for CMsgGCToGCGetUserSessionServer
 R typeinfo name for CMsgGCToGCGetUserSessionServerResponse
 R typeinfo name for CMsgGCToGCGrantSelfMadeItemToAccount
 R typeinfo name for CMsgGCToGCIncrementRecruitmentLevel
 R typeinfo name for CMsgGCToGCPingRequest
 R typeinfo name for CMsgGCToGCPingResponse
 R typeinfo name for CMsgGCToGCSOCacheSubscribe
 R typeinfo name for CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions
 R typeinfo name for CMsgGCToGCSOCacheUnsubscribe
 R typeinfo name for CMsgGCToGCThankedByNewUser
 R typeinfo name for CMsgGCUpdateSubGCSessionInfo
 R typeinfo name for CMsgGCUpdateSubGCSessionInfo_CMsgUpdate
 R typeinfo name for CMsgGC_Client2GCEconPreviewDataBlockRequest
 R typeinfo name for CMsgGC_Client2GCEconPreviewDataBlockResponse
 R typeinfo name for CMsgGC_Client_UseServerModificationItem
 R typeinfo name for CMsgGC_Client_UseServerModificationItem_Response
 R typeinfo name for CMsgGC_DailyCompetitiveStatsRollup
 R typeinfo name for CMsgGC_DailyCompetitiveStatsRollup_Response
 R typeinfo name for CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry
 R typeinfo name for CMsgGC_GameServer_AckPolicy
 R typeinfo name for CMsgGC_GameServer_AckPolicyResponse
 R typeinfo name for CMsgGC_GameServer_AuthChallenge
 R typeinfo name for CMsgGC_GameServer_AuthChallengeResponse
 R typeinfo name for CMsgGC_GameServer_AuthResult
 R typeinfo name for CMsgGC_GameServer_CreateIdentity
 R typeinfo name for CMsgGC_GameServer_CreateIdentityResponse
 R typeinfo name for CMsgGC_GameServer_LevelInfo
 R typeinfo name for CMsgGC_GameServer_List
 R typeinfo name for CMsgGC_GameServer_ListResponse
 R typeinfo name for CMsgGC_GameServer_ListResponse_GameServerIdentity
 R typeinfo name for CMsgGC_GameServer_ResetIdentity
 R typeinfo name for CMsgGC_GameServer_ResetIdentityResponse
 R typeinfo name for CMsgGC_GameServer_ServerModificationItem
 R typeinfo name for CMsgGC_GameServer_ServerModificationItemExpired
 R typeinfo name for CMsgGC_GameServer_UseServerModificationItem
 R typeinfo name for CMsgGC_GameServer_UseServerModificationItem_Response
 R typeinfo name for CMsgGC_Halloween_GrantItem
 R typeinfo name for CMsgGC_Halloween_GrantItemResponse
 R typeinfo name for CMsgGC_Halloween_ItemClaimed
 R typeinfo name for CMsgGC_Halloween_ReservedItem
 R typeinfo name for CMsgGC_KickPlayerFromLobby
 R typeinfo name for CMsgGC_Match_Result
 R typeinfo name for CMsgGC_Match_ResultResponse
 R typeinfo name for CMsgGC_Match_Result_Player
 R typeinfo name for CMsgGC_PickupItemEligibility_Query
 R typeinfo name for CMsgGC_PickupItemEligibility_QueryResponse
 R typeinfo name for CMsgGC_ReportPlayer
 R typeinfo name for CMsgGC_TFVoteKickPlayerRequest
 R typeinfo name for CMsgGC_VoteKickPlayerRequestResponse
 R typeinfo name for CMsgGameServerKickingLobby
 R typeinfo name for CMsgGameServerKickingLobbyResponse
 R typeinfo name for CMsgGameServerMatchmakingStatus
 R typeinfo name for CMsgGameServerMatchmakingStatus_Player
 R typeinfo name for CMsgHalloween_Merasmus2012
 R typeinfo name for CMsgHalloween_ServerBossEvent
 R typeinfo name for CMsgHttpRequest
 R typeinfo name for CMsgHttpRequest_QueryParam
 R typeinfo name for CMsgHttpRequest_RequestHeader
 R typeinfo name for CMsgHttpResponse
 R typeinfo name for CMsgHttpResponse_ResponseHeader
 R typeinfo name for CMsgIncrementKillCountAttribute
 R typeinfo name for CMsgIncrementKillCountAttribute_Multiple
 R typeinfo name for CMsgInvitationCreated
 R typeinfo name for CMsgInviteToParty
 R typeinfo name for CMsgItemAcknowledged
 R typeinfo name for CMsgKickFromParty
 R typeinfo name for CMsgKickedFromMatchmakingQueue
 R typeinfo name for CMsgLANServerAvailable
 R typeinfo name for CMsgLeaveGameAndPrepareToJoinParty
 R typeinfo name for CMsgLeaveParty
 R typeinfo name for CMsgLookupMultipleAccountNames
 R typeinfo name for CMsgLookupMultipleAccountNamesResponse
 R typeinfo name for CMsgLookupMultipleAccountNamesResponse_Account
 R typeinfo name for CMsgMatchSearchCriteria
 R typeinfo name for CMsgMatchmakingProgress
 R typeinfo name for CMsgMatchmakingSearchCountRequest
 R typeinfo name for CMsgMatchmakingSearchCountResponse
 R typeinfo name for CMsgMvMMannUpVictoryReply
 R typeinfo name for CMsgMvMVictory
 R typeinfo name for CMsgMvMVictoryInfo
 R typeinfo name for CMsgMvMVictoryInfo_Item
 R typeinfo name for CMsgMvMVictoryInfo_Player
 R typeinfo name for CMsgMvMVictory_Player
 R typeinfo name for CMsgNotificationAcknowledge
 R typeinfo name for CMsgNotificationAcknowledgeReply
 R typeinfo name for CMsgNotificationOfSuspiciousActivity
 R typeinfo name for CMsgNotificationOfSuspiciousActivity_MultipleGameInstances
 R typeinfo name for CMsgNotifyWatchdog
 R typeinfo name for CMsgPackageLicense
 R typeinfo name for CMsgPartyInviteResponse
 R typeinfo name for CMsgPlayerLeftMatch
 R typeinfo name for CMsgPlayerLeftMatchResponse
 R typeinfo name for CMsgProtoBufHeader
 R typeinfo name for CMsgReadyUp
 R typeinfo name for CMsgRecipeComponent
 R typeinfo name for CMsgReplaySubmitContestEntry
 R typeinfo name for CMsgReplaySubmitContestEntryResponse
 R typeinfo name for CMsgReplayUploadedToYouTube
 R typeinfo name for CMsgReplicateConVars
 R typeinfo name for CMsgRequestInventoryRefresh
 R typeinfo name for CMsgRequestItemPurgatory_FinalizePurchase
 R typeinfo name for CMsgRequestItemPurgatory_FinalizePurchaseResponse
 R typeinfo name for CMsgRequestItemPurgatory_RefundPurchase
 R typeinfo name for CMsgRequestItemPurgatory_RefundPurchaseResponse
 R typeinfo name for CMsgSOCacheHaveVersion
 R typeinfo name for CMsgSOCacheSubscribed
 R typeinfo name for CMsgSOCacheSubscribedUpToDate
 R typeinfo name for CMsgSOCacheSubscribed_SubscribedType
 R typeinfo name for CMsgSOCacheSubscriptionCheck
 R typeinfo name for CMsgSOCacheSubscriptionRefresh
 R typeinfo name for CMsgSOCacheUnsubscribed
 R typeinfo name for CMsgSOCacheVersion
 R typeinfo name for CMsgSOIDOwner
 R typeinfo name for CMsgSOMultipleObjects
 R typeinfo name for CMsgSOMultipleObjects_SingleObject
 R typeinfo name for CMsgSOSingleObject
 R typeinfo name for CMsgSaxxyAwarded
 R typeinfo name for CMsgSelectPresetForClass
 R typeinfo name for CMsgServerAvailable
 R typeinfo name for CMsgServerGoodbye
 R typeinfo name for CMsgServerHello
 R typeinfo name for CMsgServerWelcome
 R typeinfo name for CMsgSetHatEffectUseHeadOrigin
 R typeinfo name for CMsgSetItemEffectVerticalOffset
 R typeinfo name for CMsgSetItemPositions
 R typeinfo name for CMsgSetItemPositions_ItemPosition
 R typeinfo name for CMsgSetItemSlotAttribute
 R typeinfo name for CMsgSetPresetItemPosition
 R typeinfo name for CMsgSortItems
 R typeinfo name for CMsgStoreGetUserData
 R typeinfo name for CMsgStoreGetUserDataResponse
 R typeinfo name for CMsgSystemBroadcast
 R typeinfo name for CMsgTFClientInit
 R typeinfo name for CMsgTFCoaching_AddToCoaches
 R typeinfo name for CMsgTFCoaching_AskCoach
 R typeinfo name for CMsgTFCoaching_AskCoachResponse
 R typeinfo name for CMsgTFCoaching_CoachJoinGame
 R typeinfo name for CMsgTFCoaching_CoachJoined
 R typeinfo name for CMsgTFCoaching_CoachJoining
 R typeinfo name for CMsgTFCoaching_FindCoach
 R typeinfo name for CMsgTFCoaching_FindCoachResponse
 R typeinfo name for CMsgTFCoaching_LikeCurrentCoach
 R typeinfo name for CMsgTFCoaching_RemoveCurrentCoach
 R typeinfo name for CMsgTFCoaching_RemoveFromCoaches
 R typeinfo name for CMsgTFFreeTrialChooseMostHelpfulFriend
 R typeinfo name for CMsgTFFreeTrialConvertedToPremium
 R typeinfo name for CMsgTFGoldenWrenchBroadcast
 R typeinfo name for CMsgTFJoinChatChannel
 R typeinfo name for CMsgTFJoinChatChannelResponse
 R typeinfo name for CMsgTFJoinChatChannelResponse_ChatMember
 R typeinfo name for CMsgTFLeaveChatChannel
 R typeinfo name for CMsgTFOtherJoinedChatChannel
 R typeinfo name for CMsgTFOtherLeftChatChannel
 R typeinfo name for CMsgTFQuickplay_PlayerJoining
 R typeinfo name for CMsgTFQuickplay_ScoreServers
 R typeinfo name for CMsgTFQuickplay_ScoreServersResponse
 R typeinfo name for CMsgTFQuickplay_ScoreServersResponse_ServerInfo
 R typeinfo name for CMsgTFQuickplay_ScoreServers_ServerInfo
 R typeinfo name for CMsgTFRequestChatChannelList
 R typeinfo name for CMsgTFRequestChatChannelListResponse
 R typeinfo name for CMsgTFRequestChatChannelListResponse_ChatChannel
 R typeinfo name for CMsgTFRequestDefaultChatChannel
 R typeinfo name for CMsgTFRequestDefaultChatChannelResponse
 R typeinfo name for CMsgTFRequestTF2Friends
 R typeinfo name for CMsgTFRequestTF2FriendsResponse
 R typeinfo name for CMsgTFSaxxyBroadcast
 R typeinfo name for CMsgTFThankedBySomeone
 R typeinfo name for CMsgTFThankedSomeone
 R typeinfo name for CMsgTFVoteKickBanPlayer
 R typeinfo name for CMsgTFVoteKickBanPlayerResult
 R typeinfo name for CMsgTFWorldStatus
 R typeinfo name for CMsgTFXPSource
 R typeinfo name for CMsgTFXPSourceBreakdown
 R typeinfo name for CMsgTrackUniquePlayerPairEvent
 R typeinfo name for CMsgUpdateHalloweenMerasmusLootLevel
 R typeinfo name for CMsgUpdateHalloweenMerasmusLootLevel_Player
 R typeinfo name for CMsgUpdateItemSchema
 R typeinfo name for CMsgUpdatePeriodicEvent
 R typeinfo name for CMsgUseItem
 R typeinfo name for CMsgWebAPIKey
 R typeinfo name for CMsgWebAPIRequest
 R typeinfo name for CMultiPlayerAnimState
 R typeinfo name for CMultiSource
 R typeinfo name for CMultiplayRules
 R typeinfo name for CMultiplayer_Expresser
 R typeinfo name for CMultipleEscort
 R typeinfo name for CMvMMatchGroupDescription
 R typeinfo name for CNPCMaker
 R typeinfo name for CNPCSpawnDestination
 R typeinfo name for CNPC_Furniture
 R typeinfo name for CNPC_VehicleDriver
 R typeinfo name for CNavArea
 R typeinfo name for CNavAreaCriticalData
 R typeinfo name for CNavMesh
 R typeinfo name for CNextLevelIssue
 R typeinfo name for CNoGrenadesZone
 R typeinfo name for CNoHoliday
 R typeinfo name for CNodeEnt
 R typeinfo name for CNodeFilter
 R typeinfo name for CNotifyList
 R typeinfo name for CNullEntity
 R typeinfo name for CObjectCartDispenser
 R typeinfo name for CObjectDispenser
 R typeinfo name for CObjectSapper
 R typeinfo name for CObjectSentrygun
 R typeinfo name for CObjectTeleporter
 R typeinfo name for CObjectsFileLoad
 R typeinfo name for CObserverPoint
 R typeinfo name for COrHoliday
 R typeinfo name for COrnamentProp
 R typeinfo name for CP4File
 R typeinfo name for CP4File_Dummy
 R typeinfo name for CPASAttenuationFilter
 R typeinfo name for CPASFilter
 R typeinfo name for CPVSFilter
 R typeinfo name for CParticleFire
 R typeinfo name for CParticleLight
 R typeinfo name for CParticlePerformanceMonitor
 R typeinfo name for CParticleSystem
 R typeinfo name for CParticleSystemQuery
 R typeinfo name for CPasstimeBall
 R typeinfo name for CPasstimeBallController
 R typeinfo name for CPasstimeBallControllerHoming
 R typeinfo name for CPasstimeBallControllerPlayerSeek
 R typeinfo name for CPasstimeBallSpawn
 R typeinfo name for CPasstimeGun
 R typeinfo name for CPathCorner
 R typeinfo name for CPathCornerCrash
 R typeinfo name for CPathKeyFrame
 R typeinfo name for CPathTrack
 R typeinfo name for CPathfindNearestNodeFilter
 R typeinfo name for CPauseGameIssue
 R typeinfo name for CPeriodicSpawnPopulator
 R typeinfo name for CPhysBallSocket
 R typeinfo name for CPhysBox
 R typeinfo name for CPhysBoxMultiplayer
 R typeinfo name for CPhysConstraint
 R typeinfo name for CPhysConstraintEvents
 R typeinfo name for CPhysConstraintSystem
 R typeinfo name for CPhysConvert
 R typeinfo name for CPhysExplosion
 R typeinfo name for CPhysFixed
 R typeinfo name for CPhysForce
 R typeinfo name for CPhysHinge
 R typeinfo name for CPhysImpact
 R typeinfo name for CPhysLength
 R typeinfo name for CPhysMagnet
 R typeinfo name for CPhysMotor
 R typeinfo name for CPhysObjSaveRestoreOps
 R typeinfo name for CPhysPulley
 R typeinfo name for CPhysSaveRestoreBlockHandler
 R typeinfo name for CPhysSlideConstraint
 R typeinfo name for CPhysSphere
 R typeinfo name for CPhysThruster
 R typeinfo name for CPhysTorque
 R typeinfo name for CPhysicsCannister
 R typeinfo name for CPhysicsEntitySolver
 R typeinfo name for CPhysicsGameTrace
 R typeinfo name for CPhysicsHook
 R typeinfo name for CPhysicsNPCSolver
 R typeinfo name for CPhysicsProp
 R typeinfo name for CPhysicsPropMultiplayer
 R typeinfo name for CPhysicsPropRespawnable
 R typeinfo name for CPhysicsPushedEntities
 R typeinfo name for CPhysicsShake
 R typeinfo name for CPhysicsSpring
 R typeinfo name for CPhysicsWind
 R typeinfo name for CPhysicsWire
 R typeinfo name for CPlasma
 R typeinfo name for CPlatTrigger
 R typeinfo name for CPlayerDestructionDispenser
 R typeinfo name for CPlayerInfo
 R typeinfo name for CPlayerInfoManager
 R typeinfo name for CPlayerInventory
 R typeinfo name for CPlayerLocalData
 R typeinfo name for CPlayerLocalData::NetworkVar_m_PlayerFog
 R typeinfo name for CPlayerLocalData::NetworkVar_m_audio
 R typeinfo name for CPlayerLocalData::NetworkVar_m_skybox3d
 R typeinfo name for CPlayerMove
 R typeinfo name for CPlayerResource
 R typeinfo name for CPlayerState
 R typeinfo name for CPluginBotManager
 R typeinfo name for CPluginHelpersCheck
 R typeinfo name for CPointAngleSensor
 R typeinfo name for CPointAngularVelocitySensor
 R typeinfo name for CPointBonusMapsAccessor
 R typeinfo name for CPointCamera
 R typeinfo name for CPointClientCommand
 R typeinfo name for CPointCommentaryNode
 R typeinfo name for CPointDevShotCamera
 R typeinfo name for CPointEntity
 R typeinfo name for CPointGamestatsCounter
 R typeinfo name for CPointHurt
 R typeinfo name for CPointNavInterface
 R typeinfo name for CPointPlayerMoveConstraint
 R typeinfo name for CPointPopulatorInterface
 R typeinfo name for CPointProximitySensor
 R typeinfo name for CPointPush
 R typeinfo name for CPointServerCommand
 R typeinfo name for CPointSpotlight
 R typeinfo name for CPointTeleport
 R typeinfo name for CPointTemplate
 R typeinfo name for CPointTemplatePrecacher
 R typeinfo name for CPointVelocitySensor
 R typeinfo name for CPopulationManager
 R typeinfo name for CPopulatorInternalSpawnPoint
 R typeinfo name for CPoseController
 R typeinfo name for CPostFrameNavigationHook
 R typeinfo name for CPowerupVolume
 R typeinfo name for CPrecacheOtherList
 R typeinfo name for CPrecipitation
 R typeinfo name for CProjectedDecal
 R typeinfo name for CPropData
 R typeinfo name for CPropDoorRotating
 R typeinfo name for CPropSoccerBall
 R typeinfo name for CPropVehicle
 R typeinfo name for CPropVehicleDriveable
 R typeinfo name for CPushBlockerEnum
 R typeinfo name for CPushable
 R typeinfo name for CQuestItemTracker
 R typeinfo name for CQuestObjectiveDefinition
 R typeinfo name for CQuestObjectiveManager
 R typeinfo name for CQuestThemeDefinition
 R typeinfo name for CRagGib
 R typeinfo name for CRagdollAnimatedFriction
 R typeinfo name for CRagdollBoogie
 R typeinfo name for CRagdollCollisionRules
 R typeinfo name for CRagdollConstraint
 R typeinfo name for CRagdollLRURetirement
 R typeinfo name for CRagdollMagnet
 R typeinfo name for CRagdollManager
 R typeinfo name for CRagdollProp
 R typeinfo name for CRagdollPropAttached
 R typeinfo name for CRallyPoint
 R typeinfo name for CRandomChoiceSpawner
 R typeinfo name for CRandomPlacementPopulator
 R typeinfo name for CRecipeComponentMatchingIterator
 R typeinfo name for CRecipientFilter
 R typeinfo name for CRefCountServiceBase<true, CRefMT>
 R typeinfo name for CRefCounted1<CFunctor, CRefCountServiceBase<true, CRefMT> >
 R typeinfo name for CRegenerateZone
 R typeinfo name for CReliableBroadcastRecipientFilter
 R typeinfo name for CReplayCachedContestData
 R typeinfo name for CRespawnEntitiesFilter
 R typeinfo name for CResponseSystem
 R typeinfo name for CRestartGameIssue
 R typeinfo name for CRestore
 R typeinfo name for CRevertSaved
 R typeinfo name for CRobotBehavior
 R typeinfo name for CRobotDestructionVaultTrigger
 R typeinfo name for CRobotDispenser
 R typeinfo name for CRobotEnterPanic
 R typeinfo name for CRobotIntention
 R typeinfo name for CRobotLeavePanic
 R typeinfo name for CRobotLocomotion
 R typeinfo name for CRobotMaterialize
 R typeinfo name for CRobotPanic
 R typeinfo name for CRobotPathCost
 R typeinfo name for CRobotPatrol
 R typeinfo name for CRobotSpawn
 R typeinfo name for CRopeAnchor
 R typeinfo name for CRopeKeyframe
 R typeinfo name for CRotButton
 R typeinfo name for CRotDoor
 R typeinfo name for CRotorWashShooter
 R typeinfo name for CRuleBrushEntity
 R typeinfo name for CRuleEntity
 R typeinfo name for CRulePointEntity
 R typeinfo name for CSHA1
 R typeinfo name for CSOClassPresetClientData
 R typeinfo name for CSOEconClaimCode
 R typeinfo name for CSOEconGameAccountClient
 R typeinfo name for CSOEconGameAccountForGameServers
 R typeinfo name for CSOEconItem
 R typeinfo name for CSOEconItemAttribute
 R typeinfo name for CSOEconItemEquipped
 R typeinfo name for CSOEconItemPresetInstance
 R typeinfo name for CSOItemCriteria
 R typeinfo name for CSOItemCriteriaCondition
 R typeinfo name for CSOItemRecipe
 R typeinfo name for CSOLobbyInvite
 R typeinfo name for CSOPartyInvite
 R typeinfo name for CSOTFDuelSummary
 R typeinfo name for CSOTFGameServerLobby
 R typeinfo name for CSOTFLadderData
 R typeinfo name for CSOTFLadderPlayerStats
 R typeinfo name for CSOTFMapContribution
 R typeinfo name for CSOTFMatchResultPlayerStats
 R typeinfo name for CSOTFParty
 R typeinfo name for CSOTFPartyInvite
 R typeinfo name for CSOTFPartyInvite_PartyMember
 R typeinfo name for CSOTFPartyMember
 R typeinfo name for CSOTFPlayerInfo
 R typeinfo name for CSOTrackerManager
 R typeinfo name for CSOWarData
 R typeinfo name for CSave
 R typeinfo name for CSaveRestoreBlockSet
 R typeinfo name for CSceneEntity
 R typeinfo name for CSceneFindMarkFilter
 R typeinfo name for CSceneFindNearestMarkFilter
 R typeinfo name for CSceneListManager
 R typeinfo name for CSceneManager
 R typeinfo name for CSceneTokenProcessor
 R typeinfo name for CSchemaAttributeTypeBase<CAttribute_DynamicRecipeComponent>
 R typeinfo name for CSchemaAttributeTypeBase<CAttribute_ItemSlotCriteria>
 R typeinfo name for CSchemaAttributeTypeBase<CAttribute_String>
 R typeinfo name for CSchemaAttributeTypeBase<CAttribute_WorldItemPlacement>
 R typeinfo name for CSchemaAttributeTypeBase<float>
 R typeinfo name for CSchemaAttributeTypeBase<unsigned int>
 R typeinfo name for CSchemaAttributeTypeBase<unsigned long long>
 R typeinfo name for CSchemaAttributeTypeProtobufBase<CAttribute_DynamicRecipeComponent>
 R typeinfo name for CSchemaAttributeTypeProtobufBase<CAttribute_ItemSlotCriteria>
 R typeinfo name for CSchemaAttributeTypeProtobufBase<CAttribute_String>
 R typeinfo name for CSchemaAttributeTypeProtobufBase<CAttribute_WorldItemPlacement>
 R typeinfo name for CSchemaAttributeType_Default
 R typeinfo name for CSchemaAttributeType_DynamicRecipeComponentDefinedItem
 R typeinfo name for CSchemaAttributeType_Float
 R typeinfo name for CSchemaAttributeType_ItemSlotCriteria
 R typeinfo name for CSchemaAttributeType_String
 R typeinfo name for CSchemaAttributeType_UInt64
 R typeinfo name for CSchemaAttributeType_WorldItemPlacement
 R typeinfo name for CScrambleTeams
 R typeinfo name for CScriptedTarget
 R typeinfo name for CSearchForCover
 R typeinfo name for CSelectDefenseAreaForPoint
 R typeinfo name for CSelectPrimaryPatient
 R typeinfo name for CSentryGunSpawner
 R typeinfo name for CServerBenchmark
 R typeinfo name for CServerBenchmarkHook
 R typeinfo name for CServerChoreoTools
 R typeinfo name for CServerDLLSharedAppSystems
 R typeinfo name for CServerGameClients
 R typeinfo name for CServerGameDLL
 R typeinfo name for CServerGameEnts
 R typeinfo name for CServerGameTags
 R typeinfo name for CServerNetworkProperty
 R typeinfo name for CServerOnlyEntity
 R typeinfo name for CServerOnlyPointEntity
 R typeinfo name for CServerRagdollTrigger
 R typeinfo name for CServerReplayImp
 R typeinfo name for CServerTools
 R typeinfo name for CShadowControl
 R typeinfo name for CShowZone
 R typeinfo name for CShower
 R typeinfo name for CSimThinkManager
 R typeinfo name for CSimpleBot
 R typeinfo name for CSimpleBot::CSimpleBotIntention
 R typeinfo name for CSimpleBotPathCost
 R typeinfo name for CSimpleBotRoam
 R typeinfo name for CSimplePhysicsBrush
 R typeinfo name for CSimplePhysicsProp
 R typeinfo name for CSingleUserRecipientFilter
 R typeinfo name for CSingleUserReliableRecipientFilter
 R typeinfo name for CSkipKeys
 R typeinfo name for CSkyCamera
 R typeinfo name for CSlideshowDisplay
 R typeinfo name for CSmokeStack
 R typeinfo name for CSniperDot
 R typeinfo name for CSolidSetDefaults
 R typeinfo name for CSoundControllerImp
 R typeinfo name for CSoundEmitterSystem
 R typeinfo name for CSoundEnt
 R typeinfo name for CSoundEnvelopeController
 R typeinfo name for CSoundPatchSaveRestoreOps
 R typeinfo name for CSoundscapeSystem
 R typeinfo name for CSpellPickup
 R typeinfo name for CSpotlightEnd
 R typeinfo name for CSprayCan
 R typeinfo name for CSprite
 R typeinfo name for CSpriteOriented
 R typeinfo name for CSpriteTrail
 R typeinfo name for CSquadSpawner
 R typeinfo name for CStdStringSaveRestoreOps
 R typeinfo name for CSteamJet
 R typeinfo name for CSteamWorksGameStatsUploader
 R typeinfo name for CStringTableSaveRestoreOps
 R typeinfo name for CStripWeapons
 R typeinfo name for CSun
 R typeinfo name for CTEArmorRicochet
 R typeinfo name for CTEBSPDecal
 R typeinfo name for CTEBaseBeam
 R typeinfo name for CTEBeamEntPoint
 R typeinfo name for CTEBeamEnts
 R typeinfo name for CTEBeamFollow
 R typeinfo name for CTEBeamLaser
 R typeinfo name for CTEBeamPoints
 R typeinfo name for CTEBeamRing
 R typeinfo name for CTEBeamRingPoint
 R typeinfo name for CTEBeamSpline
 R typeinfo name for CTEBloodSprite
 R typeinfo name for CTEBloodStream
 R typeinfo name for CTEBreakModel
 R typeinfo name for CTEBubbleTrail
 R typeinfo name for CTEBubbles
 R typeinfo name for CTEClientProjectile
 R typeinfo name for CTEDecal
 R typeinfo name for CTEDust
 R typeinfo name for CTEDynamicLight
 R typeinfo name for CTEEffectDispatch
 R typeinfo name for CTEEnergySplash
 R typeinfo name for CTEExplosion
 R typeinfo name for CTEFireBullets
 R typeinfo name for CTEFizz
 R typeinfo name for CTEFootprintDecal
 R typeinfo name for CTEGaussExplosion
 R typeinfo name for CTEGlowSprite
 R typeinfo name for CTEImpact
 R typeinfo name for CTEKillPlayerAttachments
 R typeinfo name for CTELargeFunnel
 R typeinfo name for CTEMetalSparks
 R typeinfo name for CTEMuzzleFlash
 R typeinfo name for CTEParticleSystem
 R typeinfo name for CTEPhysicsProp
 R typeinfo name for CTEPlayerAnimEvent
 R typeinfo name for CTEPlayerDecal
 R typeinfo name for CTEProjectedDecal
 R typeinfo name for CTEShatterSurface
 R typeinfo name for CTEShowLine
 R typeinfo name for CTESmoke
 R typeinfo name for CTESparks
 R typeinfo name for CTESprite
 R typeinfo name for CTESpriteSpray
 R typeinfo name for CTETFBlood
 R typeinfo name for CTETFExplosion
 R typeinfo name for CTETFParticleEffect
 R typeinfo name for CTEWorldDecal
 R typeinfo name for CTFAmmoPack
 R typeinfo name for CTFArcherProxy
 R typeinfo name for CTFBall_Ornament
 R typeinfo name for CTFBaseBoss
 R typeinfo name for CTFBaseBossLocomotion
 R typeinfo name for CTFBaseProjectile
 R typeinfo name for CTFBaseRocket
 R typeinfo name for CTFBat
 R typeinfo name for CTFBat_Fish
 R typeinfo name for CTFBat_Giftwrap
 R typeinfo name for CTFBat_Wood
 R typeinfo name for CTFBonesaw
 R typeinfo name for CTFBot
 R typeinfo name for CTFBot::CTFBotIntention
 R typeinfo name for CTFBotActionPoint
 R typeinfo name for CTFBotAttack
 R typeinfo name for CTFBotAttackFlagDefenders
 R typeinfo name for CTFBotBody
 R typeinfo name for CTFBotCapturePoint
 R typeinfo name for CTFBotController
 R typeinfo name for CTFBotDead
 R typeinfo name for CTFBotDefendPoint
 R typeinfo name for CTFBotDefendPointBlockCapture
 R typeinfo name for CTFBotDeliverFlag
 R typeinfo name for CTFBotDestroyEnemySentry
 R typeinfo name for CTFBotEngineerBuild
 R typeinfo name for CTFBotEngineerBuildDispenser
 R typeinfo name for CTFBotEngineerBuildSentryGun
 R typeinfo name for CTFBotEngineerBuildTeleportEntrance
 R typeinfo name for CTFBotEngineerBuildTeleportExit
 R typeinfo name for CTFBotEngineerBuilding
 R typeinfo name for CTFBotEngineerMoveToBuild
 R typeinfo name for CTFBotEscortFlagCarrier
 R typeinfo name for CTFBotEscortSquadLeader
 R typeinfo name for CTFBotFetchFlag
 R typeinfo name for CTFBotGenerator
 R typeinfo name for CTFBotGetAmmo
 R typeinfo name for CTFBotGetHealth
 R typeinfo name for CTFBotHint
 R typeinfo name for CTFBotHintEngineerNest
 R typeinfo name for CTFBotHintSentrygun
 R typeinfo name for CTFBotHintTeleporterExit
 R typeinfo name for CTFBotLocomotion
 R typeinfo name for CTFBotMainAction
 R typeinfo name for CTFBotManager
 R typeinfo name for CTFBotMedicHeal
 R typeinfo name for CTFBotMedicRetreat
 R typeinfo name for CTFBotMeleeAttack
 R typeinfo name for CTFBotMissionSuicideBomber
 R typeinfo name for CTFBotMvMDeployBomb
 R typeinfo name for CTFBotMvMEngineerBuildSentryGun
 R typeinfo name for CTFBotMvMEngineerBuildTeleportExit
 R typeinfo name for CTFBotMvMEngineerIdle
 R typeinfo name for CTFBotMvMEngineerTeleportSpawn
 R typeinfo name for CTFBotNavEntMoveTo
 R typeinfo name for CTFBotNavEntWait
 R typeinfo name for CTFBotPathCost
 R typeinfo name for CTFBotPayloadBlock
 R typeinfo name for CTFBotPayloadGuard
 R typeinfo name for CTFBotPayloadPush
 R typeinfo name for CTFBotPrepareStickybombTrap
 R typeinfo name for CTFBotProxy
 R typeinfo name for CTFBotPushToCapturePoint
 R typeinfo name for CTFBotRetreatToCover
 R typeinfo name for CTFBotRoster
 R typeinfo name for CTFBotScenarioMonitor
 R typeinfo name for CTFBotSeekAndDestroy
 R typeinfo name for CTFBotSniperLurk
 R typeinfo name for CTFBotSpawner
 R typeinfo name for CTFBotSpyAttack
 R typeinfo name for CTFBotSpyHide
 R typeinfo name for CTFBotSpyInfiltrate
 R typeinfo name for CTFBotSpyLeaveSpawnRoom
 R typeinfo name for CTFBotSpyLurk
 R typeinfo name for CTFBotSpySap
 R typeinfo name for CTFBotSquad
 R typeinfo name for CTFBotStickybombSentrygun
 R typeinfo name for CTFBotTacticalMonitor
 R typeinfo name for CTFBotTaunt
 R typeinfo name for CTFBotUberAttackEnemySentry
 R typeinfo name for CTFBotUseItem
 R typeinfo name for CTFBotUseTeleporter
 R typeinfo name for CTFBotVision
 R typeinfo name for CTFBotWaitForOutOfPositionSquadMember
 R typeinfo name for CTFBottle
 R typeinfo name for CTFBuffItem
 R typeinfo name for CTFCannon
 R typeinfo name for CTFChargedSMG
 R typeinfo name for CTFCleaver
 R typeinfo name for CTFClub
 R typeinfo name for CTFCompoundBow
 R typeinfo name for CTFCondition
 R typeinfo name for CTFConditionList
 R typeinfo name for CTFConditionQuestCondition
 R typeinfo name for CTFCondition_CritBoost
 R typeinfo name for CTFCraftingRecipeDefinition
 R typeinfo name for CTFCrossbow
 R typeinfo name for CTFDRGPomson
 R typeinfo name for CTFDamageEvent
 R typeinfo name for CTFDecapitationMeleeWeaponBase
 R typeinfo name for CTFDefendPointMission
 R typeinfo name for CTFDefendPointSniperZone
 R typeinfo name for CTFDespawn
 R typeinfo name for CTFDroppedWeapon
 R typeinfo name for CTFDroppedWeapon::NetworkVar_m_Item
 R typeinfo name for CTFDuelSummary
 R typeinfo name for CTFEventLog
 R typeinfo name for CTFFireAxe
 R typeinfo name for CTFFists
 R typeinfo name for CTFFlagEventTypeRestriction
 R typeinfo name for CTFFlameEntity
 R typeinfo name for CTFFlameThrower
 R typeinfo name for CTFFlareGun
 R typeinfo name for CTFFlareGun_Revenge
 R typeinfo name for CTFForceRespawn
 R typeinfo name for CTFGCServerSystem
 R typeinfo name for CTFGSLobby
 R typeinfo name for CTFGameModeHistory
 R typeinfo name for CTFGameMovement
 R typeinfo name for CTFGameRules
 R typeinfo name for CTFGameRulesProxy
 R typeinfo name for CTFGameStats
 R typeinfo name for CTFGenericBomb
 R typeinfo name for CTFGenericBombShim
 R typeinfo name for CTFGenericStringRestriction
 R typeinfo name for CTFGenericSubStringRestriction
 R typeinfo name for CTFGlow
 R typeinfo name for CTFGotoActionPoint
 R typeinfo name for CTFGrapplingHook
 R typeinfo name for CTFGrenadeLauncher
 R typeinfo name for CTFGrenadePipebombProjectile
 R typeinfo name for CTFHLTVDirector
 R typeinfo name for CTFHalloweenFortuneTeller
 R typeinfo name for CTFHalloweenMinigame
 R typeinfo name for CTFHalloweenMinigame_FallingPlatforms
 R typeinfo name for CTFHellZap
 R typeinfo name for CTFHolidayEntity
 R typeinfo name for CTFHudNotify
 R typeinfo name for CTFInfoPowerupSpawn
 R typeinfo name for CTFIntermission
 R typeinfo name for CTFInventoryManager
 R typeinfo name for CTFItem
 R typeinfo name for CTFItemDefinition
 R typeinfo name for CTFItemSchema
 R typeinfo name for CTFItemSystem
 R typeinfo name for CTFJar
 R typeinfo name for CTFJarMilk
 R typeinfo name for CTFKatana
 R typeinfo name for CTFKnife
 R typeinfo name for CTFLaserPointer
 R typeinfo name for CTFLobbyMember
 R typeinfo name for CTFLunchBox
 R typeinfo name for CTFLunchBox_Drink
 R typeinfo name for CTFMapContribution
 R typeinfo name for CTFMapsWorkshop
 R typeinfo name for CTFMechanicalArm
 R typeinfo name for CTFMedigunShield
 R typeinfo name for CTFMerasmusTrickOrTreatProp
 R typeinfo name for CTFMiniGame
 R typeinfo name for CTFMinigameLogic
 R typeinfo name for CTFMinigun
 R typeinfo name for CTFNavArea
 R typeinfo name for CTFNavMesh
 R typeinfo name for CTFObjectiveResource
 R typeinfo name for CTFPEPBrawlerBlaster
 R typeinfo name for CTFParachute
 R typeinfo name for CTFParachute_Primary
 R typeinfo name for CTFParachute_Secondary
 R typeinfo name for CTFParticleCannon
 R typeinfo name for CTFParty
 R typeinfo name for CTFPasstimeLogic
 R typeinfo name for CTFPhysicsPushEntities
 R typeinfo name for CTFPipebombLauncher
 R typeinfo name for CTFPistol
 R typeinfo name for CTFPistol_Scout
 R typeinfo name for CTFPistol_ScoutPrimary
 R typeinfo name for CTFPistol_ScoutSecondary
 R typeinfo name for CTFPlayer
 R typeinfo name for CTFPlayer::NetworkVar_m_AttributeManager
 R typeinfo name for CTFPlayer::NetworkVar_m_Shared
 R typeinfo name for CTFPlayerAnimState
 R typeinfo name for CTFPlayerClass
 R typeinfo name for CTFPlayerClassDataMgr
 R typeinfo name for CTFPlayerClassShared
 R typeinfo name for CTFPlayerDestructionLogic
 R typeinfo name for CTFPlayerInfo
 R typeinfo name for CTFPlayerInventory
 R typeinfo name for CTFPlayerMove
 R typeinfo name for CTFPlayerResource
 R typeinfo name for CTFPlayerShared
 R typeinfo name for CTFPlayerShared::NetworkVar_m_ConditionList
 R typeinfo name for CTFPlayerShared::NetworkVar_m_RoundScoreData
 R typeinfo name for CTFPlayerShared::NetworkVar_m_ScoreData
 R typeinfo name for CTFPlayertPathCost
 R typeinfo name for CTFPointWeaponMimic
 R typeinfo name for CTFPowerup
 R typeinfo name for CTFPowerupBottle
 R typeinfo name for CTFProjectile_Arrow
 R typeinfo name for CTFProjectile_Cleaver
 R typeinfo name for CTFProjectile_EnergyBall
 R typeinfo name for CTFProjectile_EnergyRing
 R typeinfo name for CTFProjectile_Flare
 R typeinfo name for CTFProjectile_GrapplingHook
 R typeinfo name for CTFProjectile_HealingBolt
 R typeinfo name for CTFProjectile_Jar
 R typeinfo name for CTFProjectile_JarMilk
 R typeinfo name for CTFProjectile_Rocket
 R typeinfo name for CTFProjectile_SentryRocket
 R typeinfo name for CTFProjectile_SpellBats
 R typeinfo name for CTFProjectile_SpellFireball
 R typeinfo name for CTFProjectile_SpellKartBats
 R typeinfo name for CTFProjectile_SpellKartOrb
 R typeinfo name for CTFProjectile_SpellLightningOrb
 R typeinfo name for CTFProjectile_SpellMeteorShower
 R typeinfo name for CTFProjectile_SpellMirv
 R typeinfo name for CTFProjectile_SpellPumpkin
 R typeinfo name for CTFProjectile_SpellSpawnBoss
 R typeinfo name for CTFProjectile_SpellSpawnHorde
 R typeinfo name for CTFProjectile_SpellSpawnZombie
 R typeinfo name for CTFProjectile_SpellTransposeTeleport
 R typeinfo name for CTFProjectile_Syringe
 R typeinfo name for CTFProjectile_Throwable
 R typeinfo name for CTFProjectile_ThrowableBreadMonster
 R typeinfo name for CTFProjectile_ThrowableBrick
 R typeinfo name for CTFProjectile_ThrowableRepel
 R typeinfo name for CTFPumpkinBomb
 R typeinfo name for CTFPumpkinBombShim
 R typeinfo name for CTFQuestAndOperatorRestriction
 R typeinfo name for CTFQuestBasePlayerRestriction
 R typeinfo name for CTFQuestCondition
 R typeinfo name for CTFQuestCountEvaluator
 R typeinfo name for CTFQuestCustomDamageRestriction
 R typeinfo name for CTFQuestEvaluator
 R typeinfo name for CTFQuestEventListener
 R typeinfo name for CTFQuestGameTypeRestriction
 R typeinfo name for CTFQuestLoadoutPositionRestriction
 R typeinfo name for CTFQuestMapRestriction
 R typeinfo name for CTFQuestNotOperatorRestriction
 R typeinfo name for CTFQuestObjectiveConditionsDefinition
 R typeinfo name for CTFQuestObjectiveDefinition
 R typeinfo name for CTFQuestOperatorRestriction
 R typeinfo name for CTFQuestOrOperatorRestriction
 R typeinfo name for CTFQuestPlayerAliveRestriction
 R typeinfo name for CTFQuestPlayerClassRestriction
 R typeinfo name for CTFQuestPlayerConditionRestriction
 R typeinfo name for CTFQuestPlayerDisguiseRestriction
 R typeinfo name for CTFQuestPlayerDistanceRestriction
 R typeinfo name for CTFQuestPlayerIsOwnerRestriction
 R typeinfo name for CTFQuestPlayerJumpingRestriction
 R typeinfo name for CTFQuestPlayerObjectRestriction
 R typeinfo name for CTFQuestRestriction
 R typeinfo name for CTFQuestScorerRestriction
 R typeinfo name for CTFQuestTeamRestriction
 R typeinfo name for CTFQuestWeaponTypeRestriction
 R typeinfo name for CTFRagdoll
 R typeinfo name for CTFRaygun
 R typeinfo name for CTFReviveMarker
 R typeinfo name for CTFRevolver
 R typeinfo name for CTFRobotArm
 R typeinfo name for CTFRobotDestructionLogic
 R typeinfo name for CTFRobotDestruction_Robot
 R typeinfo name for CTFRobotDestruction_RobotGroup
 R typeinfo name for CTFRobotDestruction_RobotSpawn
 R typeinfo name for CTFRocketLauncher
 R typeinfo name for CTFRocketLauncher_AirStrike
 R typeinfo name for CTFRocketLauncher_DirectHit
 R typeinfo name for CTFRune
 R typeinfo name for CTFRuneTemp
 R typeinfo name for CTFRuneTempCrit
 R typeinfo name for CTFRuneTempUber
 R typeinfo name for CTFSMG
 R typeinfo name for CTFScatterGun
 R typeinfo name for CTFServerBenchmark
 R typeinfo name for CTFShotgun
 R typeinfo name for CTFShotgunBuildingRescue
 R typeinfo name for CTFShotgun_HWG
 R typeinfo name for CTFShotgun_Pyro
 R typeinfo name for CTFShotgun_Revenge
 R typeinfo name for CTFShotgun_Soldier
 R typeinfo name for CTFShovel
 R typeinfo name for CTFSniperRifle
 R typeinfo name for CTFSniperRifleClassic
 R typeinfo name for CTFSniperRifleDecap
 R typeinfo name for CTFSodaPopper
 R typeinfo name for CTFSpawnTemplate
 R typeinfo name for CTFSpawner
 R typeinfo name for CTFSpellBook
 R typeinfo name for CTFSpell_MeteorShowerSpawner
 R typeinfo name for CTFStickBomb
 R typeinfo name for CTFStunBall
 R typeinfo name for CTFStyleInfo
 R typeinfo name for CTFSword
 R typeinfo name for CTFSyringeGun
 R typeinfo name for CTFTacticalMissionManager
 R typeinfo name for CTFTankBoss
 R typeinfo name for CTFTankBossBody
 R typeinfo name for CTFTankDestruction
 R typeinfo name for CTFTargetDummy
 R typeinfo name for CTFTauntProp
 R typeinfo name for CTFTeam
 R typeinfo name for CTFTeamSpawn
 R typeinfo name for CTFTeleportLocation
 R typeinfo name for CTFThrowable
 R typeinfo name for CTFTrainingAttackSentryActionPoint
 R typeinfo name for CTFTrainingDynamicProp
 R typeinfo name for CTFViewModel
 R typeinfo name for CTFWarTracker
 R typeinfo name for CTFWarTrackerManager
 R typeinfo name for CTFWeaponBase
 R typeinfo name for CTFWeaponBaseGrenadeProj
 R typeinfo name for CTFWeaponBaseGun
 R typeinfo name for CTFWeaponBaseMelee
 R typeinfo name for CTFWeaponBaseMerasmusGrenade
 R typeinfo name for CTFWeaponBuilder
 R typeinfo name for CTFWeaponClassRestriction
 R typeinfo name for CTFWeaponInfo
 R typeinfo name for CTFWeaponInvis
 R typeinfo name for CTFWeaponPDA
 R typeinfo name for CTFWeaponPDAExpansion_Dispenser
 R typeinfo name for CTFWeaponPDAExpansion_Teleporter
 R typeinfo name for CTFWeaponPDA_Engineer_Build
 R typeinfo name for CTFWeaponPDA_Engineer_Destroy
 R typeinfo name for CTFWeaponPDA_Spy
 R typeinfo name for CTFWeaponSapper
 R typeinfo name for CTFWearable
 R typeinfo name for CTFWearableDemoShield
 R typeinfo name for CTFWearableLevelableItem
 R typeinfo name for CTFWearableRobotArm
 R typeinfo name for CTFWearableVM
 R typeinfo name for CTFWrench
 R typeinfo name for CTacticalMission
 R typeinfo name for CTacticalMissionManager
 R typeinfo name for CTacticalMissionManager::IForEachMission
 R typeinfo name for CTacticalMissionZone
 R typeinfo name for CTankSpawner
 R typeinfo name for CTankTargetChange
 R typeinfo name for CTankTrainAI
 R typeinfo name for CTargetCDAudioRep
 R typeinfo name for CTargetChangeGravity
 R typeinfo name for CTargetOnlyFilter
 R typeinfo name for CTeam
 R typeinfo name for CTeamAutoBalanceIssue
 R typeinfo name for CTeamControlPoint
 R typeinfo name for CTeamControlPointMaster
 R typeinfo name for CTeamControlPointRound
 R typeinfo name for CTeamRecipientFilter
 R typeinfo name for CTeamRoundTimer
 R typeinfo name for CTeamTrainWatcher
 R typeinfo name for CTeamplayRoundBasedRules
 R typeinfo name for CTeamplayRoundBasedRulesProxy
 R typeinfo name for CTeamplayRoundWin
 R typeinfo name for CTeamplayRules
 R typeinfo name for CTeleportVortex
 R typeinfo name for CTempEntTester
 R typeinfo name for CTempEntsSystem
 R typeinfo name for CTemplateNPCMaker
 R typeinfo name for CTemplate_SaveRestoreBlockHandler
 R typeinfo name for CTemplatesHook
 R typeinfo name for CTesla
 R typeinfo name for CTestAreaAgainstThreats
 R typeinfo name for CTestEffect
 R typeinfo name for CTestTraceline
 R typeinfo name for CTest_ProxyToggle_Networkable
 R typeinfo name for CTextureToggle
 R typeinfo name for CThinkContextsSaveDataOps
 R typeinfo name for CThrustController
 R typeinfo name for CTimerEntity
 R typeinfo name for CToolFrameworkServer
 R typeinfo name for CTraceFilter
 R typeinfo name for CTraceFilterAgainstEntityList
 R typeinfo name for CTraceFilterChain
 R typeinfo name for CTraceFilterCollisionArrows
 R typeinfo name for CTraceFilterCollisionGrenades
 R typeinfo name for CTraceFilterDeflection
 R typeinfo name for CTraceFilterDoor
 R typeinfo name for CTraceFilterEntitiesOnly
 R typeinfo name for CTraceFilterEntity
 R typeinfo name for CTraceFilterEntityIgnoreOther
 R typeinfo name for CTraceFilterGroundEntities
 R typeinfo name for CTraceFilterIgnoreFriendlyCombatItems
 R typeinfo name for CTraceFilterIgnoreObjects
 R typeinfo name for CTraceFilterIgnorePlayers
 R typeinfo name for CTraceFilterIgnoreTeammates
 R typeinfo name for CTraceFilterIgnoreTeammatesAndTeamObjects
 R typeinfo name for CTraceFilterLOS
 R typeinfo name for CTraceFilterMelee
 R typeinfo name for CTraceFilterNav
 R typeinfo name for CTraceFilterNoCombatCharacters
 R typeinfo name for CTraceFilterNoNPCsOrPlayer
 R typeinfo name for CTraceFilterObject
 R typeinfo name for CTraceFilterOnlyNPCsAndPlayer
 R typeinfo name for CTraceFilterPlayersNPCs
 R typeinfo name for CTraceFilterPlayersNPCsPhysicsProps
 R typeinfo name for CTraceFilterPushFinal
 R typeinfo name for CTraceFilterPushMove
 R typeinfo name for CTraceFilterSimple
 R typeinfo name for CTraceFilterSimpleClassnameList
 R typeinfo name for CTraceFilterSimpleList
 R typeinfo name for CTraceFilterSkipClassname
 R typeinfo name for CTraceFilterSkipNPCs
 R typeinfo name for CTraceFilterSkipTwoEntities
 R typeinfo name for CTraceFilterWalkableEntities
 R typeinfo name for CTraceListData
 R typeinfo name for CTracePassFilter
 R typeinfo name for CTrainingAnnotation
 R typeinfo name for CTrainingModeLogic
 R typeinfo name for CTriggerAddOrRemoveTFPlayerAttributes
 R typeinfo name for CTriggerAddTFPlayerCondition
 R typeinfo name for CTriggerApplyImpulse
 R typeinfo name for CTriggerAreaCapture
 R typeinfo name for CTriggerAreaCaptureShim
 R typeinfo name for CTriggerBotTag
 R typeinfo name for CTriggerBrush
 R typeinfo name for CTriggerCDAudio
 R typeinfo name for CTriggerCamera
 R typeinfo name for CTriggerCatapult
 R typeinfo name for CTriggerGravity
 R typeinfo name for CTriggerHurt
 R typeinfo name for CTriggerHurtShim
 R typeinfo name for CTriggerIgnite
 R typeinfo name for CTriggerIgniteArrows
 R typeinfo name for CTriggerImpact
 R typeinfo name for CTriggerLook
 R typeinfo name for CTriggerMultiple
 R typeinfo name for CTriggerOnce
 R typeinfo name for CTriggerParticle
 R typeinfo name for CTriggerPasstimeBall
 R typeinfo name for CTriggerPlayerMovement
 R typeinfo name for CTriggerPlayerRespawnOverride
 R typeinfo name for CTriggerProximity
 R typeinfo name for CTriggerPush
 R typeinfo name for CTriggerRemove
 R typeinfo name for CTriggerRemoveTFPlayerCondition
 R typeinfo name for CTriggerSave
 R typeinfo name for CTriggerSoundscape
 R typeinfo name for CTriggerStun
 R typeinfo name for CTriggerTeleport
 R typeinfo name for CTriggerTeleportRelative
 R typeinfo name for CTriggerTimerDoor
 R typeinfo name for CTriggerToggleSave
 R typeinfo name for CTriggerTraceEnum
 R typeinfo name for CTriggerVPhysicsMotion
 R typeinfo name for CTriggerVolume
 R typeinfo name for CTriggerWind
 R typeinfo name for CUpgrades
 R typeinfo name for CUsePushFilter
 R typeinfo name for CUsefulHealTargetFilter
 R typeinfo name for CUserCmd
 R typeinfo name for CUtlCStringConversion
 R typeinfo name for CUtlCachedFileData<CModelSoundsCache>
 R typeinfo name for CUtlCharConversion
 R typeinfo name for CUtlMapDataOps<CUtlMap<string_t, CSimpleSimTimer, char>, 2, 10>
 R typeinfo name for CUtlNoEscConversion
 R typeinfo name for CUtlSymbolDataOps
 R typeinfo name for CUtlVector<MvMTourMission_t, CUtlMemory<MvMTourMission_t, int> >
 R typeinfo name for CUtlVector<int, CUtlMemory<int, int> >
 R typeinfo name for CUtlVector<static_attrib_t, CUtlMemory<static_attrib_t, int> >
 R typeinfo name for CUtlVectorDataOps<CAI_InterestTarget, 10>
 R typeinfo name for CUtlVectorDataOps<CUtlVector<AISquadEnemyInfo_t, CUtlMemory<AISquadEnemyInfo_t, int> >, 10>
 R typeinfo name for CUtlVectorDataOps<CUtlVector<AI_Waypoint_t, CUtlMemory<AI_Waypoint_t, int> >, 10>
 R typeinfo name for CUtlVectorDataOps<CUtlVector<CAI_ScriptConditionsElement, CUtlMemory<CAI_ScriptConditionsElement, int> >, 10>
 R typeinfo name for CUtlVectorDataOps<CUtlVector<CAnimationLayer, CUtlMemory<CAnimationLayer, int> >, 10>
 R typeinfo name for CUtlVectorDataOps<CUtlVector<CBaseEntity*, CUtlMemory<CBaseEntity*, int> >, 12>
 R typeinfo name for CUtlVectorDataOps<CUtlVector<CHandle<CAI_BaseNPC>, CUtlMemory<CHandle<CAI_BaseNPC>, int> >, 13>
 R typeinfo name for CUtlVectorDataOps<CUtlVector<CHandle<CBaseEntity>, CUtlMemory<CHandle<CBaseEntity>, int> >, 13>
 R typeinfo name for CUtlVectorDataOps<CUtlVector<CHandle<CBaseFlex>, CUtlMemory<CHandle<CBaseFlex>, int> >, 13>
 R typeinfo name for CUtlVectorDataOps<CUtlVector<CHandle<CBasePlayer>, CUtlMemory<CHandle<CBasePlayer>, int> >, 13>
 R typeinfo name for CUtlVectorDataOps<CUtlVector<CHandle<CFish>, CUtlMemory<CHandle<CFish>, int> >, 13>
 R typeinfo name for CUtlVectorDataOps<CUtlVector<CHandle<CSceneEntity>, CUtlMemory<CHandle<CSceneEntity>, int> >, 13>
 R typeinfo name for CUtlVectorDataOps<CUtlVector<CHandle<CSceneListManager>, CUtlMemory<CHandle<CSceneListManager>, int> >, 13>
 R typeinfo name for CUtlVectorDataOps<CUtlVector<CHandle<CVGuiScreen>, CUtlMemory<CHandle<CVGuiScreen>, int> >, 13>
 R typeinfo name for CUtlVectorDataOps<CUtlVector<CPassengerInfo, CUtlMemory<CPassengerInfo, int> >, 10>
 R typeinfo name for CUtlVectorDataOps<CUtlVector<Relationship_t, CUtlMemory<Relationship_t, int> >, 10>
 R typeinfo name for CUtlVectorDataOps<CUtlVector<ResponseContext_t, CUtlMemory<ResponseContext_t, int> >, 10>
 R typeinfo name for CUtlVectorDataOps<CUtlVector<SaveRestoreBlockHeader_t, CUtlMemory<SaveRestoreBlockHeader_t, int> >, 10>
 R typeinfo name for CUtlVectorDataOps<CUtlVector<ScriptedNPCInteraction_t, CUtlMemory<ScriptedNPCInteraction_t, int> >, 10>
 R typeinfo name for CUtlVectorDataOps<CUtlVector<UnreachableEnt_t, CUtlMemory<UnreachableEnt_t, int> >, 10>
 R typeinfo name for CUtlVectorDataOps<CUtlVector<globalentity_t, CUtlMemory<globalentity_t, int> >, 10>
 R typeinfo name for CUtlVectorDataOps<CUtlVector<int, CUtlMemory<int, int> >, 5>
 R typeinfo name for CUtlVectorDataOps<CUtlVector<magnetted_objects_t, CUtlMemory<magnetted_objects_t, int> >, 10>
 R typeinfo name for CUtlVectorDataOps<CUtlVector<modifiedconvars_t, CUtlMemory<modifiedconvars_t, int> >, 10>
 R typeinfo name for CUtlVectorDataOps<CUtlVector<physfollower_t, CUtlMemory<physfollower_t, int> >, 10>
 R typeinfo name for CUtlVectorDataOps<CUtlVector<template_t, CUtlMemory<template_t, int> >, 10>
 R typeinfo name for CUtlVectorDataOps<CUtlVector<thinkfunc_t, CUtlMemory<thinkfunc_t, int> >, 10>
 R typeinfo name for CUtlVectorDataOps<CUtlVector<vehicle_crashsound_t, CUtlMemory<vehicle_crashsound_t, int> >, 10>
 R typeinfo name for CUtlVectorDataOps<CUtlVector<vehicle_gear_t, CUtlMemory<vehicle_gear_t, int> >, 10>
 R typeinfo name for CVGuiScreen
 R typeinfo name for CVarBitVecSaveRestoreOps<CBitVec<32> >
 R typeinfo name for CVariantSaveDataOps
 R typeinfo name for CVehicleSoundsParser
 R typeinfo name for CVoiceGameMgr
 R typeinfo name for CVoiceGameMgrHelper
 R typeinfo name for CVoteController
 R typeinfo name for CVoteControllerSystem
 R typeinfo name for CWC_UpdateIgnoreList
 R typeinfo name for CWarData
 R typeinfo name for CWaterBullet
 R typeinfo name for CWaterLODControl
 R typeinfo name for CWave
 R typeinfo name for CWaveSpawnPopulator
 R typeinfo name for CWeaponIFMBase
 R typeinfo name for CWeaponIFMBaseCamera
 R typeinfo name for CWeaponIFMSteadyCam
 R typeinfo name for CWeaponLOSFilter
 R typeinfo name for CWeaponList
 R typeinfo name for CWeaponMedigun
 R typeinfo name for CWeightButton
 R typeinfo name for CWheelOfDoom
 R typeinfo name for CWheelOfDoom::WOD_BaseEffect
 R typeinfo name for CWheelOfDoom::WOD_BigHeadEffect
 R typeinfo name for CWheelOfDoom::WOD_Burn
 R typeinfo name for CWheelOfDoom::WOD_CritsEffect
 R typeinfo name for CWheelOfDoom::WOD_Dance
 R typeinfo name for CWheelOfDoom::WOD_Ghosts
 R typeinfo name for CWheelOfDoom::WOD_LowGravityEffect
 R typeinfo name for CWheelOfDoom::WOD_Pee
 R typeinfo name for CWheelOfDoom::WOD_SmallHeadEffect
 R typeinfo name for CWheelOfDoom::WOD_SuperJumpEffect
 R typeinfo name for CWheelOfDoom::WOD_SuperSpeedEffect
 R typeinfo name for CWheelOfDoom::WOD_UberEffect
 R typeinfo name for CWheelOfDoomSpiral
 R typeinfo name for CWindowPane
 R typeinfo name for CWorkerThread
 R typeinfo name for CWorkshop_GetContributors_Request
 R typeinfo name for CWorkshop_GetContributors_Response
 R typeinfo name for CWorkshop_PopulateItemDescriptions_Request
 R typeinfo name for CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock
 R typeinfo name for CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription
 R typeinfo name for CWorkshop_SetItemPaymentRules_Request
 R typeinfo name for CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule
 R typeinfo name for CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule
 R typeinfo name for CWorkshop_SetItemPaymentRules_Response
 R typeinfo name for CWorld
 R typeinfo name for CWorldItem
 R typeinfo name for CZombie
 R typeinfo name for CZombieAttack
 R typeinfo name for CZombieBehavior
 R typeinfo name for CZombieIntention
 R typeinfo name for CZombieLocomotion
 R typeinfo name for CZombiePathCost
 R typeinfo name for CZombieSpawn
 R typeinfo name for CZombieSpawner
 R typeinfo name for CZombieSpecialAttack
 R typeinfo name for ChasePath
 R typeinfo name for ConCommand
 R typeinfo name for ConCommandBase
 R typeinfo name for ConVar
 R typeinfo name for CountdownTimer
 R typeinfo name for CryptoPP::ASN1CryptoMaterial<CryptoPP::PublicKey>
 R typeinfo name for CryptoPP::ASN1Object
 R typeinfo name for CryptoPP::AbstractEuclideanDomain<CryptoPP::Integer>
 R typeinfo name for CryptoPP::AbstractGroup<CryptoPP::Integer>
 R typeinfo name for CryptoPP::AbstractRing<CryptoPP::Integer>
 R typeinfo name for CryptoPP::AbstractRing<CryptoPP::Integer>::MultiplicativeGroupT
 R typeinfo name for CryptoPP::Algorithm
 R typeinfo name for CryptoPP::AlgorithmImpl<CryptoPP::IteratedHash<unsigned int, CryptoPP::EnumToType<CryptoPP::ByteOrder, 1>, 64u, CryptoPP::HashTransformation>, CryptoPP::SHA256>
 R typeinfo name for CryptoPP::AlgorithmImpl<CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher, CryptoPP::Rijndael_Info>, CryptoPP::TwoBases<CryptoPP::BlockCipher, CryptoPP::Rijndael_Info> >, CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher, CryptoPP::Rijndael_Info>, CryptoPP::TwoBases<CryptoPP::BlockCipher, CryptoPP::Rijndael_Info> > >
 R typeinfo name for CryptoPP::AlgorithmImpl<CryptoPP::TF_VerifierBase, CryptoPP::TF_SS<CryptoPP::PKCS1v15, CryptoPP::SHA256, CryptoPP::RSA, int> >
 R typeinfo name for CryptoPP::AlgorithmParameters
 R typeinfo name for CryptoPP::AlgorithmParametersBase
 R typeinfo name for CryptoPP::AlgorithmParametersBase::ParameterNotUsed
 R typeinfo name for CryptoPP::AlgorithmParametersTemplate<CryptoPP::ConstByteArrayParameter>
 R typeinfo name for CryptoPP::ArraySink
 R typeinfo name for CryptoPP::AsymmetricAlgorithm
 R typeinfo name for CryptoPP::AutoSeededX917RNG<CryptoPP::Rijndael>
 R typeinfo name for CryptoPP::AutoSignaling<CryptoPP::BufferedTransformation>
 R typeinfo name for CryptoPP::AutoSignaling<CryptoPP::InputRejecting<CryptoPP::BufferedTransformation> >
 R typeinfo name for CryptoPP::BERDecodeErr
 R typeinfo name for CryptoPP::BERGeneralDecoder
 R typeinfo name for CryptoPP::BERSequenceDecoder
 R typeinfo name for CryptoPP::BitBucket
 R typeinfo name for CryptoPP::BlockCipher
 R typeinfo name for CryptoPP::BlockCipherFinal<(CryptoPP::CipherDir)0, CryptoPP::Rijndael::Enc>
 R typeinfo name for CryptoPP::BlockCipherImpl<CryptoPP::Rijndael_Info, CryptoPP::BlockCipher>
 R typeinfo name for CryptoPP::BlockPaddingSchemeDef::BlockPaddingScheme
 R typeinfo name for CryptoPP::BlockTransformation
 R typeinfo name for CryptoPP::BlockingRng
 R typeinfo name for CryptoPP::BufferedTransformation
 R typeinfo name for CryptoPP::BufferedTransformation::NoChannelSupport
 R typeinfo name for CryptoPP::Bufferless<CryptoPP::BufferedTransformation>
 R typeinfo name for CryptoPP::Bufferless<CryptoPP::Sink>
 R typeinfo name for CryptoPP::ByteArrayParameter
 R typeinfo name for CryptoPP::ByteQueue
 R typeinfo name for CryptoPP::ByteQueue::Walker
 R typeinfo name for CryptoPP::ClassNullRNG
 R typeinfo name for CryptoPP::Clonable
 R typeinfo name for CryptoPP::ClonableImpl<CryptoPP::BlockCipherFinal<(CryptoPP::CipherDir)0, CryptoPP::Rijndael::Enc>, CryptoPP::Rijndael::Enc>
 R typeinfo name for CryptoPP::ClonableImpl<CryptoPP::SHA256, CryptoPP::AlgorithmImpl<CryptoPP::IteratedHash<unsigned int, CryptoPP::EnumToType<CryptoPP::ByteOrder, 1>, 64u, CryptoPP::HashTransformation>, CryptoPP::SHA256> >
 R typeinfo name for CryptoPP::ConstByteArrayParameter
 R typeinfo name for CryptoPP::CryptoMaterial
 R typeinfo name for CryptoPP::CryptoMaterial::InvalidMaterial
 R typeinfo name for CryptoPP::DERGeneralEncoder
 R typeinfo name for CryptoPP::DERSequenceEncoder
 R typeinfo name for CryptoPP::DL_BadElement
 R typeinfo name for CryptoPP::EuclideanDomainOf<CryptoPP::Integer>
 R typeinfo name for CryptoPP::Exception
 R typeinfo name for CryptoPP::Filter
 R typeinfo name for CryptoPP::FixedBlockSize<16u>
 R typeinfo name for CryptoPP::HashInputTooLong
 R typeinfo name for CryptoPP::HashTransformation
 R typeinfo name for CryptoPP::InitializeInteger
 R typeinfo name for CryptoPP::InputRejecting<CryptoPP::BufferedTransformation>
 R typeinfo name for CryptoPP::InputRejecting<CryptoPP::BufferedTransformation>::InputRejected
 R typeinfo name for CryptoPP::InputRejecting<CryptoPP::Filter>
 R typeinfo name for CryptoPP::InputRejecting<CryptoPP::Filter>::InputRejected
 R typeinfo name for CryptoPP::Integer
 R typeinfo name for CryptoPP::Integer::DivideByZero
 R typeinfo name for CryptoPP::Integer::RandomNumberNotFound
 R typeinfo name for CryptoPP::Integer::RandomNumberType
 R typeinfo name for CryptoPP::InvalidArgument
 R typeinfo name for CryptoPP::InvalidDataFormat
 R typeinfo name for CryptoPP::InvalidKeyLength
 R typeinfo name for CryptoPP::IteratedHash<unsigned int, CryptoPP::EnumToType<CryptoPP::ByteOrder, 1>, 64u, CryptoPP::HashTransformation>
 R typeinfo name for CryptoPP::IteratedHashBase<unsigned int, CryptoPP::HashTransformation>
 R typeinfo name for CryptoPP::IteratedHashWithStaticTransform<unsigned int, CryptoPP::EnumToType<CryptoPP::ByteOrder, 1>, 64u, 32u, CryptoPP::SHA256, 32u, true>
 R typeinfo name for CryptoPP::MessageQueue
 R typeinfo name for CryptoPP::ModularArithmetic
 R typeinfo name for CryptoPP::MontgomeryRepresentation
 R typeinfo name for CryptoPP::NameValuePairs
 R typeinfo name for CryptoPP::NameValuePairs::ValueTypeMismatch
 R typeinfo name for CryptoPP::NonblockingRng
 R typeinfo name for CryptoPP::NotCopyable
 R typeinfo name for CryptoPP::NotImplemented
 R typeinfo name for CryptoPP::NullNameValuePairs
 R typeinfo name for CryptoPP::OS_RNG_Err
 R typeinfo name for CryptoPP::ObjectHolder<CryptoPP::SHA256>
 R typeinfo name for CryptoPP::PKCS1v15_SignatureMessageEncodingMethod
 R typeinfo name for CryptoPP::PK_DeterministicSignatureMessageEncodingMethod
 R typeinfo name for CryptoPP::PK_FinalTemplate<CryptoPP::TF_VerifierImpl<CryptoPP::TF_SignatureSchemeOptions<CryptoPP::TF_SS<CryptoPP::PKCS1v15, CryptoPP::SHA256, CryptoPP::RSA, int>, CryptoPP::RSA, CryptoPP::PKCS1v15_SignatureMessageEncodingMethod, CryptoPP::SHA256> > >
 R typeinfo name for CryptoPP::PK_MessageAccumulator
 R typeinfo name for CryptoPP::PK_MessageAccumulatorBase
 R typeinfo name for CryptoPP::PK_MessageAccumulatorImpl<CryptoPP::SHA256>
 R typeinfo name for CryptoPP::PK_SignatureMessageEncodingMethod
 R typeinfo name for CryptoPP::PK_SignatureScheme
 R typeinfo name for CryptoPP::PK_SignatureScheme::InvalidKeyLength
 R typeinfo name for CryptoPP::PK_SignatureScheme::KeyTooShort
 R typeinfo name for CryptoPP::PK_Verifier
 R typeinfo name for CryptoPP::PublicKey
 R typeinfo name for CryptoPP::PublicKeyAlgorithm
 R typeinfo name for CryptoPP::RSAFunction
 R typeinfo name for CryptoPP::RSAFunction*
 R typeinfo name for CryptoPP::RandomNumberGenerator
 R typeinfo name for CryptoPP::RandomizedTrapdoorFunction
 R typeinfo name for CryptoPP::Rijndael::Base
 R typeinfo name for CryptoPP::Rijndael::Enc
 R typeinfo name for CryptoPP::Rijndael_Info
 R typeinfo name for CryptoPP::SHA256
 R typeinfo name for CryptoPP::SelfTestFailure
 R typeinfo name for CryptoPP::SimpleKeyingInterface
 R typeinfo name for CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher, CryptoPP::Rijndael_Info>, CryptoPP::TwoBases<CryptoPP::BlockCipher, CryptoPP::Rijndael_Info> >
 R typeinfo name for CryptoPP::Sink
 R typeinfo name for CryptoPP::Source
 R typeinfo name for CryptoPP::SourceTemplate<CryptoPP::StringStore>
 R typeinfo name for CryptoPP::Store
 R typeinfo name for CryptoPP::StringSource
 R typeinfo name for CryptoPP::StringStore
 R typeinfo name for CryptoPP::TF_Base<CryptoPP::TrapdoorFunction, CryptoPP::PK_SignatureMessageEncodingMethod>
 R typeinfo name for CryptoPP::TF_ObjectImpl<CryptoPP::TF_VerifierBase, CryptoPP::TF_SignatureSchemeOptions<CryptoPP::TF_SS<CryptoPP::PKCS1v15, CryptoPP::SHA256, CryptoPP::RSA, int>, CryptoPP::RSA, CryptoPP::PKCS1v15_SignatureMessageEncodingMethod, CryptoPP::SHA256>, CryptoPP::RSAFunction>
 R typeinfo name for CryptoPP::TF_ObjectImplBase<CryptoPP::TF_VerifierBase, CryptoPP::TF_SignatureSchemeOptions<CryptoPP::TF_SS<CryptoPP::PKCS1v15, CryptoPP::SHA256, CryptoPP::RSA, int>, CryptoPP::RSA, CryptoPP::PKCS1v15_SignatureMessageEncodingMethod, CryptoPP::SHA256>, CryptoPP::RSAFunction>
 R typeinfo name for CryptoPP::TF_SignatureSchemeBase<CryptoPP::PK_Verifier, CryptoPP::TF_Base<CryptoPP::TrapdoorFunction, CryptoPP::PK_SignatureMessageEncodingMethod> >
 R typeinfo name for CryptoPP::TF_VerifierBase
 R typeinfo name for CryptoPP::TF_VerifierImpl<CryptoPP::TF_SignatureSchemeOptions<CryptoPP::TF_SS<CryptoPP::PKCS1v15, CryptoPP::SHA256, CryptoPP::RSA, int>, CryptoPP::RSA, CryptoPP::PKCS1v15_SignatureMessageEncodingMethod, CryptoPP::SHA256> >
 R typeinfo name for CryptoPP::TrapdoorFunction
 R typeinfo name for CryptoPP::TrapdoorFunctionBounds
 R typeinfo name for CryptoPP::TwoBases<CryptoPP::BlockCipher, CryptoPP::Rijndael_Info>
 R typeinfo name for CryptoPP::VariableKeyLength<16u, 16u, 32u, 8u, 4u, 0u>
 R typeinfo name for CryptoPP::Waitable
 R typeinfo name for CryptoPP::X509PublicKey
 R typeinfo name for CryptoPP::X917RNG
 R typeinfo name for DelayedSchemaData_GCDirectData
 R typeinfo name for DelayedSchemaData_HTTPResponseData
 R typeinfo name for DustTrail
 R typeinfo name for EntityParticleTrailInfo_t
 R typeinfo name for FilePlayerClassInfo_t
 R typeinfo name for FileWeaponInfo_t
 R typeinfo name for FilterDamageType
 R typeinfo name for FilterDamagedByWeaponInSlot
 R typeinfo name for FilterTeam
 R typeinfo name for FindSafeSentryApproachAreaScan
 R typeinfo name for GCSDK::CGCClient
 R typeinfo name for GCSDK::CGCClientJob
 R typeinfo name for GCSDK::CGCClientSharedObjectCache
 R typeinfo name for GCSDK::CGCClientSharedObjectTypeCache
 R typeinfo name for GCSDK::CGCMsg<MsgGCVerifyCacheSubscription_t>
 R typeinfo name for GCSDK::CGCMsg<MsgGC_Duel_Results_t>
 R typeinfo name for GCSDK::CGCSOCacheSubscribedJob
 R typeinfo name for GCSDK::CGCSOCacheSubscriptionCheck
 R typeinfo name for GCSDK::CGCSOCacheUnsubscribedJob
 R typeinfo name for GCSDK::CGCSOCreateJob
 R typeinfo name for GCSDK::CGCSODestroyJob
 R typeinfo name for GCSDK::CGCSOUpdateJob
 R typeinfo name for GCSDK::CGCSOUpdateMultipleJob
 R typeinfo name for GCSDK::CJob
 R typeinfo name for GCSDK::CMsgBase_t<GCSDK::GCMsgHdrEx_t>
 R typeinfo name for GCSDK::CProtoBufGCClientSendHandler
 R typeinfo name for GCSDK::CProtoBufMsg<CGCMsgGC_War_IndividualUpdate>
 R typeinfo name for GCSDK::CProtoBufMsg<CMsgConVarValue>
 R typeinfo name for GCSDK::CProtoBufMsg<CMsgGCQuestObjective_PointsChange>
 R typeinfo name for GCSDK::CProtoBufMsg<CMsgGCRematchRequest>
 R typeinfo name for GCSDK::CProtoBufMsg<CMsgGCRematchRequestResponse>
 R typeinfo name for GCSDK::CProtoBufMsg<CMsgGC_DailyCompetitiveStatsRollup>
 R typeinfo name for GCSDK::CProtoBufMsg<CMsgGC_DailyCompetitiveStatsRollup_Response>
 R typeinfo name for GCSDK::CProtoBufMsg<CMsgGC_GameServer_AuthChallenge>
 R typeinfo name for GCSDK::CProtoBufMsg<CMsgGC_GameServer_AuthChallengeResponse>
 R typeinfo name for GCSDK::CProtoBufMsg<CMsgGC_GameServer_AuthResult>
 R typeinfo name for GCSDK::CProtoBufMsg<CMsgGC_GameServer_LevelInfo>
 R typeinfo name for GCSDK::CProtoBufMsg<CMsgGC_GameServer_ServerModificationItem>
 R typeinfo name for GCSDK::CProtoBufMsg<CMsgGC_GameServer_ServerModificationItemExpired>
 R typeinfo name for GCSDK::CProtoBufMsg<CMsgGC_GameServer_UseServerModificationItem>
 R typeinfo name for GCSDK::CProtoBufMsg<CMsgGC_GameServer_UseServerModificationItem_Response>
 R typeinfo name for GCSDK::CProtoBufMsg<CMsgGC_KickPlayerFromLobby>
 R typeinfo name for GCSDK::CProtoBufMsg<CMsgGC_Match_Result>
 R typeinfo name for GCSDK::CProtoBufMsg<CMsgGC_Match_ResultResponse>
 R typeinfo name for GCSDK::CProtoBufMsg<CMsgGC_TFVoteKickPlayerRequest>
 R typeinfo name for GCSDK::CProtoBufMsg<CMsgGC_VoteKickPlayerRequestResponse>
 R typeinfo name for GCSDK::CProtoBufMsg<CMsgGameServerKickingLobby>
 R typeinfo name for GCSDK::CProtoBufMsg<CMsgGameServerKickingLobbyResponse>
 R typeinfo name for GCSDK::CProtoBufMsg<CMsgGameServerMatchmakingStatus>
 R typeinfo name for GCSDK::CProtoBufMsg<CMsgHalloween_Merasmus2012>
 R typeinfo name for GCSDK::CProtoBufMsg<CMsgIncrementKillCountAttribute>
 R typeinfo name for GCSDK::CProtoBufMsg<CMsgIncrementKillCountAttribute_Multiple>
 R typeinfo name for GCSDK::CProtoBufMsg<CMsgItemAcknowledged>
 R typeinfo name for GCSDK::CProtoBufMsg<CMsgMvMMannUpVictoryReply>
 R typeinfo name for GCSDK::CProtoBufMsg<CMsgMvMVictory>
 R typeinfo name for GCSDK::CProtoBufMsg<CMsgPlayerLeftMatch>
 R typeinfo name for GCSDK::CProtoBufMsg<CMsgPlayerLeftMatchResponse>
 R typeinfo name for GCSDK::CProtoBufMsg<CMsgReplicateConVars>
 R typeinfo name for GCSDK::CProtoBufMsg<CMsgSOCacheSubscribed>
 R typeinfo name for GCSDK::CProtoBufMsg<CMsgSOCacheSubscriptionCheck>
 R typeinfo name for GCSDK::CProtoBufMsg<CMsgSOCacheSubscriptionRefresh>
 R typeinfo name for GCSDK::CProtoBufMsg<CMsgSOCacheUnsubscribed>
 R typeinfo name for GCSDK::CProtoBufMsg<CMsgSOMultipleObjects>
 R typeinfo name for GCSDK::CProtoBufMsg<CMsgSOSingleObject>
 R typeinfo name for GCSDK::CProtoBufMsg<CMsgServerGoodbye>
 R typeinfo name for GCSDK::CProtoBufMsg<CMsgServerHello>
 R typeinfo name for GCSDK::CProtoBufMsg<CMsgServerWelcome>
 R typeinfo name for GCSDK::CProtoBufMsg<CMsgTFCoaching_CoachJoined>
 R typeinfo name for GCSDK::CProtoBufMsg<CMsgTFCoaching_CoachJoining>
 R typeinfo name for GCSDK::CProtoBufMsg<CMsgTFCoaching_RemoveCurrentCoach>
 R typeinfo name for GCSDK::CProtoBufMsg<CMsgTFQuickplay_PlayerJoining>
 R typeinfo name for GCSDK::CProtoBufMsg<CMsgTFVoteKickBanPlayerResult>
 R typeinfo name for GCSDK::CProtoBufMsg<CMsgTrackUniquePlayerPairEvent>
 R typeinfo name for GCSDK::CProtoBufMsg<CMsgUpdateHalloweenMerasmusLootLevel>
 R typeinfo name for GCSDK::CProtoBufMsg<CMsgUpdateItemSchema>
 R typeinfo name for GCSDK::CProtoBufMsgBase
 R typeinfo name for GCSDK::CProtoBufMsgBase::IProtoBufSendHandler
 R typeinfo name for GCSDK::CProtoBufMsgMemoryPool<CGCMsgGC_War_IndividualUpdate>
 R typeinfo name for GCSDK::CProtoBufMsgMemoryPool<CMsgConVarValue>
 R typeinfo name for GCSDK::CProtoBufMsgMemoryPool<CMsgGCQuestObjective_PointsChange>
 R typeinfo name for GCSDK::CProtoBufMsgMemoryPool<CMsgGCRematchRequest>
 R typeinfo name for GCSDK::CProtoBufMsgMemoryPool<CMsgGCRematchRequestResponse>
 R typeinfo name for GCSDK::CProtoBufMsgMemoryPool<CMsgGC_DailyCompetitiveStatsRollup>
 R typeinfo name for GCSDK::CProtoBufMsgMemoryPool<CMsgGC_DailyCompetitiveStatsRollup_Response>
 R typeinfo name for GCSDK::CProtoBufMsgMemoryPool<CMsgGC_GameServer_AuthChallenge>
 R typeinfo name for GCSDK::CProtoBufMsgMemoryPool<CMsgGC_GameServer_AuthChallengeResponse>
 R typeinfo name for GCSDK::CProtoBufMsgMemoryPool<CMsgGC_GameServer_AuthResult>
 R typeinfo name for GCSDK::CProtoBufMsgMemoryPool<CMsgGC_GameServer_LevelInfo>
 R typeinfo name for GCSDK::CProtoBufMsgMemoryPool<CMsgGC_GameServer_ServerModificationItem>
 R typeinfo name for GCSDK::CProtoBufMsgMemoryPool<CMsgGC_GameServer_ServerModificationItemExpired>
 R typeinfo name for GCSDK::CProtoBufMsgMemoryPool<CMsgGC_GameServer_UseServerModificationItem>
 R typeinfo name for GCSDK::CProtoBufMsgMemoryPool<CMsgGC_GameServer_UseServerModificationItem_Response>
 R typeinfo name for GCSDK::CProtoBufMsgMemoryPool<CMsgGC_KickPlayerFromLobby>
 R typeinfo name for GCSDK::CProtoBufMsgMemoryPool<CMsgGC_Match_Result>
 R typeinfo name for GCSDK::CProtoBufMsgMemoryPool<CMsgGC_Match_ResultResponse>
 R typeinfo name for GCSDK::CProtoBufMsgMemoryPool<CMsgGC_TFVoteKickPlayerRequest>
 R typeinfo name for GCSDK::CProtoBufMsgMemoryPool<CMsgGC_VoteKickPlayerRequestResponse>
 R typeinfo name for GCSDK::CProtoBufMsgMemoryPool<CMsgGameServerKickingLobby>
 R typeinfo name for GCSDK::CProtoBufMsgMemoryPool<CMsgGameServerKickingLobbyResponse>
 R typeinfo name for GCSDK::CProtoBufMsgMemoryPool<CMsgGameServerMatchmakingStatus>
 R typeinfo name for GCSDK::CProtoBufMsgMemoryPool<CMsgHalloween_Merasmus2012>
 R typeinfo name for GCSDK::CProtoBufMsgMemoryPool<CMsgIncrementKillCountAttribute>
 R typeinfo name for GCSDK::CProtoBufMsgMemoryPool<CMsgIncrementKillCountAttribute_Multiple>
 R typeinfo name for GCSDK::CProtoBufMsgMemoryPool<CMsgItemAcknowledged>
 R typeinfo name for GCSDK::CProtoBufMsgMemoryPool<CMsgMvMMannUpVictoryReply>
 R typeinfo name for GCSDK::CProtoBufMsgMemoryPool<CMsgMvMVictory>
 R typeinfo name for GCSDK::CProtoBufMsgMemoryPool<CMsgPlayerLeftMatch>
 R typeinfo name for GCSDK::CProtoBufMsgMemoryPool<CMsgPlayerLeftMatchResponse>
 R typeinfo name for GCSDK::CProtoBufMsgMemoryPool<CMsgProtoBufHeader>
 R typeinfo name for GCSDK::CProtoBufMsgMemoryPool<CMsgReplicateConVars>
 R typeinfo name for GCSDK::CProtoBufMsgMemoryPool<CMsgSOCacheSubscribed>
 R typeinfo name for GCSDK::CProtoBufMsgMemoryPool<CMsgSOCacheSubscriptionCheck>
 R typeinfo name for GCSDK::CProtoBufMsgMemoryPool<CMsgSOCacheSubscriptionRefresh>
 R typeinfo name for GCSDK::CProtoBufMsgMemoryPool<CMsgSOCacheUnsubscribed>
 R typeinfo name for GCSDK::CProtoBufMsgMemoryPool<CMsgSOMultipleObjects>
 R typeinfo name for GCSDK::CProtoBufMsgMemoryPool<CMsgSOSingleObject>
 R typeinfo name for GCSDK::CProtoBufMsgMemoryPool<CMsgServerGoodbye>
 R typeinfo name for GCSDK::CProtoBufMsgMemoryPool<CMsgServerHello>
 R typeinfo name for GCSDK::CProtoBufMsgMemoryPool<CMsgServerWelcome>
 R typeinfo name for GCSDK::CProtoBufMsgMemoryPool<CMsgTFCoaching_CoachJoined>
 R typeinfo name for GCSDK::CProtoBufMsgMemoryPool<CMsgTFCoaching_CoachJoining>
 R typeinfo name for GCSDK::CProtoBufMsgMemoryPool<CMsgTFCoaching_RemoveCurrentCoach>
 R typeinfo name for GCSDK::CProtoBufMsgMemoryPool<CMsgTFQuickplay_PlayerJoining>
 R typeinfo name for GCSDK::CProtoBufMsgMemoryPool<CMsgTFVoteKickBanPlayerResult>
 R typeinfo name for GCSDK::CProtoBufMsgMemoryPool<CMsgTrackUniquePlayerPairEvent>
 R typeinfo name for GCSDK::CProtoBufMsgMemoryPool<CMsgUpdateHalloweenMerasmusLootLevel>
 R typeinfo name for GCSDK::CProtoBufMsgMemoryPool<CMsgUpdateItemSchema>
 R typeinfo name for GCSDK::CProtoBufMsgMemoryPoolBase
 R typeinfo name for GCSDK::CProtoBufNetPacket
 R typeinfo name for GCSDK::CProtoBufSharedObject<CSOEconClaimCode, 3>
 R typeinfo name for GCSDK::CProtoBufSharedObject<CSOEconGameAccountForGameServers, 37>
 R typeinfo name for GCSDK::CProtoBufSharedObject<CSOTFDuelSummary, 19>
 R typeinfo name for GCSDK::CProtoBufSharedObject<CSOTFGameServerLobby, 2004>
 R typeinfo name for GCSDK::CProtoBufSharedObject<CSOTFLadderPlayerStats, 39>
 R typeinfo name for GCSDK::CProtoBufSharedObject<CSOTFMapContribution, 28>
 R typeinfo name for GCSDK::CProtoBufSharedObject<CSOTFParty, 2003>
 R typeinfo name for GCSDK::CProtoBufSharedObject<CSOTFPlayerInfo, 2>
 R typeinfo name for GCSDK::CProtoBufSharedObject<CSOWarData, 38>
 R typeinfo name for GCSDK::CProtoBufSharedObjectBase
 R typeinfo name for GCSDK::CRefCount
 R typeinfo name for GCSDK::CSharedObject
 R typeinfo name for GCSDK::CSharedObjectCache
 R typeinfo name for GCSDK::CSharedObjectTypeCache
 R typeinfo name for GCSDK::CStructNetPacket
 R typeinfo name for GCSDK::CWorkThreadPool
 R typeinfo name for GCSDK::IMsgNetPacket
 R typeinfo name for GCSDK::IParty
 R typeinfo name for GCSDK::IPlayerGroup
 R typeinfo name for GCSDK::ISharedObjectListener
 R typeinfo name for GroundLocomotionCollisionTraceFilter
 R typeinfo name for HidingSpot
 R typeinfo name for IAI_MovementSink
 R typeinfo name for IAchievement
 R typeinfo name for IAchievementMgr
 R typeinfo name for IAppSystem
 R typeinfo name for IBaseCacheInfo
 R typeinfo name for IBaseInterface
 R typeinfo name for IBaseObjectAutoList
 R typeinfo name for IBaseProjectileAutoList
 R typeinfo name for IBehaviorBackBridge
 R typeinfo name for IBody
 R typeinfo name for IBonusPackAutoList
 R typeinfo name for IBotController
 R typeinfo name for IBotManager
 R typeinfo name for IBreakableWithPropData
 R typeinfo name for ICaptureFlagAutoList
 R typeinfo name for ICaptureZoneAutoList
 R typeinfo name for IChoreoEventCallback
 R typeinfo name for IChoreoStringPool
 R typeinfo name for ICollideable
 R typeinfo name for ICommandCallback
 R typeinfo name for ICommandCompletionCallback
 R typeinfo name for IConCommandBaseAccessor
 R typeinfo name for IConVar
 R typeinfo name for IContextualQuery
 R typeinfo name for ICurrencyPackAutoList
 R typeinfo name for ICurveDataAccessor
 R typeinfo name for IDecalEmitterSystem
 R typeinfo name for IDelayedSchemaData
 R typeinfo name for IDrivableVehicle
 R typeinfo name for IDroppedWeaponAutoList
 R typeinfo name for IEconItemAttributeIterator
 R typeinfo name for IEconItemInterface
 R typeinfo name for IEconItemUntypedAttributeIterator
 R typeinfo name for IEconLootList
 R typeinfo name for IEconTool
 R typeinfo name for IEffects
 R typeinfo name for IEntityDataInstantiator
 R typeinfo name for IEntityEnumerator
 R typeinfo name for IEntityFactory
 R typeinfo name for IEntityFactoryDictionary
 R typeinfo name for IEntityFindFilter
 R typeinfo name for IEntityListener
 R typeinfo name for IEntitySaveUtils
 R typeinfo name for IEventRegisterCallback
 R typeinfo name for IExtraMapEntityAutoList
 R typeinfo name for IEyeballBossAutoList
 R typeinfo name for IFlagDetectionZoneAutoList
 R typeinfo name for IForEachNavArea
 R typeinfo name for IFuncForceFieldAutoList
 R typeinfo name for IFuncNavPrerequisiteAutoList
 R typeinfo name for IFuncNoBuildAutoList
 R typeinfo name for IFuncPasstimeGoalieZoneAutoList
 R typeinfo name for IFuncPasstimeNoBallZoneAutoList
 R typeinfo name for IFuncPowerupVolumeAutoList
 R typeinfo name for IFuncRespawnRoomAutoList
 R typeinfo name for IFuncRespawnRoomVisualizerAutoList
 R typeinfo name for IGameEventListener2
 R typeinfo name for IGameMovement
 R typeinfo name for IGameSystem
 R typeinfo name for IGameSystemPerFrame
 R typeinfo name for IHLTVDirector
 R typeinfo name for IHalloweenGiftSpawnAutoList
 R typeinfo name for IHandleEntity
 R typeinfo name for IHasAttributes
 R typeinfo name for IHasBuildPoints
 R typeinfo name for IHasOwner
 R typeinfo name for IHealthKitAutoList
 R typeinfo name for IInfoPowerupSpawnAutoList
 R typeinfo name for IIntention
 R typeinfo name for IInventoryUpdateListener
 R typeinfo name for IIsHolidayActive
 R typeinfo name for IKeyValuesDumpContext
 R typeinfo name for IKeyValuesDumpContextAsText
 R typeinfo name for ILagCompensationManager
 R typeinfo name for ILocomotion
 R typeinfo name for IMapEntityFilter
 R typeinfo name for IMatchGroupDescription
 R typeinfo name for IMerasmusAutoList
 R typeinfo name for IMinigameAutoList
 R typeinfo name for IModelLoadCallback
 R typeinfo name for IMotionEvent
 R typeinfo name for IMoveHelper
 R typeinfo name for IMoveHelperServer
 R typeinfo name for IMultiplayerPhysics
 R typeinfo name for INPCPassengerCarrier
 R typeinfo name for INavAvoidanceObstacle
 R typeinfo name for INearestNodeFilter
 R typeinfo name for INextBot
 R typeinfo name for INextBotComponent
 R typeinfo name for INextBotEntityFilter
 R typeinfo name for INextBotEventResponder
 R typeinfo name for INextBotFilter
 R typeinfo name for INextBotPlayerInput
 R typeinfo name for INextBotReply
 R typeinfo name for INodeListFilter
 R typeinfo name for INotify
 R typeinfo name for IParentPropInteraction
 R typeinfo name for IParticleOperatorDefinition
 R typeinfo name for IParticleSystemQuery
 R typeinfo name for IPartitionEnumerator
 R typeinfo name for IPartitionQueryCallback
 R typeinfo name for IPasstimeBallSpawnAutoList
 R typeinfo name for IPathCost
 R typeinfo name for IPhysSaveRestoreManager
 R typeinfo name for IPhysicsCollisionEvent
 R typeinfo name for IPhysicsCollisionSolver
 R typeinfo name for IPhysicsConstraintEvent
 R typeinfo name for IPhysicsGameTrace
 R typeinfo name for IPhysicsObjectEvent
 R typeinfo name for IPhysicsPropAutoList
 R typeinfo name for IPlayerInfo
 R typeinfo name for IPlayerInfoManager
 R typeinfo name for IPlayerPickupVPhysics
 R typeinfo name for IPluginHelpersCheck
 R typeinfo name for IPopulationSpawner
 R typeinfo name for IPopulator
 R typeinfo name for IPositionWatcher
 R typeinfo name for IPredictionSystem
 R typeinfo name for IProgressionDesc
 R typeinfo name for IRecipientFilter
 R typeinfo name for IRefCounted
 R typeinfo name for IResponseFilter
 R typeinfo name for IResponseSystem
 R typeinfo name for IRestore
 R typeinfo name for IRobotDestructionGroupAutoList
 R typeinfo name for IRotorWashShooter
 R typeinfo name for ISave
 R typeinfo name for ISaveRestoreBlockHandler
 R typeinfo name for ISaveRestoreBlockSet
 R typeinfo name for ISaveRestoreOps
 R typeinfo name for ISceneTokenProcessor
 R typeinfo name for ISchemaAttributeType
 R typeinfo name for ISchemaAttributeTypeBase<CAttribute_DynamicRecipeComponent>
 R typeinfo name for ISchemaAttributeTypeBase<CAttribute_ItemSlotCriteria>
 R typeinfo name for ISchemaAttributeTypeBase<CAttribute_String>
 R typeinfo name for ISchemaAttributeTypeBase<CAttribute_WorldItemPlacement>
 R typeinfo name for ISchemaAttributeTypeBase<float>
 R typeinfo name for ISchemaAttributeTypeBase<unsigned int>
 R typeinfo name for ISchemaAttributeTypeBase<unsigned long long>
 R typeinfo name for IScorer
 R typeinfo name for ISearchSurroundingAreasFunctor
 R typeinfo name for IServerBenchmark
 R typeinfo name for IServerChoreoTools
 R typeinfo name for IServerDLLSharedAppSystems
 R typeinfo name for IServerEntity
 R typeinfo name for IServerGCLobby
 R typeinfo name for IServerGameClients
 R typeinfo name for IServerGameDLL
 R typeinfo name for IServerGameEnts
 R typeinfo name for IServerGameTags
 R typeinfo name for IServerNetworkable
 R typeinfo name for IServerReplay
 R typeinfo name for IServerTools
 R typeinfo name for IServerUnknown
 R typeinfo name for IServerVehicle
 R typeinfo name for ITFBotHintEntityAutoList
 R typeinfo name for ITFChargeUpWeapon
 R typeinfo name for ITFFlameEntityAutoList
 R typeinfo name for ITFGenericBomb
 R typeinfo name for ITFMerasmusTrickOrTreatProp
 R typeinfo name for ITFPumpkinBomb
 R typeinfo name for ITFTargetDummy
 R typeinfo name for ITFTeamSpawnAutoList
 R typeinfo name for ITFTeamTrainWatcher
 R typeinfo name for ITFTeleportLocationAutoList
 R typeinfo name for ITempEntsSystem
 R typeinfo name for IToolFrameworkServer
 R typeinfo name for ITraceFilter
 R typeinfo name for ITriggerAreaCaptureAutoList
 R typeinfo name for ITriggerHurtAutoList
 R typeinfo name for ITriggerPlayerRespawnOverride
 R typeinfo name for IVPhysicsKeyHandler
 R typeinfo name for IVPhysicsWatcher
 R typeinfo name for IVehicle
 R typeinfo name for IVision
 R typeinfo name for IVision::IForEachKnownEntity
 R typeinfo name for IVoiceGameMgrHelper
 R typeinfo name for IWatcherCallback
 R typeinfo name for IZombieAutoList
 R typeinfo name for MovieExplosion
 R typeinfo name for NextBotCombatCharacter
 R typeinfo name for NextBotGroundLocomotion
 R typeinfo name for NextBotManager
 R typeinfo name for NextBotPlayer<CTFPlayer>
 R typeinfo name for NextBotTraceFilterIgnoreActors
 R typeinfo name for NextBotTraceFilterOnlyActors
 R typeinfo name for NextBotTraversableTraceFilter
 R typeinfo name for NextBotVisionTraceFilter
 R typeinfo name for ParticleSmokeGrenade
 R typeinfo name for Path
 R typeinfo name for PathFollower
 R typeinfo name for PlaceStickyBombReply
 R typeinfo name for PlayerBody
 R typeinfo name for PlayerLocomotion
 R typeinfo name for PressFireButtonIfValidBuildPositionReply
 R typeinfo name for RocketTrail
 R typeinfo name for SendProp
 R typeinfo name for SmokeTrail
 R typeinfo name for SporeExplosion
 R typeinfo name for SporeTrail
 R typeinfo name for TAutoList<CFuncPasstimeGoal>
 R typeinfo name for TAutoList<CPasstimeBallController>
 R typeinfo name for audioparams_t
 R typeinfo name for base_vector_t
 R typeinfo name for condition_source_t
 R typeinfo name for fogparams_t
 R typeinfo name for fogplayerparams_t
 R typeinfo name for localplayerscoring_t
 R typeinfo name for locksound_t
 R typeinfo name for sky3dparams_t
 R typeinfo name for sky3dparams_t::NetworkVar_fog
 R typeinfo name for std::string
 R typeinfo name for vehicle_crashsound_t
 R typeinfo name for vehicle_gear_t
 R typeinfo name for vehiclesounds_t
 R vec3_angle
 R vec3_invalid
 R vec3_origin
 RandomFloat
 RandomInt
 RandomSeed
 ShouldUseNewAssertDialog
 SteamAPI_GetHSteamPipe
 SteamAPI_GetHSteamUser
 SteamAPI_RegisterCallResult
 SteamAPI_RegisterCallback
 SteamAPI_RunCallbacks
 SteamAPI_UnregisterCallResult
 SteamAPI_UnregisterCallback
 SteamClient
 SteamGameServer_BSecure
 SteamGameServer_GetHSteamPipe
 SteamGameServer_GetHSteamUser
 SteamGameServer_RunCallbacks
 T AIStrongOpt()
 T AI_ClampYaw(float, float, float, float)
 T AI_CriteriaSet::AI_CriteriaSet()
 T AI_CriteriaSet::AppendCriteria(char const*, char const*, float)
 T AI_CriteriaSet::CritEntry_t::LessFunc(AI_CriteriaSet::CritEntry_t const&, AI_CriteriaSet::CritEntry_t const&)
 T AI_CriteriaSet::Describe()
 T AI_CriteriaSet::FindCriterionIndex(char const*) const
 T AI_CriteriaSet::GetValue(int) const
 T AI_CriteriaSet::GetWeight(int) const
 T AI_CriteriaSet::RemoveCriteria(char const*)
 T AI_CriteriaSet::~AI_CriteriaSet()
 T AI_Response::AI_Response()
 T AI_Response::AI_Response(AI_Response const&)
 T AI_Response::Describe()
 T AI_Response::DescribeResponse(ResponseType_t)
 T AI_Response::GetDelay() const
 T AI_Response::GetOdds() const
 T AI_Response::GetPreDelay() const
 T AI_Response::GetRespeakDelay() const
 T AI_Response::GetResponsePtr() const
 T AI_Response::GetSoundLevel() const
 T AI_Response::GetSpeakOnce() const
 T AI_Response::Init(ResponseType_t, char const*, AI_CriteriaSet const&, AI_ResponseParams const&, char const*, char const*, bool)
 T AI_Response::ShouldBreakOnNonIdle() const
 T AI_Response::ShouldntUseScene() const
 T AI_Response::operator=(AI_Response const&)
 T AI_Response::~AI_Response()
 T AI_TraceLOS(Vector const&, Vector const&, CBaseEntity*, CGameTrace*, ITraceFilter*)
 T AI_Waypoint_t::AI_Waypoint_t()
 T AI_Waypoint_t::AI_Waypoint_t(Vector const&, float, Navigation_t, int, int)
 T AI_Waypoint_t::~AI_Waypoint_t()
 T Action<CBotNPCArcher>::ApplyResult(CBotNPCArcher*, Behavior<CBotNPCArcher>*, ActionResult<CBotNPCArcher>)
 T Action<CBotNPCArcher>::BuildDecoratedName(char*, Action<CBotNPCArcher> const*) const
 T Action<CBotNPCArcher>::FirstContainedResponder() const
 T Action<CBotNPCArcher>::GetFullName() const
 T Action<CBotNPCArcher>::InitialContainedAction(CBotNPCArcher*)
 T Action<CBotNPCArcher>::InvokeOnEnd(CBotNPCArcher*, Behavior<CBotNPCArcher>*, Action<CBotNPCArcher>*)
 T Action<CBotNPCArcher>::InvokeOnResume(CBotNPCArcher*, Behavior<CBotNPCArcher>*, Action<CBotNPCArcher>*)
 T Action<CBotNPCArcher>::InvokeOnStart(CBotNPCArcher*, Behavior<CBotNPCArcher>*, Action<CBotNPCArcher>*, Action<CBotNPCArcher>*)
 T Action<CBotNPCArcher>::InvokeOnSuspend(CBotNPCArcher*, Behavior<CBotNPCArcher>*, Action<CBotNPCArcher>*)
 T Action<CBotNPCArcher>::InvokeUpdate(CBotNPCArcher*, Behavior<CBotNPCArcher>*, float)
 T Action<CBotNPCArcher>::IsAbleToBlockMovementOf(INextBot const*) const
 T Action<CBotNPCArcher>::IsNamed(char const*) const
 T Action<CBotNPCArcher>::NextContainedResponder(INextBotEventResponder*) const
 T Action<CBotNPCArcher>::OnActorEmoted(CBaseCombatCharacter*, int)
 T Action<CBotNPCArcher>::OnActorEmoted(CBotNPCArcher*, CBaseCombatCharacter*, int)
 T Action<CBotNPCArcher>::OnAnimationActivityComplete(CBotNPCArcher*, int)
 T Action<CBotNPCArcher>::OnAnimationActivityComplete(int)
 T Action<CBotNPCArcher>::OnAnimationActivityInterrupted(CBotNPCArcher*, int)
 T Action<CBotNPCArcher>::OnAnimationActivityInterrupted(int)
 T Action<CBotNPCArcher>::OnAnimationEvent(CBotNPCArcher*, animevent_t*)
 T Action<CBotNPCArcher>::OnAnimationEvent(animevent_t*)
 T Action<CBotNPCArcher>::OnBlinded(CBaseEntity*)
 T Action<CBotNPCArcher>::OnBlinded(CBotNPCArcher*, CBaseEntity*)
 T Action<CBotNPCArcher>::OnCommandApproach(CBaseEntity*)
 T Action<CBotNPCArcher>::OnCommandApproach(CBotNPCArcher*, CBaseEntity*)
 T Action<CBotNPCArcher>::OnCommandApproach(CBotNPCArcher*, Vector const&, float)
 T Action<CBotNPCArcher>::OnCommandApproach(Vector const&, float)
 T Action<CBotNPCArcher>::OnCommandAttack(CBaseEntity*)
 T Action<CBotNPCArcher>::OnCommandAttack(CBotNPCArcher*, CBaseEntity*)
 T Action<CBotNPCArcher>::OnCommandPause(CBotNPCArcher*, float)
 T Action<CBotNPCArcher>::OnCommandPause(float)
 T Action<CBotNPCArcher>::OnCommandResume()
 T Action<CBotNPCArcher>::OnCommandResume(CBotNPCArcher*)
 T Action<CBotNPCArcher>::OnCommandRetreat(CBaseEntity*, float)
 T Action<CBotNPCArcher>::OnCommandRetreat(CBotNPCArcher*, CBaseEntity*, float)
 T Action<CBotNPCArcher>::OnCommandString(CBotNPCArcher*, char const*)
 T Action<CBotNPCArcher>::OnCommandString(char const*)
 T Action<CBotNPCArcher>::OnContact(CBaseEntity*, CGameTrace*)
 T Action<CBotNPCArcher>::OnContact(CBotNPCArcher*, CBaseEntity*, CGameTrace*)
 T Action<CBotNPCArcher>::OnDrop(CBaseEntity*)
 T Action<CBotNPCArcher>::OnDrop(CBotNPCArcher*, CBaseEntity*)
 T Action<CBotNPCArcher>::OnEnd(CBotNPCArcher*, Action<CBotNPCArcher>*)
 T Action<CBotNPCArcher>::OnIgnite()
 T Action<CBotNPCArcher>::OnIgnite(CBotNPCArcher*)
 T Action<CBotNPCArcher>::OnInjured(CBotNPCArcher*, CTakeDamageInfo const&)
 T Action<CBotNPCArcher>::OnInjured(CTakeDamageInfo const&)
 T Action<CBotNPCArcher>::OnKilled(CBotNPCArcher*, CTakeDamageInfo const&)
 T Action<CBotNPCArcher>::OnKilled(CTakeDamageInfo const&)
 T Action<CBotNPCArcher>::OnLandOnGround(CBaseEntity*)
 T Action<CBotNPCArcher>::OnLandOnGround(CBotNPCArcher*, CBaseEntity*)
 T Action<CBotNPCArcher>::OnLeaveGround(CBaseEntity*)
 T Action<CBotNPCArcher>::OnLeaveGround(CBotNPCArcher*, CBaseEntity*)
 T Action<CBotNPCArcher>::OnLose()
 T Action<CBotNPCArcher>::OnLose(CBotNPCArcher*)
 T Action<CBotNPCArcher>::OnLostSight(CBaseEntity*)
 T Action<CBotNPCArcher>::OnLostSight(CBotNPCArcher*, CBaseEntity*)
 T Action<CBotNPCArcher>::OnModelChanged()
 T Action<CBotNPCArcher>::OnModelChanged(CBotNPCArcher*)
 T Action<CBotNPCArcher>::OnMoveToFailure(CBotNPCArcher*, Path const*, MoveToFailureType)
 T Action<CBotNPCArcher>::OnMoveToFailure(Path const*, MoveToFailureType)
 T Action<CBotNPCArcher>::OnMoveToSuccess(CBotNPCArcher*, Path const*)
 T Action<CBotNPCArcher>::OnMoveToSuccess(Path const*)
 T Action<CBotNPCArcher>::OnNavAreaChanged(CBotNPCArcher*, CNavArea*, CNavArea*)
 T Action<CBotNPCArcher>::OnNavAreaChanged(CNavArea*, CNavArea*)
 T Action<CBotNPCArcher>::OnOtherKilled(CBaseCombatCharacter*, CTakeDamageInfo const&)
 T Action<CBotNPCArcher>::OnOtherKilled(CBotNPCArcher*, CBaseCombatCharacter*, CTakeDamageInfo const&)
 T Action<CBotNPCArcher>::OnPickUp(CBaseEntity*, CBaseCombatCharacter*)
 T Action<CBotNPCArcher>::OnPickUp(CBotNPCArcher*, CBaseEntity*, CBaseCombatCharacter*)
 T Action<CBotNPCArcher>::OnPostureChanged()
 T Action<CBotNPCArcher>::OnPostureChanged(CBotNPCArcher*)
 T Action<CBotNPCArcher>::OnResume(CBotNPCArcher*, Action<CBotNPCArcher>*)
 T Action<CBotNPCArcher>::OnShoved(CBaseEntity*)
 T Action<CBotNPCArcher>::OnShoved(CBotNPCArcher*, CBaseEntity*)
 T Action<CBotNPCArcher>::OnSight(CBaseEntity*)
 T Action<CBotNPCArcher>::OnSight(CBotNPCArcher*, CBaseEntity*)
 T Action<CBotNPCArcher>::OnSound(CBaseEntity*, Vector const&, KeyValues*)
 T Action<CBotNPCArcher>::OnSound(CBotNPCArcher*, CBaseEntity*, Vector const&, KeyValues*)
 T Action<CBotNPCArcher>::OnSpokeConcept(CBaseCombatCharacter*, char const*, AI_Response*)
 T Action<CBotNPCArcher>::OnSpokeConcept(CBotNPCArcher*, CBaseCombatCharacter*, char const*, AI_Response*)
 T Action<CBotNPCArcher>::OnStart(CBotNPCArcher*, Action<CBotNPCArcher>*)
 T Action<CBotNPCArcher>::OnStuck()
 T Action<CBotNPCArcher>::OnStuck(CBotNPCArcher*)
 T Action<CBotNPCArcher>::OnSuspend(CBotNPCArcher*, Action<CBotNPCArcher>*)
 T Action<CBotNPCArcher>::OnTerritoryCaptured(CBotNPCArcher*, int)
 T Action<CBotNPCArcher>::OnTerritoryCaptured(int)
 T Action<CBotNPCArcher>::OnTerritoryContested(CBotNPCArcher*, int)
 T Action<CBotNPCArcher>::OnTerritoryContested(int)
 T Action<CBotNPCArcher>::OnTerritoryLost(CBotNPCArcher*, int)
 T Action<CBotNPCArcher>::OnTerritoryLost(int)
 T Action<CBotNPCArcher>::OnUnStuck()
 T Action<CBotNPCArcher>::OnUnStuck(CBotNPCArcher*)
 T Action<CBotNPCArcher>::OnWeaponFired(CBaseCombatCharacter*, CBaseCombatWeapon*)
 T Action<CBotNPCArcher>::OnWeaponFired(CBotNPCArcher*, CBaseCombatCharacter*, CBaseCombatWeapon*)
 T Action<CBotNPCArcher>::OnWin()
 T Action<CBotNPCArcher>::OnWin(CBotNPCArcher*)
 T Action<CBotNPCArcher>::PrintStateToConsole() const
 T Action<CBotNPCArcher>::Update(CBotNPCArcher*, float)
 T Action<CBotNPCArcher>::~Action()
 T Action<CBotNPCDecoy>::ApplyResult(CBotNPCDecoy*, Behavior<CBotNPCDecoy>*, ActionResult<CBotNPCDecoy>)
 T Action<CBotNPCDecoy>::BuildDecoratedName(char*, Action<CBotNPCDecoy> const*) const
 T Action<CBotNPCDecoy>::FirstContainedResponder() const
 T Action<CBotNPCDecoy>::GetFullName() const
 T Action<CBotNPCDecoy>::InitialContainedAction(CBotNPCDecoy*)
 T Action<CBotNPCDecoy>::InvokeOnEnd(CBotNPCDecoy*, Behavior<CBotNPCDecoy>*, Action<CBotNPCDecoy>*)
 T Action<CBotNPCDecoy>::InvokeOnResume(CBotNPCDecoy*, Behavior<CBotNPCDecoy>*, Action<CBotNPCDecoy>*)
 T Action<CBotNPCDecoy>::InvokeOnStart(CBotNPCDecoy*, Behavior<CBotNPCDecoy>*, Action<CBotNPCDecoy>*, Action<CBotNPCDecoy>*)
 T Action<CBotNPCDecoy>::InvokeOnSuspend(CBotNPCDecoy*, Behavior<CBotNPCDecoy>*, Action<CBotNPCDecoy>*)
 T Action<CBotNPCDecoy>::InvokeUpdate(CBotNPCDecoy*, Behavior<CBotNPCDecoy>*, float)
 T Action<CBotNPCDecoy>::IsAbleToBlockMovementOf(INextBot const*) const
 T Action<CBotNPCDecoy>::IsNamed(char const*) const
 T Action<CBotNPCDecoy>::NextContainedResponder(INextBotEventResponder*) const
 T Action<CBotNPCDecoy>::OnActorEmoted(CBaseCombatCharacter*, int)
 T Action<CBotNPCDecoy>::OnActorEmoted(CBotNPCDecoy*, CBaseCombatCharacter*, int)
 T Action<CBotNPCDecoy>::OnAnimationActivityComplete(CBotNPCDecoy*, int)
 T Action<CBotNPCDecoy>::OnAnimationActivityComplete(int)
 T Action<CBotNPCDecoy>::OnAnimationActivityInterrupted(CBotNPCDecoy*, int)
 T Action<CBotNPCDecoy>::OnAnimationActivityInterrupted(int)
 T Action<CBotNPCDecoy>::OnAnimationEvent(CBotNPCDecoy*, animevent_t*)
 T Action<CBotNPCDecoy>::OnAnimationEvent(animevent_t*)
 T Action<CBotNPCDecoy>::OnBlinded(CBaseEntity*)
 T Action<CBotNPCDecoy>::OnBlinded(CBotNPCDecoy*, CBaseEntity*)
 T Action<CBotNPCDecoy>::OnCommandApproach(CBaseEntity*)
 T Action<CBotNPCDecoy>::OnCommandApproach(CBotNPCDecoy*, CBaseEntity*)
 T Action<CBotNPCDecoy>::OnCommandApproach(CBotNPCDecoy*, Vector const&, float)
 T Action<CBotNPCDecoy>::OnCommandApproach(Vector const&, float)
 T Action<CBotNPCDecoy>::OnCommandAttack(CBaseEntity*)
 T Action<CBotNPCDecoy>::OnCommandAttack(CBotNPCDecoy*, CBaseEntity*)
 T Action<CBotNPCDecoy>::OnCommandPause(CBotNPCDecoy*, float)
 T Action<CBotNPCDecoy>::OnCommandPause(float)
 T Action<CBotNPCDecoy>::OnCommandResume()
 T Action<CBotNPCDecoy>::OnCommandResume(CBotNPCDecoy*)
 T Action<CBotNPCDecoy>::OnCommandRetreat(CBaseEntity*, float)
 T Action<CBotNPCDecoy>::OnCommandRetreat(CBotNPCDecoy*, CBaseEntity*, float)
 T Action<CBotNPCDecoy>::OnCommandString(CBotNPCDecoy*, char const*)
 T Action<CBotNPCDecoy>::OnCommandString(char const*)
 T Action<CBotNPCDecoy>::OnContact(CBaseEntity*, CGameTrace*)
 T Action<CBotNPCDecoy>::OnContact(CBotNPCDecoy*, CBaseEntity*, CGameTrace*)
 T Action<CBotNPCDecoy>::OnDrop(CBaseEntity*)
 T Action<CBotNPCDecoy>::OnDrop(CBotNPCDecoy*, CBaseEntity*)
 T Action<CBotNPCDecoy>::OnEnd(CBotNPCDecoy*, Action<CBotNPCDecoy>*)
 T Action<CBotNPCDecoy>::OnIgnite()
 T Action<CBotNPCDecoy>::OnIgnite(CBotNPCDecoy*)
 T Action<CBotNPCDecoy>::OnInjured(CBotNPCDecoy*, CTakeDamageInfo const&)
 T Action<CBotNPCDecoy>::OnInjured(CTakeDamageInfo const&)
 T Action<CBotNPCDecoy>::OnKilled(CBotNPCDecoy*, CTakeDamageInfo const&)
 T Action<CBotNPCDecoy>::OnKilled(CTakeDamageInfo const&)
 T Action<CBotNPCDecoy>::OnLandOnGround(CBaseEntity*)
 T Action<CBotNPCDecoy>::OnLandOnGround(CBotNPCDecoy*, CBaseEntity*)
 T Action<CBotNPCDecoy>::OnLeaveGround(CBaseEntity*)
 T Action<CBotNPCDecoy>::OnLeaveGround(CBotNPCDecoy*, CBaseEntity*)
 T Action<CBotNPCDecoy>::OnLose()
 T Action<CBotNPCDecoy>::OnLose(CBotNPCDecoy*)
 T Action<CBotNPCDecoy>::OnLostSight(CBaseEntity*)
 T Action<CBotNPCDecoy>::OnLostSight(CBotNPCDecoy*, CBaseEntity*)
 T Action<CBotNPCDecoy>::OnModelChanged()
 T Action<CBotNPCDecoy>::OnModelChanged(CBotNPCDecoy*)
 T Action<CBotNPCDecoy>::OnMoveToFailure(CBotNPCDecoy*, Path const*, MoveToFailureType)
 T Action<CBotNPCDecoy>::OnMoveToFailure(Path const*, MoveToFailureType)
 T Action<CBotNPCDecoy>::OnMoveToSuccess(CBotNPCDecoy*, Path const*)
 T Action<CBotNPCDecoy>::OnMoveToSuccess(Path const*)
 T Action<CBotNPCDecoy>::OnNavAreaChanged(CBotNPCDecoy*, CNavArea*, CNavArea*)
 T Action<CBotNPCDecoy>::OnNavAreaChanged(CNavArea*, CNavArea*)
 T Action<CBotNPCDecoy>::OnOtherKilled(CBaseCombatCharacter*, CTakeDamageInfo const&)
 T Action<CBotNPCDecoy>::OnOtherKilled(CBotNPCDecoy*, CBaseCombatCharacter*, CTakeDamageInfo const&)
 T Action<CBotNPCDecoy>::OnPickUp(CBaseEntity*, CBaseCombatCharacter*)
 T Action<CBotNPCDecoy>::OnPickUp(CBotNPCDecoy*, CBaseEntity*, CBaseCombatCharacter*)
 T Action<CBotNPCDecoy>::OnPostureChanged()
 T Action<CBotNPCDecoy>::OnPostureChanged(CBotNPCDecoy*)
 T Action<CBotNPCDecoy>::OnResume(CBotNPCDecoy*, Action<CBotNPCDecoy>*)
 T Action<CBotNPCDecoy>::OnShoved(CBaseEntity*)
 T Action<CBotNPCDecoy>::OnShoved(CBotNPCDecoy*, CBaseEntity*)
 T Action<CBotNPCDecoy>::OnSight(CBaseEntity*)
 T Action<CBotNPCDecoy>::OnSight(CBotNPCDecoy*, CBaseEntity*)
 T Action<CBotNPCDecoy>::OnSound(CBaseEntity*, Vector const&, KeyValues*)
 T Action<CBotNPCDecoy>::OnSound(CBotNPCDecoy*, CBaseEntity*, Vector const&, KeyValues*)
 T Action<CBotNPCDecoy>::OnSpokeConcept(CBaseCombatCharacter*, char const*, AI_Response*)
 T Action<CBotNPCDecoy>::OnSpokeConcept(CBotNPCDecoy*, CBaseCombatCharacter*, char const*, AI_Response*)
 T Action<CBotNPCDecoy>::OnStart(CBotNPCDecoy*, Action<CBotNPCDecoy>*)
 T Action<CBotNPCDecoy>::OnStuck()
 T Action<CBotNPCDecoy>::OnStuck(CBotNPCDecoy*)
 T Action<CBotNPCDecoy>::OnSuspend(CBotNPCDecoy*, Action<CBotNPCDecoy>*)
 T Action<CBotNPCDecoy>::OnTerritoryCaptured(CBotNPCDecoy*, int)
 T Action<CBotNPCDecoy>::OnTerritoryCaptured(int)
 T Action<CBotNPCDecoy>::OnTerritoryContested(CBotNPCDecoy*, int)
 T Action<CBotNPCDecoy>::OnTerritoryContested(int)
 T Action<CBotNPCDecoy>::OnTerritoryLost(CBotNPCDecoy*, int)
 T Action<CBotNPCDecoy>::OnTerritoryLost(int)
 T Action<CBotNPCDecoy>::OnUnStuck()
 T Action<CBotNPCDecoy>::OnUnStuck(CBotNPCDecoy*)
 T Action<CBotNPCDecoy>::OnWeaponFired(CBaseCombatCharacter*, CBaseCombatWeapon*)
 T Action<CBotNPCDecoy>::OnWeaponFired(CBotNPCDecoy*, CBaseCombatCharacter*, CBaseCombatWeapon*)
 T Action<CBotNPCDecoy>::OnWin()
 T Action<CBotNPCDecoy>::OnWin(CBotNPCDecoy*)
 T Action<CBotNPCDecoy>::PrintStateToConsole() const
 T Action<CBotNPCDecoy>::Update(CBotNPCDecoy*, float)
 T Action<CBotNPCDecoy>::~Action()
 T Action<CEyeballBoss>::ApplyResult(CEyeballBoss*, Behavior<CEyeballBoss>*, ActionResult<CEyeballBoss>)
 T Action<CEyeballBoss>::BuildDecoratedName(char*, Action<CEyeballBoss> const*) const
 T Action<CEyeballBoss>::FirstContainedResponder() const
 T Action<CEyeballBoss>::GetFullName() const
 T Action<CEyeballBoss>::InitialContainedAction(CEyeballBoss*)
 T Action<CEyeballBoss>::InvokeOnEnd(CEyeballBoss*, Behavior<CEyeballBoss>*, Action<CEyeballBoss>*)
 T Action<CEyeballBoss>::InvokeOnResume(CEyeballBoss*, Behavior<CEyeballBoss>*, Action<CEyeballBoss>*)
 T Action<CEyeballBoss>::InvokeOnStart(CEyeballBoss*, Behavior<CEyeballBoss>*, Action<CEyeballBoss>*, Action<CEyeballBoss>*)
 T Action<CEyeballBoss>::InvokeOnSuspend(CEyeballBoss*, Behavior<CEyeballBoss>*, Action<CEyeballBoss>*)
 T Action<CEyeballBoss>::InvokeUpdate(CEyeballBoss*, Behavior<CEyeballBoss>*, float)
 T Action<CEyeballBoss>::IsAbleToBlockMovementOf(INextBot const*) const
 T Action<CEyeballBoss>::IsNamed(char const*) const
 T Action<CEyeballBoss>::NextContainedResponder(INextBotEventResponder*) const
 T Action<CEyeballBoss>::OnActorEmoted(CBaseCombatCharacter*, int)
 T Action<CEyeballBoss>::OnActorEmoted(CEyeballBoss*, CBaseCombatCharacter*, int)
 T Action<CEyeballBoss>::OnAnimationActivityComplete(CEyeballBoss*, int)
 T Action<CEyeballBoss>::OnAnimationActivityComplete(int)
 T Action<CEyeballBoss>::OnAnimationActivityInterrupted(CEyeballBoss*, int)
 T Action<CEyeballBoss>::OnAnimationActivityInterrupted(int)
 T Action<CEyeballBoss>::OnAnimationEvent(CEyeballBoss*, animevent_t*)
 T Action<CEyeballBoss>::OnAnimationEvent(animevent_t*)
 T Action<CEyeballBoss>::OnBlinded(CBaseEntity*)
 T Action<CEyeballBoss>::OnBlinded(CEyeballBoss*, CBaseEntity*)
 T Action<CEyeballBoss>::OnCommandApproach(CBaseEntity*)
 T Action<CEyeballBoss>::OnCommandApproach(CEyeballBoss*, CBaseEntity*)
 T Action<CEyeballBoss>::OnCommandApproach(CEyeballBoss*, Vector const&, float)
 T Action<CEyeballBoss>::OnCommandApproach(Vector const&, float)
 T Action<CEyeballBoss>::OnCommandAttack(CBaseEntity*)
 T Action<CEyeballBoss>::OnCommandAttack(CEyeballBoss*, CBaseEntity*)
 T Action<CEyeballBoss>::OnCommandPause(CEyeballBoss*, float)
 T Action<CEyeballBoss>::OnCommandPause(float)
 T Action<CEyeballBoss>::OnCommandResume()
 T Action<CEyeballBoss>::OnCommandResume(CEyeballBoss*)
 T Action<CEyeballBoss>::OnCommandRetreat(CBaseEntity*, float)
 T Action<CEyeballBoss>::OnCommandRetreat(CEyeballBoss*, CBaseEntity*, float)
 T Action<CEyeballBoss>::OnCommandString(CEyeballBoss*, char const*)
 T Action<CEyeballBoss>::OnCommandString(char const*)
 T Action<CEyeballBoss>::OnContact(CBaseEntity*, CGameTrace*)
 T Action<CEyeballBoss>::OnContact(CEyeballBoss*, CBaseEntity*, CGameTrace*)
 T Action<CEyeballBoss>::OnDrop(CBaseEntity*)
 T Action<CEyeballBoss>::OnDrop(CEyeballBoss*, CBaseEntity*)
 T Action<CEyeballBoss>::OnEnd(CEyeballBoss*, Action<CEyeballBoss>*)
 T Action<CEyeballBoss>::OnIgnite()
 T Action<CEyeballBoss>::OnIgnite(CEyeballBoss*)
 T Action<CEyeballBoss>::OnInjured(CEyeballBoss*, CTakeDamageInfo const&)
 T Action<CEyeballBoss>::OnInjured(CTakeDamageInfo const&)
 T Action<CEyeballBoss>::OnKilled(CEyeballBoss*, CTakeDamageInfo const&)
 T Action<CEyeballBoss>::OnKilled(CTakeDamageInfo const&)
 T Action<CEyeballBoss>::OnLandOnGround(CBaseEntity*)
 T Action<CEyeballBoss>::OnLandOnGround(CEyeballBoss*, CBaseEntity*)
 T Action<CEyeballBoss>::OnLeaveGround(CBaseEntity*)
 T Action<CEyeballBoss>::OnLeaveGround(CEyeballBoss*, CBaseEntity*)
 T Action<CEyeballBoss>::OnLose()
 T Action<CEyeballBoss>::OnLose(CEyeballBoss*)
 T Action<CEyeballBoss>::OnLostSight(CBaseEntity*)
 T Action<CEyeballBoss>::OnLostSight(CEyeballBoss*, CBaseEntity*)
 T Action<CEyeballBoss>::OnModelChanged()
 T Action<CEyeballBoss>::OnModelChanged(CEyeballBoss*)
 T Action<CEyeballBoss>::OnMoveToFailure(CEyeballBoss*, Path const*, MoveToFailureType)
 T Action<CEyeballBoss>::OnMoveToFailure(Path const*, MoveToFailureType)
 T Action<CEyeballBoss>::OnMoveToSuccess(CEyeballBoss*, Path const*)
 T Action<CEyeballBoss>::OnMoveToSuccess(Path const*)
 T Action<CEyeballBoss>::OnNavAreaChanged(CEyeballBoss*, CNavArea*, CNavArea*)
 T Action<CEyeballBoss>::OnNavAreaChanged(CNavArea*, CNavArea*)
 T Action<CEyeballBoss>::OnOtherKilled(CBaseCombatCharacter*, CTakeDamageInfo const&)
 T Action<CEyeballBoss>::OnOtherKilled(CEyeballBoss*, CBaseCombatCharacter*, CTakeDamageInfo const&)
 T Action<CEyeballBoss>::OnPickUp(CBaseEntity*, CBaseCombatCharacter*)
 T Action<CEyeballBoss>::OnPickUp(CEyeballBoss*, CBaseEntity*, CBaseCombatCharacter*)
 T Action<CEyeballBoss>::OnPostureChanged()
 T Action<CEyeballBoss>::OnPostureChanged(CEyeballBoss*)
 T Action<CEyeballBoss>::OnResume(CEyeballBoss*, Action<CEyeballBoss>*)
 T Action<CEyeballBoss>::OnShoved(CBaseEntity*)
 T Action<CEyeballBoss>::OnShoved(CEyeballBoss*, CBaseEntity*)
 T Action<CEyeballBoss>::OnSight(CBaseEntity*)
 T Action<CEyeballBoss>::OnSight(CEyeballBoss*, CBaseEntity*)
 T Action<CEyeballBoss>::OnSound(CBaseEntity*, Vector const&, KeyValues*)
 T Action<CEyeballBoss>::OnSound(CEyeballBoss*, CBaseEntity*, Vector const&, KeyValues*)
 T Action<CEyeballBoss>::OnSpokeConcept(CBaseCombatCharacter*, char const*, AI_Response*)
 T Action<CEyeballBoss>::OnSpokeConcept(CEyeballBoss*, CBaseCombatCharacter*, char const*, AI_Response*)
 T Action<CEyeballBoss>::OnStart(CEyeballBoss*, Action<CEyeballBoss>*)
 T Action<CEyeballBoss>::OnStuck()
 T Action<CEyeballBoss>::OnStuck(CEyeballBoss*)
 T Action<CEyeballBoss>::OnSuspend(CEyeballBoss*, Action<CEyeballBoss>*)
 T Action<CEyeballBoss>::OnTerritoryCaptured(CEyeballBoss*, int)
 T Action<CEyeballBoss>::OnTerritoryCaptured(int)
 T Action<CEyeballBoss>::OnTerritoryContested(CEyeballBoss*, int)
 T Action<CEyeballBoss>::OnTerritoryContested(int)
 T Action<CEyeballBoss>::OnTerritoryLost(CEyeballBoss*, int)
 T Action<CEyeballBoss>::OnTerritoryLost(int)
 T Action<CEyeballBoss>::OnUnStuck()
 T Action<CEyeballBoss>::OnUnStuck(CEyeballBoss*)
 T Action<CEyeballBoss>::OnWeaponFired(CBaseCombatCharacter*, CBaseCombatWeapon*)
 T Action<CEyeballBoss>::OnWeaponFired(CEyeballBoss*, CBaseCombatCharacter*, CBaseCombatWeapon*)
 T Action<CEyeballBoss>::OnWin()
 T Action<CEyeballBoss>::OnWin(CEyeballBoss*)
 T Action<CEyeballBoss>::PrintStateToConsole() const
 T Action<CEyeballBoss>::Update(CEyeballBoss*, float)
 T Action<CEyeballBoss>::~Action()
 T Action<CGhost>::ApplyResult(CGhost*, Behavior<CGhost>*, ActionResult<CGhost>)
 T Action<CGhost>::BuildDecoratedName(char*, Action<CGhost> const*) const
 T Action<CGhost>::FirstContainedResponder() const
 T Action<CGhost>::GetFullName() const
 T Action<CGhost>::InitialContainedAction(CGhost*)
 T Action<CGhost>::InvokeOnEnd(CGhost*, Behavior<CGhost>*, Action<CGhost>*)
 T Action<CGhost>::InvokeOnResume(CGhost*, Behavior<CGhost>*, Action<CGhost>*)
 T Action<CGhost>::InvokeOnStart(CGhost*, Behavior<CGhost>*, Action<CGhost>*, Action<CGhost>*)
 T Action<CGhost>::InvokeOnSuspend(CGhost*, Behavior<CGhost>*, Action<CGhost>*)
 T Action<CGhost>::InvokeUpdate(CGhost*, Behavior<CGhost>*, float)
 T Action<CGhost>::IsAbleToBlockMovementOf(INextBot const*) const
 T Action<CGhost>::IsNamed(char const*) const
 T Action<CGhost>::NextContainedResponder(INextBotEventResponder*) const
 T Action<CGhost>::OnActorEmoted(CBaseCombatCharacter*, int)
 T Action<CGhost>::OnActorEmoted(CGhost*, CBaseCombatCharacter*, int)
 T Action<CGhost>::OnAnimationActivityComplete(CGhost*, int)
 T Action<CGhost>::OnAnimationActivityComplete(int)
 T Action<CGhost>::OnAnimationActivityInterrupted(CGhost*, int)
 T Action<CGhost>::OnAnimationActivityInterrupted(int)
 T Action<CGhost>::OnAnimationEvent(CGhost*, animevent_t*)
 T Action<CGhost>::OnAnimationEvent(animevent_t*)
 T Action<CGhost>::OnBlinded(CBaseEntity*)
 T Action<CGhost>::OnBlinded(CGhost*, CBaseEntity*)
 T Action<CGhost>::OnCommandApproach(CBaseEntity*)
 T Action<CGhost>::OnCommandApproach(CGhost*, CBaseEntity*)
 T Action<CGhost>::OnCommandApproach(CGhost*, Vector const&, float)
 T Action<CGhost>::OnCommandApproach(Vector const&, float)
 T Action<CGhost>::OnCommandAttack(CBaseEntity*)
 T Action<CGhost>::OnCommandAttack(CGhost*, CBaseEntity*)
 T Action<CGhost>::OnCommandPause(CGhost*, float)
 T Action<CGhost>::OnCommandPause(float)
 T Action<CGhost>::OnCommandResume()
 T Action<CGhost>::OnCommandResume(CGhost*)
 T Action<CGhost>::OnCommandRetreat(CBaseEntity*, float)
 T Action<CGhost>::OnCommandRetreat(CGhost*, CBaseEntity*, float)
 T Action<CGhost>::OnCommandString(CGhost*, char const*)
 T Action<CGhost>::OnCommandString(char const*)
 T Action<CGhost>::OnContact(CBaseEntity*, CGameTrace*)
 T Action<CGhost>::OnContact(CGhost*, CBaseEntity*, CGameTrace*)
 T Action<CGhost>::OnDrop(CBaseEntity*)
 T Action<CGhost>::OnDrop(CGhost*, CBaseEntity*)
 T Action<CGhost>::OnEnd(CGhost*, Action<CGhost>*)
 T Action<CGhost>::OnIgnite()
 T Action<CGhost>::OnIgnite(CGhost*)
 T Action<CGhost>::OnInjured(CGhost*, CTakeDamageInfo const&)
 T Action<CGhost>::OnInjured(CTakeDamageInfo const&)
 T Action<CGhost>::OnKilled(CGhost*, CTakeDamageInfo const&)
 T Action<CGhost>::OnKilled(CTakeDamageInfo const&)
 T Action<CGhost>::OnLandOnGround(CBaseEntity*)
 T Action<CGhost>::OnLandOnGround(CGhost*, CBaseEntity*)
 T Action<CGhost>::OnLeaveGround(CBaseEntity*)
 T Action<CGhost>::OnLeaveGround(CGhost*, CBaseEntity*)
 T Action<CGhost>::OnLose()
 T Action<CGhost>::OnLose(CGhost*)
 T Action<CGhost>::OnLostSight(CBaseEntity*)
 T Action<CGhost>::OnLostSight(CGhost*, CBaseEntity*)
 T Action<CGhost>::OnModelChanged()
 T Action<CGhost>::OnModelChanged(CGhost*)
 T Action<CGhost>::OnMoveToFailure(CGhost*, Path const*, MoveToFailureType)
 T Action<CGhost>::OnMoveToFailure(Path const*, MoveToFailureType)
 T Action<CGhost>::OnMoveToSuccess(CGhost*, Path const*)
 T Action<CGhost>::OnMoveToSuccess(Path const*)
 T Action<CGhost>::OnNavAreaChanged(CGhost*, CNavArea*, CNavArea*)
 T Action<CGhost>::OnNavAreaChanged(CNavArea*, CNavArea*)
 T Action<CGhost>::OnOtherKilled(CBaseCombatCharacter*, CTakeDamageInfo const&)
 T Action<CGhost>::OnOtherKilled(CGhost*, CBaseCombatCharacter*, CTakeDamageInfo const&)
 T Action<CGhost>::OnPickUp(CBaseEntity*, CBaseCombatCharacter*)
 T Action<CGhost>::OnPickUp(CGhost*, CBaseEntity*, CBaseCombatCharacter*)
 T Action<CGhost>::OnPostureChanged()
 T Action<CGhost>::OnPostureChanged(CGhost*)
 T Action<CGhost>::OnResume(CGhost*, Action<CGhost>*)
 T Action<CGhost>::OnShoved(CBaseEntity*)
 T Action<CGhost>::OnShoved(CGhost*, CBaseEntity*)
 T Action<CGhost>::OnSight(CBaseEntity*)
 T Action<CGhost>::OnSight(CGhost*, CBaseEntity*)
 T Action<CGhost>::OnSound(CBaseEntity*, Vector const&, KeyValues*)
 T Action<CGhost>::OnSound(CGhost*, CBaseEntity*, Vector const&, KeyValues*)
 T Action<CGhost>::OnSpokeConcept(CBaseCombatCharacter*, char const*, AI_Response*)
 T Action<CGhost>::OnSpokeConcept(CGhost*, CBaseCombatCharacter*, char const*, AI_Response*)
 T Action<CGhost>::OnStart(CGhost*, Action<CGhost>*)
 T Action<CGhost>::OnStuck()
 T Action<CGhost>::OnStuck(CGhost*)
 T Action<CGhost>::OnSuspend(CGhost*, Action<CGhost>*)
 T Action<CGhost>::OnTerritoryCaptured(CGhost*, int)
 T Action<CGhost>::OnTerritoryCaptured(int)
 T Action<CGhost>::OnTerritoryContested(CGhost*, int)
 T Action<CGhost>::OnTerritoryContested(int)
 T Action<CGhost>::OnTerritoryLost(CGhost*, int)
 T Action<CGhost>::OnTerritoryLost(int)
 T Action<CGhost>::OnUnStuck()
 T Action<CGhost>::OnUnStuck(CGhost*)
 T Action<CGhost>::OnWeaponFired(CBaseCombatCharacter*, CBaseCombatWeapon*)
 T Action<CGhost>::OnWeaponFired(CGhost*, CBaseCombatCharacter*, CBaseCombatWeapon*)
 T Action<CGhost>::OnWin()
 T Action<CGhost>::OnWin(CGhost*)
 T Action<CGhost>::PrintStateToConsole() const
 T Action<CGhost>::Update(CGhost*, float)
 T Action<CGhost>::~Action()
 T Action<CHeadlessHatman>::ApplyResult(CHeadlessHatman*, Behavior<CHeadlessHatman>*, ActionResult<CHeadlessHatman>)
 T Action<CHeadlessHatman>::BuildDecoratedName(char*, Action<CHeadlessHatman> const*) const
 T Action<CHeadlessHatman>::FirstContainedResponder() const
 T Action<CHeadlessHatman>::GetFullName() const
 T Action<CHeadlessHatman>::InitialContainedAction(CHeadlessHatman*)
 T Action<CHeadlessHatman>::InvokeOnEnd(CHeadlessHatman*, Behavior<CHeadlessHatman>*, Action<CHeadlessHatman>*)
 T Action<CHeadlessHatman>::InvokeOnResume(CHeadlessHatman*, Behavior<CHeadlessHatman>*, Action<CHeadlessHatman>*)
 T Action<CHeadlessHatman>::InvokeOnStart(CHeadlessHatman*, Behavior<CHeadlessHatman>*, Action<CHeadlessHatman>*, Action<CHeadlessHatman>*)
 T Action<CHeadlessHatman>::InvokeOnSuspend(CHeadlessHatman*, Behavior<CHeadlessHatman>*, Action<CHeadlessHatman>*)
 T Action<CHeadlessHatman>::InvokeUpdate(CHeadlessHatman*, Behavior<CHeadlessHatman>*, float)
 T Action<CHeadlessHatman>::IsAbleToBlockMovementOf(INextBot const*) const
 T Action<CHeadlessHatman>::IsNamed(char const*) const
 T Action<CHeadlessHatman>::NextContainedResponder(INextBotEventResponder*) const
 T Action<CHeadlessHatman>::OnActorEmoted(CBaseCombatCharacter*, int)
 T Action<CHeadlessHatman>::OnActorEmoted(CHeadlessHatman*, CBaseCombatCharacter*, int)
 T Action<CHeadlessHatman>::OnAnimationActivityComplete(CHeadlessHatman*, int)
 T Action<CHeadlessHatman>::OnAnimationActivityComplete(int)
 T Action<CHeadlessHatman>::OnAnimationActivityInterrupted(CHeadlessHatman*, int)
 T Action<CHeadlessHatman>::OnAnimationActivityInterrupted(int)
 T Action<CHeadlessHatman>::OnAnimationEvent(CHeadlessHatman*, animevent_t*)
 T Action<CHeadlessHatman>::OnAnimationEvent(animevent_t*)
 T Action<CHeadlessHatman>::OnBlinded(CBaseEntity*)
 T Action<CHeadlessHatman>::OnBlinded(CHeadlessHatman*, CBaseEntity*)
 T Action<CHeadlessHatman>::OnCommandApproach(CBaseEntity*)
 T Action<CHeadlessHatman>::OnCommandApproach(CHeadlessHatman*, CBaseEntity*)
 T Action<CHeadlessHatman>::OnCommandApproach(CHeadlessHatman*, Vector const&, float)
 T Action<CHeadlessHatman>::OnCommandApproach(Vector const&, float)
 T Action<CHeadlessHatman>::OnCommandAttack(CBaseEntity*)
 T Action<CHeadlessHatman>::OnCommandAttack(CHeadlessHatman*, CBaseEntity*)
 T Action<CHeadlessHatman>::OnCommandPause(CHeadlessHatman*, float)
 T Action<CHeadlessHatman>::OnCommandPause(float)
 T Action<CHeadlessHatman>::OnCommandResume()
 T Action<CHeadlessHatman>::OnCommandResume(CHeadlessHatman*)
 T Action<CHeadlessHatman>::OnCommandRetreat(CBaseEntity*, float)
 T Action<CHeadlessHatman>::OnCommandRetreat(CHeadlessHatman*, CBaseEntity*, float)
 T Action<CHeadlessHatman>::OnCommandString(CHeadlessHatman*, char const*)
 T Action<CHeadlessHatman>::OnCommandString(char const*)
 T Action<CHeadlessHatman>::OnContact(CBaseEntity*, CGameTrace*)
 T Action<CHeadlessHatman>::OnContact(CHeadlessHatman*, CBaseEntity*, CGameTrace*)
 T Action<CHeadlessHatman>::OnDrop(CBaseEntity*)
 T Action<CHeadlessHatman>::OnDrop(CHeadlessHatman*, CBaseEntity*)
 T Action<CHeadlessHatman>::OnEnd(CHeadlessHatman*, Action<CHeadlessHatman>*)
 T Action<CHeadlessHatman>::OnIgnite()
 T Action<CHeadlessHatman>::OnIgnite(CHeadlessHatman*)
 T Action<CHeadlessHatman>::OnInjured(CHeadlessHatman*, CTakeDamageInfo const&)
 T Action<CHeadlessHatman>::OnInjured(CTakeDamageInfo const&)
 T Action<CHeadlessHatman>::OnKilled(CHeadlessHatman*, CTakeDamageInfo const&)
 T Action<CHeadlessHatman>::OnKilled(CTakeDamageInfo const&)
 T Action<CHeadlessHatman>::OnLandOnGround(CBaseEntity*)
 T Action<CHeadlessHatman>::OnLandOnGround(CHeadlessHatman*, CBaseEntity*)
 T Action<CHeadlessHatman>::OnLeaveGround(CBaseEntity*)
 T Action<CHeadlessHatman>::OnLeaveGround(CHeadlessHatman*, CBaseEntity*)
 T Action<CHeadlessHatman>::OnLose()
 T Action<CHeadlessHatman>::OnLose(CHeadlessHatman*)
 T Action<CHeadlessHatman>::OnLostSight(CBaseEntity*)
 T Action<CHeadlessHatman>::OnLostSight(CHeadlessHatman*, CBaseEntity*)
 T Action<CHeadlessHatman>::OnModelChanged()
 T Action<CHeadlessHatman>::OnModelChanged(CHeadlessHatman*)
 T Action<CHeadlessHatman>::OnMoveToFailure(CHeadlessHatman*, Path const*, MoveToFailureType)
 T Action<CHeadlessHatman>::OnMoveToFailure(Path const*, MoveToFailureType)
 T Action<CHeadlessHatman>::OnMoveToSuccess(CHeadlessHatman*, Path const*)
 T Action<CHeadlessHatman>::OnMoveToSuccess(Path const*)
 T Action<CHeadlessHatman>::OnNavAreaChanged(CHeadlessHatman*, CNavArea*, CNavArea*)
 T Action<CHeadlessHatman>::OnNavAreaChanged(CNavArea*, CNavArea*)
 T Action<CHeadlessHatman>::OnOtherKilled(CBaseCombatCharacter*, CTakeDamageInfo const&)
 T Action<CHeadlessHatman>::OnOtherKilled(CHeadlessHatman*, CBaseCombatCharacter*, CTakeDamageInfo const&)
 T Action<CHeadlessHatman>::OnPickUp(CBaseEntity*, CBaseCombatCharacter*)
 T Action<CHeadlessHatman>::OnPickUp(CHeadlessHatman*, CBaseEntity*, CBaseCombatCharacter*)
 T Action<CHeadlessHatman>::OnPostureChanged()
 T Action<CHeadlessHatman>::OnPostureChanged(CHeadlessHatman*)
 T Action<CHeadlessHatman>::OnResume(CHeadlessHatman*, Action<CHeadlessHatman>*)
 T Action<CHeadlessHatman>::OnShoved(CBaseEntity*)
 T Action<CHeadlessHatman>::OnShoved(CHeadlessHatman*, CBaseEntity*)
 T Action<CHeadlessHatman>::OnSight(CBaseEntity*)
 T Action<CHeadlessHatman>::OnSight(CHeadlessHatman*, CBaseEntity*)
 T Action<CHeadlessHatman>::OnSound(CBaseEntity*, Vector const&, KeyValues*)
 T Action<CHeadlessHatman>::OnSound(CHeadlessHatman*, CBaseEntity*, Vector const&, KeyValues*)
 T Action<CHeadlessHatman>::OnSpokeConcept(CBaseCombatCharacter*, char const*, AI_Response*)
 T Action<CHeadlessHatman>::OnSpokeConcept(CHeadlessHatman*, CBaseCombatCharacter*, char const*, AI_Response*)
 T Action<CHeadlessHatman>::OnStart(CHeadlessHatman*, Action<CHeadlessHatman>*)
 T Action<CHeadlessHatman>::OnStuck()
 T Action<CHeadlessHatman>::OnStuck(CHeadlessHatman*)
 T Action<CHeadlessHatman>::OnSuspend(CHeadlessHatman*, Action<CHeadlessHatman>*)
 T Action<CHeadlessHatman>::OnTerritoryCaptured(CHeadlessHatman*, int)
 T Action<CHeadlessHatman>::OnTerritoryCaptured(int)
 T Action<CHeadlessHatman>::OnTerritoryContested(CHeadlessHatman*, int)
 T Action<CHeadlessHatman>::OnTerritoryContested(int)
 T Action<CHeadlessHatman>::OnTerritoryLost(CHeadlessHatman*, int)
 T Action<CHeadlessHatman>::OnTerritoryLost(int)
 T Action<CHeadlessHatman>::OnUnStuck()
 T Action<CHeadlessHatman>::OnUnStuck(CHeadlessHatman*)
 T Action<CHeadlessHatman>::OnWeaponFired(CBaseCombatCharacter*, CBaseCombatWeapon*)
 T Action<CHeadlessHatman>::OnWeaponFired(CHeadlessHatman*, CBaseCombatCharacter*, CBaseCombatWeapon*)
 T Action<CHeadlessHatman>::OnWin()
 T Action<CHeadlessHatman>::OnWin(CHeadlessHatman*)
 T Action<CHeadlessHatman>::PrintStateToConsole() const
 T Action<CHeadlessHatman>::Update(CHeadlessHatman*, float)
 T Action<CHeadlessHatman>::~Action()
 T Action<CMerasmus>::ApplyResult(CMerasmus*, Behavior<CMerasmus>*, ActionResult<CMerasmus>)
 T Action<CMerasmus>::BuildDecoratedName(char*, Action<CMerasmus> const*) const
 T Action<CMerasmus>::FirstContainedResponder() const
 T Action<CMerasmus>::GetFullName() const
 T Action<CMerasmus>::InitialContainedAction(CMerasmus*)
 T Action<CMerasmus>::InvokeOnEnd(CMerasmus*, Behavior<CMerasmus>*, Action<CMerasmus>*)
 T Action<CMerasmus>::InvokeOnResume(CMerasmus*, Behavior<CMerasmus>*, Action<CMerasmus>*)
 T Action<CMerasmus>::InvokeOnStart(CMerasmus*, Behavior<CMerasmus>*, Action<CMerasmus>*, Action<CMerasmus>*)
 T Action<CMerasmus>::InvokeOnSuspend(CMerasmus*, Behavior<CMerasmus>*, Action<CMerasmus>*)
 T Action<CMerasmus>::InvokeUpdate(CMerasmus*, Behavior<CMerasmus>*, float)
 T Action<CMerasmus>::IsAbleToBlockMovementOf(INextBot const*) const
 T Action<CMerasmus>::IsNamed(char const*) const
 T Action<CMerasmus>::NextContainedResponder(INextBotEventResponder*) const
 T Action<CMerasmus>::OnActorEmoted(CBaseCombatCharacter*, int)
 T Action<CMerasmus>::OnActorEmoted(CMerasmus*, CBaseCombatCharacter*, int)
 T Action<CMerasmus>::OnAnimationActivityComplete(CMerasmus*, int)
 T Action<CMerasmus>::OnAnimationActivityComplete(int)
 T Action<CMerasmus>::OnAnimationActivityInterrupted(CMerasmus*, int)
 T Action<CMerasmus>::OnAnimationActivityInterrupted(int)
 T Action<CMerasmus>::OnAnimationEvent(CMerasmus*, animevent_t*)
 T Action<CMerasmus>::OnAnimationEvent(animevent_t*)
 T Action<CMerasmus>::OnBlinded(CBaseEntity*)
 T Action<CMerasmus>::OnBlinded(CMerasmus*, CBaseEntity*)
 T Action<CMerasmus>::OnCommandApproach(CBaseEntity*)
 T Action<CMerasmus>::OnCommandApproach(CMerasmus*, CBaseEntity*)
 T Action<CMerasmus>::OnCommandApproach(CMerasmus*, Vector const&, float)
 T Action<CMerasmus>::OnCommandApproach(Vector const&, float)
 T Action<CMerasmus>::OnCommandAttack(CBaseEntity*)
 T Action<CMerasmus>::OnCommandAttack(CMerasmus*, CBaseEntity*)
 T Action<CMerasmus>::OnCommandPause(CMerasmus*, float)
 T Action<CMerasmus>::OnCommandPause(float)
 T Action<CMerasmus>::OnCommandResume()
 T Action<CMerasmus>::OnCommandResume(CMerasmus*)
 T Action<CMerasmus>::OnCommandRetreat(CBaseEntity*, float)
 T Action<CMerasmus>::OnCommandRetreat(CMerasmus*, CBaseEntity*, float)
 T Action<CMerasmus>::OnCommandString(CMerasmus*, char const*)
 T Action<CMerasmus>::OnCommandString(char const*)
 T Action<CMerasmus>::OnContact(CBaseEntity*, CGameTrace*)
 T Action<CMerasmus>::OnContact(CMerasmus*, CBaseEntity*, CGameTrace*)
 T Action<CMerasmus>::OnDrop(CBaseEntity*)
 T Action<CMerasmus>::OnDrop(CMerasmus*, CBaseEntity*)
 T Action<CMerasmus>::OnEnd(CMerasmus*, Action<CMerasmus>*)
 T Action<CMerasmus>::OnIgnite()
 T Action<CMerasmus>::OnIgnite(CMerasmus*)
 T Action<CMerasmus>::OnInjured(CMerasmus*, CTakeDamageInfo const&)
 T Action<CMerasmus>::OnInjured(CTakeDamageInfo const&)
 T Action<CMerasmus>::OnKilled(CMerasmus*, CTakeDamageInfo const&)
 T Action<CMerasmus>::OnKilled(CTakeDamageInfo const&)
 T Action<CMerasmus>::OnLandOnGround(CBaseEntity*)
 T Action<CMerasmus>::OnLandOnGround(CMerasmus*, CBaseEntity*)
 T Action<CMerasmus>::OnLeaveGround(CBaseEntity*)
 T Action<CMerasmus>::OnLeaveGround(CMerasmus*, CBaseEntity*)
 T Action<CMerasmus>::OnLose()
 T Action<CMerasmus>::OnLose(CMerasmus*)
 T Action<CMerasmus>::OnLostSight(CBaseEntity*)
 T Action<CMerasmus>::OnLostSight(CMerasmus*, CBaseEntity*)
 T Action<CMerasmus>::OnModelChanged()
 T Action<CMerasmus>::OnModelChanged(CMerasmus*)
 T Action<CMerasmus>::OnMoveToFailure(CMerasmus*, Path const*, MoveToFailureType)
 T Action<CMerasmus>::OnMoveToFailure(Path const*, MoveToFailureType)
 T Action<CMerasmus>::OnMoveToSuccess(CMerasmus*, Path const*)
 T Action<CMerasmus>::OnMoveToSuccess(Path const*)
 T Action<CMerasmus>::OnNavAreaChanged(CMerasmus*, CNavArea*, CNavArea*)
 T Action<CMerasmus>::OnNavAreaChanged(CNavArea*, CNavArea*)
 T Action<CMerasmus>::OnOtherKilled(CBaseCombatCharacter*, CTakeDamageInfo const&)
 T Action<CMerasmus>::OnOtherKilled(CMerasmus*, CBaseCombatCharacter*, CTakeDamageInfo const&)
 T Action<CMerasmus>::OnPickUp(CBaseEntity*, CBaseCombatCharacter*)
 T Action<CMerasmus>::OnPickUp(CMerasmus*, CBaseEntity*, CBaseCombatCharacter*)
 T Action<CMerasmus>::OnPostureChanged()
 T Action<CMerasmus>::OnPostureChanged(CMerasmus*)
 T Action<CMerasmus>::OnResume(CMerasmus*, Action<CMerasmus>*)
 T Action<CMerasmus>::OnShoved(CBaseEntity*)
 T Action<CMerasmus>::OnShoved(CMerasmus*, CBaseEntity*)
 T Action<CMerasmus>::OnSight(CBaseEntity*)
 T Action<CMerasmus>::OnSight(CMerasmus*, CBaseEntity*)
 T Action<CMerasmus>::OnSound(CBaseEntity*, Vector const&, KeyValues*)
 T Action<CMerasmus>::OnSound(CMerasmus*, CBaseEntity*, Vector const&, KeyValues*)
 T Action<CMerasmus>::OnSpokeConcept(CBaseCombatCharacter*, char const*, AI_Response*)
 T Action<CMerasmus>::OnSpokeConcept(CMerasmus*, CBaseCombatCharacter*, char const*, AI_Response*)
 T Action<CMerasmus>::OnStart(CMerasmus*, Action<CMerasmus>*)
 T Action<CMerasmus>::OnStuck()
 T Action<CMerasmus>::OnStuck(CMerasmus*)
 T Action<CMerasmus>::OnSuspend(CMerasmus*, Action<CMerasmus>*)
 T Action<CMerasmus>::OnTerritoryCaptured(CMerasmus*, int)
 T Action<CMerasmus>::OnTerritoryCaptured(int)
 T Action<CMerasmus>::OnTerritoryContested(CMerasmus*, int)
 T Action<CMerasmus>::OnTerritoryContested(int)
 T Action<CMerasmus>::OnTerritoryLost(CMerasmus*, int)
 T Action<CMerasmus>::OnTerritoryLost(int)
 T Action<CMerasmus>::OnUnStuck()
 T Action<CMerasmus>::OnUnStuck(CMerasmus*)
 T Action<CMerasmus>::OnWeaponFired(CBaseCombatCharacter*, CBaseCombatWeapon*)
 T Action<CMerasmus>::OnWeaponFired(CMerasmus*, CBaseCombatCharacter*, CBaseCombatWeapon*)
 T Action<CMerasmus>::OnWin()
 T Action<CMerasmus>::OnWin(CMerasmus*)
 T Action<CMerasmus>::PrintStateToConsole() const
 T Action<CMerasmus>::Update(CMerasmus*, float)
 T Action<CMerasmus>::~Action()
 T Action<CSimpleBot>::ApplyResult(CSimpleBot*, Behavior<CSimpleBot>*, ActionResult<CSimpleBot>)
 T Action<CSimpleBot>::BuildDecoratedName(char*, Action<CSimpleBot> const*) const
 T Action<CSimpleBot>::FirstContainedResponder() const
 T Action<CSimpleBot>::GetFullName() const
 T Action<CSimpleBot>::InitialContainedAction(CSimpleBot*)
 T Action<CSimpleBot>::InvokeOnEnd(CSimpleBot*, Behavior<CSimpleBot>*, Action<CSimpleBot>*)
 T Action<CSimpleBot>::InvokeOnResume(CSimpleBot*, Behavior<CSimpleBot>*, Action<CSimpleBot>*)
 T Action<CSimpleBot>::InvokeOnStart(CSimpleBot*, Behavior<CSimpleBot>*, Action<CSimpleBot>*, Action<CSimpleBot>*)
 T Action<CSimpleBot>::InvokeOnSuspend(CSimpleBot*, Behavior<CSimpleBot>*, Action<CSimpleBot>*)
 T Action<CSimpleBot>::InvokeUpdate(CSimpleBot*, Behavior<CSimpleBot>*, float)
 T Action<CSimpleBot>::IsAbleToBlockMovementOf(INextBot const*) const
 T Action<CSimpleBot>::IsNamed(char const*) const
 T Action<CSimpleBot>::NextContainedResponder(INextBotEventResponder*) const
 T Action<CSimpleBot>::OnActorEmoted(CBaseCombatCharacter*, int)
 T Action<CSimpleBot>::OnActorEmoted(CSimpleBot*, CBaseCombatCharacter*, int)
 T Action<CSimpleBot>::OnAnimationActivityComplete(CSimpleBot*, int)
 T Action<CSimpleBot>::OnAnimationActivityComplete(int)
 T Action<CSimpleBot>::OnAnimationActivityInterrupted(CSimpleBot*, int)
 T Action<CSimpleBot>::OnAnimationActivityInterrupted(int)
 T Action<CSimpleBot>::OnAnimationEvent(CSimpleBot*, animevent_t*)
 T Action<CSimpleBot>::OnAnimationEvent(animevent_t*)
 T Action<CSimpleBot>::OnBlinded(CBaseEntity*)
 T Action<CSimpleBot>::OnBlinded(CSimpleBot*, CBaseEntity*)
 T Action<CSimpleBot>::OnCommandApproach(CBaseEntity*)
 T Action<CSimpleBot>::OnCommandApproach(CSimpleBot*, CBaseEntity*)
 T Action<CSimpleBot>::OnCommandApproach(CSimpleBot*, Vector const&, float)
 T Action<CSimpleBot>::OnCommandApproach(Vector const&, float)
 T Action<CSimpleBot>::OnCommandAttack(CBaseEntity*)
 T Action<CSimpleBot>::OnCommandAttack(CSimpleBot*, CBaseEntity*)
 T Action<CSimpleBot>::OnCommandPause(CSimpleBot*, float)
 T Action<CSimpleBot>::OnCommandPause(float)
 T Action<CSimpleBot>::OnCommandResume()
 T Action<CSimpleBot>::OnCommandResume(CSimpleBot*)
 T Action<CSimpleBot>::OnCommandRetreat(CBaseEntity*, float)
 T Action<CSimpleBot>::OnCommandRetreat(CSimpleBot*, CBaseEntity*, float)
 T Action<CSimpleBot>::OnCommandString(CSimpleBot*, char const*)
 T Action<CSimpleBot>::OnCommandString(char const*)
 T Action<CSimpleBot>::OnContact(CBaseEntity*, CGameTrace*)
 T Action<CSimpleBot>::OnContact(CSimpleBot*, CBaseEntity*, CGameTrace*)
 T Action<CSimpleBot>::OnDrop(CBaseEntity*)
 T Action<CSimpleBot>::OnDrop(CSimpleBot*, CBaseEntity*)
 T Action<CSimpleBot>::OnEnd(CSimpleBot*, Action<CSimpleBot>*)
 T Action<CSimpleBot>::OnIgnite()
 T Action<CSimpleBot>::OnIgnite(CSimpleBot*)
 T Action<CSimpleBot>::OnInjured(CSimpleBot*, CTakeDamageInfo const&)
 T Action<CSimpleBot>::OnInjured(CTakeDamageInfo const&)
 T Action<CSimpleBot>::OnKilled(CSimpleBot*, CTakeDamageInfo const&)
 T Action<CSimpleBot>::OnKilled(CTakeDamageInfo const&)
 T Action<CSimpleBot>::OnLandOnGround(CBaseEntity*)
 T Action<CSimpleBot>::OnLandOnGround(CSimpleBot*, CBaseEntity*)
 T Action<CSimpleBot>::OnLeaveGround(CBaseEntity*)
 T Action<CSimpleBot>::OnLeaveGround(CSimpleBot*, CBaseEntity*)
 T Action<CSimpleBot>::OnLose()
 T Action<CSimpleBot>::OnLose(CSimpleBot*)
 T Action<CSimpleBot>::OnLostSight(CBaseEntity*)
 T Action<CSimpleBot>::OnLostSight(CSimpleBot*, CBaseEntity*)
 T Action<CSimpleBot>::OnModelChanged()
 T Action<CSimpleBot>::OnModelChanged(CSimpleBot*)
 T Action<CSimpleBot>::OnMoveToFailure(CSimpleBot*, Path const*, MoveToFailureType)
 T Action<CSimpleBot>::OnMoveToFailure(Path const*, MoveToFailureType)
 T Action<CSimpleBot>::OnMoveToSuccess(CSimpleBot*, Path const*)
 T Action<CSimpleBot>::OnMoveToSuccess(Path const*)
 T Action<CSimpleBot>::OnNavAreaChanged(CNavArea*, CNavArea*)
 T Action<CSimpleBot>::OnNavAreaChanged(CSimpleBot*, CNavArea*, CNavArea*)
 T Action<CSimpleBot>::OnOtherKilled(CBaseCombatCharacter*, CTakeDamageInfo const&)
 T Action<CSimpleBot>::OnOtherKilled(CSimpleBot*, CBaseCombatCharacter*, CTakeDamageInfo const&)
 T Action<CSimpleBot>::OnPickUp(CBaseEntity*, CBaseCombatCharacter*)
 T Action<CSimpleBot>::OnPickUp(CSimpleBot*, CBaseEntity*, CBaseCombatCharacter*)
 T Action<CSimpleBot>::OnPostureChanged()
 T Action<CSimpleBot>::OnPostureChanged(CSimpleBot*)
 T Action<CSimpleBot>::OnResume(CSimpleBot*, Action<CSimpleBot>*)
 T Action<CSimpleBot>::OnShoved(CBaseEntity*)
 T Action<CSimpleBot>::OnShoved(CSimpleBot*, CBaseEntity*)
 T Action<CSimpleBot>::OnSight(CBaseEntity*)
 T Action<CSimpleBot>::OnSight(CSimpleBot*, CBaseEntity*)
 T Action<CSimpleBot>::OnSound(CBaseEntity*, Vector const&, KeyValues*)
 T Action<CSimpleBot>::OnSound(CSimpleBot*, CBaseEntity*, Vector const&, KeyValues*)
 T Action<CSimpleBot>::OnSpokeConcept(CBaseCombatCharacter*, char const*, AI_Response*)
 T Action<CSimpleBot>::OnSpokeConcept(CSimpleBot*, CBaseCombatCharacter*, char const*, AI_Response*)
 T Action<CSimpleBot>::OnStart(CSimpleBot*, Action<CSimpleBot>*)
 T Action<CSimpleBot>::OnStuck()
 T Action<CSimpleBot>::OnStuck(CSimpleBot*)
 T Action<CSimpleBot>::OnSuspend(CSimpleBot*, Action<CSimpleBot>*)
 T Action<CSimpleBot>::OnTerritoryCaptured(CSimpleBot*, int)
 T Action<CSimpleBot>::OnTerritoryCaptured(int)
 T Action<CSimpleBot>::OnTerritoryContested(CSimpleBot*, int)
 T Action<CSimpleBot>::OnTerritoryContested(int)
 T Action<CSimpleBot>::OnTerritoryLost(CSimpleBot*, int)
 T Action<CSimpleBot>::OnTerritoryLost(int)
 T Action<CSimpleBot>::OnUnStuck()
 T Action<CSimpleBot>::OnUnStuck(CSimpleBot*)
 T Action<CSimpleBot>::OnWeaponFired(CBaseCombatCharacter*, CBaseCombatWeapon*)
 T Action<CSimpleBot>::OnWeaponFired(CSimpleBot*, CBaseCombatCharacter*, CBaseCombatWeapon*)
 T Action<CSimpleBot>::OnWin()
 T Action<CSimpleBot>::OnWin(CSimpleBot*)
 T Action<CSimpleBot>::PrintStateToConsole() const
 T Action<CSimpleBot>::Update(CSimpleBot*, float)
 T Action<CSimpleBot>::~Action()
 T Action<CTFBot>::ApplyResult(CTFBot*, Behavior<CTFBot>*, ActionResult<CTFBot>)
 T Action<CTFBot>::BuildDecoratedName(char*, Action<CTFBot> const*) const
 T Action<CTFBot>::FirstContainedResponder() const
 T Action<CTFBot>::GetFullName() const
 T Action<CTFBot>::InitialContainedAction(CTFBot*)
 T Action<CTFBot>::InvokeOnEnd(CTFBot*, Behavior<CTFBot>*, Action<CTFBot>*)
 T Action<CTFBot>::InvokeOnResume(CTFBot*, Behavior<CTFBot>*, Action<CTFBot>*)
 T Action<CTFBot>::InvokeOnStart(CTFBot*, Behavior<CTFBot>*, Action<CTFBot>*, Action<CTFBot>*)
 T Action<CTFBot>::InvokeOnSuspend(CTFBot*, Behavior<CTFBot>*, Action<CTFBot>*)
 T Action<CTFBot>::InvokeUpdate(CTFBot*, Behavior<CTFBot>*, float)
 T Action<CTFBot>::IsAbleToBlockMovementOf(INextBot const*) const
 T Action<CTFBot>::IsNamed(char const*) const
 T Action<CTFBot>::NextContainedResponder(INextBotEventResponder*) const
 T Action<CTFBot>::OnActorEmoted(CBaseCombatCharacter*, int)
 T Action<CTFBot>::OnActorEmoted(CTFBot*, CBaseCombatCharacter*, int)
 T Action<CTFBot>::OnAnimationActivityComplete(CTFBot*, int)
 T Action<CTFBot>::OnAnimationActivityComplete(int)
 T Action<CTFBot>::OnAnimationActivityInterrupted(CTFBot*, int)
 T Action<CTFBot>::OnAnimationActivityInterrupted(int)
 T Action<CTFBot>::OnAnimationEvent(CTFBot*, animevent_t*)
 T Action<CTFBot>::OnAnimationEvent(animevent_t*)
 T Action<CTFBot>::OnBlinded(CBaseEntity*)
 T Action<CTFBot>::OnBlinded(CTFBot*, CBaseEntity*)
 T Action<CTFBot>::OnCommandApproach(CBaseEntity*)
 T Action<CTFBot>::OnCommandApproach(CTFBot*, CBaseEntity*)
 T Action<CTFBot>::OnCommandApproach(CTFBot*, Vector const&, float)
 T Action<CTFBot>::OnCommandApproach(Vector const&, float)
 T Action<CTFBot>::OnCommandAttack(CBaseEntity*)
 T Action<CTFBot>::OnCommandAttack(CTFBot*, CBaseEntity*)
 T Action<CTFBot>::OnCommandPause(CTFBot*, float)
 T Action<CTFBot>::OnCommandPause(float)
 T Action<CTFBot>::OnCommandResume()
 T Action<CTFBot>::OnCommandResume(CTFBot*)
 T Action<CTFBot>::OnCommandRetreat(CBaseEntity*, float)
 T Action<CTFBot>::OnCommandRetreat(CTFBot*, CBaseEntity*, float)
 T Action<CTFBot>::OnCommandString(CTFBot*, char const*)
 T Action<CTFBot>::OnCommandString(char const*)
 T Action<CTFBot>::OnContact(CBaseEntity*, CGameTrace*)
 T Action<CTFBot>::OnContact(CTFBot*, CBaseEntity*, CGameTrace*)
 T Action<CTFBot>::OnDrop(CBaseEntity*)
 T Action<CTFBot>::OnDrop(CTFBot*, CBaseEntity*)
 T Action<CTFBot>::OnEnd(CTFBot*, Action<CTFBot>*)
 T Action<CTFBot>::OnIgnite()
 T Action<CTFBot>::OnIgnite(CTFBot*)
 T Action<CTFBot>::OnInjured(CTFBot*, CTakeDamageInfo const&)
 T Action<CTFBot>::OnInjured(CTakeDamageInfo const&)
 T Action<CTFBot>::OnKilled(CTFBot*, CTakeDamageInfo const&)
 T Action<CTFBot>::OnKilled(CTakeDamageInfo const&)
 T Action<CTFBot>::OnLandOnGround(CBaseEntity*)
 T Action<CTFBot>::OnLandOnGround(CTFBot*, CBaseEntity*)
 T Action<CTFBot>::OnLeaveGround(CBaseEntity*)
 T Action<CTFBot>::OnLeaveGround(CTFBot*, CBaseEntity*)
 T Action<CTFBot>::OnLose()
 T Action<CTFBot>::OnLose(CTFBot*)
 T Action<CTFBot>::OnLostSight(CBaseEntity*)
 T Action<CTFBot>::OnLostSight(CTFBot*, CBaseEntity*)
 T Action<CTFBot>::OnModelChanged()
 T Action<CTFBot>::OnModelChanged(CTFBot*)
 T Action<CTFBot>::OnMoveToFailure(CTFBot*, Path const*, MoveToFailureType)
 T Action<CTFBot>::OnMoveToFailure(Path const*, MoveToFailureType)
 T Action<CTFBot>::OnMoveToSuccess(CTFBot*, Path const*)
 T Action<CTFBot>::OnMoveToSuccess(Path const*)
 T Action<CTFBot>::OnNavAreaChanged(CNavArea*, CNavArea*)
 T Action<CTFBot>::OnNavAreaChanged(CTFBot*, CNavArea*, CNavArea*)
 T Action<CTFBot>::OnOtherKilled(CBaseCombatCharacter*, CTakeDamageInfo const&)
 T Action<CTFBot>::OnOtherKilled(CTFBot*, CBaseCombatCharacter*, CTakeDamageInfo const&)
 T Action<CTFBot>::OnPickUp(CBaseEntity*, CBaseCombatCharacter*)
 T Action<CTFBot>::OnPickUp(CTFBot*, CBaseEntity*, CBaseCombatCharacter*)
 T Action<CTFBot>::OnPostureChanged()
 T Action<CTFBot>::OnPostureChanged(CTFBot*)
 T Action<CTFBot>::OnResume(CTFBot*, Action<CTFBot>*)
 T Action<CTFBot>::OnShoved(CBaseEntity*)
 T Action<CTFBot>::OnShoved(CTFBot*, CBaseEntity*)
 T Action<CTFBot>::OnSight(CBaseEntity*)
 T Action<CTFBot>::OnSight(CTFBot*, CBaseEntity*)
 T Action<CTFBot>::OnSound(CBaseEntity*, Vector const&, KeyValues*)
 T Action<CTFBot>::OnSound(CTFBot*, CBaseEntity*, Vector const&, KeyValues*)
 T Action<CTFBot>::OnSpokeConcept(CBaseCombatCharacter*, char const*, AI_Response*)
 T Action<CTFBot>::OnSpokeConcept(CTFBot*, CBaseCombatCharacter*, char const*, AI_Response*)
 T Action<CTFBot>::OnStart(CTFBot*, Action<CTFBot>*)
 T Action<CTFBot>::OnStuck()
 T Action<CTFBot>::OnStuck(CTFBot*)
 T Action<CTFBot>::OnSuspend(CTFBot*, Action<CTFBot>*)
 T Action<CTFBot>::OnTerritoryCaptured(CTFBot*, int)
 T Action<CTFBot>::OnTerritoryCaptured(int)
 T Action<CTFBot>::OnTerritoryContested(CTFBot*, int)
 T Action<CTFBot>::OnTerritoryContested(int)
 T Action<CTFBot>::OnTerritoryLost(CTFBot*, int)
 T Action<CTFBot>::OnTerritoryLost(int)
 T Action<CTFBot>::OnUnStuck()
 T Action<CTFBot>::OnUnStuck(CTFBot*)
 T Action<CTFBot>::OnWeaponFired(CBaseCombatCharacter*, CBaseCombatWeapon*)
 T Action<CTFBot>::OnWeaponFired(CTFBot*, CBaseCombatCharacter*, CBaseCombatWeapon*)
 T Action<CTFBot>::OnWin()
 T Action<CTFBot>::OnWin(CTFBot*)
 T Action<CTFBot>::PrintStateToConsole() const
 T Action<CTFBot>::Update(CTFBot*, float)
 T Action<CTFBot>::~Action()
 T Action<CTFRobotDestruction_Robot>::ApplyResult(CTFRobotDestruction_Robot*, Behavior<CTFRobotDestruction_Robot>*, ActionResult<CTFRobotDestruction_Robot>)
 T Action<CTFRobotDestruction_Robot>::BuildDecoratedName(char*, Action<CTFRobotDestruction_Robot> const*) const
 T Action<CTFRobotDestruction_Robot>::FirstContainedResponder() const
 T Action<CTFRobotDestruction_Robot>::GetFullName() const
 T Action<CTFRobotDestruction_Robot>::InitialContainedAction(CTFRobotDestruction_Robot*)
 T Action<CTFRobotDestruction_Robot>::InvokeOnEnd(CTFRobotDestruction_Robot*, Behavior<CTFRobotDestruction_Robot>*, Action<CTFRobotDestruction_Robot>*)
 T Action<CTFRobotDestruction_Robot>::InvokeOnResume(CTFRobotDestruction_Robot*, Behavior<CTFRobotDestruction_Robot>*, Action<CTFRobotDestruction_Robot>*)
 T Action<CTFRobotDestruction_Robot>::InvokeOnStart(CTFRobotDestruction_Robot*, Behavior<CTFRobotDestruction_Robot>*, Action<CTFRobotDestruction_Robot>*, Action<CTFRobotDestruction_Robot>*)
 T Action<CTFRobotDestruction_Robot>::InvokeOnSuspend(CTFRobotDestruction_Robot*, Behavior<CTFRobotDestruction_Robot>*, Action<CTFRobotDestruction_Robot>*)
 T Action<CTFRobotDestruction_Robot>::InvokeUpdate(CTFRobotDestruction_Robot*, Behavior<CTFRobotDestruction_Robot>*, float)
 T Action<CTFRobotDestruction_Robot>::IsAbleToBlockMovementOf(INextBot const*) const
 T Action<CTFRobotDestruction_Robot>::IsNamed(char const*) const
 T Action<CTFRobotDestruction_Robot>::NextContainedResponder(INextBotEventResponder*) const
 T Action<CTFRobotDestruction_Robot>::OnActorEmoted(CBaseCombatCharacter*, int)
 T Action<CTFRobotDestruction_Robot>::OnActorEmoted(CTFRobotDestruction_Robot*, CBaseCombatCharacter*, int)
 T Action<CTFRobotDestruction_Robot>::OnAnimationActivityComplete(CTFRobotDestruction_Robot*, int)
 T Action<CTFRobotDestruction_Robot>::OnAnimationActivityComplete(int)
 T Action<CTFRobotDestruction_Robot>::OnAnimationActivityInterrupted(CTFRobotDestruction_Robot*, int)
 T Action<CTFRobotDestruction_Robot>::OnAnimationActivityInterrupted(int)
 T Action<CTFRobotDestruction_Robot>::OnAnimationEvent(CTFRobotDestruction_Robot*, animevent_t*)
 T Action<CTFRobotDestruction_Robot>::OnAnimationEvent(animevent_t*)
 T Action<CTFRobotDestruction_Robot>::OnBlinded(CBaseEntity*)
 T Action<CTFRobotDestruction_Robot>::OnBlinded(CTFRobotDestruction_Robot*, CBaseEntity*)
 T Action<CTFRobotDestruction_Robot>::OnCommandApproach(CBaseEntity*)
 T Action<CTFRobotDestruction_Robot>::OnCommandApproach(CTFRobotDestruction_Robot*, CBaseEntity*)
 T Action<CTFRobotDestruction_Robot>::OnCommandApproach(CTFRobotDestruction_Robot*, Vector const&, float)
 T Action<CTFRobotDestruction_Robot>::OnCommandApproach(Vector const&, float)
 T Action<CTFRobotDestruction_Robot>::OnCommandAttack(CBaseEntity*)
 T Action<CTFRobotDestruction_Robot>::OnCommandAttack(CTFRobotDestruction_Robot*, CBaseEntity*)
 T Action<CTFRobotDestruction_Robot>::OnCommandPause(CTFRobotDestruction_Robot*, float)
 T Action<CTFRobotDestruction_Robot>::OnCommandPause(float)
 T Action<CTFRobotDestruction_Robot>::OnCommandResume()
 T Action<CTFRobotDestruction_Robot>::OnCommandResume(CTFRobotDestruction_Robot*)
 T Action<CTFRobotDestruction_Robot>::OnCommandRetreat(CBaseEntity*, float)
 T Action<CTFRobotDestruction_Robot>::OnCommandRetreat(CTFRobotDestruction_Robot*, CBaseEntity*, float)
 T Action<CTFRobotDestruction_Robot>::OnCommandString(CTFRobotDestruction_Robot*, char const*)
 T Action<CTFRobotDestruction_Robot>::OnCommandString(char const*)
 T Action<CTFRobotDestruction_Robot>::OnContact(CBaseEntity*, CGameTrace*)
 T Action<CTFRobotDestruction_Robot>::OnContact(CTFRobotDestruction_Robot*, CBaseEntity*, CGameTrace*)
 T Action<CTFRobotDestruction_Robot>::OnDrop(CBaseEntity*)
 T Action<CTFRobotDestruction_Robot>::OnDrop(CTFRobotDestruction_Robot*, CBaseEntity*)
 T Action<CTFRobotDestruction_Robot>::OnEnd(CTFRobotDestruction_Robot*, Action<CTFRobotDestruction_Robot>*)
 T Action<CTFRobotDestruction_Robot>::OnIgnite()
 T Action<CTFRobotDestruction_Robot>::OnIgnite(CTFRobotDestruction_Robot*)
 T Action<CTFRobotDestruction_Robot>::OnInjured(CTFRobotDestruction_Robot*, CTakeDamageInfo const&)
 T Action<CTFRobotDestruction_Robot>::OnInjured(CTakeDamageInfo const&)
 T Action<CTFRobotDestruction_Robot>::OnKilled(CTFRobotDestruction_Robot*, CTakeDamageInfo const&)
 T Action<CTFRobotDestruction_Robot>::OnKilled(CTakeDamageInfo const&)
 T Action<CTFRobotDestruction_Robot>::OnLandOnGround(CBaseEntity*)
 T Action<CTFRobotDestruction_Robot>::OnLandOnGround(CTFRobotDestruction_Robot*, CBaseEntity*)
 T Action<CTFRobotDestruction_Robot>::OnLeaveGround(CBaseEntity*)
 T Action<CTFRobotDestruction_Robot>::OnLeaveGround(CTFRobotDestruction_Robot*, CBaseEntity*)
 T Action<CTFRobotDestruction_Robot>::OnLose()
 T Action<CTFRobotDestruction_Robot>::OnLose(CTFRobotDestruction_Robot*)
 T Action<CTFRobotDestruction_Robot>::OnLostSight(CBaseEntity*)
 T Action<CTFRobotDestruction_Robot>::OnLostSight(CTFRobotDestruction_Robot*, CBaseEntity*)
 T Action<CTFRobotDestruction_Robot>::OnModelChanged()
 T Action<CTFRobotDestruction_Robot>::OnModelChanged(CTFRobotDestruction_Robot*)
 T Action<CTFRobotDestruction_Robot>::OnMoveToFailure(CTFRobotDestruction_Robot*, Path const*, MoveToFailureType)
 T Action<CTFRobotDestruction_Robot>::OnMoveToFailure(Path const*, MoveToFailureType)
 T Action<CTFRobotDestruction_Robot>::OnMoveToSuccess(CTFRobotDestruction_Robot*, Path const*)
 T Action<CTFRobotDestruction_Robot>::OnMoveToSuccess(Path const*)
 T Action<CTFRobotDestruction_Robot>::OnNavAreaChanged(CNavArea*, CNavArea*)
 T Action<CTFRobotDestruction_Robot>::OnNavAreaChanged(CTFRobotDestruction_Robot*, CNavArea*, CNavArea*)
 T Action<CTFRobotDestruction_Robot>::OnOtherKilled(CBaseCombatCharacter*, CTakeDamageInfo const&)
 T Action<CTFRobotDestruction_Robot>::OnOtherKilled(CTFRobotDestruction_Robot*, CBaseCombatCharacter*, CTakeDamageInfo const&)
 T Action<CTFRobotDestruction_Robot>::OnPickUp(CBaseEntity*, CBaseCombatCharacter*)
 T Action<CTFRobotDestruction_Robot>::OnPickUp(CTFRobotDestruction_Robot*, CBaseEntity*, CBaseCombatCharacter*)
 T Action<CTFRobotDestruction_Robot>::OnPostureChanged()
 T Action<CTFRobotDestruction_Robot>::OnPostureChanged(CTFRobotDestruction_Robot*)
 T Action<CTFRobotDestruction_Robot>::OnResume(CTFRobotDestruction_Robot*, Action<CTFRobotDestruction_Robot>*)
 T Action<CTFRobotDestruction_Robot>::OnShoved(CBaseEntity*)
 T Action<CTFRobotDestruction_Robot>::OnShoved(CTFRobotDestruction_Robot*, CBaseEntity*)
 T Action<CTFRobotDestruction_Robot>::OnSight(CBaseEntity*)
 T Action<CTFRobotDestruction_Robot>::OnSight(CTFRobotDestruction_Robot*, CBaseEntity*)
 T Action<CTFRobotDestruction_Robot>::OnSound(CBaseEntity*, Vector const&, KeyValues*)
 T Action<CTFRobotDestruction_Robot>::OnSound(CTFRobotDestruction_Robot*, CBaseEntity*, Vector const&, KeyValues*)
 T Action<CTFRobotDestruction_Robot>::OnSpokeConcept(CBaseCombatCharacter*, char const*, AI_Response*)
 T Action<CTFRobotDestruction_Robot>::OnSpokeConcept(CTFRobotDestruction_Robot*, CBaseCombatCharacter*, char const*, AI_Response*)
 T Action<CTFRobotDestruction_Robot>::OnStart(CTFRobotDestruction_Robot*, Action<CTFRobotDestruction_Robot>*)
 T Action<CTFRobotDestruction_Robot>::OnStuck()
 T Action<CTFRobotDestruction_Robot>::OnStuck(CTFRobotDestruction_Robot*)
 T Action<CTFRobotDestruction_Robot>::OnSuspend(CTFRobotDestruction_Robot*, Action<CTFRobotDestruction_Robot>*)
 T Action<CTFRobotDestruction_Robot>::OnTerritoryCaptured(CTFRobotDestruction_Robot*, int)
 T Action<CTFRobotDestruction_Robot>::OnTerritoryCaptured(int)
 T Action<CTFRobotDestruction_Robot>::OnTerritoryContested(CTFRobotDestruction_Robot*, int)
 T Action<CTFRobotDestruction_Robot>::OnTerritoryContested(int)
 T Action<CTFRobotDestruction_Robot>::OnTerritoryLost(CTFRobotDestruction_Robot*, int)
 T Action<CTFRobotDestruction_Robot>::OnTerritoryLost(int)
 T Action<CTFRobotDestruction_Robot>::OnUnStuck()
 T Action<CTFRobotDestruction_Robot>::OnUnStuck(CTFRobotDestruction_Robot*)
 T Action<CTFRobotDestruction_Robot>::OnWeaponFired(CBaseCombatCharacter*, CBaseCombatWeapon*)
 T Action<CTFRobotDestruction_Robot>::OnWeaponFired(CTFRobotDestruction_Robot*, CBaseCombatCharacter*, CBaseCombatWeapon*)
 T Action<CTFRobotDestruction_Robot>::OnWin()
 T Action<CTFRobotDestruction_Robot>::OnWin(CTFRobotDestruction_Robot*)
 T Action<CTFRobotDestruction_Robot>::PrintStateToConsole() const
 T Action<CTFRobotDestruction_Robot>::Update(CTFRobotDestruction_Robot*, float)
 T Action<CTFRobotDestruction_Robot>::~Action()
 T Action<CZombie>::ApplyResult(CZombie*, Behavior<CZombie>*, ActionResult<CZombie>)
 T Action<CZombie>::BuildDecoratedName(char*, Action<CZombie> const*) const
 T Action<CZombie>::FirstContainedResponder() const
 T Action<CZombie>::GetFullName() const
 T Action<CZombie>::InitialContainedAction(CZombie*)
 T Action<CZombie>::InvokeOnEnd(CZombie*, Behavior<CZombie>*, Action<CZombie>*)
 T Action<CZombie>::InvokeOnResume(CZombie*, Behavior<CZombie>*, Action<CZombie>*)
 T Action<CZombie>::InvokeOnStart(CZombie*, Behavior<CZombie>*, Action<CZombie>*, Action<CZombie>*)
 T Action<CZombie>::InvokeOnSuspend(CZombie*, Behavior<CZombie>*, Action<CZombie>*)
 T Action<CZombie>::InvokeUpdate(CZombie*, Behavior<CZombie>*, float)
 T Action<CZombie>::IsAbleToBlockMovementOf(INextBot const*) const
 T Action<CZombie>::IsNamed(char const*) const
 T Action<CZombie>::NextContainedResponder(INextBotEventResponder*) const
 T Action<CZombie>::OnActorEmoted(CBaseCombatCharacter*, int)
 T Action<CZombie>::OnActorEmoted(CZombie*, CBaseCombatCharacter*, int)
 T Action<CZombie>::OnAnimationActivityComplete(CZombie*, int)
 T Action<CZombie>::OnAnimationActivityComplete(int)
 T Action<CZombie>::OnAnimationActivityInterrupted(CZombie*, int)
 T Action<CZombie>::OnAnimationActivityInterrupted(int)
 T Action<CZombie>::OnAnimationEvent(CZombie*, animevent_t*)
 T Action<CZombie>::OnAnimationEvent(animevent_t*)
 T Action<CZombie>::OnBlinded(CBaseEntity*)
 T Action<CZombie>::OnBlinded(CZombie*, CBaseEntity*)
 T Action<CZombie>::OnCommandApproach(CBaseEntity*)
 T Action<CZombie>::OnCommandApproach(CZombie*, CBaseEntity*)
 T Action<CZombie>::OnCommandApproach(CZombie*, Vector const&, float)
 T Action<CZombie>::OnCommandApproach(Vector const&, float)
 T Action<CZombie>::OnCommandAttack(CBaseEntity*)
 T Action<CZombie>::OnCommandAttack(CZombie*, CBaseEntity*)
 T Action<CZombie>::OnCommandPause(CZombie*, float)
 T Action<CZombie>::OnCommandPause(float)
 T Action<CZombie>::OnCommandResume()
 T Action<CZombie>::OnCommandResume(CZombie*)
 T Action<CZombie>::OnCommandRetreat(CBaseEntity*, float)
 T Action<CZombie>::OnCommandRetreat(CZombie*, CBaseEntity*, float)
 T Action<CZombie>::OnCommandString(CZombie*, char const*)
 T Action<CZombie>::OnCommandString(char const*)
 T Action<CZombie>::OnContact(CBaseEntity*, CGameTrace*)
 T Action<CZombie>::OnContact(CZombie*, CBaseEntity*, CGameTrace*)
 T Action<CZombie>::OnDrop(CBaseEntity*)
 T Action<CZombie>::OnDrop(CZombie*, CBaseEntity*)
 T Action<CZombie>::OnEnd(CZombie*, Action<CZombie>*)
 T Action<CZombie>::OnIgnite()
 T Action<CZombie>::OnIgnite(CZombie*)
 T Action<CZombie>::OnInjured(CTakeDamageInfo const&)
 T Action<CZombie>::OnInjured(CZombie*, CTakeDamageInfo const&)
 T Action<CZombie>::OnKilled(CTakeDamageInfo const&)
 T Action<CZombie>::OnKilled(CZombie*, CTakeDamageInfo const&)
 T Action<CZombie>::OnLandOnGround(CBaseEntity*)
 T Action<CZombie>::OnLandOnGround(CZombie*, CBaseEntity*)
 T Action<CZombie>::OnLeaveGround(CBaseEntity*)
 T Action<CZombie>::OnLeaveGround(CZombie*, CBaseEntity*)
 T Action<CZombie>::OnLose()
 T Action<CZombie>::OnLose(CZombie*)
 T Action<CZombie>::OnLostSight(CBaseEntity*)
 T Action<CZombie>::OnLostSight(CZombie*, CBaseEntity*)
 T Action<CZombie>::OnModelChanged()
 T Action<CZombie>::OnModelChanged(CZombie*)
 T Action<CZombie>::OnMoveToFailure(CZombie*, Path const*, MoveToFailureType)
 T Action<CZombie>::OnMoveToFailure(Path const*, MoveToFailureType)
 T Action<CZombie>::OnMoveToSuccess(CZombie*, Path const*)
 T Action<CZombie>::OnMoveToSuccess(Path const*)
 T Action<CZombie>::OnNavAreaChanged(CNavArea*, CNavArea*)
 T Action<CZombie>::OnNavAreaChanged(CZombie*, CNavArea*, CNavArea*)
 T Action<CZombie>::OnOtherKilled(CBaseCombatCharacter*, CTakeDamageInfo const&)
 T Action<CZombie>::OnOtherKilled(CZombie*, CBaseCombatCharacter*, CTakeDamageInfo const&)
 T Action<CZombie>::OnPickUp(CBaseEntity*, CBaseCombatCharacter*)
 T Action<CZombie>::OnPickUp(CZombie*, CBaseEntity*, CBaseCombatCharacter*)
 T Action<CZombie>::OnPostureChanged()
 T Action<CZombie>::OnPostureChanged(CZombie*)
 T Action<CZombie>::OnResume(CZombie*, Action<CZombie>*)
 T Action<CZombie>::OnShoved(CBaseEntity*)
 T Action<CZombie>::OnShoved(CZombie*, CBaseEntity*)
 T Action<CZombie>::OnSight(CBaseEntity*)
 T Action<CZombie>::OnSight(CZombie*, CBaseEntity*)
 T Action<CZombie>::OnSound(CBaseEntity*, Vector const&, KeyValues*)
 T Action<CZombie>::OnSound(CZombie*, CBaseEntity*, Vector const&, KeyValues*)
 T Action<CZombie>::OnSpokeConcept(CBaseCombatCharacter*, char const*, AI_Response*)
 T Action<CZombie>::OnSpokeConcept(CZombie*, CBaseCombatCharacter*, char const*, AI_Response*)
 T Action<CZombie>::OnStart(CZombie*, Action<CZombie>*)
 T Action<CZombie>::OnStuck()
 T Action<CZombie>::OnStuck(CZombie*)
 T Action<CZombie>::OnSuspend(CZombie*, Action<CZombie>*)
 T Action<CZombie>::OnTerritoryCaptured(CZombie*, int)
 T Action<CZombie>::OnTerritoryCaptured(int)
 T Action<CZombie>::OnTerritoryContested(CZombie*, int)
 T Action<CZombie>::OnTerritoryContested(int)
 T Action<CZombie>::OnTerritoryLost(CZombie*, int)
 T Action<CZombie>::OnTerritoryLost(int)
 T Action<CZombie>::OnUnStuck()
 T Action<CZombie>::OnUnStuck(CZombie*)
 T Action<CZombie>::OnWeaponFired(CBaseCombatCharacter*, CBaseCombatWeapon*)
 T Action<CZombie>::OnWeaponFired(CZombie*, CBaseCombatCharacter*, CBaseCombatWeapon*)
 T Action<CZombie>::OnWin()
 T Action<CZombie>::OnWin(CZombie*)
 T Action<CZombie>::PrintStateToConsole() const
 T Action<CZombie>::Update(CZombie*, float)
 T Action<CZombie>::~Action()
 T ActivityDataOps()
 T ActivityList_AddActivityEntry(char const*, int, bool)
 T ActivityList_Free()
 T ActivityList_IndexForName(char const*)
 T ActivityList_Init()
 T ActivityList_NameForIndex(int)
 T ActivityList_RegisterPrivateActivity(char const*)
 T ActivityList_RegisterSharedActivities()
 T ActivityList_RegisterSharedActivity(char const*, int)
 T AddHalloweenGiftPositionsForMap(char const*, CUtlVector<Vector, CUtlMemory<Vector, int> >&)
 T AddMultiDamage(CTakeDamageInfo const&, CBaseEntity*)
 T AddRestoredEntity(CBaseEntity*)
 T AddSurfacepropFile(char const*, IPhysicsSurfaceProps*, IFileSystem*)
 T AddToDragSet::operator()(CNavArea*)
 T AddWaypointLists(AI_Waypoint_t*, AI_Waypoint_t*)
 T AimTarget_ForceRepopulateList()
 T AimTarget_ListCopy(CBaseEntity**, int)
 T AimTarget_ListCount()
 T AirBurstDamageForce(Vector const&, float, float)
 T AllocPooledString(char const*)
 T AllocPooledString_StaticConstantStringPointer(char const*)
 T AllocateStringHelper(char const*, ...)
 T AllocateUniqueDataTableName(bool, char const*, ...)
 T AlmostEqual(float, float, int)
 T AngleDiff(float, float)
 T AngleDistance(float, float)
 T AngleIMatrix(QAngle const&, Vector const&, matrix3x4_t&)
 T AngleIMatrix(QAngle const&, matrix3x4_t&)
 T AngleMatrix(QAngle const&, Vector const&, matrix3x4_t&)
 T AngleMatrix(QAngle const&, matrix3x4_t&)
 T AngleMatrix(RadianEuler const&, Vector const&, matrix3x4_t&)
 T AngleNormalize(float)
 T AngleNormalizePositive(float)
 T AngleQuaternion(QAngle const&, Quaternion&)
 T AngleQuaternion(RadianEuler const&, Quaternion&)
 T AngleVectors(QAngle const&, Vector*)
 T AngleVectors(QAngle const&, Vector*, Vector*, Vector*)
 T AngleVectorsTranspose(QAngle const&, Vector*, Vector*, Vector*)
 T Anim_StateLog(char const*, ...)
 T Anim_StatePrintf(int, char const*, ...)
 T AnyPlayersInHierarchy_R(CBaseEntity*)
 T ApplyMultiDamage()
 T ApplyViewLocking(float, float, ViewLockData_t&, RemapAngleRange_CurvePart_t)
 T Approach(float, float, float)
 T ApproachAngle(float, float, float)
 T AttenuateCaption(char const*, Vector const&, CUtlVector<Vector, CUtlMemory<Vector, int> >&)
 T BPartiesCanRematch(IMatchGroupDescription const*, CMsgGCRematchRequest const&)
 T BSpline(Vector const&, Vector const&, Vector const&, Vector const&, float, Vector&)
 T BasicGameStatsRecord_t::ParseFromBuffer(CUtlBuffer&, int)
 T BasicGameStatsRecord_t::SaveToBuffer(CUtlBuffer&)
 T BasicGameStats_t::Clear()
 T BasicGameStats_t::FindOrAddRecordForMap(char const*)
 T BasicGameStats_t::ParseFromBuffer(CUtlBuffer&, int)
 T BasicGameStats_t::SaveToBuffer(CUtlBuffer&)
 T BeginDMXContext()
 T Behavior<CBotNPCArcher>::DestroyAction(Action<CBotNPCArcher>*)
 T Behavior<CBotNPCArcher>::FirstContainedResponder() const
 T Behavior<CBotNPCArcher>::IsHindrance(INextBot const*, CBaseEntity*) const
 T Behavior<CBotNPCArcher>::IsPositionAllowed(INextBot const*, Vector const&) const
 T Behavior<CBotNPCArcher>::NextContainedResponder(INextBotEventResponder*) const
 T Behavior<CBotNPCArcher>::SelectMoreDangerousThreat(INextBot const*, CBaseCombatCharacter const*, CKnownEntity const*, CKnownEntity const*) const
 T Behavior<CBotNPCArcher>::SelectTargetPoint(INextBot const*, CBaseCombatCharacter const*) const
 T Behavior<CBotNPCArcher>::ShouldAttack(INextBot const*, CKnownEntity const*) const
 T Behavior<CBotNPCArcher>::ShouldHurry(INextBot const*) const
 T Behavior<CBotNPCArcher>::ShouldPickUp(INextBot const*, CBaseEntity*) const
 T Behavior<CBotNPCArcher>::ShouldRetreat(INextBot const*) const
 T Behavior<CBotNPCArcher>::Update(CBotNPCArcher*, float)
 T Behavior<CBotNPCArcher>::~Behavior()
 T Behavior<CBotNPCDecoy>::DestroyAction(Action<CBotNPCDecoy>*)
 T Behavior<CBotNPCDecoy>::FirstContainedResponder() const
 T Behavior<CBotNPCDecoy>::IsHindrance(INextBot const*, CBaseEntity*) const
 T Behavior<CBotNPCDecoy>::IsPositionAllowed(INextBot const*, Vector const&) const
 T Behavior<CBotNPCDecoy>::NextContainedResponder(INextBotEventResponder*) const
 T Behavior<CBotNPCDecoy>::SelectMoreDangerousThreat(INextBot const*, CBaseCombatCharacter const*, CKnownEntity const*, CKnownEntity const*) const
 T Behavior<CBotNPCDecoy>::SelectTargetPoint(INextBot const*, CBaseCombatCharacter const*) const
 T Behavior<CBotNPCDecoy>::ShouldAttack(INextBot const*, CKnownEntity const*) const
 T Behavior<CBotNPCDecoy>::ShouldHurry(INextBot const*) const
 T Behavior<CBotNPCDecoy>::ShouldPickUp(INextBot const*, CBaseEntity*) const
 T Behavior<CBotNPCDecoy>::ShouldRetreat(INextBot const*) const
 T Behavior<CBotNPCDecoy>::Update(CBotNPCDecoy*, float)
 T Behavior<CBotNPCDecoy>::~Behavior()
 T Behavior<CEyeballBoss>::DestroyAction(Action<CEyeballBoss>*)
 T Behavior<CEyeballBoss>::FirstContainedResponder() const
 T Behavior<CEyeballBoss>::IsHindrance(INextBot const*, CBaseEntity*) const
 T Behavior<CEyeballBoss>::IsPositionAllowed(INextBot const*, Vector const&) const
 T Behavior<CEyeballBoss>::NextContainedResponder(INextBotEventResponder*) const
 T Behavior<CEyeballBoss>::SelectMoreDangerousThreat(INextBot const*, CBaseCombatCharacter const*, CKnownEntity const*, CKnownEntity const*) const
 T Behavior<CEyeballBoss>::SelectTargetPoint(INextBot const*, CBaseCombatCharacter const*) const
 T Behavior<CEyeballBoss>::ShouldAttack(INextBot const*, CKnownEntity const*) const
 T Behavior<CEyeballBoss>::ShouldHurry(INextBot const*) const
 T Behavior<CEyeballBoss>::ShouldPickUp(INextBot const*, CBaseEntity*) const
 T Behavior<CEyeballBoss>::ShouldRetreat(INextBot const*) const
 T Behavior<CEyeballBoss>::Update(CEyeballBoss*, float)
 T Behavior<CEyeballBoss>::~Behavior()
 T Behavior<CGhost>::DestroyAction(Action<CGhost>*)
 T Behavior<CGhost>::FirstContainedResponder() const
 T Behavior<CGhost>::IsHindrance(INextBot const*, CBaseEntity*) const
 T Behavior<CGhost>::IsPositionAllowed(INextBot const*, Vector const&) const
 T Behavior<CGhost>::NextContainedResponder(INextBotEventResponder*) const
 T Behavior<CGhost>::SelectMoreDangerousThreat(INextBot const*, CBaseCombatCharacter const*, CKnownEntity const*, CKnownEntity const*) const
 T Behavior<CGhost>::SelectTargetPoint(INextBot const*, CBaseCombatCharacter const*) const
 T Behavior<CGhost>::ShouldAttack(INextBot const*, CKnownEntity const*) const
 T Behavior<CGhost>::ShouldHurry(INextBot const*) const
 T Behavior<CGhost>::ShouldPickUp(INextBot const*, CBaseEntity*) const
 T Behavior<CGhost>::ShouldRetreat(INextBot const*) const
 T Behavior<CGhost>::Update(CGhost*, float)
 T Behavior<CGhost>::~Behavior()
 T Behavior<CHeadlessHatman>::DestroyAction(Action<CHeadlessHatman>*)
 T Behavior<CHeadlessHatman>::FirstContainedResponder() const
 T Behavior<CHeadlessHatman>::IsHindrance(INextBot const*, CBaseEntity*) const
 T Behavior<CHeadlessHatman>::IsPositionAllowed(INextBot const*, Vector const&) const
 T Behavior<CHeadlessHatman>::NextContainedResponder(INextBotEventResponder*) const
 T Behavior<CHeadlessHatman>::SelectMoreDangerousThreat(INextBot const*, CBaseCombatCharacter const*, CKnownEntity const*, CKnownEntity const*) const
 T Behavior<CHeadlessHatman>::SelectTargetPoint(INextBot const*, CBaseCombatCharacter const*) const
 T Behavior<CHeadlessHatman>::ShouldAttack(INextBot const*, CKnownEntity const*) const
 T Behavior<CHeadlessHatman>::ShouldHurry(INextBot const*) const
 T Behavior<CHeadlessHatman>::ShouldPickUp(INextBot const*, CBaseEntity*) const
 T Behavior<CHeadlessHatman>::ShouldRetreat(INextBot const*) const
 T Behavior<CHeadlessHatman>::Update(CHeadlessHatman*, float)
 T Behavior<CHeadlessHatman>::~Behavior()
 T Behavior<CMerasmus>::DestroyAction(Action<CMerasmus>*)
 T Behavior<CMerasmus>::FirstContainedResponder() const
 T Behavior<CMerasmus>::IsHindrance(INextBot const*, CBaseEntity*) const
 T Behavior<CMerasmus>::IsPositionAllowed(INextBot const*, Vector const&) const
 T Behavior<CMerasmus>::NextContainedResponder(INextBotEventResponder*) const
 T Behavior<CMerasmus>::SelectMoreDangerousThreat(INextBot const*, CBaseCombatCharacter const*, CKnownEntity const*, CKnownEntity const*) const
 T Behavior<CMerasmus>::SelectTargetPoint(INextBot const*, CBaseCombatCharacter const*) const
 T Behavior<CMerasmus>::ShouldAttack(INextBot const*, CKnownEntity const*) const
 T Behavior<CMerasmus>::ShouldHurry(INextBot const*) const
 T Behavior<CMerasmus>::ShouldPickUp(INextBot const*, CBaseEntity*) const
 T Behavior<CMerasmus>::ShouldRetreat(INextBot const*) const
 T Behavior<CMerasmus>::Update(CMerasmus*, float)
 T Behavior<CMerasmus>::~Behavior()
 T Behavior<CSimpleBot>::DestroyAction(Action<CSimpleBot>*)
 T Behavior<CSimpleBot>::FirstContainedResponder() const
 T Behavior<CSimpleBot>::IsHindrance(INextBot const*, CBaseEntity*) const
 T Behavior<CSimpleBot>::IsPositionAllowed(INextBot const*, Vector const&) const
 T Behavior<CSimpleBot>::NextContainedResponder(INextBotEventResponder*) const
 T Behavior<CSimpleBot>::SelectMoreDangerousThreat(INextBot const*, CBaseCombatCharacter const*, CKnownEntity const*, CKnownEntity const*) const
 T Behavior<CSimpleBot>::SelectTargetPoint(INextBot const*, CBaseCombatCharacter const*) const
 T Behavior<CSimpleBot>::ShouldAttack(INextBot const*, CKnownEntity const*) const
 T Behavior<CSimpleBot>::ShouldHurry(INextBot const*) const
 T Behavior<CSimpleBot>::ShouldPickUp(INextBot const*, CBaseEntity*) const
 T Behavior<CSimpleBot>::ShouldRetreat(INextBot const*) const
 T Behavior<CSimpleBot>::Update(CSimpleBot*, float)
 T Behavior<CSimpleBot>::~Behavior()
 T Behavior<CTFBot>::DestroyAction(Action<CTFBot>*)
 T Behavior<CTFBot>::FirstContainedResponder() const
 T Behavior<CTFBot>::IsHindrance(INextBot const*, CBaseEntity*) const
 T Behavior<CTFBot>::IsPositionAllowed(INextBot const*, Vector const&) const
 T Behavior<CTFBot>::NextContainedResponder(INextBotEventResponder*) const
 T Behavior<CTFBot>::SelectMoreDangerousThreat(INextBot const*, CBaseCombatCharacter const*, CKnownEntity const*, CKnownEntity const*) const
 T Behavior<CTFBot>::SelectTargetPoint(INextBot const*, CBaseCombatCharacter const*) const
 T Behavior<CTFBot>::ShouldAttack(INextBot const*, CKnownEntity const*) const
 T Behavior<CTFBot>::ShouldHurry(INextBot const*) const
 T Behavior<CTFBot>::ShouldPickUp(INextBot const*, CBaseEntity*) const
 T Behavior<CTFBot>::ShouldRetreat(INextBot const*) const
 T Behavior<CTFBot>::Update(CTFBot*, float)
 T Behavior<CTFBot>::~Behavior()
 T Behavior<CTFRobotDestruction_Robot>::DestroyAction(Action<CTFRobotDestruction_Robot>*)
 T Behavior<CTFRobotDestruction_Robot>::FirstContainedResponder() const
 T Behavior<CTFRobotDestruction_Robot>::IsHindrance(INextBot const*, CBaseEntity*) const
 T Behavior<CTFRobotDestruction_Robot>::IsPositionAllowed(INextBot const*, Vector const&) const
 T Behavior<CTFRobotDestruction_Robot>::NextContainedResponder(INextBotEventResponder*) const
 T Behavior<CTFRobotDestruction_Robot>::SelectMoreDangerousThreat(INextBot const*, CBaseCombatCharacter const*, CKnownEntity const*, CKnownEntity const*) const
 T Behavior<CTFRobotDestruction_Robot>::SelectTargetPoint(INextBot const*, CBaseCombatCharacter const*) const
 T Behavior<CTFRobotDestruction_Robot>::ShouldAttack(INextBot const*, CKnownEntity const*) const
 T Behavior<CTFRobotDestruction_Robot>::ShouldHurry(INextBot const*) const
 T Behavior<CTFRobotDestruction_Robot>::ShouldPickUp(INextBot const*, CBaseEntity*) const
 T Behavior<CTFRobotDestruction_Robot>::ShouldRetreat(INextBot const*) const
 T Behavior<CTFRobotDestruction_Robot>::Update(CTFRobotDestruction_Robot*, float)
 T Behavior<CTFRobotDestruction_Robot>::~Behavior()
 T Behavior<CZombie>::DestroyAction(Action<CZombie>*)
 T Behavior<CZombie>::FirstContainedResponder() const
 T Behavior<CZombie>::IsHindrance(INextBot const*, CBaseEntity*) const
 T Behavior<CZombie>::IsPositionAllowed(INextBot const*, Vector const&) const
 T Behavior<CZombie>::NextContainedResponder(INextBotEventResponder*) const
 T Behavior<CZombie>::SelectMoreDangerousThreat(INextBot const*, CBaseCombatCharacter const*, CKnownEntity const*, CKnownEntity const*) const
 T Behavior<CZombie>::SelectTargetPoint(INextBot const*, CBaseCombatCharacter const*) const
 T Behavior<CZombie>::ShouldAttack(INextBot const*, CKnownEntity const*) const
 T Behavior<CZombie>::ShouldHurry(INextBot const*) const
 T Behavior<CZombie>::ShouldPickUp(INextBot const*, CBaseEntity*) const
 T Behavior<CZombie>::ShouldRetreat(INextBot const*) const
 T Behavior<CZombie>::Update(CZombie*, float)
 T Behavior<CZombie>::~Behavior()
 T Bias(float, float)
 T BlendBones(CStudioHdr const*, Quaternion*, Vector*, mstudioseqdesc_t&, int, Quaternion const*, Vector const*, float, int)
 T BombHeadForTeam(int, int)
 T BotGenerateAndWearItem(CTFPlayer*, CEconItemView*)
 T BotGenerateAndWearItem(CTFPlayer*, char const*)
 T BotMirrorPlayerClassAndItems(CTFPlayer*, CTFPlayer*)
 T BotPutInServer(bool, bool, int, int, char const*)
 T Bot_RunAll()
 T Bot_Think(CTFPlayer*)
 T BoxOnPlaneSide(float const*, float const*, cplane_t const*)
 T BreakModelCreateSingle(CBaseEntity*, breakmodel_t*, Vector const&, QAngle const&, Vector const&, Vector const&, int, breakablepropparams_t const&)
 T BreakModelList(CUtlVector<breakmodel_t, CUtlMemory<breakmodel_t, int> >&, int, float, int)
 T BuildBoneChain(CStudioHdr const*, matrix3x4_t const&, Vector const*, Quaternion const*, int, matrix3x4_t*, CBoneBitList&)
 T BuildChangeList(levellist_t*, int)
 T BuildCustomResponseSystemGivenCriteria(char const*, char const*, AI_CriteriaSet&, float)
 T BuildGammaTable(float, float, float, int)
 T BuildGibList(CUtlVector<breakmodel_t, CUtlMemory<breakmodel_t, int> >&, int, float, int)
 T BuildPropList(char const*, CUtlVector<breakmodel_t, CUtlMemory<breakmodel_t, int> >&, int, float, int)
 T BuildSelectedSet::WriteConnections(CNavArea*, KeyValues*, NavDirType, char const*)
 T BuildSelectedSet::operator()(CNavArea*)
 T CAIHintVector::~CAIHintVector()
 T CAISound::GetDataDescMap()
 T CAISound::InputEmitAISound(inputdata_t&)
 T CAISound::InputInsertSound(inputdata_t&)
 T CAISound::~CAISound()
 T CAI_AllySpeechManager* _CreateEntityTemplate<CAI_AllySpeechManager>(CAI_AllySpeechManager*, char const*)
 T CAI_AllySpeechManager::GetDataDescMap()
 T CAI_AllySpeechManager::Spawn()
 T CAI_AllySpeechManager::~CAI_AllySpeechManager()
 T CAI_AssaultBehavior::FindAssaultPoint(string_t)
 T CAI_AssaultBehavior::InitializeBehavior()
 T CAI_AssaultBehavior::SetParameters(string_t, AssaultCue_t, int)
 T CAI_AssaultBehavior::UnlockRallyPoint()
 T CAI_AssaultGoal::DisableGoal(CAI_BaseNPC*)
 T CAI_AssaultGoal::EnableGoal(CAI_BaseNPC*)
 T CAI_AssaultGoal::GetDataDescMap()
 T CAI_AssaultGoal::InputBeginAssault(inputdata_t&)
 T CAI_AssaultGoal::~CAI_AssaultGoal()
 T CAI_BaseActor::AddLookTarget(CBaseEntity*, float, float, float)
 T CAI_BaseActor::AddLookTarget(Vector const&, float, float, float)
 T CAI_BaseActor::CheckSceneEventCompletion(CSceneEventInfo*, float, CChoreoScene*, CChoreoEvent*)
 T CAI_BaseActor::ClearLookTarget(CBaseEntity*)
 T CAI_BaseActor::ClearSceneEvent(CSceneEventInfo*, bool, bool)
 T CAI_BaseActor::CreateComponents()
 T CAI_BaseActor::CreateExpresser()
 T CAI_BaseActor::ExpireCurrentRandomLookTarget()
 T CAI_BaseActor::EyeDirection2D()
 T CAI_BaseActor::EyeDirection3D()
 T CAI_BaseActor::EyePosition()
 T CAI_BaseActor::GetDataDescMap()
 T CAI_BaseActor::GetExpresser()
 T CAI_BaseActor::GetHeadDebounce()
 T CAI_BaseActor::HasActiveLookTargets()
 T CAI_BaseActor::HeadDirection2D()
 T CAI_BaseActor::HeadDirection3D()
 T CAI_BaseActor::HeadTargetValidity(Vector const&)
 T CAI_BaseActor::InputSetExpressionOverride(inputdata_t&)
 T CAI_BaseActor::IsServerSideFlexController(char const*)
 T CAI_BaseActor::MaintainLookTargets(float)
 T CAI_BaseActor::MakeRandomLookTarget(AILookTargetArgs_t*, float, float)
 T CAI_BaseActor::OnNewLookTarget()
 T CAI_BaseActor::OnSelectedLookTarget(AILookTargetArgs_t*)
 T CAI_BaseActor::OnStateChange(NPC_STATE, NPC_STATE)
 T CAI_BaseActor::PickLookTarget(CAI_InterestTarget&, bool, float, float)
 T CAI_BaseActor::PickLookTarget(bool, float, float)
 T CAI_BaseActor::PickRandomLookTarget(AILookTargetArgs_t*)
 T CAI_BaseActor::PickTacticalLookTarget(AILookTargetArgs_t*)
 T CAI_BaseActor::PlayExpressionForState(NPC_STATE)
 T CAI_BaseActor::Precache()
 T CAI_BaseActor::ProcessSceneEvent(CSceneEventInfo*, CChoreoScene*, CChoreoEvent*)
 T CAI_BaseActor::RandomFaceFlex(CSceneEventInfo*, CChoreoScene*, CChoreoEvent*)
 T CAI_BaseActor::SelectRandomExpressionForState(NPC_STATE)
 T CAI_BaseActor::SetExpression(char const*)
 T CAI_BaseActor::SetHeadDirection(Vector const&, float)
 T CAI_BaseActor::SetModel(char const*)
 T CAI_BaseActor::SetViewtarget(Vector const&)
 T CAI_BaseActor::ShouldBruteForceFailedNav()
 T CAI_BaseActor::StartSceneEvent(CSceneEventInfo*, CChoreoScene*, CChoreoEvent*, CChoreoActor*, CBaseEntity*)
 T CAI_BaseActor::StartTaskRangeAttack1(Task_t const*)
 T CAI_BaseActor::StudioFrameAdvance()
 T CAI_BaseActor::UpdateBodyControl()
 T CAI_BaseActor::UpdateHeadControl(Vector const&, float)
 T CAI_BaseActor::UpdateLatchedValues()
 T CAI_BaseActor::UseSemaphore()
 T CAI_BaseActor::ValidEyeTarget(Vector const&)
 T CAI_BaseActor::ValidHeadTarget(Vector const&)
 T CAI_BaseActor::~CAI_BaseActor()
 T CAI_BaseHumanoid::BuildScheduleTestBits()
 T CAI_BaseHumanoid::CheckAmmo()
 T CAI_BaseHumanoid::HandleInteraction(int, void*, CBaseCombatCharacter*)
 T CAI_BaseHumanoid::OnMoveBlocked(AIMoveResult_t*)
 T CAI_BaseHumanoid::RunTask(Task_t const*)
 T CAI_BaseHumanoid::RunTaskRangeAttack1(Task_t const*)
 T CAI_BaseHumanoid::StartTask(Task_t const*)
 T CAI_BaseHumanoid::StartTaskRangeAttack1(Task_t const*)
 T CAI_BaseHumanoid::TraceAttack(CTakeDamageInfo const&, Vector const&, CGameTrace*, CDmgAccumulator*)
 T CAI_BaseNPC::AccessBehaviors()
 T CAI_BaseNPC::Activate()
 T CAI_BaseNPC::AddClassRelationship(Class_T, Disposition_t, int)
 T CAI_BaseNPC::AddEntityRelationship(CBaseEntity*, Disposition_t, int)
 T CAI_BaseNPC::AddFacingTarget(CBaseEntity*, Vector const&, float, float, float)
 T CAI_BaseNPC::AddFacingTarget(CBaseEntity*, float, float, float)
 T CAI_BaseNPC::AddFacingTarget(Vector const&, float, float, float)
 T CAI_BaseNPC::AddLookTarget(CBaseEntity*, float, float, float)
 T CAI_BaseNPC::AddLookTarget(Vector const&, float, float, float)
 T CAI_BaseNPC::AddRelationship(char const*, CBaseEntity*)
 T CAI_BaseNPC::AddScriptedNPCInteraction(ScriptedNPCInteraction_t*)
 T CAI_BaseNPC::AdvanceToIdealActivity()
 T CAI_BaseNPC::AimGun()
 T CAI_BaseNPC::AlertSound()
 T CAI_BaseNPC::AllowedToIgnite()
 T CAI_BaseNPC::AutoMovement(CBaseEntity*, AIMoveTrace_t*)
 T CAI_BaseNPC::AutoMovement(float, CBaseEntity*, AIMoveTrace_t*)
 T CAI_BaseNPC::BBoxFlat()
 T CAI_BaseNPC::BarnacleDeathSound()
 T CAI_BaseNPC::BeginRappel()
 T CAI_BaseNPC::BestEnemy()
 T CAI_BaseNPC::BodyTarget(Vector const&, bool)
 T CAI_BaseNPC::Break(CBaseEntity*)
 T CAI_BaseNPC::BuildScheduleTestBits()
 T CAI_BaseNPC::CAI_BaseNPC()
 T CAI_BaseNPC::CalcIdealYaw(Vector const&)
 T CAI_BaseNPC::CalcReasonableFacing(bool)
 T CAI_BaseNPC::CalcYawSpeed()
 T CAI_BaseNPC::CalculateForcedInteractionPosition()
 T CAI_BaseNPC::CallNPCThink()
 T CAI_BaseNPC::CanBeAnEnemyOf(CBaseEntity*)
 T CAI_BaseNPC::CanBeUsedAsAFriend()
 T CAI_BaseNPC::CanFlinch()
 T CAI_BaseNPC::CanHolsterWeapon()
 T CAI_BaseNPC::CanPlaySentence(bool)
 T CAI_BaseNPC::CanPlaySequence(bool, int)
 T CAI_BaseNPC::CanRespondToEvent(char const*)
 T CAI_BaseNPC::CanRunAScriptedNPCInteraction(bool)
 T CAI_BaseNPC::CanStandOn(CBaseEntity*) const
 T CAI_BaseNPC::CapabilitiesAdd(int)
 T CAI_BaseNPC::CapabilitiesClear()
 T CAI_BaseNPC::CapabilitiesGet() const
 T CAI_BaseNPC::CapabilitiesRemove(int)
 T CAI_BaseNPC::CheckAmmo()
 T CAI_BaseNPC::CheckFlinches()
 T CAI_BaseNPC::CheckOnGround()
 T CAI_BaseNPC::CheckPVSCondition()
 T CAI_BaseNPC::CheckPhysicsContacts()
 T CAI_BaseNPC::CheckSquad()
 T CAI_BaseNPC::CheckTarget(CBaseEntity*)
 T CAI_BaseNPC::ChooseEnemy()
 T CAI_BaseNPC::CineCleanup()
 T CAI_BaseNPC::CleanupOnDeath(CBaseEntity*, bool)
 T CAI_BaseNPC::ClearAttackConditions()
 T CAI_BaseNPC::ClearCommandGoal()
 T CAI_BaseNPC::ClearCondition(int)
 T CAI_BaseNPC::ClearCustomInterruptCondition(int)
 T CAI_BaseNPC::ClearHintNode(float)
 T CAI_BaseNPC::ClearSchedule(char const*)
 T CAI_BaseNPC::ClearSenseConditions()
 T CAI_BaseNPC::ClearTransientConditions()
 T CAI_BaseNPC::CollectShotStats(Vector const&, Vector const&)
 T CAI_BaseNPC::ConditionName(int)
 T CAI_BaseNPC::CorpseFallThink()
 T CAI_BaseNPC::CoverRadius()
 T CAI_BaseNPC::CreateComponents()
 T CAI_BaseNPC::CreateCustomTarget(Vector const&, float)
 T CAI_BaseNPC::CreateLocalNavigator()
 T CAI_BaseNPC::CreateMotor()
 T CAI_BaseNPC::CreateMoveProbe()
 T CAI_BaseNPC::CreateNavigator()
 T CAI_BaseNPC::CreatePathfinder()
 T CAI_BaseNPC::CreateSenses()
 T CAI_BaseNPC::CreateTacticalServices()
 T CAI_BaseNPC::CreateVPhysics()
 T CAI_BaseNPC::Crouch()
 T CAI_BaseNPC::CurrentWeaponLOSCondition(Vector const&, bool)
 T CAI_BaseNPC::DeathSound(CTakeDamageInfo const&)
 T CAI_BaseNPC::DecalTrace(CGameTrace*, char const*)
 T CAI_BaseNPC::DesireCrouch()
 T CAI_BaseNPC::DiscardScheduleState()
 T CAI_BaseNPC::DoImpactEffect(CGameTrace&, int)
 T CAI_BaseNPC::DrawDebugGeometryOverlays()
 T CAI_BaseNPC::DrawDebugTextOverlays()
 T CAI_BaseNPC::DumpTaskTimings()
 T CAI_BaseNPC::EndTaskOverlay()
 T CAI_BaseNPC::EnemyDistTolerance()
 T CAI_BaseNPC::EnemyDistance(CBaseEntity*)
 T CAI_BaseNPC::Event_Gibbed(CTakeDamageInfo const&)
 T CAI_BaseNPC::Event_Killed(CTakeDamageInfo const&)
 T CAI_BaseNPC::ExitScriptedSequence()
 T CAI_BaseNPC::EyeDirection2D()
 T CAI_BaseNPC::EyeDirection3D()
 T CAI_BaseNPC::EyeLookTarget()
 T CAI_BaseNPC::EyeOffset(Activity)
 T CAI_BaseNPC::EyePosition()
 T CAI_BaseNPC::FCanCheckAttacks()
 T CAI_BaseNPC::FInAimCone(Vector const&)
 T CAI_BaseNPC::FOkToMakeSound(int)
 T CAI_BaseNPC::FScheduleDone()
 T CAI_BaseNPC::FValidateHintType(CAI_Hint*)
 T CAI_BaseNPC::FacingIdeal()
 T CAI_BaseNPC::FacingPosition()
 T CAI_BaseNPC::FearSound()
 T CAI_BaseNPC::FindCoverFromEnemy(bool, float, float)
 T CAI_BaseNPC::FindCoverPos(CBaseEntity*, Vector*)
 T CAI_BaseNPC::FindCoverPos(CSound*, Vector*)
 T CAI_BaseNPC::FindCoverPosInRadius(CBaseEntity*, Vector const&, float, Vector*)
 T CAI_BaseNPC::FindNamedEntity(char const*, IEntityFindFilter*)
 T CAI_BaseNPC::FindSpotForNPCInRadius(Vector*, Vector const&, CAI_BaseNPC*, float, bool)
 T CAI_BaseNPC::FireBullets(FireBulletsInfo_t const&)
 T CAI_BaseNPC::ForceSelectedGo(CBaseEntity*, Vector const&, Vector const&, bool)
 T CAI_BaseNPC::ForceSelectedGoRandom()
 T CAI_BaseNPC::FoundEnemySound()
 T CAI_BaseNPC::GatherAttackConditions(CBaseEntity*, float)
 T CAI_BaseNPC::GatherConditions()
 T CAI_BaseNPC::GatherEnemyConditions(CBaseEntity*)
 T CAI_BaseNPC::GetActivityID(char const*)
 T CAI_BaseNPC::GetActivityName(int)
 T CAI_BaseNPC::GetAlternateMoveShootTarget()
 T CAI_BaseNPC::GetAutoAimCenter()
 T CAI_BaseNPC::GetBestScent()
 T CAI_BaseNPC::GetBestSound(int)
 T CAI_BaseNPC::GetClassScheduleIdSpace()
 T CAI_BaseNPC::GetConditionID(char const*)
 T CAI_BaseNPC::GetCoverActivity(CAI_Hint*)
 T CAI_BaseNPC::GetCrouchEyeOffset()
 T CAI_BaseNPC::GetCrouchGunOffset()
 T CAI_BaseNPC::GetDataDescMap()
 T CAI_BaseNPC::GetDefaultNavGoalTolerance()
 T CAI_BaseNPC::GetEnemies()
 T CAI_BaseNPC::GetEnemy()
 T CAI_BaseNPC::GetEnemy() const
 T CAI_BaseNPC::GetEnemyLKP() const
 T CAI_BaseNPC::GetEnemyLastTimeSeen() const
 T CAI_BaseNPC::GetExpresser()
 T CAI_BaseNPC::GetFacingDirection(Vector&)
 T CAI_BaseNPC::GetFailSchedule()
 T CAI_BaseNPC::GetFlinchActivity(bool, bool)
 T CAI_BaseNPC::GetGlobalScheduleId(int)
 T CAI_BaseNPC::GetGoalRepathTolerance(CBaseEntity*, GoalType_t, Vector const&, Vector const&)
 T CAI_BaseNPC::GetHintActivity(short, Activity)
 T CAI_BaseNPC::GetHintDelay(short)
 T CAI_BaseNPC::GetHitgroupDamageMultiplier(int, CTakeDamageInfo const&)
 T CAI_BaseNPC::GetJumpGravity() const
 T CAI_BaseNPC::GetLocalScheduleId(int)
 T CAI_BaseNPC::GetLocalTaskId(int)
 T CAI_BaseNPC::GetMaxJumpSpeed() const
 T CAI_BaseNPC::GetMaxTacticalLateralMovement()
 T CAI_BaseNPC::GetNavTargetEntity()
 T CAI_BaseNPC::GetNavType() const
 T CAI_BaseNPC::GetNewSchedule()
 T CAI_BaseNPC::GetNodeViewOffset()
 T CAI_BaseNPC::GetReactionDelay(CBaseEntity*)
 T CAI_BaseNPC::GetReasonableFacingDist()
 T CAI_BaseNPC::GetReloadActivity(CAI_Hint*)
 T CAI_BaseNPC::GetRunningBehavior()
 T CAI_BaseNPC::GetSchedule(int)
 T CAI_BaseNPC::GetScheduleID(char const*)
 T CAI_BaseNPC::GetScheduleOfType(int)
 T CAI_BaseNPC::GetSchedulingErrorName()
 T CAI_BaseNPC::GetScriptCustomMoveActivity()
 T CAI_BaseNPC::GetScriptCustomMoveSequence()
 T CAI_BaseNPC::GetServerClass()
 T CAI_BaseNPC::GetShootEnemyDir(Vector const&, bool)
 T CAI_BaseNPC::GetSmoothedVelocity()
 T CAI_BaseNPC::GetSoundInterests()
 T CAI_BaseNPC::GetSoundPriority(CSound*)
 T CAI_BaseNPC::GetSquadCommandRepresentative()
 T CAI_BaseNPC::GetSquadSlotDebugName(int)
 T CAI_BaseNPC::GetStepDownMultiplier() const
 T CAI_BaseNPC::GetStoppedActivity()
 T CAI_BaseNPC::GetTask()
 T CAI_BaseNPC::GetTaskID(char const*)
 T CAI_BaseNPC::GetTimeToNavGoal()
 T CAI_BaseNPC::GetTracerType()
 T CAI_BaseNPC::GiveWeapon(string_t)
 T CAI_BaseNPC::HandleAnimEvent(animevent_t*)
 T CAI_BaseNPC::HandleInteraction(int, void*, CBaseCombatCharacter*)
 T CAI_BaseNPC::HasCondition(int)
 T CAI_BaseNPC::HasCondition(int, bool)
 T CAI_BaseNPC::HeadDirection2D()
 T CAI_BaseNPC::HeadDirection3D()
 T CAI_BaseNPC::HearingSensitivity()
 T CAI_BaseNPC::HolsterWeapon()
 T CAI_BaseNPC::IdleSound()
 T CAI_BaseNPC::Ignite(float, bool, float, bool)
 T CAI_BaseNPC::ImpactTrace(CGameTrace*, int, char const*)
 T CAI_BaseNPC::InitDefaultActivitySR()
 T CAI_BaseNPC::InitDefaultConditionSR()
 T CAI_BaseNPC::InitDefaultScheduleSR()
 T CAI_BaseNPC::InitDefaultSquadSlotSR()
 T CAI_BaseNPC::InitDefaultTaskSR()
 T CAI_BaseNPC::InitSchedulingTables()
 T CAI_BaseNPC::InitSquad()
 T CAI_BaseNPC::InnateRange1MaxRange()
 T CAI_BaseNPC::InnateRange1MinRange()
 T CAI_BaseNPC::InnateWeaponLOSCondition(Vector const&, Vector const&, bool)
 T CAI_BaseNPC::InputActivateSpeedModifier(inputdata_t&)
 T CAI_BaseNPC::InputBeginRappel(inputdata_t&)
 T CAI_BaseNPC::InputBreak(inputdata_t&)
 T CAI_BaseNPC::InputDisableSpeedModifier(inputdata_t&)
 T CAI_BaseNPC::InputForceInteractionWithNPC(inputdata_t&)
 T CAI_BaseNPC::InputForgetEntity(inputdata_t&)
 T CAI_BaseNPC::InputGagDisable(inputdata_t&)
 T CAI_BaseNPC::InputGagEnable(inputdata_t&)
 T CAI_BaseNPC::InputHolsterAndDestroyWeapon(inputdata_t&)
 T CAI_BaseNPC::InputHolsterWeapon(inputdata_t&)
 T CAI_BaseNPC::InputIgnoreDangerSounds(inputdata_t&)
 T CAI_BaseNPC::InputInsideTransition(inputdata_t&)
 T CAI_BaseNPC::InputOutsideTransition(inputdata_t&)
 T CAI_BaseNPC::InputSetEnemyFilter(inputdata_t&)
 T CAI_BaseNPC::InputSetHealth(inputdata_t&)
 T CAI_BaseNPC::InputSetRelationship(inputdata_t&)
 T CAI_BaseNPC::InputSetSpeedModifierRadius(inputdata_t&)
 T CAI_BaseNPC::InputSetSpeedModifierSpeed(inputdata_t&)
 T CAI_BaseNPC::InputSetSquad(inputdata_t&)
 T CAI_BaseNPC::InputStartScripting(inputdata_t&)
 T CAI_BaseNPC::InputStopScripting(inputdata_t&)
 T CAI_BaseNPC::InputUnholsterWeapon(inputdata_t&)
 T CAI_BaseNPC::InputUpdateEnemyMemory(inputdata_t&)
 T CAI_BaseNPC::InputWake(inputdata_t&)
 T CAI_BaseNPC::IsActivityFinished()
 T CAI_BaseNPC::IsActivityMovementPhased(Activity)
 T CAI_BaseNPC::IsAllowedToDodge()
 T CAI_BaseNPC::IsCommandMoving()
 T CAI_BaseNPC::IsCommandable()
 T CAI_BaseNPC::IsCoverPosition(Vector const&, Vector const&)
 T CAI_BaseNPC::IsCrouchedActivity(Activity)
 T CAI_BaseNPC::IsCrouching()
 T CAI_BaseNPC::IsCurSchedule(int, bool)
 T CAI_BaseNPC::IsCurTaskContinuousMove()
 T CAI_BaseNPC::IsHeavyDamage(CTakeDamageInfo const&)
 T CAI_BaseNPC::IsInterruptable()
 T CAI_BaseNPC::IsJumpLegal(Vector const&, Vector const&, Vector const&) const
 T CAI_BaseNPC::IsJumpLegal(Vector const&, Vector const&, Vector const&, float, float, float) const
 T CAI_BaseNPC::IsLightDamage(CTakeDamageInfo const&)
 T CAI_BaseNPC::IsMedic()
 T CAI_BaseNPC::IsMoving()
 T CAI_BaseNPC::IsNPC() const
 T CAI_BaseNPC::IsNavigationUrgent()
 T CAI_BaseNPC::IsPlayerAlly(CBasePlayer*)
 T CAI_BaseNPC::IsScheduleValid()
 T CAI_BaseNPC::IsSilentSquadMember() const
 T CAI_BaseNPC::IsSquadmateInSpread(Vector const&, Vector const&, float, float)
 T CAI_BaseNPC::IsTemplate()
 T CAI_BaseNPC::IsUnreachable(CBaseEntity*)
 T CAI_BaseNPC::IsUnusableNode(int, CAI_Hint*)
 T CAI_BaseNPC::IsValidCommandTarget(CBaseEntity*)
 T CAI_BaseNPC::IsValidCover(Vector const&, CAI_Hint const*)
 T CAI_BaseNPC::IsValidEnemy(CBaseEntity*)
 T CAI_BaseNPC::IsValidMoveAwayDest(Vector const&)
 T CAI_BaseNPC::IsValidReasonableFacing(Vector const&, float)
 T CAI_BaseNPC::IsValidShootPosition(Vector const&, CAI_Node*, CAI_Hint const*)
 T CAI_BaseNPC::IsWaitFinished()
 T CAI_BaseNPC::IsWaitingToRappel()
 T CAI_BaseNPC::IsWeaponStateChanging()
 T CAI_BaseNPC::JustMadeSound(int, float)
 T CAI_BaseNPC::KeyValue(char const*, char const*)
 T CAI_BaseNPC::LineOfSightDist(Vector const&, float)
 T CAI_BaseNPC::LoadDefaultSchedules()
 T CAI_BaseNPC::LoadSchedules()
 T CAI_BaseNPC::LoadedSchedules()
 T CAI_BaseNPC::LockBestSound()
 T CAI_BaseNPC::LostEnemySound()
 T CAI_BaseNPC::MaintainActivity()
 T CAI_BaseNPC::MaintainLookTargets(float)
 T CAI_BaseNPC::MaintainSchedule()
 T CAI_BaseNPC::MaintainTurnActivity()
 T CAI_BaseNPC::MakeAIFootstepSound(float, float)
 T CAI_BaseNPC::MakeTracer(Vector const&, CGameTrace const&, int)
 T CAI_BaseNPC::MaxYawSpeed()
 T CAI_BaseNPC::MeleeAttack1Conditions(float, float)
 T CAI_BaseNPC::MeleeAttack2Conditions(float, float)
 T CAI_BaseNPC::ModifyOrAppendCriteria(AI_CriteriaSet&)
 T CAI_BaseNPC::MoveOrder(Vector const&, CAI_BaseNPC**, int)
 T CAI_BaseNPC::MovementCost(int, Vector const&, Vector const&, float*)
 T CAI_BaseNPC::NPCInit()
 T CAI_BaseNPC::NPCInitThink()
 T CAI_BaseNPC::NPCThink()
 T CAI_BaseNPC::NPCUse(CBaseEntity*, CBaseEntity*, USE_TYPE, float)
 T CAI_BaseNPC::NPC_TranslateActivity(Activity)
 T CAI_BaseNPC::NetworkStateChanged_m_lifeState()
 T CAI_BaseNPC::NetworkStateChanged_m_lifeState(void*)
 T CAI_BaseNPC::NotifyDeadFriend(CBaseEntity*)
 T CAI_BaseNPC::NotifyFriendsOfDamage(CBaseEntity*)
 T CAI_BaseNPC::NotifyPushMove()
 T CAI_BaseNPC::NumBehaviors()
 T CAI_BaseNPC::ObjectCaps()
 T CAI_BaseNPC::OccupyStrategySlotRange(int, int)
 T CAI_BaseNPC::OnBeginMoveAndShoot()
 T CAI_BaseNPC::OnBehaviorChangeStatus(CAI_BehaviorBase*, bool)
 T CAI_BaseNPC::OnCalcBaseMove(AILocalMoveGoal_t*, float, AIMoveResult_t*)
 T CAI_BaseNPC::OnChangeActiveWeapon(CBaseCombatWeapon*, CBaseCombatWeapon*)
 T CAI_BaseNPC::OnChangeActivity(Activity)
 T CAI_BaseNPC::OnChangeHintGroup(string_t, string_t)
 T CAI_BaseNPC::OnClearGoal(CAI_BehaviorBase*, CAI_GoalEntity*)
 T CAI_BaseNPC::OnDoorBlocked(CBasePropDoor*)
 T CAI_BaseNPC::OnDoorFullyOpen(CBasePropDoor*)
 T CAI_BaseNPC::OnEndMoveAndShoot()
 T CAI_BaseNPC::OnFriendDamaged(CBaseCombatCharacter*, CBaseEntity*)
 T CAI_BaseNPC::OnGivenWeapon(CBaseCombatWeapon*)
 T CAI_BaseNPC::OnListened()
 T CAI_BaseNPC::OnLooked(int)
 T CAI_BaseNPC::OnMoveOrder()
 T CAI_BaseNPC::OnMoveToCommandGoalFailed()
 T CAI_BaseNPC::OnMovementComplete()
 T CAI_BaseNPC::OnMovementFailed()
 T CAI_BaseNPC::OnObstructingDoor(AILocalMoveGoal_t*, CBaseDoor*, float, AIMoveResult_t*)
 T CAI_BaseNPC::OnObstructionPreSteer(AILocalMoveGoal_t*, float, AIMoveResult_t*)
 T CAI_BaseNPC::OnRangeAttack1()
 T CAI_BaseNPC::OnRestore()
 T CAI_BaseNPC::OnScheduleChange()
 T CAI_BaseNPC::OnSeeEntity(CBaseEntity*)
 T CAI_BaseNPC::OnStartScene()
 T CAI_BaseNPC::OnStartSchedule(int)
 T CAI_BaseNPC::OnStateChange(NPC_STATE, NPC_STATE)
 T CAI_BaseNPC::OnTakeDamage_Alive(CTakeDamageInfo const&)
 T CAI_BaseNPC::OnTakeDamage_Dead(CTakeDamageInfo const&)
 T CAI_BaseNPC::OnTakeDamage_Dying(CTakeDamageInfo const&)
 T CAI_BaseNPC::OnTargetOrder()
 T CAI_BaseNPC::OnUpcomingPropDoor(AILocalMoveGoal_t*, CBasePropDoor*, float, AIMoveResult_t*)
 T CAI_BaseNPC::OnUpdateShotRegulator()
 T CAI_BaseNPC::OpenPropDoorBegin(CBasePropDoor*)
 T CAI_BaseNPC::OverrideMove(float)
 T CAI_BaseNPC::OverrideMoveFacing(AILocalMoveGoal_t const&, float)
 T CAI_BaseNPC::PainSound(CTakeDamageInfo const&)
 T CAI_BaseNPC::ParseScriptedNPCInteractions()
 T CAI_BaseNPC::PassesDamageFilter(CTakeDamageInfo const&)
 T CAI_BaseNPC::PhysicsSolidMaskForEntity() const
 T CAI_BaseNPC::PickupItem(CBaseEntity*)
 T CAI_BaseNPC::PickupWeapon(CBaseCombatWeapon*)
 T CAI_BaseNPC::PlayFlinchGesture()
 T CAI_BaseNPC::PlayScriptedSentence(char const*, float, float, soundlevel_t, bool, CBaseEntity*)
 T CAI_BaseNPC::PlaySentence(char const*, float, float, soundlevel_t, CBaseEntity*)
 T CAI_BaseNPC::PlayerHasIlluminatedNPC(CBasePlayer*, float)
 T CAI_BaseNPC::PlayerInSpread(Vector const&, Vector const&, float, float, bool)
 T CAI_BaseNPC::PlayerPenetratingVPhysics()
 T CAI_BaseNPC::PointInSpread(CBaseCombatCharacter*, Vector const&, Vector const&, Vector const&, float, float)
 T CAI_BaseNPC::PopulatePoseParameters()
 T CAI_BaseNPC::PostConstructor(char const*)
 T CAI_BaseNPC::PostMovement()
 T CAI_BaseNPC::PostNPCInit()
 T CAI_BaseNPC::PostRunStopMoving()
 T CAI_BaseNPC::PostscheduleThink()
 T CAI_BaseNPC::PreNPCThink()
 T CAI_BaseNPC::PreThink()
 T CAI_BaseNPC::Precache()
 T CAI_BaseNPC::PrescheduleThink()
 T CAI_BaseNPC::QueryHearSound(CSound*)
 T CAI_BaseNPC::QuerySeeEntity(CBaseEntity*, bool)
 T CAI_BaseNPC::RangeAttack1Conditions(float, float)
 T CAI_BaseNPC::RangeAttack2Conditions(float, float)
 T CAI_BaseNPC::RebalanceThinks()
 T CAI_BaseNPC::RelaxAim()
 T CAI_BaseNPC::RememberUnreachable(CBaseEntity*, float)
 T CAI_BaseNPC::RemoveIgnoredConditions()
 T CAI_BaseNPC::RemoveMemory()
 T CAI_BaseNPC::ReportAIState()
 T CAI_BaseNPC::ReportOverThinkLimit(float)
 T CAI_BaseNPC::ResetIdealActivity(Activity)
 T CAI_BaseNPC::ResolveActivityToSequence(Activity, int&, Activity&, Activity&)
 T CAI_BaseNPC::RespondedTo(char const*, bool, bool)
 T CAI_BaseNPC::Restore(IRestore&)
 T CAI_BaseNPC::RunAI()
 T CAI_BaseNPC::RunAnimation()
 T CAI_BaseNPC::RunAttackTask(int)
 T CAI_BaseNPC::RunDieTask()
 T CAI_BaseNPC::RunTask(Task_t const*)
 T CAI_BaseNPC::RunTask(Task_t*)
 T CAI_BaseNPC::Save(ISave&)
 T CAI_BaseNPC::ScheduledFollowPath(int, CBaseEntity*, Activity)
 T CAI_BaseNPC::ScheduledMoveToGoalEntity(int, CBaseEntity*, Activity)
 T CAI_BaseNPC::SelectAlertIdealState()
 T CAI_BaseNPC::SelectAlertSchedule()
 T CAI_BaseNPC::SelectCombatSchedule()
 T CAI_BaseNPC::SelectDeadSchedule()
 T CAI_BaseNPC::SelectDeathPose(CTakeDamageInfo const&)
 T CAI_BaseNPC::SelectFailSchedule(int, int, int)
 T CAI_BaseNPC::SelectFlinchSchedule()
 T CAI_BaseNPC::SelectIdealState()
 T CAI_BaseNPC::SelectIdleIdealState()
 T CAI_BaseNPC::SelectIdleSchedule()
 T CAI_BaseNPC::SelectSchedule()
 T CAI_BaseNPC::SelectScriptIdealState()
 T CAI_BaseNPC::SetActivity(Activity)
 T CAI_BaseNPC::SetActivityAndSequence(Activity, int, Activity, Activity)
 T CAI_BaseNPC::SetAim(Vector const&)
 T CAI_BaseNPC::SetCommandGoal(Vector const&)
 T CAI_BaseNPC::SetCondition(int)
 T CAI_BaseNPC::SetCustomInterruptCondition(int)
 T CAI_BaseNPC::SetDefaultEyeOffset()
 T CAI_BaseNPC::SetDistLook(float)
 T CAI_BaseNPC::SetEnemy(CBaseEntity*, bool)
 T CAI_BaseNPC::SetEnemyOccluder(CBaseEntity*)
 T CAI_BaseNPC::SetHeadDirection(Vector const&, float)
 T CAI_BaseNPC::SetHintGroup(string_t, bool)
 T CAI_BaseNPC::SetHintNode(CAI_Hint*)
 T CAI_BaseNPC::SetHullSizeNormal(bool)
 T CAI_BaseNPC::SetHullSizeSmall(bool)
 T CAI_BaseNPC::SetIdealActivity(Activity)
 T CAI_BaseNPC::SetNavType(Navigation_t)
 T CAI_BaseNPC::SetPlayerAvoidState()
 T CAI_BaseNPC::SetSchedule(CAI_Schedule*)
 T CAI_BaseNPC::SetSchedule(int)
 T CAI_BaseNPC::SetScriptedScheduleIgnoreConditions(Interruptability_t)
 T CAI_BaseNPC::SetSequenceById(int)
 T CAI_BaseNPC::SetSquad(CAI_Squad*)
 T CAI_BaseNPC::SetState(NPC_STATE)
 T CAI_BaseNPC::SetTarget(CBaseEntity*)
 T CAI_BaseNPC::SetTurnActivity()
 T CAI_BaseNPC::SetWait(float, float)
 T CAI_BaseNPC::SetupVPhysicsHull()
 T CAI_BaseNPC::ShouldAcceptGoal(CAI_BehaviorBase*, CAI_GoalEntity*)
 T CAI_BaseNPC::ShouldAlwaysThink()
 T CAI_BaseNPC::ShouldAutoSummon()
 T CAI_BaseNPC::ShouldBruteForceFailedNav()
 T CAI_BaseNPC::ShouldChooseNewEnemy()
 T CAI_BaseNPC::ShouldFadeOnDeath()
 T CAI_BaseNPC::ShouldFailNav(bool)
 T CAI_BaseNPC::ShouldGoToIdleState()
 T CAI_BaseNPC::ShouldIgnoreSound(CSound*)
 T CAI_BaseNPC::ShouldLookForBetterWeapon()
 T CAI_BaseNPC::ShouldMoveAndShoot()
 T CAI_BaseNPC::ShouldMoveWait()
 T CAI_BaseNPC::ShouldNotDistanceCull()
 T CAI_BaseNPC::ShouldPickADeathPose()
 T CAI_BaseNPC::ShouldPlayIdleSound()
 T CAI_BaseNPC::ShouldPlayerAvoid()
 T CAI_BaseNPC::ShouldProbeCollideAgainstEntity(CBaseEntity*)
 T CAI_BaseNPC::ShouldSavePhysics()
 T CAI_BaseNPC::Sleep()
 T CAI_BaseNPC::SpeakSentence(int)
 T CAI_BaseNPC::SquadSlotName(int)
 T CAI_BaseNPC::Stand()
 T CAI_BaseNPC::StartNPC()
 T CAI_BaseNPC::StartScriptMoveToTargetTask(int)
 T CAI_BaseNPC::StartTargetHandling(CBaseEntity*)
 T CAI_BaseNPC::StartTask(Task_t const*)
 T CAI_BaseNPC::StartTask(Task_t*)
 T CAI_BaseNPC::StartTouch(CBaseEntity*)
 T CAI_BaseNPC::StepHeight() const
 T CAI_BaseNPC::TargetOrder(CBaseEntity*, CAI_BaseNPC**, int)
 T CAI_BaseNPC::TaskComplete(bool)
 T CAI_BaseNPC::TaskFail(int)
 T CAI_BaseNPC::TaskIsRunning()
 T CAI_BaseNPC::TaskMovementComplete()
 T CAI_BaseNPC::TaskName(int)
 T CAI_BaseNPC::Teleport(Vector const*, QAngle const*, Vector const*)
 T CAI_BaseNPC::TestShootPosition(Vector const&, Vector const&)
 T CAI_BaseNPC::TraceAttack(CTakeDamageInfo const&, Vector const&, CGameTrace*, CDmgAccumulator*)
 T CAI_BaseNPC::TranslateActivity(Activity, Activity*)
 T CAI_BaseNPC::TranslateNavGoal(CBaseEntity*, Vector&)
 T CAI_BaseNPC::TranslateSchedule(int)
 T CAI_BaseNPC::TryRestoreHull()
 T CAI_BaseNPC::UnholsterWeapon()
 T CAI_BaseNPC::UpdateEfficiency(bool)
 T CAI_BaseNPC::UpdateEnemyMemory(CBaseEntity*, Vector const&, CBaseEntity*)
 T CAI_BaseNPC::UpdateEnemyPos()
 T CAI_BaseNPC::UpdateOnRemove()
 T CAI_BaseNPC::UpdateSleepState(bool)
 T CAI_BaseNPC::UpdateTargetPos()
 T CAI_BaseNPC::UpdateTransmitState()
 T CAI_BaseNPC::UpdateTurnGesture()
 T CAI_BaseNPC::UseAttackSquadSlots()
 T CAI_BaseNPC::VacateStrategySlot()
 T CAI_BaseNPC::ValidEyeTarget(Vector const&)
 T CAI_BaseNPC::ValidateNavGoal()
 T CAI_BaseNPC::Wake(bool)
 T CAI_BaseNPC::WeaponLOSCondition(Vector const&, Vector const&, bool)
 T CAI_BaseNPC::Weapon_IsBetterAvailable()
 T CAI_BaseNPC::Weapon_ShootPosition()
 T CAI_BaseNPC::WokeThisTick() const
 T CAI_BaseNPC::YouForgotToImplementOrDeclareServerClass()
 T CAI_BaseNPC::~CAI_BaseNPC()
 T CAI_BattleLine::GetDataDescMap()
 T CAI_BattleLine::InputActivate(inputdata_t&)
 T CAI_BattleLine::InputDeactivate(inputdata_t&)
 T CAI_BattleLine::MovementThink()
 T CAI_BattleLine::NotifyChangeTacticalConstraints()
 T CAI_BattleLine::Spawn()
 T CAI_BattleLine::UpdateOnRemove()
 T CAI_BattleLine::~CAI_BattleLine()
 T CAI_BehaviorBase::NotifyChangeBehaviorStatus(bool)
 T CAI_BehaviorBase::RestoreBehaviors(IRestore&, CAI_BehaviorBase**, int)
 T CAI_BehaviorBase::SaveBehaviors(ISave&, CAI_BehaviorBase*, CAI_BehaviorBase**, int)
 T CAI_BehaviorHost<CAI_BaseNPC>::AccessBehaviors()
 T CAI_BehaviorHost<CAI_BaseNPC>::AimGun()
 T CAI_BehaviorHost<CAI_BaseNPC>::BackBridge_BestEnemy()
 T CAI_BehaviorHost<CAI_BaseNPC>::BackBridge_CanFlinch()
 T CAI_BehaviorHost<CAI_BaseNPC>::BackBridge_CanRunAScriptedNPCInteraction(bool)
 T CAI_BehaviorHost<CAI_BaseNPC>::BackBridge_GatherConditions()
 T CAI_BehaviorHost<CAI_BaseNPC>::BackBridge_GetDefaultNavGoalTolerance()
 T CAI_BehaviorHost<CAI_BaseNPC>::BackBridge_GetFlinchActivity(bool, bool)
 T CAI_BehaviorHost<CAI_BaseNPC>::BackBridge_GetMaxTacticalLateralMovement()
 T CAI_BehaviorHost<CAI_BaseNPC>::BackBridge_GetReasonableFacingDist()
 T CAI_BehaviorHost<CAI_BaseNPC>::BackBridge_HandleAnimEvent(animevent_t*)
 T CAI_BehaviorHost<CAI_BaseNPC>::BackBridge_IsCrouchedActivity(Activity)
 T CAI_BehaviorHost<CAI_BaseNPC>::BackBridge_IsCrouching()
 T CAI_BehaviorHost<CAI_BaseNPC>::BackBridge_IsInterruptable()
 T CAI_BehaviorHost<CAI_BaseNPC>::BackBridge_IsNavigationUrgent()
 T CAI_BehaviorHost<CAI_BaseNPC>::BackBridge_IsValidCover(Vector const&, CAI_Hint const*)
 T CAI_BehaviorHost<CAI_BaseNPC>::BackBridge_IsValidEnemy(CBaseEntity*)
 T CAI_BehaviorHost<CAI_BaseNPC>::BackBridge_IsValidShootPosition(Vector const&, CAI_Node*, CAI_Hint const*)
 T CAI_BehaviorHost<CAI_BaseNPC>::BackBridge_ModifyOrAppendCriteria(AI_CriteriaSet&)
 T CAI_BehaviorHost<CAI_BaseNPC>::BackBridge_NPC_TranslateActivity(Activity)
 T CAI_BehaviorHost<CAI_BaseNPC>::BackBridge_OnCalcBaseMove(AILocalMoveGoal_t*, float, AIMoveResult_t*)
 T CAI_BehaviorHost<CAI_BaseNPC>::BackBridge_OnFriendDamaged(CBaseCombatCharacter*, CBaseEntity*)
 T CAI_BehaviorHost<CAI_BaseNPC>::BackBridge_OnSeeEntity(CBaseEntity*)
 T CAI_BehaviorHost<CAI_BaseNPC>::BackBridge_OnTakeDamage_Alive(CTakeDamageInfo const&)
 T CAI_BehaviorHost<CAI_BaseNPC>::BackBridge_QueryHearSound(CSound*)
 T CAI_BehaviorHost<CAI_BaseNPC>::BackBridge_SelectSchedule()
 T CAI_BehaviorHost<CAI_BaseNPC>::BackBridge_ShouldIgnoreSound(CSound*)
 T CAI_BehaviorHost<CAI_BaseNPC>::BackBridge_ShouldPlayerAvoid()
 T CAI_BehaviorHost<CAI_BaseNPC>::BackBridge_Teleport(Vector const*, QAngle const*, Vector const*)
 T CAI_BehaviorHost<CAI_BaseNPC>::BackBridge_TranslateSchedule(int)
 T CAI_BehaviorHost<CAI_BaseNPC>::BestEnemy()
 T CAI_BehaviorHost<CAI_BaseNPC>::BuildScheduleTestBits()
 T CAI_BehaviorHost<CAI_BaseNPC>::CanFlinch()
 T CAI_BehaviorHost<CAI_BaseNPC>::CanRunAScriptedNPCInteraction(bool)
 T CAI_BehaviorHost<CAI_BaseNPC>::CleanupOnDeath(CBaseEntity*, bool)
 T CAI_BehaviorHost<CAI_BaseNPC>::CreateBehaviors()
 T CAI_BehaviorHost<CAI_BaseNPC>::CreateComponents()
 T CAI_BehaviorHost<CAI_BaseNPC>::Event_Killed(CTakeDamageInfo const&)
 T CAI_BehaviorHost<CAI_BaseNPC>::FValidateHintType(CAI_Hint*)
 T CAI_BehaviorHost<CAI_BaseNPC>::ForceSelectedGo(CBaseEntity*, Vector const&, Vector const&, bool)
 T CAI_BehaviorHost<CAI_BaseNPC>::ForceSelectedGoRandom()
 T CAI_BehaviorHost<CAI_BaseNPC>::GatherConditions()
 T CAI_BehaviorHost<CAI_BaseNPC>::GetDefaultNavGoalTolerance()
 T CAI_BehaviorHost<CAI_BaseNPC>::GetFailSchedule()
 T CAI_BehaviorHost<CAI_BaseNPC>::GetFlinchActivity(bool, bool)
 T CAI_BehaviorHost<CAI_BaseNPC>::GetMaxTacticalLateralMovement()
 T CAI_BehaviorHost<CAI_BaseNPC>::GetNewSchedule()
 T CAI_BehaviorHost<CAI_BaseNPC>::GetReasonableFacingDist()
 T CAI_BehaviorHost<CAI_BaseNPC>::GetRunningBehavior()
 T CAI_BehaviorHost<CAI_BaseNPC>::GetSchedule(int)
 T CAI_BehaviorHost<CAI_BaseNPC>::HandleAnimEvent(animevent_t*)
 T CAI_BehaviorHost<CAI_BaseNPC>::IsCrouchedActivity(Activity)
 T CAI_BehaviorHost<CAI_BaseNPC>::IsCrouching()
 T CAI_BehaviorHost<CAI_BaseNPC>::IsCurTaskContinuousMove()
 T CAI_BehaviorHost<CAI_BaseNPC>::IsInterruptable()
 T CAI_BehaviorHost<CAI_BaseNPC>::IsNavigationUrgent()
 T CAI_BehaviorHost<CAI_BaseNPC>::IsValidCover(Vector const&, CAI_Hint const*)
 T CAI_BehaviorHost<CAI_BaseNPC>::IsValidEnemy(CBaseEntity*)
 T CAI_BehaviorHost<CAI_BaseNPC>::IsValidShootPosition(Vector const&, CAI_Node*, CAI_Hint const*)
 T CAI_BehaviorHost<CAI_BaseNPC>::ModifyOrAppendCriteria(AI_CriteriaSet&)
 T CAI_BehaviorHost<CAI_BaseNPC>::NPCInit()
 T CAI_BehaviorHost<CAI_BaseNPC>::NPC_TranslateActivity(Activity)
 T CAI_BehaviorHost<CAI_BaseNPC>::NumBehaviors()
 T CAI_BehaviorHost<CAI_BaseNPC>::OnBehaviorChangeStatus(CAI_BehaviorBase*, bool)
 T CAI_BehaviorHost<CAI_BaseNPC>::OnCalcBaseMove(AILocalMoveGoal_t*, float, AIMoveResult_t*)
 T CAI_BehaviorHost<CAI_BaseNPC>::OnChangeActiveWeapon(CBaseCombatWeapon*, CBaseCombatWeapon*)
 T CAI_BehaviorHost<CAI_BaseNPC>::OnChangeHintGroup(string_t, string_t)
 T CAI_BehaviorHost<CAI_BaseNPC>::OnChangeRunningBehavior(CAI_BehaviorBase*, CAI_BehaviorBase*)
 T CAI_BehaviorHost<CAI_BaseNPC>::OnFriendDamaged(CBaseCombatCharacter*, CBaseEntity*)
 T CAI_BehaviorHost<CAI_BaseNPC>::OnMovementComplete()
 T CAI_BehaviorHost<CAI_BaseNPC>::OnMovementFailed()
 T CAI_BehaviorHost<CAI_BaseNPC>::OnRestore()
 T CAI_BehaviorHost<CAI_BaseNPC>::OnScheduleChange()
 T CAI_BehaviorHost<CAI_BaseNPC>::OnSeeEntity(CBaseEntity*)
 T CAI_BehaviorHost<CAI_BaseNPC>::OnStartSchedule(int)
 T CAI_BehaviorHost<CAI_BaseNPC>::OnTakeDamage_Alive(CTakeDamageInfo const&)
 T CAI_BehaviorHost<CAI_BaseNPC>::Precache()
 T CAI_BehaviorHost<CAI_BaseNPC>::PrescheduleThink()
 T CAI_BehaviorHost<CAI_BaseNPC>::QueryHearSound(CSound*)
 T CAI_BehaviorHost<CAI_BaseNPC>::Restore(IRestore&)
 T CAI_BehaviorHost<CAI_BaseNPC>::RunTask(Task_t const*)
 T CAI_BehaviorHost<CAI_BaseNPC>::Save(ISave&)
 T CAI_BehaviorHost<CAI_BaseNPC>::ScheduledFollowPath(int, CBaseEntity*, Activity)
 T CAI_BehaviorHost<CAI_BaseNPC>::ScheduledMoveToGoalEntity(int, CBaseEntity*, Activity)
 T CAI_BehaviorHost<CAI_BaseNPC>::SelectFailSchedule(int, int, int)
 T CAI_BehaviorHost<CAI_BaseNPC>::SelectSchedule()
 T CAI_BehaviorHost<CAI_BaseNPC>::ShouldAlwaysThink()
 T CAI_BehaviorHost<CAI_BaseNPC>::ShouldBehaviorSelectSchedule(CAI_BehaviorBase*)
 T CAI_BehaviorHost<CAI_BaseNPC>::ShouldIgnoreSound(CSound*)
 T CAI_BehaviorHost<CAI_BaseNPC>::ShouldPlayerAvoid()
 T CAI_BehaviorHost<CAI_BaseNPC>::SpeakMapmakerInterruptConcept(string_t)
 T CAI_BehaviorHost<CAI_BaseNPC>::StartTask(Task_t const*)
 T CAI_BehaviorHost<CAI_BaseNPC>::TaskName(int)
 T CAI_BehaviorHost<CAI_BaseNPC>::Teleport(Vector const*, QAngle const*, Vector const*)
 T CAI_BehaviorHost<CAI_BaseNPC>::TranslateSchedule(int)
 T CAI_BehaviorHost<CAI_BaseNPC>::UpdateOnRemove()
 T CAI_BehaviorHost<CAI_BaseNPC>::~CAI_BehaviorHost()
 T CAI_BlendedMotor::AddTurnGesture(float)
 T CAI_BlendedMotor::BuildInsertNode(int, float)
 T CAI_BlendedMotor::BuildTurnScript(AILocalMoveGoal_t const&)
 T CAI_BlendedMotor::BuildTurnScript(int, int)
 T CAI_BlendedMotor::BuildVelocityScript(AILocalMoveGoal_t const&)
 T CAI_BlendedMotor::GetInteriorSequence(int)
 T CAI_BlendedMotor::GetMoveScriptTotalTime()
 T CAI_BlendedMotor::GetMoveScriptYaw()
 T CAI_BlendedMotor::InsertSlowdown(float, float, bool)
 T CAI_BlendedMotor::MaintainTurnActivity()
 T CAI_BlendedMotor::MoveClimbStart(Vector const&, Vector const&, float, float)
 T CAI_BlendedMotor::MoveContinue()
 T CAI_BlendedMotor::MoveFlyExecute(AILocalMoveGoal_t const&, AIMoveTrace_t*)
 T CAI_BlendedMotor::MoveGroundExecute(AILocalMoveGoal_t const&, AIMoveTrace_t*)
 T CAI_BlendedMotor::MoveJumpStart(Vector const&)
 T CAI_BlendedMotor::MovePaused()
 T CAI_BlendedMotor::MoveStart()
 T CAI_BlendedMotor::MoveStop()
 T CAI_BlendedMotor::OverrideMaxYawSpeed(Activity)
 T CAI_BlendedMotor::RecalculateYawSpeed()
 T CAI_BlendedMotor::ResetGoalSequence()
 T CAI_BlendedMotor::ResetMoveCalculations()
 T CAI_BlendedMotor::SetMoveScriptAnim(float)
 T CAI_BlendedMotor::UpdateYaw(int)
 T CAI_BlendedMotor::~CAI_BlendedMotor()
 T CAI_BlendingHost<CAI_BehaviorHost<CAI_BaseNPC> >::CreateMotor()
 T CAI_BlendingHost<CAI_BehaviorHost<CAI_BaseNPC> >::CreateNavigator()
 T CAI_BlendingHost<CAI_BehaviorHost<CAI_BaseNPC> >::GetTimeToNavGoal()
 T CAI_BlendingHost<CAI_BehaviorHost<CAI_BaseNPC> >::MaxYawSpeed()
 T CAI_ChangeHintGroup::FindQualifiedNPC(CAI_BaseNPC*, CBaseEntity*, CBaseEntity*)
 T CAI_ChangeHintGroup::GetDataDescMap()
 T CAI_ChangeHintGroup::InputActivate(inputdata_t&)
 T CAI_ChangeHintGroup::ObjectCaps()
 T CAI_ChangeHintGroup::~CAI_ChangeHintGroup()
 T CAI_ChangeTarget::GetDataDescMap()
 T CAI_ChangeTarget::InputActivate(inputdata_t&)
 T CAI_ChangeTarget::ObjectCaps()
 T CAI_ChangeTarget::~CAI_ChangeTarget()
 T CAI_Component::SetOuter(CAI_BaseNPC*)
 T CAI_Component::TaskComplete(bool)
 T CAI_Component::TaskFail(int)
 T CAI_DefMovementSink::OnFailedLocalNavigation(AILocalMoveGoal_t*, float, AIMoveResult_t*)
 T CAI_DefMovementSink::OnFailedSteer(AILocalMoveGoal_t*, float, AIMoveResult_t*)
 T CAI_DefMovementSink::OnInsufficientStopDist(AILocalMoveGoal_t*, float, AIMoveResult_t*)
 T CAI_DefMovementSink::OnMoveBlocked(AIMoveResult_t*)
 T CAI_DefMovementSink::OnMoveExecuteFailed(AILocalMoveGoal_t const&, AIMoveTrace_t const&, AIMotorMoveResult_t, AIMoveResult_t*)
 T CAI_DefMovementSink::OnMoveStalled(AILocalMoveGoal_t const&)
 T CAI_DynamicLink::GenerateControllerLinks()
 T CAI_DynamicLink::GetDataDescMap()
 T CAI_DynamicLink::GetDynamicLink(int, int)
 T CAI_DynamicLink::InitDynamicLinks()
 T CAI_DynamicLink::InputTurnOff(inputdata_t&)
 T CAI_DynamicLink::InputTurnOn(inputdata_t&)
 T CAI_DynamicLink::ObjectCaps()
 T CAI_DynamicLink::PurgeDynamicLinks()
 T CAI_DynamicLink::ResetDynamicLinks()
 T CAI_DynamicLink::SetLinkState()
 T CAI_DynamicLink::~CAI_DynamicLink()
 T CAI_DynamicLinkController::GenerateLinksFromVolume()
 T CAI_DynamicLinkController::GetDataDescMap()
 T CAI_DynamicLinkController::InputSetAllowed(inputdata_t&)
 T CAI_DynamicLinkController::InputSetInvert(inputdata_t&)
 T CAI_DynamicLinkController::InputTurnOff(inputdata_t&)
 T CAI_DynamicLinkController::InputTurnOn(inputdata_t&)
 T CAI_DynamicLinkController::~CAI_DynamicLinkController()
 T CAI_Enemies::CAI_Enemies()
 T CAI_Enemies::ClearMemory(CBaseEntity*)
 T CAI_Enemies::Find(CBaseEntity*, bool)
 T CAI_Enemies::FirstTimeSeen(CBaseEntity*)
 T CAI_Enemies::GetDangerMemory()
 T CAI_Enemies::GetFirst(AIEnemiesIter_t__**)
 T CAI_Enemies::GetNext(AIEnemiesIter_t__**)
 T CAI_Enemies::HasEludedMe(CBaseEntity*)
 T CAI_Enemies::HasMemory(CBaseEntity*)
 T CAI_Enemies::LastKnownPosition(CBaseEntity*)
 T CAI_Enemies::LastTimeSeen(CBaseEntity*, bool)
 T CAI_Enemies::MarkAsEluded(CBaseEntity*)
 T CAI_Enemies::OnTookDamageFrom(CBaseEntity*)
 T CAI_Enemies::RefreshMemories()
 T CAI_Enemies::UpdateMemory(CAI_Network*, CBaseEntity*, Vector const&, float, bool)
 T CAI_Enemies::~CAI_Enemies()
 T CAI_EnemiesListSaveRestoreOps::IsEmpty(SaveRestoreFieldInfo_t const&)
 T CAI_EnemiesListSaveRestoreOps::MakeEmpty(SaveRestoreFieldInfo_t const&)
 T CAI_EnemiesListSaveRestoreOps::Restore(SaveRestoreFieldInfo_t const&, IRestore*)
 T CAI_EnemiesListSaveRestoreOps::Save(SaveRestoreFieldInfo_t const&, ISave*)
 T CAI_Expresser::CAI_Expresser(CBaseFlex*)
 T CAI_Expresser::CanSpeak()
 T CAI_Expresser::CanSpeakAfterMyself()
 T CAI_Expresser::CanSpeakConcept(char const*)
 T CAI_Expresser::ForceNotSpeaking()
 T CAI_Expresser::GetResponseDuration(AI_Response&)
 T CAI_Expresser::IsSpeaking()
 T CAI_Expresser::IsValidResponse(ResponseType_t, char const*)
 T CAI_Expresser::NoteSpeaking(float, float)
 T CAI_Expresser::SemaphoreIsAvailable(CBaseEntity*)
 T CAI_Expresser::SetOuter(CBaseFlex*)
 T CAI_Expresser::SetSpokeConcept(char const*, AI_Response*, bool)
 T CAI_Expresser::Speak(char const*, char const*, char*, unsigned long, IRecipientFilter*)
 T CAI_Expresser::SpeakDispatchResponse(char const*, AI_Response&, IRecipientFilter*)
 T CAI_Expresser::SpeakFindResponse(AI_Response&, char const*, char const*)
 T CAI_Expresser::SpeakRawScene(char const*, float, AI_Response*, IRecipientFilter*)
 T CAI_Expresser::SpeakRawSentence(char const*, float, float, soundlevel_t, CBaseEntity*)
 T CAI_Expresser::SpeechMsg(CBaseEntity*, char const*, ...)
 T CAI_Expresser::SpokeConcept(char const*)
 T CAI_Expresser::TestAllResponses()
 T CAI_Expresser::~CAI_Expresser()
 T CAI_ExpresserHost<CAI_BaseHumanoid>::DispatchResponse(char const*)
 T CAI_ExpresserHost<CAI_BaseHumanoid>::GetResponseSystem()
 T CAI_ExpresserHost<CAI_BaseHumanoid>::ModifyOrAppendCriteria(AI_CriteriaSet&)
 T CAI_ExpresserHost<CAI_BaseHumanoid>::NoteSpeaking(float, float)
 T CAI_ExpresserHost<CAI_BaseHumanoid>::PlaySentence(char const*, float, float, soundlevel_t, CBaseEntity*)
 T CAI_ExpresserHost<CAI_BaseHumanoid>::PostSpeakDispatchResponse(char const*, AI_Response&)
 T CAI_ExpresserHost<CAI_BaseHumanoid>::Speak(char const*, char const*, char*, unsigned long, IRecipientFilter*)
 T CAI_ExpresserHost<CBasePlayer>::DispatchResponse(char const*)
 T CAI_ExpresserHost<CBasePlayer>::NoteSpeaking(float, float)
 T CAI_ExpresserHost<CBasePlayer>::PostSpeakDispatchResponse(char const*, AI_Response&)
 T CAI_ExpresserHost<CBasePlayer>::Speak(char const*, char const*, char*, unsigned long, IRecipientFilter*)
 T CAI_ExpresserHost_NPC_DoModifyOrAppendCriteria(CAI_BaseNPC*, AI_CriteriaSet&)
 T CAI_ExpresserSink::OnSpokeConcept(char const*, AI_Response*)
 T CAI_ExpresserSink::OnStartSpeaking()
 T CAI_ExpresserSink::UseSemaphore()
 T CAI_FollowBehavior::SetFollowGoal(CAI_FollowGoal*, bool)
 T CAI_FollowBehavior::SetFollowTarget(CBaseEntity*, bool)
 T CAI_FollowGoal::DisableGoal(CAI_BaseNPC*)
 T CAI_FollowGoal::EnableGoal(CAI_BaseNPC*)
 T CAI_FollowGoal::GetDataDescMap()
 T CAI_FollowGoal::~CAI_FollowGoal()
 T CAI_FollowManager::AddFollower(CBaseEntity*, CAI_BaseNPC*, AI_Formations_t, AI_FollowManagerInfoHandle_t*)
 T CAI_FollowManager::ChangeFormation(AI_FollowManagerInfoHandle_t&, AI_Formations_t)
 T CAI_FollowManager::FindCreateGroup(CBaseEntity*, AI_Formations_t)
 T CAI_FollowManager::RedistributeSlots(AI_FollowGroup_t*)
 T CAI_FollowManager::RemoveFollower(AI_FollowManagerInfoHandle_t&)
 T CAI_FollowManager::RemoveGroup(AI_FollowGroup_t*)
 T CAI_FollowManager::~CAI_FollowManager()
 T CAI_GlobalNamespace::AddSymbol(char const*, int)
 T CAI_GlobalNamespace::CAI_GlobalNamespace()
 T CAI_GlobalNamespace::Clear()
 T CAI_GlobalNamespace::IdToSymbol(int) const
 T CAI_GlobalNamespace::SymbolToId(char const*) const
 T CAI_GlobalNamespace::~CAI_GlobalNamespace()
 T CAI_GlobalScheduleNamespace::~CAI_GlobalScheduleNamespace()
 T CAI_GoalEntity::DelayedRefresh()
 T CAI_GoalEntity::DisableGoal(CAI_BaseNPC*)
 T CAI_GoalEntity::DrawDebugTextOverlays()
 T CAI_GoalEntity::EnableGoal(CAI_BaseNPC*)
 T CAI_GoalEntity::GetDataDescMap()
 T CAI_GoalEntity::InputActivate(inputdata_t&)
 T CAI_GoalEntity::InputDeactivate(inputdata_t&)
 T CAI_GoalEntity::InputUpdateActors(inputdata_t&)
 T CAI_GoalEntity::ObjectCaps()
 T CAI_GoalEntity::OnEntityCreated(CBaseEntity*)
 T CAI_GoalEntity::OnEntityDeleted(CBaseEntity*)
 T CAI_GoalEntity::OnRestore()
 T CAI_GoalEntity::PruneActors()
 T CAI_GoalEntity::ResolveNames()
 T CAI_GoalEntity::Spawn()
 T CAI_GoalEntity::UpdateOnRemove()
 T CAI_GoalEntity::~CAI_GoalEntity()
 T CAI_Hint::Activate()
 T CAI_Hint::DisableForSeconds(float)
 T CAI_Hint::DrawDebugTextOverlays()
 T CAI_Hint::EnableThink()
 T CAI_Hint::FixupTargetNode()
 T CAI_Hint::GetDataDescMap()
 T CAI_Hint::GetDirection()
 T CAI_Hint::GetPosition(CBaseCombatCharacter*, Vector*)
 T CAI_Hint::HintMatchesCriteria(CAI_BaseNPC*, CHintCriteria const&, Vector const&, float*, bool, bool)
 T CAI_Hint::InputDisableHint(inputdata_t&)
 T CAI_Hint::InputEnableHint(inputdata_t&)
 T CAI_Hint::IsInNodeFOV(CBaseEntity*)
 T CAI_Hint::IsLockedBy(CBaseEntity*)
 T CAI_Hint::IsViewable()
 T CAI_Hint::Lock(CBaseEntity*)
 T CAI_Hint::ObjectCaps()
 T CAI_Hint::OnRestore()
 T CAI_Hint::Spawn()
 T CAI_Hint::Unlock(float)
 T CAI_Hint::UpdateOnRemove()
 T CAI_Hint::Yaw()
 T CAI_Hint::~CAI_Hint()
 T CAI_HintManager::AddHintByType(CAI_Hint*)
 T CAI_HintManager::CreateHint(HintNodeData*, char const*)
 T CAI_HintManager::DrawHintOverlays(float)
 T CAI_HintManager::DumpHints()
 T CAI_HintManager::FindAllHints(CAI_BaseNPC*, Vector const&, CHintCriteria const&, CUtlVector<CAI_Hint*, CUtlMemory<CAI_Hint*, int> >*)
 T CAI_HintManager::FindHint(CAI_BaseNPC*, CHintCriteria const&)
 T CAI_HintManager::FindHint(CAI_BaseNPC*, Hint_e, int, float, Vector const*)
 T CAI_HintManager::FindHint(CAI_BaseNPC*, Vector const&, CHintCriteria const&)
 T CAI_HintManager::FindHint(Vector const&, CHintCriteria const&)
 T CAI_HintManager::FindHintRandom(CAI_BaseNPC*, Vector const&, CHintCriteria const&)
 T CAI_HintManager::GetFirstHint(AIHintIter_t__**)
 T CAI_HintManager::GetFlags(char const*)
 T CAI_HintManager::GetNextHint(AIHintIter_t__**)
 T CAI_HintManager::RemoveHintByType(CAI_Hint*)
 T CAI_InterestTarget::Add(CAI_InterestTarget_t::CAI_InterestTarget_e, CBaseEntity*, Vector const&, float, float, float)
 T CAI_InterestTarget::Add(CBaseEntity*, Vector const&, float, float, float)
 T CAI_InterestTarget::Add(CBaseEntity*, float, float, float)
 T CAI_InterestTarget::Add(Vector const&, float, float, float)
 T CAI_InterestTarget_t::GetPosition()
 T CAI_InterestTarget_t::Interest()
 T CAI_InterestTarget_t::IsActive()
 T CAI_InterestTarget_t::IsThis(CBaseEntity*)
 T CAI_LeadBehavior::LeadPlayer(AI_LeadArgs_t const&, CAI_LeadBehaviorHandler*)
 T CAI_LeadBehavior::SetGoal(AI_LeadArgs_t const&)
 T CAI_LeadGoal::GetConceptModifiers(char const*)
 T CAI_LeadGoal::GetDataDescMap()
 T CAI_LeadGoal::GetLeadBehavior()
 T CAI_LeadGoal::InputActivate(inputdata_t&)
 T CAI_LeadGoal::InputDeactivate(inputdata_t&)
 T CAI_LeadGoal::InputSetFailure(inputdata_t&)
 T CAI_LeadGoal::InputSetSuccess(inputdata_t&)
 T CAI_LeadGoal::OnEvent(int)
 T CAI_LeadGoal::~CAI_LeadGoal()
 T CAI_LeadGoal_Weapon::GetConceptModifiers(char const*)
 T CAI_LeadGoal_Weapon::GetDataDescMap()
 T CAI_LeadGoal_Weapon::InputActivate(inputdata_t&)
 T CAI_LeadGoal_Weapon::~CAI_LeadGoal_Weapon()
 T CAI_Link::CAI_Link()
 T CAI_Link::DestNodeID(int)
 T CAI_LocalIdSpace::AddSymbol(char const*, int, char const*, char const*)
 T CAI_LocalIdSpace::CAI_LocalIdSpace(bool)
 T CAI_LocalIdSpace::GlobalToLocal(int) const
 T CAI_LocalIdSpace::Init(CAI_GlobalNamespace*, CAI_LocalIdSpace*)
 T CAI_LocalIdSpace::LocalToGlobal(int) const
 T CAI_LocalNavigator::CAI_LocalNavigator(CAI_BaseNPC*)
 T CAI_LocalNavigator::Init(IAI_MovementSink*)
 T CAI_LocalNavigator::MoveCalc(AILocalMoveGoal_t*, bool)
 T CAI_LocalNavigator::MoveCalcDirect(AILocalMoveGoal_t*, bool, float*, AIMoveResult_t*)
 T CAI_LocalNavigator::MoveCalcRaw(AILocalMoveGoal_t*, bool)
 T CAI_LocalNavigator::MoveCalcSteer(AILocalMoveGoal_t*, float, AIMoveResult_t*)
 T CAI_LocalNavigator::ResetMoveCalculations()
 T CAI_LocalNavigator::~CAI_LocalNavigator()
 T CAI_Manager::AccessAIs()
 T CAI_Manager::AddAI(CAI_BaseNPC*)
 T CAI_Manager::NumAIs()
 T CAI_Manager::~CAI_Manager()
 T CAI_Motor::AddFacingTarget(CBaseEntity*, Vector const&, float, float, float)
 T CAI_Motor::AddFacingTarget(CBaseEntity*, float, float, float)
 T CAI_Motor::AddFacingTarget(Vector const&, float, float, float)
 T CAI_Motor::AddTurnGesture(float)
 T CAI_Motor::CAI_Motor(CAI_BaseNPC*)
 T CAI_Motor::CalcIntervalMove()
 T CAI_Motor::DeltaIdealYaw()
 T CAI_Motor::GetFacingDirection(Vector&)
 T CAI_Motor::GetIdealAccel() const
 T CAI_Motor::GetIdealSpeed() const
 T CAI_Motor::GetNavigator()
 T CAI_Motor::GetPlaybackRate()
 T CAI_Motor::GetSequenceGroundSpeed(int)
 T CAI_Motor::Init(IAI_MovementSink*)
 T CAI_Motor::MaintainTurnActivity()
 T CAI_Motor::MinCheckDist()
 T CAI_Motor::MinStoppingDist(float)
 T CAI_Motor::MoveClimbExecute(Vector const&, Vector const&, float, float, int)
 T CAI_Motor::MoveClimbStart(Vector const&, Vector const&, float, float)
 T CAI_Motor::MoveClimbStop()
 T CAI_Motor::MoveFacing(AILocalMoveGoal_t const&)
 T CAI_Motor::MoveFlyExecute(AILocalMoveGoal_t const&, AIMoveTrace_t*)
 T CAI_Motor::MoveGroundExecute(AILocalMoveGoal_t const&, AIMoveTrace_t*)
 T CAI_Motor::MoveGroundExecuteWalk(AILocalMoveGoal_t const&, float, float, AIMoveTrace_t*)
 T CAI_Motor::MoveGroundStep(Vector const&, CBaseEntity*, float, bool, bool, AIMoveTrace_t*)
 T CAI_Motor::MoveJumpExecute()
 T CAI_Motor::MoveJumpStart(Vector const&)
 T CAI_Motor::MoveJumpStop()
 T CAI_Motor::MoveNormalExecute(AILocalMoveGoal_t const&)
 T CAI_Motor::MovePaused()
 T CAI_Motor::MoveStart()
 T CAI_Motor::MoveStop()
 T CAI_Motor::OverrideMaxYawSpeed(Activity)
 T CAI_Motor::RecalculateYawSpeed()
 T CAI_Motor::ResetMoveCalculations()
 T CAI_Motor::SelectWeightedSequence(Activity)
 T CAI_Motor::SetIdealYawAndUpdate(float, float)
 T CAI_Motor::SetIdealYawToTarget(Vector const&, float, float)
 T CAI_Motor::SetIdealYawToTargetAndUpdate(Vector const&, float)
 T CAI_Motor::SetPlaybackRate(float)
 T CAI_Motor::UpdateYaw(int)
 T CAI_Motor::~CAI_Motor()
 T CAI_MoveAndShootOverlay::CAI_MoveAndShootOverlay()
 T CAI_MoveAndShootOverlay::CanAimAtEnemy()
 T CAI_MoveAndShootOverlay::EndShootWhileMove()
 T CAI_MoveAndShootOverlay::NoShootWhileMove()
 T CAI_MoveAndShootOverlay::RunShootWhileMove()
 T CAI_MoveAndShootOverlay::StartShootWhileMove()
 T CAI_MoveAndShootOverlay::~CAI_MoveAndShootOverlay()
 T CAI_MoveProbe::CAI_MoveProbe(CAI_BaseNPC*)
 T CAI_MoveProbe::CalcJumpLaunchVelocity(Vector const&, Vector const&, float, float*, float, Vector*) const
 T CAI_MoveProbe::CheckStandPosition(Vector const&, unsigned int) const
 T CAI_MoveProbe::CheckStep(CAI_MoveProbe::CheckStepArgs_t const&, CAI_MoveProbe::CheckStepResult_t*) const
 T CAI_MoveProbe::ClimbMoveLimit(Vector const&, Vector const&, CBaseEntity const*, AIMoveTrace_t*) const
 T CAI_MoveProbe::FloorPoint(Vector const&, unsigned int, float, float, Vector*) const
 T CAI_MoveProbe::FlyMoveLimit(Vector const&, Vector const&, unsigned int, CBaseEntity const*, AIMoveTrace_t*) const
 T CAI_MoveProbe::GroundMoveLimit(Vector const&, Vector const&, unsigned int, CBaseEntity const*, unsigned int, float, AIMoveTrace_t*) const
 T CAI_MoveProbe::JumpMoveLimit(Vector const&, Vector const&, unsigned int, CBaseEntity const*, AIMoveTrace_t*) const
 T CAI_MoveProbe::MoveLimit(Navigation_t, Vector const&, Vector const&, unsigned int, CBaseEntity const*, float, unsigned int, AIMoveTrace_t*)
 T CAI_MoveProbe::SetupCheckStepTraceListData(CAI_MoveProbe::CheckStepArgs_t const&) const
 T CAI_MoveProbe::ShouldBrushBeIgnored(CBaseEntity*)
 T CAI_MoveProbe::TestGroundMove(Vector const&, Vector const&, unsigned int, float, unsigned int, AIMoveTrace_t*) const
 T CAI_MoveProbe::TraceHull(Vector const&, Vector const&, Vector const&, Vector const&, unsigned int, CGameTrace*) const
 T CAI_MoveProbe::TraceHull(Vector const&, Vector const&, unsigned int, CGameTrace*) const
 T CAI_MoveProbe::TraceLine(Vector const&, Vector const&, unsigned int, bool, CGameTrace*) const
 T CAI_MoveProbe::~CAI_MoveProbe()
 T CAI_MoveSolver::Solve(AI_MoveSuggestion_t const*, int, AI_MoveSolution_t*)
 T CAI_MoveSolver::VisualizeRegulations(Vector const&)
 T CAI_NamespaceInfos::Compare(AI_NamespaceAddInfo_t const*, AI_NamespaceAddInfo_t const*)
 T CAI_NamespaceInfos::PushBack(char const*, int)
 T CAI_NavInHintGroupFilter::IsValid(CAI_Node*)
 T CAI_NavInHintGroupFilter::ShouldContinue()
 T CAI_Navigator::AdvancePath()
 T CAI_Navigator::BuildAndGetPathDistToGoal()
 T CAI_Navigator::CAI_Navigator(CAI_BaseNPC*)
 T CAI_Navigator::CalcYawSpeed()
 T CAI_Navigator::CanFitAtNode(int, unsigned int)
 T CAI_Navigator::CanFitAtPosition(Vector const&, unsigned int, bool, bool)
 T CAI_Navigator::ClearGoal()
 T CAI_Navigator::ClearPath()
 T CAI_Navigator::CurWaypointIsGoal() const
 T CAI_Navigator::DelayNavigationFailure(AIMoveTrace_t const&)
 T CAI_Navigator::DoFindPath()
 T CAI_Navigator::DoFindPathToPathcorner(CBaseEntity*)
 T CAI_Navigator::DoFindPathToPos()
 T CAI_Navigator::DrawDebugRouteOverlay()
 T CAI_Navigator::FindPath(AI_NavGoal_t const&, unsigned int)
 T CAI_Navigator::FindPath(bool, bool)
 T CAI_Navigator::FindVectorGoal(Vector*, Vector const&, float, float, bool)
 T CAI_Navigator::GetArrivalActivity() const
 T CAI_Navigator::GetArrivalDirection()
 T CAI_Navigator::GetArrivalDistance() const
 T CAI_Navigator::GetArrivalSequence(int)
 T CAI_Navigator::GetArrivalSpeed()
 T CAI_Navigator::GetCurWaypointPos() const
 T CAI_Navigator::GetGoalFlags() const
 T CAI_Navigator::GetGoalPos() const
 T CAI_Navigator::GetGoalTarget()
 T CAI_Navigator::GetGoalType() const
 T CAI_Navigator::GetMovementActivity() const
 T CAI_Navigator::GetMovementSequence()
 T CAI_Navigator::GetNavFailCounter() const
 T CAI_Navigator::GetPathTimeToGoal()
 T CAI_Navigator::GetPointAlongPath(Vector*, float, bool)
 T CAI_Navigator::GetStepDownMultiplier()
 T CAI_Navigator::GetStoppingPath(CAI_WaypointList*)
 T CAI_Navigator::IgnoreStoppingPath()
 T CAI_Navigator::Init(CAI_Network*)
 T CAI_Navigator::IsGoalActive() const
 T CAI_Navigator::IsGoalSet() const
 T CAI_Navigator::MarkCurWaypointFailedLink()
 T CAI_Navigator::Move(float)
 T CAI_Navigator::MoveCalcBaseGoal(AILocalMoveGoal_t*)
 T CAI_Navigator::MoveClimb()
 T CAI_Navigator::MoveEnact(AILocalMoveGoal_t const&)
 T CAI_Navigator::MoveJump()
 T CAI_Navigator::MoveNormal()
 T CAI_Navigator::MoveUpdateWaypoint(AIMoveResult_t*)
 T CAI_Navigator::MovementCost(int, Vector&, Vector&)
 T CAI_Navigator::OnCalcBaseMove(AILocalMoveGoal_t*, float, AIMoveResult_t*)
 T CAI_Navigator::OnClearPath()
 T CAI_Navigator::OnFailedLocalNavigation(AILocalMoveGoal_t*, float, AIMoveResult_t*)
 T CAI_Navigator::OnFailedSteer(AILocalMoveGoal_t*, float, AIMoveResult_t*)
 T CAI_Navigator::OnInsufficientStopDist(AILocalMoveGoal_t*, float, AIMoveResult_t*)
 T CAI_Navigator::OnMoveBlocked(AIMoveResult_t*)
 T CAI_Navigator::OnMoveExecuteFailed(AILocalMoveGoal_t const&, AIMoveTrace_t const&, AIMotorMoveResult_t, AIMoveResult_t*)
 T CAI_Navigator::OnMoveStalled(AILocalMoveGoal_t const&)
 T CAI_Navigator::OnNavComplete()
 T CAI_Navigator::OnNavFailed(bool)
 T CAI_Navigator::OnNavFailed(int, bool)
 T CAI_Navigator::OnNewGoal()
 T CAI_Navigator::OnObstructionPreSteer(AILocalMoveGoal_t*, float, AIMoveResult_t*)
 T CAI_Navigator::OnScheduleChange()
 T CAI_Navigator::PreMove()
 T CAI_Navigator::PrependLocalAvoidance(float, AIMoveTrace_t const&)
 T CAI_Navigator::RefindPathToGoal(bool, bool)
 T CAI_Navigator::Restore(IRestore&)
 T CAI_Navigator::Save(ISave&)
 T CAI_Navigator::SetArrivalActivity(Activity)
 T CAI_Navigator::SetArrivalDirection(CBaseEntity*)
 T CAI_Navigator::SetArrivalDirection(QAngle const&)
 T CAI_Navigator::SetArrivalDirection(Vector const&)
 T CAI_Navigator::SetArrivalDistance(float)
 T CAI_Navigator::SetArrivalSequence(int)
 T CAI_Navigator::SetGoal(AI_NavGoal_t const&, unsigned int)
 T CAI_Navigator::SetGoalFromStoppingPath()
 T CAI_Navigator::SetGoalTarget(CBaseEntity*, Vector const&)
 T CAI_Navigator::SetGoalTolerance(float)
 T CAI_Navigator::SetMovementActivity(Activity)
 T CAI_Navigator::SetNavType(Navigation_t)
 T CAI_Navigator::SetRandomGoal(Vector const&, float, Vector const&)
 T CAI_Navigator::SetRandomGoal(float, Vector const&)
 T CAI_Navigator::SetVectorGoal(Vector const&, float, float, bool)
 T CAI_Navigator::SetVectorGoalFromTarget(Vector const&, float, bool)
 T CAI_Navigator::SetWanderGoal(float, float)
 T CAI_Navigator::ShouldOptimizeInitialPathSegment(AI_Waypoint_t*)
 T CAI_Navigator::SimplifyPath(bool, float)
 T CAI_Navigator::SimplifyPathBacktrack()
 T CAI_Navigator::SimplifyPathForward(float)
 T CAI_Navigator::SimplifyPathForwardScan(CAI_Navigator::SimplifyForwardScanParams const&)
 T CAI_Navigator::SimplifyPathForwardScan(CAI_Navigator::SimplifyForwardScanParams const&, AI_Waypoint_t*, Vector const&, float, bool, bool, int*)
 T CAI_Navigator::SimplifyPathInsertSimplification(AI_Waypoint_t*, Vector const&)
 T CAI_Navigator::StopMoving(bool)
 T CAI_Navigator::TeleportAlongPath()
 T CAI_Navigator::UpdateGoalPos(Vector const&)
 T CAI_Navigator::~CAI_Navigator()
 T CAI_Network::AddNode(Vector const&, float)
 T CAI_Network::CAI_Network()
 T CAI_Network::CreateLink(int, int, CAI_DynamicLink*)
 T CAI_Network::EnumElement(IHandleEntity*)
 T CAI_Network::FindBSSmallest(CVarBitVec*, float*, int)
 T CAI_Network::GetCachedNearestNode(Vector const&, CAI_BaseNPC*, int*)
 T CAI_Network::GetNodePosition(CBaseCombatCharacter*, int)
 T CAI_Network::GetNodeYaw(int)
 T CAI_Network::IsConnected(int, int)
 T CAI_Network::ListNodesInBox(CNodeList&, int, Vector const&, Vector const&, INodeListFilter*)
 T CAI_Network::NearestNodeToPoint(CAI_BaseNPC*, Vector const&, bool, INearestNodeFilter*)
 T CAI_Network::~CAI_Network()
 T CAI_NetworkBuilder::Build(CAI_Network*)
 T CAI_NetworkBuilder::ComputeConnection(CAI_Node*, CAI_Node*, Hull_t)
 T CAI_NetworkBuilder::EndBuild()
 T CAI_NetworkBuilder::FloodFillZone(CAI_Node**, CAI_Node*, int)
 T CAI_NetworkBuilder::ForceDynamicLinkNeighbors()
 T CAI_NetworkBuilder::InitClimbNodePosition(CAI_Network*, CAI_Node*)
 T CAI_NetworkBuilder::InitGroundNodePosition(CAI_Network*, CAI_Node*)
 T CAI_NetworkBuilder::InitLinks(CAI_Network*, CAI_Node*)
 T CAI_NetworkBuilder::InitNeighbors(CAI_Network*, CAI_Node*)
 T CAI_NetworkBuilder::InitNodePosition(CAI_Network*, CAI_Node*)
 T CAI_NetworkBuilder::InitVisibility(CAI_Network*, CAI_Node*)
 T CAI_NetworkBuilder::InitZones(CAI_Network*)
 T CAI_NetworkBuilder::Rebuild(CAI_Network*)
 T CAI_NetworkBuilder::~CAI_NetworkBuilder()
 T CAI_NetworkEditTools::DrawAINetworkOverlay()
 T CAI_NetworkEditTools::DrawEditInfoOverlay()
 T CAI_NetworkEditTools::FindAILinkNearestFacing(Vector const&, Vector const&, float)
 T CAI_NetworkEditTools::FindAINodeNearestFacing(Vector const&, Vector const&, float, int)
 T CAI_NetworkEditTools::GetNodeIdFromWCId(int)
 T CAI_NetworkEditTools::GetWCIdFromNodeId(int)
 T CAI_NetworkEditTools::RecalcUsableNodesForHull()
 T CAI_NetworkEditTools::SetRebuildFlags()
 T CAI_NetworkManager::BuildNetworkGraph()
 T CAI_NetworkManager::CAI_NetworkManager()
 T CAI_NetworkManager::DelayedInit()
 T CAI_NetworkManager::DeleteAllAINetworks()
 T CAI_NetworkManager::GetDataDescMap()
 T CAI_NetworkManager::InitializeAINetworks()
 T CAI_NetworkManager::IsAIFileCurrent(char const*)
 T CAI_NetworkManager::LoadNetworkGraph()
 T CAI_NetworkManager::MarkDontSaveGraph()
 T CAI_NetworkManager::ObjectCaps()
 T CAI_NetworkManager::RebuildNetworkGraph()
 T CAI_NetworkManager::RebuildThink()
 T CAI_NetworkManager::SaveNetworkGraph()
 T CAI_NetworkManager::Spawn()
 T CAI_NetworkManager::StartRebuild()
 T CAI_NetworkManager::~CAI_NetworkManager()
 T CAI_Node::AddLink(CAI_Link*)
 T CAI_Node::CAI_Node(int, Vector const&, float)
 T CAI_Node::GetLink(int)
 T CAI_Node::GetPosition(int)
 T CAI_Node::GetShuffeledLink(int)
 T CAI_Node::HasLink(int)
 T CAI_Node::ShuffleLinks()
 T CAI_Path::ActualGoalPosition() const
 T CAI_Path::Advance()
 T CAI_Path::BaseGoalPosition() const
 T CAI_Path::CAI_Path()
 T CAI_Path::Clear()
 T CAI_Path::CurWaypointIsGoal() const
 T CAI_Path::CurWaypointNavType() const
 T CAI_Path::CurWaypointPos() const
 T CAI_Path::CurWaypointYaw() const
 T CAI_Path::GetArrivalActivity() const
 T CAI_Path::GetArrivalSequence() const
 T CAI_Path::GetGoalDirection(Vector const&)
 T CAI_Path::GetGoalSpeed(Vector const&)
 T CAI_Path::GetGoalStoppingDistance() const
 T CAI_Path::GetPathDistanceToGoal(Vector const&)
 T CAI_Path::GetPathLength()
 T CAI_Path::GoalFlags() const
 T CAI_Path::GoalType() const
 T CAI_Path::PrependWaypoint(Vector const&, Navigation_t, unsigned int)
 T CAI_Path::PrependWaypoints(AI_Waypoint_t*)
 T CAI_Path::ResetGoalPosition(Vector const&)
 T CAI_Path::SetArrivalActivity(Activity)
 T CAI_Path::SetArrivalSequence(int)
 T CAI_Path::SetGoalDirection(CBaseEntity*)
 T CAI_Path::SetGoalDirection(Vector const&)
 T CAI_Path::SetGoalSpeed(CBaseEntity*)
 T CAI_Path::SetGoalSpeed(float)
 T CAI_Path::SetGoalStoppingDistance(float)
 T CAI_Path::SetGoalType(GoalType_t)
 T CAI_Path::SetLastNodeAsGoal(bool)
 T CAI_Path::SetMovementActivity(Activity)
 T CAI_Path::SetWaypoints(AI_Waypoint_t*, bool)
 T CAI_Path::~CAI_Path()
 T CAI_Pathfinder::BuildComplexRoute(Navigation_t, Vector const&, Vector const&, CBaseEntity const*, int, int, int, float, float, float)
 T CAI_Pathfinder::BuildLocalRoute(Vector const&, Vector const&, CBaseEntity const*, int, int, int, float)
 T CAI_Pathfinder::BuildNodeRoute(Vector const&, Vector const&, int, float)
 T CAI_Pathfinder::BuildOBBAvoidanceRoute(Vector const&, Vector const&, CBaseEntity const*, CBaseEntity const*, Navigation_t)
 T CAI_Pathfinder::BuildRadialRoute(Vector const&, Vector const&, Vector const&, float, float, float, bool, float, bool)
 T CAI_Pathfinder::BuildRoute(Vector const&, Vector const&, CBaseEntity*, float, Navigation_t, bool)
 T CAI_Pathfinder::BuildRouteThroughPoints(Vector*, int, int, int, int, Navigation_t, CBaseEntity*)
 T CAI_Pathfinder::BuildSimpleRoute(Navigation_t, Vector const&, Vector const&, CBaseEntity const*, int, int, int, float)
 T CAI_Pathfinder::BuildTriangulationRoute(Vector const&, Vector const&, CBaseEntity const*, int, int, float, float, Navigation_t)
 T CAI_Pathfinder::CTriDebugOverlay::AddTriOverlayLine(Vector const&, Vector const&, int, int, int, bool)
 T CAI_Pathfinder::CTriDebugOverlay::AddTriOverlayLines(Vector const&, Vector const&, Vector const&, AIMoveTrace_t const&, AIMoveTrace_t const&, bool)
 T CAI_Pathfinder::CanUseLocalNavigation()
 T CAI_Pathfinder::CheckStaleNavTypeRoute(Navigation_t, Vector const&, Vector const&)
 T CAI_Pathfinder::CheckStaleRoute(Vector const&, Vector const&, int)
 T CAI_Pathfinder::ComputeWaypointType(CAI_Node**, int, int)
 T CAI_Pathfinder::CreateNodeWaypoint(Hull_t, int, int)
 T CAI_Pathfinder::DrawDebugGeometryOverlays(int)
 T CAI_Pathfinder::FindBestPath(int, int)
 T CAI_Pathfinder::FindShortRandomPath(int, float, Vector const&)
 T CAI_Pathfinder::Init(CAI_Network*)
 T CAI_Pathfinder::IsLinkStillStale(int, CAI_Link*)
 T CAI_Pathfinder::IsLinkUsable(CAI_Link*, int)
 T CAI_Pathfinder::MakeRouteFromParents(int*, int)
 T CAI_Pathfinder::NearestNodeToNPC()
 T CAI_Pathfinder::NearestNodeToPoint(Vector const&)
 T CAI_Pathfinder::RouteFromNode(Vector const&, int, int, float)
 T CAI_Pathfinder::RouteToNode(Vector const&, int, int, float)
 T CAI_Pathfinder::TestTriangulationRoute(Navigation_t, Vector const&, Vector const&, Vector const&, CBaseEntity const*, AIMoveTrace_t*)
 T CAI_Pathfinder::Triangulate(Navigation_t, Vector const&, Vector const&, float, CBaseEntity const*, Vector*)
 T CAI_Pathfinder::~CAI_Pathfinder()
 T CAI_PlaneSolver::AddObstacle(Vector const&, float, CBaseEntity*, AI_MoveSuggType_t)
 T CAI_PlaneSolver::AdjustSolutionForFliers(AILocalMoveGoal_t const&, float, Vector*)
 T CAI_PlaneSolver::CAI_PlaneSolver(CAI_BaseNPC*)
 T CAI_PlaneSolver::CalcProbeDist(float)
 T CAI_PlaneSolver::CalculateRegulationWeight(AIMoveTrace_t const&, float)
 T CAI_PlaneSolver::GenerateCircleObstacleSuggestions(AILocalMoveGoal_t const&, float)
 T CAI_PlaneSolver::GenerateObstacleNpcs(AILocalMoveGoal_t const&, float)
 T CAI_PlaneSolver::GenerateObstacleSuggestion(AILocalMoveGoal_t const&, float, float, float, int)
 T CAI_PlaneSolver::GenerateObstacleSuggestions(AILocalMoveGoal_t const&, AIMoveTrace_t const&, float, float, float, int)
 T CAI_PlaneSolver::GenerateSuggestionFromTrace(AILocalMoveGoal_t const&, AIMoveTrace_t const&, float, float, float, int)
 T CAI_PlaneSolver::RunMoveSolver(AILocalMoveGoal_t const&, AIMoveTrace_t const&, float, bool, Vector*)
 T CAI_PlaneSolver::Solve(AILocalMoveGoal_t const&, float, Vector*)
 T CAI_PlaneSolver::VisualizeSolution(Vector const&, Vector const&)
 T CAI_PlayerAlly::AnswerQuestion(CAI_PlayerAlly*, int, bool)
 T CAI_PlayerAlly::InputAnswerQuestion(inputdata_t&)
 T CAI_PlayerAlly::InputAnswerQuestionHello(inputdata_t&)
 T CAI_PlayerAlly::InputDisableSpeakWhileScripting(inputdata_t&)
 T CAI_PlayerAlly::InputEnableSpeakWhileScripting(inputdata_t&)
 T CAI_PlayerAlly::InputMakeGameEndAlly(inputdata_t&)
 T CAI_PlayerAlly::InputMakeRegularAlly(inputdata_t&)
 T CAI_PlayerAlly::InputSpeakResponseConcept(inputdata_t&)
 T CAI_PlayerAlly::IsAllowedToSpeak(char const*, bool)
 T CAI_PlayerAlly::IsOkToSpeak(ConceptCategory_t, bool)
 T CAI_PlayerAlly::SelectSpeechResponse(char const*, char const*, CBaseEntity*, AISpeechSelection_t*)
 T CAI_ProxyMovementSink::CalcYawSpeed()
 T CAI_ProxyMovementSink::OnCalcBaseMove(AILocalMoveGoal_t*, float, AIMoveResult_t*)
 T CAI_ProxyMovementSink::OnFailedLocalNavigation(AILocalMoveGoal_t*, float, AIMoveResult_t*)
 T CAI_ProxyMovementSink::OnFailedSteer(AILocalMoveGoal_t*, float, AIMoveResult_t*)
 T CAI_ProxyMovementSink::OnInsufficientStopDist(AILocalMoveGoal_t*, float, AIMoveResult_t*)
 T CAI_ProxyMovementSink::OnMoveBlocked(AIMoveResult_t*)
 T CAI_ProxyMovementSink::OnMoveExecuteFailed(AILocalMoveGoal_t const&, AIMoveTrace_t const&, AIMotorMoveResult_t, AIMoveResult_t*)
 T CAI_ProxyMovementSink::OnMoveStalled(AILocalMoveGoal_t const&)
 T CAI_ProxyMovementSink::OnObstructionPreSteer(AILocalMoveGoal_t*, float, AIMoveResult_t*)
 T CAI_RadialLinkController::Activate()
 T CAI_RadialLinkController::GetDataDescMap()
 T CAI_RadialLinkController::ModifyNodeLinks(bool)
 T CAI_RadialLinkController::PollMotionThink()
 T CAI_RadialLinkController::Spawn()
 T CAI_RadialLinkController::~CAI_RadialLinkController()
 T CAI_Relationship::Activate()
 T CAI_Relationship::ApplyRelationship(CBaseEntity*, CBaseEntity*)
 T CAI_Relationship::ApplyRelationshipThink()
 T CAI_Relationship::ChangeRelationships(int, int, CBaseEntity*, CBaseEntity*)
 T CAI_Relationship::GetDataDescMap()
 T CAI_Relationship::InputApplyRelationship(inputdata_t&)
 T CAI_Relationship::InputRevertRelationship(inputdata_t&)
 T CAI_Relationship::InputRevertToDefaultRelationship(inputdata_t&)
 T CAI_Relationship::OnEntityDeleted(CBaseEntity*)
 T CAI_Relationship::OnEntitySpawned(CBaseEntity*)
 T CAI_Relationship::OnRestore()
 T CAI_Relationship::Spawn()
 T CAI_Relationship::UpdateOnRemove()
 T CAI_Relationship::~CAI_Relationship()
 T CAI_SaveRestoreBlockHandler::GetBlockName()
 T CAI_SaveRestoreBlockHandler::PostRestore()
 T CAI_SaveRestoreBlockHandler::ReadRestoreHeaders(IRestore*)
 T CAI_SaveRestoreBlockHandler::Restore(IRestore*, bool)
 T CAI_SaveRestoreBlockHandler::Save(ISave*)
 T CAI_SaveRestoreBlockHandler::WriteSaveHeaders(ISave*)
 T CAI_SchedulesManager::CreateSchedule(char*, int)
 T CAI_SchedulesManager::CreateStringRegistries()
 T CAI_SchedulesManager::DeleteAllSchedules()
 T CAI_SchedulesManager::DestroyStringRegistries()
 T CAI_SchedulesManager::GetMemoryID(char const*)
 T CAI_SchedulesManager::GetScheduleByName(char const*)
 T CAI_SchedulesManager::GetScheduleFromID(int)
 T CAI_SchedulesManager::GetStateID(char const*)
 T CAI_SchedulesManager::LoadAllSchedules()
 T CAI_SchedulesManager::LoadSchedulesFromBuffer(char const*, char const*, CAI_ClassScheduleIdSpace*)
 T CAI_ScriptConditions::Activate()
 T CAI_ScriptConditions::AddNewElement(CBaseEntity*)
 T CAI_ScriptConditions::Enable()
 T CAI_ScriptConditions::EvalActorSeePlayer(CAI_ScriptConditions::EvalArgs_t const&)
 T CAI_ScriptConditions::EvalActorSeeTarget(CAI_ScriptConditions::EvalArgs_t const&)
 T CAI_ScriptConditions::EvalActorTargetProximity(CAI_ScriptConditions::EvalArgs_t const&)
 T CAI_ScriptConditions::EvalPlayerActorLOS(CAI_ScriptConditions::EvalArgs_t const&)
 T CAI_ScriptConditions::EvalPlayerActorLook(CAI_ScriptConditions::EvalArgs_t const&)
 T CAI_ScriptConditions::EvalPlayerActorProximity(CAI_ScriptConditions::EvalArgs_t const&)
 T CAI_ScriptConditions::EvalPlayerBlockingActor(CAI_ScriptConditions::EvalArgs_t const&)
 T CAI_ScriptConditions::EvalPlayerTargetLOS(CAI_ScriptConditions::EvalArgs_t const&)
 T CAI_ScriptConditions::EvalPlayerTargetLook(CAI_ScriptConditions::EvalArgs_t const&)
 T CAI_ScriptConditions::EvalPlayerTargetProximity(CAI_ScriptConditions::EvalArgs_t const&)
 T CAI_ScriptConditions::EvalState(CAI_ScriptConditions::EvalArgs_t const&)
 T CAI_ScriptConditions::EvaluationThink()
 T CAI_ScriptConditions::GetDataDescMap()
 T CAI_ScriptConditions::InputDisable(inputdata_t&)
 T CAI_ScriptConditions::InputEnable(inputdata_t&)
 T CAI_ScriptConditions::IsInFOV(CBaseEntity*, CBaseEntity*, float, bool)
 T CAI_ScriptConditions::OnEntitySpawned(CBaseEntity*)
 T CAI_ScriptConditions::OnRestore()
 T CAI_ScriptConditions::Spawn()
 T CAI_ScriptConditions::UpdateOnRemove()
 T CAI_ScriptConditions::~CAI_ScriptConditions()
 T CAI_ScriptedSchedule::FindScriptEntity(bool)
 T CAI_ScriptedSchedule::GetDataDescMap()
 T CAI_ScriptedSchedule::InputStartSchedule(inputdata_t&)
 T CAI_ScriptedSchedule::InputStopSchedule(inputdata_t&)
 T CAI_ScriptedSchedule::ScriptThink()
 T CAI_ScriptedSchedule::StartSchedule(CAI_BaseNPC*)
 T CAI_ScriptedSchedule::~CAI_ScriptedSchedule()
 T CAI_ScriptedSentence::DelayThink()
 T CAI_ScriptedSentence::FindEntity()
 T CAI_ScriptedSentence::FindThink()
 T CAI_ScriptedSentence::GetDataDescMap()
 T CAI_ScriptedSentence::InputBeginSentence(inputdata_t&)
 T CAI_ScriptedSentence::KeyValue(char const*, char const*)
 T CAI_ScriptedSentence::ObjectCaps()
 T CAI_ScriptedSentence::Spawn()
 T CAI_ScriptedSentence::StartSentence(CAI_BaseNPC*)
 T CAI_ScriptedSentence::~CAI_ScriptedSentence()
 T CAI_ScriptedSequence::Activate()
 T CAI_ScriptedSequence::AllowInterrupt(bool)
 T CAI_ScriptedSequence::Blocked(CBaseEntity*)
 T CAI_ScriptedSequence::CanEnqueueAfter()
 T CAI_ScriptedSequence::CanInterrupt()
 T CAI_ScriptedSequence::CancelScript()
 T CAI_ScriptedSequence::DelayStart(bool)
 T CAI_ScriptedSequence::DrawDebugGeometryOverlays()
 T CAI_ScriptedSequence::DrawDebugTextOverlays()
 T CAI_ScriptedSequence::FindScriptEntity()
 T CAI_ScriptedSequence::FinishedActionSequence(CAI_BaseNPC*)
 T CAI_ScriptedSequence::FireScriptEvent(int)
 T CAI_ScriptedSequence::FixScriptNPCSchedule(CAI_BaseNPC*, int)
 T CAI_ScriptedSequence::GetDataDescMap()
 T CAI_ScriptedSequence::GetSpawnPreIdleSequenceForScript(CBaseEntity*)
 T CAI_ScriptedSequence::InputBeginSequence(inputdata_t&)
 T CAI_ScriptedSequence::InputCancelSequence(inputdata_t&)
 T CAI_ScriptedSequence::InputMoveToPosition(inputdata_t&)
 T CAI_ScriptedSequence::InputScriptPlayerDeath(inputdata_t&)
 T CAI_ScriptedSequence::IsTimeToStart()
 T CAI_ScriptedSequence::IsWaitingForBegin()
 T CAI_ScriptedSequence::ModifyScriptedAutoMovement(Vector*)
 T CAI_ScriptedSequence::ObjectCaps()
 T CAI_ScriptedSequence::OnBeginSequence()
 T CAI_ScriptedSequence::PostIdleDone(CAI_BaseNPC*)
 T CAI_ScriptedSequence::RemoveIgnoredConditions()
 T CAI_ScriptedSequence::ScriptEntityCancel(CBaseEntity*, bool)
 T CAI_ScriptedSequence::ScriptThink()
 T CAI_ScriptedSequence::SequenceDone(CAI_BaseNPC*)
 T CAI_ScriptedSequence::Spawn()
 T CAI_ScriptedSequence::StartScript()
 T CAI_ScriptedSequence::StartSequence(CAI_BaseNPC*, string_t, bool)
 T CAI_ScriptedSequence::StopActionLoop(bool)
 T CAI_ScriptedSequence::SynchNewSequence(CAI_BaseNPC::SCRIPTSTATE, string_t, bool)
 T CAI_ScriptedSequence::SynchronizeSequence(CAI_BaseNPC*)
 T CAI_ScriptedSequence::Touch(CBaseEntity*)
 T CAI_ScriptedSequence::UpdateOnRemove()
 T CAI_ScriptedSequence::~CAI_ScriptedSequence()
 T CAI_SensedObjectsManager::AddEntity(CBaseEntity*)
 T CAI_SensedObjectsManager::Init()
 T CAI_SensedObjectsManager::OnEntityDeleted(CBaseEntity*)
 T CAI_SensedObjectsManager::OnEntitySpawned(CBaseEntity*)
 T CAI_SensedObjectsManager::Term()
 T CAI_SensedObjectsManager::~CAI_SensedObjectsManager()
 T CAI_Senses::CanHearSound(CSound*)
 T CAI_Senses::DidSeeEntity(CBaseEntity*) const
 T CAI_Senses::EndGather(int, CUtlVector<CHandle<CBaseEntity>, CUtlMemory<CHandle<CBaseEntity>, int> >*)
 T CAI_Senses::GetClosestSound(bool, int, bool)
 T CAI_Senses::GetFirstHeardSound(AISoundIter_t__**)
 T CAI_Senses::GetFirstSeenEntity(AISightIter_t__**, seentype_t) const
 T CAI_Senses::GetNextHeardSound(AISoundIter_t__**)
 T CAI_Senses::GetNextSeenEntity(AISightIter_t__**) const
 T CAI_Senses::GetTimeLastUpdate(CBaseEntity*)
 T CAI_Senses::Listen()
 T CAI_Senses::Look(CBaseEntity*)
 T CAI_Senses::LookForHighPriorityEntities(int)
 T CAI_Senses::LookForNPCs(int)
 T CAI_Senses::LookForObjects(int)
 T CAI_Senses::PerformSensing()
 T CAI_Senses::WaitingUntilSeen(CBaseEntity*)
 T CAI_Senses::~CAI_Senses()
 T CAI_ShotRegulator::CAI_ShotRegulator()
 T CAI_ShotRegulator::FireNoEarlierThan(float)
 T CAI_ShotRegulator::IsInRestInterval() const
 T CAI_ShotRegulator::NextShotTime() const
 T CAI_ShotRegulator::OnFiredWeapon()
 T CAI_ShotRegulator::Reset(bool)
 T CAI_ShotRegulator::SetBurstInterval(float, float)
 T CAI_ShotRegulator::SetBurstShotCountRange(int, int)
 T CAI_ShotRegulator::SetRestInterval(float, float)
 T CAI_ShotRegulator::ShouldShoot() const
 T CAI_SpeechFilter::Activate()
 T CAI_SpeechFilter::GetDataDescMap()
 T CAI_SpeechFilter::InputDisable(inputdata_t&)
 T CAI_SpeechFilter::InputEnable(inputdata_t&)
 T CAI_SpeechFilter::InputSetIdleModifier(inputdata_t&)
 T CAI_SpeechFilter::OnEntityCreated(CBaseEntity*)
 T CAI_SpeechFilter::OnEntityDeleted(CBaseEntity*)
 T CAI_SpeechFilter::PopulateSubjectList(bool)
 T CAI_SpeechFilter::Spawn()
 T CAI_SpeechFilter::UpdateOnRemove()
 T CAI_SpeechFilter::~CAI_SpeechFilter()
 T CAI_Squad::AddToSquad(CAI_BaseNPC*)
 T CAI_Squad::CAI_Squad()
 T CAI_Squad::FOkToMakeSound(int)
 T CAI_Squad::FindEnemyInfo(CBaseEntity*)
 T CAI_Squad::GetFirstMember(AISquadIter_t__**, bool)
 T CAI_Squad::GetLeader()
 T CAI_Squad::GetNextMember(AISquadIter_t__**, bool)
 T CAI_Squad::IsLeader(CAI_BaseNPC*)
 T CAI_Squad::IsSilentMember(CAI_BaseNPC const*)
 T CAI_Squad::JustMadeSound(int, float)
 T CAI_Squad::NumMembers(bool)
 T CAI_Squad::OccupyStrategySlotRange(CBaseEntity*, int, int, int*)
 T CAI_Squad::RemoveFromSquad(CAI_BaseNPC*, bool)
 T CAI_Squad::SquadIsMember(CBaseEntity*)
 T CAI_Squad::SquadNewEnemy(CBaseEntity*)
 T CAI_Squad::UpdateEnemyMemory(CAI_BaseNPC*, CBaseEntity*, Vector const&)
 T CAI_Squad::VacateStrategySlot(CBaseEntity*, int)
 T CAI_Squad::~CAI_Squad()
 T CAI_SquadManager::CreateSquad(string_t)
 T CAI_SquadManager::DeleteAllSquads()
 T CAI_SquadManager::FindSquad(string_t)
 T CAI_SquadManager::NumSquads()
 T CAI_StandoffGoal::DisableGoal(CAI_BaseNPC*)
 T CAI_StandoffGoal::EnableGoal(CAI_BaseNPC*)
 T CAI_StandoffGoal::GetDataDescMap()
 T CAI_StandoffGoal::InputActivate(inputdata_t&)
 T CAI_StandoffGoal::InputDeactivate(inputdata_t&)
 T CAI_StandoffGoal::InputSetAggressiveness(inputdata_t&)
 T CAI_StandoffGoal::SetBehaviorParams(CAI_StandoffBehavior*)
 T CAI_StandoffGoal::~CAI_StandoffGoal()
 T CAI_SystemHook::LevelInitPostEntity()
 T CAI_SystemHook::LevelInitPreEntity()
 T CAI_SystemHook::LevelShutdownPostEntity()
 T CAI_SystemHook::LevelShutdownPreEntity()
 T CAI_SystemHook::~CAI_SystemHook()
 T CAI_TacticalServices::FindBackAwayNode(Vector const&)
 T CAI_TacticalServices::FindBackAwayPos(Vector const&, Vector*)
 T CAI_TacticalServices::FindCoverNode(Vector const&, Vector const&, Vector const&, float, float)
 T CAI_TacticalServices::FindCoverPos(Vector const&, Vector const&, Vector const&, float, float, Vector*)
 T CAI_TacticalServices::FindCoverPos(Vector const&, Vector const&, float, float, Vector*)
 T CAI_TacticalServices::FindLateralCover(Vector const&, Vector const&, float, float, int, Vector*)
 T CAI_TacticalServices::FindLateralCover(Vector const&, float, Vector*)
 T CAI_TacticalServices::FindLateralLos(Vector const&, Vector*)
 T CAI_TacticalServices::FindLos(Vector const&, Vector const&, float, float, float, FlankType_t, Vector const&, float, Vector*)
 T CAI_TacticalServices::FindLos(Vector const&, Vector const&, float, float, float, Vector*)
 T CAI_TacticalServices::FindLosNode(Vector const&, Vector const&, float, float, float, FlankType_t, Vector const&, float)
 T CAI_TacticalServices::Init(CAI_Network*)
 T CAI_TacticalServices::TestLateralCover(Vector const&, Vector const&, float)
 T CAI_TacticalServices::TestLateralLos(Vector const&, Vector const&)
 T CAI_TacticalServices::~CAI_TacticalServices()
 T CAI_TestHull::GetTestHull()
 T CAI_TestHull::IsJumpLegal(Vector const&, Vector const&, Vector const&) const
 T CAI_TestHull::ObjectCaps()
 T CAI_TestHull::Precache()
 T CAI_TestHull::ReturnTestHull()
 T CAI_TestHull::Spawn()
 T CAI_TestHull::~CAI_TestHull()
 T CAI_TrackPather::BestPointOnPath(CPathTrack*, Vector const&, float, bool, bool)
 T CAI_TrackPather::InputChooseFarthestPathPoint(inputdata_t&)
 T CAI_TrackPather::InputChooseNearestPathPoint(inputdata_t&)
 T CAI_TrackPather::InputSetTrack(inputdata_t&)
 T CAI_TrackPather::InputStartBreakableMovement(inputdata_t&)
 T CAI_TrackPather::InputStartLeading(inputdata_t&)
 T CAI_TrackPather::InputStartPatrol(inputdata_t&)
 T CAI_TrackPather::InputStartPatrolBreakable(inputdata_t&)
 T CAI_TrackPather::InputStopBreakableMovement(inputdata_t&)
 T CAI_TrackPather::InputStopLeading(inputdata_t&)
 T CAI_TrackPather::InputStopPatrol(inputdata_t&)
 T CAI_TrackPather::IsOnSameTrack(CPathTrack*, CPathTrack*) const
 T CAI_TrackPather::MoveToClosestTrackPoint(CPathTrack*)
 T CAI_TrackPather::SetTrack(string_t)
 T CAI_TrackPather::SetupNewCurrentTarget(CPathTrack*)
 T CAI_WaypointList::GetLast()
 T CAI_WaypointList::PrependWaypoint(Vector const&, Navigation_t, unsigned int, float)
 T CAI_WaypointList::PrependWaypoints(AI_Waypoint_t*)
 T CAI_WaypointList::RemoveAll()
 T CAI_WaypointList::Set(AI_Waypoint_t*)
 T CAchievementData::AddDamageEventToHistory(CHandle<CBaseEntity>, float)
 T CAchievementData::AddDamagerToHistory(CHandle<CBaseEntity>)
 T CAchievementData::AddPusherToHistory(CHandle<CBaseEntity>)
 T CAchievementData::AddTargetToHistory(CHandle<CBaseEntity>)
 T CAchievementData::CountDamagersWithinTime(float)
 T CAchievementData::IsDamagerInHistory(CBaseEntity*, float)
 T CAchievementData::IsPusherInHistory(CBaseEntity*, float)
 T CAchievementData::IsSentryDamagerInHistory(CBaseEntity*, float)
 T CAchievementData::IsTargetInHistory(CBaseEntity*, float)
 T CAchievementMgr::CheckAchievementsEnabled()
 T CAchievementMgr::PostRestoreSavedGame()
 T CAchievementMgr::PreRestoreSavedGame()
 T CAchievementSaveRestoreBlockHandler::GetBlockName()
 T CAchievementSaveRestoreBlockHandler::ReadRestoreHeaders(IRestore*)
 T CAchievementSaveRestoreBlockHandler::Restore(IRestore*, bool)
 T CAchievementSaveRestoreBlockHandler::Save(ISave*)
 T CAchievementSaveRestoreBlockHandler::WriteSaveHeaders(ISave*)
 T CAchievementSaveThread::Run()
 T CAchievementSaveThread::~CAchievementSaveThread()
 T CAchievementZone::GetDataDescMap()
 T CAchievementZone::InputDisable(inputdata_t&)
 T CAchievementZone::InputEnable(inputdata_t&)
 T CAchievementZone::InputToggle(inputdata_t&)
 T CAchievementZone::IsTouching(CBaseEntity const*) const
 T CAchievementZone::Precache()
 T CAchievementZone::Spawn()
 T CAchievementZone::~CAchievementZone()
 T CActivityDataOps::IsEmpty(SaveRestoreFieldInfo_t const&)
 T CActivityDataOps::MakeEmpty(SaveRestoreFieldInfo_t const&)
 T CActivityDataOps::Restore(SaveRestoreFieldInfo_t const&, IRestore*)
 T CActivityDataOps::Save(SaveRestoreFieldInfo_t const&, ISave*)
 T CAimTargetManager::ForceRepopulateList()
 T CAimTargetManager::OnEntityCreated(CBaseEntity*)
 T CAimTargetManager::OnEntityDeleted(CBaseEntity*)
 T CAimTargetManager::~CAimTargetManager()
 T CAmbientGeneric::Activate()
 T CAmbientGeneric::ComputeMaxAudibleDistance()
 T CAmbientGeneric::GetDataDescMap()
 T CAmbientGeneric::InitModulationParms()
 T CAmbientGeneric::InputFadeIn(inputdata_t&)
 T CAmbientGeneric::InputFadeOut(inputdata_t&)
 T CAmbientGeneric::InputPitch(inputdata_t&)
 T CAmbientGeneric::InputPlaySound(inputdata_t&)
 T CAmbientGeneric::InputStopSound(inputdata_t&)
 T CAmbientGeneric::InputToggleSound(inputdata_t&)
 T CAmbientGeneric::InputVolume(inputdata_t&)
 T CAmbientGeneric::KeyValue(char const*, char const*)
 T CAmbientGeneric::Precache()
 T CAmbientGeneric::RampThink()
 T CAmbientGeneric::SendSound(SoundFlags_t)
 T CAmbientGeneric::SetTransmit(CCheckTransmitInfo*, bool)
 T CAmbientGeneric::Spawn()
 T CAmbientGeneric::ToggleSound()
 T CAmbientGeneric::UpdateOnRemove()
 T CAmbientGeneric::ValidateSoundFile()
 T CAmbientGeneric::~CAmbientGeneric()
 T CAmmoDef::AddAmmoType(char const*, int, int, char const*, char const*, char const*, float, int, int, int)
 T CAmmoDef::CAmmoDef()
 T CAmmoDef::DamageForce(int)
 T CAmmoDef::DamageType(int)
 T CAmmoDef::Flags(int)
 T CAmmoDef::GetAmmoOfIndex(int)
 T CAmmoDef::Index(char const*)
 T CAmmoDef::MaxCarry(int)
 T CAmmoDef::MaxSplashSize(int)
 T CAmmoDef::MinSplashSize(int)
 T CAmmoDef::NPCDamage(int)
 T CAmmoDef::PlrDamage(int)
 T CAmmoDef::TracerType(int)
 T CAmmoDef::~CAmmoDef()
 T CAmmoFilter::IsSelected(CBaseEntity const*) const
 T CAmmoPack::GetAmmoPackName()
 T CAmmoPack::GetDefaultPowerupModel()
 T CAmmoPack::GetPowerupSize()
 T CAmmoPack::MyTouch(CBasePlayer*)
 T CAmmoPack::Precache()
 T CAmmoPack::Spawn()
 T CAmmoPack::UpdateModelIndexOverrides()
 T CAmmoPack::~CAmmoPack()
 T CAmmoPackMedium::GetAmmoPackName()
 T CAmmoPackMedium::GetDefaultPowerupModel()
 T CAmmoPackMedium::GetPowerupSize()
 T CAmmoPackMedium::Precache()
 T CAmmoPackMedium::UpdateModelIndexOverrides()
 T CAmmoPackMedium::~CAmmoPackMedium()
 T CAmmoPackSmall::GetAmmoPackName()
 T CAmmoPackSmall::GetDefaultPowerupModel()
 T CAmmoPackSmall::GetPowerupSize()
 T CAmmoPackSmall::Precache()
 T CAmmoPackSmall::UpdateModelIndexOverrides()
 T CAmmoPackSmall::~CAmmoPackSmall()
 T CAnchorList::AddToList(CBaseEntity*, float)
 T CAnchorList::LevelShutdownPostEntity()
 T CAnchorList::~CAnchorList()
 T CAnimationLayer::DispatchAnimEvents(CBaseAnimating*, CBaseAnimating*)
 T CAnimationLayer::Init(CBaseAnimatingOverlay*)
 T CAnimationLayer::StudioFrameAdvance(float, CBaseAnimating*)
 T CAreaPortal::GetDataDescMap()
 T CAreaPortal::InputClose(inputdata_t&)
 T CAreaPortal::InputOpen(inputdata_t&)
 T CAreaPortal::InputToggle(inputdata_t&)
 T CAreaPortal::KeyValue(char const*, char const*)
 T CAreaPortal::Precache()
 T CAreaPortal::Spawn()
 T CAreaPortal::UpdateTransmitState()
 T CAreaPortal::UpdateVisibility(Vector const&, float, bool&)
 T CAreaPortal::Use(CBaseEntity*, CBaseEntity*, USE_TYPE, float)
 T CAreaPortal::~CAreaPortal()
 T CArenaLogic::ArenaLogicThink()
 T CArenaLogic::GetDataDescMap()
 T CArenaLogic::Spawn()
 T CArenaLogic::UpdateTransmitState()
 T CArenaLogic::~CArenaLogic()
 T CArmor::GetDefaultPowerupModel()
 T CArmor::MyTouch(CBasePlayer*)
 T CArmor::Precache()
 T CArmor::Spawn()
 T CArmor::~CArmor()
 T CAssaultPoint::GetDataDescMap()
 T CAssaultPoint::InputSetAllowDiversion(inputdata_t&)
 T CAssaultPoint::InputSetClearOnContact(inputdata_t&)
 T CAssaultPoint::InputSetForceClear(inputdata_t&)
 T CAssaultPoint::~CAssaultPoint()
 T CAttributeContainer::ApplyAttributeFloat(float, CBaseEntity*, string_t, CUtlVector<CBaseEntity*, CUtlMemory<CBaseEntity*, int> >*)
 T CAttributeContainer::ApplyAttributeString(string_t, CBaseEntity*, string_t, CUtlVector<CBaseEntity*, CUtlMemory<CBaseEntity*, int> >*)
 T CAttributeContainer::GetDataDescMap()
 T CAttributeContainer::InitializeAttributes(CBaseEntity*)
 T CAttributeContainer::NetworkStateChanged()
 T CAttributeContainer::NetworkStateChanged(void*)
 T CAttributeContainer::NetworkVar_m_Item::NetworkStateChanged()
 T CAttributeContainer::NetworkVar_m_Item::NetworkStateChanged(void*)
 T CAttributeContainer::NetworkVar_m_Item::~NetworkVar_m_Item()
 T CAttributeContainer::OnAttributeValuesChanged()
 T CAttributeContainer::~CAttributeContainer()
 T CAttributeContainerPlayer::ApplyAttributeFloat(float, CBaseEntity*, string_t, CUtlVector<CBaseEntity*, CUtlMemory<CBaseEntity*, int> >*)
 T CAttributeContainerPlayer::ApplyAttributeString(string_t, CBaseEntity*, string_t, CUtlVector<CBaseEntity*, CUtlMemory<CBaseEntity*, int> >*)
 T CAttributeContainerPlayer::GetDataDescMap()
 T CAttributeContainerPlayer::OnAttributeValuesChanged()
 T CAttributeIterator_GetTypedAttributeValue<CAttribute_DynamicRecipeComponent, CAttribute_DynamicRecipeComponent>::OnIterateAttributeValue(CEconItemAttributeDefinition const*, CAttribute_DynamicRecipeComponent const&)
 T CAttributeIterator_GetTypedAttributeValue<CAttribute_DynamicRecipeComponent, CAttribute_DynamicRecipeComponent>::OnIterateAttributeValue(CEconItemAttributeDefinition const*, CAttribute_ItemSlotCriteria const&)
 T CAttributeIterator_GetTypedAttributeValue<CAttribute_DynamicRecipeComponent, CAttribute_DynamicRecipeComponent>::OnIterateAttributeValue(CEconItemAttributeDefinition const*, CAttribute_String const&)
 T CAttributeIterator_GetTypedAttributeValue<CAttribute_DynamicRecipeComponent, CAttribute_DynamicRecipeComponent>::OnIterateAttributeValue(CEconItemAttributeDefinition const*, CAttribute_WorldItemPlacement const&)
 T CAttributeIterator_GetTypedAttributeValue<CAttribute_DynamicRecipeComponent, CAttribute_DynamicRecipeComponent>::OnIterateAttributeValue(CEconItemAttributeDefinition const*, float)
 T CAttributeIterator_GetTypedAttributeValue<CAttribute_DynamicRecipeComponent, CAttribute_DynamicRecipeComponent>::OnIterateAttributeValue(CEconItemAttributeDefinition const*, unsigned int)
 T CAttributeIterator_GetTypedAttributeValue<CAttribute_DynamicRecipeComponent, CAttribute_DynamicRecipeComponent>::OnIterateAttributeValue(CEconItemAttributeDefinition const*, unsigned long long const&)
 T CAttributeIterator_GetTypedAttributeValue<CAttribute_DynamicRecipeComponent, CAttribute_DynamicRecipeComponent>::~CAttributeIterator_GetTypedAttributeValue()
 T CAttributeIterator_GetTypedAttributeValue<CAttribute_ItemSlotCriteria, CAttribute_ItemSlotCriteria>::OnIterateAttributeValue(CEconItemAttributeDefinition const*, CAttribute_DynamicRecipeComponent const&)
 T CAttributeIterator_GetTypedAttributeValue<CAttribute_ItemSlotCriteria, CAttribute_ItemSlotCriteria>::OnIterateAttributeValue(CEconItemAttributeDefinition const*, CAttribute_ItemSlotCriteria const&)
 T CAttributeIterator_GetTypedAttributeValue<CAttribute_ItemSlotCriteria, CAttribute_ItemSlotCriteria>::OnIterateAttributeValue(CEconItemAttributeDefinition const*, CAttribute_String const&)
 T CAttributeIterator_GetTypedAttributeValue<CAttribute_ItemSlotCriteria, CAttribute_ItemSlotCriteria>::OnIterateAttributeValue(CEconItemAttributeDefinition const*, CAttribute_WorldItemPlacement const&)
 T CAttributeIterator_GetTypedAttributeValue<CAttribute_ItemSlotCriteria, CAttribute_ItemSlotCriteria>::OnIterateAttributeValue(CEconItemAttributeDefinition const*, float)
 T CAttributeIterator_GetTypedAttributeValue<CAttribute_ItemSlotCriteria, CAttribute_ItemSlotCriteria>::OnIterateAttributeValue(CEconItemAttributeDefinition const*, unsigned int)
 T CAttributeIterator_GetTypedAttributeValue<CAttribute_ItemSlotCriteria, CAttribute_ItemSlotCriteria>::OnIterateAttributeValue(CEconItemAttributeDefinition const*, unsigned long long const&)
 T CAttributeIterator_GetTypedAttributeValue<CAttribute_ItemSlotCriteria, CAttribute_ItemSlotCriteria>::~CAttributeIterator_GetTypedAttributeValue()
 T CAttributeIterator_GetTypedAttributeValue<CAttribute_String, CAttribute_String>::OnIterateAttributeValue(CEconItemAttributeDefinition const*, CAttribute_DynamicRecipeComponent const&)
 T CAttributeIterator_GetTypedAttributeValue<CAttribute_String, CAttribute_String>::OnIterateAttributeValue(CEconItemAttributeDefinition const*, CAttribute_ItemSlotCriteria const&)
 T CAttributeIterator_GetTypedAttributeValue<CAttribute_String, CAttribute_String>::OnIterateAttributeValue(CEconItemAttributeDefinition const*, CAttribute_String const&)
 T CAttributeIterator_GetTypedAttributeValue<CAttribute_String, CAttribute_String>::OnIterateAttributeValue(CEconItemAttributeDefinition const*, CAttribute_WorldItemPlacement const&)
 T CAttributeIterator_GetTypedAttributeValue<CAttribute_String, CAttribute_String>::OnIterateAttributeValue(CEconItemAttributeDefinition const*, float)
 T CAttributeIterator_GetTypedAttributeValue<CAttribute_String, CAttribute_String>::OnIterateAttributeValue(CEconItemAttributeDefinition const*, unsigned int)
 T CAttributeIterator_GetTypedAttributeValue<CAttribute_String, CAttribute_String>::OnIterateAttributeValue(CEconItemAttributeDefinition const*, unsigned long long const&)
 T CAttributeIterator_GetTypedAttributeValue<CAttribute_String, CAttribute_String>::~CAttributeIterator_GetTypedAttributeValue()
 T CAttributeIterator_GetTypedAttributeValue<CAttribute_String, char const*>::OnIterateAttributeValue(CEconItemAttributeDefinition const*, CAttribute_DynamicRecipeComponent const&)
 T CAttributeIterator_GetTypedAttributeValue<CAttribute_String, char const*>::OnIterateAttributeValue(CEconItemAttributeDefinition const*, CAttribute_ItemSlotCriteria const&)
 T CAttributeIterator_GetTypedAttributeValue<CAttribute_String, char const*>::OnIterateAttributeValue(CEconItemAttributeDefinition const*, CAttribute_String const&)
 T CAttributeIterator_GetTypedAttributeValue<CAttribute_String, char const*>::OnIterateAttributeValue(CEconItemAttributeDefinition const*, CAttribute_WorldItemPlacement const&)
 T CAttributeIterator_GetTypedAttributeValue<CAttribute_String, char const*>::OnIterateAttributeValue(CEconItemAttributeDefinition const*, float)
 T CAttributeIterator_GetTypedAttributeValue<CAttribute_String, char const*>::OnIterateAttributeValue(CEconItemAttributeDefinition const*, unsigned int)
 T CAttributeIterator_GetTypedAttributeValue<CAttribute_String, char const*>::OnIterateAttributeValue(CEconItemAttributeDefinition const*, unsigned long long const&)
 T CAttributeIterator_GetTypedAttributeValue<CAttribute_String, char const*>::~CAttributeIterator_GetTypedAttributeValue()
 T CAttributeIterator_GetTypedAttributeValue<CAttribute_WorldItemPlacement, CAttribute_WorldItemPlacement>::OnIterateAttributeValue(CEconItemAttributeDefinition const*, CAttribute_DynamicRecipeComponent const&)
 T CAttributeIterator_GetTypedAttributeValue<CAttribute_WorldItemPlacement, CAttribute_WorldItemPlacement>::OnIterateAttributeValue(CEconItemAttributeDefinition const*, CAttribute_ItemSlotCriteria const&)
 T CAttributeIterator_GetTypedAttributeValue<CAttribute_WorldItemPlacement, CAttribute_WorldItemPlacement>::OnIterateAttributeValue(CEconItemAttributeDefinition const*, CAttribute_String const&)
 T CAttributeIterator_GetTypedAttributeValue<CAttribute_WorldItemPlacement, CAttribute_WorldItemPlacement>::OnIterateAttributeValue(CEconItemAttributeDefinition const*, CAttribute_WorldItemPlacement const&)
 T CAttributeIterator_GetTypedAttributeValue<CAttribute_WorldItemPlacement, CAttribute_WorldItemPlacement>::OnIterateAttributeValue(CEconItemAttributeDefinition const*, float)
 T CAttributeIterator_GetTypedAttributeValue<CAttribute_WorldItemPlacement, CAttribute_WorldItemPlacement>::OnIterateAttributeValue(CEconItemAttributeDefinition const*, unsigned int)
 T CAttributeIterator_GetTypedAttributeValue<CAttribute_WorldItemPlacement, CAttribute_WorldItemPlacement>::OnIterateAttributeValue(CEconItemAttributeDefinition const*, unsigned long long const&)
 T CAttributeIterator_GetTypedAttributeValue<CAttribute_WorldItemPlacement, CAttribute_WorldItemPlacement>::~CAttributeIterator_GetTypedAttributeValue()
 T CAttributeIterator_GetTypedAttributeValue<float, float>::OnIterateAttributeValue(CEconItemAttributeDefinition const*, CAttribute_DynamicRecipeComponent const&)
 T CAttributeIterator_GetTypedAttributeValue<float, float>::OnIterateAttributeValue(CEconItemAttributeDefinition const*, CAttribute_ItemSlotCriteria const&)
 T CAttributeIterator_GetTypedAttributeValue<float, float>::OnIterateAttributeValue(CEconItemAttributeDefinition const*, CAttribute_String const&)
 T CAttributeIterator_GetTypedAttributeValue<float, float>::OnIterateAttributeValue(CEconItemAttributeDefinition const*, CAttribute_WorldItemPlacement const&)
 T CAttributeIterator_GetTypedAttributeValue<float, float>::OnIterateAttributeValue(CEconItemAttributeDefinition const*, float)
 T CAttributeIterator_GetTypedAttributeValue<float, float>::OnIterateAttributeValue(CEconItemAttributeDefinition const*, unsigned int)
 T CAttributeIterator_GetTypedAttributeValue<float, float>::OnIterateAttributeValue(CEconItemAttributeDefinition const*, unsigned long long const&)
 T CAttributeIterator_GetTypedAttributeValue<float, float>::~CAttributeIterator_GetTypedAttributeValue()
 T CAttributeIterator_GetTypedAttributeValue<unsigned int, float>::OnIterateAttributeValue(CEconItemAttributeDefinition const*, CAttribute_DynamicRecipeComponent const&)
 T CAttributeIterator_GetTypedAttributeValue<unsigned int, float>::OnIterateAttributeValue(CEconItemAttributeDefinition const*, CAttribute_ItemSlotCriteria const&)
 T CAttributeIterator_GetTypedAttributeValue<unsigned int, float>::OnIterateAttributeValue(CEconItemAttributeDefinition const*, CAttribute_String const&)
 T CAttributeIterator_GetTypedAttributeValue<unsigned int, float>::OnIterateAttributeValue(CEconItemAttributeDefinition const*, CAttribute_WorldItemPlacement const&)
 T CAttributeIterator_GetTypedAttributeValue<unsigned int, float>::OnIterateAttributeValue(CEconItemAttributeDefinition const*, float)
 T CAttributeIterator_GetTypedAttributeValue<unsigned int, float>::OnIterateAttributeValue(CEconItemAttributeDefinition const*, unsigned int)
 T CAttributeIterator_GetTypedAttributeValue<unsigned int, float>::OnIterateAttributeValue(CEconItemAttributeDefinition const*, unsigned long long const&)
 T CAttributeIterator_GetTypedAttributeValue<unsigned int, float>::~CAttributeIterator_GetTypedAttributeValue()
 T CAttributeIterator_GetTypedAttributeValue<unsigned int, unsigned int>::OnIterateAttributeValue(CEconItemAttributeDefinition const*, CAttribute_DynamicRecipeComponent const&)
 T CAttributeIterator_GetTypedAttributeValue<unsigned int, unsigned int>::OnIterateAttributeValue(CEconItemAttributeDefinition const*, CAttribute_ItemSlotCriteria const&)
 T CAttributeIterator_GetTypedAttributeValue<unsigned int, unsigned int>::OnIterateAttributeValue(CEconItemAttributeDefinition const*, CAttribute_String const&)
 T CAttributeIterator_GetTypedAttributeValue<unsigned int, unsigned int>::OnIterateAttributeValue(CEconItemAttributeDefinition const*, CAttribute_WorldItemPlacement const&)
 T CAttributeIterator_GetTypedAttributeValue<unsigned int, unsigned int>::OnIterateAttributeValue(CEconItemAttributeDefinition const*, float)
 T CAttributeIterator_GetTypedAttributeValue<unsigned int, unsigned int>::OnIterateAttributeValue(CEconItemAttributeDefinition const*, unsigned int)
 T CAttributeIterator_GetTypedAttributeValue<unsigned int, unsigned int>::OnIterateAttributeValue(CEconItemAttributeDefinition const*, unsigned long long const&)
 T CAttributeIterator_GetTypedAttributeValue<unsigned int, unsigned int>::~CAttributeIterator_GetTypedAttributeValue()
 T CAttributeIterator_GetTypedAttributeValue<unsigned long long, unsigned long long>::OnIterateAttributeValue(CEconItemAttributeDefinition const*, CAttribute_DynamicRecipeComponent const&)
 T CAttributeIterator_GetTypedAttributeValue<unsigned long long, unsigned long long>::OnIterateAttributeValue(CEconItemAttributeDefinition const*, CAttribute_ItemSlotCriteria const&)
 T CAttributeIterator_GetTypedAttributeValue<unsigned long long, unsigned long long>::OnIterateAttributeValue(CEconItemAttributeDefinition const*, CAttribute_String const&)
 T CAttributeIterator_GetTypedAttributeValue<unsigned long long, unsigned long long>::OnIterateAttributeValue(CEconItemAttributeDefinition const*, CAttribute_WorldItemPlacement const&)
 T CAttributeIterator_GetTypedAttributeValue<unsigned long long, unsigned long long>::OnIterateAttributeValue(CEconItemAttributeDefinition const*, float)
 T CAttributeIterator_GetTypedAttributeValue<unsigned long long, unsigned long long>::OnIterateAttributeValue(CEconItemAttributeDefinition const*, unsigned int)
 T CAttributeIterator_GetTypedAttributeValue<unsigned long long, unsigned long long>::OnIterateAttributeValue(CEconItemAttributeDefinition const*, unsigned long long const&)
 T CAttributeIterator_GetTypedAttributeValue<unsigned long long, unsigned long long>::~CAttributeIterator_GetTypedAttributeValue()
 T CAttributeIterator_HasAttribute::OnIterateAttributeValueUntyped(CEconItemAttributeDefinition const*)
 T CAttributeIterator_HasAttribute::~CAttributeIterator_HasAttribute()
 T CAttributeList::AddAttribute(CEconItemAttribute*)
 T CAttributeList::CAttributeList()
 T CAttributeList::DestroyAllAttributes()
 T CAttributeList::GetDataDescMap()
 T CAttributeList::GetRuntimeAttributeRefundableCurrency(CEconItemAttributeDefinition const*) const
 T CAttributeList::IterateAttributes(IEconItemAttributeIterator*) const
 T CAttributeList::NetworkStateChanged()
 T CAttributeList::NetworkStateChanged(void*)
 T CAttributeList::RemoveAttribute(CEconItemAttributeDefinition const*)
 T CAttributeList::RemoveAttributeByIndex(int)
 T CAttributeList::SetManager(CAttributeManager*)
 T CAttributeList::SetRuntimeAttributeRefundableCurrency(CEconItemAttributeDefinition const*, int)
 T CAttributeList::SetRuntimeAttributeValue(CEconItemAttributeDefinition const*, float)
 T CAttributeManager::AddProvider(CBaseEntity*)
 T CAttributeManager::ApplyAttributeFloat(float, CBaseEntity*, string_t, CUtlVector<CBaseEntity*, CUtlMemory<CBaseEntity*, int> >*)
 T CAttributeManager::ApplyAttributeFloatWrapper(float, CBaseEntity*, string_t, CUtlVector<CBaseEntity*, CUtlMemory<CBaseEntity*, int> >*)
 T CAttributeManager::ApplyAttributeString(string_t, CBaseEntity*, string_t, CUtlVector<CBaseEntity*, CUtlMemory<CBaseEntity*, int> >*)
 T CAttributeManager::ApplyAttributeStringWrapper(string_t, CBaseEntity*, string_t, CUtlVector<CBaseEntity*, CUtlMemory<CBaseEntity*, int> >*)
 T CAttributeManager::CAttributeManager()
 T CAttributeManager::ClearCache()
 T CAttributeManager::GetDataDescMap()
 T CAttributeManager::InitializeAttributes(CBaseEntity*)
 T CAttributeManager::IsBeingProvidedToBy(CBaseEntity*) const
 T CAttributeManager::NetworkStateChanged()
 T CAttributeManager::NetworkStateChanged(void*)
 T CAttributeManager::NetworkStateChanged_m_ProviderType()
 T CAttributeManager::NetworkStateChanged_m_ProviderType(void*)
 T CAttributeManager::NetworkStateChanged_m_hOuter()
 T CAttributeManager::NetworkStateChanged_m_hOuter(void*)
 T CAttributeManager::NetworkStateChanged_m_iReapplyProvisionParity()
 T CAttributeManager::NetworkStateChanged_m_iReapplyProvisionParity(void*)
 T CAttributeManager::OnAttributeValuesChanged()
 T CAttributeManager::ProvideTo(CBaseEntity*)
 T CAttributeManager::RemoveProvider(CBaseEntity*)
 T CAttributeManager::StopProvidingTo(CBaseEntity*)
 T CAttributeManager::TypedAttribHookValueInternal(CAttribute_String&, CAttribute_String const&, string_t, CBaseEntity const*, IHasAttributes*, CUtlVector<CBaseEntity*, CUtlMemory<CBaseEntity*, int> >*)
 T CAttributeManager::~CAttributeManager()
 T CAttribute_DynamicRecipeComponent::ByteSize() const
 T CAttribute_DynamicRecipeComponent::CAttribute_DynamicRecipeComponent()
 T CAttribute_DynamicRecipeComponent::Clear()
 T CAttribute_DynamicRecipeComponent::CopyFrom(CAttribute_DynamicRecipeComponent const&)
 T CAttribute_DynamicRecipeComponent::GetCachedSize() const
 T CAttribute_DynamicRecipeComponent::GetMetadata() const
 T CAttribute_DynamicRecipeComponent::IsInitialized() const
 T CAttribute_DynamicRecipeComponent::MergeFrom(CAttribute_DynamicRecipeComponent const&)
 T CAttribute_DynamicRecipeComponent::New() const
 T CAttribute_DynamicRecipeComponent::SerializeWithCachedSizesToArray(unsigned char*) const
 T CAttribute_DynamicRecipeComponent::SetCachedSize(int) const
 T CAttribute_DynamicRecipeComponent::~CAttribute_DynamicRecipeComponent()
 T CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT::ByteSize() const
 T CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT::Clear()
 T CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT::GetCachedSize() const
 T CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT::GetMetadata() const
 T CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT::IsInitialized() const
 T CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT::MergeFrom(CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT const&)
 T CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT::New() const
 T CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT::SerializeWithCachedSizesToArray(unsigned char*) const
 T CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT::SetCachedSize(int) const
 T CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT::~CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT()
 T CAttribute_ItemSlotCriteria::ByteSize() const
 T CAttribute_ItemSlotCriteria::CAttribute_ItemSlotCriteria()
 T CAttribute_ItemSlotCriteria::Clear()
 T CAttribute_ItemSlotCriteria::CopyFrom(CAttribute_ItemSlotCriteria const&)
 T CAttribute_ItemSlotCriteria::GetCachedSize() const
 T CAttribute_ItemSlotCriteria::GetMetadata() const
 T CAttribute_ItemSlotCriteria::IsInitialized() const
 T CAttribute_ItemSlotCriteria::MergeFrom(CAttribute_ItemSlotCriteria const&)
 T CAttribute_ItemSlotCriteria::New() const
 T CAttribute_ItemSlotCriteria::SerializeWithCachedSizesToArray(unsigned char*) const
 T CAttribute_ItemSlotCriteria::SetCachedSize(int) const
 T CAttribute_ItemSlotCriteria::~CAttribute_ItemSlotCriteria()
 T CAttribute_String CAttributeManager::AttribHookValue<CAttribute_String>(CAttribute_String, char const*, CBaseEntity const*, CUtlVector<CBaseEntity*, CUtlMemory<CBaseEntity*, int> >*, bool)
 T CAttribute_String::ByteSize() const
 T CAttribute_String::CAttribute_String()
 T CAttribute_String::CAttribute_String(CAttribute_String const&)
 T CAttribute_String::Clear()
 T CAttribute_String::CopyFrom(CAttribute_String const&)
 T CAttribute_String::GetCachedSize() const
 T CAttribute_String::GetMetadata() const
 T CAttribute_String::IsInitialized() const
 T CAttribute_String::MergeFrom(CAttribute_String const&)
 T CAttribute_String::New() const
 T CAttribute_String::SerializeWithCachedSizesToArray(unsigned char*) const
 T CAttribute_String::SetCachedSize(int) const
 T CAttribute_String::~CAttribute_String()
 T CAttribute_WorldItemPlacement::ByteSize() const
 T CAttribute_WorldItemPlacement::CAttribute_WorldItemPlacement()
 T CAttribute_WorldItemPlacement::Clear()
 T CAttribute_WorldItemPlacement::CopyFrom(CAttribute_WorldItemPlacement const&)
 T CAttribute_WorldItemPlacement::GetCachedSize() const
 T CAttribute_WorldItemPlacement::GetMetadata() const
 T CAttribute_WorldItemPlacement::IsInitialized() const
 T CAttribute_WorldItemPlacement::MergeFrom(CAttribute_WorldItemPlacement const&)
 T CAttribute_WorldItemPlacement::New() const
 T CAttribute_WorldItemPlacement::SerializeWithCachedSizesToArray(unsigned char*) const
 T CAttribute_WorldItemPlacement::SetCachedSize(int) const
 T CAttribute_WorldItemPlacement::~CAttribute_WorldItemPlacement()
 T CAutoGameSystem::CAutoGameSystem(char const*)
 T CAutoGameSystem::Name()
 T CAutoGameSystem::~CAutoGameSystem()
 T CAutoGameSystemPerFrame::CAutoGameSystemPerFrame(char const*)
 T CAutoGameSystemPerFrame::Name()
 T CAutoGameSystemPerFrame::~CAutoGameSystemPerFrame()
 T CBallPlayerToucher::OnTouch(CBaseEntity*)
 T CBallPlayerToucher::ShouldCollide(int, int) const
 T CBallPlayerToucher::Spawn()
 T CBallPlayerToucher::~CBallPlayerToucher()
 T CBaseAchievement::AlwaysEnabled()
 T CBaseAchievement::AlwaysListen()
 T CBaseAchievement::ApplySettings(KeyValues*)
 T CBaseAchievement::CBaseAchievement()
 T CBaseAchievement::CalcProgressMsgIncrement()
 T CBaseAchievement::Event_EntityKilled(CBaseEntity*, CBaseEntity*, CBaseEntity*, IGameEvent*)
 T CBaseAchievement::FireGameEvent(IGameEvent*)
 T CBaseAchievement::FireGameEvent_Internal(IGameEvent*)
 T CBaseAchievement::GetAchievementID()
 T CBaseAchievement::GetCount()
 T CBaseAchievement::GetDataDescMap()
 T CBaseAchievement::GetFlags()
 T CBaseAchievement::GetGoal()
 T CBaseAchievement::GetName()
 T CBaseAchievement::GetPointValue()
 T CBaseAchievement::GetSettings(KeyValues*)
 T CBaseAchievement::HandleProgressUpdate()
 T CBaseAchievement::IncrementCount(int)
 T CBaseAchievement::Init()
 T CBaseAchievement::IsAchieved()
 T CBaseAchievement::IsActive()
 T CBaseAchievement::IsMetaAchievement()
 T CBaseAchievement::ListenForEvents()
 T CBaseAchievement::LocalPlayerCanEarn()
 T CBaseAchievement::OnAchieved()
 T CBaseAchievement::OnMapEvent(char const*)
 T CBaseAchievement::OnPlayerStatsUpdate()
 T CBaseAchievement::OnSteamUserStatsStored()
 T CBaseAchievement::PostRestoreSavedGame()
 T CBaseAchievement::PreRestoreSavedGame()
 T CBaseAchievement::PrintAdditionalStatus()
 T CBaseAchievement::SetShowOnHUD(bool)
 T CBaseAchievement::ShouldHideUntilAchieved()
 T CBaseAchievement::ShouldSaveWithGame()
 T CBaseAchievement::ShouldShowOnHUD()
 T CBaseAchievement::ShouldShowProgressNotification()
 T CBaseAchievement::Think()
 T CBaseAchievement::UpdateAchievement(int)
 T CBaseAchievement::~CBaseAchievement()
 T CBaseAnimating::Activate()
 T CBaseAnimating::BecomeRagdollOnClient(Vector const&)
 T CBaseAnimating::BuildMatricesWithBoneMerge(CStudioHdr const*, QAngle const&, Vector const&, Vector const*, Quaternion const*, matrix3x4_t*, CBaseAnimating*, CBoneCache*)
 T CBaseAnimating::CBaseAnimating()
 T CBaseAnimating::CalculateIKLocks(float)
 T CBaseAnimating::CanBecomeRagdoll()
 T CBaseAnimating::ClampRagdollForce(Vector const&, Vector*)
 T CBaseAnimating::ComputeHitboxSurroundingBox(Vector*, Vector*)
 T CBaseAnimating::CopyAnimationDataFrom(CBaseAnimating*)
 T CBaseAnimating::DispatchAnimEvents(CBaseAnimating*)
 T CBaseAnimating::Dissolve(char const*, float, bool, int, Vector, int)
 T CBaseAnimating::DoMuzzleFlash()
 T CBaseAnimating::DrawDebugTextOverlays()
 T CBaseAnimating::DrawRawSkeleton(matrix3x4_t*, int, bool, float, bool)
 T CBaseAnimating::DrawServerHitboxes(float, bool)
 T CBaseAnimating::EdgeLimitPoseParameter(int, float, float)
 T CBaseAnimating::Extinguish()
 T CBaseAnimating::FindBodygroupByName(char const*)
 T CBaseAnimating::FindTransitionSequence(int, int, int*)
 T CBaseAnimating::GetAnimTimeInterval() const
 T CBaseAnimating::GetAttachment(char const*, Vector&, QAngle&)
 T CBaseAnimating::GetAttachment(char const*, Vector&, Vector*, Vector*, Vector*)
 T CBaseAnimating::GetAttachment(int, Vector&, QAngle&)
 T CBaseAnimating::GetAttachment(int, Vector&, Vector*, Vector*, Vector*)
 T CBaseAnimating::GetAttachment(int, matrix3x4_t&)
 T CBaseAnimating::GetAttachmentBone(int)
 T CBaseAnimating::GetAttachmentLocal(int, Vector&, QAngle&)
 T CBaseAnimating::GetBaseAnimating()
 T CBaseAnimating::GetBodygroupCount(int)
 T CBaseAnimating::GetBoneCache()
 T CBaseAnimating::GetBonePosition(int, Vector&, QAngle&)
 T CBaseAnimating::GetBoneTransform(int, matrix3x4_t&)
 T CBaseAnimating::GetDataDescMap()
 T CBaseAnimating::GetEntryVelocity(int)
 T CBaseAnimating::GetFlexControllerName(LocalFlexController_t)
 T CBaseAnimating::GetFlexControllerType(LocalFlexController_t)
 T CBaseAnimating::GetGroundSpeedVelocity()
 T CBaseAnimating::GetHitboxBone(int)
 T CBaseAnimating::GetHitboxSet()
 T CBaseAnimating::GetHitboxesFrontside(int*, int, Vector const&, float)
 T CBaseAnimating::GetIdealAccel() const
 T CBaseAnimating::GetIdealSpeed() const
 T CBaseAnimating::GetInputDispatchEffectPosition(char const*, Vector&, QAngle&)
 T CBaseAnimating::GetInstantaneousVelocity(float)
 T CBaseAnimating::GetIntervalMovement(float, bool&, Vector&, QAngle&)
 T CBaseAnimating::GetLastVisibleCycle(CStudioHdr*, int)
 T CBaseAnimating::GetMovementFrame(float)
 T CBaseAnimating::GetNumFlexControllers()
 T CBaseAnimating::GetPhysicsBone(int)
 T CBaseAnimating::GetPoseParameter(int)
 T CBaseAnimating::GetPoseParameterRange(int, float&, float&)
 T CBaseAnimating::GetSequenceActivity(int)
 T CBaseAnimating::GetSequenceActivityName(int)
 T CBaseAnimating::GetSequenceCycleRate(CStudioHdr*, int)
 T CBaseAnimating::GetSequenceGroundSpeed(CStudioHdr*, int)
 T CBaseAnimating::GetSequenceKeyValues(int)
 T CBaseAnimating::GetSequenceLinearMotion(int, Vector*)
 T CBaseAnimating::GetSequenceMoveYaw(int)
 T CBaseAnimating::GetSequenceMovement(int, float, float, Vector&, QAngle&)
 T CBaseAnimating::GetSequenceName(int)
 T CBaseAnimating::GetServerClass()
 T CBaseAnimating::GetSkeleton(CStudioHdr*, Vector*, Quaternion*, int)
 T CBaseAnimating::GetStepAngles() const
 T CBaseAnimating::GetStepOrigin() const
 T CBaseAnimating::GetVelocity(Vector*, Vector*)
 T CBaseAnimating::GotoSequence(int, float, float, int, int&, float&, int&)
 T CBaseAnimating::HandleAnimEvent(animevent_t*)
 T CBaseAnimating::HasAnimEvent(int, int)
 T CBaseAnimating::HasMovement(int)
 T CBaseAnimating::HasPoseParameter(int, int)
 T CBaseAnimating::Ignite(float, bool, float, bool)
 T CBaseAnimating::IgniteHitboxFireScale(float)
 T CBaseAnimating::IgniteLifetime(float)
 T CBaseAnimating::IgniteNumHitboxFires(int)
 T CBaseAnimating::InitBoneControllers()
 T CBaseAnimating::InputBecomeRagdoll(inputdata_t&)
 T CBaseAnimating::InputIgnite(inputdata_t&)
 T CBaseAnimating::InputIgniteHitboxFireScale(inputdata_t&)
 T CBaseAnimating::InputIgniteLifetime(inputdata_t&)
 T CBaseAnimating::InputIgniteNumHitboxFires(inputdata_t&)
 T CBaseAnimating::InputSetLightingOrigin(inputdata_t&)
 T CBaseAnimating::InputSetLightingOriginRelative(inputdata_t&)
 T CBaseAnimating::InputSetModelScale(inputdata_t&)
 T CBaseAnimating::InvalidateBoneCache()
 T CBaseAnimating::IsActivityFinished()
 T CBaseAnimating::IsRagdoll()
 T CBaseAnimating::IsValidSequence(int)
 T CBaseAnimating::LockStudioHdr()
 T CBaseAnimating::LookupActivity(char const*)
 T CBaseAnimating::LookupAttachment(char const*)
 T CBaseAnimating::LookupBone(char const*)
 T CBaseAnimating::LookupPoseParameter(CStudioHdr*, char const*)
 T CBaseAnimating::LookupSequence(char const*)
 T CBaseAnimating::ModifyOrAppendCriteria(AI_CriteriaSet&)
 T CBaseAnimating::OnNewModel()
 T CBaseAnimating::OnRestore()
 T CBaseAnimating::PopulatePoseParameters()
 T CBaseAnimating::Precache()
 T CBaseAnimating::RefreshCollisionBounds()
 T CBaseAnimating::ResetActivityIndexes()
 T CBaseAnimating::ResetClientsideFrame()
 T CBaseAnimating::ResetEventIndexes()
 T CBaseAnimating::ResetSequence(int)
 T CBaseAnimating::ResetSequenceInfo()
 T CBaseAnimating::Restore(IRestore&)
 T CBaseAnimating::SelectHeaviestSequence(Activity)
 T CBaseAnimating::SelectWeightedSequence(Activity)
 T CBaseAnimating::SelectWeightedSequence(Activity, int)
 T CBaseAnimating::SequenceDuration(CStudioHdr*, int)
 T CBaseAnimating::SetBodygroup(int, int)
 T CBaseAnimating::SetBoneController(int, float)
 T CBaseAnimating::SetFadeDistance(float, float)
 T CBaseAnimating::SetLightingOrigin(CBaseEntity*)
 T CBaseAnimating::SetLightingOrigin(string_t)
 T CBaseAnimating::SetLightingOriginRelative(CBaseEntity*)
 T CBaseAnimating::SetLightingOriginRelative(string_t)
 T CBaseAnimating::SetModel(char const*)
 T CBaseAnimating::SetModelScale(float, float)
 T CBaseAnimating::SetPoseParameter(CStudioHdr*, int, float)
 T CBaseAnimating::SetSequence(int)
 T CBaseAnimating::SetSequenceBox()
 T CBaseAnimating::SetTransmit(CCheckTransmitInfo*, bool)
 T CBaseAnimating::SetupBones(matrix3x4_t*, int)
 T CBaseAnimating::Spawn()
 T CBaseAnimating::StudioFrameAdvance()
 T CBaseAnimating::StudioFrameAdvanceInternal(CStudioHdr*, float)
 T CBaseAnimating::StudioFrameAdvanceManual(float)
 T CBaseAnimating::Teleport(Vector const*, QAngle const*, Vector const*)
 T CBaseAnimating::TestCollision(Ray_t const&, unsigned int, CGameTrace&)
 T CBaseAnimating::TestHitboxes(Ray_t const&, unsigned int, CGameTrace&)
 T CBaseAnimating::TransferDissolveFrom(CBaseAnimating*)
 T CBaseAnimating::UnlockStudioHdr()
 T CBaseAnimating::UpdateModelScale()
 T CBaseAnimating::UpdateStepOrigin()
 T CBaseAnimating::UseClientSideAnimation()
 T CBaseAnimating::YouForgotToImplementOrDeclareServerClass()
 T CBaseAnimating::~CBaseAnimating()
 T CBaseAnimatingOverlay::AddGesture(Activity, bool)
 T CBaseAnimatingOverlay::AddGestureSequence(int, bool)
 T CBaseAnimatingOverlay::AddLayeredSequence(int, int)
 T CBaseAnimatingOverlay::AllocateLayer(int)
 T CBaseAnimatingOverlay::DispatchAnimEvents(CBaseAnimating*)
 T CBaseAnimatingOverlay::FastRemoveLayer(int)
 T CBaseAnimatingOverlay::FindGestureLayer(Activity)
 T CBaseAnimatingOverlay::GetAnimOverlay(int)
 T CBaseAnimatingOverlay::GetDataDescMap()
 T CBaseAnimatingOverlay::GetLayerCycle(int)
 T CBaseAnimatingOverlay::GetLayerDuration(int)
 T CBaseAnimatingOverlay::GetLayerSequence(int)
 T CBaseAnimatingOverlay::GetServerClass()
 T CBaseAnimatingOverlay::GetSkeleton(CStudioHdr*, Vector*, Quaternion*, int)
 T CBaseAnimatingOverlay::IsPlayingGesture(Activity)
 T CBaseAnimatingOverlay::OnRestore()
 T CBaseAnimatingOverlay::RemoveAllGestures()
 T CBaseAnimatingOverlay::RemoveGesture(Activity)
 T CBaseAnimatingOverlay::RemoveLayer(int, float, float)
 T CBaseAnimatingOverlay::RestartGesture(Activity, bool, bool)
 T CBaseAnimatingOverlay::SetLayerCycle(int, float)
 T CBaseAnimatingOverlay::SetLayerCycle(int, float, float)
 T CBaseAnimatingOverlay::SetLayerCycle(int, float, float, float)
 T CBaseAnimatingOverlay::SetLayerDuration(int, float)
 T CBaseAnimatingOverlay::SetLayerLooping(int, bool)
 T CBaseAnimatingOverlay::SetLayerNoRestore(int, bool)
 T CBaseAnimatingOverlay::SetLayerPlaybackRate(int, float)
 T CBaseAnimatingOverlay::SetLayerPriority(int, int)
 T CBaseAnimatingOverlay::SetLayerWeight(int, float)
 T CBaseAnimatingOverlay::SetNumAnimOverlays(int)
 T CBaseAnimatingOverlay::StudioFrameAdvance()
 T CBaseAnimatingOverlay::YouForgotToImplementOrDeclareServerClass()
 T CBaseAnimatingOverlay::~CBaseAnimatingOverlay()
 T CBaseAppSystem<IParticleSystemQuery>::Connect(void* (*)(char const*, int*))
 T CBaseAppSystem<IParticleSystemQuery>::Disconnect()
 T CBaseAppSystem<IParticleSystemQuery>::Init()
 T CBaseAppSystem<IParticleSystemQuery>::QueryInterface(char const*)
 T CBaseAppSystem<IParticleSystemQuery>::Shutdown()
 T CBaseButton* _CreateEntityTemplate<CBaseButton>(CBaseButton*, char const*)
 T CBaseButton::ButtonActivate()
 T CBaseButton::ButtonBackHome()
 T CBaseButton::ButtonReturn()
 T CBaseButton::ButtonSpark()
 T CBaseButton::ButtonTouch(CBaseEntity*)
 T CBaseButton::ButtonUse(CBaseEntity*, CBaseEntity*, USE_TYPE, float)
 T CBaseButton::CreateVPhysics()
 T CBaseButton::DrawDebugTextOverlays()
 T CBaseButton::GetDataDescMap()
 T CBaseButton::InputLock(inputdata_t&)
 T CBaseButton::InputPress(inputdata_t&)
 T CBaseButton::InputPressIn(inputdata_t&)
 T CBaseButton::InputPressOut(inputdata_t&)
 T CBaseButton::InputUnlock(inputdata_t&)
 T CBaseButton::KeyValue(char const*, char const*)
 T CBaseButton::Lock()
 T CBaseButton::ObjectCaps()
 T CBaseButton::OnTakeDamage(CTakeDamageInfo const&)
 T CBaseButton::Precache()
 T CBaseButton::Press(CBaseEntity*, CBaseButton::BUTTON_CODE)
 T CBaseButton::Spawn()
 T CBaseButton::TriggerAndWait()
 T CBaseButton::Unlock()
 T CBaseButton::~CBaseButton()
 T CBaseCombatCharacter::AddClassRelationship(Class_T, Disposition_t, int)
 T CBaseCombatCharacter::AddEntityRelationship(CBaseEntity*, Disposition_t, int)
 T CBaseCombatCharacter::AddGlowEffect()
 T CBaseCombatCharacter::AddPlayerItem(CBaseCombatWeapon*)
 T CBaseCombatCharacter::ApplyStressDamage(IPhysicsObject*, bool)
 T CBaseCombatCharacter::BecomeRagdoll(CTakeDamageInfo const&, Vector const&)
 T CBaseCombatCharacter::BecomeRagdollBoogie(CBaseEntity*, Vector const&, float, int)
 T CBaseCombatCharacter::BloodColor()
 T CBaseCombatCharacter::BodyAngles()
 T CBaseCombatCharacter::BodyDirection2D()
 T CBaseCombatCharacter::BodyDirection3D()
 T CBaseCombatCharacter::CBaseCombatCharacter()
 T CBaseCombatCharacter::CalcDamageForceVector(CTakeDamageInfo const&)
 T CBaseCombatCharacter::CalcWeaponProficiency(CBaseCombatWeapon*)
 T CBaseCombatCharacter::CanBecomeServerRagdoll()
 T CBaseCombatCharacter::ChangeTeam(int)
 T CBaseCombatCharacter::CheckTraceHullAttack(Vector const&, Vector const&, Vector const&, Vector const&, int, int, float, bool)
 T CBaseCombatCharacter::CheckTraceHullAttack(float, Vector const&, Vector const&, int, int, float, bool)
 T CBaseCombatCharacter::ClearLastKnownArea()
 T CBaseCombatCharacter::ComputeLOS(Vector const&, Vector const&) const
 T CBaseCombatCharacter::CorpseFade()
 T CBaseCombatCharacter::CorpseGib(CTakeDamageInfo const&)
 T CBaseCombatCharacter::DoMuzzleFlash()
 T CBaseCombatCharacter::Event_Dying()
 T CBaseCombatCharacter::Event_Dying(CTakeDamageInfo const&)
 T CBaseCombatCharacter::Event_Gibbed(CTakeDamageInfo const&)
 T CBaseCombatCharacter::Event_Killed(CTakeDamageInfo const&)
 T CBaseCombatCharacter::ExitVehicle()
 T CBaseCombatCharacter::EyeDirection2D()
 T CBaseCombatCharacter::EyeDirection3D()
 T CBaseCombatCharacter::FInAimCone(CBaseEntity*)
 T CBaseCombatCharacter::FInAimCone(Vector const&)
 T CBaseCombatCharacter::FInViewCone(CBaseEntity*)
 T CBaseCombatCharacter::FInViewCone(Vector const&)
 T CBaseCombatCharacter::FVisible(CBaseEntity*, int, CBaseEntity**)
 T CBaseCombatCharacter::FVisible(Vector const&, int, CBaseEntity**)
 T CBaseCombatCharacter::FindEntityRelationship(CBaseEntity*)
 T CBaseCombatCharacter::FindMissTarget()
 T CBaseCombatCharacter::FixupBurningServerRagdoll(CBaseEntity*)
 T CBaseCombatCharacter::GetActiveWeapon() const
 T CBaseCombatCharacter::GetAliveDuration() const
 T CBaseCombatCharacter::GetAmmoCount(int) const
 T CBaseCombatCharacter::GetAttackSpread(CBaseCombatWeapon*, CBaseEntity*)
 T CBaseCombatCharacter::GetBossType() const
 T CBaseCombatCharacter::GetDataDescMap()
 T CBaseCombatCharacter::GetDeathActivity()
 T CBaseCombatCharacter::GetDefaultRelationshipDisposition(Class_T)
 T CBaseCombatCharacter::GetFogObscuredRatio(CBaseEntity*) const
 T CBaseCombatCharacter::GetFogObscuredRatio(Vector const&) const
 T CBaseCombatCharacter::GetFogObscuredRatio(float) const
 T CBaseCombatCharacter::GetInteractionID()
 T CBaseCombatCharacter::GetLastKnownArea() const
 T CBaseCombatCharacter::GetPhysicsImpactDamageTable()
 T CBaseCombatCharacter::GetServerClass()
 T CBaseCombatCharacter::GetSpreadBias(CBaseCombatWeapon*, CBaseEntity*)
 T CBaseCombatCharacter::GetTimeSinceLastInjury(int) const
 T CBaseCombatCharacter::GetVehicle()
 T CBaseCombatCharacter::GetVehicleEntity()
 T CBaseCombatCharacter::GiveAmmo(int, char const*, bool)
 T CBaseCombatCharacter::GiveAmmo(int, int, bool)
 T CBaseCombatCharacter::HandleInteraction(int, void*, CBaseCombatCharacter*)
 T CBaseCombatCharacter::HasAlienGibs()
 T CBaseCombatCharacter::HasEverBeenInjured(int) const
 T CBaseCombatCharacter::HasHumanGibs()
 T CBaseCombatCharacter::HeadDirection2D()
 T CBaseCombatCharacter::HeadDirection3D()
 T CBaseCombatCharacter::IRelationPriority(CBaseEntity*)
 T CBaseCombatCharacter::IRelationType(CBaseEntity*)
 T CBaseCombatCharacter::InitInteractionSystem()
 T CBaseCombatCharacter::InputKilledNPC(inputdata_t&)
 T CBaseCombatCharacter::IsAbleToSee(CBaseCombatCharacter*, CBaseCombatCharacter::FieldOfViewCheckType)
 T CBaseCombatCharacter::IsAreaTraversable(CNavArea const*) const
 T CBaseCombatCharacter::IsHiddenByFog(CBaseEntity*) const
 T CBaseCombatCharacter::IsHiddenByFog(Vector const&) const
 T CBaseCombatCharacter::IsHiddenByFog(float) const
 T CBaseCombatCharacter::IsInAVehicle() const
 T CBaseCombatCharacter::IsInFieldOfView(CBaseEntity*) const
 T CBaseCombatCharacter::IsInFieldOfView(Vector const&) const
 T CBaseCombatCharacter::IsLineOfSightClear(CBaseEntity*, CBaseCombatCharacter::LineOfSightCheckType) const
 T CBaseCombatCharacter::IsLineOfSightClear(Vector const&, CBaseCombatCharacter::LineOfSightCheckType, CBaseEntity*) const
 T CBaseCombatCharacter::IsLookingTowards(CBaseEntity const*, float) const
 T CBaseCombatCharacter::IsLookingTowards(Vector const&, float) const
 T CBaseCombatCharacter::MyCombatCharacterPointer()
 T CBaseCombatCharacter::NPC_TranslateActivity(Activity)
 T CBaseCombatCharacter::NetworkStateChanged_m_iAmmo()
 T CBaseCombatCharacter::NetworkStateChanged_m_iAmmo(void*)
 T CBaseCombatCharacter::NetworkVar_m_hMyWeapons::Set(int, CHandle<CBaseCombatWeapon> const&)
 T CBaseCombatCharacter::NotifyFriendsOfDamage(CBaseEntity*)
 T CBaseCombatCharacter::OnChangeActiveWeapon(CBaseCombatWeapon*, CBaseCombatWeapon*)
 T CBaseCombatCharacter::OnFriendDamaged(CBaseCombatCharacter*, CBaseEntity*)
 T CBaseCombatCharacter::OnKilledNPC(CBaseCombatCharacter*)
 T CBaseCombatCharacter::OnNavAreaChanged(CNavArea*, CNavArea*)
 T CBaseCombatCharacter::OnNavAreaRemoved(CNavArea*)
 T CBaseCombatCharacter::OnPlayerKilledOther(CBaseEntity*, CTakeDamageInfo const&)
 T CBaseCombatCharacter::OnPursuedBy(INextBot*)
 T CBaseCombatCharacter::OnTakeDamage(CTakeDamageInfo const&)
 T CBaseCombatCharacter::OnTakeDamage_Alive(CTakeDamageInfo const&)
 T CBaseCombatCharacter::OnTakeDamage_Dead(CTakeDamageInfo const&)
 T CBaseCombatCharacter::OnTakeDamage_Dying(CTakeDamageInfo const&)
 T CBaseCombatCharacter::Precache()
 T CBaseCombatCharacter::PushawayTouch(CBaseEntity*)
 T CBaseCombatCharacter::RemoveAllAmmo()
 T CBaseCombatCharacter::RemoveAllWeapons()
 T CBaseCombatCharacter::RemoveAmmo(int, char const*)
 T CBaseCombatCharacter::RemoveAmmo(int, int)
 T CBaseCombatCharacter::RemoveEntityRelationship(CBaseEntity*)
 T CBaseCombatCharacter::RemoveGlowEffect()
 T CBaseCombatCharacter::RemovePlayerItem(CBaseCombatWeapon*)
 T CBaseCombatCharacter::ResetVisibilityCache(CBaseCombatCharacter*)
 T CBaseCombatCharacter::Restore(IRestore&)
 T CBaseCombatCharacter::SetActiveWeapon(CBaseCombatWeapon*)
 T CBaseCombatCharacter::SetAmmoCount(int, int)
 T CBaseCombatCharacter::SetBloodColor(int)
 T CBaseCombatCharacter::SetLightingOriginRelative(CBaseEntity*)
 T CBaseCombatCharacter::SetTransmit(CCheckTransmitInfo*, bool)
 T CBaseCombatCharacter::ShouldGib(CTakeDamageInfo const&)
 T CBaseCombatCharacter::ShouldShootMissTarget(CBaseCombatCharacter*)
 T CBaseCombatCharacter::Spawn()
 T CBaseCombatCharacter::SwitchToNextBestWeapon(CBaseCombatWeapon*)
 T CBaseCombatCharacter::TakeHealth(float, int)
 T CBaseCombatCharacter::UpdateLastKnownArea()
 T CBaseCombatCharacter::UpdateOnRemove()
 T CBaseCombatCharacter::VPhysicsShadowCollision(int, gamevcollisionevent_t*)
 T CBaseCombatCharacter::VPhysicsUpdate(IPhysicsObject*)
 T CBaseCombatCharacter::Weapon_CanSwitchTo(CBaseCombatWeapon*)
 T CBaseCombatCharacter::Weapon_CanUse(CBaseCombatWeapon*)
 T CBaseCombatCharacter::Weapon_Create(char const*)
 T CBaseCombatCharacter::Weapon_Detach(CBaseCombatWeapon*)
 T CBaseCombatCharacter::Weapon_Drop(CBaseCombatWeapon*, Vector const*, Vector const*)
 T CBaseCombatCharacter::Weapon_Equip(CBaseCombatWeapon*)
 T CBaseCombatCharacter::Weapon_EquipAmmoOnly(CBaseCombatWeapon*)
 T CBaseCombatCharacter::Weapon_FindUsable(Vector const&)
 T CBaseCombatCharacter::Weapon_FrameUpdate()
 T CBaseCombatCharacter::Weapon_GetSlot(int) const
 T CBaseCombatCharacter::Weapon_HandleAnimEvent(animevent_t*)
 T CBaseCombatCharacter::Weapon_IsOnGround(CBaseCombatWeapon*)
 T CBaseCombatCharacter::Weapon_OwnsThisType(char const*, int) const
 T CBaseCombatCharacter::Weapon_SetActivity(Activity, float)
 T CBaseCombatCharacter::Weapon_ShootPosition()
 T CBaseCombatCharacter::Weapon_SlotOccupied(CBaseCombatWeapon*)
 T CBaseCombatCharacter::Weapon_Switch(CBaseCombatWeapon*, int)
 T CBaseCombatCharacter::Weapon_TranslateActivity(Activity, bool*)
 T CBaseCombatCharacter::YouForgotToImplementOrDeclareServerClass()
 T CBaseCombatCharacter::~CBaseCombatCharacter()
 T CBaseCombatWeapon::AbortReload()
 T CBaseCombatWeapon::Activate()
 T CBaseCombatWeapon::ActivityList(int&)
 T CBaseCombatWeapon::ActivityOverride(Activity, bool*)
 T CBaseCombatWeapon::AddToCritBucket(float)
 T CBaseCombatWeapon::AddViewKick()
 T CBaseCombatWeapon::AddViewmodelBob(CBaseViewModel*, Vector&, QAngle&)
 T CBaseCombatWeapon::AllowsAutoSwitchFrom() const
 T CBaseCombatWeapon::AllowsAutoSwitchTo() const
 T CBaseCombatWeapon::AttemptToMaterialize()
 T CBaseCombatWeapon::AutoFiresFullClip() const
 T CBaseCombatWeapon::CBaseCombatWeapon()
 T CBaseCombatWeapon::CalcViewmodelBob()
 T CBaseCombatWeapon::CanBePickedUpByNPCs()
 T CBaseCombatWeapon::CanBeSelected()
 T CBaseCombatWeapon::CanDeploy()
 T CBaseCombatWeapon::CanHolster() const
 T CBaseCombatWeapon::CanLower()
 T CBaseCombatWeapon::CanPerformSecondaryAttack() const
 T CBaseCombatWeapon::CanReload()
 T CBaseCombatWeapon::CapabilitiesGet()
 T CBaseCombatWeapon::CheckReload()
 T CBaseCombatWeapon::CheckRespawn()
 T CBaseCombatWeapon::Clip1()
 T CBaseCombatWeapon::Clip2()
 T CBaseCombatWeapon::DefaultDeploy(char*, char*, int, char*)
 T CBaseCombatWeapon::DefaultReload(int, int, int)
 T CBaseCombatWeapon::DefaultTouch(CBaseEntity*)
 T CBaseCombatWeapon::Delete()
 T CBaseCombatWeapon::Deploy()
 T CBaseCombatWeapon::DestroyItem()
 T CBaseCombatWeapon::Detach()
 T CBaseCombatWeapon::DisplayAltFireHudHint()
 T CBaseCombatWeapon::DisplayReloadHudHint()
 T CBaseCombatWeapon::Drop(Vector const&)
 T CBaseCombatWeapon::Equip(CBaseCombatCharacter*)
 T CBaseCombatWeapon::FallInit()
 T CBaseCombatWeapon::FallThink()
 T CBaseCombatWeapon::FinishReload()
 T CBaseCombatWeapon::ForceWeaponSwitch() const
 T CBaseCombatWeapon::GetAnimPrefix() const
 T CBaseCombatWeapon::GetAvailableWeaponsInBox(CBaseCombatWeapon**, int, Vector const&, Vector const&)
 T CBaseCombatWeapon::GetBulletSpread()
 T CBaseCombatWeapon::GetBulletSpread(WeaponProficiency_t)
 T CBaseCombatWeapon::GetBulletType()
 T CBaseCombatWeapon::GetControlPanelClassName(int, char const*&)
 T CBaseCombatWeapon::GetControlPanelInfo(int, char const*&)
 T CBaseCombatWeapon::GetDamage(float, int)
 T CBaseCombatWeapon::GetDataDescMap()
 T CBaseCombatWeapon::GetDeathNoticeName()
 T CBaseCombatWeapon::GetDefaultAnimSpeed()
 T CBaseCombatWeapon::GetDefaultClip1() const
 T CBaseCombatWeapon::GetDefaultClip2() const
 T CBaseCombatWeapon::GetDmgAccumulator()
 T CBaseCombatWeapon::GetDrawActivity()
 T CBaseCombatWeapon::GetEncryptionKey()
 T CBaseCombatWeapon::GetFireRate()
 T CBaseCombatWeapon::GetLastWeapon()
 T CBaseCombatWeapon::GetMaxAutoAimDeflection()
 T CBaseCombatWeapon::GetMaxBurst()
 T CBaseCombatWeapon::GetMaxClip1() const
 T CBaseCombatWeapon::GetMaxClip2() const
 T CBaseCombatWeapon::GetMaxRestTime()
 T CBaseCombatWeapon::GetMinBurst()
 T CBaseCombatWeapon::GetMinRestTime()
 T CBaseCombatWeapon::GetName() const
 T CBaseCombatWeapon::GetOwner() const
 T CBaseCombatWeapon::GetPosition() const
 T CBaseCombatWeapon::GetPrimaryAmmoType() const
 T CBaseCombatWeapon::GetPrimaryAttackActivity()
 T CBaseCombatWeapon::GetPrintName() const
 T CBaseCombatWeapon::GetProficiencyValues()
 T CBaseCombatWeapon::GetRandomBurst()
 T CBaseCombatWeapon::GetRumbleEffect() const
 T CBaseCombatWeapon::GetSecondaryAmmoType() const
 T CBaseCombatWeapon::GetSecondaryAttackActivity()
 T CBaseCombatWeapon::GetServerClass()
 T CBaseCombatWeapon::GetShootSound(int) const
 T CBaseCombatWeapon::GetSkinOverride() const
 T CBaseCombatWeapon::GetSlot() const
 T CBaseCombatWeapon::GetSpreadBias(WeaponProficiency_t)
 T CBaseCombatWeapon::GetSpriteActive() const
 T CBaseCombatWeapon::GetSpriteAmmo() const
 T CBaseCombatWeapon::GetSpriteAmmo2() const
 T CBaseCombatWeapon::GetSpriteAutoaim() const
 T CBaseCombatWeapon::GetSpriteCrosshair() const
 T CBaseCombatWeapon::GetSpriteInactive() const
 T CBaseCombatWeapon::GetSpriteZoomedAutoaim() const
 T CBaseCombatWeapon::GetSpriteZoomedCrosshair() const
 T CBaseCombatWeapon::GetSubType()
 T CBaseCombatWeapon::GetViewModel(int) const
 T CBaseCombatWeapon::GetWeaponFlags() const
 T CBaseCombatWeapon::GetWeaponIdleTime()
 T CBaseCombatWeapon::GetWeight() const
 T CBaseCombatWeapon::GetWorldModel() const
 T CBaseCombatWeapon::GetWpnData() const
 T CBaseCombatWeapon::GiveDefaultAmmo()
 T CBaseCombatWeapon::GiveTo(CBaseEntity*)
 T CBaseCombatWeapon::HandleAnimEvent(animevent_t*)
 T CBaseCombatWeapon::HandleFireOnEmpty()
 T CBaseCombatWeapon::HasAmmo()
 T CBaseCombatWeapon::HasAnyAmmo()
 T CBaseCombatWeapon::HasPrimaryAmmo()
 T CBaseCombatWeapon::HasSecondaryAmmo()
 T CBaseCombatWeapon::HasWeaponIdleTimeElapsed()
 T CBaseCombatWeapon::HideThink()
 T CBaseCombatWeapon::Holster(CBaseCombatWeapon*)
 T CBaseCombatWeapon::HolsterOnDetach()
 T CBaseCombatWeapon::InputHideWeapon(inputdata_t&)
 T CBaseCombatWeapon::IsAllowedToSwitch()
 T CBaseCombatWeapon::IsAllowedToWithdrawFromCritBucket(float)
 T CBaseCombatWeapon::IsBaseCombatWeapon() const
 T CBaseCombatWeapon::IsHolstered()
 T CBaseCombatWeapon::IsLocked(CBaseEntity*)
 T CBaseCombatWeapon::IsMeleeWeapon() const
 T CBaseCombatWeapon::IsPredicted() const
 T CBaseCombatWeapon::IsViewModelSequenceFinished() const
 T CBaseCombatWeapon::IsWeaponVisible()
 T CBaseCombatWeapon::IsWeaponZoomed()
 T CBaseCombatWeapon::ItemBusyFrame()
 T CBaseCombatWeapon::ItemHolsterFrame()
 T CBaseCombatWeapon::ItemPostFrame()
 T CBaseCombatWeapon::ItemPreFrame()
 T CBaseCombatWeapon::Kill()
 T CBaseCombatWeapon::Lock(float, CBaseEntity*)
 T CBaseCombatWeapon::Lower()
 T CBaseCombatWeapon::MaintainIdealActivity()
 T CBaseCombatWeapon::MakeTracer(Vector const&, CGameTrace const&, int)
 T CBaseCombatWeapon::Materialize()
 T CBaseCombatWeapon::MyCombatWeaponPointer()
 T CBaseCombatWeapon::NetworkStateChanged_m_nNextThinkTick()
 T CBaseCombatWeapon::NetworkStateChanged_m_nNextThinkTick(void*)
 T CBaseCombatWeapon::ObjectCaps()
 T CBaseCombatWeapon::OnActiveStateChanged(int)
 T CBaseCombatWeapon::OnPickedUp(CBaseCombatCharacter*)
 T CBaseCombatWeapon::Operator_ForceNPCFire(CBaseCombatCharacter*, bool)
 T CBaseCombatWeapon::Operator_FrameUpdate(CBaseCombatCharacter*)
 T CBaseCombatWeapon::Operator_HandleAnimEvent(animevent_t*, CBaseCombatCharacter*)
 T CBaseCombatWeapon::PoseParamList(int&)
 T CBaseCombatWeapon::PoseParameterOverride(bool)
 T CBaseCombatWeapon::Precache()
 T CBaseCombatWeapon::PrimaryAttack()
 T CBaseCombatWeapon::Ready()
 T CBaseCombatWeapon::Reload()
 T CBaseCombatWeapon::ReloadOrSwitchWeapons()
 T CBaseCombatWeapon::ReloadsSingly() const
 T CBaseCombatWeapon::RescindAltFireHudHint()
 T CBaseCombatWeapon::RescindReloadHudHint()
 T CBaseCombatWeapon::Respawn()
 T CBaseCombatWeapon::SecondaryAttack()
 T CBaseCombatWeapon::SendViewModelAnim(int)
 T CBaseCombatWeapon::SendWeaponAnim(int)
 T CBaseCombatWeapon::SetActivity(Activity, float)
 T CBaseCombatWeapon::SetIdealActivity(Activity)
 T CBaseCombatWeapon::SetOwner(CBaseCombatCharacter*)
 T CBaseCombatWeapon::SetPickupTouch()
 T CBaseCombatWeapon::SetSubType(int)
 T CBaseCombatWeapon::SetViewModel()
 T CBaseCombatWeapon::SetViewModelIndex(int)
 T CBaseCombatWeapon::SetWeaponIdleTime(float)
 T CBaseCombatWeapon::SetWeaponVisible(bool)
 T CBaseCombatWeapon::ShouldBlockPrimaryFire()
 T CBaseCombatWeapon::ShouldDisplayAltFireHUDHint()
 T CBaseCombatWeapon::ShouldDisplayReloadHUDHint()
 T CBaseCombatWeapon::ShouldShowControlPanels()
 T CBaseCombatWeapon::ShouldUseLargeViewModelVROverride()
 T CBaseCombatWeapon::Spawn()
 T CBaseCombatWeapon::StartSprinting()
 T CBaseCombatWeapon::StopSprinting()
 T CBaseCombatWeapon::StopWeaponSound(WeaponSound_t)
 T CBaseCombatWeapon::UpdateAutoFire()
 T CBaseCombatWeapon::UpdateClientData(CBasePlayer*)
 T CBaseCombatWeapon::UpdateTransmitState()
 T CBaseCombatWeapon::Use(CBaseEntity*, CBaseEntity*, USE_TYPE, float)
 T CBaseCombatWeapon::UsesClipsForAmmo1() const
 T CBaseCombatWeapon::UsesClipsForAmmo2() const
 T CBaseCombatWeapon::UsesPrimaryAmmo()
 T CBaseCombatWeapon::UsesSecondaryAmmo()
 T CBaseCombatWeapon::VisibleInWeaponSelection()
 T CBaseCombatWeapon::WeaponAutoAimScale()
 T CBaseCombatWeapon::WeaponIdle()
 T CBaseCombatWeapon::WeaponLOSCondition(Vector const&, Vector const&, bool)
 T CBaseCombatWeapon::WeaponMeleeAttack1Condition(float, float)
 T CBaseCombatWeapon::WeaponMeleeAttack2Condition(float, float)
 T CBaseCombatWeapon::WeaponRangeAttack1Condition(float, float)
 T CBaseCombatWeapon::WeaponRangeAttack2Condition(float, float)
 T CBaseCombatWeapon::WeaponSound(WeaponSound_t, float)
 T CBaseCombatWeapon::YouForgotToImplementOrDeclareServerClass()
 T CBaseCombatWeapon::~CBaseCombatWeapon()
 T CBaseDMStart::GetDataDescMap()
 T CBaseDMStart::IsTriggered(CBaseEntity*)
 T CBaseDMStart::~CBaseDMStart()
 T CBaseDoor::Activate()
 T CBaseDoor::Blocked(CBaseEntity*)
 T CBaseDoor::ChainTouch(CBaseEntity*)
 T CBaseDoor::ChainUse()
 T CBaseDoor::CloseAreaPortalsThink()
 T CBaseDoor::CreateVPhysics()
 T CBaseDoor::DoorActivate()
 T CBaseDoor::DoorGoDown()
 T CBaseDoor::DoorGoUp()
 T CBaseDoor::DoorHitBottom()
 T CBaseDoor::DoorHitTop()
 T CBaseDoor::DoorTouch(CBaseEntity*)
 T CBaseDoor::EndBlocked()
 T CBaseDoor::GetDataDescMap()
 T CBaseDoor::GetServerClass()
 T CBaseDoor::InputClose(inputdata_t&)
 T CBaseDoor::InputLock(inputdata_t&)
 T CBaseDoor::InputOpen(inputdata_t&)
 T CBaseDoor::InputSetSpeed(inputdata_t&)
 T CBaseDoor::InputSetToggleState(inputdata_t&)
 T CBaseDoor::InputToggle(inputdata_t&)
 T CBaseDoor::InputUnlock(inputdata_t&)
 T CBaseDoor::IsRotatingDoor()
 T CBaseDoor::KeyValue(char const*, char const*)
 T CBaseDoor::MovingSoundThink()
 T CBaseDoor::ObjectCaps()
 T CBaseDoor::Precache()
 T CBaseDoor::SetToggleState(int)
 T CBaseDoor::ShouldBlockNav() const
 T CBaseDoor::ShouldSavePhysics()
 T CBaseDoor::Spawn()
 T CBaseDoor::StartBlocked(CBaseEntity*)
 T CBaseDoor::StopMovingSound()
 T CBaseDoor::UpdateAreaPortals(bool)
 T CBaseDoor::Use(CBaseEntity*, CBaseEntity*, USE_TYPE, float)
 T CBaseDoor::YouForgotToImplementOrDeclareServerClass()
 T CBaseDoor::~CBaseDoor()
 T CBaseEdict::GetChangeAccessor()
 T CBaseEntity::AcceptInput(char const*, CBaseEntity*, CBaseEntity*, variant_t, int)
 T CBaseEntity::Activate()
 T CBaseEntity::AddContext(char const*)
 T CBaseEntity::AddEffects(int)
 T CBaseEntity::AddEntityToGroundList(CBaseEntity*)
 T CBaseEntity::AddFlag(int)
 T CBaseEntity::AddPoints(int, bool)
 T CBaseEntity::AddPointsToTeam(int, bool)
 T CBaseEntity::AddStepDiscontinuity(float, Vector const&, QAngle const&)
 T CBaseEntity::AddTimedOverlay(char const*, int)
 T CBaseEntity::AdjustDamageDirection(CTakeDamageInfo const&, Vector&, CBaseEntity*)
 T CBaseEntity::AppendContextToCriteria(AI_CriteriaSet&, char const*)
 T CBaseEntity::ApplyAbsVelocityImpulse(Vector const&)
 T CBaseEntity::ApplyLocalAngularVelocityImpulse(Vector const&)
 T CBaseEntity::Blocked(CBaseEntity*)
 T CBaseEntity::BlocksLOS()
 T CBaseEntity::BloodColor()
 T CBaseEntity::BodyTarget(Vector const&, bool)
 T CBaseEntity::CBaseEntity(bool)
 T CBaseEntity::CalcAbsolutePosition()
 T CBaseEntity::CalcAbsoluteVelocity()
 T CBaseEntity::CanBeHitByMeleeAttack(CBaseEntity*)
 T CBaseEntity::CanBeSeenBy(CAI_BaseNPC*)
 T CBaseEntity::CanStandOn(CBaseEntity*) const
 T CBaseEntity::CanStandOn(edict_t*) const
 T CBaseEntity::ChangeTeam(int)
 T CBaseEntity::CheckHasGamePhysicsSimulation()
 T CBaseEntity::CheckHasThinkFunction(bool)
 T CBaseEntity::CheckStepSimulationChanged()
 T CBaseEntity::ClassMatchesComplex(char const*)
 T CBaseEntity::Classify()
 T CBaseEntity::ClearFlags()
 T CBaseEntity::ClearModelIndexOverrides()
 T CBaseEntity::CollisionRulesChanged()
 T CBaseEntity::ComputeAbsPosition(Vector const&, Vector*)
 T CBaseEntity::ComputeStepSimulationNetwork(StepSimulationData*)
 T CBaseEntity::ComputeTracerStartPosition(Vector const&, Vector*)
 T CBaseEntity::ComputeWorldSpaceSurroundingBox(Vector*, Vector*)
 T CBaseEntity::Create(char const*, Vector const&, QAngle const&, CBaseEntity*)
 T CBaseEntity::CreateDataObject(int)
 T CBaseEntity::CreateNoSpawn(char const*, Vector const&, QAngle const&, CBaseEntity*)
 T CBaseEntity::CreateVPhysics()
 T CBaseEntity::DamageDecal(int, int)
 T CBaseEntity::DeathNotice(CBaseEntity*)
 T CBaseEntity::DecalTrace(CGameTrace*, char const*)
 T CBaseEntity::Deflected(CBaseEntity*, Vector&)
 T CBaseEntity::DestroyAllDataObjects()
 T CBaseEntity::DestroyDataObject(int)
 T CBaseEntity::DetectInSkybox()
 T CBaseEntity::DispatchResponse(char const*)
 T CBaseEntity::DispatchTraceAttack(CTakeDamageInfo const&, Vector const&, CGameTrace*, CDmgAccumulator*)
 T CBaseEntity::DispatchUpdateTransmitState()
 T CBaseEntity::DoImpactEffect(CGameTrace&, int)
 T CBaseEntity::DoesHavePlayerChild()
 T CBaseEntity::DrawAbsBoxOverlay()
 T CBaseEntity::DrawBBoxOverlay(float)
 T CBaseEntity::DrawDebugGeometryOverlays()
 T CBaseEntity::DrawDebugTextOverlays()
 T CBaseEntity::DrawInputOverlay(char const*, CBaseEntity*, variant_t)
 T CBaseEntity::DrawOutputOverlay(CEventAction*)
 T CBaseEntity::DrawTimedOverlays()
 T CBaseEntity::DumpResponseCriteria()
 T CBaseEntity::EarPosition()
 T CBaseEntity::EmitCloseCaption(IRecipientFilter&, int, char const*, CUtlVector<Vector, CUtlMemory<Vector, int> >&, float, bool)
 T CBaseEntity::EmitSentenceByIndex(IRecipientFilter&, int, int, int, float, soundlevel_t, int, int, Vector const*, Vector const*, bool, float)
 T CBaseEntity::EmitSound(IRecipientFilter&, int, EmitSound_t const&)
 T CBaseEntity::EmitSound(IRecipientFilter&, int, EmitSound_t const&, short&)
 T CBaseEntity::EmitSound(IRecipientFilter&, int, char const*, Vector const*, float, float*)
 T CBaseEntity::EmitSound(char const*, float, float*)
 T CBaseEntity::EndBlocked()
 T CBaseEntity::EndTouch(CBaseEntity*)
 T CBaseEntity::EntityText(int, char const*, float, int, int, int, int)
 T CBaseEntity::Event_Killed(CTakeDamageInfo const&)
 T CBaseEntity::Event_KilledOther(CBaseEntity*, CTakeDamageInfo const&)
 T CBaseEntity::EyeAngles()
 T CBaseEntity::EyePosition()
 T CBaseEntity::FVisible(CBaseEntity*, int, CBaseEntity**)
 T CBaseEntity::FVisible(Vector const&, int, CBaseEntity**)
 T CBaseEntity::FireBullets(FireBulletsInfo_t const&)
 T CBaseEntity::FireNamedOutput(char const*, variant_t, CBaseEntity*, CBaseEntity*, float)
 T CBaseEntity::FollowEntity(CBaseEntity*, bool)
 T CBaseEntity::ForceVPhysicsCollide(CBaseEntity*)
 T CBaseEntity::GenderExpandString(char const*, char*, int)
 T CBaseEntity::GetAttackDamageScale(CBaseEntity*)
 T CBaseEntity::GetAutoAimCenter()
 T CBaseEntity::GetAutoAimRadius()
 T CBaseEntity::GetBaseAnimating()
 T CBaseEntity::GetBaseEntity()
 T CBaseEntity::GetBeamTraceFilter()
 T CBaseEntity::GetCollideable()
 T CBaseEntity::GetDamage()
 T CBaseEntity::GetDamageType() const
 T CBaseEntity::GetDataDescMap()
 T CBaseEntity::GetDataObject(int)
 T CBaseEntity::GetDebugName()
 T CBaseEntity::GetDelay()
 T CBaseEntity::GetEnemy()
 T CBaseEntity::GetEnemy() const
 T CBaseEntity::GetEntitySkybox()
 T CBaseEntity::GetFirstThinkTick()
 T CBaseEntity::GetFollowedEntity()
 T CBaseEntity::GetGroundChangeTime()
 T CBaseEntity::GetGroundEntity()
 T CBaseEntity::GetGroundVelocityToApply(Vector&)
 T CBaseEntity::GetInputDispatchEffectPosition(char const*, Vector&, QAngle&)
 T CBaseEntity::GetKeyValue(char const*, char*, int)
 T CBaseEntity::GetLastThink(char const*)
 T CBaseEntity::GetMaxHealth() const
 T CBaseEntity::GetModel()
 T CBaseEntity::GetModelIndex() const
 T CBaseEntity::GetModelName() const
 T CBaseEntity::GetNetworkable()
 T CBaseEntity::GetNextTarget()
 T CBaseEntity::GetNextThink(char const*)
 T CBaseEntity::GetNextThinkTick(char const*)
 T CBaseEntity::GetNextThinkTick(int) const
 T CBaseEntity::GetParametersForSound(char const*, CSoundParameters&, char const*)
 T CBaseEntity::GetParametersForSound(char const*, short&, CSoundParameters&, char const*)
 T CBaseEntity::GetParentToWorldTransform(matrix3x4_t&)
 T CBaseEntity::GetReceivedDamageScale(CBaseEntity*)
 T CBaseEntity::GetRefEHandle() const
 T CBaseEntity::GetResponseSystem()
 T CBaseEntity::GetRootMoveParent()
 T CBaseEntity::GetServerClass()
 T CBaseEntity::GetServerVehicle()
 T CBaseEntity::GetSmoothedVelocity()
 T CBaseEntity::GetSoundDuration(char const*, char const*)
 T CBaseEntity::GetSoundEmissionOrigin() const
 T CBaseEntity::GetStepAngles() const
 T CBaseEntity::GetStepOrigin() const
 T CBaseEntity::GetTeam() const
 T CBaseEntity::GetTeamNumber() const
 T CBaseEntity::GetTouchTrace()
 T CBaseEntity::GetTracerAttachment()
 T CBaseEntity::GetTracerType()
 T CBaseEntity::GetVectors(Vector*, Vector*, Vector*) const
 T CBaseEntity::GetVelocity(Vector*, Vector*)
 T CBaseEntity::GetViewOffset() const
 T CBaseEntity::GetWaterType() const
 T CBaseEntity::HandleShotImpactingGlass(FireBulletsInfo_t const&, CGameTrace const&, Vector const&, ITraceFilter*)
 T CBaseEntity::HandleShotImpactingWater(FireBulletsInfo_t const&, Vector const&, ITraceFilter*, Vector*)
 T CBaseEntity::HasDataObjectType(int) const
 T CBaseEntity::HasPhysicsAttacker(float)
 T CBaseEntity::HasTarget(string_t)
 T CBaseEntity::HeadTarget(Vector const&)
 T CBaseEntity::HealthFraction() const
 T CBaseEntity::ImpactTrace(CGameTrace*, int, char const*)
 T CBaseEntity::InSameTeam(CBaseEntity const*) const
 T CBaseEntity::IncrementInterpolationFrame()
 T CBaseEntity::InputAddContext(inputdata_t&)
 T CBaseEntity::InputAddOutput(inputdata_t&)
 T CBaseEntity::InputAlpha(inputdata_t&)
 T CBaseEntity::InputAlternativeSorting(inputdata_t&)
 T CBaseEntity::InputClearContext(inputdata_t&)
 T CBaseEntity::InputClearParent(inputdata_t&)
 T CBaseEntity::InputColor(inputdata_t&)
 T CBaseEntity::InputDisableDamageForces(inputdata_t&)
 T CBaseEntity::InputDisableShadow(inputdata_t&)
 T CBaseEntity::InputDispatchEffect(inputdata_t&)
 T CBaseEntity::InputDispatchResponse(inputdata_t&)
 T CBaseEntity::InputEnableDamageForces(inputdata_t&)
 T CBaseEntity::InputEnableShadow(inputdata_t&)
 T CBaseEntity::InputFireUser1(inputdata_t&)
 T CBaseEntity::InputFireUser2(inputdata_t&)
 T CBaseEntity::InputFireUser3(inputdata_t&)
 T CBaseEntity::InputFireUser4(inputdata_t&)
 T CBaseEntity::InputKill(inputdata_t&)
 T CBaseEntity::InputKillHierarchy(inputdata_t&)
 T CBaseEntity::InputRemoveContext(inputdata_t&)
 T CBaseEntity::InputSetDamageFilter(inputdata_t&)
 T CBaseEntity::InputSetParent(inputdata_t&)
 T CBaseEntity::InputSetParentAttachment(inputdata_t&)
 T CBaseEntity::InputSetParentAttachmentMaintainOffset(inputdata_t&)
 T CBaseEntity::InputSetTeam(inputdata_t&)
 T CBaseEntity::InputUse(inputdata_t&)
 T CBaseEntity::Intersects(CBaseEntity*)
 T CBaseEntity::InvalidatePhysicsRecursive(int)
 T CBaseEntity::IsAIWalkable()
 T CBaseEntity::IsAlive()
 T CBaseEntity::IsBSPModel() const
 T CBaseEntity::IsBaseCombatWeapon() const
 T CBaseEntity::IsBaseObject() const
 T CBaseEntity::IsBaseTrain() const
 T CBaseEntity::IsCombatItem() const
 T CBaseEntity::IsCurrentlyTouching() const
 T CBaseEntity::IsDeflectable()
 T CBaseEntity::IsDormant()
 T CBaseEntity::IsFloating()
 T CBaseEntity::IsFollowingEntity()
 T CBaseEntity::IsInWorld() const
 T CBaseEntity::IsLockedByMaster()
 T CBaseEntity::IsMoving()
 T CBaseEntity::IsNPC() const
 T CBaseEntity::IsNetClient() const
 T CBaseEntity::IsPlayer() const
 T CBaseEntity::IsPrecacheAllowed()
 T CBaseEntity::IsSimulatingOnAlternateTicks()
 T CBaseEntity::IsStandable() const
 T CBaseEntity::IsTemplate()
 T CBaseEntity::IsTriggered(CBaseEntity*)
 T CBaseEntity::IsTruceValidForEnt() const
 T CBaseEntity::IsViewable()
 T CBaseEntity::IsWearable() const
 T CBaseEntity::KeyValue(char const*, Vector const&)
 T CBaseEntity::KeyValue(char const*, char const*)
 T CBaseEntity::KeyValue(char const*, float)
 T CBaseEntity::LocalEyeAngles()
 T CBaseEntity::MakeDormant()
 T CBaseEntity::MakeTracer(Vector const&, CGameTrace const&, int)
 T CBaseEntity::ModifyEmitSoundParams(EmitSound_t&)
 T CBaseEntity::ModifyFireBulletsDamage(CTakeDamageInfo*)
 T CBaseEntity::ModifyOrAppendCriteria(AI_CriteriaSet&)
 T CBaseEntity::MoveDone()
 T CBaseEntity::MyCombatCharacterPointer()
 T CBaseEntity::MyCombatWeaponPointer()
 T CBaseEntity::MyNPCPointer()
 T CBaseEntity::MyNextBotPointer()
 T CBaseEntity::NameMatchesComplex(char const*)
 T CBaseEntity::NetworkStateChanged_m_fFlags()
 T CBaseEntity::NetworkStateChanged_m_fFlags(void*)
 T CBaseEntity::NetworkStateChanged_m_flFriction()
 T CBaseEntity::NetworkStateChanged_m_flFriction(void*)
 T CBaseEntity::NetworkStateChanged_m_hGroundEntity()
 T CBaseEntity::NetworkStateChanged_m_hGroundEntity(void*)
 T CBaseEntity::NetworkStateChanged_m_iHealth()
 T CBaseEntity::NetworkStateChanged_m_iHealth(void*)
 T CBaseEntity::NetworkStateChanged_m_iMaxHealth()
 T CBaseEntity::NetworkStateChanged_m_iMaxHealth(void*)
 T CBaseEntity::NetworkStateChanged_m_lifeState()
 T CBaseEntity::NetworkStateChanged_m_lifeState(void*)
 T CBaseEntity::NetworkStateChanged_m_nNextThinkTick()
 T CBaseEntity::NetworkStateChanged_m_nNextThinkTick(void*)
 T CBaseEntity::NetworkStateChanged_m_nWaterLevel()
 T CBaseEntity::NetworkStateChanged_m_nWaterLevel(void*)
 T CBaseEntity::NetworkStateChanged_m_takedamage()
 T CBaseEntity::NetworkStateChanged_m_takedamage(void*)
 T CBaseEntity::NetworkStateChanged_m_vecBaseVelocity()
 T CBaseEntity::NetworkStateChanged_m_vecBaseVelocity(void*)
 T CBaseEntity::NetworkStateChanged_m_vecVelocity()
 T CBaseEntity::NetworkStateChanged_m_vecVelocity(void*)
 T CBaseEntity::NetworkStateChanged_m_vecViewOffset()
 T CBaseEntity::NetworkStateChanged_m_vecViewOffset(void*)
 T CBaseEntity::NetworkVar_m_Collision::NetworkStateChanged()
 T CBaseEntity::NetworkVar_m_Collision::NetworkStateChanged(void*)
 T CBaseEntity::NotifySystemEvent(CBaseEntity*, notify_system_event_t, notify_system_event_params_t const&)
 T CBaseEntity::ObjectCaps()
 T CBaseEntity::OnControls(CBaseEntity*)
 T CBaseEntity::OnEntityEvent(EntityEvent_t, void*)
 T CBaseEntity::OnNewModel()
 T CBaseEntity::OnRestore()
 T CBaseEntity::OnSave(IEntitySaveUtils*)
 T CBaseEntity::OnTakeDamage(CTakeDamageInfo const&)
 T CBaseEntity::ParseMapData(CEntityMapData*)
 T CBaseEntity::PassesDamageFilter(CTakeDamageInfo const&)
 T CBaseEntity::PerformCustomPhysics(Vector*, Vector*, QAngle*, QAngle*)
 T CBaseEntity::PerformPush(float)
 T CBaseEntity::PhysicsAddGravityMove(Vector&)
 T CBaseEntity::PhysicsAddHalfGravity(float)
 T CBaseEntity::PhysicsCheckForEntityUntouch()
 T CBaseEntity::PhysicsCheckVelocity()
 T CBaseEntity::PhysicsCheckWater()
 T CBaseEntity::PhysicsCheckWaterTransition()
 T CBaseEntity::PhysicsClipVelocity(Vector const&, Vector const&, Vector&, float)
 T CBaseEntity::PhysicsCustom()
 T CBaseEntity::PhysicsDispatchThink(void (CBaseEntity::*)())
 T CBaseEntity::PhysicsImpact(CBaseEntity*, CGameTrace&)
 T CBaseEntity::PhysicsMarkEntitiesAsTouching(CBaseEntity*, CGameTrace&)
 T CBaseEntity::PhysicsMarkEntitiesAsTouchingEventDriven(CBaseEntity*, CGameTrace&)
 T CBaseEntity::PhysicsMarkEntityAsTouched(CBaseEntity*)
 T CBaseEntity::PhysicsNoclip()
 T CBaseEntity::PhysicsNone()
 T CBaseEntity::PhysicsNotifyOtherOfGroundRemoval(CBaseEntity*, CBaseEntity*)
 T CBaseEntity::PhysicsNotifyOtherOfUntouch(CBaseEntity*, CBaseEntity*)
 T CBaseEntity::PhysicsPushEntity(Vector const&, CGameTrace*)
 T CBaseEntity::PhysicsPushMove(float)
 T CBaseEntity::PhysicsPushRotate(float)
 T CBaseEntity::PhysicsPusher()
 T CBaseEntity::PhysicsRelinkChildren(float)
 T CBaseEntity::PhysicsRemoveGroundList(CBaseEntity*)
 T CBaseEntity::PhysicsRemoveTouchedList(CBaseEntity*)
 T CBaseEntity::PhysicsRemoveToucher(CBaseEntity*, touchlink_t*)
 T CBaseEntity::PhysicsRigidChild()
 T CBaseEntity::PhysicsRunSpecificThink(int, void (CBaseEntity::*)())
 T CBaseEntity::PhysicsRunThink(CBaseEntity::thinkmethods_t)
 T CBaseEntity::PhysicsSimulate()
 T CBaseEntity::PhysicsSolidMaskForEntity() const
 T CBaseEntity::PhysicsSplash(Vector const&, Vector const&, float, float)
 T CBaseEntity::PhysicsStep()
 T CBaseEntity::PhysicsStepRecheckGround()
 T CBaseEntity::PhysicsStepRunTimestep(float)
 T CBaseEntity::PhysicsToss()
 T CBaseEntity::PhysicsTouchTriggers(Vector const*)
 T CBaseEntity::PhysicsTryMove(float, CGameTrace*)
 T CBaseEntity::PostClientActive()
 T CBaseEntity::PostConstructor(char const*)
 T CBaseEntity::Precache()
 T CBaseEntity::PrecacheModel(char const*, bool)
 T CBaseEntity::PrecacheModelComponents(int)
 T CBaseEntity::PrecacheScriptSound(char const*)
 T CBaseEntity::PrefetchScriptSound(char const*)
 T CBaseEntity::ReadKeyField(char const*, variant_t*)
 T CBaseEntity::RecalcHasPlayerChildBit()
 T CBaseEntity::RegisterThinkContext(char const*)
 T CBaseEntity::Remove()
 T CBaseEntity::RemoveAllDecals()
 T CBaseEntity::RemoveDeferred()
 T CBaseEntity::RemoveFlag(int)
 T CBaseEntity::RemoveRecipientsIfNotCloseCaptioning(CRecipientFilter&)
 T CBaseEntity::RequiredEdictIndex()
 T CBaseEntity::ResolveFlyCollisionBounce(CGameTrace&, Vector&, float)
 T CBaseEntity::ResolveFlyCollisionCustom(CGameTrace&, Vector&)
 T CBaseEntity::ResolveFlyCollisionSlide(CGameTrace&, Vector&)
 T CBaseEntity::Respawn()
 T CBaseEntity::Restore(IRestore&)
 T CBaseEntity::SUB_AllowedToFade()
 T CBaseEntity::SUB_CallUseToggle()
 T CBaseEntity::SUB_DoNothing()
 T CBaseEntity::SUB_FadeOut()
 T CBaseEntity::SUB_PerformFadeOut()
 T CBaseEntity::SUB_Remove()
 T CBaseEntity::SUB_StartFadeOut(float, bool)
 T CBaseEntity::SUB_StartFadeOutInstant()
 T CBaseEntity::SUB_Vanish()
 T CBaseEntity::Save(ISave&)
 T CBaseEntity::SendDebugPivotOverlay()
 T CBaseEntity::SendOnKilledGameEvent(CTakeDamageInfo const&)
 T CBaseEntity::SetAIWalkable(bool)
 T CBaseEntity::SetAbsAngles(QAngle const&)
 T CBaseEntity::SetAbsOrigin(Vector const&)
 T CBaseEntity::SetAbsVelocity(Vector const&)
 T CBaseEntity::SetAllowPrecache(bool)
 T CBaseEntity::SetBlocksLOS(bool)
 T CBaseEntity::SetCheckUntouch(bool)
 T CBaseEntity::SetClassname(char const*)
 T CBaseEntity::SetCollisionBounds(Vector const&, Vector const&)
 T CBaseEntity::SetCollisionBoundsFromModel()
 T CBaseEntity::SetCollisionGroup(int)
 T CBaseEntity::SetDamage(float)
 T CBaseEntity::SetEffectEntity(CBaseEntity*)
 T CBaseEntity::SetEffects(int)
 T CBaseEntity::SetGroundChangeTime(float)
 T CBaseEntity::SetGroundEntity(CBaseEntity*)
 T CBaseEntity::SetLastThink(int, float)
 T CBaseEntity::SetLocalAngles(QAngle const&)
 T CBaseEntity::SetLocalAngularVelocity(QAngle const&)
 T CBaseEntity::SetLocalOrigin(Vector const&)
 T CBaseEntity::SetLocalVelocity(Vector const&)
 T CBaseEntity::SetModel(char const*)
 T CBaseEntity::SetModelIndex(int)
 T CBaseEntity::SetModelIndexOverride(int, int)
 T CBaseEntity::SetMoveDoneTime(float)
 T CBaseEntity::SetMoveType(MoveType_t, MoveCollide_t)
 T CBaseEntity::SetNextThink(float, char const*)
 T CBaseEntity::SetNextThink(int, float)
 T CBaseEntity::SetOwnerEntity(CBaseEntity*)
 T CBaseEntity::SetParent(CBaseEntity*, int)
 T CBaseEntity::SetParent(string_t, CBaseEntity*, int)
 T CBaseEntity::SetParentAttachment(char const*, char const*, bool)
 T CBaseEntity::SetPredictionEligible(bool)
 T CBaseEntity::SetPredictionRandomSeed(CUserCmd const*)
 T CBaseEntity::SetRefEHandle(CBaseHandle const&)
 T CBaseEntity::SetScaledPhysics(IPhysicsObject*)
 T CBaseEntity::SetShadowCastDistance(float, float)
 T CBaseEntity::SetSize(Vector const&, Vector const&)
 T CBaseEntity::SetTransmit(CCheckTransmitInfo*, bool)
 T CBaseEntity::SetTransmitState(int)
 T CBaseEntity::SetViewOffset(Vector const&)
 T CBaseEntity::SetWaterType(int)
 T CBaseEntity::ShadowCastDistThink()
 T CBaseEntity::ShouldAttractAutoAim(CBaseEntity*)
 T CBaseEntity::ShouldBlockNav() const
 T CBaseEntity::ShouldCollide(int, int) const
 T CBaseEntity::ShouldDrawWaterImpacts()
 T CBaseEntity::ShouldForceTransmitsForTeam(int)
 T CBaseEntity::ShouldSavePhysics()
 T CBaseEntity::ShouldToggle(USE_TYPE, int)
 T CBaseEntity::ShouldTransmit(CCheckTransmitInfo const*)
 T CBaseEntity::SimulateAngles(float)
 T CBaseEntity::Spawn()
 T CBaseEntity::Splash()
 T CBaseEntity::StartBlocked(CBaseEntity*)
 T CBaseEntity::StartTouch(CBaseEntity*)
 T CBaseEntity::StepSimulationThink(float)
 T CBaseEntity::StopFollowingEntity()
 T CBaseEntity::StopLoopingSounds()
 T CBaseEntity::StopSound(char const*)
 T CBaseEntity::StopSound(int, char const*)
 T CBaseEntity::StopSound(int, int, char const*)
 T CBaseEntity::TakeDamage(CTakeDamageInfo const&)
 T CBaseEntity::TakeHealth(float, int)
 T CBaseEntity::TeamID() const
 T CBaseEntity::Teleport(Vector const*, QAngle const*, Vector const*)
 T CBaseEntity::TestCollision(Ray_t const&, unsigned int, CGameTrace&)
 T CBaseEntity::TestHitboxes(Ray_t const&, unsigned int, CGameTrace&)
 T CBaseEntity::Think()
 T CBaseEntity::ThinkSet(void (CBaseEntity::*)(), float, char const*)
 T CBaseEntity::ToggleFlag(int)
 T CBaseEntity::Touch(CBaseEntity*)
 T CBaseEntity::TraceAttack(CTakeDamageInfo const&, Vector const&, CGameTrace*, CDmgAccumulator*)
 T CBaseEntity::TraceAttackToTriggers(CTakeDamageInfo const&, Vector const&, Vector const&, Vector const&)
 T CBaseEntity::TraceBleed(float, Vector const&, CGameTrace*, int)
 T CBaseEntity::UnsetPlayerSimulated()
 T CBaseEntity::UpdateBaseVelocity()
 T CBaseEntity::UpdateOnRemove()
 T CBaseEntity::UpdatePhysicsShadowToCurrentPosition(float)
 T CBaseEntity::UpdateShotStatistics(CGameTrace const&)
 T CBaseEntity::UpdateTransmitState()
 T CBaseEntity::UpdateWaterState()
 T CBaseEntity::Use(CBaseEntity*, CBaseEntity*, USE_TYPE, float)
 T CBaseEntity::VPhysicsCollision(int, gamevcollisionevent_t*)
 T CBaseEntity::VPhysicsDestroyObject()
 T CBaseEntity::VPhysicsFriction(IPhysicsObject*, float, int, int)
 T CBaseEntity::VPhysicsGetObjectList(IPhysicsObject**, int)
 T CBaseEntity::VPhysicsInitNormal(SolidType_t, int, bool, solid_t*)
 T CBaseEntity::VPhysicsInitShadow(bool, bool, solid_t*)
 T CBaseEntity::VPhysicsInitStatic()
 T CBaseEntity::VPhysicsIsFlesh()
 T CBaseEntity::VPhysicsSetObject(IPhysicsObject*)
 T CBaseEntity::VPhysicsShadowCollision(int, gamevcollisionevent_t*)
 T CBaseEntity::VPhysicsShadowUpdate(IPhysicsObject*)
 T CBaseEntity::VPhysicsSwapObject(IPhysicsObject*)
 T CBaseEntity::VPhysicsTakeDamage(CTakeDamageInfo const&)
 T CBaseEntity::VPhysicsUpdate(IPhysicsObject*)
 T CBaseEntity::VPhysicsUpdatePusher(IPhysicsObject*)
 T CBaseEntity::ViewPunch(QAngle const&)
 T CBaseEntity::WorldSpaceCenter() const
 T CBaseEntity::YouForgotToImplementOrDeclareServerClass()
 T CBaseEntity::operator delete(void*)
 T CBaseEntity::operator new(unsigned long)
 T CBaseEntity::~CBaseEntity()
 T CBaseEntityClassList::CBaseEntityClassList()
 T CBaseEntityClassList::~CBaseEntityClassList()
 T CBaseEntityList::AddEntityAtSlot(IHandleEntity*, int, int)
 T CBaseEntityList::AddNetworkableEntity(IHandleEntity*, int, int)
 T CBaseEntityList::AddNonNetworkableEntity(IHandleEntity*)
 T CBaseEntityList::CBaseEntityList()
 T CBaseEntityList::OnAddEntity(IHandleEntity*, CBaseHandle)
 T CBaseEntityList::OnRemoveEntity(IHandleEntity*, CBaseHandle)
 T CBaseEntityList::RemoveEntity(CBaseHandle)
 T CBaseEntityList::RemoveEntityAtSlot(int)
 T CBaseEntityList::~CBaseEntityList()
 T CBaseEntityModelLoadProxy::Handler::OnModelLoadComplete(model_t const*)
 T CBaseEntityOutput::AddEventAction(CEventAction*)
 T CBaseEntityOutput::FireOutput(variant_t, CBaseEntity*, CBaseEntity*, float)
 T CBaseEntityOutput::GetMaxDelay()
 T CBaseEntityOutput::NumberOfElements()
 T CBaseEntityOutput::Restore(IRestore&, int)
 T CBaseEntityOutput::~CBaseEntityOutput()
 T CBaseFilter::GetDataDescMap()
 T CBaseFilter::InputTestActivator(inputdata_t&)
 T CBaseFilter::PassesDamageFilter(CTakeDamageInfo const&)
 T CBaseFilter::PassesDamageFilterImpl(CTakeDamageInfo const&)
 T CBaseFilter::PassesFilter(CBaseEntity*, CBaseEntity*)
 T CBaseFilter::PassesFilterImpl(CBaseEntity*, CBaseEntity*)
 T CBaseFilter::~CBaseFilter()
 T CBaseFire::CBaseFire()
 T CBaseFire::Enable(int)
 T CBaseFire::GetDataDescMap()
 T CBaseFire::Scale(float, float)
 T CBaseFire::Scale(float, float, float)
 T CBaseFire::~CBaseFire()
 T CBaseFlex::AddFlexAnimation(CSceneEventInfo*)
 T CBaseFlex::AddFlexSetting(char const*, float, flexsettinghdr_t const*, bool)
 T CBaseFlex::AddSceneEvent(CChoreoScene*, CChoreoEvent*, CBaseEntity*)
 T CBaseFlex::CBaseFlex()
 T CBaseFlex::CheckSceneEvent(float, CChoreoScene*, CChoreoEvent*)
 T CBaseFlex::CheckSceneEventCompletion(CSceneEventInfo*, float, CChoreoScene*, CChoreoEvent*)
 T CBaseFlex::ClearSceneEvent(CSceneEventInfo*, bool, bool)
 T CBaseFlex::ClearSceneEvents(CChoreoScene*, bool)
 T CBaseFlex::DoBodyLean()
 T CBaseFlex::EnsureTranslations(flexsettinghdr_t const*)
 T CBaseFlex::EnterSceneSequence(CChoreoScene*, CChoreoEvent*, bool)
 T CBaseFlex::FindFlexController(char const*)
 T CBaseFlex::FindSceneFile(char const*)
 T CBaseFlex::FlexControllerLocalToGlobal(flexsettinghdr_t const*, int)
 T CBaseFlex::FlexSettingLessFunc(CBaseFlex::FS_LocalToGlobal_t const&, CBaseFlex::FS_LocalToGlobal_t const&)
 T CBaseFlex::GetDataDescMap()
 T CBaseFlex::GetFlexWeight(LocalFlexController_t)
 T CBaseFlex::GetServerClass()
 T CBaseFlex::GetSpecialDSP()
 T CBaseFlex::HandleStartGestureSceneEvent(CSceneEventInfo*, CChoreoScene*, CChoreoEvent*, CChoreoActor*)
 T CBaseFlex::HandleStartSequenceSceneEvent(CSceneEventInfo*, CChoreoScene*, CChoreoEvent*, CChoreoActor*)
 T CBaseFlex::PermitResponse(float)
 T CBaseFlex::PlayAutoGeneratedSoundScene(char const*)
 T CBaseFlex::PlayScene(char const*, float, AI_Response*, IRecipientFilter*)
 T CBaseFlex::ProcessFacingSceneEvent(CSceneEventInfo*, CChoreoScene*, CChoreoEvent*)
 T CBaseFlex::ProcessFlexAnimationSceneEvent(CSceneEventInfo*, CChoreoScene*, CChoreoEvent*)
 T CBaseFlex::ProcessFlexSettingSceneEvent(CSceneEventInfo*, CChoreoScene*, CChoreoEvent*)
 T CBaseFlex::ProcessGestureSceneEvent(CSceneEventInfo*, CChoreoScene*, CChoreoEvent*)
 T CBaseFlex::ProcessLookAtSceneEvent(CSceneEventInfo*, CChoreoScene*, CChoreoEvent*)
 T CBaseFlex::ProcessMoveToSceneEvent(CSceneEventInfo*, CChoreoScene*, CChoreoEvent*)
 T CBaseFlex::ProcessSceneEvent(CSceneEventInfo*, CChoreoScene*, CChoreoEvent*)
 T CBaseFlex::ProcessSceneEvents()
 T CBaseFlex::ProcessSequenceSceneEvent(CSceneEventInfo*, CChoreoScene*, CChoreoEvent*)
 T CBaseFlex::RemoveChoreoScene(CChoreoScene*, bool)
 T CBaseFlex::RemoveSceneEvent(CChoreoScene*, CChoreoEvent*, bool)
 T CBaseFlex::SetFlexWeight(LocalFlexController_t, float)
 T CBaseFlex::SetModel(char const*)
 T CBaseFlex::SetPermitResponse(float)
 T CBaseFlex::SetViewtarget(Vector const&)
 T CBaseFlex::StartChoreoScene(CChoreoScene*)
 T CBaseFlex::StartSceneEvent(CSceneEventInfo*, CChoreoScene*, CChoreoEvent*, CChoreoActor*, CBaseEntity*)
 T CBaseFlex::Teleport(Vector const*, QAngle const*, Vector const*)
 T CBaseFlex::YouForgotToImplementOrDeclareServerClass()
 T CBaseFlex::~CBaseFlex()
 T CBaseGameStats::AddDataForSend(KeyValues*, StatSendType_t)
 T CBaseGameStats::AppendCustomDataToSaveBuffer(CUtlBuffer&)
 T CBaseGameStats::AutoSave_OnInit()
 T CBaseGameStats::AutoSave_OnLevelInit()
 T CBaseGameStats::AutoSave_OnLevelShutdown()
 T CBaseGameStats::AutoSave_OnMapChange()
 T CBaseGameStats::AutoSave_OnShutdown()
 T CBaseGameStats::AutoUpload_OnInit()
 T CBaseGameStats::AutoUpload_OnLevelInit()
 T CBaseGameStats::AutoUpload_OnLevelShutdown()
 T CBaseGameStats::AutoUpload_OnMapChange()
 T CBaseGameStats::AutoUpload_OnShutdown()
 T CBaseGameStats::CBaseGameStats()
 T CBaseGameStats::Clear()
 T CBaseGameStats::Event_Commentary()
 T CBaseGameStats::Event_CrateSmashed()
 T CBaseGameStats::Event_Credits()
 T CBaseGameStats::Event_DecrementPlayerEnteredNoClip(CBasePlayer*)
 T CBaseGameStats::Event_FlippedVehicle(CBasePlayer*, CPropVehicleDriveable*)
 T CBaseGameStats::Event_IncrementCountedStatistic(Vector const&, char const*, float)
 T CBaseGameStats::Event_Init()
 T CBaseGameStats::Event_LevelInit()
 T CBaseGameStats::Event_LevelShutdown(float)
 T CBaseGameStats::Event_LoadGame()
 T CBaseGameStats::Event_MapChange(char const*, char const*)
 T CBaseGameStats::Event_PlayerConnected(CBasePlayer*)
 T CBaseGameStats::Event_PlayerDamage(CBasePlayer*, CTakeDamageInfo const&)
 T CBaseGameStats::Event_PlayerDisconnected(CBasePlayer*)
 T CBaseGameStats::Event_PlayerEnteredGodMode(CBasePlayer*)
 T CBaseGameStats::Event_PlayerEnteredNoClip(CBasePlayer*)
 T CBaseGameStats::Event_PlayerKilled(CBasePlayer*, CTakeDamageInfo const&)
 T CBaseGameStats::Event_PlayerKilledOther(CBasePlayer*, CBaseEntity*, CTakeDamageInfo const&)
 T CBaseGameStats::Event_PlayerSuicide(CBasePlayer*)
 T CBaseGameStats::Event_PlayerTraveled(CBasePlayer*, float, bool, bool)
 T CBaseGameStats::Event_PreSaveGameLoaded(char const*, bool)
 T CBaseGameStats::Event_Punted(CBaseEntity*)
 T CBaseGameStats::Event_SaveGame()
 T CBaseGameStats::Event_Shutdown()
 T CBaseGameStats::Event_WeaponFired(CBasePlayer*, bool, char const*)
 T CBaseGameStats::Event_WeaponHit(CBasePlayer*, bool, char const*, CTakeDamageInfo const&)
 T CBaseGameStats::Event_WindowShattered(CBasePlayer*)
 T CBaseGameStats::GetStatSaveFileName()
 T CBaseGameStats::GetStatUploadRegistryKeyName()
 T CBaseGameStats::HaveValidData()
 T CBaseGameStats::LoadCustomDataFromBuffer(CUtlBuffer&)
 T CBaseGameStats::LoadFromFile()
 T CBaseGameStats::LoadingEvent_PlayerIDDifferentThanLoadedStats()
 T CBaseGameStats::OnInit(CBaseGameStats*, char const*)
 T CBaseGameStats::SaveToFileNOW(bool)
 T CBaseGameStats::SetHL2UnlockedChapterStatistic()
 T CBaseGameStats::ShouldSendDataOnAppShutdown()
 T CBaseGameStats::ShouldSendDataOnLevelShutdown()
 T CBaseGameStats::ShouldTrackStandardStats()
 T CBaseGameStats::StatTrackingEnabledForMod()
 T CBaseGameStats::StatsLog(char const*, ...)
 T CBaseGameStats::UploadStatsFileNOW()
 T CBaseGameStats::UseOldFormat()
 T CBaseGameStats::UserPlayedAllTheMaps()
 T CBaseGameStats::~CBaseGameStats()
 T CBaseGameStats_Driver::CollectData(StatSendType_t)
 T CBaseGameStats_Driver::FrameUpdatePostEntityThink()
 T CBaseGameStats_Driver::Init()
 T CBaseGameStats_Driver::LevelInitPreEntity()
 T CBaseGameStats_Driver::LevelShutdown()
 T CBaseGameStats_Driver::LevelShutdownPreClearSteamAPIContext()
 T CBaseGameStats_Driver::LevelShutdownPreEntity()
 T CBaseGameStats_Driver::OnRestore()
 T CBaseGameStats_Driver::OnSave()
 T CBaseGameStats_Driver::PossibleMapChange()
 T CBaseGameStats_Driver::ResetData()
 T CBaseGameStats_Driver::SendData()
 T CBaseGameStats_Driver::Shutdown()
 T CBaseGameStats_Driver::~CBaseGameStats_Driver()
 T CBaseGameSystem::FrameUpdatePostEntityThink()
 T CBaseGameSystem::FrameUpdatePreEntityThink()
 T CBaseGameSystem::Init()
 T CBaseGameSystem::IsPerFrame()
 T CBaseGameSystem::LevelInitPostEntity()
 T CBaseGameSystem::LevelInitPreEntity()
 T CBaseGameSystem::LevelShutdownPostEntity()
 T CBaseGameSystem::LevelShutdownPreClearSteamAPIContext()
 T CBaseGameSystem::LevelShutdownPreEntity()
 T CBaseGameSystem::Name()
 T CBaseGameSystem::OnRestore()
 T CBaseGameSystem::OnSave()
 T CBaseGameSystem::PostInit()
 T CBaseGameSystem::PreClientUpdate()
 T CBaseGameSystem::SafeRemoveIfDesired()
 T CBaseGameSystem::Shutdown()
 T CBaseGameSystemPerFrame::FrameUpdatePostEntityThink()
 T CBaseGameSystemPerFrame::FrameUpdatePreEntityThink()
 T CBaseGameSystemPerFrame::Init()
 T CBaseGameSystemPerFrame::IsPerFrame()
 T CBaseGameSystemPerFrame::LevelInitPostEntity()
 T CBaseGameSystemPerFrame::LevelInitPreEntity()
 T CBaseGameSystemPerFrame::LevelShutdownPostEntity()
 T CBaseGameSystemPerFrame::LevelShutdownPreClearSteamAPIContext()
 T CBaseGameSystemPerFrame::LevelShutdownPreEntity()
 T CBaseGameSystemPerFrame::OnRestore()
 T CBaseGameSystemPerFrame::OnSave()
 T CBaseGameSystemPerFrame::PostInit()
 T CBaseGameSystemPerFrame::PreClientUpdate()
 T CBaseGameSystemPerFrame::SafeRemoveIfDesired()
 T CBaseGameSystemPerFrame::Shutdown()
 T CBaseGrenade::BloodColor()
 T CBaseGrenade::BounceSound()
 T CBaseGrenade::BounceTouch(CBaseEntity*)
 T CBaseGrenade::CBaseGrenade()
 T CBaseGrenade::DangerSoundThink()
 T CBaseGrenade::Detonate()
 T CBaseGrenade::DetonateUse(CBaseEntity*, CBaseEntity*, USE_TYPE, float)
 T CBaseGrenade::Event_Killed(CTakeDamageInfo const&)
 T CBaseGrenade::Explode(CGameTrace*, int)
 T CBaseGrenade::ExplodeTouch(CBaseEntity*)
 T CBaseGrenade::GetBlastForce()
 T CBaseGrenade::GetDamage()
 T CBaseGrenade::GetDamageRadius()
 T CBaseGrenade::GetDataDescMap()
 T CBaseGrenade::GetServerClass()
 T CBaseGrenade::GetShakeAmplitude()
 T CBaseGrenade::GetShakeRadius()
 T CBaseGrenade::GetThrower()
 T CBaseGrenade::NetworkStateChanged_m_fFlags()
 T CBaseGrenade::NetworkStateChanged_m_fFlags(void*)
 T CBaseGrenade::NetworkStateChanged_m_vecVelocity()
 T CBaseGrenade::NetworkStateChanged_m_vecVelocity(void*)
 T CBaseGrenade::ObjectCaps()
 T CBaseGrenade::PreDetonate()
 T CBaseGrenade::Precache()
 T CBaseGrenade::SetDamage(float)
 T CBaseGrenade::SetDamageRadius(float)
 T CBaseGrenade::SetThrower(CBaseCombatCharacter*)
 T CBaseGrenade::SlideTouch(CBaseEntity*)
 T CBaseGrenade::Smoke()
 T CBaseGrenade::TumbleThink()
 T CBaseGrenade::Use(CBaseEntity*, CBaseEntity*, USE_TYPE, float)
 T CBaseGrenade::YouForgotToImplementOrDeclareServerClass()
 T CBaseGrenade::~CBaseGrenade()
 T CBaseGrenadeConcussion::ExplodeConcussion(CBaseEntity*)
 T CBaseGrenadeConcussion::FallThink()
 T CBaseGrenadeConcussion::GetDataDescMap()
 T CBaseGrenadeConcussion::Precache()
 T CBaseGrenadeConcussion::Spawn()
 T CBaseGrenadeConcussion::~CBaseGrenadeConcussion()
 T CBaseGrenadeContact::Precache()
 T CBaseGrenadeContact::Spawn()
 T CBaseGrenadeContact::~CBaseGrenadeContact()
 T CBaseGrenadeTimed::Precache()
 T CBaseGrenadeTimed::Spawn()
 T CBaseGrenadeTimed::~CBaseGrenadeTimed()
 T CBaseIssue::BRecordVoteFailureEventForEntity(int) const
 T CBaseIssue::CBaseIssue(char const*)
 T CBaseIssue::CanCallVote(int, char const*, vote_create_failed_t&, int&)
 T CBaseIssue::CanTeamCallVote(int) const
 T CBaseIssue::CountPotentialVoters()
 T CBaseIssue::GCResponseReceived(bool)
 T CBaseIssue::GetDetailsString()
 T CBaseIssue::GetNumberVoteOptions()
 T CBaseIssue::GetQuorumRatio()
 T CBaseIssue::GetTypeString()
 T CBaseIssue::GetTypeStringLocalized()
 T CBaseIssue::GetVoteOptions(CUtlVector<char const*, CUtlMemory<char const*, int> >&)
 T CBaseIssue::GetVotePassedString()
 T CBaseIssue::IsEnabled()
 T CBaseIssue::IsTeamRestrictedVote()
 T CBaseIssue::IsYesNoVote()
 T CBaseIssue::ListStandardNoArgCommand(CBasePlayer*, char const*)
 T CBaseIssue::NeedsPermissionFromGC()
 T CBaseIssue::OnVoteFailed(int)
 T CBaseIssue::OnVoteStarted()
 T CBaseIssue::SetIssueDetails(char const*)
 T CBaseIssue::SetYesNoVoteCount(int, int, int)
 T CBaseIssue::~CBaseIssue()
 T CBaseMoveBehavior::Activate()
 T CBaseMoveBehavior::GetDataDescMap()
 T CBaseMoveBehavior::IsMoving()
 T CBaseMoveBehavior::MoveDone()
 T CBaseMoveBehavior::Spawn()
 T CBaseMoveBehavior::StartMoving(int)
 T CBaseMoveBehavior::StopMoving()
 T CBaseMoveBehavior::~CBaseMoveBehavior()
 T CBaseMultiplayerPlayer::AwardAchievement(int, int)
 T CBaseMultiplayerPlayer::CBaseMultiplayerPlayer()
 T CBaseMultiplayerPlayer::CalculateTeamBalanceScore()
 T CBaseMultiplayerPlayer::CanBeAutobalanced()
 T CBaseMultiplayerPlayer::CanHearAndReadChatFrom(CBasePlayer*)
 T CBaseMultiplayerPlayer::CanSpeak()
 T CBaseMultiplayerPlayer::CanSpeakVoiceCommand()
 T CBaseMultiplayerPlayer::ClientCommand(CCommand const&)
 T CBaseMultiplayerPlayer::CreateExpresser()
 T CBaseMultiplayerPlayer::EscortScoringThink()
 T CBaseMultiplayerPlayer::GetExpresser()
 T CBaseMultiplayerPlayer::GetMultiplayerExpresser()
 T CBaseMultiplayerPlayer::GetPerLifeCounterKV(char const*)
 T CBaseMultiplayerPlayer::GetResponseSystem()
 T CBaseMultiplayerPlayer::ModifyOrAppendCriteria(AI_CriteriaSet&)
 T CBaseMultiplayerPlayer::NoteSpokeVoiceCommand(char const*)
 T CBaseMultiplayerPlayer::OnAchievementEarned(int)
 T CBaseMultiplayerPlayer::PostConstructor(char const*)
 T CBaseMultiplayerPlayer::Precache()
 T CBaseMultiplayerPlayer::SetPerLifeCounterKV(char const*, int)
 T CBaseMultiplayerPlayer::ShouldRunRateLimitedCommand(CCommand const&)
 T CBaseMultiplayerPlayer::ShouldRunRateLimitedCommand(char const*)
 T CBaseMultiplayerPlayer::ShouldShowVoiceSubtitleToEnemy()
 T CBaseMultiplayerPlayer::Spawn()
 T CBaseMultiplayerPlayer::SpeakConcept(AI_Response&, int)
 T CBaseMultiplayerPlayer::SpeakConceptIfAllowed(int, char const*, char*, unsigned long, IRecipientFilter*)
 T CBaseMultiplayerPlayer::SpeakIfAllowed(char const*, char const*, char*, unsigned long, IRecipientFilter*)
 T CBaseMultiplayerPlayer::StartScoringEscortPoints(float)
 T CBaseMultiplayerPlayer::StopScoringEscortPoints()
 T CBaseMultiplayerPlayer::~CBaseMultiplayerPlayer()
 T CBaseNPCMaker::CanMakeNPC(bool)
 T CBaseNPCMaker::ChildPostSpawn(CAI_BaseNPC*)
 T CBaseNPCMaker::ChildPreSpawn(CAI_BaseNPC*)
 T CBaseNPCMaker::DeathNotice(CBaseEntity*)
 T CBaseNPCMaker::Disable()
 T CBaseNPCMaker::Enable()
 T CBaseNPCMaker::GetDataDescMap()
 T CBaseNPCMaker::HumanHullFits(Vector const&)
 T CBaseNPCMaker::InputAddMaxChildren(inputdata_t&)
 T CBaseNPCMaker::InputDisable(inputdata_t&)
 T CBaseNPCMaker::InputEnable(inputdata_t&)
 T CBaseNPCMaker::InputSetMaxChildren(inputdata_t&)
 T CBaseNPCMaker::InputSetMaxLiveChildren(inputdata_t&)
 T CBaseNPCMaker::InputSetSpawnFrequency(inputdata_t&)
 T CBaseNPCMaker::InputSpawnNPC(inputdata_t&)
 T CBaseNPCMaker::InputToggle(inputdata_t&)
 T CBaseNPCMaker::IsDepleted()
 T CBaseNPCMaker::MakerThink()
 T CBaseNPCMaker::ObjectCaps()
 T CBaseNPCMaker::Spawn()
 T CBaseNPCMaker::~CBaseNPCMaker()
 T CBaseObject::Activate()
 T CBaseObject::AddAndParseBuildPoint(int, KeyValues*)
 T CBaseObject::AddBuildPoint(int)
 T CBaseObject::AddValidObjectToBuildPoint(int, int)
 T CBaseObject::ApplyHealthUpgrade()
 T CBaseObject::AttachObjectToObject(CBaseEntity*, int, Vector&)
 T CBaseObject::BaseObjectThink()
 T CBaseObject::BloodColor()
 T CBaseObject::CBaseObject()
 T CBaseObject::CalculatePlacementPos()
 T CBaseObject::CanBeRepaired() const
 T CBaseObject::CanBeUpgraded() const
 T CBaseObject::CanBeUpgraded(CTFPlayer*)
 T CBaseObject::CanBuildObjectOnBuildPoint(int, int)
 T CBaseObject::ChangeTeam(int)
 T CBaseObject::CheckUpgradeOnHit(CTFPlayer*)
 T CBaseObject::Classify()
 T CBaseObject::ClientCommand(CTFPlayer*, CCommand const&)
 T CBaseObject::Command_Repair(CTFPlayer*, float)
 T CBaseObject::Construct(float)
 T CBaseObject::CreateAmmoPack(char const*, int)
 T CBaseObject::CreateBuildPoints()
 T CBaseObject::CreateObjectGibs()
 T CBaseObject::DestroyObject()
 T CBaseObject::DetachObjectFromObject()
 T CBaseObject::DetermineAnimation()
 T CBaseObject::DeterminePlaybackRate()
 T CBaseObject::DetonateObject()
 T CBaseObject::DoQuickBuild(bool)
 T CBaseObject::DoReverseBuild()
 T CBaseObject::DoWrenchHitEffect(Vector, bool, bool)
 T CBaseObject::DrawDebugTextOverlays()
 T CBaseObject::DropCarriedObject(CTFPlayer*)
 T CBaseObject::EstimateValidBuildPos()
 T CBaseObject::Explode()
 T CBaseObject::FindBuildPointOnPlayer(CTFPlayer*, CBasePlayer*, float&, Vector&)
 T CBaseObject::FindNearestBuildPoint(CBaseEntity*, CBasePlayer*, float&, Vector&, bool)
 T CBaseObject::FindObjectOnBuildPoint(CBaseObject*)
 T CBaseObject::FindSnapToBuildPos(CBaseObject*)
 T CBaseObject::FinishUpgrading()
 T CBaseObject::FinishedBuilding()
 T CBaseObject::FirstSpawn()
 T CBaseObject::GetAssistant()
 T CBaseObject::GetBuildPoint(int, Vector&, QAngle&)
 T CBaseObject::GetBuildPointAttachmentIndex(int) const
 T CBaseObject::GetBuildPointObject(int)
 T CBaseObject::GetBuilder() const
 T CBaseObject::GetConstructionMultiplier()
 T CBaseObject::GetControlPanelClassName(int, char const*&)
 T CBaseObject::GetControlPanelInfo(int, char const*&)
 T CBaseObject::GetDataDescMap()
 T CBaseObject::GetFirstFriendlyObjectOnMe()
 T CBaseObject::GetMaxHealthForCurrentLevel()
 T CBaseObject::GetMaxSnapDistance(int)
 T CBaseObject::GetMaxUpgradeLevel()
 T CBaseObject::GetMiniBuildingStartingHealth()
 T CBaseObject::GetNearbyObjectCheckRadius()
 T CBaseObject::GetNumBuildPoints() const
 T CBaseObject::GetNumObjectsOnMe()
 T CBaseObject::GetObjectOfTypeOnMe(int)
 T CBaseObject::GetOwner()
 T CBaseObject::GetParentEntity()
 T CBaseObject::GetParentObject()
 T CBaseObject::GetResponseRulesModifier()
 T CBaseObject::GetReversesBuildingConstructionSpeed()
 T CBaseObject::GetScorer()
 T CBaseObject::GetServerClass()
 T CBaseObject::GetShieldLevel()
 T CBaseObject::GetTotalTime()
 T CBaseObject::GetType() const
 T CBaseObject::GetUpgradeLevel() const
 T CBaseObject::GetUpgradeMetalRequired()
 T CBaseObject::HasSapper()
 T CBaseObject::IncrementKills()
 T CBaseObject::InitializeMapPlacedObject()
 T CBaseObject::InputAddHealth(inputdata_t&)
 T CBaseObject::InputDisable(inputdata_t&)
 T CBaseObject::InputEnable(inputdata_t&)
 T CBaseObject::InputHide(inputdata_t&)
 T CBaseObject::InputRemoveHealth(inputdata_t&)
 T CBaseObject::InputSetBuilder(inputdata_t&)
 T CBaseObject::InputSetHealth(inputdata_t&)
 T CBaseObject::InputSetSolidToPlayer(inputdata_t&)
 T CBaseObject::InputShow(inputdata_t&)
 T CBaseObject::InputWrenchHit(CTFPlayer*, CTFWrench*, Vector)
 T CBaseObject::IsAnUpgrade()
 T CBaseObject::IsBaseObject() const
 T CBaseObject::IsDying()
 T CBaseObject::IsHostileUpgrade()
 T CBaseObject::IsPlacementPosValid()
 T CBaseObject::IsPlasmaDisabled()
 T CBaseObject::IsUpgrading() const
 T CBaseObject::IsValidPlacement() const
 T CBaseObject::Killed(CTakeDamageInfo const&)
 T CBaseObject::MakeCarriedObject(CTFPlayer*)
 T CBaseObject::MakeDisposableBuilding(CTFPlayer*)
 T CBaseObject::MakeMiniBuilding(CTFPlayer*)
 T CBaseObject::MustBeBuiltOnAttachmentPoint() const
 T CBaseObject::NetworkStateChanged_m_iHealth()
 T CBaseObject::NetworkStateChanged_m_iHealth(void*)
 T CBaseObject::NetworkStateChanged_m_takedamage()
 T CBaseObject::NetworkStateChanged_m_takedamage(void*)
 T CBaseObject::ObjectType() const
 T CBaseObject::OnAddSapper()
 T CBaseObject::OnConstructionHit(CTFPlayer*, CTFWrench*, Vector)
 T CBaseObject::OnEndBeingCarried(CBaseEntity*)
 T CBaseObject::OnEndDisabled()
 T CBaseObject::OnGoActive()
 T CBaseObject::OnGoInactive()
 T CBaseObject::OnRemoveSapper()
 T CBaseObject::OnStartDisabled()
 T CBaseObject::OnTakeDamage(CTakeDamageInfo const&)
 T CBaseObject::OnWrenchHit(CTFPlayer*, CTFWrench*, Vector)
 T CBaseObject::PassDamageOntoChildren(CTakeDamageInfo const&, float*)
 T CBaseObject::PlayStartupAnimation()
 T CBaseObject::Precache()
 T CBaseObject::ReattachChildren()
 T CBaseObject::RemoveAllObjects()
 T CBaseObject::ResetPlacement()
 T CBaseObject::RotateBuildAngles()
 T CBaseObject::SetActivity(Activity)
 T CBaseObject::SetBuilder(CTFPlayer*)
 T CBaseObject::SetDisabled(bool)
 T CBaseObject::SetHealth(float)
 T CBaseObject::SetModel(char const*)
 T CBaseObject::SetObjectMode(int)
 T CBaseObject::SetObjectOnBuildPoint(int, CBaseObject*)
 T CBaseObject::SetObjectSequence(int)
 T CBaseObject::SetPlasmaDisabled(float)
 T CBaseObject::SetStartBuildingModel()
 T CBaseObject::SetTransmit(CCheckTransmitInfo*, bool)
 T CBaseObject::SetType(int)
 T CBaseObject::SetupAttachedVersion()
 T CBaseObject::ShouldAutoRemove()
 T CBaseObject::ShouldBeActive()
 T CBaseObject::ShouldBeMiniBuilding(CTFPlayer*)
 T CBaseObject::ShouldBlockNav() const
 T CBaseObject::ShouldCheckForMovement()
 T CBaseObject::ShouldCollide(int, int) const
 T CBaseObject::ShouldPlayersAvoid()
 T CBaseObject::ShouldQuickBuild()
 T CBaseObject::ShouldTransmit(CCheckTransmitInfo const*)
 T CBaseObject::Spawn()
 T CBaseObject::SpawnControlPanels()
 T CBaseObject::SpawnEntityOnBuildPoint(char const*, int)
 T CBaseObject::SpawnObjectPoints()
 T CBaseObject::StartBuilding(CBaseEntity*)
 T CBaseObject::StartPlacement(CTFPlayer*)
 T CBaseObject::StartUpgrading()
 T CBaseObject::StopPlacement()
 T CBaseObject::TestHitboxes(Ray_t const&, unsigned int, CGameTrace&)
 T CBaseObject::TraceAttack(CTakeDamageInfo const&, Vector const&, CGameTrace*, CDmgAccumulator*)
 T CBaseObject::UpdateAttachmentPlacement(CBaseObject*)
 T CBaseObject::UpdateDesiredBuildRotation(float)
 T CBaseObject::UpdateDisabledState()
 T CBaseObject::UpdateOnRemove()
 T CBaseObject::UpdatePlacement()
 T CBaseObject::UpdateTransmitState()
 T CBaseObject::UpgradeThink()
 T CBaseObject::VerifyCorner(Vector const&, float, float)
 T CBaseObject::YouForgotToImplementOrDeclareServerClass()
 T CBaseObject::~CBaseObject()
 T CBaseObjectUpgrade::CBaseObjectUpgrade()
 T CBaseObjectUpgrade::GetServerClass()
 T CBaseObjectUpgrade::IsAnUpgrade()
 T CBaseObjectUpgrade::OnTakeDamage(CTakeDamageInfo const&)
 T CBaseObjectUpgrade::Spawn()
 T CBaseObjectUpgrade::YouForgotToImplementOrDeclareServerClass()
 T CBaseObjectUpgrade::~CBaseObjectUpgrade()
 T CBaseParticleEntity::Activate()
 T CBaseParticleEntity::CBaseParticleEntity()
 T CBaseParticleEntity::FollowEntity(CBaseEntity*)
 T CBaseParticleEntity::GetServerClass()
 T CBaseParticleEntity::Think()
 T CBaseParticleEntity::UpdateTransmitState()
 T CBaseParticleEntity::YouForgotToImplementOrDeclareServerClass()
 T CBaseParticleEntity::~CBaseParticleEntity()
 T CBasePlatTrain::GetDataDescMap()
 T CBasePlatTrain::IsTogglePlat()
 T CBasePlatTrain::KeyValue(char const*, char const*)
 T CBasePlatTrain::PlayMovingSound()
 T CBasePlatTrain::Precache()
 T CBasePlatTrain::~CBasePlatTrain()
 T CBasePlayer::Activate()
 T CBasePlayer::ActivateMovementConstraint(CBaseEntity*, Vector const&, float, float, float)
 T CBasePlayer::AddPoints(int, bool)
 T CBasePlayer::AddPointsToTeam(int, bool)
 T CBasePlayer::AdjustDrownDmg(int)
 T CBasePlayer::AdjustPlayerTimeBase(int)
 T CBasePlayer::AllocCommandContext()
 T CBasePlayer::AllowImmediateDecalPainting()
 T CBasePlayer::AttemptToExitFreezeCam()
 T CBasePlayer::AutoaimDeflection(Vector&, autoaim_params_t&)
 T CBasePlayer::BodyAngles()
 T CBasePlayer::BodyTarget(Vector const&, bool)
 T CBasePlayer::BumpWeapon(CBaseCombatWeapon*)
 T CBasePlayer::CBasePlayer()
 T CBasePlayer::CacheVehicleView()
 T CBasePlayer::CalcRoll(QAngle const&, Vector const&, float, float)
 T CBasePlayer::CanBreatheUnderwater() const
 T CBasePlayer::CanEnterVehicle(IServerVehicle*, int)
 T CBasePlayer::CanHearAndReadChatFrom(CBasePlayer*)
 T CBasePlayer::CanPickupObject(CBaseEntity*, float, float)
 T CBasePlayer::CanSpeak()
 T CBasePlayer::ChangeTeam(int)
 T CBasePlayer::ChangeTeam(int, bool, bool)
 T CBasePlayer::CheatImpulseCommands(int)
 T CBasePlayer::CheckChatText(char*, int)
 T CBasePlayer::CheckObserverSettings()
 T CBasePlayer::CheckSuitUpdate()
 T CBasePlayer::CheckTimeBasedDamage()
 T CBasePlayer::CheckTrainUpdate()
 T CBasePlayer::Classify()
 T CBasePlayer::ClearPlayerSimulationList()
 T CBasePlayer::ClearUseEntity()
 T CBasePlayer::ClearZoomOwner()
 T CBasePlayer::ClientCommand(CCommand const&)
 T CBasePlayer::CommitSuicide(Vector const&, bool, bool)
 T CBasePlayer::CommitSuicide(bool, bool)
 T CBasePlayer::CreateCorpse()
 T CBasePlayer::CreatePlayer(char const*, edict_t*)
 T CBasePlayer::CreateRagdollEntity()
 T CBasePlayer::CreateViewModel(int)
 T CBasePlayer::DamageEffect(float, int)
 T CBasePlayer::DeactivateMovementConstraint()
 T CBasePlayer::DeathSound(CTakeDamageInfo const&)
 T CBasePlayer::DestroyViewModels()
 T CBasePlayer::DoImpactEffect(CGameTrace&, int)
 T CBasePlayer::DoMuzzleFlash()
 T CBasePlayer::DoubleCheckUseNPC(CBaseEntity*, Vector const&, Vector const&)
 T CBasePlayer::DrawDebugGeometryOverlays()
 T CBasePlayer::Duck()
 T CBasePlayer::DumpPerfToRecipient(CBasePlayer*, int)
 T CBasePlayer::EnableControl(bool)
 T CBasePlayer::EntSelectSpawnPoint()
 T CBasePlayer::EquipSuit(bool)
 T CBasePlayer::EquipWearable(CEconWearable*)
 T CBasePlayer::Event_Dying(CTakeDamageInfo const&)
 T CBasePlayer::Event_Killed(CTakeDamageInfo const&)
 T CBasePlayer::Event_KilledOther(CBaseEntity*, CTakeDamageInfo const&)
 T CBasePlayer::ExitLadder()
 T CBasePlayer::EyeAngles()
 T CBasePlayer::EyePosition()
 T CBasePlayer::EyePositionAndVectors(Vector*, Vector*, Vector*, Vector*)
 T CBasePlayer::EyeVectors(Vector*, Vector*, Vector*)
 T CBasePlayer::FindNextObserverTarget(bool)
 T CBasePlayer::FindUseEntity()
 T CBasePlayer::FlashlightIsOn()
 T CBasePlayer::FlashlightTurnOff()
 T CBasePlayer::FlashlightTurnOn()
 T CBasePlayer::ForceButtons(int)
 T CBasePlayer::ForceClientDllUpdate()
 T CBasePlayer::ForceDropOfCarriedPhysObjects(CBaseEntity*)
 T CBasePlayer::ForceObserverMode(int)
 T CBasePlayer::ForceOrigin(Vector const&)
 T CBasePlayer::ForceRespawn()
 T CBasePlayer::ForceSimulation()
 T CBasePlayer::GetAutoaimScore(Vector const&, Vector const&, Vector const&, CBaseEntity*, float, CBaseCombatWeapon*)
 T CBasePlayer::GetAutoaimVector(autoaim_params_t&)
 T CBasePlayer::GetAutoaimVector(float)
 T CBasePlayer::GetAutoaimVector(float, float)
 T CBasePlayer::GetBotType() const
 T CBasePlayer::GetDataDescMap()
 T CBasePlayer::GetDefaultFOV() const
 T CBasePlayer::GetDelayTicks()
 T CBasePlayer::GetExpresser()
 T CBasePlayer::GetFOV()
 T CBasePlayer::GetFOVDistanceAdjustFactorForNetworking()
 T CBasePlayer::GetFOVForNetworking()
 T CBasePlayer::GetHeldObjectMass(IPhysicsObject*)
 T CBasePlayer::GetInVehicle(IServerVehicle*, int)
 T CBasePlayer::GetLadderSurface(Vector const&)
 T CBasePlayer::GetNetworkIDString()
 T CBasePlayer::GetNextObserverSearchStartPoint(bool)
 T CBasePlayer::GetObserverMode()
 T CBasePlayer::GetObserverTarget()
 T CBasePlayer::GetOverrideStepSound(char const*)
 T CBasePlayer::GetPhysicsImpactDamageTable()
 T CBasePlayer::GetPlayerMaxSpeed()
 T CBasePlayer::GetPlayerMaxs() const
 T CBasePlayer::GetPlayerMins() const
 T CBasePlayer::GetPreviouslyPredictedOrigin() const
 T CBasePlayer::GetPunchAngle()
 T CBasePlayer::GetReplayEntity()
 T CBasePlayer::GetSceneSoundToken()
 T CBasePlayer::GetServerClass()
 T CBasePlayer::GetSmoothedVelocity()
 T CBasePlayer::GetSteamID(CSteamID*)
 T CBasePlayer::GetSteamIDAsUInt64()
 T CBasePlayer::GetStepSoundVelocities(float*, float*)
 T CBasePlayer::GetTimeBase() const
 T CBasePlayer::GetTimeSinceWeaponFired() const
 T CBasePlayer::GetTracerType()
 T CBasePlayer::GetVehicle()
 T CBasePlayer::GetVehicleEntity()
 T CBasePlayer::GetViewModel(int, bool)
 T CBasePlayer::GetWaterJumpTime() const
 T CBasePlayer::GiveNamedItem(char const*, int)
 T CBasePlayer::HandleAnimEvent(animevent_t*)
 T CBasePlayer::HandleFuncTrain()
 T CBasePlayer::HandleVoteCommands(CCommand const&)
 T CBasePlayer::HasHaptics()
 T CBasePlayer::HideViewModels()
 T CBasePlayer::Hints()
 T CBasePlayer::ImpulseCommands()
 T CBasePlayer::IncrementDeathCount(int)
 T CBasePlayer::IncrementFragCount(int)
 T CBasePlayer::InitFogController()
 T CBasePlayer::InitHUD()
 T CBasePlayer::InitVCollision(Vector const&, Vector const&)
 T CBasePlayer::InitialSpawn()
 T CBasePlayer::InputHandleMapEvent(inputdata_t&)
 T CBasePlayer::InputSetFogController(inputdata_t&)
 T CBasePlayer::InputSetHUDVisibility(inputdata_t&)
 T CBasePlayer::InputSetHealth(inputdata_t&)
 T CBasePlayer::Internal_HandleMapEvent(inputdata_t&)
 T CBasePlayer::IsBot() const
 T CBasePlayer::IsBotOfType(int) const
 T CBasePlayer::IsDead() const
 T CBasePlayer::IsFakeClient() const
 T CBasePlayer::IsFiringWeapon() const
 T CBasePlayer::IsFollowingPhysics()
 T CBasePlayer::IsIlluminatedByFlashlight(CBaseEntity*, float*)
 T CBasePlayer::IsInAVehicle() const
 T CBasePlayer::IsLerpingFOV() const
 T CBasePlayer::IsNetClient() const
 T CBasePlayer::IsOnLadder()
 T CBasePlayer::IsPlayer() const
 T CBasePlayer::IsReadyToPlay()
 T CBasePlayer::IsReadyToSpawn()
 T CBasePlayer::IsUseableEntity(CBaseEntity*, unsigned int)
 T CBasePlayer::IsUserCmdDataValid(CUserCmd*)
 T CBasePlayer::IsValidObserverTarget(CBaseEntity*)
 T CBasePlayer::ItemPostFrame()
 T CBasePlayer::ItemPreFrame()
 T CBasePlayer::Jump()
 T CBasePlayer::JumptoPosition(Vector const&, QAngle const&)
 T CBasePlayer::LeaveVehicle(Vector const&, QAngle const&)
 T CBasePlayer::LocalEyeAngles()
 T CBasePlayer::MakeTracer(Vector const&, CGameTrace const&, int)
 T CBasePlayer::ModeWantsSpectatorGUI(int)
 T CBasePlayer::ModifyOrAppendPlayerCriteria(AI_CriteriaSet&)
 T CBasePlayer::NetworkStateChanged_m_ArmorValue()
 T CBasePlayer::NetworkStateChanged_m_ArmorValue(void*)
 T CBasePlayer::NetworkStateChanged_m_fFlags()
 T CBasePlayer::NetworkStateChanged_m_fFlags(void*)
 T CBasePlayer::NetworkStateChanged_m_flFriction()
 T CBasePlayer::NetworkStateChanged_m_flFriction(void*)
 T CBasePlayer::NetworkStateChanged_m_hGroundEntity()
 T CBasePlayer::NetworkStateChanged_m_hGroundEntity(void*)
 T CBasePlayer::NetworkStateChanged_m_iAmmo()
 T CBasePlayer::NetworkStateChanged_m_iAmmo(void*)
 T CBasePlayer::NetworkStateChanged_m_iHealth()
 T CBasePlayer::NetworkStateChanged_m_iHealth(void*)
 T CBasePlayer::NetworkStateChanged_m_lifeState()
 T CBasePlayer::NetworkStateChanged_m_lifeState(void*)
 T CBasePlayer::NetworkStateChanged_m_nNextThinkTick()
 T CBasePlayer::NetworkStateChanged_m_nNextThinkTick(void*)
 T CBasePlayer::NetworkStateChanged_m_nWaterLevel()
 T CBasePlayer::NetworkStateChanged_m_nWaterLevel(void*)
 T CBasePlayer::NetworkStateChanged_m_vecBaseVelocity()
 T CBasePlayer::NetworkStateChanged_m_vecBaseVelocity(void*)
 T CBasePlayer::NetworkStateChanged_m_vecVelocity()
 T CBasePlayer::NetworkStateChanged_m_vecVelocity(void*)
 T CBasePlayer::NetworkStateChanged_m_vecViewOffset()
 T CBasePlayer::NetworkStateChanged_m_vecViewOffset(void*)
 T CBasePlayer::NetworkVar_m_AttributeList::NetworkStateChanged()
 T CBasePlayer::NetworkVar_m_AttributeList::NetworkStateChanged(void*)
 T CBasePlayer::NetworkVar_m_Local::NetworkStateChanged()
 T CBasePlayer::NetworkVar_m_Local::NetworkStateChanged(void*)
 T CBasePlayer::NetworkVar_pl::NetworkStateChanged()
 T CBasePlayer::NetworkVar_pl::NetworkStateChanged(void*)
 T CBasePlayer::NetworkVar_pl::~NetworkVar_pl()
 T CBasePlayer::NotifyNearbyRadiationSource(float)
 T CBasePlayer::ObjectCaps()
 T CBasePlayer::ObserverUse(bool)
 T CBasePlayer::OnDamagedByExplosion(CTakeDamageInfo const&)
 T CBasePlayer::OnEmitFootstepSound(CSoundParameters const&, Vector const&, float)
 T CBasePlayer::OnMyWeaponFired(CBaseCombatWeapon*)
 T CBasePlayer::OnRestore()
 T CBasePlayer::OnTakeDamage(CTakeDamageInfo const&)
 T CBasePlayer::OnTakeDamage_Alive(CTakeDamageInfo const&)
 T CBasePlayer::OnVehicleEnd(Vector&)
 T CBasePlayer::OnVehicleStart()
 T CBasePlayer::PackDeadPlayerItems()
 T CBasePlayer::PhysicsSimulate()
 T CBasePlayer::PhysicsSolidMaskForEntity() const
 T CBasePlayer::PickupObject(CBaseEntity*, bool)
 T CBasePlayer::PlayStepSound(Vector&, surfacedata_t*, float, bool)
 T CBasePlayer::PlayUseDenySound()
 T CBasePlayer::PlayWearableAnimsForPlaybackEvent(wearableanimplayback_t)
 T CBasePlayer::PlayerDeathThink()
 T CBasePlayer::PlayerRunCommand(CUserCmd*, IMoveHelper*)
 T CBasePlayer::PlayerSolidMask(bool) const
 T CBasePlayer::PlayerUse()
 T CBasePlayer::PostThink()
 T CBasePlayer::PostThinkVPhysics()
 T CBasePlayer::PreThink()
 T CBasePlayer::Precache()
 T CBasePlayer::ProcessUsercmds(CUserCmd*, int, int, int, bool)
 T CBasePlayer::RefreshCollisionBounds()
 T CBasePlayer::RemoveAllItems(bool)
 T CBasePlayer::RemoveFromPlayerSimulationList(CBaseEntity*)
 T CBasePlayer::RemovePlayerItem(CBaseCombatWeapon*)
 T CBasePlayer::RemoveSuit()
 T CBasePlayer::RemoveWearable(CEconWearable*)
 T CBasePlayer::RequiredEdictIndex()
 T CBasePlayer::ResetAutoaim()
 T CBasePlayer::ResetDeathCount()
 T CBasePlayer::ResetFragCount()
 T CBasePlayer::ResetObserverMode()
 T CBasePlayer::ResetPerRoundStats()
 T CBasePlayer::ResetScores()
 T CBasePlayer::Restore(IRestore&)
 T CBasePlayer::RumbleEffect(unsigned char, unsigned char, unsigned char)
 T CBasePlayer::RunNullCommand()
 T CBasePlayer::Save(ISave&)
 T CBasePlayer::SelectItem(char const*, int)
 T CBasePlayer::SelectLastItem()
 T CBasePlayer::SetAnimation(PLAYER_ANIM)
 T CBasePlayer::SetAnimationExtension(char const*)
 T CBasePlayer::SetArmorValue(int)
 T CBasePlayer::SetBodyPitch(float)
 T CBasePlayer::SetDefaultFOV(int)
 T CBasePlayer::SetFOV(CBaseEntity*, int, float, int)
 T CBasePlayer::SetFlashlightEnabled(bool)
 T CBasePlayer::SetHaptics(bool)
 T CBasePlayer::SetModel(char const*)
 T CBasePlayer::SetObserverMode(int)
 T CBasePlayer::SetObserverTarget(CBaseEntity*)
 T CBasePlayer::SetPhysicsFlag(int, bool)
 T CBasePlayer::SetPlayerName(char const*)
 T CBasePlayer::SetPlayerUnderwater(bool)
 T CBasePlayer::SetPreviouslyPredictedOrigin(Vector const&)
 T CBasePlayer::SetPunchAngle(QAngle const&)
 T CBasePlayer::SetStepSoundTime(stepsoundtimes_t, bool)
 T CBasePlayer::SetSuitUpdate(char const*, int, int)
 T CBasePlayer::SetVCollisionState(Vector const&, Vector const&, int)
 T CBasePlayer::SetViewEntity(CBaseEntity*)
 T CBasePlayer::SetupVPhysicsShadow(Vector const&, Vector const&, CPhysCollide*, char const*, CPhysCollide*, char const*)
 T CBasePlayer::SetupVisibility(CBaseEntity*, unsigned char*, int)
 T CBasePlayer::SharedSpawn()
 T CBasePlayer::ShouldAnnounceAchievement()
 T CBasePlayer::ShouldAutoaim()
 T CBasePlayer::ShouldFadeOnDeath()
 T CBasePlayer::ShouldGainInstantSpawn()
 T CBasePlayer::ShouldSavePhysics()
 T CBasePlayer::ShouldTakeDamageInCommentaryMode(CTakeDamageInfo const&)
 T CBasePlayer::ShouldTransmit(CCheckTransmitInfo const*)
 T CBasePlayer::ShowCrosshair(bool)
 T CBasePlayer::ShowViewPortPanel(char const*, bool, KeyValues*)
 T CBasePlayer::SimulatePlayerSimulatedEntities()
 T CBasePlayer::SnapEyeAngles(QAngle const&)
 T CBasePlayer::Spawn()
 T CBasePlayer::SpawnArmorValue() const
 T CBasePlayer::StartObserverMode(int)
 T CBasePlayer::StartReplayMode(float, float, int)
 T CBasePlayer::StopObserverMode()
 T CBasePlayer::StopReplayMode()
 T CBasePlayer::TakeHealth(float, int)
 T CBasePlayer::Touch(CBaseEntity*)
 T CBasePlayer::TraceAttack(CTakeDamageInfo const&, Vector const&, CGameTrace*, CDmgAccumulator*)
 T CBasePlayer::UnforceButtons(int)
 T CBasePlayer::UpdateButtonState(int)
 T CBasePlayer::UpdateClientData()
 T CBasePlayer::UpdateGeigerCounter()
 T CBasePlayer::UpdateOnRemove()
 T CBasePlayer::UpdatePhysicsShadowToCurrentPosition()
 T CBasePlayer::UpdatePhysicsShadowToPosition(Vector const&)
 T CBasePlayer::UpdatePlayerSound()
 T CBasePlayer::UpdateStepSound(surfacedata_t*, Vector const&, Vector const&)
 T CBasePlayer::UpdateTransmitState()
 T CBasePlayer::UpdateUnderwaterState()
 T CBasePlayer::UsingStandardWeaponsInVehicle()
 T CBasePlayer::VPhysicsCollision(int, gamevcollisionevent_t*)
 T CBasePlayer::VPhysicsDestroyObject()
 T CBasePlayer::VPhysicsShadowUpdate(IPhysicsObject*)
 T CBasePlayer::VPhysicsUpdate(IPhysicsObject*)
 T CBasePlayer::ValidateCurrentObserverTarget()
 T CBasePlayer::ViewPunch(QAngle const&)
 T CBasePlayer::ViewPunchReset(float)
 T CBasePlayer::WantsLagCompensationOnEntity(CBasePlayer const*, CUserCmd const*, CBitVec<2048> const*) const
 T CBasePlayer::WaterMove()
 T CBasePlayer::Weapon_CanUse(CBaseCombatWeapon*)
 T CBasePlayer::Weapon_Drop(CBaseCombatWeapon*, Vector const*, Vector const*)
 T CBasePlayer::Weapon_Equip(CBaseCombatWeapon*)
 T CBasePlayer::Weapon_SetLast(CBaseCombatWeapon*)
 T CBasePlayer::Weapon_ShootPosition()
 T CBasePlayer::Weapon_ShouldSelectItem(CBaseCombatWeapon*)
 T CBasePlayer::Weapon_ShouldSetLast(CBaseCombatWeapon*, CBaseCombatWeapon*)
 T CBasePlayer::Weapon_Switch(CBaseCombatWeapon*, int)
 T CBasePlayer::YouForgotToImplementOrDeclareServerClass()
 T CBasePlayer::~CBasePlayer()
 T CBaseProjectile::CBaseProjectile()
 T CBaseProjectile::CanCollideWithTeammates() const
 T CBaseProjectile::CollideWithTeammatesThink()
 T CBaseProjectile::Destroy(bool, bool)
 T CBaseProjectile::GetBaseProjectileType() const
 T CBaseProjectile::GetCollideWithTeammatesDelay() const
 T CBaseProjectile::GetDestroyableHitCount() const
 T CBaseProjectile::GetProjectileType() const
 T CBaseProjectile::GetServerClass()
 T CBaseProjectile::IsDestroyable()
 T CBaseProjectile::SetLauncher(CBaseEntity*)
 T CBaseProjectile::Spawn()
 T CBaseProjectile::YouForgotToImplementOrDeclareServerClass()
 T CBaseProjectile::~CBaseProjectile()
 T CBaseProp::Activate()
 T CBaseProp::CalculateBlockLOS()
 T CBaseProp::DrawDebugGeometryOverlays()
 T CBaseProp::IsAlive()
 T CBaseProp::KeyValue(char const*, char const*)
 T CBaseProp::OverridePropdata()
 T CBaseProp::ParsePropData()
 T CBaseProp::Precache()
 T CBaseProp::Spawn()
 T CBasePropDoor::Activate()
 T CBasePropDoor::Blocked(CBaseEntity*)
 T CBasePropDoor::CalcDoorSounds()
 T CBasePropDoor::DoorAutoCloseThink()
 T CBasePropDoor::DoorCanClose(bool)
 T CBasePropDoor::DoorCanOpen()
 T CBasePropDoor::DoorClose()
 T CBasePropDoor::DoorCloseMoveDone()
 T CBasePropDoor::DoorOpen(CBaseEntity*)
 T CBasePropDoor::DoorOpenMoveDone()
 T CBasePropDoor::EndBlocked()
 T CBasePropDoor::GetDataDescMap()
 T CBasePropDoor::GetServerClass()
 T CBasePropDoor::HandleAnimEvent(animevent_t*)
 T CBasePropDoor::InputClose(inputdata_t&)
 T CBasePropDoor::InputLock(inputdata_t&)
 T CBasePropDoor::InputOpen(inputdata_t&)
 T CBasePropDoor::InputOpenAwayFrom(inputdata_t&)
 T CBasePropDoor::InputToggle(inputdata_t&)
 T CBasePropDoor::InputUnlock(inputdata_t&)
 T CBasePropDoor::NPCOpenDoor(CAI_BaseNPC*)
 T CBasePropDoor::ObjectCaps()
 T CBasePropDoor::OnDoorClosed()
 T CBasePropDoor::OnDoorOpened()
 T CBasePropDoor::OnStartBlocked(CBaseEntity*)
 T CBasePropDoor::OnUse(CBaseEntity*, CBaseEntity*, USE_TYPE, float)
 T CBasePropDoor::Precache()
 T CBasePropDoor::Spawn()
 T CBasePropDoor::StartBlocked(CBaseEntity*)
 T CBasePropDoor::TestCollision(Ray_t const&, unsigned int, CGameTrace&)
 T CBasePropDoor::Unlock()
 T CBasePropDoor::Use(CBaseEntity*, CBaseEntity*, USE_TYPE, float)
 T CBasePropDoor::YouForgotToImplementOrDeclareServerClass()
 T CBasePropDoor::~CBasePropDoor()
 T CBaseQuestObjectiveTracker::CBaseQuestObjectiveTracker(CTFQuestObjectiveDefinition const*, CQuestItemTracker*)
 T CBaseQuestObjectiveTracker::EvaluateCondition(CTFQuestEvaluator*, int)
 T CBaseQuestObjectiveTracker::GetConditionName() const
 T CBaseQuestObjectiveTracker::GetQuestOwner() const
 T CBaseQuestObjectiveTracker::IsValidForPlayer(CTFPlayer const*, InvalidReason&) const
 T CBaseQuestObjectiveTracker::ResetCondition()
 T CBaseQuestObjectiveTracker::~CBaseQuestObjectiveTracker()
 T CBaseSOTracker::CBaseSOTracker(GCSDK::CSharedObject const*, CSteamID, CSOTrackerManager*)
 T CBaseSOTracker::Spew() const
 T CBaseSOTracker::~CBaseSOTracker()
 T CBaseServerVehicle::CBaseServerVehicle()
 T CBaseServerVehicle::CacheEntryExitPoints()
 T CBaseServerVehicle::CheckExitPoint(float, int, Vector*)
 T CBaseServerVehicle::ClassifyPassenger(CBaseCombatCharacter*, Class_T)
 T CBaseServerVehicle::FindOrCreatePassengerRole(string_t, int*)
 T CBaseServerVehicle::FinishMove(CBasePlayer*, CUserCmd*, CMoveData*)
 T CBaseServerVehicle::GetDriver()
 T CBaseServerVehicle::GetEntryAnimForPoint(Vector const&)
 T CBaseServerVehicle::GetExitAnimToUse(Vector&, bool&)
 T CBaseServerVehicle::GetLocalAttachmentAtTime(int, int, float, Vector*, QAngle*)
 T CBaseServerVehicle::GetPassenger(int)
 T CBaseServerVehicle::GetPassengerExitPoint(int, Vector*, QAngle*)
 T CBaseServerVehicle::GetPassengerRole(CBaseCombatCharacter*)
 T CBaseServerVehicle::GetPassengerSeatPoint(int, Vector*, QAngle*)
 T CBaseServerVehicle::GetVehicleController()
 T CBaseServerVehicle::GetVehicleEnt()
 T CBaseServerVehicle::GetVehicleParams()
 T CBaseServerVehicle::GetVehicleViewPosition(int, Vector*, QAngle*, float*)
 T CBaseServerVehicle::HandleEntryExitFinish(bool, bool)
 T CBaseServerVehicle::HandlePassengerEntry(CBaseCombatCharacter*, bool)
 T CBaseServerVehicle::HandlePassengerExit(CBaseCombatCharacter*)
 T CBaseServerVehicle::Initialize(char const*)
 T CBaseServerVehicle::IsPassengerDamagable(int)
 T CBaseServerVehicle::IsPassengerEntering()
 T CBaseServerVehicle::IsPassengerExiting()
 T CBaseServerVehicle::IsPassengerUsingStandardWeapons(int)
 T CBaseServerVehicle::IsPassengerVisible(int)
 T CBaseServerVehicle::IsVehicleBodyInWater()
 T CBaseServerVehicle::IsVehicleUpright()
 T CBaseServerVehicle::ItemPostFrame(CBasePlayer*)
 T CBaseServerVehicle::NPC_AddPassenger(CBaseCombatCharacter*, string_t, int)
 T CBaseServerVehicle::NPC_AimPrimaryWeapon(Vector)
 T CBaseServerVehicle::NPC_AimSecondaryWeapon(Vector)
 T CBaseServerVehicle::NPC_Brake()
 T CBaseServerVehicle::NPC_CanDrive()
 T CBaseServerVehicle::NPC_DriveVehicle()
 T CBaseServerVehicle::NPC_GetAvailableSeat(CBaseCombatCharacter*, string_t, VehicleSeatQuery_e)
 T CBaseServerVehicle::NPC_GetPassengerInSeat(int, int)
 T CBaseServerVehicle::NPC_GetPassengerSeatAnims(CBaseCombatCharacter*, PassengerSeatAnimType_t)
 T CBaseServerVehicle::NPC_GetPassengerSeatAttachment(CBaseCombatCharacter*)
 T CBaseServerVehicle::NPC_GetPassengerSeatPosition(CBaseCombatCharacter*, Vector*, QAngle*)
 T CBaseServerVehicle::NPC_GetPassengerSeatPositionLocal(CBaseCombatCharacter*, Vector*, QAngle*)
 T CBaseServerVehicle::NPC_HasAvailableSeat(string_t)
 T CBaseServerVehicle::NPC_HasPrimaryWeapon()
 T CBaseServerVehicle::NPC_HasSecondaryWeapon()
 T CBaseServerVehicle::NPC_PrimaryFire()
 T CBaseServerVehicle::NPC_RemovePassenger(CBaseCombatCharacter*)
 T CBaseServerVehicle::NPC_SecondaryFire()
 T CBaseServerVehicle::NPC_SetDriver(CNPC_VehicleDriver*)
 T CBaseServerVehicle::NPC_ThrottleCenter()
 T CBaseServerVehicle::NPC_ThrottleForward()
 T CBaseServerVehicle::NPC_ThrottleReverse()
 T CBaseServerVehicle::NPC_TurnCenter()
 T CBaseServerVehicle::NPC_TurnLeft(float)
 T CBaseServerVehicle::NPC_TurnRight(float)
 T CBaseServerVehicle::ParseEntryExitAnims()
 T CBaseServerVehicle::ParseExitAnim(KeyValues*, bool)
 T CBaseServerVehicle::ParseNPCPassengerSeat(KeyValues*, CPassengerSeat*)
 T CBaseServerVehicle::ParseNPCRoles(KeyValues*)
 T CBaseServerVehicle::PassengerDamageModifier(CTakeDamageInfo const&)
 T CBaseServerVehicle::PassengerShouldReceiveDamage(CTakeDamageInfo&)
 T CBaseServerVehicle::PlayCrashSound(float)
 T CBaseServerVehicle::PlayLoopingSound(char const*)
 T CBaseServerVehicle::PlaySound(vehiclesound)
 T CBaseServerVehicle::Precache()
 T CBaseServerVehicle::ProcessMovement(CBasePlayer*, CMoveData*)
 T CBaseServerVehicle::RecalculateSoundGear(vbs_sound_update_t&)
 T CBaseServerVehicle::ReloadScript()
 T CBaseServerVehicle::RestorePassengerInfo()
 T CBaseServerVehicle::SetPassenger(int, CBaseCombatCharacter*)
 T CBaseServerVehicle::SetVehicle(CBaseEntity*)
 T CBaseServerVehicle::SetupMove(CBasePlayer*, CUserCmd*, IMoveHelper*, CMoveData*)
 T CBaseServerVehicle::SoundShutdown(float)
 T CBaseServerVehicle::SoundStart()
 T CBaseServerVehicle::SoundStartDisabled()
 T CBaseServerVehicle::SoundState_ChooseState(vbs_sound_update_t&)
 T CBaseServerVehicle::SoundState_OnNewState(sound_states)
 T CBaseServerVehicle::SoundUpdate(vbs_sound_update_t&)
 T CBaseServerVehicle::StartEngineRumble()
 T CBaseServerVehicle::StopEngineRumble()
 T CBaseServerVehicle::StopSound(vehiclesound)
 T CBaseServerVehicle::Weapon_PrimaryCanFireAt()
 T CBaseServerVehicle::Weapon_PrimaryRanges(float*, float*)
 T CBaseServerVehicle::Weapon_SecondaryCanFireAt()
 T CBaseServerVehicle::Weapon_SecondaryRanges(float*, float*)
 T CBaseServerVehicle::~CBaseServerVehicle()
 T CBaseTFBotHintEntity::CBaseTFBotHintEntity()
 T CBaseTFBotHintEntity::GetDataDescMap()
 T CBaseTFBotHintEntity::InputDisable(inputdata_t&)
 T CBaseTFBotHintEntity::InputEnable(inputdata_t&)
 T CBaseTFBotHintEntity::OwnerObjectFinishBuilding() const
 T CBaseTFBotHintEntity::OwnerObjectHasNoOwner() const
 T CBaseTFBotHintEntity::~CBaseTFBotHintEntity()
 T CBaseTeamObjectiveResource::CBaseTeamObjectiveResource()
 T CBaseTeamObjectiveResource::GetCPCapPercentage(int)
 T CBaseTeamObjectiveResource::GetDataDescMap()
 T CBaseTeamObjectiveResource::GetOwningTeam(int)
 T CBaseTeamObjectiveResource::GetPreviousPointForPoint(int, int, int)
 T CBaseTeamObjectiveResource::GetServerClass()
 T CBaseTeamObjectiveResource::NetworkVar_m_iCappingTeam::Set(int, int const&)
 T CBaseTeamObjectiveResource::ObjectiveThink()
 T CBaseTeamObjectiveResource::ResetControlPoints()
 T CBaseTeamObjectiveResource::ResetHillData(int)
 T CBaseTeamObjectiveResource::SetBaseCP(int, int)
 T CBaseTeamObjectiveResource::SetCPCapPercentage(int, float)
 T CBaseTeamObjectiveResource::SetCPCapTime(int, int, float)
 T CBaseTeamObjectiveResource::SetCPCapTimeScalesWithPlayers(int, bool)
 T CBaseTeamObjectiveResource::SetCPGroup(int, int)
 T CBaseTeamObjectiveResource::SetCPIcons(int, int, int)
 T CBaseTeamObjectiveResource::SetCPLocked(int, bool)
 T CBaseTeamObjectiveResource::SetCPOverlays(int, int, int)
 T CBaseTeamObjectiveResource::SetCPPosition(int, Vector const&)
 T CBaseTeamObjectiveResource::SetCPRequiredCappers(int, int, int)
 T CBaseTeamObjectiveResource::SetCPTimerTime(int, float)
 T CBaseTeamObjectiveResource::SetCPUnlockTime(int, float)
 T CBaseTeamObjectiveResource::SetCPVisible(int, bool)
 T CBaseTeamObjectiveResource::SetCapBlocked(int, bool)
 T CBaseTeamObjectiveResource::SetCapLayoutCustomPosition(float, float)
 T CBaseTeamObjectiveResource::SetCappingTeam(int, int)
 T CBaseTeamObjectiveResource::SetHillData(int, float, float, bool)
 T CBaseTeamObjectiveResource::SetNumControlPoints(int)
 T CBaseTeamObjectiveResource::SetNumPlayers(int, int, int)
 T CBaseTeamObjectiveResource::SetOwningTeam(int, int)
 T CBaseTeamObjectiveResource::SetPreviousPoint(int, int, int, int)
 T CBaseTeamObjectiveResource::SetTeamBaseIcons(int, int)
 T CBaseTeamObjectiveResource::SetTeamCanCap(int, int, bool)
 T CBaseTeamObjectiveResource::SetTeamInZone(int, int)
 T CBaseTeamObjectiveResource::SetTrackAlarm(int, bool)
 T CBaseTeamObjectiveResource::SetTrainPathDistance(int, float)
 T CBaseTeamObjectiveResource::SetWarnOnCap(int, int)
 T CBaseTeamObjectiveResource::SetWarnSound(int, string_t)
 T CBaseTeamObjectiveResource::Spawn()
 T CBaseTeamObjectiveResource::TeamCanCapPoint(int, int)
 T CBaseTeamObjectiveResource::UpdateCapHudElement()
 T CBaseTeamObjectiveResource::UpdateTransmitState()
 T CBaseTeamObjectiveResource::YouForgotToImplementOrDeclareServerClass()
 T CBaseTeamObjectiveResource::~CBaseTeamObjectiveResource()
 T CBaseTempEntity::CBaseTempEntity(char const*)
 T CBaseTempEntity::Create(IRecipientFilter&, float)
 T CBaseTempEntity::GetList()
 T CBaseTempEntity::GetName()
 T CBaseTempEntity::GetNext()
 T CBaseTempEntity::GetServerClass()
 T CBaseTempEntity::Precache()
 T CBaseTempEntity::PrecacheTempEnts()
 T CBaseTempEntity::Test(Vector const&, QAngle const&)
 T CBaseTempEntity::YouForgotToImplementOrDeclareServerClass()
 T CBaseTempEntity::~CBaseTempEntity()
 T CBaseToggle::AngularMove(QAngle const&, float)
 T CBaseToggle::AxisDelta(int, QAngle const&, QAngle const&)
 T CBaseToggle::AxisDir()
 T CBaseToggle::CBaseToggle()
 T CBaseToggle::GetDataDescMap()
 T CBaseToggle::GetDelay()
 T CBaseToggle::IsLockedByMaster()
 T CBaseToggle::KeyValue(char const*, Vector)
 T CBaseToggle::KeyValue(char const*, char const*)
 T CBaseToggle::KeyValue(char const*, float)
 T CBaseToggle::LinearMove(Vector const&, float)
 T CBaseToggle::MoveDone()
 T CBaseToggle::~CBaseToggle()
 T CBaseTrigger::Activate()
 T CBaseTrigger::CBaseTrigger()
 T CBaseTrigger::Disable()
 T CBaseTrigger::DrawDebugTextOverlays()
 T CBaseTrigger::Enable()
 T CBaseTrigger::EndTouch(CBaseEntity*)
 T CBaseTrigger::EndTouchAll()
 T CBaseTrigger::GetDataDescMap()
 T CBaseTrigger::InitTrigger()
 T CBaseTrigger::InputDisable(inputdata_t&)
 T CBaseTrigger::InputDisableAndEndTouch(inputdata_t&)
 T CBaseTrigger::InputEnable(inputdata_t&)
 T CBaseTrigger::InputEndTouch(inputdata_t&)
 T CBaseTrigger::InputStartTouch(inputdata_t&)
 T CBaseTrigger::InputToggle(inputdata_t&)
 T CBaseTrigger::InputTouchTest(inputdata_t&)
 T CBaseTrigger::IsTouching(CBaseEntity const*) const
 T CBaseTrigger::PassesTriggerFilters(CBaseEntity*)
 T CBaseTrigger::PointIsWithin(Vector const&)
 T CBaseTrigger::PostClientActive()
 T CBaseTrigger::Spawn()
 T CBaseTrigger::StartTouch(CBaseEntity*)
 T CBaseTrigger::StartTouchAll()
 T CBaseTrigger::UpdateOnRemove()
 T CBaseTrigger::UsesFilter()
 T CBaseTrigger::~CBaseTrigger()
 T CBaseVPhysicsTrigger::Activate()
 T CBaseVPhysicsTrigger::InputDisable(inputdata_t&)
 T CBaseVPhysicsTrigger::InputEnable(inputdata_t&)
 T CBaseVPhysicsTrigger::InputToggle(inputdata_t&)
 T CBaseVPhysicsTrigger::PassesTriggerFilters(CBaseEntity*)
 T CBaseVPhysicsTrigger::Spawn()
 T CBaseViewModel::AddEffects(int)
 T CBaseViewModel::AddViewModelBob(CBasePlayer*, Vector&, QAngle&)
 T CBaseViewModel::CBaseViewModel()
 T CBaseViewModel::CalcViewModelLag(Vector&, QAngle&, QAngle&)
 T CBaseViewModel::CalcViewModelView(CBasePlayer*, Vector const&, QAngle const&)
 T CBaseViewModel::GetDataDescMap()
 T CBaseViewModel::GetOwner()
 T CBaseViewModel::GetOwnerViaInterface()
 T CBaseViewModel::GetOwningWeapon()
 T CBaseViewModel::GetServerClass()
 T CBaseViewModel::IsSelfAnimating()
 T CBaseViewModel::IsViewable()
 T CBaseViewModel::Precache()
 T CBaseViewModel::RemoveEffects(int)
 T CBaseViewModel::SendViewModelMatchingSequence(int)
 T CBaseViewModel::SetIndex(int)
 T CBaseViewModel::SetOwner(CBaseEntity*)
 T CBaseViewModel::SetTransmit(CCheckTransmitInfo*, bool)
 T CBaseViewModel::SetWeaponModel(char const*, CBaseCombatWeapon*)
 T CBaseViewModel::ShouldTransmit(CCheckTransmitInfo const*)
 T CBaseViewModel::Spawn()
 T CBaseViewModel::SpawnControlPanels()
 T CBaseViewModel::UpdateOnRemove()
 T CBaseViewModel::UpdateTransmitState()
 T CBaseViewModel::YouForgotToImplementOrDeclareServerClass()
 T CBaseViewModel::~CBaseViewModel()
 T CBeam::BeamCreate(char const*, float)
 T CBeam::BeamDamage(CGameTrace*)
 T CBeam::BeamInit(char const*, float)
 T CBeam::CBeam()
 T CBeam::DoSparks(Vector const&, Vector const&)
 T CBeam::DrawDebugTextOverlays()
 T CBeam::EntsInit(CBaseEntity*, CBaseEntity*)
 T CBeam::GetAbsEndPos() const
 T CBeam::GetAbsStartPos() const
 T CBeam::GetDataDescMap()
 T CBeam::GetDecalName()
 T CBeam::GetServerClass()
 T CBeam::InputColorBlueValue(inputdata_t&)
 T CBeam::InputColorGreenValue(inputdata_t&)
 T CBeam::InputColorRedValue(inputdata_t&)
 T CBeam::InputNoise(inputdata_t&)
 T CBeam::InputWidth(inputdata_t&)
 T CBeam::NetworkVar_m_hAttachEntity::Set(int, CHandle<CBaseEntity> const&)
 T CBeam::NetworkVar_m_nAttachIndex::Set(int, int const&)
 T CBeam::ObjectCaps()
 T CBeam::PointsInit(Vector const&, Vector const&)
 T CBeam::Precache()
 T CBeam::RandomTargetname(char const*)
 T CBeam::RelinkBeam()
 T CBeam::SetAbsEndPos(Vector const&)
 T CBeam::SetAbsStartPos(Vector const&)
 T CBeam::SetBeamFlags(int)
 T CBeam::SetEndEntity(CBaseEntity*)
 T CBeam::SetModel(char const*)
 T CBeam::SetStartEntity(CBaseEntity*)
 T CBeam::SetTransmit(CCheckTransmitInfo*, bool)
 T CBeam::SetType(int)
 T CBeam::ShouldTransmit(CCheckTransmitInfo const*)
 T CBeam::Spawn()
 T CBeam::UpdateTransmitState()
 T CBeam::WorldSpaceCenter() const
 T CBeam::YouForgotToImplementOrDeclareServerClass()
 T CBeam::~CBeam()
 T CBlood::BloodPosition(CBaseEntity*)
 T CBlood::GetDataDescMap()
 T CBlood::InputEmitBlood(inputdata_t&)
 T CBlood::KeyValue(char const*, char const*)
 T CBlood::Spawn()
 T CBlood::~CBlood()
 T CBloodSplat::Think()
 T CBloodSplat::~CBloodSplat()
 T CBoneCache::CreateResource(bonecacheparams_t const&)
 T CBoneCache::GetCachedBone(int)
 T CBoneCache::IsValid(float, float)
 T CBoneCache::ReadCachedBonePointers(matrix3x4_t**, int)
 T CBoneCache::UpdateBones(matrix3x4_t const*, int, float)
 T CBoneFollower::GetDataDescMap()
 T CBoneFollower::GetServerClass()
 T CBoneFollower::Init(CBaseEntity*, char const*, solid_t&, Vector const&, QAngle const&)
 T CBoneFollower::ObjectCaps()
 T CBoneFollower::TestCollision(Ray_t const&, unsigned int, CGameTrace&)
 T CBoneFollower::Touch(CBaseEntity*)
 T CBoneFollower::TraceAttack(CTakeDamageInfo const&, Vector const&, CGameTrace*, CDmgAccumulator*)
 T CBoneFollower::UpdateTransmitState()
 T CBoneFollower::Use(CBaseEntity*, CBaseEntity*, USE_TYPE, float)
 T CBoneFollower::VPhysicsCollision(int, gamevcollisionevent_t*)
 T CBoneFollower::VPhysicsFriction(IPhysicsObject*, float, int, int)
 T CBoneFollower::VPhysicsShadowCollision(int, gamevcollisionevent_t*)
 T CBoneFollower::VPhysicsUpdate(IPhysicsObject*)
 T CBoneFollower::YouForgotToImplementOrDeclareServerClass()
 T CBoneFollower::~CBoneFollower()
 T CBoneFollowerManager::AddBoneFollower(CBaseAnimating*, char const*, solid_t*)
 T CBoneFollowerManager::CBoneFollowerManager()
 T CBoneFollowerManager::CreatePhysicsFollower(CBaseAnimating*, physfollower_t&, char const*, solid_t*)
 T CBoneFollowerManager::DestroyBoneFollowers()
 T CBoneFollowerManager::GetBoneFollower(int)
 T CBoneFollowerManager::UpdateBoneFollowers(CBaseAnimating*)
 T CBoneFollowerManager::~CBoneFollowerManager()
 T CBoneSetup::AccumulatePose(Vector*, Quaternion*, int, float, float, float, CIKContext*)
 T CBoneSetup::AddLocalLayers(Vector*, Quaternion*, mstudioseqdesc_t&, int, float, float, float, CIKContext*)
 T CBoneSetup::AddSequenceLayers(Vector*, Quaternion*, mstudioseqdesc_t&, int, float, float, float, CIKContext*)
 T CBoneSetup::CalcAutoplaySequences(Vector*, Quaternion*, float, CIKContext*)
 T CBoneSetupMemoryPool<Quaternion>::Alloc()
 T CBoneSetupMemoryPool<Quaternion>::~CBoneSetupMemoryPool()
 T CBoneSetupMemoryPool<Vector>::Alloc()
 T CBoneSetupMemoryPool<Vector>::~CBoneSetupMemoryPool()
 T CBoneSetupMemoryPool<matrix3x4_t>::Alloc()
 T CBoneSetupMemoryPool<matrix3x4_t>::~CBoneSetupMemoryPool()
 T CBonusDuckPickup::BlinkThink()
 T CBonusDuckPickup::CBonusDuckPickup()
 T CBonusDuckPickup::DropSingleInstance(Vector&, CBaseCombatCharacter*, float, float)
 T CBonusDuckPickup::GetDataDescMap()
 T CBonusDuckPickup::GetDefaultPowerupModel()
 T CBonusDuckPickup::GetLifeTime()
 T CBonusDuckPickup::GetServerClass()
 T CBonusDuckPickup::MyTouch(CBasePlayer*)
 T CBonusDuckPickup::NotifyFadeOut()
 T CBonusDuckPickup::Precache()
 T CBonusDuckPickup::Spawn()
 T CBonusDuckPickup::UpdateCollisionBounds()
 T CBonusDuckPickup::ValidTouch(CBasePlayer*)
 T CBonusDuckPickup::YouForgotToImplementOrDeclareServerClass()
 T CBonusDuckPickup::~CBonusDuckPickup()
 T CBonusPack::AffectedByRadiusCollection() const
 T CBonusPack::BlinkThink()
 T CBonusPack::GetDataDescMap()
 T CBonusPack::GetDefaultPowerupModel()
 T CBonusPack::GetServerClass()
 T CBonusPack::MyTouch(CBasePlayer*)
 T CBonusPack::Precache()
 T CBonusPack::Spawn()
 T CBonusPack::ValidTouch(CBasePlayer*)
 T CBonusPack::YouForgotToImplementOrDeclareServerClass()
 T CBonusPack::~CBonusPack()
 T CBonusPlayerListLess::Less(CTFPlayer* const&, CTFPlayer* const&, void*)
 T CBonusRoundLogic::BuildBonusPlayerList()
 T CBonusRoundLogic::GetServerClass()
 T CBonusRoundLogic::InitBonusRound()
 T CBonusRoundLogic::NetworkVar_m_Item::NetworkStateChanged()
 T CBonusRoundLogic::NetworkVar_m_Item::NetworkStateChanged(void*)
 T CBonusRoundLogic::NetworkVar_m_Item::~NetworkVar_m_Item()
 T CBonusRoundLogic::UpdateTransmitState()
 T CBonusRoundLogic::YouForgotToImplementOrDeclareServerClass()
 T CBonusRoundLogic::~CBonusRoundLogic()
 T CBotCmd::~CBotCmd()
 T CBotNPCArcher::CBotNPCArcher()
 T CBotNPCArcher::CBotNPCArcherIntention::CBotNPCArcherIntention(CBotNPCArcher*)
 T CBotNPCArcher::CBotNPCArcherIntention::FirstContainedResponder() const
 T CBotNPCArcher::CBotNPCArcherIntention::NextContainedResponder(INextBotEventResponder*) const
 T CBotNPCArcher::CBotNPCArcherIntention::Reset()
 T CBotNPCArcher::CBotNPCArcherIntention::Update()
 T CBotNPCArcher::CBotNPCArcherIntention::~CBotNPCArcherIntention()
 T CBotNPCArcher::EyePosition()
 T CBotNPCArcher::GetBodyInterface() const
 T CBotNPCArcher::GetIntentionInterface() const
 T CBotNPCArcher::GetLocomotionInterface() const
 T CBotNPCArcher::PhysicsSolidMaskForEntity() const
 T CBotNPCArcher::Precache()
 T CBotNPCArcher::ShouldCollide(int, int) const
 T CBotNPCArcher::Spawn()
 T CBotNPCArcher::~CBotNPCArcher()
 T CBotNPCArcherBehavior::GetName() const
 T CBotNPCArcherBehavior::InitialContainedAction(CBotNPCArcher*)
 T CBotNPCArcherBehavior::OnKilled(CBotNPCArcher*, CTakeDamageInfo const&)
 T CBotNPCArcherBehavior::Update(CBotNPCArcher*, float)
 T CBotNPCArcherBehavior::~CBotNPCArcherBehavior()
 T CBotNPCArcherGuardSpot::GetName() const
 T CBotNPCArcherGuardSpot::GetVictim(CBotNPCArcher*)
 T CBotNPCArcherGuardSpot::OnStart(CBotNPCArcher*, Action<CBotNPCArcher>*)
 T CBotNPCArcherGuardSpot::Update(CBotNPCArcher*, float)
 T CBotNPCArcherGuardSpot::~CBotNPCArcherGuardSpot()
 T CBotNPCArcherMoveToMark::GetName() const
 T CBotNPCArcherMoveToMark::OnStart(CBotNPCArcher*, Action<CBotNPCArcher>*)
 T CBotNPCArcherMoveToMark::Update(CBotNPCArcher*, float)
 T CBotNPCArcherMoveToMark::~CBotNPCArcherMoveToMark()
 T CBotNPCArcherShootBow::GetName() const
 T CBotNPCArcherShootBow::OnStart(CBotNPCArcher*, Action<CBotNPCArcher>*)
 T CBotNPCArcherShootBow::Update(CBotNPCArcher*, float)
 T CBotNPCArcherShootBow::~CBotNPCArcherShootBow()
 T CBotNPCArcherSurrender::GetName() const
 T CBotNPCArcherSurrender::OnStart(CBotNPCArcher*, Action<CBotNPCArcher>*)
 T CBotNPCArcherSurrender::~CBotNPCArcherSurrender()
 T CBotNPCBody::AimHeadTowards(CBaseEntity*, IBody::LookAtPriorityType, float, INextBotReply*, char const*)
 T CBotNPCBody::AimHeadTowards(Vector const&, IBody::LookAtPriorityType, float, INextBotReply*, char const*)
 T CBotNPCBody::CBotNPCBody(INextBot*)
 T CBotNPCBody::GetActivity() const
 T CBotNPCBody::GetCollisionGroup() const
 T CBotNPCBody::GetSolidMask() const
 T CBotNPCBody::IsActivity(Activity) const
 T CBotNPCBody::StartActivity(Activity, unsigned int)
 T CBotNPCBody::Update()
 T CBotNPCBody::~CBotNPCBody()
 T CBotNPCDecoy::CBotNPCDecoy()
 T CBotNPCDecoy::CBotNPCDecoyIntention::CBotNPCDecoyIntention(CBotNPCDecoy*)
 T CBotNPCDecoy::CBotNPCDecoyIntention::FirstContainedResponder() const
 T CBotNPCDecoy::CBotNPCDecoyIntention::NextContainedResponder(INextBotEventResponder*) const
 T CBotNPCDecoy::CBotNPCDecoyIntention::Reset()
 T CBotNPCDecoy::CBotNPCDecoyIntention::Update()
 T CBotNPCDecoy::CBotNPCDecoyIntention::~CBotNPCDecoyIntention()
 T CBotNPCDecoy::EyePosition()
 T CBotNPCDecoy::GetBodyInterface() const
 T CBotNPCDecoy::GetIntentionInterface() const
 T CBotNPCDecoy::GetLocomotionInterface() const
 T CBotNPCDecoy::PhysicsSolidMaskForEntity() const
 T CBotNPCDecoy::Precache()
 T CBotNPCDecoy::ShouldCollide(int, int) const
 T CBotNPCDecoy::Spawn()
 T CBotNPCDecoy::~CBotNPCDecoy()
 T CBotNPCDecoyBehavior::GetName() const
 T CBotNPCDecoyBehavior::OnStart(CBotNPCDecoy*, Action<CBotNPCDecoy>*)
 T CBotNPCDecoyBehavior::Update(CBotNPCDecoy*, float)
 T CBotNPCDecoyBehavior::~CBotNPCDecoyBehavior()
 T CBotNPCDecoyLocomotion::GetMaxAcceleration() const
 T CBotNPCDecoyLocomotion::GetMaxDeceleration() const
 T CBotNPCDecoyLocomotion::GetRunSpeed() const
 T CBotNPCDecoyLocomotion::~CBotNPCDecoyLocomotion()
 T CBreakModelsPrecached::BreakLessFunc(CBreakModelsPrecached::breakable_precache_t const&, CBreakModelsPrecached::breakable_precache_t const&)
 T CBreakModelsPrecached::LevelShutdownPostEntity()
 T CBreakModelsPrecached::~CBreakModelsPrecached()
 T CBreakParser::ParseKeyValue(void*, char const*, char const*)
 T CBreakParser::ParseModelName(breakmodel_t*, char const*)
 T CBreakParser::SetDefaults(void*)
 T CBreakable::BreakTouch(CBaseEntity*)
 T CBreakable::CreateVPhysics()
 T CBreakable::DamageDecal(int, int)
 T CBreakable::DamageSound()
 T CBreakable::Die()
 T CBreakable::DrawDebugTextOverlays()
 T CBreakable::GetBasePropData()
 T CBreakable::GetBreakableCount()
 T CBreakable::GetBreakableModel()
 T CBreakable::GetBreakableSkin()
 T CBreakable::GetDataDescMap()
 T CBreakable::GetDmgModBullet()
 T CBreakable::GetDmgModClub()
 T CBreakable::GetDmgModExplosive()
 T CBreakable::GetExplosiveDamage()
 T CBreakable::GetExplosiveRadius()
 T CBreakable::GetMaxBreakableSize()
 T CBreakable::GetMultiplayerBreakMode() const
 T CBreakable::GetPhysicsDamageTable()
 T CBreakable::GetPhysicsMode()
 T CBreakable::HasInteraction(propdata_interactions_t)
 T CBreakable::HasPhysicsAttacker(float)
 T CBreakable::InputAddHealth(inputdata_t&)
 T CBreakable::InputBreak(inputdata_t&)
 T CBreakable::InputRemoveHealth(inputdata_t&)
 T CBreakable::InputSetHealth(inputdata_t&)
 T CBreakable::InputSetMass(inputdata_t&)
 T CBreakable::IsBreakable()
 T CBreakable::KeyValue(char const*, char const*)
 T CBreakable::MaterialSoundRandom(int, Materials, float)
 T CBreakable::OnPhysGunDrop(CBasePlayer*, PhysGunDrop_t)
 T CBreakable::OnPhysGunPickup(CBasePlayer*, PhysGunPickup_t)
 T CBreakable::OnTakeDamage(CTakeDamageInfo const&)
 T CBreakable::ParsePropData()
 T CBreakable::Precache()
 T CBreakable::ResetOnGroundFlags()
 T CBreakable::SetBasePropData(string_t)
 T CBreakable::SetBreakableCount(int)
 T CBreakable::SetBreakableModel(string_t)
 T CBreakable::SetBreakableSkin(int)
 T CBreakable::SetDmgModBullet(float)
 T CBreakable::SetDmgModClub(float)
 T CBreakable::SetDmgModExplosive(float)
 T CBreakable::SetExplosiveDamage(float)
 T CBreakable::SetExplosiveRadius(float)
 T CBreakable::SetInteraction(propdata_interactions_t)
 T CBreakable::SetMaxBreakableSize(int)
 T CBreakable::SetMultiplayerBreakMode(mp_break_t)
 T CBreakable::SetPhysicsDamageTable(string_t)
 T CBreakable::SetPhysicsMode(int)
 T CBreakable::SetPropDataBlocksLOS(bool)
 T CBreakable::SetPropDataIsAIWalkable(bool)
 T CBreakable::Spawn()
 T CBreakable::TraceAttack(CTakeDamageInfo const&, Vector const&, CGameTrace*, CDmgAccumulator*)
 T CBreakable::UpdateHealth(int, CBaseEntity*)
 T CBreakable::VPhysicsCollision(int, gamevcollisionevent_t*)
 T CBreakable::~CBreakable()
 T CBreakableProp::AnimateThink()
 T CBreakableProp::Break(CBaseEntity*, CTakeDamageInfo const&)
 T CBreakableProp::BreakThink()
 T CBreakableProp::BreakablePropTouch(CBaseEntity*)
 T CBreakableProp::CBreakableProp()
 T CBreakableProp::CheckRemoveRagdolls()
 T CBreakableProp::DisableAutoFade()
 T CBreakableProp::Event_Killed(CTakeDamageInfo const&)
 T CBreakableProp::FindEnableMotionFixup()
 T CBreakableProp::ForceFadeScaleToAlwaysVisible()
 T CBreakableProp::GetAutoAimRadius()
 T CBreakableProp::GetBasePropData()
 T CBreakableProp::GetBreakableCount()
 T CBreakableProp::GetBreakableModel()
 T CBreakableProp::GetBreakableSkin()
 T CBreakableProp::GetDataDescMap()
 T CBreakableProp::GetDmgModBullet()
 T CBreakableProp::GetDmgModClub()
 T CBreakableProp::GetDmgModExplosive()
 T CBreakableProp::GetExplosiveDamage()
 T CBreakableProp::GetExplosiveRadius()
 T CBreakableProp::GetMaxBreakableSize()
 T CBreakableProp::GetMultiplayerBreakMode() const
 T CBreakableProp::GetPhysicsDamageTable()
 T CBreakableProp::GetPhysicsMode()
 T CBreakableProp::GetRootPhysicsObjectForBreak()
 T CBreakableProp::GetServerClass()
 T CBreakableProp::HandleFirstCollisionInteractions(int, gamevcollisionevent_t*)
 T CBreakableProp::HandleInteractionStick(int, gamevcollisionevent_t*)
 T CBreakableProp::HasInteraction(propdata_interactions_t)
 T CBreakableProp::HasPhysicsAttacker(float)
 T CBreakableProp::HasPreferredCarryAnglesForPlayer(CBasePlayer*)
 T CBreakableProp::Ignite(float, bool, float, bool)
 T CBreakableProp::InputAddHealth(inputdata_t&)
 T CBreakableProp::InputBreak(inputdata_t&)
 T CBreakableProp::InputDisablePhyscannonPickup(inputdata_t&)
 T CBreakableProp::InputDisablePuntSound(inputdata_t&)
 T CBreakableProp::InputEnablePhyscannonPickup(inputdata_t&)
 T CBreakableProp::InputEnablePuntSound(inputdata_t&)
 T CBreakableProp::InputRemoveHealth(inputdata_t&)
 T CBreakableProp::InputSetHealth(inputdata_t&)
 T CBreakableProp::OnAttemptPhysGunPickup(CBasePlayer*, PhysGunPickup_t)
 T CBreakableProp::OnBreak(Vector const&, Vector const&, CBaseEntity*)
 T CBreakableProp::OnPhysGunDrop(CBasePlayer*, PhysGunDrop_t)
 T CBreakableProp::OnPhysGunPickup(CBasePlayer*, PhysGunPickup_t)
 T CBreakableProp::OnTakeDamage(CTakeDamageInfo const&)
 T CBreakableProp::OverridePropdata()
 T CBreakableProp::PhysGunLaunchAngularImpulse()
 T CBreakableProp::PlayPuntSound()
 T CBreakableProp::Precache()
 T CBreakableProp::PreferredCarryAngles()
 T CBreakableProp::RampToDefaultFadeScale()
 T CBreakableProp::SetBasePropData(string_t)
 T CBreakableProp::SetBreakableCount(int)
 T CBreakableProp::SetBreakableModel(string_t)
 T CBreakableProp::SetBreakableSkin(int)
 T CBreakableProp::SetDmgModBullet(float)
 T CBreakableProp::SetDmgModClub(float)
 T CBreakableProp::SetDmgModExplosive(float)
 T CBreakableProp::SetExplosiveDamage(float)
 T CBreakableProp::SetExplosiveRadius(float)
 T CBreakableProp::SetInteraction(propdata_interactions_t)
 T CBreakableProp::SetMaxBreakableSize(int)
 T CBreakableProp::SetMultiplayerBreakMode(mp_break_t)
 T CBreakableProp::SetPhysicsDamageTable(string_t)
 T CBreakableProp::SetPhysicsMode(int)
 T CBreakableProp::SetPropDataBlocksLOS(bool)
 T CBreakableProp::SetPropDataIsAIWalkable(bool)
 T CBreakableProp::Spawn()
 T CBreakableProp::StickAtPosition(Vector const&, Vector const&, QAngle const&)
 T CBreakableProp::UpdateHealth(int, CBaseEntity*)
 T CBreakableProp::YouForgotToImplementOrDeclareServerClass()
 T CBreakableProp::~CBreakableProp()
 T CBreakableSurface::BreakAllPanes()
 T CBreakableSurface::BreakThink()
 T CBreakableSurface::CreateShards(Vector const&, QAngle const&, Vector const&, Vector const&, float, float, int)
 T CBreakableSurface::Die(CBaseEntity*, Vector const&)
 T CBreakableSurface::DropPane(int, int)
 T CBreakableSurface::GetDataDescMap()
 T CBreakableSurface::GetServerClass()
 T CBreakableSurface::InputShatter(inputdata_t&)
 T CBreakableSurface::OnTakeDamage(CTakeDamageInfo const&)
 T CBreakableSurface::Precache()
 T CBreakableSurface::RecalcSupport(int, int)
 T CBreakableSurface::SetSupport(int, int, float)
 T CBreakableSurface::ShatterPane(int, int, Vector const&, Vector const&)
 T CBreakableSurface::Spawn()
 T CBreakableSurface::SurfaceTouch(CBaseEntity*)
 T CBreakableSurface::TraceAttack(CTakeDamageInfo const&, Vector const&, CGameTrace*, CDmgAccumulator*)
 T CBreakableSurface::VPhysicsCollision(int, gamevcollisionevent_t*)
 T CBreakableSurface::YouForgotToImplementOrDeclareServerClass()
 T CBreakableSurface::~CBreakableSurface()
 T CBroadcastNonOwnerRecipientFilter::~CBroadcastNonOwnerRecipientFilter()
 T CBroadcastRecipientFilter::~CBroadcastRecipientFilter()
 T CBubbling::FizzThink()
 T CBubbling::GetDataDescMap()
 T CBubbling::InputActivate(inputdata_t&)
 T CBubbling::InputDeactivate(inputdata_t&)
 T CBubbling::InputSetCurrent(inputdata_t&)
 T CBubbling::InputSetDensity(inputdata_t&)
 T CBubbling::InputSetFrequency(inputdata_t&)
 T CBubbling::InputToggle(inputdata_t&)
 T CBubbling::Precache()
 T CBubbling::Spawn()
 T CBubbling::Toggle()
 T CBubbling::~CBubbling()
 T CBulletPenetrateEnum::EnumEntity(IHandleEntity*)
 T CBulletsTraceFilter::ShouldHitEntity(IHandleEntity*, int)
 T CCPTimerLogic::CCPTimerLogic()
 T CCPTimerLogic::GetDataDescMap()
 T CCPTimerLogic::InputRoundSpawn(inputdata_t&)
 T CCPTimerLogic::Think()
 T CCPTimerLogic::UpdateTransmitState()
 T CCPTimerLogic::~CCPTimerLogic()
 T CC_AI_LOS_Debug(IConVar*, char const*, float)
 T CC_AirDensity(CCommand const&)
 T CC_BloodSpray(CCommand const&)
 T CC_CH_CreateAirboat()
 T CC_CH_CreateJeep()
 T CC_CH_ForceRespawn()
 T CC_CH_TournamentRestart()
 T CC_CollisionTest(CCommand const&)
 T CC_CommentaryChanged(IConVar*, char const*, float)
 T CC_CommentaryFinishNode()
 T CC_CommentaryNotChanging()
 T CC_CreateFlashlight(CCommand const&)
 T CC_DebugHistory_AddLine(CCommand const&)
 T CC_DebugHistory_Dump(CCommand const&)
 T CC_DrawCross(CCommand const&)
 T CC_DrawLine(CCommand const&)
 T CC_DropItem()
 T CC_DumpEventQueue()
 T CC_DumpGameStringTable()
 T CC_Ent_AbsBox(CCommand const&)
 T CC_Ent_AttachmentPoints(CCommand const&)
 T CC_Ent_Autoaim(CCommand const&)
 T CC_Ent_BBox(CCommand const&)
 T CC_Ent_CancelPendingEntFires(CCommand const&)
 T CC_Ent_Create(CCommand const&)
 T CC_Ent_Dump(CCommand const&)
 T CC_Ent_FireTarget(CCommand const&)
 T CC_Ent_Info(CCommand const&)
 T CC_Ent_Keyvalue(CCommand const&)
 T CC_Ent_Messages(CCommand const&)
 T CC_Ent_Name(CCommand const&)
 T CC_Ent_Orient(CCommand const&)
 T CC_Ent_Pause()
 T CC_Ent_Picker()
 T CC_Ent_Pivot(CCommand const&)
 T CC_Ent_RBox(CCommand const&)
 T CC_Ent_Remove(CCommand const&)
 T CC_Ent_RemoveAll(CCommand const&)
 T CC_Ent_Rotate(CCommand const&)
 T CC_Ent_SetName(CCommand const&)
 T CC_Ent_Show_Response_Criteria(CCommand const&)
 T CC_Ent_Step(CCommand const&)
 T CC_Ent_Teleport(CCommand const&)
 T CC_Ent_Text(CCommand const&)
 T CC_Ent_ViewOffset(CCommand const&)
 T CC_Find_Ent(CCommand const&)
 T CC_Find_Ent_Index(CCommand const&)
 T CC_GetCommandEnt(CCommand const&, CBaseEntity**, Vector*, QAngle*)
 T CC_GhostSpawn(CCommand const&)
 T CC_GiveCurrentAmmo()
 T CC_Global_Set(CCommand const&)
 T CC_God_f()
 T CC_GroundList_f(CCommand const&)
 T CC_HurtMe_f(CCommand const&)
 T CC_KDTreeTest(CCommand const&)
 T CC_Notarget_f()
 T CC_Particle_Test_Start(CCommand const&)
 T CC_Particle_Test_Stop(CCommand const&)
 T CC_Player_BugBaitSwap()
 T CC_Player_NoClip()
 T CC_Player_SetModel(CCommand const&)
 T CC_Player_TestDispatchEffect(CCommand const&)
 T CC_Player_Use(CCommand const&)
 T CC_Prop_Debug()
 T CC_Prop_Dynamic_Create(CCommand const&)
 T CC_Prop_Physics_Create(CCommand const&)
 T CC_Shake()
 T CC_Test_EHandle()
 T CC_Test_Entity_Blocker()
 T CC_VoxelTreeBox(CCommand const&)
 T CC_VoxelTreePlayerView()
 T CC_VoxelTreeSphere(CCommand const&)
 T CC_VoxelTreeView()
 T CC_WC_AirNodeEdit()
 T CC_WC_AirNodeEditFurther()
 T CC_WC_AirNodeEditNearer()
 T CC_WC_Create()
 T CC_WC_Destroy()
 T CC_WC_DestroyUndo()
 T CC_WC_LinkEdit()
 T CC_WarpSelectedHere(CCommand const&)
 T CC_ai_drop_hint(CCommand const&)
 T CC_setang_f(CCommand const&)
 T CCallQueue::~CCallQueue()
 T CCallQueueT<CTSQueue<CFunctor*, false> >::CallQueued()
 T CCallQueueT<CTSQueue<CFunctor*, false> >::QueueFunctorInternal(CFunctor*)
 T CCallResult<CGCUpdateItemSchema, HTTPRequestCompleted_t>::GetCallbackSizeBytes()
 T CCallResult<CGCUpdateItemSchema, HTTPRequestCompleted_t>::Run(void*)
 T CCallResult<CGCUpdateItemSchema, HTTPRequestCompleted_t>::Run(void*, bool, unsigned long long)
 T CCallResult<CLeaderboardInfo, LeaderboardFindResult_t>::GetCallbackSizeBytes()
 T CCallResult<CLeaderboardInfo, LeaderboardFindResult_t>::Run(void*)
 T CCallResult<CLeaderboardInfo, LeaderboardFindResult_t>::Run(void*, bool, unsigned long long)
 T CCallResult<CLeaderboardInfo, LeaderboardScoresDownloaded_t>::GetCallbackSizeBytes()
 T CCallResult<CLeaderboardInfo, LeaderboardScoresDownloaded_t>::Run(void*)
 T CCallResult<CLeaderboardInfo, LeaderboardScoresDownloaded_t>::Run(void*, bool, unsigned long long)
 T CCallResult<CMapInfoContainer, LeaderboardFindResult_t>::GetCallbackSizeBytes()
 T CCallResult<CMapInfoContainer, LeaderboardFindResult_t>::Run(void*)
 T CCallResult<CMapInfoContainer, LeaderboardFindResult_t>::Run(void*, bool, unsigned long long)
 T CCallResult<CMapInfoContainer, LeaderboardScoresDownloaded_t>::GetCallbackSizeBytes()
 T CCallResult<CMapInfoContainer, LeaderboardScoresDownloaded_t>::Run(void*)
 T CCallResult<CMapInfoContainer, LeaderboardScoresDownloaded_t>::Run(void*, bool, unsigned long long)
 T CCallResult<CTFWorkshopMap, SteamUGCQueryCompleted_t>::GetCallbackSizeBytes()
 T CCallResult<CTFWorkshopMap, SteamUGCQueryCompleted_t>::Run(void*)
 T CCallResult<CTFWorkshopMap, SteamUGCQueryCompleted_t>::Run(void*, bool, unsigned long long)
 T CCallback<CGCClientSystem, SteamServersConnected_t, true>::Run(void*)
 T CCallback<CSteamWorksGameStatsUploader, GameStatsSessionClosed_t, true>::Run(void*)
 T CCallback<CSteamWorksGameStatsUploader, GameStatsSessionIssued_t, true>::Run(void*)
 T CCallback<CTFMapsWorkshop, DownloadItemResult_t, false>::Run(void*)
 T CCallback<CTFMapsWorkshop, DownloadItemResult_t, true>::Run(void*)
 T CCallback<CTFMapsWorkshop, ItemInstalled_t, false>::Run(void*)
 T CCallback<CTFMapsWorkshop, ItemInstalled_t, true>::Run(void*)
 T CCallback<GCSDK::CGCClient, GCMessageAvailable_t, false>::Run(void*)
 T CCallbackImpl<12>::GetCallbackSizeBytes()
 T CCallbackImpl<12>::Run(void*, bool, unsigned long long)
 T CCallbackImpl<16>::GetCallbackSizeBytes()
 T CCallbackImpl<16>::Run(void*, bool, unsigned long long)
 T CCallbackImpl<1>::GetCallbackSizeBytes()
 T CCallbackImpl<1>::Run(void*, bool, unsigned long long)
 T CCallbackImpl<4>::GetCallbackSizeBytes()
 T CCallbackImpl<4>::Run(void*, bool, unsigned long long)
 T CCaptureFlag::Activate()
 T CCaptureFlag::AddFollower(CTFBot*)
 T CCaptureFlag::AddPointValue(int)
 T CCaptureFlag::CCaptureFlag()
 T CCaptureFlag::Capture(CTFPlayer*, int)
 T CCaptureFlag::Create(Vector const&, char const*, ETFFlagType)
 T CCaptureFlag::CreateReturnIcon()
 T CCaptureFlag::Drop(CTFPlayer*, bool, bool, bool)
 T CCaptureFlag::FlagTouch(CBaseEntity*)
 T CCaptureFlag::GetDataDescMap()
 T CCaptureFlag::GetItemID() const
 T CCaptureFlag::GetMaxReturnTime()
 T CCaptureFlag::GetServerClass()
 T CCaptureFlag::InputDisable(inputdata_t&)
 T CCaptureFlag::InputEnable(inputdata_t&)
 T CCaptureFlag::InputForceDrop(inputdata_t&)
 T CCaptureFlag::InputForceGlowDisabled(inputdata_t&)
 T CCaptureFlag::InputForceReset(inputdata_t&)
 T CCaptureFlag::InputForceResetAndDisableSilent(inputdata_t&)
 T CCaptureFlag::InputForceResetSilent(inputdata_t&)
 T CCaptureFlag::InputRoundActivate(inputdata_t&)
 T CCaptureFlag::InputSetReturnTime(inputdata_t&)
 T CCaptureFlag::InputShowTimer(inputdata_t&)
 T CCaptureFlag::InternalForceReset(bool)
 T CCaptureFlag::IsDisabled() const
 T CCaptureFlag::IsDropped()
 T CCaptureFlag::IsHome()
 T CCaptureFlag::IsStolen()
 T CCaptureFlag::PickUp(CTFPlayer*, bool)
 T CCaptureFlag::PlaySound(IRecipientFilter&, char const*, int)
 T CCaptureFlag::Precache()
 T CCaptureFlag::RemoveFlagTrail()
 T CCaptureFlag::RemoveFollower(CTFBot*)
 T CCaptureFlag::Reset()
 T CCaptureFlag::ResetFlagNeutralTime()
 T CCaptureFlag::ResetFlagReturnTime()
 T CCaptureFlag::ResetMessage()
 T CCaptureFlag::SetDisabled(bool)
 T CCaptureFlag::SetFlagNeutralIn(float)
 T CCaptureFlag::SetFlagReturnIn(float)
 T CCaptureFlag::SetFlagReturnIn(float, float)
 T CCaptureFlag::SetFlagStatus(int, CBasePlayer*)
 T CCaptureFlag::Spawn()
 T CCaptureFlag::StartFlagTrail()
 T CCaptureFlag::Think()
 T CCaptureFlag::UpdateOnRemove()
 T CCaptureFlag::UpdateTransmitState()
 T CCaptureFlag::YouForgotToImplementOrDeclareServerClass()
 T CCaptureFlag::~CCaptureFlag()
 T CCaptureFlagReturnIcon::GetServerClass()
 T CCaptureFlagReturnIcon::Spawn()
 T CCaptureFlagReturnIcon::UpdateTransmitState()
 T CCaptureFlagReturnIcon::YouForgotToImplementOrDeclareServerClass()
 T CCaptureFlagReturnIcon::~CCaptureFlagReturnIcon()
 T CCaptureZone::Activate()
 T CCaptureZone::CCaptureZone()
 T CCaptureZone::Capture(CBaseEntity*)
 T CCaptureZone::GetDataDescMap()
 T CCaptureZone::GetServerClass()
 T CCaptureZone::InputDisable(inputdata_t&)
 T CCaptureZone::InputEnable(inputdata_t&)
 T CCaptureZone::IsDisabled()
 T CCaptureZone::PlayerDestructionThink()
 T CCaptureZone::SetDisabled(bool)
 T CCaptureZone::ShimTouch(CBaseEntity*)
 T CCaptureZone::Spawn()
 T CCaptureZone::UpdateTransmitState()
 T CCaptureZone::YouForgotToImplementOrDeclareServerClass()
 T CCaptureZone::~CCaptureZone()
 T CCaptureZoneShim::Touch(CBaseEntity*)
 T CCaptureZoneShim::~CCaptureZoneShim()
 T CCasualCriteriaHelper::CCasualCriteriaHelper(CMsgCasualMatchmakingSearchCriteria const&)
 T CCasualCriteriaHelper::GetCasualCriteria() const
 T CCasualCriteriaHelper::IsMapInValidCategory(unsigned int) const
 T CCasualCriteriaHelper::SetMapSelected(unsigned int, bool)
 T CCasualMatchGroupDescription::BMatchIsSafeToLeaveForPlayer(CMatchInfo const*, CMatchInfo::PlayerMatchData_t const*) const
 T CCasualMatchGroupDescription::BPlayWinMusic(int, bool) const
 T CCasualMatchGroupDescription::CCasualMatchGroupDescription(EMatchGroup, ConVar*, ConVar*)
 T CCasualMatchGroupDescription::CCasualProgressionDesc::CCasualProgressionDesc(EMatchGroup)
 T CCasualMatchGroupDescription::CCasualProgressionDesc::GetExperienceFromLadderData(CSOTFLadderData const*) const
 T CCasualMatchGroupDescription::CCasualProgressionDesc::GetLastAckdExperienceFromLadderData(CSOTFLadderData const*) const
 T CCasualMatchGroupDescription::InitGameRulesSettings() const
 T CCasualMatchGroupDescription::InitGameRulesSettingsPostEntity() const
 T CCasualMatchGroupDescription::PostMatchClearServerSettings() const
 T CCasualMatchGroupDescription::ShouldRequestLateJoin() const
 T CChangeClassZone::EndTouch(CBaseEntity*)
 T CChangeClassZone::InputDisable(inputdata_t&)
 T CChangeClassZone::InputEnable(inputdata_t&)
 T CChangeClassZone::InputToggle(inputdata_t&)
 T CChangeClassZone::Precache()
 T CChangeClassZone::Spawn()
 T CChangeClassZone::Touch(CBaseEntity*)
 T CChangeClassZone::~CChangeClassZone()
 T CChangeLevel::Activate()
 T CChangeLevel::AddTransitionToList(levellist_t*, int, char const*, char const*, edict_t*)
 T CChangeLevel::BuildChangeLevelList(levellist_t*, int)
 T CChangeLevel::BuildEntityTransitionList(CBaseEntity*, char const*, CBaseEntity**, int*, int)
 T CChangeLevel::ChangeLevelNow(CBaseEntity*)
 T CChangeLevel::ChangeList(levellist_t*, int)
 T CChangeLevel::ComputeEntitySaveFlags(CBaseEntity*)
 T CChangeLevel::FindLandmark(char const*)
 T CChangeLevel::GetDataDescMap()
 T CChangeLevel::InTransitionVolume(CBaseEntity*, char const*)
 T CChangeLevel::InputChangeLevel(inputdata_t&)
 T CChangeLevel::IsEntityInTransition(CBaseEntity*)
 T CChangeLevel::KeyValue(char const*, char const*)
 T CChangeLevel::NotifyEntitiesOutOfTransition()
 T CChangeLevel::Spawn()
 T CChangeLevel::TouchChangeLevel(CBaseEntity*)
 T CChangeLevel::WarnAboutActiveLead()
 T CChangeLevel::~CChangeLevel()
 T CChangeLevelIssue::CanCallVote(int, char const*, vote_create_failed_t&, int&)
 T CChangeLevelIssue::CanTeamCallVote(int) const
 T CChangeLevelIssue::ExecuteCommand()
 T CChangeLevelIssue::GetDetailsString()
 T CChangeLevelIssue::GetDisplayString()
 T CChangeLevelIssue::GetVotePassedString()
 T CChangeLevelIssue::IsEnabled()
 T CChangeLevelIssue::IsYesNoVote()
 T CChangeLevelIssue::ListIssueDetails(CBasePlayer*)
 T CChangeLevelIssue::~CChangeLevelIssue()
 T CCheckClient::LevelInitPreEntity()
 T CCheckClient::~CCheckClient()
 T CChildOperatorDefinition::CreateInstance(UniqueId_t const&) const
 T CChildOperatorDefinition::GetClassSize() const
 T CChildOperatorDefinition::GetId() const
 T CChildOperatorDefinition::GetName() const
 T CChildOperatorDefinition::GetUnpackStructure() const
 T CChildOperatorDefinition::IsObsolete() const
 T CChoreoActor::AddChannel(CChoreoChannel*)
 T CChoreoActor::CChoreoActor()
 T CChoreoActor::FindChannelIndex(CChoreoChannel*)
 T CChoreoActor::GetChannel(int)
 T CChoreoActor::GetName()
 T CChoreoActor::GetNumChannels()
 T CChoreoActor::RestoreFromBuffer(CUtlBuffer&, CChoreoScene*, IChoreoStringPool*)
 T CChoreoActor::SetActive(bool)
 T CChoreoActor::SetName(char const*)
 T CChoreoChannel::AddEvent(CChoreoEvent*)
 T CChoreoChannel::CChoreoChannel()
 T CChoreoChannel::GetEvent(int)
 T CChoreoChannel::GetName()
 T CChoreoChannel::GetNumEvents()
 T CChoreoChannel::ReconcileCloseCaption()
 T CChoreoChannel::RestoreFromBuffer(CUtlBuffer&, CChoreoScene*, CChoreoActor*, IChoreoStringPool*)
 T CChoreoChannel::SetActor(CChoreoActor*)
 T CChoreoChannel::SetName(char const*)
 T CChoreoEvent::AddAbsoluteTag(CChoreoEvent::AbsTagType, char const*, float)
 T CChoreoEvent::AddEventDependency(CChoreoEvent*)
 T CChoreoEvent::AddRelativeTag(char const*, float)
 T CChoreoEvent::AddTimingTag(char const*, float, bool)
 T CChoreoEvent::CChoreoEvent(CChoreoScene*)
 T CChoreoEvent::CheckProcessing(IChoreoEventCallback*, CChoreoScene*, float)
 T CChoreoEvent::ClearEventDependencies()
 T CChoreoEvent::ContinueProcessing(IChoreoEventCallback*, CChoreoScene*, float)
 T CChoreoEvent::CurveHasEndTime()
 T CChoreoEvent::FindAbsoluteTag(CChoreoEvent::AbsTagType, char const*)
 T CChoreoEvent::GetActor()
 T CChoreoEvent::GetChannel()
 T CChoreoEvent::GetCloseCaptionToken() const
 T CChoreoEvent::GetCloseCaptionType() const
 T CChoreoEvent::GetDefaultCurveType()
 T CChoreoEvent::GetDescription()
 T CChoreoEvent::GetDistanceToTarget()
 T CChoreoEvent::GetDuration()
 T CChoreoEvent::GetEndTime()
 T CChoreoEvent::GetEventDependencies(CUtlVector<CChoreoEvent*, CUtlMemory<CChoreoEvent*, int> >&)
 T CChoreoEvent::GetFlexAnimationTrack(int)
 T CChoreoEvent::GetIntensity(float)
 T CChoreoEvent::GetLastSlaveEndTime() const
 T CChoreoEvent::GetLoopCount()
 T CChoreoEvent::GetName()
 T CChoreoEvent::GetNumFlexAnimationTracks()
 T CChoreoEvent::GetNumLoopsRemaining()
 T CChoreoEvent::GetOriginalPercentageFromPlaybackPercentage(float)
 T CChoreoEvent::GetParameters()
 T CChoreoEvent::GetParameters2()
 T CChoreoEvent::GetParameters3()
 T CChoreoEvent::GetPlayOverScript()
 T CChoreoEvent::GetPlaybackCloseCaptionToken(char*, int)
 T CChoreoEvent::GetStartTime()
 T CChoreoEvent::GetSubScene()
 T CChoreoEvent::GetTrackLookupSet()
 T CChoreoEvent::GetType()
 T CChoreoEvent::HasEndTime()
 T CChoreoEvent::Init(CChoreoScene*)
 T CChoreoEvent::IsLockBodyFacing()
 T CChoreoEvent::IsProcessing() const
 T CChoreoEvent::IsResumeCondition()
 T CChoreoEvent::IsSuppressingCaptionAttenuation() const
 T CChoreoEvent::IsUsingCombinedFile() const
 T CChoreoEvent::ResetProcessing()
 T CChoreoEvent::RestoreFlexAnimationsFromBuffer(CUtlBuffer&, IChoreoStringPool*)
 T CChoreoEvent::RestoreFromBuffer(CUtlBuffer&, CChoreoScene*, IChoreoStringPool*)
 T CChoreoEvent::SetActor(CChoreoActor*)
 T CChoreoEvent::SetChannel(CChoreoChannel*)
 T CChoreoEvent::SetCloseCaptionType(CChoreoEvent::CLOSECAPTION)
 T CChoreoEvent::SetEndTime(float)
 T CChoreoEvent::SetLastSlaveEndTime(float)
 T CChoreoEvent::SetName(char const*)
 T CChoreoEvent::SetNumLoopsRemaining(int)
 T CChoreoEvent::SetNumSlaves(int)
 T CChoreoEvent::SetParameters(char const*)
 T CChoreoEvent::SetRequiredCombinedChecksum(unsigned int)
 T CChoreoEvent::SetStartTime(float)
 T CChoreoEvent::SetSubScene(CChoreoScene*)
 T CChoreoEvent::SetTrackLookupSet(bool)
 T CChoreoEvent::SetType(CChoreoEvent::EVENTTYPE)
 T CChoreoEvent::SetUsingCombinedFile(bool)
 T CChoreoEvent::SetUsingRelativeTag(bool, char const*, char const*)
 T CChoreoEvent::SnapTimes()
 T CChoreoEvent::StartProcessing(IChoreoEventCallback*, CChoreoScene*, float)
 T CChoreoEvent::StopProcessing(IChoreoEventCallback*, CChoreoScene*, float)
 T CChoreoEvent::VerifyTagOrder()
 T CChoreoEvent::~CChoreoEvent()
 T CChoreoScene::AllocActor()
 T CChoreoScene::AllocChannel()
 T CChoreoScene::AllocEvent()
 T CChoreoScene::CChoreoScene(IChoreoEventCallback*)
 T CChoreoScene::CheckEventCompletion()
 T CChoreoScene::CurveHasEndTime()
 T CChoreoScene::EventLess(CChoreoScene::ActiveList const&, CChoreoScene::ActiveList const&)
 T CChoreoScene::EventThink(CChoreoEvent*, float, float, bool, CChoreoScene::PROCESSING_TYPE&)
 T CChoreoScene::FindActorIndex(CChoreoActor*)
 T CChoreoScene::FindStopTime()
 T CChoreoScene::GetActor(int)
 T CChoreoScene::GetDefaultCurveType()
 T CChoreoScene::GetDuration()
 T CChoreoScene::GetEvent(int)
 T CChoreoScene::GetFilename() const
 T CChoreoScene::GetNumActors()
 T CChoreoScene::GetNumChannels()
 T CChoreoScene::GetNumEvents()
 T CChoreoScene::GetPlayingSoundName(char*, int)
 T CChoreoScene::GetTime()
 T CChoreoScene::HasEventsOfType(CChoreoEvent::EVENTTYPE) const
 T CChoreoScene::HasUnplayedSpeech()
 T CChoreoScene::InternalDetermineEventTypes()
 T CChoreoScene::IsBackground()
 T CChoreoScene::IsSubScene() const
 T CChoreoScene::LoopThink(float)
 T CChoreoScene::LoopToTime(float)
 T CChoreoScene::ProcessActiveListEntry(CChoreoScene::ActiveList*)
 T CChoreoScene::ReconcileCloseCaption()
 T CChoreoScene::ResetSimulation(bool, float, float)
 T CChoreoScene::RestoreFromBinaryBuffer(CUtlBuffer&, char const*, IChoreoStringPool*)
 T CChoreoScene::ResumeSimulation()
 T CChoreoScene::SetBackground(bool)
 T CChoreoScene::SetEventCallbackInterface(IChoreoEventCallback*)
 T CChoreoScene::SetPrintFunc(void (*)(char const*, ...))
 T CChoreoScene::SetSoundFileStartupLatency(float)
 T CChoreoScene::SetSubScene(bool)
 T CChoreoScene::SetTime(float)
 T CChoreoScene::ShouldIgnorePhonemes() const
 T CChoreoScene::SimulationFinished()
 T CChoreoScene::SnapTime(float)
 T CChoreoScene::Think(float)
 T CChoreoScene::~CChoreoScene()
 T CChoreoStringPool::FindOrAddString(char const*)
 T CChoreoStringPool::GetString(short, char*, int)
 T CClassLimitsIssue::CanCallVote(int, char const*, vote_create_failed_t&, int&)
 T CClassLimitsIssue::ExecuteCommand()
 T CClassLimitsIssue::GetDetailsString()
 T CClassLimitsIssue::GetDisplayString()
 T CClassLimitsIssue::GetTypeStringLocalized()
 T CClassLimitsIssue::GetVotePassedString()
 T CClassLimitsIssue::IsEnabled()
 T CClassLimitsIssue::ListIssueDetails(CBasePlayer*)
 T CClassLimitsIssue::~CClassLimitsIssue()
 T CClassMemoryPool<GCSDK::CNetPacket>::~CClassMemoryPool()
 T CClassPtrSaveRestoreOps::IsEmpty(SaveRestoreFieldInfo_t const&)
 T CClassPtrSaveRestoreOps::MakeEmpty(SaveRestoreFieldInfo_t const&)
 T CCleanupDefaultRelationShips::Shutdown()
 T CCleanupDefaultRelationShips::~CCleanupDefaultRelationShips()
 T CCleanupUtlSymbolTable::~CCleanupUtlSymbolTable()
 T CClosestTFPlayer::operator()(CBasePlayer*)
 T CCollectAndLabelSpawnRoomAreas::operator()(CNavArea*)
 T CCollectPayloadGuardVantagePoints::operator()(CNavArea*, CNavArea*, float)
 T CCollectPayloadGuardVantagePoints::~CCollectPayloadGuardVantagePoints()
 T CCollectReachableObjects::ShouldSearch(CNavArea*, CNavArea*, float)
 T CCollectReachableObjects::operator()(CNavArea*, CNavArea*, float)
 T CCollectReachableObjects::~CCollectReachableObjects()
 T CCollisionEvent::AddDamageEvent(CBaseEntity*, CTakeDamageInfo const&, IPhysicsObject*, bool, Vector const&, Vector const&)
 T CCollisionEvent::AddDamageInflictor(IPhysicsObject*, float, Vector const&, Vector const&, bool)
 T CCollisionEvent::AddRemoveObject(IServerNetworkable*)
 T CCollisionEvent::AddTouchEvent(CBaseEntity*, CBaseEntity*, int, Vector const&, Vector const&)
 T CCollisionEvent::AdditionalCollisionChecksThisTick(int)
 T CCollisionEvent::DeltaTimeSinceLastFluid(CBaseEntity*)
 T CCollisionEvent::EndTouch(IPhysicsObject*, IPhysicsObject*, IPhysicsCollisionData*)
 T CCollisionEvent::FindOrAddPenetrateEvent(CBaseEntity*, CBaseEntity*)
 T CCollisionEvent::FluidEndTouch(IPhysicsObject*, IPhysicsFluidController*)
 T CCollisionEvent::FluidStartTouch(IPhysicsObject*, IPhysicsFluidController*)
 T CCollisionEvent::FlushQueuedOperations()
 T CCollisionEvent::FrameUpdate()
 T CCollisionEvent::Friction(IPhysicsObject*, float, int, int, IPhysicsCollisionData*)
 T CCollisionEvent::GetListOfPenetratingEntities(CBaseEntity*, CUtlVector<CBaseEntity*, CUtlMemory<CBaseEntity*, int> >&)
 T CCollisionEvent::LevelShutdown()
 T CCollisionEvent::ObjectEnterTrigger(IPhysicsObject*, IPhysicsObject*)
 T CCollisionEvent::ObjectLeaveTrigger(IPhysicsObject*, IPhysicsObject*)
 T CCollisionEvent::ObjectSleep(IPhysicsObject*)
 T CCollisionEvent::ObjectWake(IPhysicsObject*)
 T CCollisionEvent::PostCollision(vcollisionevent_t*)
 T CCollisionEvent::PostSimulationFrame()
 T CCollisionEvent::PreCollision(vcollisionevent_t*)
 T CCollisionEvent::RestoreDamageInflictorState(IPhysicsObject*)
 T CCollisionEvent::RestoreDamageInflictorState(int, float)
 T CCollisionEvent::ShouldCollide(IPhysicsObject*, IPhysicsObject*, void*, void*)
 T CCollisionEvent::ShouldFreezeContacts(IPhysicsObject**, int)
 T CCollisionEvent::ShouldFreezeObject(IPhysicsObject*)
 T CCollisionEvent::ShouldSolvePenetration(IPhysicsObject*, IPhysicsObject*, void*, void*, float)
 T CCollisionEvent::StartTouch(IPhysicsObject*, IPhysicsObject*, IPhysicsCollisionData*)
 T CCollisionEvent::UpdateDamageEvents()
 T CCollisionEvent::UpdateFrictionSounds()
 T CCollisionEvent::UpdatePenetrateEvents()
 T CCollisionEvent::UpdateTouchEvents()
 T CCollisionEvent::~CCollisionEvent()
 T CCollisionProperty::CCollisionProperty()
 T CCollisionProperty::CalcDistanceFromPoint(Vector const&) const
 T CCollisionProperty::CalcNearestPoint(Vector const&, Vector*) const
 T CCollisionProperty::CollisionAABBToWorldAABB(Vector const&, Vector const&, Vector*, Vector*) const
 T CCollisionProperty::CollisionToWorldTransform() const
 T CCollisionProperty::ComputeSurroundingBox(Vector*, Vector*)
 T CCollisionProperty::ComputeVPhysicsSurroundingBox(Vector*, Vector*)
 T CCollisionProperty::DestroyPartitionHandle()
 T CCollisionProperty::DoesVPhysicsInvalidateSurroundingBox() const
 T CCollisionProperty::GetCollisionAngles() const
 T CCollisionProperty::GetCollisionGroup() const
 T CCollisionProperty::GetCollisionModel()
 T CCollisionProperty::GetCollisionModelIndex()
 T CCollisionProperty::GetCollisionOrigin() const
 T CCollisionProperty::GetDataDescMap()
 T CCollisionProperty::GetEntityHandle()
 T CCollisionProperty::GetIClientUnknown()
 T CCollisionProperty::GetRootParentToWorldTransform() const
 T CCollisionProperty::GetSolid() const
 T CCollisionProperty::GetSolidFlags() const
 T CCollisionProperty::Init(CBaseEntity*)
 T CCollisionProperty::IsPointInBounds(Vector const&) const
 T CCollisionProperty::MarkPartitionHandleDirty()
 T CCollisionProperty::MarkSurroundingBoundsDirty()
 T CCollisionProperty::NetworkStateChanged()
 T CCollisionProperty::NetworkStateChanged(void*)
 T CCollisionProperty::NormalizedToWorldSpace(Vector const&, Vector*) const
 T CCollisionProperty::OBBMaxs() const
 T CCollisionProperty::OBBMaxsPreScaled() const
 T CCollisionProperty::OBBMins() const
 T CCollisionProperty::OBBMinsPreScaled() const
 T CCollisionProperty::RandomPointInBounds(Vector const&, Vector const&, Vector*) const
 T CCollisionProperty::RefreshScaledCollisionBounds()
 T CCollisionProperty::SetCollisionBounds(Vector const&, Vector const&)
 T CCollisionProperty::SetSolid(SolidType_t)
 T CCollisionProperty::SetSolidFlags(int)
 T CCollisionProperty::SetSurroundingBoundsType(SurroundingBoundsType_t, Vector const*, Vector const*)
 T CCollisionProperty::ShouldTouchTrigger(int) const
 T CCollisionProperty::TestCollision(Ray_t const&, unsigned int, CGameTrace&)
 T CCollisionProperty::TestHitboxes(Ray_t const&, unsigned int, CGameTrace&)
 T CCollisionProperty::UpdatePartition()
 T CCollisionProperty::UpdateServerPartitionMask()
 T CCollisionProperty::UseTriggerBounds(bool, float)
 T CCollisionProperty::WorldSpaceCenter() const
 T CCollisionProperty::WorldSpaceSurroundingBounds(Vector*, Vector*)
 T CCollisionProperty::WorldSpaceTriggerBounds(Vector*, Vector*) const
 T CCollisionProperty::~CCollisionProperty()
 T CColorCorrection::Activate()
 T CColorCorrection::CColorCorrection()
 T CColorCorrection::FadeInThink()
 T CColorCorrection::FadeOutThink()
 T CColorCorrection::GetDataDescMap()
 T CColorCorrection::GetServerClass()
 T CColorCorrection::InputDisable(inputdata_t&)
 T CColorCorrection::InputEnable(inputdata_t&)
 T CColorCorrection::InputSetFadeInDuration(inputdata_t&)
 T CColorCorrection::InputSetFadeOutDuration(inputdata_t&)
 T CColorCorrection::ObjectCaps()
 T CColorCorrection::Spawn()
 T CColorCorrection::UpdateTransmitState()
 T CColorCorrection::YouForgotToImplementOrDeclareServerClass()
 T CColorCorrection::~CColorCorrection()
 T CColorCorrectionVolume::CColorCorrectionVolume()
 T CColorCorrectionVolume::EndTouch(CBaseEntity*)
 T CColorCorrectionVolume::GetDataDescMap()
 T CColorCorrectionVolume::GetServerClass()
 T CColorCorrectionVolume::InputDisable(inputdata_t&)
 T CColorCorrectionVolume::InputEnable(inputdata_t&)
 T CColorCorrectionVolume::KeyValue(char const*, char const*)
 T CColorCorrectionVolume::ObjectCaps()
 T CColorCorrectionVolume::PassesTriggerFilters(CBaseEntity*)
 T CColorCorrectionVolume::Spawn()
 T CColorCorrectionVolume::StartTouch(CBaseEntity*)
 T CColorCorrectionVolume::ThinkFunc()
 T CColorCorrectionVolume::UpdateTransmitState()
 T CColorCorrectionVolume::YouForgotToImplementOrDeclareServerClass()
 T CColorCorrectionVolume::~CColorCorrectionVolume()
 T CCombatCharVisCache::FrameUpdatePreEntityThink()
 T CCombatCharVisCache::LevelShutdownPreEntity()
 T CCombatCharVisCache::LookupVisibility(CBaseCombatCharacter const*, CBaseCombatCharacter*)
 T CCombatCharVisCache::~CCombatCharVisCache()
 T CCommand::CCommand()
 T CCommand::CCommand(int, char const**)
 T CCommand::FindArg(char const*) const
 T CCommand::FindArgInt(char const*, int) const
 T CCommand::Tokenize(char const*, characterset_t*)
 T CCommentaryAuto::GetDataDescMap()
 T CCommentaryAuto::InputMultiplayerSpawned(inputdata_t&)
 T CCommentaryAuto::Spawn()
 T CCommentaryAuto::Think()
 T CCommentaryAuto::~CCommentaryAuto()
 T CCommentarySystem::ConvarChanged(IConVar*, char const*, float)
 T CCommentarySystem::GetDataDescMap()
 T CCommentarySystem::GetNodeUnderCrosshair()
 T CCommentarySystem::InitCommentary()
 T CCommentarySystem::JumpToNextNode(CBasePlayer*)
 T CCommentarySystem::LevelInitPostEntity()
 T CCommentarySystem::LevelInitPreEntity()
 T CCommentarySystem::LevelShutdownPreEntity()
 T CCommentarySystem::OnRestore()
 T CCommentarySystem::ParseEntKVBlock(CBaseEntity*, KeyValues*)
 T CCommentarySystem::PrePlayerRunCommand(CBasePlayer*, CUserCmd*)
 T CCommentarySystem::ShutDownCommentary()
 T CCommentarySystem::~CCommentarySystem()
 T CCommentaryViewPosition::Precache()
 T CCommentaryViewPosition::Spawn()
 T CCommentaryViewPosition::~CCommentaryViewPosition()
 T CCommentary_SaveRestoreBlockHandler::GetBlockName()
 T CCommentary_SaveRestoreBlockHandler::ReadRestoreHeaders(IRestore*)
 T CCommentary_SaveRestoreBlockHandler::Restore(IRestore*, bool)
 T CCommentary_SaveRestoreBlockHandler::Save(ISave*)
 T CCommentary_SaveRestoreBlockHandler::WriteSaveHeaders(ISave*)
 T CCompareFriendFoeInfluence::Inspect(CKnownEntity const&)
 T CCompetitiveLogic::GetDataDescMap()
 T CCompetitiveLogic::~CCompetitiveLogic()
 T CConceptHistoriesDataOps::IsEmpty(SaveRestoreFieldInfo_t const&)
 T CConceptHistoriesDataOps::MakeEmpty(SaveRestoreFieldInfo_t const&)
 T CConceptHistoriesDataOps::Restore(SaveRestoreFieldInfo_t const&, IRestore*)
 T CConceptHistoriesDataOps::Save(SaveRestoreFieldInfo_t const&, ISave*)
 T CConceptInfoMap::~CConceptInfoMap()
 T CConditionFortuneTellerEffect::FireGameEvent(IGameEvent*)
 T CConditionFortuneTellerEffect::OnActivateEffect(bool)
 T CConditionFortuneTellerEffect::OnDeactivateEffect()
 T CConditionFortuneTellerEffect::~CConditionFortuneTellerEffect()
 T CConstantForceController::Simulate(IPhysicsMotionController*, IPhysicsObject*, float, Vector&, Vector&)
 T CConstraintAnchor::GetDataDescMap()
 T CConstraintAnchor::Spawn()
 T CConstraintAnchor::~CConstraintAnchor()
 T CConstraintFloodList::AddLink(CBaseEntity*, CBaseEntity*, bool)
 T CConstraintFloodList::BuildGraphFromEntity(CBaseEntity*, CUtlVector<CBaseEntity*, CUtlMemory<CBaseEntity*, int> >&)
 T CConstraintFloodList::CConstraintFloodList()
 T CCopyRecipientFilter::AddRecipient(CBasePlayer*)
 T CCopyRecipientFilter::GetRecipientCount() const
 T CCopyRecipientFilter::GetRecipientIndex(int) const
 T CCopyRecipientFilter::Init(IRecipientFilter*)
 T CCopyRecipientFilter::IsInitMessage() const
 T CCopyRecipientFilter::IsReliable() const
 T CCopyRecipientFilter::~CCopyRecipientFilter()
 T CCopyableUtlVector<MvMTourMission_t>::~CCopyableUtlVector()
 T CCopyableUtlVector<int>::~CCopyableUtlVector()
 T CCopyableUtlVector<static_attrib_t>::~CCopyableUtlVector()
 T CCoroutineMgr::CCoroutineMgr()
 T CCountUserGeneratedAttributeIterator::OnIterateAttributeValueUntyped(CEconItemAttributeDefinition const*)
 T CCountUserGeneratedAttributeIterator::~CCountUserGeneratedAttributeIterator()
 T CCountdownAnnouncer::Tick(float)
 T CCredits::GetDataDescMap()
 T CCredits::InputRollCredits(inputdata_t&)
 T CCredits::InputRollOutroCredits(inputdata_t&)
 T CCredits::InputSetLogoLength(inputdata_t&)
 T CCredits::InputShowLogo(inputdata_t&)
 T CCredits::OnRestore()
 T CCredits::RollOutroCredits()
 T CCredits::Spawn()
 T CCredits::~CCredits()
 T CCrypto::RSAVerifySignatureSHA256(unsigned char const*, unsigned int, unsigned char const*, unsigned int, unsigned char const*, unsigned int)
 T CCurrencyPack::AffectedByRadiusCollection() const
 T CCurrencyPack::BlinkThink()
 T CCurrencyPack::CCurrencyPack()
 T CCurrencyPack::ComeToRest()
 T CCurrencyPack::DistributedBy(CBasePlayer*)
 T CCurrencyPack::GetDefaultPowerupModel()
 T CCurrencyPack::GetPackSize()
 T CCurrencyPack::GetServerClass()
 T CCurrencyPack::MyTouch(CBasePlayer*)
 T CCurrencyPack::Precache()
 T CCurrencyPack::SetAmount(float)
 T CCurrencyPack::ShouldTransmit(CCheckTransmitInfo const*)
 T CCurrencyPack::Spawn()
 T CCurrencyPack::UpdateOnRemove()
 T CCurrencyPack::UpdateTransmitState()
 T CCurrencyPack::YouForgotToImplementOrDeclareServerClass()
 T CCurrencyPack::~CCurrencyPack()
 T CCurrencyPackCustom::GetDefaultPowerupModel()
 T CCurrencyPackCustom::GetPackSize()
 T CCurrencyPackCustom::~CCurrencyPackCustom()
 T CCurrencyPackMedium::GetDefaultPowerupModel()
 T CCurrencyPackMedium::GetPackSize()
 T CCurrencyPackMedium::~CCurrencyPackMedium()
 T CCurrencyPackSmall::GetDefaultPowerupModel()
 T CCurrencyPackSmall::GetPackSize()
 T CCurrencyPackSmall::~CCurrencyPackSmall()
 T CCurveData::GetBoundedSample(ICurveDataAccessor*, int, bool&)
 T CCurveData::GetIntensity(ICurveDataAccessor*, float)
 T CCurveData::RestoreFromBuffer(CUtlBuffer&, IChoreoStringPool*)
 T CCyclicalHoliday::IsActive(CRTime const&)
 T CCyclicalHoliday::~CCyclicalHoliday()
 T CDamageModifier::CDamageModifier()
 T CDamageModifier::GetModifier() const
 T CDamageModifier::IsDamageDoneToMe() const
 T CDamageModifier::RemoveModifier()
 T CDamageModifier::SetModifier(float)
 T CDataManager<CBoneCache, bonecacheparams_t, CBoneCache*, CThreadFastMutex>::DestroyResourceStorage(void*)
 T CDataManager<CBoneCache, bonecacheparams_t, CBoneCache*, CThreadFastMutex>::GetRealSize(void*)
 T CDataManager<CBoneCache, bonecacheparams_t, CBoneCache*, CThreadFastMutex>::Lock()
 T CDataManager<CBoneCache, bonecacheparams_t, CBoneCache*, CThreadFastMutex>::TryLock()
 T CDataManager<CBoneCache, bonecacheparams_t, CBoneCache*, CThreadFastMutex>::Unlock()
 T CDataManager<CBoneCache, bonecacheparams_t, CBoneCache*, CThreadFastMutex>::~CDataManager()
 T CDataManagerBase::BreakLock(memhandle_t__*)
 T CDataManagerBase::CDataManagerBase(unsigned int)
 T CDataManagerBase::CreateHandle(bool)
 T CDataManagerBase::DestroyResource(memhandle_t__*)
 T CDataManagerBase::EnsureCapacity(unsigned int)
 T CDataManagerBase::FlushAll()
 T CDataManagerBase::GetForFreeByIndex(unsigned short)
 T CDataManagerBase::GetResource_NoLock(memhandle_t__*)
 T CDataManagerBase::Lock()
 T CDataManagerBase::StoreResourceInHandle(unsigned short, void*, unsigned int)
 T CDataManagerBase::TouchByIndex(unsigned short)
 T CDataManagerBase::TryLock()
 T CDataManagerBase::Unlock()
 T CDataManagerBase::~CDataManagerBase()
 T CDataObjectAccessSystem::Init()
 T CDataObjectAccessSystem::Shutdown()
 T CDataObjectAccessSystem::~CDataObjectAccessSystem()
 T CDatadescGeneratedNameHolder::GenerateName(char const*)
 T CDatadescGeneratedNameHolder::~CDatadescGeneratedNameHolder()
 T CDateBasedHoliday::IsActive(CRTime const&)
 T CDateBasedHoliday::~CDateBasedHoliday()
 T CDateBasedHolidayNoSpecificYear::IsActive(CRTime const&)
 T CDateBasedHolidayNoSpecificYear::~CDateBasedHolidayNoSpecificYear()
 T CDebugHistory::GetDataDescMap()
 T CDebugHistory::Restore(IRestore&)
 T CDebugHistory::Save(ISave&)
 T CDebugHistory::Spawn()
 T CDebugHistory::~CDebugHistory()
 T CDecal::Activate()
 T CDecal::GetDataDescMap()
 T CDecal::InputActivate(inputdata_t&)
 T CDecal::KeyValue(char const*, char const*)
 T CDecal::Spawn()
 T CDecal::StaticDecal()
 T CDecal::TriggerDecal(CBaseEntity*, CBaseEntity*, USE_TYPE, float)
 T CDecal::~CDecal()
 T CDecalEmitterSystem::CDecalEmitterSystem(char const*)
 T CDecalEmitterSystem::Clear()
 T CDecalEmitterSystem::GetDecalIndexForName(char const*)
 T CDecalEmitterSystem::GetDecalNameForIndex(int)
 T CDecalEmitterSystem::Init()
 T CDecalEmitterSystem::LevelInitPreEntity()
 T CDecalEmitterSystem::LoadDecalsFromScript(char const*)
 T CDecalEmitterSystem::Shutdown()
 T CDecalEmitterSystem::TranslateDecalForGameMaterial(char const*, unsigned char)
 T CDecalEmitterSystem::~CDecalEmitterSystem()
 T CDefOps<CAI_BaseNPC*>::LessFunc(CAI_BaseNPC* const&, CAI_BaseNPC* const&)
 T CDefOps<CBaseEntity const*>::LessFunc(CBaseEntity const* const&, CBaseEntity const* const&)
 T CDefOps<CBaseEntity*>::LessFunc(CBaseEntity* const&, CBaseEntity* const&)
 T CDefOps<CChoreoActor*>::LessFunc(CChoreoActor* const&, CChoreoActor* const&)
 T CDefOps<CMsgTFXPSource_XPSourceType>::LessFunc(CMsgTFXPSource_XPSourceType const&, CMsgTFXPSource_XPSourceType const&)
 T CDefOps<CPhysCollide const*>::LessFunc(CPhysCollide const* const&, CPhysCollide const* const&)
 T CDefOps<CSteamID>::LessFunc(CSteamID const&, CSteamID const&)
 T CDefOps<CUtlConstStringBase<char> >::LessFunc(CUtlConstStringBase<char> const&, CUtlConstStringBase<char> const&)
 T CDefOps<EGameCategory>::LessFunc(EGameCategory const&, EGameCategory const&)
 T CDefOps<EMatchmakingGroupType>::LessFunc(EMatchmakingGroupType const&, EMatchmakingGroupType const&)
 T CDefOps<IPhysicsObject*>::LessFunc(IPhysicsObject* const&, IPhysicsObject* const&)
 T CDefOps<char const*>::LessFunc(char const* const&, char const* const&)
 T CDefOps<int>::LessFunc(int const&, int const&)
 T CDefOps<string_t>::LessFunc(string_t const&, string_t const&)
 T CDefOps<unsigned char>::LessFunc(unsigned char const&, unsigned char const&)
 T CDefOps<unsigned int>::LessFunc(unsigned int const&, unsigned int const&)
 T CDefOps<unsigned long long>::LessFunc(unsigned long long const&, unsigned long long const&)
 T CDefOps<unsigned short>::LessFunc(unsigned short const&, unsigned short const&)
 T CDefOps<void*>::LessFunc(void* const&, void* const&)
 T CDefSaveRestoreBlockHandler::PostRestore()
 T CDefSaveRestoreBlockHandler::PostSave()
 T CDefSaveRestoreBlockHandler::PreRestore()
 T CDefSaveRestoreBlockHandler::PreSave(CSaveRestoreData*)
 T CDefSaveRestoreOps::Parse(SaveRestoreFieldInfo_t const&, char const*)
 T CDefaultAccessor::RegisterConCommandBase(ConCommandBase*)
 T CDefaultParticleSystemQuery::GetLightingAtPoint(Vector const&, Color&)
 T CDefaultParticleSystemQuery::GetPixelVisibility(int*, Vector const&, float)
 T CDefaultParticleSystemQuery::GetRandomPointsOnControllingObjectHitBox(CParticleCollection*, int, int, float, int, Vector*, Vector, Vector*, int*)
 T CDefaultParticleSystemQuery::TraceLine(Vector const&, Vector const&, unsigned int, IHandleEntity const*, int, CBaseTrace*)
 T CDefaultPlayerPickupVPhysics::ForcePhysgunOpen(CBasePlayer*)
 T CDefaultPlayerPickupVPhysics::HasPreferredCarryAnglesForPlayer(CBasePlayer*)
 T CDefaultPlayerPickupVPhysics::OnAttemptPhysGunPickup(CBasePlayer*, PhysGunPickup_t)
 T CDefaultPlayerPickupVPhysics::OnFailedPhysGunPickup(Vector)
 T CDefaultPlayerPickupVPhysics::OnPhysGunDrop(CBasePlayer*, PhysGunDrop_t)
 T CDefaultPlayerPickupVPhysics::OnPhysGunPickup(CBasePlayer*, PhysGunPickup_t)
 T CDefaultPlayerPickupVPhysics::PhysGunLaunchAngularImpulse()
 T CDefaultPlayerPickupVPhysics::PhysGunLaunchVelocity(Vector const&, float)
 T CDefaultPlayerPickupVPhysics::PreferredCarryAngles()
 T CDefaultPlayerPickupVPhysics::ShouldPuntUseLaunchForces(PhysGunForce_t)
 T CDefaultResponseSystem::BuildCustomResponseSystemGivenCriteria(char const*, char const*, AI_CriteriaSet&, float)
 T CDefaultResponseSystem::CDefaultResponseSystem()
 T CDefaultResponseSystem::ClearInstanced()
 T CDefaultResponseSystem::GetScriptFile()
 T CDefaultResponseSystem::Init()
 T CDefaultResponseSystem::LevelInitPostEntity()
 T CDefaultResponseSystem::LevelInitPreEntity()
 T CDefaultResponseSystem::Release()
 T CDefaultResponseSystem::ReloadAllResponseSystems()
 T CDefaultResponseSystem::Shutdown()
 T CDefaultResponseSystem::~CDefaultResponseSystem()
 T CDefaultResponseSystemSaveRestoreBlockHandler::GetBlockName()
 T CDefaultResponseSystemSaveRestoreBlockHandler::ReadRestoreHeaders(IRestore*)
 T CDefaultResponseSystemSaveRestoreBlockHandler::Restore(IRestore*, bool)
 T CDefaultResponseSystemSaveRestoreBlockHandler::Save(ISave*)
 T CDefaultResponseSystemSaveRestoreBlockHandler::WriteSaveHeaders(ISave*)
 T CDevShotSystem::FrameUpdatePostEntityThink()
 T CDevShotSystem::LevelInitPreEntity()
 T CDevShotSystem::SafeRemoveIfDesired()
 T CDevShotSystem::~CDevShotSystem()
 T CDirtySpatialPartitionEntityList::CDirtySpatialPartitionEntityList(char const*)
 T CDirtySpatialPartitionEntityList::Init()
 T CDirtySpatialPartitionEntityList::LevelShutdownPostEntity()
 T CDirtySpatialPartitionEntityList::OnPostQuery(int)
 T CDirtySpatialPartitionEntityList::OnPreQuery(int)
 T CDirtySpatialPartitionEntityList::OnPreQuery_V1()
 T CDirtySpatialPartitionEntityList::Shutdown()
 T CDirtySpatialPartitionEntityList::~CDirtySpatialPartitionEntityList()
 T CDisableVision::Reset()
 T CDisableVision::Update()
 T CDisableVision::~CDisableVision()
 T CDispenserTouchTrigger::EndTouch(CBaseEntity*)
 T CDispenserTouchTrigger::Spawn()
 T CDispenserTouchTrigger::StartTouch(CBaseEntity*)
 T CDispenserTouchTrigger::~CDispenserTouchTrigger()
 T CDllDemandLoader::CDllDemandLoader(char const*)
 T CDllDemandLoader::GetFactory()
 T CDllDemandLoader::~CDllDemandLoader()
 T CDmgAccumulator::AccumulateMultiDamage(CTakeDamageInfo const&, CBaseEntity*)
 T CDmgAccumulator::CDmgAccumulator()
 T CDmgAccumulator::Process()
 T CDmgAccumulator::Start()
 T CDmgAccumulator::~CDmgAccumulator()
 T CDmxAttribute::AllocateDataMemory(DmAttributeType_t)
 T CDmxAttribute::CDmxAttribute(char const*)
 T CDmxAttribute::FreeDataMemory()
 T CDmxAttribute::GetName() const
 T CDmxAttribute::SetValue(char const*)
 T CDmxAttribute::Unserialize(DmAttributeType_t, CUtlBuffer&)
 T CDmxAttribute::UnserializeElement(DmAttributeType_t, CUtlBuffer&)
 T CDmxAttribute::~CDmxAttribute()
 T CDmxElement::AddAttribute(char const*)
 T CDmxElement::AddElementsToDelete(CUtlVector<CDmxElement*, CUtlMemory<CDmxElement*, int> >&)
 T CDmxElement::CDmxElement(char const*)
 T CDmxElement::GetAttribute(char const*)
 T CDmxElement::GetAttribute(char const*) const
 T CDmxElement::GetId() const
 T CDmxElement::GetName() const
 T CDmxElement::GetTypeString() const
 T CDmxElement::HasAttribute(char const*) const
 T CDmxElement::LockForChanges(bool)
 T CDmxElement::RemoveAllElementsRecursive()
 T CDmxElement::Resort() const
 T CDmxElement::SetId(UniqueId_t const&)
 T CDmxElement::UnpackIntoStructure(void*, unsigned long, DmxElementUnpackStructure_t const*) const
 T CDmxElement::~CDmxElement()
 T CDmxElementDictionary::Clear()
 T CDmxElementDictionary::HookUpElementArrayAttributes()
 T CDmxElementDictionary::HookUpElementReferences()
 T CDmxElementDictionary::InsertElement(CDmxElement*)
 T CDmxKeyValues2ErrorStack::ReportError(char const*, ...)
 T CDmxSerializer::Unserialize(CUtlBuffer&, int, CDmxElement**)
 T CDmxSerializer::UnserializeAttributes(CUtlBuffer&, CDmxElement*, CUtlVector<CDmxElement*, CUtlMemory<CDmxElement*, int> >&, int, int*, char*)
 T CDmxSerializer::UnserializeElementArrayAttribute(CUtlBuffer&, CDmxAttribute*, CUtlVector<CDmxElement*, CUtlMemory<CDmxElement*, int> >&)
 T CDmxSerializer::UnserializeElementIndex(CUtlBuffer&, CUtlVector<CDmxElement*, CUtlMemory<CDmxElement*, int> >&)
 T CDmxSerializerKeyValues2::EatWhitespacesAndComments(CUtlBuffer&)
 T CDmxSerializerKeyValues2::ReadToken(CUtlBuffer&, CUtlBuffer&)
 T CDmxSerializerKeyValues2::Unserialize(char const*, CUtlBuffer&, CDmxElement**)
 T CDmxSerializerKeyValues2::UnserializeArrayAttribute(CUtlBuffer&, int, char const*, DmAttributeType_t)
 T CDmxSerializerKeyValues2::UnserializeAttribute(CUtlBuffer&, int, char const*, DmAttributeType_t)
 T CDmxSerializerKeyValues2::UnserializeAttributeValueFromToken(CDmxAttribute*, DmAttributeType_t, CUtlBuffer&)
 T CDmxSerializerKeyValues2::UnserializeElement(CUtlBuffer&, char const*, int*)
 T CDmxSerializerKeyValues2::UnserializeElement(CUtlBuffer&, int*)
 T CDmxSerializerKeyValues2::UnserializeElementArrayAttribute(CUtlBuffer&, int, char const*)
 T CDmxSerializerKeyValues2::UnserializeElementAttribute(CUtlBuffer&, int, char const*, char const*)
 T CDynamicLight::DynamicLightThink()
 T CDynamicLight::GetDataDescMap()
 T CDynamicLight::GetServerClass()
 T CDynamicLight::InputToggle(inputdata_t&)
 T CDynamicLight::InputTurnOff(inputdata_t&)
 T CDynamicLight::InputTurnOn(inputdata_t&)
 T CDynamicLight::KeyValue(char const*, char const*)
 T CDynamicLight::Spawn()
 T CDynamicLight::YouForgotToImplementOrDeclareServerClass()
 T CDynamicLight::~CDynamicLight()
 T CDynamicProp::AnimThink()
 T CDynamicProp::CDynamicProp()
 T CDynamicProp::CreateBoneFollowers()
 T CDynamicProp::CreateVPhysics()
 T CDynamicProp::FinishSetSequence(int)
 T CDynamicProp::GetDataDescMap()
 T CDynamicProp::GetRootPhysicsObjectForBreak()
 T CDynamicProp::GetServerClass()
 T CDynamicProp::HandleAnimEvent(animevent_t*)
 T CDynamicProp::InputDisableCollision(inputdata_t&)
 T CDynamicProp::InputEnableCollision(inputdata_t&)
 T CDynamicProp::InputSetAnimation(inputdata_t&)
 T CDynamicProp::InputSetDefaultAnimation(inputdata_t&)
 T CDynamicProp::InputSetPlaybackRate(inputdata_t&)
 T CDynamicProp::InputTurnOff(inputdata_t&)
 T CDynamicProp::InputTurnOn(inputdata_t&)
 T CDynamicProp::NotifyPositionChanged(CBaseEntity*)
 T CDynamicProp::OnRestore()
 T CDynamicProp::OverridePropdata()
 T CDynamicProp::PropSetAnim(char const*)
 T CDynamicProp::PropSetSequence(int)
 T CDynamicProp::SetParent(CBaseEntity*, int)
 T CDynamicProp::Spawn()
 T CDynamicProp::TestCollision(Ray_t const&, unsigned int, CGameTrace&)
 T CDynamicProp::UpdateOnRemove()
 T CDynamicProp::YouForgotToImplementOrDeclareServerClass()
 T CDynamicProp::~CDynamicProp()
 T CEconClaimCode::~CEconClaimCode()
 T CEconColorDefinition::BInitFromKV(KeyValues*, CUtlVector<CUtlString, CUtlMemory<CUtlString, int> >*)
 T CEconCraftingRecipeDefinition::BInitFromKV(KeyValues*, CUtlVector<CUtlString, CUtlMemory<CUtlString, int> >*)
 T CEconCraftingRecipeDefinition::CEconCraftingRecipeDefinition()
 T CEconCraftingRecipeDefinition::CopyPolymorphic(CEconCraftingRecipeDefinition const*)
 T CEconCraftingRecipeDefinition::ItemListMatchesInputs(CUtlVector<CEconItem*, CUtlMemory<CEconItem*, int> >*, KeyValues*, bool, CUtlVector<unsigned long long, CUtlMemory<unsigned long long, int> >*) const
 T CEconCraftingRecipeDefinition::operator=(CEconCraftingRecipeDefinition const&)
 T CEconCraftingRecipeDefinition::~CEconCraftingRecipeDefinition()
 T CEconEntity::CEconEntity()
 T CEconEntity::CalculateVisibleClassFor(CBaseCombatCharacter*)
 T CEconEntity::GetAttributeContainer()
 T CEconEntity::GetAttributeList()
 T CEconEntity::GetAttributeManager()
 T CEconEntity::GetAttributeOwner()
 T CEconEntity::GetDataDescMap()
 T CEconEntity::GetServerClass()
 T CEconEntity::GiveTo(CBaseEntity*)
 T CEconEntity::InitializeAttributes()
 T CEconEntity::NetworkVar_m_AttributeManager::NetworkStateChanged()
 T CEconEntity::NetworkVar_m_AttributeManager::NetworkStateChanged(void*)
 T CEconEntity::NetworkVar_m_AttributeManager::~NetworkVar_m_AttributeManager()
 T CEconEntity::OnNewModel()
 T CEconEntity::OnOwnerClassChange()
 T CEconEntity::PlayAnimForPlaybackEvent(wearableanimplayback_t)
 T CEconEntity::ReapplyProvision()
 T CEconEntity::TranslateViewmodelHandActivity(Activity)
 T CEconEntity::TranslateViewmodelHandActivityInternal(Activity)
 T CEconEntity::UpdateBodygroups(CBaseCombatCharacter*, int)
 T CEconEntity::UpdateModelToClass()
 T CEconEntity::UpdateOnRemove()
 T CEconEntity::YouForgotToImplementOrDeclareServerClass()
 T CEconEntity::~CEconEntity()
 T CEconGameAccountForGameServers::~CEconGameAccountForGameServers()
 T CEconItem::AddDynamicAttributeInternal()
 T CEconItem::BIsKeyLess(GCSDK::CSharedObject const&) const
 T CEconItem::BParseFromMessage(CUtlBuffer const&)
 T CEconItem::BParseFromMessage(std::string const&)
 T CEconItem::BUpdateFromNetwork(GCSDK::CSharedObject const&)
 T CEconItem::CEconItem()
 T CEconItem::Copy(GCSDK::CSharedObject const&)
 T CEconItem::CopyAttributesFrom(CEconItem const&)
 T CEconItem::DeserializeFromProtoBufItem(CSOEconItem const&)
 T CEconItem::Dump() const
 T CEconItem::EnsureCustomDataExists()
 T CEconItem::Equip(unsigned short, unsigned short)
 T CEconItem::FindDynamicAttributeInternal(CEconItemAttributeDefinition const*)
 T CEconItem::GetAccountID() const
 T CEconItem::GetCustomDesc() const
 T CEconItem::GetCustomName() const
 T CEconItem::GetDebugString() const
 T CEconItem::GetEquippedPositionForClass(unsigned short) const
 T CEconItem::GetFlags() const
 T CEconItem::GetID() const
 T CEconItem::GetInUse() const
 T CEconItem::GetItemDefinition() const
 T CEconItem::GetItemLevel() const
 T CEconItem::GetOrigin() const
 T CEconItem::GetOriginalID() const
 T CEconItem::GetQuality() const
 T CEconItem::GetQuantity() const
 T CEconItem::GetStyle() const
 T CEconItem::GetTypeID() const
 T CEconItem::IsCommodity() const
 T CEconItem::IsEquippedForClass(unsigned short) const
 T CEconItem::IsMarketable() const
 T CEconItem::IsTradable() const
 T CEconItem::IsUsableInCrafting() const
 T CEconItem::IterateAttributes(IEconItemAttributeIterator*) const
 T CEconItem::RemoveDynamicAttribute(CEconItemAttributeDefinition const*)
 T CEconItem::SerializeToProtoBufItem(CSOEconItem&) const
 T CEconItem::SetCustomDesc(char const*)
 T CEconItem::SetCustomName(char const*)
 T CEconItem::SetItemID(unsigned long long)
 T CEconItem::operator=(CEconItem const&)
 T CEconItem::~CEconItem()
 T CEconItemAttribute::CEconItemAttribute(unsigned short, float)
 T CEconItemAttribute::CEconItemAttribute(unsigned short, unsigned int)
 T CEconItemAttribute::Init()
 T CEconItemAttribute::NetworkStateChanged()
 T CEconItemAttribute::NetworkStateChanged(void*)
 T CEconItemAttributeDefinition::BInitFromKV(KeyValues*, CUtlVector<CUtlString, CUtlMemory<CUtlString, int> >*)
 T CEconItemAttributeDefinition::operator=(CEconItemAttributeDefinition const&)
 T CEconItemAttributeIterator_ApplyAttributeFloat::OnIterateAttributeValue(CEconItemAttributeDefinition const*, unsigned int)
 T CEconItemAttributeIterator_ApplyAttributeFloat::~CEconItemAttributeIterator_ApplyAttributeFloat()
 T CEconItemAttributeIterator_ApplyAttributeString::OnIterateAttributeValue(CEconItemAttributeDefinition const*, CAttribute_String const&)
 T CEconItemAttributeIterator_ApplyAttributeString::OnIterateAttributeValue(CEconItemAttributeDefinition const*, unsigned int)
 T CEconItemAttributeIterator_ApplyAttributeString::~CEconItemAttributeIterator_ApplyAttributeString()
 T CEconItemCollectionDefinition::BInitFromKV(KeyValues*, CUtlVector<CUtlString, CUtlMemory<CUtlString, int> >*)
 T CEconItemCustomData::~CEconItemCustomData()
 T CEconItemDefinition::BInitFromKV(KeyValues*, CUtlVector<CUtlString, CUtlMemory<CUtlString, int> >*)
 T CEconItemDefinition::BInitFromTestItemKVs(int, KeyValues*, CUtlVector<CUtlString, CUtlMemory<CUtlString, int> >*)
 T CEconItemDefinition::BInitItemMappings(CUtlVector<CUtlString, CUtlMemory<CUtlString, int> >*)
 T CEconItemDefinition::BInitVisualBlockFromKV(KeyValues*, CUtlVector<CUtlString, CUtlMemory<CUtlString, int> >*)
 T CEconItemDefinition::CEconItemDefinition()
 T CEconItemDefinition::CopyPolymorphic(CEconItemDefinition const*)
 T CEconItemDefinition::GeneratePrecacheModelStrings(bool, CUtlVector<char const*, CUtlMemory<char const*, int> >*) const
 T CEconItemDefinition::GeneratePrecacheSoundStrings(bool, CUtlVector<char const*, CUtlMemory<char const*, int> >*) const
 T CEconItemDefinition::GetActivityOverride(int, Activity) const
 T CEconItemDefinition::GetBundleItem(int) const
 T CEconItemDefinition::GetBundleItemCount() const
 T CEconItemDefinition::GetIconDisplayModel() const
 T CEconItemDefinition::IsContentStreamable() const
 T CEconItemDefinition::IterateAttributes(IEconItemAttributeIterator*) const
 T CEconItemDefinition::RollItemLevel() const
 T CEconItemDefinition::operator=(CEconItemDefinition const&)
 T CEconItemDefinition::~CEconItemDefinition()
 T CEconItemHandle::PostSOUpdate(CSteamID const&, GCSDK::ESOCacheEvent)
 T CEconItemHandle::PreSOUpdate(CSteamID const&, GCSDK::ESOCacheEvent)
 T CEconItemHandle::SOCacheSubscribed(CSteamID const&, GCSDK::ESOCacheEvent)
 T CEconItemHandle::SOCacheUnsubscribed(CSteamID const&, GCSDK::ESOCacheEvent)
 T CEconItemHandle::SOCreated(CSteamID const&, GCSDK::CSharedObject const*, GCSDK::ESOCacheEvent)
 T CEconItemHandle::SODestroyed(CSteamID const&, GCSDK::CSharedObject const*, GCSDK::ESOCacheEvent)
 T CEconItemHandle::SOUpdated(CSteamID const&, GCSDK::CSharedObject const*, GCSDK::ESOCacheEvent)
 T CEconItemHandle::SetItem(CEconItem*)
 T CEconItemHandle::~CEconItemHandle()
 T CEconItemPaintKitDefinition::BInitFromKV(KeyValues*, CUtlVector<CUtlString, CUtlMemory<CUtlString, int> >*)
 T CEconItemPreviewDataBlock::ByteSize() const
 T CEconItemPreviewDataBlock::Clear()
 T CEconItemPreviewDataBlock::GetCachedSize() const
 T CEconItemPreviewDataBlock::GetMetadata() const
 T CEconItemPreviewDataBlock::IsInitialized() const
 T CEconItemPreviewDataBlock::MergeFrom(CEconItemPreviewDataBlock const&)
 T CEconItemPreviewDataBlock::New() const
 T CEconItemPreviewDataBlock::SerializeWithCachedSizesToArray(unsigned char*) const
 T CEconItemPreviewDataBlock::SetCachedSize(int) const
 T CEconItemPreviewDataBlock::~CEconItemPreviewDataBlock()
 T CEconItemQualityDefinition::BInitFromKV(KeyValues*, CUtlVector<CUtlString, CUtlMemory<CUtlString, int> >*)
 T CEconItemQualityDefinition::CEconItemQualityDefinition(CEconItemQualityDefinition const&)
 T CEconItemRarityDefinition::BInitFromKV(KeyValues*, KeyValues*, CEconItemSchema&, CUtlVector<CUtlString, CUtlMemory<CUtlString, int> >*)
 T CEconItemRarityDefinition::CEconItemRarityDefinition(CEconItemRarityDefinition const&)
 T CEconItemRarityDefinition::~CEconItemRarityDefinition()
 T CEconItemSchema::AddQuestObjective(CQuestObjectiveDefinition const**, KeyValues*, CUtlVector<CUtlString, CUtlMemory<CUtlString, int> >*)
 T CEconItemSchema::AssignDefaultBodygroupState(char const*, int)
 T CEconItemSchema::BCanStrangeFilterApplyToStrangeSlotInItem(unsigned int, unsigned int, IEconItemInterface const*, int, unsigned int*) const
 T CEconItemSchema::BGetItemQualityFromName(char const*, unsigned char*) const
 T CEconItemSchema::BGetItemRarityFromName(char const*, unsigned char*) const
 T CEconItemSchema::BGetItemSeries(char const*, unsigned char*) const
 T CEconItemSchema::BInit(char const*, char const*, CUtlVector<CUtlString, CUtlMemory<CUtlString, int> >*)
 T CEconItemSchema::BInitAchievementRewards(KeyValues*, CUtlVector<CUtlString, CUtlMemory<CUtlString, int> >*)
 T CEconItemSchema::BInitArmoryData(KeyValues*, CUtlVector<CUtlString, CUtlMemory<CUtlString, int> >*)
 T CEconItemSchema::BInitAttributeControlledParticleSystems(KeyValues*, CUtlVector<CUtlString, CUtlMemory<CUtlString, int> >*)
 T CEconItemSchema::BInitAttributeTypes(CUtlVector<CUtlString, CUtlMemory<CUtlString, int> >*)
 T CEconItemSchema::BInitAttributes(KeyValues*, CUtlVector<CUtlString, CUtlMemory<CUtlString, int> >*)
 T CEconItemSchema::BInitBinaryBuffer(CUtlBuffer&, CUtlVector<CUtlString, CUtlMemory<CUtlString, int> >*)
 T CEconItemSchema::BInitCollectionReferences(CUtlVector<CUtlString, CUtlMemory<CUtlString, int> >*)
 T CEconItemSchema::BInitColors(KeyValues*, CUtlVector<CUtlString, CUtlMemory<CUtlString, int> >*)
 T CEconItemSchema::BInitCommunityMarketRemaps(KeyValues*, CUtlVector<CUtlString, CUtlMemory<CUtlString, int> >*)
 T CEconItemSchema::BInitDefinitionPrefabs(KeyValues*, CUtlVector<CUtlString, CUtlMemory<CUtlString, int> >*)
 T CEconItemSchema::BInitEquipRegionConflicts(KeyValues*, CUtlVector<CUtlString, CUtlMemory<CUtlString, int> >*)
 T CEconItemSchema::BInitEquipRegions(KeyValues*, CUtlVector<CUtlString, CUtlMemory<CUtlString, int> >*)
 T CEconItemSchema::BInitFromDelayedBuffer()
 T CEconItemSchema::BInitGameInfo(KeyValues*, CUtlVector<CUtlString, CUtlMemory<CUtlString, int> >*)
 T CEconItemSchema::BInitItemCollections(KeyValues*, CUtlVector<CUtlString, CUtlMemory<CUtlString, int> >*)
 T CEconItemSchema::BInitItemLevels(KeyValues*, CUtlVector<CUtlString, CUtlMemory<CUtlString, int> >*)
 T CEconItemSchema::BInitItemPaintKitDefinitions(KeyValues*, CUtlVector<CUtlString, CUtlMemory<CUtlString, int> >*)
 T CEconItemSchema::BInitItemSeries(KeyValues*, CUtlVector<CUtlString, CUtlMemory<CUtlString, int> >*)
 T CEconItemSchema::BInitItemSets(KeyValues*, CUtlVector<CUtlString, CUtlMemory<CUtlString, int> >*)
 T CEconItemSchema::BInitItems(KeyValues*, CUtlVector<CUtlString, CUtlMemory<CUtlString, int> >*)
 T CEconItemSchema::BInitKillEaterScoreTypes(KeyValues*, CUtlVector<CUtlString, CUtlMemory<CUtlString, int> >*)
 T CEconItemSchema::BInitLootLists(KeyValues*, CUtlVector<CUtlString, CUtlMemory<CUtlString, int> >*)
 T CEconItemSchema::BInitOperationDefinitions(KeyValues*, KeyValues*, CUtlVector<CUtlString, CUtlMemory<CUtlString, int> >*)
 T CEconItemSchema::BInitQualities(KeyValues*, CUtlVector<CUtlString, CUtlMemory<CUtlString, int> >*)
 T CEconItemSchema::BInitRarities(KeyValues*, KeyValues*, CUtlVector<CUtlString, CUtlMemory<CUtlString, int> >*)
 T CEconItemSchema::BInitRecipes(KeyValues*, CUtlVector<CUtlString, CUtlMemory<CUtlString, int> >*)
 T CEconItemSchema::BInitRevolvingLootLists(KeyValues*, CUtlVector<CUtlString, CUtlMemory<CUtlString, int> >*)
 T CEconItemSchema::BInitSchema(KeyValues*, CUtlVector<CUtlString, CUtlMemory<CUtlString, int> >*)
 T CEconItemSchema::BInitStringTables(KeyValues*, CUtlVector<CUtlString, CUtlMemory<CUtlString, int> >*)
 T CEconItemSchema::BInitTextBuffer(CUtlBuffer&, CUtlVector<CUtlString, CUtlMemory<CUtlString, int> >*)
 T CEconItemSchema::BInsertLootlist(char const*, KeyValues*, CUtlVector<CUtlString, CUtlMemory<CUtlString, int> >*)
 T CEconItemSchema::BRecurseiveVerifyLootListItemDropDates(CEconLootListDefinition const*, CEconLootListDefinition const*, CUtlVector<CUtlString, CUtlMemory<CUtlString, int> >*) const
 T CEconItemSchema::BVerifyBaseItemNames(CUtlVector<CUtlString, CUtlMemory<CUtlString, int> >*)
 T CEconItemSchema::CEconItemSchema()
 T CEconItemSchema::CreateCraftingRecipeDefinition()
 T CEconItemSchema::CreateEconItemDefinition()
 T CEconItemSchema::CreateEconStyleInfo()
 T CEconItemSchema::CreateEconToolImpl(char const*, char const*, char const*, item_capabilities_t, KeyValues*)
 T CEconItemSchema::CreateQuestDefinition()
 T CEconItemSchema::FindDefinitionPrefabByName(char const*) const
 T CEconItemSchema::GetAttributeControlledParticleSystem(int)
 T CEconItemSchema::GetAttributeDefinition(int)
 T CEconItemSchema::GetAttributeDefinitionByName(char const*)
 T CEconItemSchema::GetAttributeDefinitionByName(char const*) const
 T CEconItemSchema::GetColorDefinitionByName(char const*)
 T CEconItemSchema::GetCustomExpirationDate(char const*) const
 T CEconItemSchema::GetEquipTypeFromClassIndex(int) const
 T CEconItemSchema::GetHandleForTag(char const*)
 T CEconItemSchema::GetItemDefinition(int)
 T CEconItemSchema::GetItemDefinitionByName(char const*)
 T CEconItemSchema::GetItemLevelForScore(char const*, unsigned int) const
 T CEconItemSchema::GetItemSeriesDefinitionCount() const
 T CEconItemSchema::GetKillEaterScoreTypeAllowsBotVictims(unsigned int) const
 T CEconItemSchema::GetKillEaterScoreTypeLevelingDataName(unsigned int) const
 T CEconItemSchema::GetLootListByName(char const*, int*) const
 T CEconItemSchema::GetQuestObjectiveByDefIndex(int) const
 T CEconItemSchema::GetRarityColor(unsigned char)
 T CEconItemSchema::GetRarityDefinition(int) const
 T CEconItemSchema::GetRarityDefinitionByName(char const*) const
 T CEconItemSchema::GetRarityDefinitionCount() const
 T CEconItemSchema::GetRarityIndex(char const*)
 T CEconItemSchema::GetRarityLocKey(unsigned char)
 T CEconItemSchema::GetRarityName(unsigned char)
 T CEconItemSchema::ItemTesting_CreateTestDefinition(int, int, KeyValues*)
 T CEconItemSchema::ItemTesting_DiscardTestDefinition(int)
 T CEconItemSchema::MaybeInitFromBuffer(IDelayedSchemaData*)
 T CEconItemSchema::Reset()
 T CEconItemSchema::~CEconItemSchema()
 T CEconItemSeriesDefinition::BInitFromKV(KeyValues*, CUtlVector<CUtlString, CUtlMemory<CUtlString, int> >*)
 T CEconItemSeriesDefinition::CEconItemSeriesDefinition(CEconItemSeriesDefinition const&)
 T CEconItemSeriesDefinition::~CEconItemSeriesDefinition()
 T CEconItemSetDefinition::BInitFromKV(KeyValues*, CUtlVector<CUtlString, CUtlMemory<CUtlString, int> >*)
 T CEconItemSpecificAttributeIterator::OnIterateAttributeValue(CEconItemAttributeDefinition const*, CAttribute_DynamicRecipeComponent const&)
 T CEconItemSpecificAttributeIterator::OnIterateAttributeValue(CEconItemAttributeDefinition const*, CAttribute_ItemSlotCriteria const&)
 T CEconItemSpecificAttributeIterator::OnIterateAttributeValue(CEconItemAttributeDefinition const*, CAttribute_String const&)
 T CEconItemSpecificAttributeIterator::OnIterateAttributeValue(CEconItemAttributeDefinition const*, CAttribute_WorldItemPlacement const&)
 T CEconItemSpecificAttributeIterator::OnIterateAttributeValue(CEconItemAttributeDefinition const*, float)
 T CEconItemSpecificAttributeIterator::OnIterateAttributeValue(CEconItemAttributeDefinition const*, unsigned int)
 T CEconItemSpecificAttributeIterator::OnIterateAttributeValue(CEconItemAttributeDefinition const*, unsigned long long const&)
 T CEconItemSystem::GenerateBaseItem(baseitemcriteria_t*)
 T CEconItemSystem::GenerateRandomItem(CItemSelectionCriteria*, int*)
 T CEconItemSystem::Init()
 T CEconItemSystem::ParseItemSchemaFile(char const*)
 T CEconItemSystem::ReloadWhitelist()
 T CEconItemSystem::ResetAttribStringCache()
 T CEconItemSystem::~CEconItemSystem()
 T CEconItemView::CEconItemView()
 T CEconItemView::CEconItemView(CEconItemView const&)
 T CEconItemView::DestroyAllAttributes()
 T CEconItemView::GetAccountID() const
 T CEconItemView::GetAnimationSlot() const
 T CEconItemView::GetCustomDesc() const
 T CEconItemView::GetCustomName() const
 T CEconItemView::GetCustomPainkKitDefinition() const
 T CEconItemView::GetDataDescMap()
 T CEconItemView::GetDropType()
 T CEconItemView::GetExtraWearableModel() const
 T CEconItemView::GetExtraWearableViewModel() const
 T CEconItemView::GetFlags() const
 T CEconItemView::GetID() const
 T CEconItemView::GetInUse() const
 T CEconItemView::GetItemDefIndex() const
 T CEconItemView::GetItemDefinition() const
 T CEconItemView::GetItemLevel() const
 T CEconItemView::GetItemQuantity() const
 T CEconItemView::GetItemStyle() const
 T CEconItemView::GetModifiedRGBValue(bool)
 T CEconItemView::GetOrigin() const
 T CEconItemView::GetPlayerDisplayModel(int, int) const
 T CEconItemView::GetQuality() const
 T CEconItemView::GetQuantity() const
 T CEconItemView::GetSOCData() const
 T CEconItemView::GetSkin(int, bool) const
 T CEconItemView::GetStaticData() const
 T CEconItemView::GetStyle() const
 T CEconItemView::GetVisionFilteredDisplayModel() const
 T CEconItemView::GetWorldDisplayModel() const
 T CEconItemView::Init(int, int, int, unsigned int)
 T CEconItemView::InitNetworkedDynamicAttributesForDemos()
 T CEconItemView::IterateAttributes(IEconItemAttributeIterator*) const
 T CEconItemView::MarkDescriptionDirty()
 T CEconItemView::NetworkStateChanged()
 T CEconItemView::NetworkStateChanged(void*)
 T CEconItemView::NetworkVar_m_AttributeList::NetworkStateChanged()
 T CEconItemView::NetworkVar_m_AttributeList::NetworkStateChanged(void*)
 T CEconItemView::NetworkVar_m_NetworkedDynamicAttributesForDemos::NetworkStateChanged()
 T CEconItemView::NetworkVar_m_NetworkedDynamicAttributesForDemos::NetworkStateChanged(void*)
 T CEconItemView::operator=(CEconItemView const&)
 T CEconItemView::~CEconItemView()
 T CEconLootListDefinition::BInitFromKV(KeyValues*, CEconItemSchema&, CUtlVector<CUtlString, CUtlMemory<CUtlString, int> >*)
 T CEconLootListDefinition::BPublicListContents() const
 T CEconLootListDefinition::EnumerateUserFacingPotentialDrops(IEconLootList::IEconLootListIterator*) const
 T CEconLootListDefinition::GetLootListCollectionReference() const
 T CEconLootListDefinition::GetLootListFooterLocalizationKey() const
 T CEconLootListDefinition::GetLootListHeaderLocalizationKey() const
 T CEconLootListDefinition::~CEconLootListDefinition()
 T CEconOperationDefinition::BInitFromKV(KeyValues*, CUtlVector<CUtlString, CUtlMemory<CUtlString, int> >*)
 T CEconStyleInfo::BInitFromKV(KeyValues*, CUtlVector<CUtlString, CUtlMemory<CUtlString, int> >*)
 T CEconStyleInfo::CEconStyleInfo()
 T CEconStyleInfo::GeneratePrecacheModelStringsForStyle(CUtlVector<char const*, CUtlMemory<char const*, int> >*) const
 T CEconStyleInfo::~CEconStyleInfo()
 T CEconTool_AccountUpgradeToPremium::~CEconTool_AccountUpgradeToPremium()
 T CEconTool_BackpackExpander::BFinishInitialization()
 T CEconTool_BackpackExpander::~CEconTool_BackpackExpander()
 T CEconTool_ClaimCode::BFinishInitialization()
 T CEconTool_ClaimCode::~CEconTool_ClaimCode()
 T CEconTool_ClassTransmogrifier::BFinishInitialization()
 T CEconTool_ClassTransmogrifier::CEconTool_ClassTransmogrifier(char const*, char const*, item_capabilities_t, KeyValues*)
 T CEconTool_ClassTransmogrifier::CanApplyTo(IEconItemInterface const*, IEconItemInterface const*) const
 T CEconTool_ClassTransmogrifier::~CEconTool_ClassTransmogrifier()
 T CEconTool_CrateKey::~CEconTool_CrateKey()
 T CEconTool_CustomizeTexture::~CEconTool_CustomizeTexture()
 T CEconTool_Default::~CEconTool_Default()
 T CEconTool_DescTag::~CEconTool_DescTag()
 T CEconTool_DuckToken::CanApplyTo(IEconItemInterface const*, IEconItemInterface const*) const
 T CEconTool_DuckToken::~CEconTool_DuckToken()
 T CEconTool_DuelingMinigame::~CEconTool_DuelingMinigame()
 T CEconTool_Festivizer::CEconTool_Festivizer(char const*, char const*, item_capabilities_t, KeyValues*)
 T CEconTool_Festivizer::CanApplyTo(IEconItemInterface const*, IEconItemInterface const*) const
 T CEconTool_Festivizer::~CEconTool_Festivizer()
 T CEconTool_Gift::BFinishInitialization()
 T CEconTool_Gift::CEconTool_Gift(char const*, char const*, KeyValues*)
 T CEconTool_Gift::~CEconTool_Gift()
 T CEconTool_GiftWrap::BFinishInitialization()
 T CEconTool_GiftWrap::CEconTool_GiftWrap(char const*, char const*, item_capabilities_t, KeyValues*)
 T CEconTool_GiftWrap::CanApplyTo(IEconItemInterface const*, IEconItemInterface const*) const
 T CEconTool_GiftWrap::RequiresToolEscrowPeriod() const
 T CEconTool_GiftWrap::~CEconTool_GiftWrap()
 T CEconTool_GrantOperationPass::~CEconTool_GrantOperationPass()
 T CEconTool_ItemDynamicRecipe::BFinishInitialization()
 T CEconTool_ItemDynamicRecipe::BInitFromKV(KeyValues*, CUtlVector<CUtlString, CUtlMemory<CUtlString, int> >*)
 T CEconTool_ItemDynamicRecipe::CBaseRecipeComponent::BFinishInitialization_Internal(CUtlVector<CUtlString, CUtlMemory<CUtlString, int> >*, CUtlVector<CEconItemAttributeDefinition const*, CUtlMemory<CEconItemAttributeDefinition const*, int> >*)
 T CEconTool_ItemDynamicRecipe::CBaseRecipeComponent::ParseComponents(KeyValues*, CUtlVector<CEconTool_ItemDynamicRecipe::CBaseRecipeComponent*, CUtlMemory<CEconTool_ItemDynamicRecipe::CBaseRecipeComponent*, int> >&, bool, CUtlVector<CUtlString, CUtlMemory<CUtlString, int> >*, CEconTool_ItemDynamicRecipe::CBaseRecipeComponent const*)
 T CEconTool_ItemDynamicRecipe::CBaseRecipeComponent::ParseKV(KeyValues*, CUtlVector<CUtlString, CUtlMemory<CUtlString, int> >*)
 T CEconTool_ItemDynamicRecipe::CBaseRecipeComponent::~CBaseRecipeComponent()
 T CEconTool_ItemDynamicRecipe::CDynamicRecipeComponentDefinedItem::BFinishInitialization_Internal(CUtlVector<CUtlString, CUtlMemory<CUtlString, int> >*, CUtlVector<CEconItemAttributeDefinition const*, CUtlMemory<CEconItemAttributeDefinition const*, int> >*)
 T CEconTool_ItemDynamicRecipe::CDynamicRecipeComponentDefinedItem::ParseKV(KeyValues*, CUtlVector<CUtlString, CUtlMemory<CUtlString, int> >*)
 T CEconTool_ItemDynamicRecipe::CDynamicRecipeComponentDefinedItem::~CDynamicRecipeComponentDefinedItem()
 T CEconTool_ItemDynamicRecipe::CDynamicRecipeComponentLootList::BFinishInitialization_Internal(CUtlVector<CUtlString, CUtlMemory<CUtlString, int> >*, CUtlVector<CEconItemAttributeDefinition const*, CUtlMemory<CEconItemAttributeDefinition const*, int> >*)
 T CEconTool_ItemDynamicRecipe::CDynamicRecipeComponentLootList::ParseKV(KeyValues*, CUtlVector<CUtlString, CUtlMemory<CUtlString, int> >*)
 T CEconTool_ItemDynamicRecipe::CDynamicRecipeComponentLootList::~CDynamicRecipeComponentLootList()
 T CEconTool_ItemDynamicRecipe::CEconTool_ItemDynamicRecipe(char const*, char const*, item_capabilities_t, KeyValues*)
 T CEconTool_ItemDynamicRecipe::CanApplyTo(IEconItemInterface const*, IEconItemInterface const*) const
 T CEconTool_ItemDynamicRecipe::~CEconTool_ItemDynamicRecipe()
 T CEconTool_ItemEaterRecharger::CEconTool_ItemEaterRecharger(char const*, char const*, item_capabilities_t, KeyValues*)
 T CEconTool_ItemEaterRecharger::CanApplyTo(IEconItemInterface const*, IEconItemInterface const*) const
 T CEconTool_ItemEaterRecharger::~CEconTool_ItemEaterRecharger()
 T CEconTool_KillStreakifier::CanApplyTo(IEconItemInterface const*, IEconItemInterface const*) const
 T CEconTool_KillStreakifier::~CEconTool_KillStreakifier()
 T CEconTool_NameTag::~CEconTool_NameTag()
 T CEconTool_Noisemaker::~CEconTool_Noisemaker()
 T CEconTool_PaintCan::~CEconTool_PaintCan()
 T CEconTool_StrangeCountTransfer::CEconTool_StrangeCountTransfer(char const*, item_capabilities_t)
 T CEconTool_StrangeCountTransfer::~CEconTool_StrangeCountTransfer()
 T CEconTool_StrangePart::CEconTool_StrangePart(char const*, char const*, item_capabilities_t, KeyValues*)
 T CEconTool_StrangePart::CanApplyTo(IEconItemInterface const*, IEconItemInterface const*) const
 T CEconTool_StrangePart::~CEconTool_StrangePart()
 T CEconTool_StrangePartRestriction::BFinishInitialization()
 T CEconTool_StrangePartRestriction::CEconTool_StrangePartRestriction(char const*, char const*, item_capabilities_t, KeyValues*)
 T CEconTool_StrangePartRestriction::CanApplyTo(IEconItemInterface const*, IEconItemInterface const*) const
 T CEconTool_StrangePartRestriction::~CEconTool_StrangePartRestriction()
 T CEconTool_Strangifier::CanApplyTo(IEconItemInterface const*, IEconItemInterface const*) const
 T CEconTool_Strangifier::~CEconTool_Strangifier()
 T CEconTool_TFEventEnableHalloween::~CEconTool_TFEventEnableHalloween()
 T CEconTool_TFSpellbookPage::~CEconTool_TFSpellbookPage()
 T CEconTool_TagsList::CEconTool_TagsList(KeyValues*)
 T CEconTool_Unusualifier::CanApplyTo(IEconItemInterface const*, IEconItemInterface const*) const
 T CEconTool_Unusualifier::~CEconTool_Unusualifier()
 T CEconTool_UpgradeCard::BFinishInitialization()
 T CEconTool_UpgradeCard::CEconTool_UpgradeCard(char const*, char const*, item_capabilities_t, KeyValues*)
 T CEconTool_UpgradeCard::CanApplyTo(IEconItemInterface const*, IEconItemInterface const*) const
 T CEconTool_UpgradeCard::~CEconTool_UpgradeCard()
 T CEconTool_WeddingRing::RequiresToolEscrowPeriod() const
 T CEconTool_WeddingRing::~CEconTool_WeddingRing()
 T CEconTool_WrappedGift::BFinishInitialization()
 T CEconTool_WrappedGift::CEconTool_WrappedGift(char const*, char const*, item_capabilities_t, KeyValues*)
 T CEconTool_WrappedGift::~CEconTool_WrappedGift()
 T CEconTool_Xifier::CEconTool_Xifier(char const*, char const*, item_capabilities_t, KeyValues*)
 T CEconTool_Xifier::CanApplyTo(IEconItemInterface const*, IEconItemInterface const*) const
 T CEconTool_Xifier::~CEconTool_Xifier()
 T CEconWearable::CEconWearable()
 T CEconWearable::CanEquip(CBaseEntity*)
 T CEconWearable::Equip(CBasePlayer*)
 T CEconWearable::GetDataDescMap()
 T CEconWearable::GetDropType()
 T CEconWearable::GetServerClass()
 T CEconWearable::GetSkin()
 T CEconWearable::GiveTo(CBaseEntity*)
 T CEconWearable::InternalSetPlayerDisplayModel()
 T CEconWearable::IsViewModelWearable()
 T CEconWearable::IsWearable() const
 T CEconWearable::OnWearerDeath()
 T CEconWearable::RemoveFrom(CBaseEntity*)
 T CEconWearable::Spawn()
 T CEconWearable::UnEquip(CBasePlayer*)
 T CEconWearable::UpdateWearableBodyGroups(CBasePlayer*)
 T CEconWearable::YouForgotToImplementOrDeclareServerClass()
 T CEconWearable::~CEconWearable()
 T CEffectsServer::Beam(Vector const&, Vector const&, int, int, unsigned char, unsigned char, float, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)
 T CEffectsServer::Dust(Vector const&, Vector const&, float, float)
 T CEffectsServer::EnergySplash(Vector const&, Vector const&, bool)
 T CEffectsServer::IsServer()
 T CEffectsServer::MetalSparks(Vector const&, Vector const&)
 T CEffectsServer::MuzzleFlash(Vector const&, QAngle const&, float, int)
 T CEffectsServer::Ricochet(Vector const&, Vector const&)
 T CEffectsServer::Smoke(Vector const&, int, float, float)
 T CEffectsServer::Sparks(Vector const&, int, int, Vector const*)
 T CEffectsServer::SuppressEffectsSounds(bool)
 T CEffectsServer::Time()
 T CEffectsServer::~CEffectsServer()
 T CEmbers::EmberUse(CBaseEntity*, CBaseEntity*, USE_TYPE, float)
 T CEmbers::GetDataDescMap()
 T CEmbers::GetServerClass()
 T CEmbers::Precache()
 T CEmbers::Spawn()
 T CEmbers::YouForgotToImplementOrDeclareServerClass()
 T CEmbers::~CEmbers()
 T CEmptyConVar::GetName() const
 T CEmptyConVar::IsFlagSet(int) const
 T CEmptyConVar::SetValue(char const*)
 T CEmptyConVar::SetValue(float)
 T CEmptyConVar::SetValue(int)
 T CEmptyConVar::~CEmptyConVar()
 T CEnableMotionFixup::~CEnableMotionFixup()
 T CEnableTemporaryHalloweenIssue::BRecordVoteFailureEventForEntity(int) const
 T CEnableTemporaryHalloweenIssue::CanCallVote(int, char const*, vote_create_failed_t&, int&)
 T CEnableTemporaryHalloweenIssue::ExecuteCommand()
 T CEnableTemporaryHalloweenIssue::GetDisplayString()
 T CEnableTemporaryHalloweenIssue::GetVotePassedString()
 T CEnableTemporaryHalloweenIssue::IsEnabled()
 T CEnableTemporaryHalloweenIssue::IsYesNoVote()
 T CEnableTemporaryHalloweenIssue::ListIssueDetails(CBasePlayer*)
 T CEnableTemporaryHalloweenIssue::OnVoteFailed(int)
 T CEnableTemporaryHalloweenIssue::~CEnableTemporaryHalloweenIssue()
 T CEntFireAutoCompletionFunctor::CommandCallback(CCommand const&)
 T CEntFireAutoCompletionFunctor::CommandCompletionCallback(char const*, CUtlVector<CUtlString, CUtlMemory<CUtlString, int> >&)
 T CEntFireAutoCompletionFunctor::EntFire_AutoCompleteInput(char const*, CUtlVector<CUtlString, CUtlMemory<CUtlString, int> >&)
 T CEntityBird::Explode()
 T CEntityBird::OnTakeDamage(CTakeDamageInfo const&)
 T CEntityBird::Precache()
 T CEntityBird::Spawn()
 T CEntityBird::Touch(CBaseEntity*)
 T CEntityBird::~CEntityBird()
 T CEntityBlocker::Create(Vector const&, Vector const&, Vector const&, CBaseEntity*, bool)
 T CEntityBlocker::Spawn()
 T CEntityBlocker::TestCollision(Ray_t const&, unsigned int, CGameTrace&)
 T CEntityBlocker::~CEntityBlocker()
 T CEntityClassList<CPhysicsNPCSolver>::LevelShutdownPostEntity()
 T CEntityClassList<CPhysicsNPCSolver>::~CEntityClassList()
 T CEntityClassList<CPointCamera>::LevelShutdownPostEntity()
 T CEntityClassList<CPointCamera>::~CEntityClassList()
 T CEntityClassList<CSkyCamera>::LevelShutdownPostEntity()
 T CEntityClassList<CSkyCamera>::~CEntityClassList()
 T CEntityDataInstantiator<CWatcherList>::CompareFunc(CEntityDataInstantiator<CWatcherList>::HashEntry const&, CEntityDataInstantiator<CWatcherList>::HashEntry const&)
 T CEntityDataInstantiator<CWatcherList>::CreateDataObject(CBaseEntity const*)
 T CEntityDataInstantiator<CWatcherList>::DestroyDataObject(CBaseEntity const*)
 T CEntityDataInstantiator<CWatcherList>::GetDataObject(CBaseEntity const*)
 T CEntityDataInstantiator<CWatcherList>::KeyFunc(CEntityDataInstantiator<CWatcherList>::HashEntry const&)
 T CEntityDataInstantiator<CWatcherList>::~CEntityDataInstantiator()
 T CEntityDataInstantiator<ModelScale>::CompareFunc(CEntityDataInstantiator<ModelScale>::HashEntry const&, CEntityDataInstantiator<ModelScale>::HashEntry const&)
 T CEntityDataInstantiator<ModelScale>::CreateDataObject(CBaseEntity const*)
 T CEntityDataInstantiator<ModelScale>::DestroyDataObject(CBaseEntity const*)
 T CEntityDataInstantiator<ModelScale>::GetDataObject(CBaseEntity const*)
 T CEntityDataInstantiator<ModelScale>::KeyFunc(CEntityDataInstantiator<ModelScale>::HashEntry const&)
 T CEntityDataInstantiator<ModelScale>::~CEntityDataInstantiator()
 T CEntityDataInstantiator<StepSimulationData>::CompareFunc(CEntityDataInstantiator<StepSimulationData>::HashEntry const&, CEntityDataInstantiator<StepSimulationData>::HashEntry const&)
 T CEntityDataInstantiator<StepSimulationData>::CreateDataObject(CBaseEntity const*)
 T CEntityDataInstantiator<StepSimulationData>::DestroyDataObject(CBaseEntity const*)
 T CEntityDataInstantiator<StepSimulationData>::GetDataObject(CBaseEntity const*)
 T CEntityDataInstantiator<StepSimulationData>::KeyFunc(CEntityDataInstantiator<StepSimulationData>::HashEntry const&)
 T CEntityDataInstantiator<StepSimulationData>::~CEntityDataInstantiator()
 T CEntityDataInstantiator<groundlink_t>::CompareFunc(CEntityDataInstantiator<groundlink_t>::HashEntry const&, CEntityDataInstantiator<groundlink_t>::HashEntry const&)
 T CEntityDataInstantiator<groundlink_t>::CreateDataObject(CBaseEntity const*)
 T CEntityDataInstantiator<groundlink_t>::DestroyDataObject(CBaseEntity const*)
 T CEntityDataInstantiator<groundlink_t>::GetDataObject(CBaseEntity const*)
 T CEntityDataInstantiator<groundlink_t>::KeyFunc(CEntityDataInstantiator<groundlink_t>::HashEntry const&)
 T CEntityDataInstantiator<groundlink_t>::~CEntityDataInstantiator()
 T CEntityDataInstantiator<physicspushlist_t>::CompareFunc(CEntityDataInstantiator<physicspushlist_t>::HashEntry const&, CEntityDataInstantiator<physicspushlist_t>::HashEntry const&)
 T CEntityDataInstantiator<physicspushlist_t>::CreateDataObject(CBaseEntity const*)
 T CEntityDataInstantiator<physicspushlist_t>::DestroyDataObject(CBaseEntity const*)
 T CEntityDataInstantiator<physicspushlist_t>::GetDataObject(CBaseEntity const*)
 T CEntityDataInstantiator<physicspushlist_t>::KeyFunc(CEntityDataInstantiator<physicspushlist_t>::HashEntry const&)
 T CEntityDataInstantiator<physicspushlist_t>::~CEntityDataInstantiator()
 T CEntityDataInstantiator<touchlink_t>::CompareFunc(CEntityDataInstantiator<touchlink_t>::HashEntry const&, CEntityDataInstantiator<touchlink_t>::HashEntry const&)
 T CEntityDataInstantiator<touchlink_t>::CreateDataObject(CBaseEntity const*)
 T CEntityDataInstantiator<touchlink_t>::DestroyDataObject(CBaseEntity const*)
 T CEntityDataInstantiator<touchlink_t>::GetDataObject(CBaseEntity const*)
 T CEntityDataInstantiator<touchlink_t>::KeyFunc(CEntityDataInstantiator<touchlink_t>::HashEntry const&)
 T CEntityDataInstantiator<touchlink_t>::~CEntityDataInstantiator()
 T CEntityDataInstantiator<vphysicsupdateai_t>::CompareFunc(CEntityDataInstantiator<vphysicsupdateai_t>::HashEntry const&, CEntityDataInstantiator<vphysicsupdateai_t>::HashEntry const&)
 T CEntityDataInstantiator<vphysicsupdateai_t>::CreateDataObject(CBaseEntity const*)
 T CEntityDataInstantiator<vphysicsupdateai_t>::DestroyDataObject(CBaseEntity const*)
 T CEntityDataInstantiator<vphysicsupdateai_t>::GetDataObject(CBaseEntity const*)
 T CEntityDataInstantiator<vphysicsupdateai_t>::KeyFunc(CEntityDataInstantiator<vphysicsupdateai_t>::HashEntry const&)
 T CEntityDataInstantiator<vphysicsupdateai_t>::~CEntityDataInstantiator()
 T CEntityDissolve::CEntityDissolve()
 T CEntityDissolve::Create(CBaseEntity*, CBaseEntity*)
 T CEntityDissolve::Create(CBaseEntity*, char const*, float, int, bool*)
 T CEntityDissolve::DissolveThink()
 T CEntityDissolve::ElectrocuteThink()
 T CEntityDissolve::GetDataDescMap()
 T CEntityDissolve::GetServerClass()
 T CEntityDissolve::InputDissolve(inputdata_t&)
 T CEntityDissolve::Precache()
 T CEntityDissolve::SetStartTime(float)
 T CEntityDissolve::Spawn()
 T CEntityDissolve::YouForgotToImplementOrDeclareServerClass()
 T CEntityDissolve::~CEntityDissolve()
 T CEntityFactory<CAISound>::Create(char const*)
 T CEntityFactory<CAISound>::Destroy(IServerNetworkable*)
 T CEntityFactory<CAISound>::GetEntitySize()
 T CEntityFactory<CAI_AllySpeechManager>::Create(char const*)
 T CEntityFactory<CAI_AllySpeechManager>::Destroy(IServerNetworkable*)
 T CEntityFactory<CAI_AllySpeechManager>::GetEntitySize()
 T CEntityFactory<CAI_AssaultGoal>::Create(char const*)
 T CEntityFactory<CAI_AssaultGoal>::Destroy(IServerNetworkable*)
 T CEntityFactory<CAI_AssaultGoal>::GetEntitySize()
 T CEntityFactory<CAI_BattleLine>::Create(char const*)
 T CEntityFactory<CAI_BattleLine>::Destroy(IServerNetworkable*)
 T CEntityFactory<CAI_BattleLine>::GetEntitySize()
 T CEntityFactory<CAI_ChangeHintGroup>::Create(char const*)
 T CEntityFactory<CAI_ChangeHintGroup>::Destroy(IServerNetworkable*)
 T CEntityFactory<CAI_ChangeHintGroup>::GetEntitySize()
 T CEntityFactory<CAI_ChangeTarget>::Create(char const*)
 T CEntityFactory<CAI_ChangeTarget>::Destroy(IServerNetworkable*)
 T CEntityFactory<CAI_ChangeTarget>::GetEntitySize()
 T CEntityFactory<CAI_DynamicLink>::Create(char const*)
 T CEntityFactory<CAI_DynamicLink>::Destroy(IServerNetworkable*)
 T CEntityFactory<CAI_DynamicLink>::GetEntitySize()
 T CEntityFactory<CAI_DynamicLinkController>::Create(char const*)
 T CEntityFactory<CAI_DynamicLinkController>::Destroy(IServerNetworkable*)
 T CEntityFactory<CAI_DynamicLinkController>::GetEntitySize()
 T CEntityFactory<CAI_FollowGoal>::Create(char const*)
 T CEntityFactory<CAI_FollowGoal>::Destroy(IServerNetworkable*)
 T CEntityFactory<CAI_FollowGoal>::GetEntitySize()
 T CEntityFactory<CAI_Hint>::Create(char const*)
 T CEntityFactory<CAI_Hint>::Destroy(IServerNetworkable*)
 T CEntityFactory<CAI_Hint>::GetEntitySize()
 T CEntityFactory<CAI_LeadGoal>::Create(char const*)
 T CEntityFactory<CAI_LeadGoal>::Destroy(IServerNetworkable*)
 T CEntityFactory<CAI_LeadGoal>::GetEntitySize()
 T CEntityFactory<CAI_LeadGoal_Weapon>::Create(char const*)
 T CEntityFactory<CAI_LeadGoal_Weapon>::Destroy(IServerNetworkable*)
 T CEntityFactory<CAI_LeadGoal_Weapon>::GetEntitySize()
 T CEntityFactory<CAI_NetworkManager>::Create(char const*)
 T CEntityFactory<CAI_NetworkManager>::Destroy(IServerNetworkable*)
 T CEntityFactory<CAI_NetworkManager>::GetEntitySize()
 T CEntityFactory<CAI_RadialLinkController>::Create(char const*)
 T CEntityFactory<CAI_RadialLinkController>::Destroy(IServerNetworkable*)
 T CEntityFactory<CAI_RadialLinkController>::GetEntitySize()
 T CEntityFactory<CAI_Relationship>::Create(char const*)
 T CEntityFactory<CAI_Relationship>::Destroy(IServerNetworkable*)
 T CEntityFactory<CAI_Relationship>::GetEntitySize()
 T CEntityFactory<CAI_ScriptConditions>::Create(char const*)
 T CEntityFactory<CAI_ScriptConditions>::Destroy(IServerNetworkable*)
 T CEntityFactory<CAI_ScriptConditions>::GetEntitySize()
 T CEntityFactory<CAI_ScriptedSchedule>::Create(char const*)
 T CEntityFactory<CAI_ScriptedSchedule>::Destroy(IServerNetworkable*)
 T CEntityFactory<CAI_ScriptedSchedule>::GetEntitySize()
 T CEntityFactory<CAI_ScriptedSentence>::Create(char const*)
 T CEntityFactory<CAI_ScriptedSentence>::Destroy(IServerNetworkable*)
 T CEntityFactory<CAI_ScriptedSentence>::GetEntitySize()
 T CEntityFactory<CAI_ScriptedSequence>::Create(char const*)
 T CEntityFactory<CAI_ScriptedSequence>::Destroy(IServerNetworkable*)
 T CEntityFactory<CAI_ScriptedSequence>::GetEntitySize()
 T CEntityFactory<CAI_SpeechFilter>::Create(char const*)
 T CEntityFactory<CAI_SpeechFilter>::Destroy(IServerNetworkable*)
 T CEntityFactory<CAI_SpeechFilter>::GetEntitySize()
 T CEntityFactory<CAI_StandoffGoal>::Create(char const*)
 T CEntityFactory<CAI_StandoffGoal>::Destroy(IServerNetworkable*)
 T CEntityFactory<CAI_StandoffGoal>::GetEntitySize()
 T CEntityFactory<CAI_TestHull>::Create(char const*)
 T CEntityFactory<CAI_TestHull>::Destroy(IServerNetworkable*)
 T CEntityFactory<CAI_TestHull>::GetEntitySize()
 T CEntityFactory<CAchievementZone>::Create(char const*)
 T CEntityFactory<CAchievementZone>::Destroy(IServerNetworkable*)
 T CEntityFactory<CAchievementZone>::GetEntitySize()
 T CEntityFactory<CAmbientGeneric>::Create(char const*)
 T CEntityFactory<CAmbientGeneric>::Destroy(IServerNetworkable*)
 T CEntityFactory<CAmbientGeneric>::GetEntitySize()
 T CEntityFactory<CAmmoPack>::Create(char const*)
 T CEntityFactory<CAmmoPack>::Destroy(IServerNetworkable*)
 T CEntityFactory<CAmmoPack>::GetEntitySize()
 T CEntityFactory<CAmmoPackMedium>::Create(char const*)
 T CEntityFactory<CAmmoPackMedium>::Destroy(IServerNetworkable*)
 T CEntityFactory<CAmmoPackMedium>::GetEntitySize()
 T CEntityFactory<CAmmoPackSmall>::Create(char const*)
 T CEntityFactory<CAmmoPackSmall>::Destroy(IServerNetworkable*)
 T CEntityFactory<CAmmoPackSmall>::GetEntitySize()
 T CEntityFactory<CAreaPortal>::Create(char const*)
 T CEntityFactory<CAreaPortal>::Destroy(IServerNetworkable*)
 T CEntityFactory<CAreaPortal>::GetEntitySize()
 T CEntityFactory<CArenaLogic>::Create(char const*)
 T CEntityFactory<CArenaLogic>::Destroy(IServerNetworkable*)
 T CEntityFactory<CArenaLogic>::GetEntitySize()
 T CEntityFactory<CArmor>::Create(char const*)
 T CEntityFactory<CArmor>::Destroy(IServerNetworkable*)
 T CEntityFactory<CArmor>::GetEntitySize()
 T CEntityFactory<CAssaultPoint>::Create(char const*)
 T CEntityFactory<CAssaultPoint>::Destroy(IServerNetworkable*)
 T CEntityFactory<CAssaultPoint>::GetEntitySize()
 T CEntityFactory<CBallPlayerToucher>::Create(char const*)
 T CEntityFactory<CBallPlayerToucher>::Destroy(IServerNetworkable*)
 T CEntityFactory<CBallPlayerToucher>::GetEntitySize()
 T CEntityFactory<CBaseButton>::Create(char const*)
 T CEntityFactory<CBaseButton>::Destroy(IServerNetworkable*)
 T CEntityFactory<CBaseButton>::GetEntitySize()
 T CEntityFactory<CBaseDMStart>::Create(char const*)
 T CEntityFactory<CBaseDMStart>::Destroy(IServerNetworkable*)
 T CEntityFactory<CBaseDMStart>::GetEntitySize()
 T CEntityFactory<CBaseDoor>::Create(char const*)
 T CEntityFactory<CBaseDoor>::Destroy(IServerNetworkable*)
 T CEntityFactory<CBaseDoor>::GetEntitySize()
 T CEntityFactory<CBaseEntity>::Create(char const*)
 T CEntityFactory<CBaseEntity>::Destroy(IServerNetworkable*)
 T CEntityFactory<CBaseEntity>::GetEntitySize()
 T CEntityFactory<CBaseFilter>::Create(char const*)
 T CEntityFactory<CBaseFilter>::Destroy(IServerNetworkable*)
 T CEntityFactory<CBaseFilter>::GetEntitySize()
 T CEntityFactory<CBaseFlex>::Create(char const*)
 T CEntityFactory<CBaseFlex>::Destroy(IServerNetworkable*)
 T CEntityFactory<CBaseFlex>::GetEntitySize()
 T CEntityFactory<CBaseGrenade>::Create(char const*)
 T CEntityFactory<CBaseGrenade>::Destroy(IServerNetworkable*)
 T CEntityFactory<CBaseGrenade>::GetEntitySize()
 T CEntityFactory<CBaseGrenadeConcussion>::Create(char const*)
 T CEntityFactory<CBaseGrenadeConcussion>::Destroy(IServerNetworkable*)
 T CEntityFactory<CBaseGrenadeConcussion>::GetEntitySize()
 T CEntityFactory<CBaseGrenadeContact>::Create(char const*)
 T CEntityFactory<CBaseGrenadeContact>::Destroy(IServerNetworkable*)
 T CEntityFactory<CBaseGrenadeContact>::GetEntitySize()
 T CEntityFactory<CBaseGrenadeTimed>::Create(char const*)
 T CEntityFactory<CBaseGrenadeTimed>::Destroy(IServerNetworkable*)
 T CEntityFactory<CBaseGrenadeTimed>::GetEntitySize()
 T CEntityFactory<CBaseMoveBehavior>::Create(char const*)
 T CEntityFactory<CBaseMoveBehavior>::Destroy(IServerNetworkable*)
 T CEntityFactory<CBaseMoveBehavior>::GetEntitySize()
 T CEntityFactory<CBaseTrigger>::Create(char const*)
 T CEntityFactory<CBaseTrigger>::Destroy(IServerNetworkable*)
 T CEntityFactory<CBaseTrigger>::GetEntitySize()
 T CEntityFactory<CBaseViewModel>::Create(char const*)
 T CEntityFactory<CBaseViewModel>::Destroy(IServerNetworkable*)
 T CEntityFactory<CBaseViewModel>::GetEntitySize()
 T CEntityFactory<CBeam>::Create(char const*)
 T CEntityFactory<CBeam>::Destroy(IServerNetworkable*)
 T CEntityFactory<CBeam>::GetEntitySize()
 T CEntityFactory<CBlood>::Create(char const*)
 T CEntityFactory<CBlood>::Destroy(IServerNetworkable*)
 T CEntityFactory<CBlood>::GetEntitySize()
 T CEntityFactory<CBoneFollower>::Create(char const*)
 T CEntityFactory<CBoneFollower>::Destroy(IServerNetworkable*)
 T CEntityFactory<CBoneFollower>::GetEntitySize()
 T CEntityFactory<CBonusDuckPickup>::Create(char const*)
 T CEntityFactory<CBonusDuckPickup>::Destroy(IServerNetworkable*)
 T CEntityFactory<CBonusDuckPickup>::GetEntitySize()
 T CEntityFactory<CBonusPack>::Create(char const*)
 T CEntityFactory<CBonusPack>::Destroy(IServerNetworkable*)
 T CEntityFactory<CBonusPack>::GetEntitySize()
 T CEntityFactory<CBonusRoundLogic>::Create(char const*)
 T CEntityFactory<CBonusRoundLogic>::Destroy(IServerNetworkable*)
 T CEntityFactory<CBonusRoundLogic>::GetEntitySize()
 T CEntityFactory<CBotNPCArcher>::Create(char const*)
 T CEntityFactory<CBotNPCArcher>::Destroy(IServerNetworkable*)
 T CEntityFactory<CBotNPCArcher>::GetEntitySize()
 T CEntityFactory<CBotNPCDecoy>::Create(char const*)
 T CEntityFactory<CBotNPCDecoy>::Destroy(IServerNetworkable*)
 T CEntityFactory<CBotNPCDecoy>::GetEntitySize()
 T CEntityFactory<CBreakable>::Create(char const*)
 T CEntityFactory<CBreakable>::Destroy(IServerNetworkable*)
 T CEntityFactory<CBreakable>::GetEntitySize()
 T CEntityFactory<CBreakableSurface>::Create(char const*)
 T CEntityFactory<CBreakableSurface>::Destroy(IServerNetworkable*)
 T CEntityFactory<CBreakableSurface>::GetEntitySize()
 T CEntityFactory<CBubbling>::Create(char const*)
 T CEntityFactory<CBubbling>::Destroy(IServerNetworkable*)
 T CEntityFactory<CBubbling>::GetEntitySize()
 T CEntityFactory<CCPTimerLogic>::Create(char const*)
 T CEntityFactory<CCPTimerLogic>::Destroy(IServerNetworkable*)
 T CEntityFactory<CCPTimerLogic>::GetEntitySize()
 T CEntityFactory<CCaptureFlag>::Create(char const*)
 T CEntityFactory<CCaptureFlag>::Destroy(IServerNetworkable*)
 T CEntityFactory<CCaptureFlag>::GetEntitySize()
 T CEntityFactory<CCaptureFlagReturnIcon>::Create(char const*)
 T CEntityFactory<CCaptureFlagReturnIcon>::Destroy(IServerNetworkable*)
 T CEntityFactory<CCaptureFlagReturnIcon>::GetEntitySize()
 T CEntityFactory<CCaptureZone>::Create(char const*)
 T CEntityFactory<CCaptureZone>::Destroy(IServerNetworkable*)
 T CEntityFactory<CCaptureZone>::GetEntitySize()
 T CEntityFactory<CChangeClassZone>::Create(char const*)
 T CEntityFactory<CChangeClassZone>::Destroy(IServerNetworkable*)
 T CEntityFactory<CChangeClassZone>::GetEntitySize()
 T CEntityFactory<CChangeLevel>::Create(char const*)
 T CEntityFactory<CChangeLevel>::Destroy(IServerNetworkable*)
 T CEntityFactory<CChangeLevel>::GetEntitySize()
 T CEntityFactory<CColorCorrection>::Create(char const*)
 T CEntityFactory<CColorCorrection>::Destroy(IServerNetworkable*)
 T CEntityFactory<CColorCorrection>::GetEntitySize()
 T CEntityFactory<CColorCorrectionVolume>::Create(char const*)
 T CEntityFactory<CColorCorrectionVolume>::Destroy(IServerNetworkable*)
 T CEntityFactory<CColorCorrectionVolume>::GetEntitySize()
 T CEntityFactory<CCommentaryAuto>::Create(char const*)
 T CEntityFactory<CCommentaryAuto>::Destroy(IServerNetworkable*)
 T CEntityFactory<CCommentaryAuto>::GetEntitySize()
 T CEntityFactory<CCommentaryViewPosition>::Create(char const*)
 T CEntityFactory<CCommentaryViewPosition>::Destroy(IServerNetworkable*)
 T CEntityFactory<CCommentaryViewPosition>::GetEntitySize()
 T CEntityFactory<CCompetitiveLogic>::Create(char const*)
 T CEntityFactory<CCompetitiveLogic>::Destroy(IServerNetworkable*)
 T CEntityFactory<CCompetitiveLogic>::GetEntitySize()
 T CEntityFactory<CConstraintAnchor>::Create(char const*)
 T CEntityFactory<CConstraintAnchor>::Destroy(IServerNetworkable*)
 T CEntityFactory<CConstraintAnchor>::GetEntitySize()
 T CEntityFactory<CCredits>::Create(char const*)
 T CEntityFactory<CCredits>::Destroy(IServerNetworkable*)
 T CEntityFactory<CCredits>::GetEntitySize()
 T CEntityFactory<CCurrencyPack>::Create(char const*)
 T CEntityFactory<CCurrencyPack>::Destroy(IServerNetworkable*)
 T CEntityFactory<CCurrencyPack>::GetEntitySize()
 T CEntityFactory<CCurrencyPackCustom>::Create(char const*)
 T CEntityFactory<CCurrencyPackCustom>::Destroy(IServerNetworkable*)
 T CEntityFactory<CCurrencyPackCustom>::GetEntitySize()
 T CEntityFactory<CCurrencyPackMedium>::Create(char const*)
 T CEntityFactory<CCurrencyPackMedium>::Destroy(IServerNetworkable*)
 T CEntityFactory<CCurrencyPackMedium>::GetEntitySize()
 T CEntityFactory<CCurrencyPackSmall>::Create(char const*)
 T CEntityFactory<CCurrencyPackSmall>::Destroy(IServerNetworkable*)
 T CEntityFactory<CCurrencyPackSmall>::GetEntitySize()
 T CEntityFactory<CDebugHistory>::Create(char const*)
 T CEntityFactory<CDebugHistory>::Destroy(IServerNetworkable*)
 T CEntityFactory<CDebugHistory>::GetEntitySize()
 T CEntityFactory<CDecal>::Create(char const*)
 T CEntityFactory<CDecal>::Destroy(IServerNetworkable*)
 T CEntityFactory<CDecal>::GetEntitySize()
 T CEntityFactory<CDispenserTouchTrigger>::Create(char const*)
 T CEntityFactory<CDispenserTouchTrigger>::Destroy(IServerNetworkable*)
 T CEntityFactory<CDispenserTouchTrigger>::GetEntitySize()
 T CEntityFactory<CDynamicLight>::Create(char const*)
 T CEntityFactory<CDynamicLight>::Destroy(IServerNetworkable*)
 T CEntityFactory<CDynamicLight>::GetEntitySize()
 T CEntityFactory<CDynamicProp>::Create(char const*)
 T CEntityFactory<CDynamicProp>::Destroy(IServerNetworkable*)
 T CEntityFactory<CDynamicProp>::GetEntitySize()
 T CEntityFactory<CEconWearable>::Create(char const*)
 T CEntityFactory<CEconWearable>::Destroy(IServerNetworkable*)
 T CEntityFactory<CEconWearable>::GetEntitySize()
 T CEntityFactory<CEmbers>::Create(char const*)
 T CEntityFactory<CEmbers>::Destroy(IServerNetworkable*)
 T CEntityFactory<CEmbers>::GetEntitySize()
 T CEntityFactory<CEnableMotionFixup>::Create(char const*)
 T CEntityFactory<CEnableMotionFixup>::Destroy(IServerNetworkable*)
 T CEntityFactory<CEnableMotionFixup>::GetEntitySize()
 T CEntityFactory<CEntityBird>::Create(char const*)
 T CEntityFactory<CEntityBird>::Destroy(IServerNetworkable*)
 T CEntityFactory<CEntityBird>::GetEntitySize()
 T CEntityFactory<CEntityBlocker>::Create(char const*)
 T CEntityFactory<CEntityBlocker>::Destroy(IServerNetworkable*)
 T CEntityFactory<CEntityBlocker>::GetEntitySize()
 T CEntityFactory<CEntityDissolve>::Create(char const*)
 T CEntityFactory<CEntityDissolve>::Destroy(IServerNetworkable*)
 T CEntityFactory<CEntityDissolve>::GetEntitySize()
 T CEntityFactory<CEntityFlame>::Create(char const*)
 T CEntityFactory<CEntityFlame>::Destroy(IServerNetworkable*)
 T CEntityFactory<CEntityFlame>::GetEntitySize()
 T CEntityFactory<CEntityParticleTrail>::Create(char const*)
 T CEntityFactory<CEntityParticleTrail>::Destroy(IServerNetworkable*)
 T CEntityFactory<CEntityParticleTrail>::GetEntitySize()
 T CEntityFactory<CEntitySpawnManager>::Create(char const*)
 T CEntityFactory<CEntitySpawnManager>::Destroy(IServerNetworkable*)
 T CEntityFactory<CEntitySpawnManager>::GetEntitySize()
 T CEntityFactory<CEntitySpawnPoint>::Create(char const*)
 T CEntityFactory<CEntitySpawnPoint>::Destroy(IServerNetworkable*)
 T CEntityFactory<CEntitySpawnPoint>::GetEntitySize()
 T CEntityFactory<CEnvBeam>::Create(char const*)
 T CEntityFactory<CEnvBeam>::Destroy(IServerNetworkable*)
 T CEntityFactory<CEnvBeam>::GetEntitySize()
 T CEntityFactory<CEnvBeverage>::Create(char const*)
 T CEntityFactory<CEnvBeverage>::Destroy(IServerNetworkable*)
 T CEntityFactory<CEnvBeverage>::GetEntitySize()
 T CEntityFactory<CEnvDetailController>::Create(char const*)
 T CEntityFactory<CEnvDetailController>::Destroy(IServerNetworkable*)
 T CEntityFactory<CEnvDetailController>::GetEntitySize()
 T CEntityFactory<CEnvDustPuff>::Create(char const*)
 T CEntityFactory<CEnvDustPuff>::Destroy(IServerNetworkable*)
 T CEntityFactory<CEnvDustPuff>::GetEntitySize()
 T CEntityFactory<CEnvEffectsScript>::Create(char const*)
 T CEntityFactory<CEnvEffectsScript>::Destroy(IServerNetworkable*)
 T CEntityFactory<CEnvEffectsScript>::GetEntitySize()
 T CEntityFactory<CEnvEntityMaker>::Create(char const*)
 T CEntityFactory<CEnvEntityMaker>::Destroy(IServerNetworkable*)
 T CEntityFactory<CEnvEntityMaker>::GetEntitySize()
 T CEntityFactory<CEnvExplosion>::Create(char const*)
 T CEntityFactory<CEnvExplosion>::Destroy(IServerNetworkable*)
 T CEntityFactory<CEnvExplosion>::GetEntitySize()
 T CEntityFactory<CEnvFade>::Create(char const*)
 T CEntityFactory<CEnvFade>::Destroy(IServerNetworkable*)
 T CEntityFactory<CEnvFade>::GetEntitySize()
 T CEntityFactory<CEnvFireSensor>::Create(char const*)
 T CEntityFactory<CEnvFireSensor>::Destroy(IServerNetworkable*)
 T CEntityFactory<CEnvFireSensor>::GetEntitySize()
 T CEntityFactory<CEnvFireSource>::Create(char const*)
 T CEntityFactory<CEnvFireSource>::Destroy(IServerNetworkable*)
 T CEntityFactory<CEnvFireSource>::GetEntitySize()
 T CEntityFactory<CEnvFunnel>::Create(char const*)
 T CEntityFactory<CEnvFunnel>::Destroy(IServerNetworkable*)
 T CEntityFactory<CEnvFunnel>::GetEntitySize()
 T CEntityFactory<CEnvGlobal>::Create(char const*)
 T CEntityFactory<CEnvGlobal>::Destroy(IServerNetworkable*)
 T CEntityFactory<CEnvGlobal>::GetEntitySize()
 T CEntityFactory<CEnvGunfire>::Create(char const*)
 T CEntityFactory<CEnvGunfire>::Destroy(IServerNetworkable*)
 T CEntityFactory<CEnvGunfire>::GetEntitySize()
 T CEntityFactory<CEnvHudHint>::Create(char const*)
 T CEntityFactory<CEnvHudHint>::Destroy(IServerNetworkable*)
 T CEntityFactory<CEnvHudHint>::GetEntitySize()
 T CEntityFactory<CEnvLaser>::Create(char const*)
 T CEntityFactory<CEnvLaser>::Destroy(IServerNetworkable*)
 T CEntityFactory<CEnvLaser>::GetEntitySize()
 T CEntityFactory<CEnvLight>::Create(char const*)
 T CEntityFactory<CEnvLight>::Destroy(IServerNetworkable*)
 T CEntityFactory<CEnvLight>::GetEntitySize()
 T CEntityFactory<CEnvMicrophone>::Create(char const*)
 T CEntityFactory<CEnvMicrophone>::Destroy(IServerNetworkable*)
 T CEntityFactory<CEnvMicrophone>::GetEntitySize()
 T CEntityFactory<CEnvMuzzleFlash>::Create(char const*)
 T CEntityFactory<CEnvMuzzleFlash>::Destroy(IServerNetworkable*)
 T CEntityFactory<CEnvMuzzleFlash>::GetEntitySize()
 T CEntityFactory<CEnvParticleScript>::Create(char const*)
 T CEntityFactory<CEnvParticleScript>::Destroy(IServerNetworkable*)
 T CEntityFactory<CEnvParticleScript>::GetEntitySize()
 T CEntityFactory<CEnvPlayerSurfaceTrigger>::Create(char const*)
 T CEntityFactory<CEnvPlayerSurfaceTrigger>::Destroy(IServerNetworkable*)
 T CEntityFactory<CEnvPlayerSurfaceTrigger>::GetEntitySize()
 T CEntityFactory<CEnvProjectedTexture>::Create(char const*)
 T CEntityFactory<CEnvProjectedTexture>::Destroy(IServerNetworkable*)
 T CEntityFactory<CEnvProjectedTexture>::GetEntitySize()
 T CEntityFactory<CEnvQuadraticBeam>::Create(char const*)
 T CEntityFactory<CEnvQuadraticBeam>::Destroy(IServerNetworkable*)
 T CEntityFactory<CEnvQuadraticBeam>::GetEntitySize()
 T CEntityFactory<CEnvScreenEffect>::Create(char const*)
 T CEntityFactory<CEnvScreenEffect>::Destroy(IServerNetworkable*)
 T CEntityFactory<CEnvScreenEffect>::GetEntitySize()
 T CEntityFactory<CEnvScreenOverlay>::Create(char const*)
 T CEntityFactory<CEnvScreenOverlay>::Destroy(IServerNetworkable*)
 T CEntityFactory<CEnvScreenOverlay>::GetEntitySize()
 T CEntityFactory<CEnvShake>::Create(char const*)
 T CEntityFactory<CEnvShake>::Destroy(IServerNetworkable*)
 T CEntityFactory<CEnvShake>::GetEntitySize()
 T CEntityFactory<CEnvShooter>::Create(char const*)
 T CEntityFactory<CEnvShooter>::Destroy(IServerNetworkable*)
 T CEntityFactory<CEnvShooter>::GetEntitySize()
 T CEntityFactory<CEnvSoundscape>::Create(char const*)
 T CEntityFactory<CEnvSoundscape>::Destroy(IServerNetworkable*)
 T CEntityFactory<CEnvSoundscape>::GetEntitySize()
 T CEntityFactory<CEnvSoundscapeProxy>::Create(char const*)
 T CEntityFactory<CEnvSoundscapeProxy>::Destroy(IServerNetworkable*)
 T CEntityFactory<CEnvSoundscapeProxy>::GetEntitySize()
 T CEntityFactory<CEnvSoundscapeTriggerable>::Create(char const*)
 T CEntityFactory<CEnvSoundscapeTriggerable>::Destroy(IServerNetworkable*)
 T CEntityFactory<CEnvSoundscapeTriggerable>::GetEntitySize()
 T CEntityFactory<CEnvSpark>::Create(char const*)
 T CEntityFactory<CEnvSpark>::Destroy(IServerNetworkable*)
 T CEntityFactory<CEnvSpark>::GetEntitySize()
 T CEntityFactory<CEnvSplash>::Create(char const*)
 T CEntityFactory<CEnvSplash>::Destroy(IServerNetworkable*)
 T CEntityFactory<CEnvSplash>::GetEntitySize()
 T CEntityFactory<CEnvTonemapController>::Create(char const*)
 T CEntityFactory<CEnvTonemapController>::Destroy(IServerNetworkable*)
 T CEntityFactory<CEnvTonemapController>::GetEntitySize()
 T CEntityFactory<CEnvTracer>::Create(char const*)
 T CEntityFactory<CEnvTracer>::Destroy(IServerNetworkable*)
 T CEntityFactory<CEnvTracer>::GetEntitySize()
 T CEntityFactory<CEnvViewPunch>::Create(char const*)
 T CEntityFactory<CEnvViewPunch>::Destroy(IServerNetworkable*)
 T CEntityFactory<CEnvViewPunch>::GetEntitySize()
 T CEntityFactory<CEnvWind>::Create(char const*)
 T CEntityFactory<CEnvWind>::Destroy(IServerNetworkable*)
 T CEntityFactory<CEnvWind>::GetEntitySize()
 T CEntityFactory<CEnvZoom>::Create(char const*)
 T CEntityFactory<CEnvZoom>::Destroy(IServerNetworkable*)
 T CEntityFactory<CEnvZoom>::GetEntitySize()
 T CEntityFactory<CEventQueueSaveLoadProxy>::Create(char const*)
 T CEntityFactory<CEventQueueSaveLoadProxy>::Destroy(IServerNetworkable*)
 T CEntityFactory<CEventQueueSaveLoadProxy>::GetEntitySize()
 T CEntityFactory<CExtraMapEntity_Carrier>::Create(char const*)
 T CEntityFactory<CExtraMapEntity_Carrier>::Destroy(IServerNetworkable*)
 T CEntityFactory<CExtraMapEntity_Carrier>::GetEntitySize()
 T CEntityFactory<CExtraMapEntity_Rocket>::Create(char const*)
 T CEntityFactory<CExtraMapEntity_Rocket>::Destroy(IServerNetworkable*)
 T CEntityFactory<CExtraMapEntity_Rocket>::GetEntitySize()
 T CEntityFactory<CExtraMapEntity_Saucer>::Create(char const*)
 T CEntityFactory<CExtraMapEntity_Saucer>::Destroy(IServerNetworkable*)
 T CEntityFactory<CExtraMapEntity_Saucer>::GetEntitySize()
 T CEntityFactory<CExtraMapEntity_Sign>::Create(char const*)
 T CEntityFactory<CExtraMapEntity_Sign>::Destroy(IServerNetworkable*)
 T CEntityFactory<CExtraMapEntity_Sign>::GetEntitySize()
 T CEntityFactory<CEyeballBoss>::Create(char const*)
 T CEntityFactory<CEyeballBoss>::Destroy(IServerNetworkable*)
 T CEntityFactory<CEyeballBoss>::GetEntitySize()
 T CEntityFactory<CFilterClass>::Create(char const*)
 T CEntityFactory<CFilterClass>::Destroy(IServerNetworkable*)
 T CEntityFactory<CFilterClass>::GetEntitySize()
 T CEntityFactory<CFilterEnemy>::Create(char const*)
 T CEntityFactory<CFilterEnemy>::Destroy(IServerNetworkable*)
 T CEntityFactory<CFilterEnemy>::GetEntitySize()
 T CEntityFactory<CFilterMassGreater>::Create(char const*)
 T CEntityFactory<CFilterMassGreater>::Destroy(IServerNetworkable*)
 T CEntityFactory<CFilterMassGreater>::GetEntitySize()
 T CEntityFactory<CFilterMultiple>::Create(char const*)
 T CEntityFactory<CFilterMultiple>::Destroy(IServerNetworkable*)
 T CEntityFactory<CFilterMultiple>::GetEntitySize()
 T CEntityFactory<CFilterName>::Create(char const*)
 T CEntityFactory<CFilterName>::Destroy(IServerNetworkable*)
 T CEntityFactory<CFilterName>::GetEntitySize()
 T CEntityFactory<CFilterTFBotHasTag>::Create(char const*)
 T CEntityFactory<CFilterTFBotHasTag>::Destroy(IServerNetworkable*)
 T CEntityFactory<CFilterTFBotHasTag>::GetEntitySize()
 T CEntityFactory<CFilterTFCanCap>::Create(char const*)
 T CEntityFactory<CFilterTFCanCap>::Destroy(IServerNetworkable*)
 T CEntityFactory<CFilterTFCanCap>::GetEntitySize()
 T CEntityFactory<CFilterTFClass>::Create(char const*)
 T CEntityFactory<CFilterTFClass>::Destroy(IServerNetworkable*)
 T CEntityFactory<CFilterTFClass>::GetEntitySize()
 T CEntityFactory<CFilterTFCondition>::Create(char const*)
 T CEntityFactory<CFilterTFCondition>::Destroy(IServerNetworkable*)
 T CEntityFactory<CFilterTFCondition>::GetEntitySize()
 T CEntityFactory<CFilterTFTeam>::Create(char const*)
 T CEntityFactory<CFilterTFTeam>::Destroy(IServerNetworkable*)
 T CEntityFactory<CFilterTFTeam>::GetEntitySize()
 T CEntityFactory<CFire>::Create(char const*)
 T CEntityFactory<CFire>::Destroy(IServerNetworkable*)
 T CEntityFactory<CFire>::GetEntitySize()
 T CEntityFactory<CFireSmoke>::Create(char const*)
 T CEntityFactory<CFireSmoke>::Destroy(IServerNetworkable*)
 T CEntityFactory<CFireSmoke>::GetEntitySize()
 T CEntityFactory<CFireTrail>::Create(char const*)
 T CEntityFactory<CFireTrail>::Destroy(IServerNetworkable*)
 T CEntityFactory<CFireTrail>::GetEntitySize()
 T CEntityFactory<CFish>::Create(char const*)
 T CEntityFactory<CFish>::Destroy(IServerNetworkable*)
 T CEntityFactory<CFish>::GetEntitySize()
 T CEntityFactory<CFishPool>::Create(char const*)
 T CEntityFactory<CFishPool>::Destroy(IServerNetworkable*)
 T CEntityFactory<CFishPool>::GetEntitySize()
 T CEntityFactory<CFlagDetectionZone>::Create(char const*)
 T CEntityFactory<CFlagDetectionZone>::Destroy(IServerNetworkable*)
 T CEntityFactory<CFlagDetectionZone>::GetEntitySize()
 T CEntityFactory<CFlextalkActor>::Create(char const*)
 T CEntityFactory<CFlextalkActor>::Destroy(IServerNetworkable*)
 T CEntityFactory<CFlextalkActor>::GetEntitySize()
 T CEntityFactory<CFogController>::Create(char const*)
 T CEntityFactory<CFogController>::Destroy(IServerNetworkable*)
 T CEntityFactory<CFogController>::GetEntitySize()
 T CEntityFactory<CFuncAreaPortalWindow>::Create(char const*)
 T CEntityFactory<CFuncAreaPortalWindow>::Destroy(IServerNetworkable*)
 T CEntityFactory<CFuncAreaPortalWindow>::GetEntitySize()
 T CEntityFactory<CFuncBrush>::Create(char const*)
 T CEntityFactory<CFuncBrush>::Destroy(IServerNetworkable*)
 T CEntityFactory<CFuncBrush>::GetEntitySize()
 T CEntityFactory<CFuncConveyor>::Create(char const*)
 T CEntityFactory<CFuncConveyor>::Destroy(IServerNetworkable*)
 T CEntityFactory<CFuncConveyor>::GetEntitySize()
 T CEntityFactory<CFuncFlagAlertZone>::Create(char const*)
 T CEntityFactory<CFuncFlagAlertZone>::Destroy(IServerNetworkable*)
 T CEntityFactory<CFuncFlagAlertZone>::GetEntitySize()
 T CEntityFactory<CFuncForceField>::Create(char const*)
 T CEntityFactory<CFuncForceField>::Destroy(IServerNetworkable*)
 T CEntityFactory<CFuncForceField>::GetEntitySize()
 T CEntityFactory<CFuncIllusionary>::Create(char const*)
 T CEntityFactory<CFuncIllusionary>::Destroy(IServerNetworkable*)
 T CEntityFactory<CFuncIllusionary>::GetEntitySize()
 T CEntityFactory<CFuncLadder>::Create(char const*)
 T CEntityFactory<CFuncLadder>::Destroy(IServerNetworkable*)
 T CEntityFactory<CFuncLadder>::GetEntitySize()
 T CEntityFactory<CFuncLadderEndPoint>::Create(char const*)
 T CEntityFactory<CFuncLadderEndPoint>::Destroy(IServerNetworkable*)
 T CEntityFactory<CFuncLadderEndPoint>::GetEntitySize()
 T CEntityFactory<CFuncMonitor>::Create(char const*)
 T CEntityFactory<CFuncMonitor>::Destroy(IServerNetworkable*)
 T CEntityFactory<CFuncMonitor>::GetEntitySize()
 T CEntityFactory<CFuncMoveLinear>::Create(char const*)
 T CEntityFactory<CFuncMoveLinear>::Destroy(IServerNetworkable*)
 T CEntityFactory<CFuncMoveLinear>::GetEntitySize()
 T CEntityFactory<CFuncNavAvoid>::Create(char const*)
 T CEntityFactory<CFuncNavAvoid>::Destroy(IServerNetworkable*)
 T CEntityFactory<CFuncNavAvoid>::GetEntitySize()
 T CEntityFactory<CFuncNavBlocker>::Create(char const*)
 T CEntityFactory<CFuncNavBlocker>::Destroy(IServerNetworkable*)
 T CEntityFactory<CFuncNavBlocker>::GetEntitySize()
 T CEntityFactory<CFuncNavObstruction>::Create(char const*)
 T CEntityFactory<CFuncNavObstruction>::Destroy(IServerNetworkable*)
 T CEntityFactory<CFuncNavObstruction>::GetEntitySize()
 T CEntityFactory<CFuncNavPrefer>::Create(char const*)
 T CEntityFactory<CFuncNavPrefer>::Destroy(IServerNetworkable*)
 T CEntityFactory<CFuncNavPrefer>::GetEntitySize()
 T CEntityFactory<CFuncNavPrerequisite>::Create(char const*)
 T CEntityFactory<CFuncNavPrerequisite>::Destroy(IServerNetworkable*)
 T CEntityFactory<CFuncNavPrerequisite>::GetEntitySize()
 T CEntityFactory<CFuncNoBuild>::Create(char const*)
 T CEntityFactory<CFuncNoBuild>::Destroy(IServerNetworkable*)
 T CEntityFactory<CFuncNoBuild>::GetEntitySize()
 T CEntityFactory<CFuncOccluder>::Create(char const*)
 T CEntityFactory<CFuncOccluder>::Destroy(IServerNetworkable*)
 T CEntityFactory<CFuncOccluder>::GetEntitySize()
 T CEntityFactory<CFuncPasstimeGoal>::Create(char const*)
 T CEntityFactory<CFuncPasstimeGoal>::Destroy(IServerNetworkable*)
 T CEntityFactory<CFuncPasstimeGoal>::GetEntitySize()
 T CEntityFactory<CFuncPasstimeGoalieZone>::Create(char const*)
 T CEntityFactory<CFuncPasstimeGoalieZone>::Destroy(IServerNetworkable*)
 T CEntityFactory<CFuncPasstimeGoalieZone>::GetEntitySize()
 T CEntityFactory<CFuncPasstimeNoBallZone>::Create(char const*)
 T CEntityFactory<CFuncPasstimeNoBallZone>::Destroy(IServerNetworkable*)
 T CEntityFactory<CFuncPasstimeNoBallZone>::GetEntitySize()
 T CEntityFactory<CFuncPlat>::Create(char const*)
 T CEntityFactory<CFuncPlat>::Destroy(IServerNetworkable*)
 T CEntityFactory<CFuncPlat>::GetEntitySize()
 T CEntityFactory<CFuncPlatRot>::Create(char const*)
 T CEntityFactory<CFuncPlatRot>::Destroy(IServerNetworkable*)
 T CEntityFactory<CFuncPlatRot>::GetEntitySize()
 T CEntityFactory<CFuncReflectiveGlass>::Create(char const*)
 T CEntityFactory<CFuncReflectiveGlass>::Destroy(IServerNetworkable*)
 T CEntityFactory<CFuncReflectiveGlass>::GetEntitySize()
 T CEntityFactory<CFuncRespawnFlagZone>::Create(char const*)
 T CEntityFactory<CFuncRespawnFlagZone>::Destroy(IServerNetworkable*)
 T CEntityFactory<CFuncRespawnFlagZone>::GetEntitySize()
 T CEntityFactory<CFuncRespawnRoom>::Create(char const*)
 T CEntityFactory<CFuncRespawnRoom>::Destroy(IServerNetworkable*)
 T CEntityFactory<CFuncRespawnRoom>::GetEntitySize()
 T CEntityFactory<CFuncRespawnRoomVisualizer>::Create(char const*)
 T CEntityFactory<CFuncRespawnRoomVisualizer>::Destroy(IServerNetworkable*)
 T CEntityFactory<CFuncRespawnRoomVisualizer>::GetEntitySize()
 T CEntityFactory<CFuncRotating>::Create(char const*)
 T CEntityFactory<CFuncRotating>::Destroy(IServerNetworkable*)
 T CEntityFactory<CFuncRotating>::GetEntitySize()
 T CEntityFactory<CFuncSmokeVolume>::Create(char const*)
 T CEntityFactory<CFuncSmokeVolume>::Destroy(IServerNetworkable*)
 T CEntityFactory<CFuncSmokeVolume>::GetEntitySize()
 T CEntityFactory<CFuncSuggestedBuild>::Create(char const*)
 T CEntityFactory<CFuncSuggestedBuild>::Destroy(IServerNetworkable*)
 T CEntityFactory<CFuncSuggestedBuild>::GetEntitySize()
 T CEntityFactory<CFuncTankTrain>::Create(char const*)
 T CEntityFactory<CFuncTankTrain>::Destroy(IServerNetworkable*)
 T CEntityFactory<CFuncTankTrain>::GetEntitySize()
 T CEntityFactory<CFuncTrackAuto>::Create(char const*)
 T CEntityFactory<CFuncTrackAuto>::Destroy(IServerNetworkable*)
 T CEntityFactory<CFuncTrackAuto>::GetEntitySize()
 T CEntityFactory<CFuncTrackChange>::Create(char const*)
 T CEntityFactory<CFuncTrackChange>::Destroy(IServerNetworkable*)
 T CEntityFactory<CFuncTrackChange>::GetEntitySize()
 T CEntityFactory<CFuncTrackTrain>::Create(char const*)
 T CEntityFactory<CFuncTrackTrain>::Destroy(IServerNetworkable*)
 T CEntityFactory<CFuncTrackTrain>::GetEntitySize()
 T CEntityFactory<CFuncTrain>::Create(char const*)
 T CEntityFactory<CFuncTrain>::Destroy(IServerNetworkable*)
 T CEntityFactory<CFuncTrain>::GetEntitySize()
 T CEntityFactory<CFuncTrainControls>::Create(char const*)
 T CEntityFactory<CFuncTrainControls>::Destroy(IServerNetworkable*)
 T CEntityFactory<CFuncTrainControls>::GetEntitySize()
 T CEntityFactory<CFuncVPhysicsClip>::Create(char const*)
 T CEntityFactory<CFuncVPhysicsClip>::Destroy(IServerNetworkable*)
 T CEntityFactory<CFuncVPhysicsClip>::GetEntitySize()
 T CEntityFactory<CFuncVehicleClip>::Create(char const*)
 T CEntityFactory<CFuncVehicleClip>::Destroy(IServerNetworkable*)
 T CEntityFactory<CFuncVehicleClip>::GetEntitySize()
 T CEntityFactory<CFuncWall>::Create(char const*)
 T CEntityFactory<CFuncWall>::Destroy(IServerNetworkable*)
 T CEntityFactory<CFuncWall>::GetEntitySize()
 T CEntityFactory<CFuncWallToggle>::Create(char const*)
 T CEntityFactory<CFuncWallToggle>::Destroy(IServerNetworkable*)
 T CEntityFactory<CFuncWallToggle>::GetEntitySize()
 T CEntityFactory<CFunc_DustCloud>::Create(char const*)
 T CEntityFactory<CFunc_DustCloud>::Destroy(IServerNetworkable*)
 T CEntityFactory<CFunc_DustCloud>::GetEntitySize()
 T CEntityFactory<CFunc_DustMotes>::Create(char const*)
 T CEntityFactory<CFunc_DustMotes>::Destroy(IServerNetworkable*)
 T CEntityFactory<CFunc_DustMotes>::GetEntitySize()
 T CEntityFactory<CFunc_LOD>::Create(char const*)
 T CEntityFactory<CFunc_LOD>::Destroy(IServerNetworkable*)
 T CEntityFactory<CFunc_LOD>::GetEntitySize()
 T CEntityFactory<CGameEnd>::Create(char const*)
 T CEntityFactory<CGameEnd>::Destroy(IServerNetworkable*)
 T CEntityFactory<CGameEnd>::GetEntitySize()
 T CEntityFactory<CGameGibManager>::Create(char const*)
 T CEntityFactory<CGameGibManager>::Destroy(IServerNetworkable*)
 T CEntityFactory<CGameGibManager>::GetEntitySize()
 T CEntityFactory<CGamePlayerEquip>::Create(char const*)
 T CEntityFactory<CGamePlayerEquip>::Destroy(IServerNetworkable*)
 T CEntityFactory<CGamePlayerEquip>::GetEntitySize()
 T CEntityFactory<CGamePlayerTeam>::Create(char const*)
 T CEntityFactory<CGamePlayerTeam>::Destroy(IServerNetworkable*)
 T CEntityFactory<CGamePlayerTeam>::GetEntitySize()
 T CEntityFactory<CGamePlayerZone>::Create(char const*)
 T CEntityFactory<CGamePlayerZone>::Destroy(IServerNetworkable*)
 T CEntityFactory<CGamePlayerZone>::GetEntitySize()
 T CEntityFactory<CGameScore>::Create(char const*)
 T CEntityFactory<CGameScore>::Destroy(IServerNetworkable*)
 T CEntityFactory<CGameScore>::GetEntitySize()
 T CEntityFactory<CGameText>::Create(char const*)
 T CEntityFactory<CGameText>::Destroy(IServerNetworkable*)
 T CEntityFactory<CGameText>::GetEntitySize()
 T CEntityFactory<CGameUI>::Create(char const*)
 T CEntityFactory<CGameUI>::Destroy(IServerNetworkable*)
 T CEntityFactory<CGameUI>::GetEntitySize()
 T CEntityFactory<CGameWeaponManager>::Create(char const*)
 T CEntityFactory<CGameWeaponManager>::Destroy(IServerNetworkable*)
 T CEntityFactory<CGameWeaponManager>::GetEntitySize()
 T CEntityFactory<CGenericActor>::Create(char const*)
 T CEntityFactory<CGenericActor>::Destroy(IServerNetworkable*)
 T CEntityFactory<CGenericActor>::GetEntitySize()
 T CEntityFactory<CGenericFlexCycler>::Create(char const*)
 T CEntityFactory<CGenericFlexCycler>::Destroy(IServerNetworkable*)
 T CEntityFactory<CGenericFlexCycler>::GetEntitySize()
 T CEntityFactory<CGenericNPC>::Create(char const*)
 T CEntityFactory<CGenericNPC>::Destroy(IServerNetworkable*)
 T CEntityFactory<CGenericNPC>::GetEntitySize()
 T CEntityFactory<CGhost>::Create(char const*)
 T CEntityFactory<CGhost>::Destroy(IServerNetworkable*)
 T CEntityFactory<CGhost>::GetEntitySize()
 T CEntityFactory<CGib>::Create(char const*)
 T CEntityFactory<CGib>::Destroy(IServerNetworkable*)
 T CEntityFactory<CGib>::GetEntitySize()
 T CEntityFactory<CGibShooter>::Create(char const*)
 T CEntityFactory<CGibShooter>::Destroy(IServerNetworkable*)
 T CEntityFactory<CGibShooter>::GetEntitySize()
 T CEntityFactory<CGunTarget>::Create(char const*)
 T CEntityFactory<CGunTarget>::Destroy(IServerNetworkable*)
 T CEntityFactory<CGunTarget>::GetEntitySize()
 T CEntityFactory<CHalloweenGiftPickup>::Create(char const*)
 T CEntityFactory<CHalloweenGiftPickup>::Destroy(IServerNetworkable*)
 T CEntityFactory<CHalloweenGiftPickup>::GetEntitySize()
 T CEntityFactory<CHalloweenGiftSpawnLocation>::Create(char const*)
 T CEntityFactory<CHalloweenGiftSpawnLocation>::Destroy(IServerNetworkable*)
 T CEntityFactory<CHalloweenGiftSpawnLocation>::GetEntitySize()
 T CEntityFactory<CHalloweenPickup>::Create(char const*)
 T CEntityFactory<CHalloweenPickup>::Destroy(IServerNetworkable*)
 T CEntityFactory<CHalloweenPickup>::GetEntitySize()
 T CEntityFactory<CHalloweenSoulPack>::Create(char const*)
 T CEntityFactory<CHalloweenSoulPack>::Destroy(IServerNetworkable*)
 T CEntityFactory<CHalloweenSoulPack>::GetEntitySize()
 T CEntityFactory<CHandleDummy>::Create(char const*)
 T CEntityFactory<CHandleDummy>::Destroy(IServerNetworkable*)
 T CEntityFactory<CHandleDummy>::GetEntitySize()
 T CEntityFactory<CHandleTest>::Create(char const*)
 T CEntityFactory<CHandleTest>::Destroy(IServerNetworkable*)
 T CEntityFactory<CHandleTest>::GetEntitySize()
 T CEntityFactory<CHeadlessHatman>::Create(char const*)
 T CEntityFactory<CHeadlessHatman>::Destroy(IServerNetworkable*)
 T CEntityFactory<CHeadlessHatman>::GetEntitySize()
 T CEntityFactory<CHealthAmmoKit>::Create(char const*)
 T CEntityFactory<CHealthAmmoKit>::Destroy(IServerNetworkable*)
 T CEntityFactory<CHealthAmmoKit>::GetEntitySize()
 T CEntityFactory<CHealthKit>::Create(char const*)
 T CEntityFactory<CHealthKit>::Destroy(IServerNetworkable*)
 T CEntityFactory<CHealthKit>::GetEntitySize()
 T CEntityFactory<CHealthKitMedium>::Create(char const*)
 T CEntityFactory<CHealthKitMedium>::Destroy(IServerNetworkable*)
 T CEntityFactory<CHealthKitMedium>::GetEntitySize()
 T CEntityFactory<CHealthKitSmall>::Create(char const*)
 T CEntityFactory<CHealthKitSmall>::Destroy(IServerNetworkable*)
 T CEntityFactory<CHealthKitSmall>::GetEntitySize()
 T CEntityFactory<CHightower_TeleportVortex>::Create(char const*)
 T CEntityFactory<CHightower_TeleportVortex>::Destroy(IServerNetworkable*)
 T CEntityFactory<CHightower_TeleportVortex>::GetEntitySize()
 T CEntityFactory<CHybridMap_CTF_CP>::Create(char const*)
 T CEntityFactory<CHybridMap_CTF_CP>::Destroy(IServerNetworkable*)
 T CEntityFactory<CHybridMap_CTF_CP>::GetEntitySize()
 T CEntityFactory<CInfoCameraLink>::Create(char const*)
 T CEntityFactory<CInfoCameraLink>::Destroy(IServerNetworkable*)
 T CEntityFactory<CInfoCameraLink>::GetEntitySize()
 T CEntityFactory<CInfoIntermission>::Create(char const*)
 T CEntityFactory<CInfoIntermission>::Destroy(IServerNetworkable*)
 T CEntityFactory<CInfoIntermission>::GetEntitySize()
 T CEntityFactory<CInfoLadderDismount>::Create(char const*)
 T CEntityFactory<CInfoLadderDismount>::Destroy(IServerNetworkable*)
 T CEntityFactory<CInfoLadderDismount>::GetEntitySize()
 T CEntityFactory<CInfoLightingRelative>::Create(char const*)
 T CEntityFactory<CInfoLightingRelative>::Destroy(IServerNetworkable*)
 T CEntityFactory<CInfoLightingRelative>::GetEntitySize()
 T CEntityFactory<CInfoMassCenter>::Create(char const*)
 T CEntityFactory<CInfoMassCenter>::Destroy(IServerNetworkable*)
 T CEntityFactory<CInfoMassCenter>::GetEntitySize()
 T CEntityFactory<CInfoOverlayAccessor>::Create(char const*)
 T CEntityFactory<CInfoOverlayAccessor>::Destroy(IServerNetworkable*)
 T CEntityFactory<CInfoOverlayAccessor>::GetEntitySize()
 T CEntityFactory<CInfoTarget>::Create(char const*)
 T CEntityFactory<CInfoTarget>::Destroy(IServerNetworkable*)
 T CEntityFactory<CInfoTarget>::GetEntitySize()
 T CEntityFactory<CInstancedSceneEntity>::Create(char const*)
 T CEntityFactory<CInstancedSceneEntity>::Destroy(IServerNetworkable*)
 T CEntityFactory<CInstancedSceneEntity>::GetEntitySize()
 T CEntityFactory<CIntroViewpoint>::Create(char const*)
 T CEntityFactory<CIntroViewpoint>::Destroy(IServerNetworkable*)
 T CEntityFactory<CIntroViewpoint>::GetEntitySize()
 T CEntityFactory<CItemSoda>::Create(char const*)
 T CEntityFactory<CItemSoda>::Destroy(IServerNetworkable*)
 T CEntityFactory<CItemSoda>::GetEntitySize()
 T CEntityFactory<CKeepUpright>::Create(char const*)
 T CEntityFactory<CKeepUpright>::Destroy(IServerNetworkable*)
 T CEntityFactory<CKeepUpright>::GetEntitySize()
 T CEntityFactory<CKothLogic>::Create(char const*)
 T CEntityFactory<CKothLogic>::Destroy(IServerNetworkable*)
 T CEntityFactory<CKothLogic>::GetEntitySize()
 T CEntityFactory<CLaserDot>::Create(char const*)
 T CEntityFactory<CLaserDot>::Destroy(IServerNetworkable*)
 T CEntityFactory<CLaserDot>::GetEntitySize()
 T CEntityFactory<CLight>::Create(char const*)
 T CEntityFactory<CLight>::Destroy(IServerNetworkable*)
 T CEntityFactory<CLight>::GetEntitySize()
 T CEntityFactory<CLightGlow>::Create(char const*)
 T CEntityFactory<CLightGlow>::Destroy(IServerNetworkable*)
 T CEntityFactory<CLightGlow>::GetEntitySize()
 T CEntityFactory<CLogicActiveAutosave>::Create(char const*)
 T CEntityFactory<CLogicActiveAutosave>::Destroy(IServerNetworkable*)
 T CEntityFactory<CLogicActiveAutosave>::GetEntitySize()
 T CEntityFactory<CLogicAuto>::Create(char const*)
 T CEntityFactory<CLogicAuto>::Destroy(IServerNetworkable*)
 T CEntityFactory<CLogicAuto>::GetEntitySize()
 T CEntityFactory<CLogicAutosave>::Create(char const*)
 T CEntityFactory<CLogicAutosave>::Destroy(IServerNetworkable*)
 T CEntityFactory<CLogicAutosave>::GetEntitySize()
 T CEntityFactory<CLogicBranch>::Create(char const*)
 T CEntityFactory<CLogicBranch>::Destroy(IServerNetworkable*)
 T CEntityFactory<CLogicBranch>::GetEntitySize()
 T CEntityFactory<CLogicBranchList>::Create(char const*)
 T CEntityFactory<CLogicBranchList>::Destroy(IServerNetworkable*)
 T CEntityFactory<CLogicBranchList>::GetEntitySize()
 T CEntityFactory<CLogicCase>::Create(char const*)
 T CEntityFactory<CLogicCase>::Destroy(IServerNetworkable*)
 T CEntityFactory<CLogicCase>::GetEntitySize()
 T CEntityFactory<CLogicCollisionPair>::Create(char const*)
 T CEntityFactory<CLogicCollisionPair>::Destroy(IServerNetworkable*)
 T CEntityFactory<CLogicCollisionPair>::GetEntitySize()
 T CEntityFactory<CLogicCompare>::Create(char const*)
 T CEntityFactory<CLogicCompare>::Destroy(IServerNetworkable*)
 T CEntityFactory<CLogicCompare>::GetEntitySize()
 T CEntityFactory<CLogicCompareInteger>::Create(char const*)
 T CEntityFactory<CLogicCompareInteger>::Destroy(IServerNetworkable*)
 T CEntityFactory<CLogicCompareInteger>::GetEntitySize()
 T CEntityFactory<CLogicLineToEntity>::Create(char const*)
 T CEntityFactory<CLogicLineToEntity>::Destroy(IServerNetworkable*)
 T CEntityFactory<CLogicLineToEntity>::GetEntitySize()
 T CEntityFactory<CLogicMannPower>::Create(char const*)
 T CEntityFactory<CLogicMannPower>::Destroy(IServerNetworkable*)
 T CEntityFactory<CLogicMannPower>::GetEntitySize()
 T CEntityFactory<CLogicMeasureMovement>::Create(char const*)
 T CEntityFactory<CLogicMeasureMovement>::Destroy(IServerNetworkable*)
 T CEntityFactory<CLogicMeasureMovement>::GetEntitySize()
 T CEntityFactory<CLogicNavigation>::Create(char const*)
 T CEntityFactory<CLogicNavigation>::Destroy(IServerNetworkable*)
 T CEntityFactory<CLogicNavigation>::GetEntitySize()
 T CEntityFactory<CLogicOnHoliday>::Create(char const*)
 T CEntityFactory<CLogicOnHoliday>::Destroy(IServerNetworkable*)
 T CEntityFactory<CLogicOnHoliday>::GetEntitySize()
 T CEntityFactory<CLogicRelay>::Create(char const*)
 T CEntityFactory<CLogicRelay>::Destroy(IServerNetworkable*)
 T CEntityFactory<CLogicRelay>::GetEntitySize()
 T CEntityFactory<CMannVsMachineLogic>::Create(char const*)
 T CEntityFactory<CMannVsMachineLogic>::Destroy(IServerNetworkable*)
 T CEntityFactory<CMannVsMachineLogic>::GetEntitySize()
 T CEntityFactory<CMannVsMachineStats>::Create(char const*)
 T CEntityFactory<CMannVsMachineStats>::Destroy(IServerNetworkable*)
 T CEntityFactory<CMannVsMachineStats>::GetEntitySize()
 T CEntityFactory<CMaterialModifyControl>::Create(char const*)
 T CEntityFactory<CMaterialModifyControl>::Destroy(IServerNetworkable*)
 T CEntityFactory<CMaterialModifyControl>::GetEntitySize()
 T CEntityFactory<CMathColorBlend>::Create(char const*)
 T CEntityFactory<CMathColorBlend>::Destroy(IServerNetworkable*)
 T CEntityFactory<CMathColorBlend>::GetEntitySize()
 T CEntityFactory<CMathCounter>::Create(char const*)
 T CEntityFactory<CMathCounter>::Destroy(IServerNetworkable*)
 T CEntityFactory<CMathCounter>::GetEntitySize()
 T CEntityFactory<CMathRemap>::Create(char const*)
 T CEntityFactory<CMathRemap>::Destroy(IServerNetworkable*)
 T CEntityFactory<CMathRemap>::GetEntitySize()
 T CEntityFactory<CMedievalLogic>::Create(char const*)
 T CEntityFactory<CMedievalLogic>::Destroy(IServerNetworkable*)
 T CEntityFactory<CMedievalLogic>::GetEntitySize()
 T CEntityFactory<CMerasmus>::Create(char const*)
 T CEntityFactory<CMerasmus>::Destroy(IServerNetworkable*)
 T CEntityFactory<CMerasmus>::GetEntitySize()
 T CEntityFactory<CMerasmusDancer>::Create(char const*)
 T CEntityFactory<CMerasmusDancer>::Destroy(IServerNetworkable*)
 T CEntityFactory<CMerasmusDancer>::GetEntitySize()
 T CEntityFactory<CMessage>::Create(char const*)
 T CEntityFactory<CMessage>::Destroy(IServerNetworkable*)
 T CEntityFactory<CMessage>::GetEntitySize()
 T CEntityFactory<CMessageEntity>::Create(char const*)
 T CEntityFactory<CMessageEntity>::Destroy(IServerNetworkable*)
 T CEntityFactory<CMessageEntity>::GetEntitySize()
 T CEntityFactory<CMomentaryRotButton>::Create(char const*)
 T CEntityFactory<CMomentaryRotButton>::Destroy(IServerNetworkable*)
 T CEntityFactory<CMomentaryRotButton>::GetEntitySize()
 T CEntityFactory<CMonsterResource>::Create(char const*)
 T CEntityFactory<CMonsterResource>::Destroy(IServerNetworkable*)
 T CEntityFactory<CMonsterResource>::GetEntitySize()
 T CEntityFactory<CMovementSpeedMod>::Create(char const*)
 T CEntityFactory<CMovementSpeedMod>::Destroy(IServerNetworkable*)
 T CEntityFactory<CMovementSpeedMod>::GetEntitySize()
 T CEntityFactory<CMultiSource>::Create(char const*)
 T CEntityFactory<CMultiSource>::Destroy(IServerNetworkable*)
 T CEntityFactory<CMultiSource>::GetEntitySize()
 T CEntityFactory<CMultipleEscort>::Create(char const*)
 T CEntityFactory<CMultipleEscort>::Destroy(IServerNetworkable*)
 T CEntityFactory<CMultipleEscort>::GetEntitySize()
 T CEntityFactory<CNPCMaker>::Create(char const*)
 T CEntityFactory<CNPCMaker>::Destroy(IServerNetworkable*)
 T CEntityFactory<CNPCMaker>::GetEntitySize()
 T CEntityFactory<CNPCSpawnDestination>::Create(char const*)
 T CEntityFactory<CNPCSpawnDestination>::Destroy(IServerNetworkable*)
 T CEntityFactory<CNPCSpawnDestination>::GetEntitySize()
 T CEntityFactory<CNPC_Furniture>::Create(char const*)
 T CEntityFactory<CNPC_Furniture>::Destroy(IServerNetworkable*)
 T CEntityFactory<CNPC_Furniture>::GetEntitySize()
 T CEntityFactory<CNPC_VehicleDriver>::Create(char const*)
 T CEntityFactory<CNPC_VehicleDriver>::Destroy(IServerNetworkable*)
 T CEntityFactory<CNPC_VehicleDriver>::GetEntitySize()
 T CEntityFactory<CNoGrenadesZone>::Create(char const*)
 T CEntityFactory<CNoGrenadesZone>::Destroy(IServerNetworkable*)
 T CEntityFactory<CNoGrenadesZone>::GetEntitySize()
 T CEntityFactory<CNodeEnt>::Create(char const*)
 T CEntityFactory<CNodeEnt>::Destroy(IServerNetworkable*)
 T CEntityFactory<CNodeEnt>::GetEntitySize()
 T CEntityFactory<CNullEntity>::Create(char const*)
 T CEntityFactory<CNullEntity>::Destroy(IServerNetworkable*)
 T CEntityFactory<CNullEntity>::GetEntitySize()
 T CEntityFactory<CObjectCartDispenser>::Create(char const*)
 T CEntityFactory<CObjectCartDispenser>::Destroy(IServerNetworkable*)
 T CEntityFactory<CObjectCartDispenser>::GetEntitySize()
 T CEntityFactory<CObjectDispenser>::Create(char const*)
 T CEntityFactory<CObjectDispenser>::Destroy(IServerNetworkable*)
 T CEntityFactory<CObjectDispenser>::GetEntitySize()
 T CEntityFactory<CObjectSapper>::Create(char const*)
 T CEntityFactory<CObjectSapper>::Destroy(IServerNetworkable*)
 T CEntityFactory<CObjectSapper>::GetEntitySize()
 T CEntityFactory<CObjectSentrygun>::Create(char const*)
 T CEntityFactory<CObjectSentrygun>::Destroy(IServerNetworkable*)
 T CEntityFactory<CObjectSentrygun>::GetEntitySize()
 T CEntityFactory<CObjectTeleporter>::Create(char const*)
 T CEntityFactory<CObjectTeleporter>::Destroy(IServerNetworkable*)
 T CEntityFactory<CObjectTeleporter>::GetEntitySize()
 T CEntityFactory<CObserverPoint>::Create(char const*)
 T CEntityFactory<CObserverPoint>::Destroy(IServerNetworkable*)
 T CEntityFactory<CObserverPoint>::GetEntitySize()
 T CEntityFactory<COrnamentProp>::Create(char const*)
 T CEntityFactory<COrnamentProp>::Destroy(IServerNetworkable*)
 T CEntityFactory<COrnamentProp>::GetEntitySize()
 T CEntityFactory<CParticleFire>::Create(char const*)
 T CEntityFactory<CParticleFire>::Destroy(IServerNetworkable*)
 T CEntityFactory<CParticleFire>::GetEntitySize()
 T CEntityFactory<CParticleLight>::Create(char const*)
 T CEntityFactory<CParticleLight>::Destroy(IServerNetworkable*)
 T CEntityFactory<CParticleLight>::GetEntitySize()
 T CEntityFactory<CParticlePerformanceMonitor>::Create(char const*)
 T CEntityFactory<CParticlePerformanceMonitor>::Destroy(IServerNetworkable*)
 T CEntityFactory<CParticlePerformanceMonitor>::GetEntitySize()
 T CEntityFactory<CParticleSystem>::Create(char const*)
 T CEntityFactory<CParticleSystem>::Destroy(IServerNetworkable*)
 T CEntityFactory<CParticleSystem>::GetEntitySize()
 T CEntityFactory<CPasstimeBall>::Create(char const*)
 T CEntityFactory<CPasstimeBall>::Destroy(IServerNetworkable*)
 T CEntityFactory<CPasstimeBall>::GetEntitySize()
 T CEntityFactory<CPasstimeBallSpawn>::Create(char const*)
 T CEntityFactory<CPasstimeBallSpawn>::Destroy(IServerNetworkable*)
 T CEntityFactory<CPasstimeBallSpawn>::GetEntitySize()
 T CEntityFactory<CPasstimeGun>::Create(char const*)
 T CEntityFactory<CPasstimeGun>::Destroy(IServerNetworkable*)
 T CEntityFactory<CPasstimeGun>::GetEntitySize()
 T CEntityFactory<CPathCorner>::Create(char const*)
 T CEntityFactory<CPathCorner>::Destroy(IServerNetworkable*)
 T CEntityFactory<CPathCorner>::GetEntitySize()
 T CEntityFactory<CPathCornerCrash>::Create(char const*)
 T CEntityFactory<CPathCornerCrash>::Destroy(IServerNetworkable*)
 T CEntityFactory<CPathCornerCrash>::GetEntitySize()
 T CEntityFactory<CPathKeyFrame>::Create(char const*)
 T CEntityFactory<CPathKeyFrame>::Destroy(IServerNetworkable*)
 T CEntityFactory<CPathKeyFrame>::GetEntitySize()
 T CEntityFactory<CPathTrack>::Create(char const*)
 T CEntityFactory<CPathTrack>::Destroy(IServerNetworkable*)
 T CEntityFactory<CPathTrack>::GetEntitySize()
 T CEntityFactory<CPhysBallSocket>::Create(char const*)
 T CEntityFactory<CPhysBallSocket>::Destroy(IServerNetworkable*)
 T CEntityFactory<CPhysBallSocket>::GetEntitySize()
 T CEntityFactory<CPhysBox>::Create(char const*)
 T CEntityFactory<CPhysBox>::Destroy(IServerNetworkable*)
 T CEntityFactory<CPhysBox>::GetEntitySize()
 T CEntityFactory<CPhysBoxMultiplayer>::Create(char const*)
 T CEntityFactory<CPhysBoxMultiplayer>::Destroy(IServerNetworkable*)
 T CEntityFactory<CPhysBoxMultiplayer>::GetEntitySize()
 T CEntityFactory<CPhysConstraintSystem>::Create(char const*)
 T CEntityFactory<CPhysConstraintSystem>::Destroy(IServerNetworkable*)
 T CEntityFactory<CPhysConstraintSystem>::GetEntitySize()
 T CEntityFactory<CPhysConvert>::Create(char const*)
 T CEntityFactory<CPhysConvert>::Destroy(IServerNetworkable*)
 T CEntityFactory<CPhysConvert>::GetEntitySize()
 T CEntityFactory<CPhysExplosion>::Create(char const*)
 T CEntityFactory<CPhysExplosion>::Destroy(IServerNetworkable*)
 T CEntityFactory<CPhysExplosion>::GetEntitySize()
 T CEntityFactory<CPhysFixed>::Create(char const*)
 T CEntityFactory<CPhysFixed>::Destroy(IServerNetworkable*)
 T CEntityFactory<CPhysFixed>::GetEntitySize()
 T CEntityFactory<CPhysHinge>::Create(char const*)
 T CEntityFactory<CPhysHinge>::Destroy(IServerNetworkable*)
 T CEntityFactory<CPhysHinge>::GetEntitySize()
 T CEntityFactory<CPhysImpact>::Create(char const*)
 T CEntityFactory<CPhysImpact>::Destroy(IServerNetworkable*)
 T CEntityFactory<CPhysImpact>::GetEntitySize()
 T CEntityFactory<CPhysLength>::Create(char const*)
 T CEntityFactory<CPhysLength>::Destroy(IServerNetworkable*)
 T CEntityFactory<CPhysLength>::GetEntitySize()
 T CEntityFactory<CPhysMagnet>::Create(char const*)
 T CEntityFactory<CPhysMagnet>::Destroy(IServerNetworkable*)
 T CEntityFactory<CPhysMagnet>::GetEntitySize()
 T CEntityFactory<CPhysMotor>::Create(char const*)
 T CEntityFactory<CPhysMotor>::Destroy(IServerNetworkable*)
 T CEntityFactory<CPhysMotor>::GetEntitySize()
 T CEntityFactory<CPhysPulley>::Create(char const*)
 T CEntityFactory<CPhysPulley>::Destroy(IServerNetworkable*)
 T CEntityFactory<CPhysPulley>::GetEntitySize()
 T CEntityFactory<CPhysSlideConstraint>::Create(char const*)
 T CEntityFactory<CPhysSlideConstraint>::Destroy(IServerNetworkable*)
 T CEntityFactory<CPhysSlideConstraint>::GetEntitySize()
 T CEntityFactory<CPhysSphere>::Create(char const*)
 T CEntityFactory<CPhysSphere>::Destroy(IServerNetworkable*)
 T CEntityFactory<CPhysSphere>::GetEntitySize()
 T CEntityFactory<CPhysThruster>::Create(char const*)
 T CEntityFactory<CPhysThruster>::Destroy(IServerNetworkable*)
 T CEntityFactory<CPhysThruster>::GetEntitySize()
 T CEntityFactory<CPhysTorque>::Create(char const*)
 T CEntityFactory<CPhysTorque>::Destroy(IServerNetworkable*)
 T CEntityFactory<CPhysTorque>::GetEntitySize()
 T CEntityFactory<CPhysicsCannister>::Create(char const*)
 T CEntityFactory<CPhysicsCannister>::Destroy(IServerNetworkable*)
 T CEntityFactory<CPhysicsCannister>::GetEntitySize()
 T CEntityFactory<CPhysicsEntitySolver>::Create(char const*)
 T CEntityFactory<CPhysicsEntitySolver>::Destroy(IServerNetworkable*)
 T CEntityFactory<CPhysicsEntitySolver>::GetEntitySize()
 T CEntityFactory<CPhysicsNPCSolver>::Create(char const*)
 T CEntityFactory<CPhysicsNPCSolver>::Destroy(IServerNetworkable*)
 T CEntityFactory<CPhysicsNPCSolver>::GetEntitySize()
 T CEntityFactory<CPhysicsProp>::Create(char const*)
 T CEntityFactory<CPhysicsProp>::Destroy(IServerNetworkable*)
 T CEntityFactory<CPhysicsProp>::GetEntitySize()
 T CEntityFactory<CPhysicsPropMultiplayer>::Create(char const*)
 T CEntityFactory<CPhysicsPropMultiplayer>::Destroy(IServerNetworkable*)
 T CEntityFactory<CPhysicsPropMultiplayer>::GetEntitySize()
 T CEntityFactory<CPhysicsPropRespawnable>::Create(char const*)
 T CEntityFactory<CPhysicsPropRespawnable>::Destroy(IServerNetworkable*)
 T CEntityFactory<CPhysicsPropRespawnable>::GetEntitySize()
 T CEntityFactory<CPhysicsSpring>::Create(char const*)
 T CEntityFactory<CPhysicsSpring>::Destroy(IServerNetworkable*)
 T CEntityFactory<CPhysicsSpring>::GetEntitySize()
 T CEntityFactory<CPhysicsWire>::Create(char const*)
 T CEntityFactory<CPhysicsWire>::Destroy(IServerNetworkable*)
 T CEntityFactory<CPhysicsWire>::GetEntitySize()
 T CEntityFactory<CPlasma>::Create(char const*)
 T CEntityFactory<CPlasma>::Destroy(IServerNetworkable*)
 T CEntityFactory<CPlasma>::GetEntitySize()
 T CEntityFactory<CPlayerDestructionDispenser>::Create(char const*)
 T CEntityFactory<CPlayerDestructionDispenser>::Destroy(IServerNetworkable*)
 T CEntityFactory<CPlayerDestructionDispenser>::GetEntitySize()
 T CEntityFactory<CPlayerResource>::Create(char const*)
 T CEntityFactory<CPlayerResource>::Destroy(IServerNetworkable*)
 T CEntityFactory<CPlayerResource>::GetEntitySize()
 T CEntityFactory<CPointAngleSensor>::Create(char const*)
 T CEntityFactory<CPointAngleSensor>::Destroy(IServerNetworkable*)
 T CEntityFactory<CPointAngleSensor>::GetEntitySize()
 T CEntityFactory<CPointAngularVelocitySensor>::Create(char const*)
 T CEntityFactory<CPointAngularVelocitySensor>::Destroy(IServerNetworkable*)
 T CEntityFactory<CPointAngularVelocitySensor>::GetEntitySize()
 T CEntityFactory<CPointBonusMapsAccessor>::Create(char const*)
 T CEntityFactory<CPointBonusMapsAccessor>::Destroy(IServerNetworkable*)
 T CEntityFactory<CPointBonusMapsAccessor>::GetEntitySize()
 T CEntityFactory<CPointCamera>::Create(char const*)
 T CEntityFactory<CPointCamera>::Destroy(IServerNetworkable*)
 T CEntityFactory<CPointCamera>::GetEntitySize()
 T CEntityFactory<CPointClientCommand>::Create(char const*)
 T CEntityFactory<CPointClientCommand>::Destroy(IServerNetworkable*)
 T CEntityFactory<CPointClientCommand>::GetEntitySize()
 T CEntityFactory<CPointCommentaryNode>::Create(char const*)
 T CEntityFactory<CPointCommentaryNode>::Destroy(IServerNetworkable*)
 T CEntityFactory<CPointCommentaryNode>::GetEntitySize()
 T CEntityFactory<CPointDevShotCamera>::Create(char const*)
 T CEntityFactory<CPointDevShotCamera>::Destroy(IServerNetworkable*)
 T CEntityFactory<CPointDevShotCamera>::GetEntitySize()
 T CEntityFactory<CPointEntity>::Create(char const*)
 T CEntityFactory<CPointEntity>::Destroy(IServerNetworkable*)
 T CEntityFactory<CPointEntity>::GetEntitySize()
 T CEntityFactory<CPointGamestatsCounter>::Create(char const*)
 T CEntityFactory<CPointGamestatsCounter>::Destroy(IServerNetworkable*)
 T CEntityFactory<CPointGamestatsCounter>::GetEntitySize()
 T CEntityFactory<CPointHurt>::Create(char const*)
 T CEntityFactory<CPointHurt>::Destroy(IServerNetworkable*)
 T CEntityFactory<CPointHurt>::GetEntitySize()
 T CEntityFactory<CPointNavInterface>::Create(char const*)
 T CEntityFactory<CPointNavInterface>::Destroy(IServerNetworkable*)
 T CEntityFactory<CPointNavInterface>::GetEntitySize()
 T CEntityFactory<CPointPlayerMoveConstraint>::Create(char const*)
 T CEntityFactory<CPointPlayerMoveConstraint>::Destroy(IServerNetworkable*)
 T CEntityFactory<CPointPlayerMoveConstraint>::GetEntitySize()
 T CEntityFactory<CPointPopulatorInterface>::Create(char const*)
 T CEntityFactory<CPointPopulatorInterface>::Destroy(IServerNetworkable*)
 T CEntityFactory<CPointPopulatorInterface>::GetEntitySize()
 T CEntityFactory<CPointProximitySensor>::Create(char const*)
 T CEntityFactory<CPointProximitySensor>::Destroy(IServerNetworkable*)
 T CEntityFactory<CPointProximitySensor>::GetEntitySize()
 T CEntityFactory<CPointPush>::Create(char const*)
 T CEntityFactory<CPointPush>::Destroy(IServerNetworkable*)
 T CEntityFactory<CPointPush>::GetEntitySize()
 T CEntityFactory<CPointServerCommand>::Create(char const*)
 T CEntityFactory<CPointServerCommand>::Destroy(IServerNetworkable*)
 T CEntityFactory<CPointServerCommand>::GetEntitySize()
 T CEntityFactory<CPointSpotlight>::Create(char const*)
 T CEntityFactory<CPointSpotlight>::Destroy(IServerNetworkable*)
 T CEntityFactory<CPointSpotlight>::GetEntitySize()
 T CEntityFactory<CPointTeleport>::Create(char const*)
 T CEntityFactory<CPointTeleport>::Destroy(IServerNetworkable*)
 T CEntityFactory<CPointTeleport>::GetEntitySize()
 T CEntityFactory<CPointTemplate>::Create(char const*)
 T CEntityFactory<CPointTemplate>::Destroy(IServerNetworkable*)
 T CEntityFactory<CPointTemplate>::GetEntitySize()
 T CEntityFactory<CPointVelocitySensor>::Create(char const*)
 T CEntityFactory<CPointVelocitySensor>::Destroy(IServerNetworkable*)
 T CEntityFactory<CPointVelocitySensor>::GetEntitySize()
 T CEntityFactory<CPopulationManager>::Create(char const*)
 T CEntityFactory<CPopulationManager>::Destroy(IServerNetworkable*)
 T CEntityFactory<CPopulationManager>::GetEntitySize()
 T CEntityFactory<CPopulatorInternalSpawnPoint>::Create(char const*)
 T CEntityFactory<CPopulatorInternalSpawnPoint>::Destroy(IServerNetworkable*)
 T CEntityFactory<CPopulatorInternalSpawnPoint>::GetEntitySize()
 T CEntityFactory<CPoseController>::Create(char const*)
 T CEntityFactory<CPoseController>::Destroy(IServerNetworkable*)
 T CEntityFactory<CPoseController>::GetEntitySize()
 T CEntityFactory<CPowerupVolume>::Create(char const*)
 T CEntityFactory<CPowerupVolume>::Destroy(IServerNetworkable*)
 T CEntityFactory<CPowerupVolume>::GetEntitySize()
 T CEntityFactory<CPrecipitation>::Create(char const*)
 T CEntityFactory<CPrecipitation>::Destroy(IServerNetworkable*)
 T CEntityFactory<CPrecipitation>::GetEntitySize()
 T CEntityFactory<CProjectedDecal>::Create(char const*)
 T CEntityFactory<CProjectedDecal>::Destroy(IServerNetworkable*)
 T CEntityFactory<CProjectedDecal>::GetEntitySize()
 T CEntityFactory<CPropDoorRotating>::Create(char const*)
 T CEntityFactory<CPropDoorRotating>::Destroy(IServerNetworkable*)
 T CEntityFactory<CPropDoorRotating>::GetEntitySize()
 T CEntityFactory<CPropSoccerBall>::Create(char const*)
 T CEntityFactory<CPropSoccerBall>::Destroy(IServerNetworkable*)
 T CEntityFactory<CPropSoccerBall>::GetEntitySize()
 T CEntityFactory<CPropVehicle>::Create(char const*)
 T CEntityFactory<CPropVehicle>::Destroy(IServerNetworkable*)
 T CEntityFactory<CPropVehicle>::GetEntitySize()
 T CEntityFactory<CPropVehicleDriveable>::Create(char const*)
 T CEntityFactory<CPropVehicleDriveable>::Destroy(IServerNetworkable*)
 T CEntityFactory<CPropVehicleDriveable>::GetEntitySize()
 T CEntityFactory<CPushable>::Create(char const*)
 T CEntityFactory<CPushable>::Destroy(IServerNetworkable*)
 T CEntityFactory<CPushable>::GetEntitySize()
 T CEntityFactory<CRagGib>::Create(char const*)
 T CEntityFactory<CRagGib>::Destroy(IServerNetworkable*)
 T CEntityFactory<CRagGib>::GetEntitySize()
 T CEntityFactory<CRagdollBoogie>::Create(char const*)
 T CEntityFactory<CRagdollBoogie>::Destroy(IServerNetworkable*)
 T CEntityFactory<CRagdollBoogie>::GetEntitySize()
 T CEntityFactory<CRagdollConstraint>::Create(char const*)
 T CEntityFactory<CRagdollConstraint>::Destroy(IServerNetworkable*)
 T CEntityFactory<CRagdollConstraint>::GetEntitySize()
 T CEntityFactory<CRagdollMagnet>::Create(char const*)
 T CEntityFactory<CRagdollMagnet>::Destroy(IServerNetworkable*)
 T CEntityFactory<CRagdollMagnet>::GetEntitySize()
 T CEntityFactory<CRagdollManager>::Create(char const*)
 T CEntityFactory<CRagdollManager>::Destroy(IServerNetworkable*)
 T CEntityFactory<CRagdollManager>::GetEntitySize()
 T CEntityFactory<CRagdollProp>::Create(char const*)
 T CEntityFactory<CRagdollProp>::Destroy(IServerNetworkable*)
 T CEntityFactory<CRagdollProp>::GetEntitySize()
 T CEntityFactory<CRagdollPropAttached>::Create(char const*)
 T CEntityFactory<CRagdollPropAttached>::Destroy(IServerNetworkable*)
 T CEntityFactory<CRagdollPropAttached>::GetEntitySize()
 T CEntityFactory<CRallyPoint>::Create(char const*)
 T CEntityFactory<CRallyPoint>::Destroy(IServerNetworkable*)
 T CEntityFactory<CRallyPoint>::GetEntitySize()
 T CEntityFactory<CRegenerateZone>::Create(char const*)
 T CEntityFactory<CRegenerateZone>::Destroy(IServerNetworkable*)
 T CEntityFactory<CRegenerateZone>::GetEntitySize()
 T CEntityFactory<CRevertSaved>::Create(char const*)
 T CEntityFactory<CRevertSaved>::Destroy(IServerNetworkable*)
 T CEntityFactory<CRevertSaved>::GetEntitySize()
 T CEntityFactory<CRobotDestructionVaultTrigger>::Create(char const*)
 T CEntityFactory<CRobotDestructionVaultTrigger>::Destroy(IServerNetworkable*)
 T CEntityFactory<CRobotDestructionVaultTrigger>::GetEntitySize()
 T CEntityFactory<CRobotDispenser>::Create(char const*)
 T CEntityFactory<CRobotDispenser>::Destroy(IServerNetworkable*)
 T CEntityFactory<CRobotDispenser>::GetEntitySize()
 T CEntityFactory<CRopeAnchor>::Create(char const*)
 T CEntityFactory<CRopeAnchor>::Destroy(IServerNetworkable*)
 T CEntityFactory<CRopeAnchor>::GetEntitySize()
 T CEntityFactory<CRopeKeyframe>::Create(char const*)
 T CEntityFactory<CRopeKeyframe>::Destroy(IServerNetworkable*)
 T CEntityFactory<CRopeKeyframe>::GetEntitySize()
 T CEntityFactory<CRotButton>::Create(char const*)
 T CEntityFactory<CRotButton>::Destroy(IServerNetworkable*)
 T CEntityFactory<CRotButton>::GetEntitySize()
 T CEntityFactory<CRotDoor>::Create(char const*)
 T CEntityFactory<CRotDoor>::Destroy(IServerNetworkable*)
 T CEntityFactory<CRotDoor>::GetEntitySize()
 T CEntityFactory<CRotorWashShooter>::Create(char const*)
 T CEntityFactory<CRotorWashShooter>::Destroy(IServerNetworkable*)
 T CEntityFactory<CRotorWashShooter>::GetEntitySize()
 T CEntityFactory<CSceneEntity>::Create(char const*)
 T CEntityFactory<CSceneEntity>::Destroy(IServerNetworkable*)
 T CEntityFactory<CSceneEntity>::GetEntitySize()
 T CEntityFactory<CSceneListManager>::Create(char const*)
 T CEntityFactory<CSceneListManager>::Destroy(IServerNetworkable*)
 T CEntityFactory<CSceneListManager>::GetEntitySize()
 T CEntityFactory<CSceneManager>::Create(char const*)
 T CEntityFactory<CSceneManager>::Destroy(IServerNetworkable*)
 T CEntityFactory<CSceneManager>::GetEntitySize()
 T CEntityFactory<CScriptedTarget>::Create(char const*)
 T CEntityFactory<CScriptedTarget>::Destroy(IServerNetworkable*)
 T CEntityFactory<CScriptedTarget>::GetEntitySize()
 T CEntityFactory<CServerRagdollTrigger>::Create(char const*)
 T CEntityFactory<CServerRagdollTrigger>::Destroy(IServerNetworkable*)
 T CEntityFactory<CServerRagdollTrigger>::GetEntitySize()
 T CEntityFactory<CShadowControl>::Create(char const*)
 T CEntityFactory<CShadowControl>::Destroy(IServerNetworkable*)
 T CEntityFactory<CShadowControl>::GetEntitySize()
 T CEntityFactory<CShower>::Create(char const*)
 T CEntityFactory<CShower>::Destroy(IServerNetworkable*)
 T CEntityFactory<CShower>::GetEntitySize()
 T CEntityFactory<CSimpleBot>::Create(char const*)
 T CEntityFactory<CSimpleBot>::Destroy(IServerNetworkable*)
 T CEntityFactory<CSimpleBot>::GetEntitySize()
 T CEntityFactory<CSimplePhysicsBrush>::Create(char const*)
 T CEntityFactory<CSimplePhysicsBrush>::Destroy(IServerNetworkable*)
 T CEntityFactory<CSimplePhysicsBrush>::GetEntitySize()
 T CEntityFactory<CSimplePhysicsProp>::Create(char const*)
 T CEntityFactory<CSimplePhysicsProp>::Destroy(IServerNetworkable*)
 T CEntityFactory<CSimplePhysicsProp>::GetEntitySize()
 T CEntityFactory<CSkyCamera>::Create(char const*)
 T CEntityFactory<CSkyCamera>::Destroy(IServerNetworkable*)
 T CEntityFactory<CSkyCamera>::GetEntitySize()
 T CEntityFactory<CSlideshowDisplay>::Create(char const*)
 T CEntityFactory<CSlideshowDisplay>::Destroy(IServerNetworkable*)
 T CEntityFactory<CSlideshowDisplay>::GetEntitySize()
 T CEntityFactory<CSmokeStack>::Create(char const*)
 T CEntityFactory<CSmokeStack>::Destroy(IServerNetworkable*)
 T CEntityFactory<CSmokeStack>::GetEntitySize()
 T CEntityFactory<CSniperDot>::Create(char const*)
 T CEntityFactory<CSniperDot>::Destroy(IServerNetworkable*)
 T CEntityFactory<CSniperDot>::GetEntitySize()
 T CEntityFactory<CSoundEnt>::Create(char const*)
 T CEntityFactory<CSoundEnt>::Destroy(IServerNetworkable*)
 T CEntityFactory<CSoundEnt>::GetEntitySize()
 T CEntityFactory<CSpellPickup>::Create(char const*)
 T CEntityFactory<CSpellPickup>::Destroy(IServerNetworkable*)
 T CEntityFactory<CSpellPickup>::GetEntitySize()
 T CEntityFactory<CSpotlightEnd>::Create(char const*)
 T CEntityFactory<CSpotlightEnd>::Destroy(IServerNetworkable*)
 T CEntityFactory<CSpotlightEnd>::GetEntitySize()
 T CEntityFactory<CSprayCan>::Create(char const*)
 T CEntityFactory<CSprayCan>::Destroy(IServerNetworkable*)
 T CEntityFactory<CSprayCan>::GetEntitySize()
 T CEntityFactory<CSprite>::Create(char const*)
 T CEntityFactory<CSprite>::Destroy(IServerNetworkable*)
 T CEntityFactory<CSprite>::GetEntitySize()
 T CEntityFactory<CSpriteOriented>::Create(char const*)
 T CEntityFactory<CSpriteOriented>::Destroy(IServerNetworkable*)
 T CEntityFactory<CSpriteOriented>::GetEntitySize()
 T CEntityFactory<CSpriteTrail>::Create(char const*)
 T CEntityFactory<CSpriteTrail>::Destroy(IServerNetworkable*)
 T CEntityFactory<CSpriteTrail>::GetEntitySize()
 T CEntityFactory<CSteamJet>::Create(char const*)
 T CEntityFactory<CSteamJet>::Destroy(IServerNetworkable*)
 T CEntityFactory<CSteamJet>::GetEntitySize()
 T CEntityFactory<CStripWeapons>::Create(char const*)
 T CEntityFactory<CStripWeapons>::Destroy(IServerNetworkable*)
 T CEntityFactory<CStripWeapons>::GetEntitySize()
 T CEntityFactory<CSun>::Create(char const*)
 T CEntityFactory<CSun>::Destroy(IServerNetworkable*)
 T CEntityFactory<CSun>::GetEntitySize()
 T CEntityFactory<CTFAmmoPack>::Create(char const*)
 T CEntityFactory<CTFAmmoPack>::Destroy(IServerNetworkable*)
 T CEntityFactory<CTFAmmoPack>::GetEntitySize()
 T CEntityFactory<CTFArcherProxy>::Create(char const*)
 T CEntityFactory<CTFArcherProxy>::Destroy(IServerNetworkable*)
 T CEntityFactory<CTFArcherProxy>::GetEntitySize()
 T CEntityFactory<CTFBall_Ornament>::Create(char const*)
 T CEntityFactory<CTFBall_Ornament>::Destroy(IServerNetworkable*)
 T CEntityFactory<CTFBall_Ornament>::GetEntitySize()
 T CEntityFactory<CTFBaseBoss>::Create(char const*)
 T CEntityFactory<CTFBaseBoss>::Destroy(IServerNetworkable*)
 T CEntityFactory<CTFBaseBoss>::GetEntitySize()
 T CEntityFactory<CTFBat>::Create(char const*)
 T CEntityFactory<CTFBat>::Destroy(IServerNetworkable*)
 T CEntityFactory<CTFBat>::GetEntitySize()
 T CEntityFactory<CTFBat_Fish>::Create(char const*)
 T CEntityFactory<CTFBat_Fish>::Destroy(IServerNetworkable*)
 T CEntityFactory<CTFBat_Fish>::GetEntitySize()
 T CEntityFactory<CTFBat_Giftwrap>::Create(char const*)
 T CEntityFactory<CTFBat_Giftwrap>::Destroy(IServerNetworkable*)
 T CEntityFactory<CTFBat_Giftwrap>::GetEntitySize()
 T CEntityFactory<CTFBat_Wood>::Create(char const*)
 T CEntityFactory<CTFBat_Wood>::Destroy(IServerNetworkable*)
 T CEntityFactory<CTFBat_Wood>::GetEntitySize()
 T CEntityFactory<CTFBonesaw>::Create(char const*)
 T CEntityFactory<CTFBonesaw>::Destroy(IServerNetworkable*)
 T CEntityFactory<CTFBonesaw>::GetEntitySize()
 T CEntityFactory<CTFBot>::Create(char const*)
 T CEntityFactory<CTFBot>::Destroy(IServerNetworkable*)
 T CEntityFactory<CTFBot>::GetEntitySize()
 T CEntityFactory<CTFBotActionPoint>::Create(char const*)
 T CEntityFactory<CTFBotActionPoint>::Destroy(IServerNetworkable*)
 T CEntityFactory<CTFBotActionPoint>::GetEntitySize()
 T CEntityFactory<CTFBotController>::Create(char const*)
 T CEntityFactory<CTFBotController>::Destroy(IServerNetworkable*)
 T CEntityFactory<CTFBotController>::GetEntitySize()
 T CEntityFactory<CTFBotGenerator>::Create(char const*)
 T CEntityFactory<CTFBotGenerator>::Destroy(IServerNetworkable*)
 T CEntityFactory<CTFBotGenerator>::GetEntitySize()
 T CEntityFactory<CTFBotHint>::Create(char const*)
 T CEntityFactory<CTFBotHint>::Destroy(IServerNetworkable*)
 T CEntityFactory<CTFBotHint>::GetEntitySize()
 T CEntityFactory<CTFBotHintEngineerNest>::Create(char const*)
 T CEntityFactory<CTFBotHintEngineerNest>::Destroy(IServerNetworkable*)
 T CEntityFactory<CTFBotHintEngineerNest>::GetEntitySize()
 T CEntityFactory<CTFBotHintSentrygun>::Create(char const*)
 T CEntityFactory<CTFBotHintSentrygun>::Destroy(IServerNetworkable*)
 T CEntityFactory<CTFBotHintSentrygun>::GetEntitySize()
 T CEntityFactory<CTFBotHintTeleporterExit>::Create(char const*)
 T CEntityFactory<CTFBotHintTeleporterExit>::Destroy(IServerNetworkable*)
 T CEntityFactory<CTFBotHintTeleporterExit>::GetEntitySize()
 T CEntityFactory<CTFBotProxy>::Create(char const*)
 T CEntityFactory<CTFBotProxy>::Destroy(IServerNetworkable*)
 T CEntityFactory<CTFBotProxy>::GetEntitySize()
 T CEntityFactory<CTFBotRoster>::Create(char const*)
 T CEntityFactory<CTFBotRoster>::Destroy(IServerNetworkable*)
 T CEntityFactory<CTFBotRoster>::GetEntitySize()
 T CEntityFactory<CTFBottle>::Create(char const*)
 T CEntityFactory<CTFBottle>::Destroy(IServerNetworkable*)
 T CEntityFactory<CTFBottle>::GetEntitySize()
 T CEntityFactory<CTFBuffItem>::Create(char const*)
 T CEntityFactory<CTFBuffItem>::Destroy(IServerNetworkable*)
 T CEntityFactory<CTFBuffItem>::GetEntitySize()
 T CEntityFactory<CTFCannon>::Create(char const*)
 T CEntityFactory<CTFCannon>::Destroy(IServerNetworkable*)
 T CEntityFactory<CTFCannon>::GetEntitySize()
 T CEntityFactory<CTFChargedSMG>::Create(char const*)
 T CEntityFactory<CTFChargedSMG>::Destroy(IServerNetworkable*)
 T CEntityFactory<CTFChargedSMG>::GetEntitySize()
 T CEntityFactory<CTFCleaver>::Create(char const*)
 T CEntityFactory<CTFCleaver>::Destroy(IServerNetworkable*)
 T CEntityFactory<CTFCleaver>::GetEntitySize()
 T CEntityFactory<CTFClub>::Create(char const*)
 T CEntityFactory<CTFClub>::Destroy(IServerNetworkable*)
 T CEntityFactory<CTFClub>::GetEntitySize()
 T CEntityFactory<CTFCompoundBow>::Create(char const*)
 T CEntityFactory<CTFCompoundBow>::Destroy(IServerNetworkable*)
 T CEntityFactory<CTFCompoundBow>::GetEntitySize()
 T CEntityFactory<CTFCrossbow>::Create(char const*)
 T CEntityFactory<CTFCrossbow>::Destroy(IServerNetworkable*)
 T CEntityFactory<CTFCrossbow>::GetEntitySize()
 T CEntityFactory<CTFDRGPomson>::Create(char const*)
 T CEntityFactory<CTFDRGPomson>::Destroy(IServerNetworkable*)
 T CEntityFactory<CTFDRGPomson>::GetEntitySize()
 T CEntityFactory<CTFDroppedWeapon>::Create(char const*)
 T CEntityFactory<CTFDroppedWeapon>::Destroy(IServerNetworkable*)
 T CEntityFactory<CTFDroppedWeapon>::GetEntitySize()
 T CEntityFactory<CTFFireAxe>::Create(char const*)
 T CEntityFactory<CTFFireAxe>::Destroy(IServerNetworkable*)
 T CEntityFactory<CTFFireAxe>::GetEntitySize()
 T CEntityFactory<CTFFists>::Create(char const*)
 T CEntityFactory<CTFFists>::Destroy(IServerNetworkable*)
 T CEntityFactory<CTFFists>::GetEntitySize()
 T CEntityFactory<CTFFlameEntity>::Create(char const*)
 T CEntityFactory<CTFFlameEntity>::Destroy(IServerNetworkable*)
 T CEntityFactory<CTFFlameEntity>::GetEntitySize()
 T CEntityFactory<CTFFlameThrower>::Create(char const*)
 T CEntityFactory<CTFFlameThrower>::Destroy(IServerNetworkable*)
 T CEntityFactory<CTFFlameThrower>::GetEntitySize()
 T CEntityFactory<CTFFlareGun>::Create(char const*)
 T CEntityFactory<CTFFlareGun>::Destroy(IServerNetworkable*)
 T CEntityFactory<CTFFlareGun>::GetEntitySize()
 T CEntityFactory<CTFFlareGun_Revenge>::Create(char const*)
 T CEntityFactory<CTFFlareGun_Revenge>::Destroy(IServerNetworkable*)
 T CEntityFactory<CTFFlareGun_Revenge>::GetEntitySize()
 T CEntityFactory<CTFForceRespawn>::Create(char const*)
 T CEntityFactory<CTFForceRespawn>::Destroy(IServerNetworkable*)
 T CEntityFactory<CTFForceRespawn>::GetEntitySize()
 T CEntityFactory<CTFGameRulesProxy>::Create(char const*)
 T CEntityFactory<CTFGameRulesProxy>::Destroy(IServerNetworkable*)
 T CEntityFactory<CTFGameRulesProxy>::GetEntitySize()
 T CEntityFactory<CTFGenericBomb>::Create(char const*)
 T CEntityFactory<CTFGenericBomb>::Destroy(IServerNetworkable*)
 T CEntityFactory<CTFGenericBomb>::GetEntitySize()
 T CEntityFactory<CTFGlow>::Create(char const*)
 T CEntityFactory<CTFGlow>::Destroy(IServerNetworkable*)
 T CEntityFactory<CTFGlow>::GetEntitySize()
 T CEntityFactory<CTFGrapplingHook>::Create(char const*)
 T CEntityFactory<CTFGrapplingHook>::Destroy(IServerNetworkable*)
 T CEntityFactory<CTFGrapplingHook>::GetEntitySize()
 T CEntityFactory<CTFGrenadeLauncher>::Create(char const*)
 T CEntityFactory<CTFGrenadeLauncher>::Destroy(IServerNetworkable*)
 T CEntityFactory<CTFGrenadeLauncher>::GetEntitySize()
 T CEntityFactory<CTFGrenadePipebombProjectile>::Create(char const*)
 T CEntityFactory<CTFGrenadePipebombProjectile>::Destroy(IServerNetworkable*)
 T CEntityFactory<CTFGrenadePipebombProjectile>::GetEntitySize()
 T CEntityFactory<CTFHalloweenFortuneTeller>::Create(char const*)
 T CEntityFactory<CTFHalloweenFortuneTeller>::Destroy(IServerNetworkable*)
 T CEntityFactory<CTFHalloweenFortuneTeller>::GetEntitySize()
 T CEntityFactory<CTFHalloweenMinigame>::Create(char const*)
 T CEntityFactory<CTFHalloweenMinigame>::Destroy(IServerNetworkable*)
 T CEntityFactory<CTFHalloweenMinigame>::GetEntitySize()
 T CEntityFactory<CTFHalloweenMinigame_FallingPlatforms>::Create(char const*)
 T CEntityFactory<CTFHalloweenMinigame_FallingPlatforms>::Destroy(IServerNetworkable*)
 T CEntityFactory<CTFHalloweenMinigame_FallingPlatforms>::GetEntitySize()
 T CEntityFactory<CTFHellZap>::Create(char const*)
 T CEntityFactory<CTFHellZap>::Destroy(IServerNetworkable*)
 T CEntityFactory<CTFHellZap>::GetEntitySize()
 T CEntityFactory<CTFHolidayEntity>::Create(char const*)
 T CEntityFactory<CTFHolidayEntity>::Destroy(IServerNetworkable*)
 T CEntityFactory<CTFHolidayEntity>::GetEntitySize()
 T CEntityFactory<CTFHudNotify>::Create(char const*)
 T CEntityFactory<CTFHudNotify>::Destroy(IServerNetworkable*)
 T CEntityFactory<CTFHudNotify>::GetEntitySize()
 T CEntityFactory<CTFInfoPowerupSpawn>::Create(char const*)
 T CEntityFactory<CTFInfoPowerupSpawn>::Destroy(IServerNetworkable*)
 T CEntityFactory<CTFInfoPowerupSpawn>::GetEntitySize()
 T CEntityFactory<CTFIntermission>::Create(char const*)
 T CEntityFactory<CTFIntermission>::Destroy(IServerNetworkable*)
 T CEntityFactory<CTFIntermission>::GetEntitySize()
 T CEntityFactory<CTFJar>::Create(char const*)
 T CEntityFactory<CTFJar>::Destroy(IServerNetworkable*)
 T CEntityFactory<CTFJar>::GetEntitySize()
 T CEntityFactory<CTFJarMilk>::Create(char const*)
 T CEntityFactory<CTFJarMilk>::Destroy(IServerNetworkable*)
 T CEntityFactory<CTFJarMilk>::GetEntitySize()
 T CEntityFactory<CTFKatana>::Create(char const*)
 T CEntityFactory<CTFKatana>::Destroy(IServerNetworkable*)
 T CEntityFactory<CTFKatana>::GetEntitySize()
 T CEntityFactory<CTFKnife>::Create(char const*)
 T CEntityFactory<CTFKnife>::Destroy(IServerNetworkable*)
 T CEntityFactory<CTFKnife>::GetEntitySize()
 T CEntityFactory<CTFLaserPointer>::Create(char const*)
 T CEntityFactory<CTFLaserPointer>::Destroy(IServerNetworkable*)
 T CEntityFactory<CTFLaserPointer>::GetEntitySize()
 T CEntityFactory<CTFLunchBox>::Create(char const*)
 T CEntityFactory<CTFLunchBox>::Destroy(IServerNetworkable*)
 T CEntityFactory<CTFLunchBox>::GetEntitySize()
 T CEntityFactory<CTFLunchBox_Drink>::Create(char const*)
 T CEntityFactory<CTFLunchBox_Drink>::Destroy(IServerNetworkable*)
 T CEntityFactory<CTFLunchBox_Drink>::GetEntitySize()
 T CEntityFactory<CTFMechanicalArm>::Create(char const*)
 T CEntityFactory<CTFMechanicalArm>::Destroy(IServerNetworkable*)
 T CEntityFactory<CTFMechanicalArm>::GetEntitySize()
 T CEntityFactory<CTFMedigunShield>::Create(char const*)
 T CEntityFactory<CTFMedigunShield>::Destroy(IServerNetworkable*)
 T CEntityFactory<CTFMedigunShield>::GetEntitySize()
 T CEntityFactory<CTFMerasmusTrickOrTreatProp>::Create(char const*)
 T CEntityFactory<CTFMerasmusTrickOrTreatProp>::Destroy(IServerNetworkable*)
 T CEntityFactory<CTFMerasmusTrickOrTreatProp>::GetEntitySize()
 T CEntityFactory<CTFMiniGame>::Create(char const*)
 T CEntityFactory<CTFMiniGame>::Destroy(IServerNetworkable*)
 T CEntityFactory<CTFMiniGame>::GetEntitySize()
 T CEntityFactory<CTFMinigameLogic>::Create(char const*)
 T CEntityFactory<CTFMinigameLogic>::Destroy(IServerNetworkable*)
 T CEntityFactory<CTFMinigameLogic>::GetEntitySize()
 T CEntityFactory<CTFMinigun>::Create(char const*)
 T CEntityFactory<CTFMinigun>::Destroy(IServerNetworkable*)
 T CEntityFactory<CTFMinigun>::GetEntitySize()
 T CEntityFactory<CTFObjectiveResource>::Create(char const*)
 T CEntityFactory<CTFObjectiveResource>::Destroy(IServerNetworkable*)
 T CEntityFactory<CTFObjectiveResource>::GetEntitySize()
 T CEntityFactory<CTFPEPBrawlerBlaster>::Create(char const*)
 T CEntityFactory<CTFPEPBrawlerBlaster>::Destroy(IServerNetworkable*)
 T CEntityFactory<CTFPEPBrawlerBlaster>::GetEntitySize()
 T CEntityFactory<CTFParachute>::Create(char const*)
 T CEntityFactory<CTFParachute>::Destroy(IServerNetworkable*)
 T CEntityFactory<CTFParachute>::GetEntitySize()
 T CEntityFactory<CTFParachute_Primary>::Create(char const*)
 T CEntityFactory<CTFParachute_Primary>::Destroy(IServerNetworkable*)
 T CEntityFactory<CTFParachute_Primary>::GetEntitySize()
 T CEntityFactory<CTFParachute_Secondary>::Create(char const*)
 T CEntityFactory<CTFParachute_Secondary>::Destroy(IServerNetworkable*)
 T CEntityFactory<CTFParachute_Secondary>::GetEntitySize()
 T CEntityFactory<CTFParticleCannon>::Create(char const*)
 T CEntityFactory<CTFParticleCannon>::Destroy(IServerNetworkable*)
 T CEntityFactory<CTFParticleCannon>::GetEntitySize()
 T CEntityFactory<CTFPasstimeLogic>::Create(char const*)
 T CEntityFactory<CTFPasstimeLogic>::Destroy(IServerNetworkable*)
 T CEntityFactory<CTFPasstimeLogic>::GetEntitySize()
 T CEntityFactory<CTFPipebombLauncher>::Create(char const*)
 T CEntityFactory<CTFPipebombLauncher>::Destroy(IServerNetworkable*)
 T CEntityFactory<CTFPipebombLauncher>::GetEntitySize()
 T CEntityFactory<CTFPistol>::Create(char const*)
 T CEntityFactory<CTFPistol>::Destroy(IServerNetworkable*)
 T CEntityFactory<CTFPistol>::GetEntitySize()
 T CEntityFactory<CTFPistol_Scout>::Create(char const*)
 T CEntityFactory<CTFPistol_Scout>::Destroy(IServerNetworkable*)
 T CEntityFactory<CTFPistol_Scout>::GetEntitySize()
 T CEntityFactory<CTFPistol_ScoutPrimary>::Create(char const*)
 T CEntityFactory<CTFPistol_ScoutPrimary>::Destroy(IServerNetworkable*)
 T CEntityFactory<CTFPistol_ScoutPrimary>::GetEntitySize()
 T CEntityFactory<CTFPistol_ScoutSecondary>::Create(char const*)
 T CEntityFactory<CTFPistol_ScoutSecondary>::Destroy(IServerNetworkable*)
 T CEntityFactory<CTFPistol_ScoutSecondary>::GetEntitySize()
 T CEntityFactory<CTFPlayer>::Create(char const*)
 T CEntityFactory<CTFPlayer>::Destroy(IServerNetworkable*)
 T CEntityFactory<CTFPlayer>::GetEntitySize()
 T CEntityFactory<CTFPlayerDestructionLogic>::Create(char const*)
 T CEntityFactory<CTFPlayerDestructionLogic>::Destroy(IServerNetworkable*)
 T CEntityFactory<CTFPlayerDestructionLogic>::GetEntitySize()
 T CEntityFactory<CTFPlayerResource>::Create(char const*)
 T CEntityFactory<CTFPlayerResource>::Destroy(IServerNetworkable*)
 T CEntityFactory<CTFPlayerResource>::GetEntitySize()
 T CEntityFactory<CTFPointWeaponMimic>::Create(char const*)
 T CEntityFactory<CTFPointWeaponMimic>::Destroy(IServerNetworkable*)
 T CEntityFactory<CTFPointWeaponMimic>::GetEntitySize()
 T CEntityFactory<CTFPowerupBottle>::Create(char const*)
 T CEntityFactory<CTFPowerupBottle>::Destroy(IServerNetworkable*)
 T CEntityFactory<CTFPowerupBottle>::GetEntitySize()
 T CEntityFactory<CTFProjectile_Arrow>::Create(char const*)
 T CEntityFactory<CTFProjectile_Arrow>::Destroy(IServerNetworkable*)
 T CEntityFactory<CTFProjectile_Arrow>::GetEntitySize()
 T CEntityFactory<CTFProjectile_Cleaver>::Create(char const*)
 T CEntityFactory<CTFProjectile_Cleaver>::Destroy(IServerNetworkable*)
 T CEntityFactory<CTFProjectile_Cleaver>::GetEntitySize()
 T CEntityFactory<CTFProjectile_EnergyBall>::Create(char const*)
 T CEntityFactory<CTFProjectile_EnergyBall>::Destroy(IServerNetworkable*)
 T CEntityFactory<CTFProjectile_EnergyBall>::GetEntitySize()
 T CEntityFactory<CTFProjectile_EnergyRing>::Create(char const*)
 T CEntityFactory<CTFProjectile_EnergyRing>::Destroy(IServerNetworkable*)
 T CEntityFactory<CTFProjectile_EnergyRing>::GetEntitySize()
 T CEntityFactory<CTFProjectile_Flare>::Create(char const*)
 T CEntityFactory<CTFProjectile_Flare>::Destroy(IServerNetworkable*)
 T CEntityFactory<CTFProjectile_Flare>::GetEntitySize()
 T CEntityFactory<CTFProjectile_GrapplingHook>::Create(char const*)
 T CEntityFactory<CTFProjectile_GrapplingHook>::Destroy(IServerNetworkable*)
 T CEntityFactory<CTFProjectile_GrapplingHook>::GetEntitySize()
 T CEntityFactory<CTFProjectile_HealingBolt>::Create(char const*)
 T CEntityFactory<CTFProjectile_HealingBolt>::Destroy(IServerNetworkable*)
 T CEntityFactory<CTFProjectile_HealingBolt>::GetEntitySize()
 T CEntityFactory<CTFProjectile_Jar>::Create(char const*)
 T CEntityFactory<CTFProjectile_Jar>::Destroy(IServerNetworkable*)
 T CEntityFactory<CTFProjectile_Jar>::GetEntitySize()
 T CEntityFactory<CTFProjectile_JarMilk>::Create(char const*)
 T CEntityFactory<CTFProjectile_JarMilk>::Destroy(IServerNetworkable*)
 T CEntityFactory<CTFProjectile_JarMilk>::GetEntitySize()
 T CEntityFactory<CTFProjectile_Rocket>::Create(char const*)
 T CEntityFactory<CTFProjectile_Rocket>::Destroy(IServerNetworkable*)
 T CEntityFactory<CTFProjectile_Rocket>::GetEntitySize()
 T CEntityFactory<CTFProjectile_SentryRocket>::Create(char const*)
 T CEntityFactory<CTFProjectile_SentryRocket>::Destroy(IServerNetworkable*)
 T CEntityFactory<CTFProjectile_SentryRocket>::GetEntitySize()
 T CEntityFactory<CTFProjectile_SpellBats>::Create(char const*)
 T CEntityFactory<CTFProjectile_SpellBats>::Destroy(IServerNetworkable*)
 T CEntityFactory<CTFProjectile_SpellBats>::GetEntitySize()
 T CEntityFactory<CTFProjectile_SpellFireball>::Create(char const*)
 T CEntityFactory<CTFProjectile_SpellFireball>::Destroy(IServerNetworkable*)
 T CEntityFactory<CTFProjectile_SpellFireball>::GetEntitySize()
 T CEntityFactory<CTFProjectile_SpellKartBats>::Create(char const*)
 T CEntityFactory<CTFProjectile_SpellKartBats>::Destroy(IServerNetworkable*)
 T CEntityFactory<CTFProjectile_SpellKartBats>::GetEntitySize()
 T CEntityFactory<CTFProjectile_SpellKartOrb>::Create(char const*)
 T CEntityFactory<CTFProjectile_SpellKartOrb>::Destroy(IServerNetworkable*)
 T CEntityFactory<CTFProjectile_SpellKartOrb>::GetEntitySize()
 T CEntityFactory<CTFProjectile_SpellLightningOrb>::Create(char const*)
 T CEntityFactory<CTFProjectile_SpellLightningOrb>::Destroy(IServerNetworkable*)
 T CEntityFactory<CTFProjectile_SpellLightningOrb>::GetEntitySize()
 T CEntityFactory<CTFProjectile_SpellMeteorShower>::Create(char const*)
 T CEntityFactory<CTFProjectile_SpellMeteorShower>::Destroy(IServerNetworkable*)
 T CEntityFactory<CTFProjectile_SpellMeteorShower>::GetEntitySize()
 T CEntityFactory<CTFProjectile_SpellMirv>::Create(char const*)
 T CEntityFactory<CTFProjectile_SpellMirv>::Destroy(IServerNetworkable*)
 T CEntityFactory<CTFProjectile_SpellMirv>::GetEntitySize()
 T CEntityFactory<CTFProjectile_SpellPumpkin>::Create(char const*)
 T CEntityFactory<CTFProjectile_SpellPumpkin>::Destroy(IServerNetworkable*)
 T CEntityFactory<CTFProjectile_SpellPumpkin>::GetEntitySize()
 T CEntityFactory<CTFProjectile_SpellSpawnBoss>::Create(char const*)
 T CEntityFactory<CTFProjectile_SpellSpawnBoss>::Destroy(IServerNetworkable*)
 T CEntityFactory<CTFProjectile_SpellSpawnBoss>::GetEntitySize()
 T CEntityFactory<CTFProjectile_SpellSpawnHorde>::Create(char const*)
 T CEntityFactory<CTFProjectile_SpellSpawnHorde>::Destroy(IServerNetworkable*)
 T CEntityFactory<CTFProjectile_SpellSpawnHorde>::GetEntitySize()
 T CEntityFactory<CTFProjectile_SpellSpawnZombie>::Create(char const*)
 T CEntityFactory<CTFProjectile_SpellSpawnZombie>::Destroy(IServerNetworkable*)
 T CEntityFactory<CTFProjectile_SpellSpawnZombie>::GetEntitySize()
 T CEntityFactory<CTFProjectile_SpellTransposeTeleport>::Create(char const*)
 T CEntityFactory<CTFProjectile_SpellTransposeTeleport>::Destroy(IServerNetworkable*)
 T CEntityFactory<CTFProjectile_SpellTransposeTeleport>::GetEntitySize()
 T CEntityFactory<CTFProjectile_Syringe>::Create(char const*)
 T CEntityFactory<CTFProjectile_Syringe>::Destroy(IServerNetworkable*)
 T CEntityFactory<CTFProjectile_Syringe>::GetEntitySize()
 T CEntityFactory<CTFProjectile_Throwable>::Create(char const*)
 T CEntityFactory<CTFProjectile_Throwable>::Destroy(IServerNetworkable*)
 T CEntityFactory<CTFProjectile_Throwable>::GetEntitySize()
 T CEntityFactory<CTFProjectile_ThrowableBreadMonster>::Create(char const*)
 T CEntityFactory<CTFProjectile_ThrowableBreadMonster>::Destroy(IServerNetworkable*)
 T CEntityFactory<CTFProjectile_ThrowableBreadMonster>::GetEntitySize()
 T CEntityFactory<CTFProjectile_ThrowableBrick>::Create(char const*)
 T CEntityFactory<CTFProjectile_ThrowableBrick>::Destroy(IServerNetworkable*)
 T CEntityFactory<CTFProjectile_ThrowableBrick>::GetEntitySize()
 T CEntityFactory<CTFProjectile_ThrowableRepel>::Create(char const*)
 T CEntityFactory<CTFProjectile_ThrowableRepel>::Destroy(IServerNetworkable*)
 T CEntityFactory<CTFProjectile_ThrowableRepel>::GetEntitySize()
 T CEntityFactory<CTFPumpkinBomb>::Create(char const*)
 T CEntityFactory<CTFPumpkinBomb>::Destroy(IServerNetworkable*)
 T CEntityFactory<CTFPumpkinBomb>::GetEntitySize()
 T CEntityFactory<CTFRagdoll>::Create(char const*)
 T CEntityFactory<CTFRagdoll>::Destroy(IServerNetworkable*)
 T CEntityFactory<CTFRagdoll>::GetEntitySize()
 T CEntityFactory<CTFRaygun>::Create(char const*)
 T CEntityFactory<CTFRaygun>::Destroy(IServerNetworkable*)
 T CEntityFactory<CTFRaygun>::GetEntitySize()
 T CEntityFactory<CTFReviveMarker>::Create(char const*)
 T CEntityFactory<CTFReviveMarker>::Destroy(IServerNetworkable*)
 T CEntityFactory<CTFReviveMarker>::GetEntitySize()
 T CEntityFactory<CTFRevolver>::Create(char const*)
 T CEntityFactory<CTFRevolver>::Destroy(IServerNetworkable*)
 T CEntityFactory<CTFRevolver>::GetEntitySize()
 T CEntityFactory<CTFRobotArm>::Create(char const*)
 T CEntityFactory<CTFRobotArm>::Destroy(IServerNetworkable*)
 T CEntityFactory<CTFRobotArm>::GetEntitySize()
 T CEntityFactory<CTFRobotDestructionLogic>::Create(char const*)
 T CEntityFactory<CTFRobotDestructionLogic>::Destroy(IServerNetworkable*)
 T CEntityFactory<CTFRobotDestructionLogic>::GetEntitySize()
 T CEntityFactory<CTFRobotDestruction_Robot>::Create(char const*)
 T CEntityFactory<CTFRobotDestruction_Robot>::Destroy(IServerNetworkable*)
 T CEntityFactory<CTFRobotDestruction_Robot>::GetEntitySize()
 T CEntityFactory<CTFRobotDestruction_RobotGroup>::Create(char const*)
 T CEntityFactory<CTFRobotDestruction_RobotGroup>::Destroy(IServerNetworkable*)
 T CEntityFactory<CTFRobotDestruction_RobotGroup>::GetEntitySize()
 T CEntityFactory<CTFRobotDestruction_RobotSpawn>::Create(char const*)
 T CEntityFactory<CTFRobotDestruction_RobotSpawn>::Destroy(IServerNetworkable*)
 T CEntityFactory<CTFRobotDestruction_RobotSpawn>::GetEntitySize()
 T CEntityFactory<CTFRocketLauncher>::Create(char const*)
 T CEntityFactory<CTFRocketLauncher>::Destroy(IServerNetworkable*)
 T CEntityFactory<CTFRocketLauncher>::GetEntitySize()
 T CEntityFactory<CTFRocketLauncher_AirStrike>::Create(char const*)
 T CEntityFactory<CTFRocketLauncher_AirStrike>::Destroy(IServerNetworkable*)
 T CEntityFactory<CTFRocketLauncher_AirStrike>::GetEntitySize()
 T CEntityFactory<CTFRocketLauncher_DirectHit>::Create(char const*)
 T CEntityFactory<CTFRocketLauncher_DirectHit>::Destroy(IServerNetworkable*)
 T CEntityFactory<CTFRocketLauncher_DirectHit>::GetEntitySize()
 T CEntityFactory<CTFRune>::Create(char const*)
 T CEntityFactory<CTFRune>::Destroy(IServerNetworkable*)
 T CEntityFactory<CTFRune>::GetEntitySize()
 T CEntityFactory<CTFRuneTemp>::Create(char const*)
 T CEntityFactory<CTFRuneTemp>::Destroy(IServerNetworkable*)
 T CEntityFactory<CTFRuneTemp>::GetEntitySize()
 T CEntityFactory<CTFRuneTempCrit>::Create(char const*)
 T CEntityFactory<CTFRuneTempCrit>::Destroy(IServerNetworkable*)
 T CEntityFactory<CTFRuneTempCrit>::GetEntitySize()
 T CEntityFactory<CTFRuneTempUber>::Create(char const*)
 T CEntityFactory<CTFRuneTempUber>::Destroy(IServerNetworkable*)
 T CEntityFactory<CTFRuneTempUber>::GetEntitySize()
 T CEntityFactory<CTFSMG>::Create(char const*)
 T CEntityFactory<CTFSMG>::Destroy(IServerNetworkable*)
 T CEntityFactory<CTFSMG>::GetEntitySize()
 T CEntityFactory<CTFScatterGun>::Create(char const*)
 T CEntityFactory<CTFScatterGun>::Destroy(IServerNetworkable*)
 T CEntityFactory<CTFScatterGun>::GetEntitySize()
 T CEntityFactory<CTFShotgun>::Create(char const*)
 T CEntityFactory<CTFShotgun>::Destroy(IServerNetworkable*)
 T CEntityFactory<CTFShotgun>::GetEntitySize()
 T CEntityFactory<CTFShotgunBuildingRescue>::Create(char const*)
 T CEntityFactory<CTFShotgunBuildingRescue>::Destroy(IServerNetworkable*)
 T CEntityFactory<CTFShotgunBuildingRescue>::GetEntitySize()
 T CEntityFactory<CTFShotgun_HWG>::Create(char const*)
 T CEntityFactory<CTFShotgun_HWG>::Destroy(IServerNetworkable*)
 T CEntityFactory<CTFShotgun_HWG>::GetEntitySize()
 T CEntityFactory<CTFShotgun_Pyro>::Create(char const*)
 T CEntityFactory<CTFShotgun_Pyro>::Destroy(IServerNetworkable*)
 T CEntityFactory<CTFShotgun_Pyro>::GetEntitySize()
 T CEntityFactory<CTFShotgun_Revenge>::Create(char const*)
 T CEntityFactory<CTFShotgun_Revenge>::Destroy(IServerNetworkable*)
 T CEntityFactory<CTFShotgun_Revenge>::GetEntitySize()
 T CEntityFactory<CTFShotgun_Soldier>::Create(char const*)
 T CEntityFactory<CTFShotgun_Soldier>::Destroy(IServerNetworkable*)
 T CEntityFactory<CTFShotgun_Soldier>::GetEntitySize()
 T CEntityFactory<CTFShovel>::Create(char const*)
 T CEntityFactory<CTFShovel>::Destroy(IServerNetworkable*)
 T CEntityFactory<CTFShovel>::GetEntitySize()
 T CEntityFactory<CTFSniperRifle>::Create(char const*)
 T CEntityFactory<CTFSniperRifle>::Destroy(IServerNetworkable*)
 T CEntityFactory<CTFSniperRifle>::GetEntitySize()
 T CEntityFactory<CTFSniperRifleClassic>::Create(char const*)
 T CEntityFactory<CTFSniperRifleClassic>::Destroy(IServerNetworkable*)
 T CEntityFactory<CTFSniperRifleClassic>::GetEntitySize()
 T CEntityFactory<CTFSniperRifleDecap>::Create(char const*)
 T CEntityFactory<CTFSniperRifleDecap>::Destroy(IServerNetworkable*)
 T CEntityFactory<CTFSniperRifleDecap>::GetEntitySize()
 T CEntityFactory<CTFSodaPopper>::Create(char const*)
 T CEntityFactory<CTFSodaPopper>::Destroy(IServerNetworkable*)
 T CEntityFactory<CTFSodaPopper>::GetEntitySize()
 T CEntityFactory<CTFSpawner>::Create(char const*)
 T CEntityFactory<CTFSpawner>::Destroy(IServerNetworkable*)
 T CEntityFactory<CTFSpawner>::GetEntitySize()
 T CEntityFactory<CTFSpellBook>::Create(char const*)
 T CEntityFactory<CTFSpellBook>::Destroy(IServerNetworkable*)
 T CEntityFactory<CTFSpellBook>::GetEntitySize()
 T CEntityFactory<CTFSpell_MeteorShowerSpawner>::Create(char const*)
 T CEntityFactory<CTFSpell_MeteorShowerSpawner>::Destroy(IServerNetworkable*)
 T CEntityFactory<CTFSpell_MeteorShowerSpawner>::GetEntitySize()
 T CEntityFactory<CTFStickBomb>::Create(char const*)
 T CEntityFactory<CTFStickBomb>::Destroy(IServerNetworkable*)
 T CEntityFactory<CTFStickBomb>::GetEntitySize()
 T CEntityFactory<CTFStunBall>::Create(char const*)
 T CEntityFactory<CTFStunBall>::Destroy(IServerNetworkable*)
 T CEntityFactory<CTFStunBall>::GetEntitySize()
 T CEntityFactory<CTFSword>::Create(char const*)
 T CEntityFactory<CTFSword>::Destroy(IServerNetworkable*)
 T CEntityFactory<CTFSword>::GetEntitySize()
 T CEntityFactory<CTFSyringeGun>::Create(char const*)
 T CEntityFactory<CTFSyringeGun>::Destroy(IServerNetworkable*)
 T CEntityFactory<CTFSyringeGun>::GetEntitySize()
 T CEntityFactory<CTFTankBoss>::Create(char const*)
 T CEntityFactory<CTFTankBoss>::Destroy(IServerNetworkable*)
 T CEntityFactory<CTFTankBoss>::GetEntitySize()
 T CEntityFactory<CTFTankDestruction>::Create(char const*)
 T CEntityFactory<CTFTankDestruction>::Destroy(IServerNetworkable*)
 T CEntityFactory<CTFTankDestruction>::GetEntitySize()
 T CEntityFactory<CTFTargetDummy>::Create(char const*)
 T CEntityFactory<CTFTargetDummy>::Destroy(IServerNetworkable*)
 T CEntityFactory<CTFTargetDummy>::GetEntitySize()
 T CEntityFactory<CTFTauntProp>::Create(char const*)
 T CEntityFactory<CTFTauntProp>::Destroy(IServerNetworkable*)
 T CEntityFactory<CTFTauntProp>::GetEntitySize()
 T CEntityFactory<CTFTeam>::Create(char const*)
 T CEntityFactory<CTFTeam>::Destroy(IServerNetworkable*)
 T CEntityFactory<CTFTeam>::GetEntitySize()
 T CEntityFactory<CTFTeamSpawn>::Create(char const*)
 T CEntityFactory<CTFTeamSpawn>::Destroy(IServerNetworkable*)
 T CEntityFactory<CTFTeamSpawn>::GetEntitySize()
 T CEntityFactory<CTFTeleportLocation>::Create(char const*)
 T CEntityFactory<CTFTeleportLocation>::Destroy(IServerNetworkable*)
 T CEntityFactory<CTFTeleportLocation>::GetEntitySize()
 T CEntityFactory<CTFTrainingDynamicProp>::Create(char const*)
 T CEntityFactory<CTFTrainingDynamicProp>::Destroy(IServerNetworkable*)
 T CEntityFactory<CTFTrainingDynamicProp>::GetEntitySize()
 T CEntityFactory<CTFViewModel>::Create(char const*)
 T CEntityFactory<CTFViewModel>::Destroy(IServerNetworkable*)
 T CEntityFactory<CTFViewModel>::GetEntitySize()
 T CEntityFactory<CTFWeaponBase>::Create(char const*)
 T CEntityFactory<CTFWeaponBase>::Destroy(IServerNetworkable*)
 T CEntityFactory<CTFWeaponBase>::GetEntitySize()
 T CEntityFactory<CTFWeaponBaseGrenadeProj>::Create(char const*)
 T CEntityFactory<CTFWeaponBaseGrenadeProj>::Destroy(IServerNetworkable*)
 T CEntityFactory<CTFWeaponBaseGrenadeProj>::GetEntitySize()
 T CEntityFactory<CTFWeaponBaseMelee>::Create(char const*)
 T CEntityFactory<CTFWeaponBaseMelee>::Destroy(IServerNetworkable*)
 T CEntityFactory<CTFWeaponBaseMelee>::GetEntitySize()
 T CEntityFactory<CTFWeaponBaseMerasmusGrenade>::Create(char const*)
 T CEntityFactory<CTFWeaponBaseMerasmusGrenade>::Destroy(IServerNetworkable*)
 T CEntityFactory<CTFWeaponBaseMerasmusGrenade>::GetEntitySize()
 T CEntityFactory<CTFWeaponBuilder>::Create(char const*)
 T CEntityFactory<CTFWeaponBuilder>::Destroy(IServerNetworkable*)
 T CEntityFactory<CTFWeaponBuilder>::GetEntitySize()
 T CEntityFactory<CTFWeaponInvis>::Create(char const*)
 T CEntityFactory<CTFWeaponInvis>::Destroy(IServerNetworkable*)
 T CEntityFactory<CTFWeaponInvis>::GetEntitySize()
 T CEntityFactory<CTFWeaponPDAExpansion_Dispenser>::Create(char const*)
 T CEntityFactory<CTFWeaponPDAExpansion_Dispenser>::Destroy(IServerNetworkable*)
 T CEntityFactory<CTFWeaponPDAExpansion_Dispenser>::GetEntitySize()
 T CEntityFactory<CTFWeaponPDAExpansion_Teleporter>::Create(char const*)
 T CEntityFactory<CTFWeaponPDAExpansion_Teleporter>::Destroy(IServerNetworkable*)
 T CEntityFactory<CTFWeaponPDAExpansion_Teleporter>::GetEntitySize()
 T CEntityFactory<CTFWeaponPDA_Engineer_Build>::Create(char const*)
 T CEntityFactory<CTFWeaponPDA_Engineer_Build>::Destroy(IServerNetworkable*)
 T CEntityFactory<CTFWeaponPDA_Engineer_Build>::GetEntitySize()
 T CEntityFactory<CTFWeaponPDA_Engineer_Destroy>::Create(char const*)
 T CEntityFactory<CTFWeaponPDA_Engineer_Destroy>::Destroy(IServerNetworkable*)
 T CEntityFactory<CTFWeaponPDA_Engineer_Destroy>::GetEntitySize()
 T CEntityFactory<CTFWeaponPDA_Spy>::Create(char const*)
 T CEntityFactory<CTFWeaponPDA_Spy>::Destroy(IServerNetworkable*)
 T CEntityFactory<CTFWeaponPDA_Spy>::GetEntitySize()
 T CEntityFactory<CTFWeaponSapper>::Create(char const*)
 T CEntityFactory<CTFWeaponSapper>::Destroy(IServerNetworkable*)
 T CEntityFactory<CTFWeaponSapper>::GetEntitySize()
 T CEntityFactory<CTFWearable>::Create(char const*)
 T CEntityFactory<CTFWearable>::Destroy(IServerNetworkable*)
 T CEntityFactory<CTFWearable>::GetEntitySize()
 T CEntityFactory<CTFWearableDemoShield>::Create(char const*)
 T CEntityFactory<CTFWearableDemoShield>::Destroy(IServerNetworkable*)
 T CEntityFactory<CTFWearableDemoShield>::GetEntitySize()
 T CEntityFactory<CTFWearableLevelableItem>::Create(char const*)
 T CEntityFactory<CTFWearableLevelableItem>::Destroy(IServerNetworkable*)
 T CEntityFactory<CTFWearableLevelableItem>::GetEntitySize()
 T CEntityFactory<CTFWearableRobotArm>::Create(char const*)
 T CEntityFactory<CTFWearableRobotArm>::Destroy(IServerNetworkable*)
 T CEntityFactory<CTFWearableRobotArm>::GetEntitySize()
 T CEntityFactory<CTFWearableVM>::Create(char const*)
 T CEntityFactory<CTFWearableVM>::Destroy(IServerNetworkable*)
 T CEntityFactory<CTFWearableVM>::GetEntitySize()
 T CEntityFactory<CTFWrench>::Create(char const*)
 T CEntityFactory<CTFWrench>::Destroy(IServerNetworkable*)
 T CEntityFactory<CTFWrench>::GetEntitySize()
 T CEntityFactory<CTankTargetChange>::Create(char const*)
 T CEntityFactory<CTankTargetChange>::Destroy(IServerNetworkable*)
 T CEntityFactory<CTankTargetChange>::GetEntitySize()
 T CEntityFactory<CTankTrainAI>::Create(char const*)
 T CEntityFactory<CTankTrainAI>::Destroy(IServerNetworkable*)
 T CEntityFactory<CTankTrainAI>::GetEntitySize()
 T CEntityFactory<CTargetCDAudioRep>::Create(char const*)
 T CEntityFactory<CTargetCDAudioRep>::Destroy(IServerNetworkable*)
 T CEntityFactory<CTargetCDAudioRep>::GetEntitySize()
 T CEntityFactory<CTargetChangeGravity>::Create(char const*)
 T CEntityFactory<CTargetChangeGravity>::Destroy(IServerNetworkable*)
 T CEntityFactory<CTargetChangeGravity>::GetEntitySize()
 T CEntityFactory<CTeam>::Create(char const*)
 T CEntityFactory<CTeam>::Destroy(IServerNetworkable*)
 T CEntityFactory<CTeam>::GetEntitySize()
 T CEntityFactory<CTeamControlPoint>::Create(char const*)
 T CEntityFactory<CTeamControlPoint>::Destroy(IServerNetworkable*)
 T CEntityFactory<CTeamControlPoint>::GetEntitySize()
 T CEntityFactory<CTeamControlPointMaster>::Create(char const*)
 T CEntityFactory<CTeamControlPointMaster>::Destroy(IServerNetworkable*)
 T CEntityFactory<CTeamControlPointMaster>::GetEntitySize()
 T CEntityFactory<CTeamControlPointRound>::Create(char const*)
 T CEntityFactory<CTeamControlPointRound>::Destroy(IServerNetworkable*)
 T CEntityFactory<CTeamControlPointRound>::GetEntitySize()
 T CEntityFactory<CTeamRoundTimer>::Create(char const*)
 T CEntityFactory<CTeamRoundTimer>::Destroy(IServerNetworkable*)
 T CEntityFactory<CTeamRoundTimer>::GetEntitySize()
 T CEntityFactory<CTeamTrainWatcher>::Create(char const*)
 T CEntityFactory<CTeamTrainWatcher>::Destroy(IServerNetworkable*)
 T CEntityFactory<CTeamTrainWatcher>::GetEntitySize()
 T CEntityFactory<CTeamplayRoundWin>::Create(char const*)
 T CEntityFactory<CTeamplayRoundWin>::Destroy(IServerNetworkable*)
 T CEntityFactory<CTeamplayRoundWin>::GetEntitySize()
 T CEntityFactory<CTeleportVortex>::Create(char const*)
 T CEntityFactory<CTeleportVortex>::Destroy(IServerNetworkable*)
 T CEntityFactory<CTeleportVortex>::GetEntitySize()
 T CEntityFactory<CTempEntTester>::Create(char const*)
 T CEntityFactory<CTempEntTester>::Destroy(IServerNetworkable*)
 T CEntityFactory<CTempEntTester>::GetEntitySize()
 T CEntityFactory<CTemplateNPCMaker>::Create(char const*)
 T CEntityFactory<CTemplateNPCMaker>::Destroy(IServerNetworkable*)
 T CEntityFactory<CTemplateNPCMaker>::GetEntitySize()
 T CEntityFactory<CTesla>::Create(char const*)
 T CEntityFactory<CTesla>::Destroy(IServerNetworkable*)
 T CEntityFactory<CTesla>::GetEntitySize()
 T CEntityFactory<CTestEffect>::Create(char const*)
 T CEntityFactory<CTestEffect>::Destroy(IServerNetworkable*)
 T CEntityFactory<CTestEffect>::GetEntitySize()
 T CEntityFactory<CTestTraceline>::Create(char const*)
 T CEntityFactory<CTestTraceline>::Destroy(IServerNetworkable*)
 T CEntityFactory<CTestTraceline>::GetEntitySize()
 T CEntityFactory<CTest_ProxyToggle_Networkable>::Create(char const*)
 T CEntityFactory<CTest_ProxyToggle_Networkable>::Destroy(IServerNetworkable*)
 T CEntityFactory<CTest_ProxyToggle_Networkable>::GetEntitySize()
 T CEntityFactory<CTextureToggle>::Create(char const*)
 T CEntityFactory<CTextureToggle>::Destroy(IServerNetworkable*)
 T CEntityFactory<CTextureToggle>::GetEntitySize()
 T CEntityFactory<CTimerEntity>::Create(char const*)
 T CEntityFactory<CTimerEntity>::Destroy(IServerNetworkable*)
 T CEntityFactory<CTimerEntity>::GetEntitySize()
 T CEntityFactory<CTrainingAnnotation>::Create(char const*)
 T CEntityFactory<CTrainingAnnotation>::Destroy(IServerNetworkable*)
 T CEntityFactory<CTrainingAnnotation>::GetEntitySize()
 T CEntityFactory<CTrainingModeLogic>::Create(char const*)
 T CEntityFactory<CTrainingModeLogic>::Destroy(IServerNetworkable*)
 T CEntityFactory<CTrainingModeLogic>::GetEntitySize()
 T CEntityFactory<CTriggerAddOrRemoveTFPlayerAttributes>::Create(char const*)
 T CEntityFactory<CTriggerAddOrRemoveTFPlayerAttributes>::Destroy(IServerNetworkable*)
 T CEntityFactory<CTriggerAddOrRemoveTFPlayerAttributes>::GetEntitySize()
 T CEntityFactory<CTriggerAddTFPlayerCondition>::Create(char const*)
 T CEntityFactory<CTriggerAddTFPlayerCondition>::Destroy(IServerNetworkable*)
 T CEntityFactory<CTriggerAddTFPlayerCondition>::GetEntitySize()
 T CEntityFactory<CTriggerApplyImpulse>::Create(char const*)
 T CEntityFactory<CTriggerApplyImpulse>::Destroy(IServerNetworkable*)
 T CEntityFactory<CTriggerApplyImpulse>::GetEntitySize()
 T CEntityFactory<CTriggerAreaCapture>::Create(char const*)
 T CEntityFactory<CTriggerAreaCapture>::Destroy(IServerNetworkable*)
 T CEntityFactory<CTriggerAreaCapture>::GetEntitySize()
 T CEntityFactory<CTriggerBotTag>::Create(char const*)
 T CEntityFactory<CTriggerBotTag>::Destroy(IServerNetworkable*)
 T CEntityFactory<CTriggerBotTag>::GetEntitySize()
 T CEntityFactory<CTriggerBrush>::Create(char const*)
 T CEntityFactory<CTriggerBrush>::Destroy(IServerNetworkable*)
 T CEntityFactory<CTriggerBrush>::GetEntitySize()
 T CEntityFactory<CTriggerCDAudio>::Create(char const*)
 T CEntityFactory<CTriggerCDAudio>::Destroy(IServerNetworkable*)
 T CEntityFactory<CTriggerCDAudio>::GetEntitySize()
 T CEntityFactory<CTriggerCamera>::Create(char const*)
 T CEntityFactory<CTriggerCamera>::Destroy(IServerNetworkable*)
 T CEntityFactory<CTriggerCamera>::GetEntitySize()
 T CEntityFactory<CTriggerCatapult>::Create(char const*)
 T CEntityFactory<CTriggerCatapult>::Destroy(IServerNetworkable*)
 T CEntityFactory<CTriggerCatapult>::GetEntitySize()
 T CEntityFactory<CTriggerGravity>::Create(char const*)
 T CEntityFactory<CTriggerGravity>::Destroy(IServerNetworkable*)
 T CEntityFactory<CTriggerGravity>::GetEntitySize()
 T CEntityFactory<CTriggerHurt>::Create(char const*)
 T CEntityFactory<CTriggerHurt>::Destroy(IServerNetworkable*)
 T CEntityFactory<CTriggerHurt>::GetEntitySize()
 T CEntityFactory<CTriggerIgnite>::Create(char const*)
 T CEntityFactory<CTriggerIgnite>::Destroy(IServerNetworkable*)
 T CEntityFactory<CTriggerIgnite>::GetEntitySize()
 T CEntityFactory<CTriggerIgniteArrows>::Create(char const*)
 T CEntityFactory<CTriggerIgniteArrows>::Destroy(IServerNetworkable*)
 T CEntityFactory<CTriggerIgniteArrows>::GetEntitySize()
 T CEntityFactory<CTriggerImpact>::Create(char const*)
 T CEntityFactory<CTriggerImpact>::Destroy(IServerNetworkable*)
 T CEntityFactory<CTriggerImpact>::GetEntitySize()
 T CEntityFactory<CTriggerLook>::Create(char const*)
 T CEntityFactory<CTriggerLook>::Destroy(IServerNetworkable*)
 T CEntityFactory<CTriggerLook>::GetEntitySize()
 T CEntityFactory<CTriggerMultiple>::Create(char const*)
 T CEntityFactory<CTriggerMultiple>::Destroy(IServerNetworkable*)
 T CEntityFactory<CTriggerMultiple>::GetEntitySize()
 T CEntityFactory<CTriggerOnce>::Create(char const*)
 T CEntityFactory<CTriggerOnce>::Destroy(IServerNetworkable*)
 T CEntityFactory<CTriggerOnce>::GetEntitySize()
 T CEntityFactory<CTriggerParticle>::Create(char const*)
 T CEntityFactory<CTriggerParticle>::Destroy(IServerNetworkable*)
 T CEntityFactory<CTriggerParticle>::GetEntitySize()
 T CEntityFactory<CTriggerPasstimeBall>::Create(char const*)
 T CEntityFactory<CTriggerPasstimeBall>::Destroy(IServerNetworkable*)
 T CEntityFactory<CTriggerPasstimeBall>::GetEntitySize()
 T CEntityFactory<CTriggerPlayerMovement>::Create(char const*)
 T CEntityFactory<CTriggerPlayerMovement>::Destroy(IServerNetworkable*)
 T CEntityFactory<CTriggerPlayerMovement>::GetEntitySize()
 T CEntityFactory<CTriggerPlayerRespawnOverride>::Create(char const*)
 T CEntityFactory<CTriggerPlayerRespawnOverride>::Destroy(IServerNetworkable*)
 T CEntityFactory<CTriggerPlayerRespawnOverride>::GetEntitySize()
 T CEntityFactory<CTriggerProximity>::Create(char const*)
 T CEntityFactory<CTriggerProximity>::Destroy(IServerNetworkable*)
 T CEntityFactory<CTriggerProximity>::GetEntitySize()
 T CEntityFactory<CTriggerPush>::Create(char const*)
 T CEntityFactory<CTriggerPush>::Destroy(IServerNetworkable*)
 T CEntityFactory<CTriggerPush>::GetEntitySize()
 T CEntityFactory<CTriggerRemove>::Create(char const*)
 T CEntityFactory<CTriggerRemove>::Destroy(IServerNetworkable*)
 T CEntityFactory<CTriggerRemove>::GetEntitySize()
 T CEntityFactory<CTriggerRemoveTFPlayerCondition>::Create(char const*)
 T CEntityFactory<CTriggerRemoveTFPlayerCondition>::Destroy(IServerNetworkable*)
 T CEntityFactory<CTriggerRemoveTFPlayerCondition>::GetEntitySize()
 T CEntityFactory<CTriggerSave>::Create(char const*)
 T CEntityFactory<CTriggerSave>::Destroy(IServerNetworkable*)
 T CEntityFactory<CTriggerSave>::GetEntitySize()
 T CEntityFactory<CTriggerSoundscape>::Create(char const*)
 T CEntityFactory<CTriggerSoundscape>::Destroy(IServerNetworkable*)
 T CEntityFactory<CTriggerSoundscape>::GetEntitySize()
 T CEntityFactory<CTriggerStun>::Create(char const*)
 T CEntityFactory<CTriggerStun>::Destroy(IServerNetworkable*)
 T CEntityFactory<CTriggerStun>::GetEntitySize()
 T CEntityFactory<CTriggerTeleport>::Create(char const*)
 T CEntityFactory<CTriggerTeleport>::Destroy(IServerNetworkable*)
 T CEntityFactory<CTriggerTeleport>::GetEntitySize()
 T CEntityFactory<CTriggerTeleportRelative>::Create(char const*)
 T CEntityFactory<CTriggerTeleportRelative>::Destroy(IServerNetworkable*)
 T CEntityFactory<CTriggerTeleportRelative>::GetEntitySize()
 T CEntityFactory<CTriggerTimerDoor>::Create(char const*)
 T CEntityFactory<CTriggerTimerDoor>::Destroy(IServerNetworkable*)
 T CEntityFactory<CTriggerTimerDoor>::GetEntitySize()
 T CEntityFactory<CTriggerToggleSave>::Create(char const*)
 T CEntityFactory<CTriggerToggleSave>::Destroy(IServerNetworkable*)
 T CEntityFactory<CTriggerToggleSave>::GetEntitySize()
 T CEntityFactory<CTriggerVPhysicsMotion>::Create(char const*)
 T CEntityFactory<CTriggerVPhysicsMotion>::Destroy(IServerNetworkable*)
 T CEntityFactory<CTriggerVPhysicsMotion>::GetEntitySize()
 T CEntityFactory<CTriggerVolume>::Create(char const*)
 T CEntityFactory<CTriggerVolume>::Destroy(IServerNetworkable*)
 T CEntityFactory<CTriggerVolume>::GetEntitySize()
 T CEntityFactory<CTriggerWind>::Create(char const*)
 T CEntityFactory<CTriggerWind>::Destroy(IServerNetworkable*)
 T CEntityFactory<CTriggerWind>::GetEntitySize()
 T CEntityFactory<CUpgrades>::Create(char const*)
 T CEntityFactory<CUpgrades>::Destroy(IServerNetworkable*)
 T CEntityFactory<CUpgrades>::GetEntitySize()
 T CEntityFactory<CVGuiScreen>::Create(char const*)
 T CEntityFactory<CVGuiScreen>::Destroy(IServerNetworkable*)
 T CEntityFactory<CVGuiScreen>::GetEntitySize()
 T CEntityFactory<CVoteController>::Create(char const*)
 T CEntityFactory<CVoteController>::Destroy(IServerNetworkable*)
 T CEntityFactory<CVoteController>::GetEntitySize()
 T CEntityFactory<CWC_UpdateIgnoreList>::Create(char const*)
 T CEntityFactory<CWC_UpdateIgnoreList>::Destroy(IServerNetworkable*)
 T CEntityFactory<CWC_UpdateIgnoreList>::GetEntitySize()
 T CEntityFactory<CWaterBullet>::Create(char const*)
 T CEntityFactory<CWaterBullet>::Destroy(IServerNetworkable*)
 T CEntityFactory<CWaterBullet>::GetEntitySize()
 T CEntityFactory<CWaterLODControl>::Create(char const*)
 T CEntityFactory<CWaterLODControl>::Destroy(IServerNetworkable*)
 T CEntityFactory<CWaterLODControl>::GetEntitySize()
 T CEntityFactory<CWeaponIFMBase>::Create(char const*)
 T CEntityFactory<CWeaponIFMBase>::Destroy(IServerNetworkable*)
 T CEntityFactory<CWeaponIFMBase>::GetEntitySize()
 T CEntityFactory<CWeaponIFMBaseCamera>::Create(char const*)
 T CEntityFactory<CWeaponIFMBaseCamera>::Destroy(IServerNetworkable*)
 T CEntityFactory<CWeaponIFMBaseCamera>::GetEntitySize()
 T CEntityFactory<CWeaponIFMSteadyCam>::Create(char const*)
 T CEntityFactory<CWeaponIFMSteadyCam>::Destroy(IServerNetworkable*)
 T CEntityFactory<CWeaponIFMSteadyCam>::GetEntitySize()
 T CEntityFactory<CWeaponMedigun>::Create(char const*)
 T CEntityFactory<CWeaponMedigun>::Destroy(IServerNetworkable*)
 T CEntityFactory<CWeaponMedigun>::GetEntitySize()
 T CEntityFactory<CWeightButton>::Create(char const*)
 T CEntityFactory<CWeightButton>::Destroy(IServerNetworkable*)
 T CEntityFactory<CWeightButton>::GetEntitySize()
 T CEntityFactory<CWheelOfDoom>::Create(char const*)
 T CEntityFactory<CWheelOfDoom>::Destroy(IServerNetworkable*)
 T CEntityFactory<CWheelOfDoom>::GetEntitySize()
 T CEntityFactory<CWheelOfDoomSpiral>::Create(char const*)
 T CEntityFactory<CWheelOfDoomSpiral>::Destroy(IServerNetworkable*)
 T CEntityFactory<CWheelOfDoomSpiral>::GetEntitySize()
 T CEntityFactory<CWindowPane>::Create(char const*)
 T CEntityFactory<CWindowPane>::Destroy(IServerNetworkable*)
 T CEntityFactory<CWindowPane>::GetEntitySize()
 T CEntityFactory<CWorld>::Create(char const*)
 T CEntityFactory<CWorld>::Destroy(IServerNetworkable*)
 T CEntityFactory<CWorld>::GetEntitySize()
 T CEntityFactory<CWorldItem>::Create(char const*)
 T CEntityFactory<CWorldItem>::Destroy(IServerNetworkable*)
 T CEntityFactory<CWorldItem>::GetEntitySize()
 T CEntityFactory<CZombie>::Create(char const*)
 T CEntityFactory<CZombie>::Destroy(IServerNetworkable*)
 T CEntityFactory<CZombie>::GetEntitySize()
 T CEntityFactory<CZombieSpawner>::Create(char const*)
 T CEntityFactory<CZombieSpawner>::Destroy(IServerNetworkable*)
 T CEntityFactory<CZombieSpawner>::GetEntitySize()
 T CEntityFactory<DustTrail>::Create(char const*)
 T CEntityFactory<DustTrail>::Destroy(IServerNetworkable*)
 T CEntityFactory<DustTrail>::GetEntitySize()
 T CEntityFactory<FilterDamageType>::Create(char const*)
 T CEntityFactory<FilterDamageType>::Destroy(IServerNetworkable*)
 T CEntityFactory<FilterDamageType>::GetEntitySize()
 T CEntityFactory<FilterDamagedByWeaponInSlot>::Create(char const*)
 T CEntityFactory<FilterDamagedByWeaponInSlot>::Destroy(IServerNetworkable*)
 T CEntityFactory<FilterDamagedByWeaponInSlot>::GetEntitySize()
 T CEntityFactory<FilterTeam>::Create(char const*)
 T CEntityFactory<FilterTeam>::Destroy(IServerNetworkable*)
 T CEntityFactory<FilterTeam>::GetEntitySize()
 T CEntityFactory<MovieExplosion>::Create(char const*)
 T CEntityFactory<MovieExplosion>::Destroy(IServerNetworkable*)
 T CEntityFactory<MovieExplosion>::GetEntitySize()
 T CEntityFactory<ParticleSmokeGrenade>::Create(char const*)
 T CEntityFactory<ParticleSmokeGrenade>::Destroy(IServerNetworkable*)
 T CEntityFactory<ParticleSmokeGrenade>::GetEntitySize()
 T CEntityFactory<RocketTrail>::Create(char const*)
 T CEntityFactory<RocketTrail>::Destroy(IServerNetworkable*)
 T CEntityFactory<RocketTrail>::GetEntitySize()
 T CEntityFactory<SmokeTrail>::Create(char const*)
 T CEntityFactory<SmokeTrail>::Destroy(IServerNetworkable*)
 T CEntityFactory<SmokeTrail>::GetEntitySize()
 T CEntityFactory<SporeExplosion>::Create(char const*)
 T CEntityFactory<SporeExplosion>::Destroy(IServerNetworkable*)
 T CEntityFactory<SporeExplosion>::GetEntitySize()
 T CEntityFactory<SporeTrail>::Create(char const*)
 T CEntityFactory<SporeTrail>::Destroy(IServerNetworkable*)
 T CEntityFactory<SporeTrail>::GetEntitySize()
 T CEntityFactoryDictionary::Create(char const*)
 T CEntityFactoryDictionary::Destroy(char const*, IServerNetworkable*)
 T CEntityFactoryDictionary::FindFactory(char const*)
 T CEntityFactoryDictionary::GetCannonicalName(char const*)
 T CEntityFactoryDictionary::InstallFactory(IEntityFactory*, char const*)
 T CEntityFactoryDictionary::~CEntityFactoryDictionary()
 T CEntityFlame::AttachToEntity(CBaseEntity*)
 T CEntityFlame::CEntityFlame()
 T CEntityFlame::Create(CBaseEntity*, bool)
 T CEntityFlame::FlameThink()
 T CEntityFlame::GetDataDescMap()
 T CEntityFlame::GetHitboxFireScale()
 T CEntityFlame::GetNumHitboxFires()
 T CEntityFlame::GetRemainingLife()
 T CEntityFlame::GetServerClass()
 T CEntityFlame::InputIgnite(inputdata_t&)
 T CEntityFlame::Precache()
 T CEntityFlame::SetHitboxFireScale(float)
 T CEntityFlame::SetLifetime(float)
 T CEntityFlame::SetNumHitboxFires(int)
 T CEntityFlame::SetUseHitboxes(bool)
 T CEntityFlame::UpdateOnRemove()
 T CEntityFlame::YouForgotToImplementOrDeclareServerClass()
 T CEntityFlame::~CEntityFlame()
 T CEntityList::AddEntity(CBaseEntity*)
 T CEntityList::CEntityList()
 T CEntityList::DeleteEntity(CBaseEntity*)
 T CEntityList::~CEntityList()
 T CEntityListSystem::FrameUpdatePostEntityThink()
 T CEntityListSystem::LevelInitPreEntity()
 T CEntityListSystem::LevelShutdownPostEntity()
 T CEntityListSystem::LevelShutdownPreEntity()
 T CEntityListSystem::~CEntityListSystem()
 T CEntityMapData::CurrentBufferPosition()
 T CEntityMapData::ExtractValue(char const*, char*)
 T CEntityMapData::GetFirstKey(char*, char*)
 T CEntityMapData::GetNextKey(char*, char*)
 T CEntityMapData::SetValue(char const*, char*, int)
 T CEntityParticleTrail* _CreateEntityTemplate<CEntityParticleTrail>(CEntityParticleTrail*, char const*)
 T CEntityParticleTrail::Create(CBaseEntity*, EntityParticleTrailInfo_t const&, CBaseEntity*)
 T CEntityParticleTrail::Destroy(CBaseEntity*, EntityParticleTrailInfo_t const&)
 T CEntityParticleTrail::GetDataDescMap()
 T CEntityParticleTrail::GetServerClass()
 T CEntityParticleTrail::NetworkVar_m_Info::NetworkStateChanged()
 T CEntityParticleTrail::NetworkVar_m_Info::NetworkStateChanged(void*)
 T CEntityParticleTrail::NotifySystemEvent(CBaseEntity*, notify_system_event_t, notify_system_event_params_t const&)
 T CEntityParticleTrail::SetTransmit(CCheckTransmitInfo*, bool)
 T CEntityParticleTrail::Spawn()
 T CEntityParticleTrail::UpdateOnRemove()
 T CEntityParticleTrail::YouForgotToImplementOrDeclareServerClass()
 T CEntityParticleTrail::~CEntityParticleTrail()
 T CEntitySaveRestoreBlockHandler::DoRestoreEntity(CBaseEntity*, IRestore*)
 T CEntitySaveRestoreBlockHandler::FindGlobalEntity(string_t, string_t)
 T CEntitySaveRestoreBlockHandler::GetBlockName()
 T CEntitySaveRestoreBlockHandler::PostRestore()
 T CEntitySaveRestoreBlockHandler::PostSave()
 T CEntitySaveRestoreBlockHandler::PreRestore()
 T CEntitySaveRestoreBlockHandler::PreSave(CSaveRestoreData*)
 T CEntitySaveRestoreBlockHandler::ReadRestoreHeaders(IRestore*)
 T CEntitySaveRestoreBlockHandler::Restore(IRestore*, bool)
 T CEntitySaveRestoreBlockHandler::RestoreEntity(CBaseEntity*, IRestore*, entitytable_t*)
 T CEntitySaveRestoreBlockHandler::RestoreGlobalEntity(CBaseEntity*, CSaveRestoreData*, entitytable_t*)
 T CEntitySaveRestoreBlockHandler::Save(ISave*)
 T CEntitySaveRestoreBlockHandler::SaveInitEntities(CSaveRestoreData*)
 T CEntitySaveRestoreBlockHandler::WriteSaveHeaders(ISave*)
 T CEntitySaveUtils::AddLevelTransitionSaveDependency(CBaseEntity*, CBaseEntity*)
 T CEntitySaveUtils::GetEntityDependencies(CBaseEntity*, int, CBaseEntity**)
 T CEntitySaveUtils::GetEntityDependencyCount(CBaseEntity*)
 T CEntitySpawnManager::Activate()
 T CEntitySpawnManager::GetDataDescMap()
 T CEntitySpawnManager::GetRandomUnusedIndex()
 T CEntitySpawnManager::RegisterSpawnPoint(CEntitySpawnPoint*)
 T CEntitySpawnManager::Spawn()
 T CEntitySpawnManager::SpawnAllEntities()
 T CEntitySpawnManager::SpawnEntityAt(int)
 T CEntitySpawnManager::~CEntitySpawnManager()
 T CEntitySpawnPoint::GetDataDescMap()
 T CEntitySpawnPoint::OnEntityDeleted(CBaseEntity*)
 T CEntitySpawnPoint::RespawnNotifyThink()
 T CEntitySpawnPoint::Spawn()
 T CEntitySpawnPoint::UpdateOnRemove()
 T CEntitySpawnPoint::~CEntitySpawnPoint()
 T CEntitySphereQuery::CEntitySphereQuery(Vector const&, float, int)
 T CEntitySphereQuery::GetCurrentEntity()
 T CEntityTouchManager::FrameUpdatePostEntityThink()
 T CEntityTouchManager::OnEntityCreated(CBaseEntity*)
 T CEntityTouchManager::OnEntityDeleted(CBaseEntity*)
 T CEntityTouchManager::~CEntityTouchManager()
 T CEnvBeam::Activate()
 T CEnvBeam::BeamUpdateVars()
 T CEnvBeam::GetDataDescMap()
 T CEnvBeam::GetDecalName()
 T CEnvBeam::InputStrikeOnce(inputdata_t&)
 T CEnvBeam::InputToggle(inputdata_t&)
 T CEnvBeam::InputTurnOff(inputdata_t&)
 T CEnvBeam::InputTurnOn(inputdata_t&)
 T CEnvBeam::PassesTouchFilters(CBaseEntity*)
 T CEnvBeam::Precache()
 T CEnvBeam::RandomArea()
 T CEnvBeam::RandomPoint(Vector const&)
 T CEnvBeam::Spawn()
 T CEnvBeam::Strike()
 T CEnvBeam::StrikeThink()
 T CEnvBeam::TurnOn()
 T CEnvBeam::UpdateThink()
 T CEnvBeam::Zap(Vector const&, Vector const&)
 T CEnvBeam::~CEnvBeam()
 T CEnvBeverage::GetDataDescMap()
 T CEnvBeverage::InputActivate(inputdata_t&)
 T CEnvBeverage::KeyValue(char const*, char const*)
 T CEnvBeverage::Precache()
 T CEnvBeverage::Spawn()
 T CEnvBeverage::Use(CBaseEntity*, CBaseEntity*, USE_TYPE, float)
 T CEnvBeverage::~CEnvBeverage()
 T CEnvDetailController::GetServerClass()
 T CEnvDetailController::KeyValue(char const*, char const*)
 T CEnvDetailController::UpdateTransmitState()
 T CEnvDetailController::YouForgotToImplementOrDeclareServerClass()
 T CEnvDetailController::~CEnvDetailController()
 T CEnvDustPuff::GetDataDescMap()
 T CEnvDustPuff::InputSpawnDust(inputdata_t&)
 T CEnvDustPuff::~CEnvDustPuff()
 T CEnvEffectsScript::GetDataDescMap()
 T CEnvEffectsScript::HandleAnimEvent(animevent_t*)
 T CEnvEffectsScript::InputSetSequence(inputdata_t&)
 T CEnvEffectsScript::ParseNewEffect()
 T CEnvEffectsScript::ParseScriptFile()
 T CEnvEffectsScript::Precache()
 T CEnvEffectsScript::Spawn()
 T CEnvEffectsScript::SpriteEffectEvent(CEffectScriptElement*)
 T CEnvEffectsScript::Think()
 T CEnvEffectsScript::TrailEffectEvent(CEffectScriptElement*)
 T CEnvEffectsScript::UpdateTransmitState()
 T CEnvEffectsScript::~CEnvEffectsScript()
 T CEnvEntityMaker::Activate()
 T CEnvEntityMaker::CheckSpawnThink()
 T CEnvEntityMaker::GetDataDescMap()
 T CEnvEntityMaker::HasRoomToSpawn()
 T CEnvEntityMaker::InputForceSpawn(inputdata_t&)
 T CEnvEntityMaker::InputForceSpawnAtEntityOrigin(inputdata_t&)
 T CEnvEntityMaker::IsPlayerLooking()
 T CEnvEntityMaker::Spawn()
 T CEnvEntityMaker::SpawnEntity(Vector, QAngle)
 T CEnvEntityMaker::~CEnvEntityMaker()
 T CEnvExplosion::DrawDebugTextOverlays()
 T CEnvExplosion::GetDataDescMap()
 T CEnvExplosion::InputExplode(inputdata_t&)
 T CEnvExplosion::KeyValue(char const*, char const*)
 T CEnvExplosion::Precache()
 T CEnvExplosion::Smoke()
 T CEnvExplosion::Spawn()
 T CEnvExplosion::~CEnvExplosion()
 T CEnvFade::DrawDebugTextOverlays()
 T CEnvFade::GetDataDescMap()
 T CEnvFade::InputFade(inputdata_t&)
 T CEnvFade::Spawn()
 T CEnvFade::~CEnvFade()
 T CEnvFireSensor::GetDataDescMap()
 T CEnvFireSensor::InputDisable(inputdata_t&)
 T CEnvFireSensor::InputEnable(inputdata_t&)
 T CEnvFireSensor::Spawn()
 T CEnvFireSensor::Think()
 T CEnvFireSensor::~CEnvFireSensor()
 T CEnvFireSource::GetDataDescMap()
 T CEnvFireSource::InputDisable(inputdata_t&)
 T CEnvFireSource::InputEnable(inputdata_t&)
 T CEnvFireSource::Spawn()
 T CEnvFireSource::Think()
 T CEnvFireSource::~CEnvFireSource()
 T CEnvFunnel::GetDataDescMap()
 T CEnvFunnel::Precache()
 T CEnvFunnel::Spawn()
 T CEnvFunnel::Use(CBaseEntity*, CBaseEntity*, USE_TYPE, float)
 T CEnvFunnel::~CEnvFunnel()
 T CEnvGlobal::DrawDebugTextOverlays()
 T CEnvGlobal::GetDataDescMap()
 T CEnvGlobal::InputAddToCounter(inputdata_t&)
 T CEnvGlobal::InputGetCounter(inputdata_t&)
 T CEnvGlobal::InputRemove(inputdata_t&)
 T CEnvGlobal::InputSetCounter(inputdata_t&)
 T CEnvGlobal::InputToggle(inputdata_t&)
 T CEnvGlobal::InputTurnOff(inputdata_t&)
 T CEnvGlobal::InputTurnOn(inputdata_t&)
 T CEnvGlobal::Spawn()
 T CEnvGlobal::~CEnvGlobal()
 T CEnvGunfire::Activate()
 T CEnvGunfire::GetDataDescMap()
 T CEnvGunfire::InputDisable(inputdata_t&)
 T CEnvGunfire::InputEnable(inputdata_t&)
 T CEnvGunfire::Precache()
 T CEnvGunfire::ShootThink()
 T CEnvGunfire::Spawn()
 T CEnvGunfire::UpdateTarget()
 T CEnvGunfire::~CEnvGunfire()
 T CEnvHudHint::GetDataDescMap()
 T CEnvHudHint::InputHideHudHint(inputdata_t&)
 T CEnvHudHint::InputShowHudHint(inputdata_t&)
 T CEnvHudHint::Precache()
 T CEnvHudHint::Spawn()
 T CEnvHudHint::~CEnvHudHint()
 T CEnvLaser::FireAtPoint(CGameTrace&)
 T CEnvLaser::GetDataDescMap()
 T CEnvLaser::InputToggle(inputdata_t&)
 T CEnvLaser::InputTurnOff(inputdata_t&)
 T CEnvLaser::InputTurnOn(inputdata_t&)
 T CEnvLaser::KeyValue(char const*, char const*)
 T CEnvLaser::Precache()
 T CEnvLaser::Spawn()
 T CEnvLaser::StrikeThink()
 T CEnvLaser::TurnOn()
 T CEnvLaser::~CEnvLaser()
 T CEnvLight::KeyValue(char const*, char const*)
 T CEnvLight::Spawn()
 T CEnvLight::~CEnvLight()
 T CEnvMicrophone::Activate()
 T CEnvMicrophone::ActivateSpeaker()
 T CEnvMicrophone::CanHearSound(CSound*, float&)
 T CEnvMicrophone::CanHearSound(int, soundlevel_t, float&, Vector const*)
 T CEnvMicrophone::GetDataDescMap()
 T CEnvMicrophone::InputDisable(inputdata_t&)
 T CEnvMicrophone::InputEnable(inputdata_t&)
 T CEnvMicrophone::InputSetSpeakerName(inputdata_t&)
 T CEnvMicrophone::OnRestore()
 T CEnvMicrophone::OnSoundPlayed(int, char const*, soundlevel_t, float, int, int, Vector const*, float, CUtlVector<Vector, CUtlMemory<Vector, int> >&)
 T CEnvMicrophone::SoundPlayed(int, char const*, soundlevel_t, float, int, int, Vector const*, float, CUtlVector<Vector, CUtlMemory<Vector, int> >&)
 T CEnvMicrophone::Spawn()
 T CEnvMicrophone::Think()
 T CEnvMicrophone::~CEnvMicrophone()
 T CEnvMuzzleFlash::GetDataDescMap()
 T CEnvMuzzleFlash::InputFire(inputdata_t&)
 T CEnvMuzzleFlash::Spawn()
 T CEnvMuzzleFlash::~CEnvMuzzleFlash()
 T CEnvParticleScript::Activate()
 T CEnvParticleScript::GetDataDescMap()
 T CEnvParticleScript::GetServerClass()
 T CEnvParticleScript::InputSetSequence(inputdata_t&)
 T CEnvParticleScript::Precache()
 T CEnvParticleScript::PrecacheAnimationEventMaterials()
 T CEnvParticleScript::Spawn()
 T CEnvParticleScript::UpdateTransmitState()
 T CEnvParticleScript::YouForgotToImplementOrDeclareServerClass()
 T CEnvParticleScript::~CEnvParticleScript()
 T CEnvPlayerSurfaceTrigger::GetDataDescMap()
 T CEnvPlayerSurfaceTrigger::InputDisable(inputdata_t&)
 T CEnvPlayerSurfaceTrigger::InputEnable(inputdata_t&)
 T CEnvPlayerSurfaceTrigger::OnRestore()
 T CEnvPlayerSurfaceTrigger::PlayerSurfaceChanged(CBasePlayer*, char)
 T CEnvPlayerSurfaceTrigger::SetPlayerSurface(CBasePlayer*, char)
 T CEnvPlayerSurfaceTrigger::Spawn()
 T CEnvPlayerSurfaceTrigger::UpdateMaterialThink()
 T CEnvPlayerSurfaceTrigger::~CEnvPlayerSurfaceTrigger()
 T CEnvProjectedTexture::Activate()
 T CEnvProjectedTexture::CEnvProjectedTexture()
 T CEnvProjectedTexture::GetDataDescMap()
 T CEnvProjectedTexture::GetServerClass()
 T CEnvProjectedTexture::InitialThink()
 T CEnvProjectedTexture::InputSetAmbient(inputdata_t&)
 T CEnvProjectedTexture::InputSetCameraSpace(inputdata_t&)
 T CEnvProjectedTexture::InputSetEnableShadows(inputdata_t&)
 T CEnvProjectedTexture::InputSetFOV(inputdata_t&)
 T CEnvProjectedTexture::InputSetLightOnlyTarget(inputdata_t&)
 T CEnvProjectedTexture::InputSetLightWorld(inputdata_t&)
 T CEnvProjectedTexture::InputSetSpotlightTexture(inputdata_t&)
 T CEnvProjectedTexture::InputSetTarget(inputdata_t&)
 T CEnvProjectedTexture::InputTurnOff(inputdata_t&)
 T CEnvProjectedTexture::InputTurnOn(inputdata_t&)
 T CEnvProjectedTexture::KeyValue(char const*, char const*)
 T CEnvProjectedTexture::UpdateTransmitState()
 T CEnvProjectedTexture::YouForgotToImplementOrDeclareServerClass()
 T CEnvProjectedTexture::~CEnvProjectedTexture()
 T CEnvQuadraticBeam::GetDataDescMap()
 T CEnvQuadraticBeam::GetServerClass()
 T CEnvQuadraticBeam::Spawn()
 T CEnvQuadraticBeam::YouForgotToImplementOrDeclareServerClass()
 T CEnvQuadraticBeam::~CEnvQuadraticBeam()
 T CEnvScreenEffect::GetDataDescMap()
 T CEnvScreenEffect::GetServerClass()
 T CEnvScreenEffect::InputStartEffect(inputdata_t&)
 T CEnvScreenEffect::InputStopEffect(inputdata_t&)
 T CEnvScreenEffect::Precache()
 T CEnvScreenEffect::Spawn()
 T CEnvScreenEffect::UpdateTransmitState()
 T CEnvScreenEffect::YouForgotToImplementOrDeclareServerClass()
 T CEnvScreenEffect::~CEnvScreenEffect()
 T CEnvScreenOverlay::CEnvScreenOverlay()
 T CEnvScreenOverlay::GetDataDescMap()
 T CEnvScreenOverlay::GetServerClass()
 T CEnvScreenOverlay::InputStartOverlay(inputdata_t&)
 T CEnvScreenOverlay::InputStopOverlay(inputdata_t&)
 T CEnvScreenOverlay::InputSwitchOverlay(inputdata_t&)
 T CEnvScreenOverlay::Precache()
 T CEnvScreenOverlay::Spawn()
 T CEnvScreenOverlay::UpdateTransmitState()
 T CEnvScreenOverlay::YouForgotToImplementOrDeclareServerClass()
 T CEnvScreenOverlay::~CEnvScreenOverlay()
 T CEnvShake::ApplyShake(ShakeCommand_t)
 T CEnvShake::DrawDebugTextOverlays()
 T CEnvShake::GetDataDescMap()
 T CEnvShake::InputAmplitude(inputdata_t&)
 T CEnvShake::InputFrequency(inputdata_t&)
 T CEnvShake::InputStartShake(inputdata_t&)
 T CEnvShake::InputStopShake(inputdata_t&)
 T CEnvShake::OnRestore()
 T CEnvShake::Spawn()
 T CEnvShake::Think()
 T CEnvShake::~CEnvShake()
 T CEnvShooter::CreateGib()
 T CEnvShooter::GetDataDescMap()
 T CEnvShooter::KeyValue(char const*, char const*)
 T CEnvShooter::Precache()
 T CEnvShooter::~CEnvShooter()
 T CEnvSoundscape::DrawDebugGeometryOverlays()
 T CEnvSoundscape::GetDataDescMap()
 T CEnvSoundscape::InRangeOfPlayer(CBasePlayer*)
 T CEnvSoundscape::InputDisable(inputdata_t&)
 T CEnvSoundscape::InputEnable(inputdata_t&)
 T CEnvSoundscape::InputToggleEnabled(inputdata_t&)
 T CEnvSoundscape::KeyValue(char const*, char const*)
 T CEnvSoundscape::Precache()
 T CEnvSoundscape::Spawn()
 T CEnvSoundscape::UpdateForPlayer(ss_update_t&)
 T CEnvSoundscape::UpdateTransmitState()
 T CEnvSoundscape::WriteAudioParamsTo(audioparams_t&)
 T CEnvSoundscape::~CEnvSoundscape()
 T CEnvSoundscapeProxy::Activate()
 T CEnvSoundscapeProxy::GetDataDescMap()
 T CEnvSoundscapeProxy::Precache()
 T CEnvSoundscapeProxy::~CEnvSoundscapeProxy()
 T CEnvSoundscapeTriggerable::DelegateEndTouch(CBaseEntity*)
 T CEnvSoundscapeTriggerable::DelegateStartTouch(CBaseEntity*)
 T CEnvSoundscapeTriggerable::GetDataDescMap()
 T CEnvSoundscapeTriggerable::Think()
 T CEnvSoundscapeTriggerable::~CEnvSoundscapeTriggerable()
 T CEnvSpark::GetDataDescMap()
 T CEnvSpark::InputSparkOnce(inputdata_t&)
 T CEnvSpark::InputStartSpark(inputdata_t&)
 T CEnvSpark::InputStopSpark(inputdata_t&)
 T CEnvSpark::InputToggleSpark(inputdata_t&)
 T CEnvSpark::Precache()
 T CEnvSpark::SparkThink()
 T CEnvSpark::Spawn()
 T CEnvSpark::StartSpark()
 T CEnvSpark::StopSpark()
 T CEnvSpark::~CEnvSpark()
 T CEnvSplash::GetDataDescMap()
 T CEnvSplash::InputSplash(inputdata_t&)
 T CEnvSplash::~CEnvSplash()
 T CEnvTonemapController::GetDataDescMap()
 T CEnvTonemapController::GetServerClass()
 T CEnvTonemapController::InputBlendTonemapScale(inputdata_t&)
 T CEnvTonemapController::InputSetAutoExposureMax(inputdata_t&)
 T CEnvTonemapController::InputSetAutoExposureMin(inputdata_t&)
 T CEnvTonemapController::InputSetBloomScale(inputdata_t&)
 T CEnvTonemapController::InputSetBloomScaleRange(inputdata_t&)
 T CEnvTonemapController::InputSetTonemapRate(inputdata_t&)
 T CEnvTonemapController::InputSetTonemapScale(inputdata_t&)
 T CEnvTonemapController::InputUseDefaultAutoExposure(inputdata_t&)
 T CEnvTonemapController::InputUseDefaultBloomScale(inputdata_t&)
 T CEnvTonemapController::Spawn()
 T CEnvTonemapController::UpdateTonemapScaleBlend()
 T CEnvTonemapController::UpdateTransmitState()
 T CEnvTonemapController::YouForgotToImplementOrDeclareServerClass()
 T CEnvTonemapController::~CEnvTonemapController()
 T CEnvTracer::Activate()
 T CEnvTracer::GetDataDescMap()
 T CEnvTracer::Spawn()
 T CEnvTracer::TracerThink()
 T CEnvTracer::~CEnvTracer()
 T CEnvViewPunch::GetDataDescMap()
 T CEnvViewPunch::InputViewPunch(inputdata_t&)
 T CEnvViewPunch::Spawn()
 T CEnvViewPunch::~CEnvViewPunch()
 T CEnvWind::GetDataDescMap()
 T CEnvWind::GetServerClass()
 T CEnvWind::Precache()
 T CEnvWind::Spawn()
 T CEnvWind::UpdateTransmitState()
 T CEnvWind::WindThink()
 T CEnvWind::YouForgotToImplementOrDeclareServerClass()
 T CEnvWind::~CEnvWind()
 T CEnvWindShared::CEnvWindShared()
 T CEnvWindShared::Init(int, int, float, int, float)
 T CEnvWindShared::NetworkStateChanged()
 T CEnvWindShared::NetworkStateChanged(void*)
 T CEnvWindShared::WindThink(float)
 T CEnvWindShared::~CEnvWindShared()
 T CEnvZoom::GetDataDescMap()
 T CEnvZoom::InputUnZoom(inputdata_t&)
 T CEnvZoom::InputZoom(inputdata_t&)
 T CEnvZoom::~CEnvZoom()
 T CEventAbsoluteTag::CEventAbsoluteTag(CEventAbsoluteTag const&)
 T CEventAbsoluteTag::GetPercentage()
 T CEventAbsoluteTag::SetLinear(bool)
 T CEventAbsoluteTag::SetPercentage(float)
 T CEventAction::CEventAction(char const*)
 T CEventAction::operator delete(void*)
 T CEventAction::operator new(unsigned long)
 T CEventLog::CEventLog()
 T CEventLog::FireGameEvent(IGameEvent*)
 T CEventLog::Init()
 T CEventLog::PrintEvent(IGameEvent*)
 T CEventLog::PrintGameEvent(IGameEvent*)
 T CEventLog::PrintOtherEvent(IGameEvent*)
 T CEventLog::PrintPlayerEvent(IGameEvent*)
 T CEventLog::PrintTeamEvent(IGameEvent*)
 T CEventLog::Shutdown()
 T CEventLog::~CEventLog()
 T CEventQueue::AddEvent(CBaseEntity*, char const*, float, CBaseEntity*, CBaseEntity*, int)
 T CEventQueue::AddEvent(CBaseEntity*, char const*, variant_t, float, CBaseEntity*, CBaseEntity*, int)
 T CEventQueue::AddEvent(char const*, char const*, variant_t, float, CBaseEntity*, CBaseEntity*, int)
 T CEventQueue::CancelEvents(CBaseEntity*)
 T CEventQueue::Clear()
 T CEventQueue::Dump()
 T CEventQueue::Init()
 T CEventQueue::Restore(IRestore&)
 T CEventQueue::ServiceEvents()
 T CEventQueue::~CEventQueue()
 T CEventQueueSaveLoadProxy::Restore(IRestore&)
 T CEventQueueSaveLoadProxy::Save(ISave&)
 T CEventQueueSaveLoadProxy::~CEventQueueSaveLoadProxy()
 T CEventQueue_SaveRestoreBlockHandler::GetBlockName()
 T CEventQueue_SaveRestoreBlockHandler::ReadRestoreHeaders(IRestore*)
 T CEventQueue_SaveRestoreBlockHandler::Restore(IRestore*, bool)
 T CEventQueue_SaveRestoreBlockHandler::Save(ISave*)
 T CEventQueue_SaveRestoreBlockHandler::WriteSaveHeaders(ISave*)
 T CEventRegister::CEventRegister()
 T CEventRegister::Init(CTimedEventMgr*, IEventRegisterCallback*)
 T CEventRegister::Reregister()
 T CEventRegister::SetUpdateInterval(float)
 T CEventRegister::StopUpdates()
 T CEventRegister::~CEventRegister()
 T CEventsSaveDataOps::IsEmpty(SaveRestoreFieldInfo_t const&)
 T CEventsSaveDataOps::MakeEmpty(SaveRestoreFieldInfo_t const&)
 T CEventsSaveDataOps::Parse(SaveRestoreFieldInfo_t const&, char const*)
 T CEventsSaveDataOps::Restore(SaveRestoreFieldInfo_t const&, IRestore*)
 T CEventsSaveDataOps::Save(SaveRestoreFieldInfo_t const&, ISave*)
 T CExtendLevelIssue::CanCallVote(int, char const*, vote_create_failed_t&, int&)
 T CExtendLevelIssue::ExecuteCommand()
 T CExtendLevelIssue::GetDisplayString()
 T CExtendLevelIssue::GetQuorumRatio()
 T CExtendLevelIssue::GetVotePassedString()
 T CExtendLevelIssue::IsEnabled()
 T CExtendLevelIssue::ListIssueDetails(CBasePlayer*)
 T CExtendLevelIssue::~CExtendLevelIssue()
 T CExtraMapEntity::AnimThink()
 T CExtraMapEntity::GetDataDescMap()
 T CExtraMapEntity::Precache()
 T CExtraMapEntity::Precache_Internal()
 T CExtraMapEntity::PrepareModelName(char const*)
 T CExtraMapEntity::ShouldAnimate()
 T CExtraMapEntity::Spawn()
 T CExtraMapEntity_Carrier* _CreateEntityTemplate<CExtraMapEntity_Carrier>(CExtraMapEntity_Carrier*, char const*)
 T CExtraMapEntity_Carrier::GetDefaultModel()
 T CExtraMapEntity_Carrier::Spawn()
 T CExtraMapEntity_Carrier::~CExtraMapEntity_Carrier()
 T CExtraMapEntity_Rocket* _CreateEntityTemplate<CExtraMapEntity_Rocket>(CExtraMapEntity_Rocket*, char const*)
 T CExtraMapEntity_Rocket::GetDefaultModel()
 T CExtraMapEntity_Rocket::Precache_Internal()
 T CExtraMapEntity_Rocket::Spawn()
 T CExtraMapEntity_Rocket::~CExtraMapEntity_Rocket()
 T CExtraMapEntity_Saucer* _CreateEntityTemplate<CExtraMapEntity_Saucer>(CExtraMapEntity_Saucer*, char const*)
 T CExtraMapEntity_Saucer::GetDefaultModel()
 T CExtraMapEntity_Saucer::ShouldAnimate()
 T CExtraMapEntity_Saucer::Spawn()
 T CExtraMapEntity_Saucer::~CExtraMapEntity_Saucer()
 T CExtraMapEntity_Sign* _CreateEntityTemplate<CExtraMapEntity_Sign>(CExtraMapEntity_Sign*, char const*)
 T CExtraMapEntity_Sign::GetDefaultModel()
 T CExtraMapEntity_Sign::Spawn()
 T CExtraMapEntity_Sign::~CExtraMapEntity_Sign()
 T CEyeballBoss::BecomeEnraged(float)
 T CEyeballBoss::CEyeballBoss()
 T CEyeballBoss::CEyeballBossIntention::CEyeballBossIntention(CEyeballBoss*)
 T CEyeballBoss::CEyeballBossIntention::FirstContainedResponder() const
 T CEyeballBoss::CEyeballBossIntention::NextContainedResponder(INextBotEventResponder*) const
 T CEyeballBoss::CEyeballBossIntention::Reset()
 T CEyeballBoss::CEyeballBossIntention::Update()
 T CEyeballBoss::CEyeballBossIntention::~CEyeballBossIntention()
 T CEyeballBoss::EyePosition()
 T CEyeballBoss::FindClosestVisibleVictim()
 T CEyeballBoss::GetBodyInterface() const
 T CEyeballBoss::GetBossType() const
 T CEyeballBoss::GetCritInjuryMultiplier() const
 T CEyeballBoss::GetIntentionInterface() const
 T CEyeballBoss::GetLevel() const
 T CEyeballBoss::GetLocomotionInterface() const
 T CEyeballBoss::GetServerClass()
 T CEyeballBoss::GetVictim() const
 T CEyeballBoss::GetVisionInterface() const
 T CEyeballBoss::JarateNearbyPlayers(float)
 T CEyeballBoss::LogPlayerInteraction(char const*, CTFPlayer*)
 T CEyeballBoss::OnTakeDamage_Alive(CTakeDamageInfo const&)
 T CEyeballBoss::PickNewSpawnSpot() const
 T CEyeballBoss::Precache()
 T CEyeballBoss::PrecacheEyeballBoss()
 T CEyeballBoss::ShouldCollide(int, int) const
 T CEyeballBoss::Spawn()
 T CEyeballBoss::Update()
 T CEyeballBoss::UpdateLastKnownArea()
 T CEyeballBoss::UpdateOnRemove()
 T CEyeballBoss::YouForgotToImplementOrDeclareServerClass()
 T CEyeballBoss::~CEyeballBoss()
 T CEyeballBossApproachTarget::GetName() const
 T CEyeballBossApproachTarget::OnEnd(CEyeballBoss*, Action<CEyeballBoss>*)
 T CEyeballBossApproachTarget::OnStart(CEyeballBoss*, Action<CEyeballBoss>*)
 T CEyeballBossApproachTarget::Update(CEyeballBoss*, float)
 T CEyeballBossApproachTarget::~CEyeballBossApproachTarget()
 T CEyeballBossBehavior::GetName() const
 T CEyeballBossBehavior::InitialContainedAction(CEyeballBoss*)
 T CEyeballBossBehavior::OnInjured(CEyeballBoss*, CTakeDamageInfo const&)
 T CEyeballBossBehavior::OnKilled(CEyeballBoss*, CTakeDamageInfo const&)
 T CEyeballBossBehavior::OnStart(CEyeballBoss*, Action<CEyeballBoss>*)
 T CEyeballBossBehavior::Update(CEyeballBoss*, float)
 T CEyeballBossBehavior::~CEyeballBossBehavior()
 T CEyeballBossBody::AimHeadTowards(CBaseEntity*, IBody::LookAtPriorityType, float, INextBotReply*, char const*)
 T CEyeballBossBody::AimHeadTowards(Vector const&, IBody::LookAtPriorityType, float, INextBotReply*, char const*)
 T CEyeballBossBody::GetMaxHeadAngularVelocity() const
 T CEyeballBossBody::Update()
 T CEyeballBossBody::~CEyeballBossBody()
 T CEyeballBossDead::GetName() const
 T CEyeballBossDead::OnStart(CEyeballBoss*, Action<CEyeballBoss>*)
 T CEyeballBossDead::Update(CEyeballBoss*, float)
 T CEyeballBossDead::~CEyeballBossDead()
 T CEyeballBossEmerge::GetName() const
 T CEyeballBossEmerge::OnStart(CEyeballBoss*, Action<CEyeballBoss>*)
 T CEyeballBossEmerge::Update(CEyeballBoss*, float)
 T CEyeballBossEmerge::~CEyeballBossEmerge()
 T CEyeballBossEmote::CEyeballBossEmote(int, char const*, Action<CEyeballBoss>*)
 T CEyeballBossEmote::GetName() const
 T CEyeballBossEmote::OnStart(CEyeballBoss*, Action<CEyeballBoss>*)
 T CEyeballBossEmote::Update(CEyeballBoss*, float)
 T CEyeballBossEmote::~CEyeballBossEmote()
 T CEyeballBossEscape::GetName() const
 T CEyeballBossEscape::OnStart(CEyeballBoss*, Action<CEyeballBoss>*)
 T CEyeballBossEscape::Update(CEyeballBoss*, float)
 T CEyeballBossEscape::~CEyeballBossEscape()
 T CEyeballBossIdle::GetName() const
 T CEyeballBossIdle::OnInjured(CEyeballBoss*, CTakeDamageInfo const&)
 T CEyeballBossIdle::OnOtherKilled(CEyeballBoss*, CBaseCombatCharacter*, CTakeDamageInfo const&)
 T CEyeballBossIdle::OnResume(CEyeballBoss*, Action<CEyeballBoss>*)
 T CEyeballBossIdle::OnStart(CEyeballBoss*, Action<CEyeballBoss>*)
 T CEyeballBossIdle::Update(CEyeballBoss*, float)
 T CEyeballBossIdle::~CEyeballBossIdle()
 T CEyeballBossLaunchRockets::GetName() const
 T CEyeballBossLaunchRockets::OnStart(CEyeballBoss*, Action<CEyeballBoss>*)
 T CEyeballBossLaunchRockets::Update(CEyeballBoss*, float)
 T CEyeballBossLaunchRockets::~CEyeballBossLaunchRockets()
 T CEyeballBossLocomotion::Approach(Vector const&, float)
 T CEyeballBossLocomotion::FaceTowards(Vector const&)
 T CEyeballBossLocomotion::GetDeathDropHeight() const
 T CEyeballBossLocomotion::GetDesiredAltitude() const
 T CEyeballBossLocomotion::GetDesiredSpeed() const
 T CEyeballBossLocomotion::GetFeet() const
 T CEyeballBossLocomotion::GetGroundNormal() const
 T CEyeballBossLocomotion::GetMaxJumpHeight() const
 T CEyeballBossLocomotion::GetStepHeight() const
 T CEyeballBossLocomotion::GetVelocity() const
 T CEyeballBossLocomotion::MaintainAltitude()
 T CEyeballBossLocomotion::Reset()
 T CEyeballBossLocomotion::SetDesiredAltitude(float)
 T CEyeballBossLocomotion::SetDesiredSpeed(float)
 T CEyeballBossLocomotion::Update()
 T CEyeballBossLocomotion::~CEyeballBossLocomotion()
 T CEyeballBossNotice::GetName() const
 T CEyeballBossNotice::OnStart(CEyeballBoss*, Action<CEyeballBoss>*)
 T CEyeballBossNotice::Update(CEyeballBoss*, float)
 T CEyeballBossNotice::~CEyeballBossNotice()
 T CEyeballBossStunned::GetName() const
 T CEyeballBossStunned::OnEnd(CEyeballBoss*, Action<CEyeballBoss>*)
 T CEyeballBossStunned::OnInjured(CEyeballBoss*, CTakeDamageInfo const&)
 T CEyeballBossStunned::OnStart(CEyeballBoss*, Action<CEyeballBoss>*)
 T CEyeballBossStunned::Update(CEyeballBoss*, float)
 T CEyeballBossStunned::~CEyeballBossStunned()
 T CEyeballBossTeleport::GetName() const
 T CEyeballBossTeleport::OnStart(CEyeballBoss*, Action<CEyeballBoss>*)
 T CEyeballBossTeleport::Update(CEyeballBoss*, float)
 T CEyeballBossTeleport::~CEyeballBossTeleport()
 T CFilterClass::GetDataDescMap()
 T CFilterClass::PassesFilterImpl(CBaseEntity*, CBaseEntity*)
 T CFilterClass::~CFilterClass()
 T CFilterEnemy::GetDataDescMap()
 T CFilterEnemy::PassesDamageFilterImpl(CTakeDamageInfo const&)
 T CFilterEnemy::PassesFilterImpl(CBaseEntity*, CBaseEntity*)
 T CFilterEnemy::PassesMobbedFilter(CBaseEntity*, CBaseEntity*)
 T CFilterEnemy::PassesProximityFilter(CBaseEntity*, CBaseEntity*)
 T CFilterEnemy::~CFilterEnemy()
 T CFilterMassGreater::GetDataDescMap()
 T CFilterMassGreater::PassesFilterImpl(CBaseEntity*, CBaseEntity*)
 T CFilterMassGreater::~CFilterMassGreater()
 T CFilterMultiple::Activate()
 T CFilterMultiple::GetDataDescMap()
 T CFilterMultiple::PassesDamageFilterImpl(CTakeDamageInfo const&)
 T CFilterMultiple::PassesFilterImpl(CBaseEntity*, CBaseEntity*)
 T CFilterMultiple::~CFilterMultiple()
 T CFilterName::GetDataDescMap()
 T CFilterName::PassesFilterImpl(CBaseEntity*, CBaseEntity*)
 T CFilterName::~CFilterName()
 T CFilterTFBotHasTag::GetDataDescMap()
 T CFilterTFBotHasTag::PassesFilterImpl(CBaseEntity*, CBaseEntity*)
 T CFilterTFBotHasTag::Spawn()
 T CFilterTFBotHasTag::~CFilterTFBotHasTag()
 T CFilterTFCanCap::GetDataDescMap()
 T CFilterTFCanCap::PassesFilterImpl(CBaseEntity*, CBaseEntity*)
 T CFilterTFCanCap::~CFilterTFCanCap()
 T CFilterTFClass::GetDataDescMap()
 T CFilterTFClass::PassesFilterImpl(CBaseEntity*, CBaseEntity*)
 T CFilterTFClass::~CFilterTFClass()
 T CFilterTFCondition::GetDataDescMap()
 T CFilterTFCondition::PassesFilterImpl(CBaseEntity*, CBaseEntity*)
 T CFilterTFCondition::~CFilterTFCondition()
 T CFilterTFTeam::GetDataDescMap()
 T CFilterTFTeam::InputRoundActivate(inputdata_t&)
 T CFilterTFTeam::InputRoundSpawn(inputdata_t&)
 T CFilterTFTeam::PassesFilterImpl(CBaseEntity*, CBaseEntity*)
 T CFilterTFTeam::~CFilterTFTeam()
 T CFindMostInjuredNeighbor::Inspect(CKnownEntity const&)
 T CFire* _CreateEntityTemplate<CFire>(CFire*, char const*)
 T CFire::Activate()
 T CFire::AddHeat(float, bool)
 T CFire::BurnThink()
 T CFire::DrawDebugGeometryOverlays()
 T CFire::DrawDebugTextOverlays()
 T CFire::GetDataDescMap()
 T CFire::GoOut()
 T CFire::GoOutThink()
 T CFire::Init(Vector const&, float, float, float, int, int)
 T CFire::InputDisable(inputdata_t&)
 T CFire::InputEnable(inputdata_t&)
 T CFire::InputExtinguish(inputdata_t&)
 T CFire::InputExtinguishTemporary(inputdata_t&)
 T CFire::InputStartFire(inputdata_t&)
 T CFire::OnTakeDamage(CTakeDamageInfo const&)
 T CFire::Precache()
 T CFire::Spawn()
 T CFire::SpawnEffect(fireType_e, float)
 T CFire::Start()
 T CFire::StartFire()
 T CFire::Update(float)
 T CFire::UpdateOnRemove()
 T CFire::UpdateTransmitState()
 T CFire::~CFire()
 T CFireSmoke::CFireSmoke()
 T CFireSmoke::EnableGlow(int)
 T CFireSmoke::EnableSmoke(int)
 T CFireSmoke::EnableVisibleFromAbove(int)
 T CFireSmoke::GetDataDescMap()
 T CFireSmoke::GetServerClass()
 T CFireSmoke::Precache()
 T CFireSmoke::Spawn()
 T CFireSmoke::YouForgotToImplementOrDeclareServerClass()
 T CFireSmoke::~CFireSmoke()
 T CFireSphere::EnumElement(IHandleEntity*)
 T CFireTrail::GetDataDescMap()
 T CFireTrail::GetServerClass()
 T CFireTrail::Precache()
 T CFireTrail::YouForgotToImplementOrDeclareServerClass()
 T CFireTrail::~CFireTrail()
 T CFish* _CreateEntityTemplate<CFish>(CFish*, char const*)
 T CFish::AddVisible(CFish*)
 T CFish::Avoid()
 T CFish::Event_Killed(CTakeDamageInfo const&)
 T CFish::FlockTo(CFish*, float)
 T CFish::GetDataDescMap()
 T CFish::GetServerClass()
 T CFish::Initialize(CFishPool*, unsigned int)
 T CFish::Spawn()
 T CFish::Touch(CBaseEntity*)
 T CFish::Update(float)
 T CFish::YouForgotToImplementOrDeclareServerClass()
 T CFish::~CFish()
 T CFishPool::CFishPool()
 T CFishPool::FireGameEvent(IGameEvent*)
 T CFishPool::GetDataDescMap()
 T CFishPool::KeyValue(char const*, char const*)
 T CFishPool::Spawn()
 T CFishPool::Update()
 T CFishPool::~CFishPool()
 T CFixedBitVecBase<255>::FindNextSetBit(int) const
 T CFlagDetectionZone::CFlagDetectionZone()
 T CFlagDetectionZone::EndTouch(CBaseEntity*)
 T CFlagDetectionZone::EntityIsFlagCarrier(CBaseEntity*)
 T CFlagDetectionZone::FlagCaptured(CBasePlayer*)
 T CFlagDetectionZone::FlagDropped(CBasePlayer*)
 T CFlagDetectionZone::FlagPickedUp(CBasePlayer*)
 T CFlagDetectionZone::GetDataDescMap()
 T CFlagDetectionZone::InputDisable(inputdata_t&)
 T CFlagDetectionZone::InputEnable(inputdata_t&)
 T CFlagDetectionZone::InputTest(inputdata_t&)
 T CFlagDetectionZone::Spawn()
 T CFlagDetectionZone::StartTouch(CBaseEntity*)
 T CFlagDetectionZone::~CFlagDetectionZone()
 T CFlaggedEntitiesEnum::CFlaggedEntitiesEnum(CBaseEntity**, int, int)
 T CFlaggedEntitiesEnum::EnumElement(IHandleEntity*)
 T CFlameEntityEnum::EnumEntity(IHandleEntity*)
 T CFlexAnimationTrack::GetBoundedSample(int, bool&, int)
 T CFlexAnimationTrack::GetFlexControllerName()
 T CFlexAnimationTrack::GetFracIntensity(float, int)
 T CFlexAnimationTrack::GetIntensity(float, int)
 T CFlexAnimationTrack::GetIntensityInternal(float, int)
 T CFlexAnimationTrack::GetRawFlexControllerIndex(int)
 T CFlexAnimationTrack::IsComboType()
 T CFlexAnimationTrack::IsServerSide() const
 T CFlexAnimationTrack::IsTrackActive()
 T CFlexAnimationTrack::Resort(int)
 T CFlexAnimationTrack::SetFlexControllerIndex(LocalFlexController_t, int, int)
 T CFlexAnimationTrack::SetServerSide(bool)
 T CFlexAnimationTrack::~CFlexAnimationTrack()
 T CFlexCycler::GenericCyclerSpawn(char*, Vector, Vector)
 T CFlexCycler::GetDataDescMap()
 T CFlexCycler::IsAlive()
 T CFlexCycler::ObjectCaps()
 T CFlexCycler::OnTakeDamage(CTakeDamageInfo const&)
 T CFlexCycler::ProcessSceneEvents()
 T CFlexCycler::SetFlexTarget(LocalFlexController_t)
 T CFlexCycler::Spawn()
 T CFlexCycler::Think()
 T CFlexSceneFileManager::FindSceneFile(CBaseFlex*, char const*, bool)
 T CFlexSceneFileManager::Init()
 T CFlexSceneFileManager::Shutdown()
 T CFlexSceneFileManager::~CFlexSceneFileManager()
 T CFlextalkActor::GetDataDescMap()
 T CFlextalkActor::ProcessSceneEvents()
 T CFlextalkActor::SetFlexTarget(LocalFlexController_t, float)
 T CFlextalkActor::~CFlextalkActor()
 T CFmtStrN<1024, false>::CFmtStrN(char const*, ...)
 T CFmtStrN<1024, false>::InitQuietTruncation()
 T CFmtStrN<128, false>::CFmtStrN(char const*, ...)
 T CFmtStrN<128, false>::InitQuietTruncation()
 T CFmtStrN<256, false>::CFmtStrN(char const*, ...)
 T CFmtStrN<256, false>::InitQuietTruncation()
 T CFmtStrN<256, false>::sprintf(char const*, ...)
 T CFmtStrN<32, false>::CFmtStrN(char const*, ...)
 T CFmtStrN<32, false>::InitQuietTruncation()
 T CFmtStrN<32, false>::sprintf(char const*, ...)
 T CFogController::Activate()
 T CFogController::CFogController()
 T CFogController::DrawDebugTextOverlays()
 T CFogController::GetDataDescMap()
 T CFogController::GetServerClass()
 T CFogController::InputSetAngles(inputdata_t&)
 T CFogController::InputSetColor(inputdata_t&)
 T CFogController::InputSetColorLerpTo(inputdata_t&)
 T CFogController::InputSetColorSecondary(inputdata_t&)
 T CFogController::InputSetColorSecondaryLerpTo(inputdata_t&)
 T CFogController::InputSetEndDist(inputdata_t&)
 T CFogController::InputSetEndDistLerpTo(inputdata_t&)
 T CFogController::InputSetFarZ(inputdata_t&)
 T CFogController::InputSetMaxDensity(inputdata_t&)
 T CFogController::InputSetStartDist(inputdata_t&)
 T CFogController::InputSetStartDistLerpTo(inputdata_t&)
 T CFogController::InputStartFogTransition(inputdata_t&)
 T CFogController::InputTurnOff(inputdata_t&)
 T CFogController::InputTurnOn(inputdata_t&)
 T CFogController::NetworkVar_m_fog::NetworkStateChanged()
 T CFogController::NetworkVar_m_fog::NetworkStateChanged(void*)
 T CFogController::SetLerpValues()
 T CFogController::Spawn()
 T CFogController::UpdateTransmitState()
 T CFogController::YouForgotToImplementOrDeclareServerClass()
 T CFogController::~CFogController()
 T CFogSystem::LevelInitPostEntity()
 T CFogSystem::LevelInitPreEntity()
 T CFogSystem::~CFogSystem()
 T CFourWheelServerVehicle::GetFourWheelVehicle()
 T CFourWheelServerVehicle::GetVehicleController()
 T CFourWheelServerVehicle::GetVehicleParams()
 T CFourWheelServerVehicle::GetVehicleViewPosition(int, Vector*, QAngle*, float*)
 T CFourWheelServerVehicle::IsPassengerEntering()
 T CFourWheelServerVehicle::IsPassengerExiting()
 T CFourWheelServerVehicle::IsVehicleBodyInWater()
 T CFourWheelServerVehicle::IsVehicleUpright()
 T CFourWheelServerVehicle::NPC_DriveVehicle()
 T CFourWheelServerVehicle::NPC_SetDriver(CNPC_VehicleDriver*)
 T CFourWheelServerVehicle::SetVehicle(CBaseEntity*)
 T CFourWheelServerVehicle::~CFourWheelServerVehicle()
 T CFourWheelVehiclePhysics::CFourWheelVehiclePhysics(CBaseAnimating*)
 T CFourWheelVehiclePhysics::CalcWheelData(vehicleparams_t&)
 T CFourWheelVehiclePhysics::DrawDebugGeometryOverlays()
 T CFourWheelVehiclePhysics::DrawDebugTextOverlays(int)
 T CFourWheelVehiclePhysics::GetDataDescMap()
 T CFourWheelVehiclePhysics::Initialize(char const*, unsigned int)
 T CFourWheelVehiclePhysics::InitializePoseParameters()
 T CFourWheelVehiclePhysics::ParseVehicleScript(char const*, solid_t&, vehicleparams_t&)
 T CFourWheelVehiclePhysics::PlaceWheelDust(int, bool)
 T CFourWheelVehiclePhysics::ReleaseHandbrake()
 T CFourWheelVehiclePhysics::SetAction(float)
 T CFourWheelVehiclePhysics::SetDisableEngine(bool)
 T CFourWheelVehiclePhysics::SetHandbrake(bool)
 T CFourWheelVehiclePhysics::SetSteering(float, float)
 T CFourWheelVehiclePhysics::SetThrottle(float)
 T CFourWheelVehiclePhysics::Spawn()
 T CFourWheelVehiclePhysics::SteeringTurn(float, vehicleparams_t const&, bool, bool, bool)
 T CFourWheelVehiclePhysics::SteeringTurnAnalog(float, vehicleparams_t const&, float)
 T CFourWheelVehiclePhysics::Teleport(matrix3x4_t&)
 T CFourWheelVehiclePhysics::Think()
 T CFourWheelVehiclePhysics::TurnOff()
 T CFourWheelVehiclePhysics::TurnOn()
 T CFourWheelVehiclePhysics::UpdateDriverControls(CUserCmd*, float)
 T CFourWheelVehiclePhysics::VPhysicsGetObjectList(IPhysicsObject**, int)
 T CFourWheelVehiclePhysics::VPhysicsUpdate(IPhysicsObject*)
 T CFourWheelVehiclePhysics::~CFourWheelVehiclePhysics()
 T CFuncAreaPortalBase::CFuncAreaPortalBase()
 T CFuncAreaPortalBase::GetDataDescMap()
 T CFuncAreaPortalBase::ObjectCaps()
 T CFuncAreaPortalBase::UpdateVisibility(Vector const&, float, bool&)
 T CFuncAreaPortalBase::~CFuncAreaPortalBase()
 T CFuncAreaPortalWindow::Activate()
 T CFuncAreaPortalWindow::CFuncAreaPortalWindow()
 T CFuncAreaPortalWindow::GetDataDescMap()
 T CFuncAreaPortalWindow::GetServerClass()
 T CFuncAreaPortalWindow::InputSetFadeEndDistance(inputdata_t&)
 T CFuncAreaPortalWindow::InputSetFadeStartDistance(inputdata_t&)
 T CFuncAreaPortalWindow::Spawn()
 T CFuncAreaPortalWindow::UpdateVisibility(Vector const&, float, bool&)
 T CFuncAreaPortalWindow::YouForgotToImplementOrDeclareServerClass()
 T CFuncAreaPortalWindow::~CFuncAreaPortalWindow()
 T CFuncBrush::CreateVPhysics()
 T CFuncBrush::DrawDebugTextOverlays()
 T CFuncBrush::GetDataDescMap()
 T CFuncBrush::InputSetExcluded(inputdata_t&)
 T CFuncBrush::InputSetInvert(inputdata_t&)
 T CFuncBrush::InputToggle(inputdata_t&)
 T CFuncBrush::InputTurnOff(inputdata_t&)
 T CFuncBrush::InputTurnOn(inputdata_t&)
 T CFuncBrush::IsOn() const
 T CFuncBrush::ObjectCaps()
 T CFuncBrush::Spawn()
 T CFuncBrush::TurnOff()
 T CFuncBrush::TurnOn()
 T CFuncBrush::~CFuncBrush()
 T CFuncConveyor::CFuncConveyor()
 T CFuncConveyor::GetDataDescMap()
 T CFuncConveyor::GetGroundVelocityToApply(Vector&)
 T CFuncConveyor::GetServerClass()
 T CFuncConveyor::InputSetSpeed(inputdata_t&)
 T CFuncConveyor::InputToggleDirection(inputdata_t&)
 T CFuncConveyor::Spawn()
 T CFuncConveyor::UpdateSpeed(float)
 T CFuncConveyor::Use(CBaseEntity*, CBaseEntity*, USE_TYPE, float)
 T CFuncConveyor::YouForgotToImplementOrDeclareServerClass()
 T CFuncConveyor::~CFuncConveyor()
 T CFuncFlagAlertZone::GetDataDescMap()
 T CFuncFlagAlertZone::Spawn()
 T CFuncFlagAlertZone::StartTouch(CBaseEntity*)
 T CFuncFlagAlertZone::~CFuncFlagAlertZone()
 T CFuncForceField::GetDataDescMap()
 T CFuncForceField::GetServerClass()
 T CFuncForceField::ShouldCollide(int, int) const
 T CFuncForceField::ShouldTransmit(CCheckTransmitInfo const*)
 T CFuncForceField::Spawn()
 T CFuncForceField::TurnOff()
 T CFuncForceField::TurnOn()
 T CFuncForceField::UpdateTransmitState()
 T CFuncForceField::YouForgotToImplementOrDeclareServerClass()
 T CFuncForceField::~CFuncForceField()
 T CFuncIllusionary::Spawn()
 T CFuncIllusionary::~CFuncIllusionary()
 T CFuncLadder::Activate()
 T CFuncLadder::CFuncLadder()
 T CFuncLadder::DrawDebugGeometryOverlays()
 T CFuncLadder::FindNearbyDismountPoints(Vector const&, float, CUtlVector<CHandle<CInfoLadderDismount>, CUtlMemory<CHandle<CInfoLadderDismount>, int> >&)
 T CFuncLadder::GetDataDescMap()
 T CFuncLadder::GetServerClass()
 T CFuncLadder::InputDisable(inputdata_t&)
 T CFuncLadder::InputEnable(inputdata_t&)
 T CFuncLadder::SearchForDismountPoints()
 T CFuncLadder::SetEndPoints(Vector const&, Vector const&)
 T CFuncLadder::Spawn()
 T CFuncLadder::UpdateTransmitState()
 T CFuncLadder::YouForgotToImplementOrDeclareServerClass()
 T CFuncLadder::~CFuncLadder()
 T CFuncLadderEndPoint::Activate()
 T CFuncLadderEndPoint::Validate()
 T CFuncLadderEndPoint::~CFuncLadderEndPoint()
 T CFuncMonitor::Activate()
 T CFuncMonitor::GetDataDescMap()
 T CFuncMonitor::GetServerClass()
 T CFuncMonitor::InputSetCamera(inputdata_t&)
 T CFuncMonitor::SetCameraByName(char const*)
 T CFuncMonitor::UpdateOnRemove()
 T CFuncMonitor::YouForgotToImplementOrDeclareServerClass()
 T CFuncMonitor::~CFuncMonitor()
 T CFuncMoveLinear::Blocked(CBaseEntity*)
 T CFuncMoveLinear::CreateVPhysics()
 T CFuncMoveLinear::DrawDebugTextOverlays()
 T CFuncMoveLinear::GetDataDescMap()
 T CFuncMoveLinear::InputClose(inputdata_t&)
 T CFuncMoveLinear::InputOpen(inputdata_t&)
 T CFuncMoveLinear::InputSetPosition(inputdata_t&)
 T CFuncMoveLinear::InputSetSpeed(inputdata_t&)
 T CFuncMoveLinear::MoveDone()
 T CFuncMoveLinear::MoveTo(Vector, float)
 T CFuncMoveLinear::Precache()
 T CFuncMoveLinear::ShouldSavePhysics()
 T CFuncMoveLinear::Spawn()
 T CFuncMoveLinear::StopMoveSound()
 T CFuncMoveLinear::Use(CBaseEntity*, CBaseEntity*, USE_TYPE, float)
 T CFuncMoveLinear::~CFuncMoveLinear()
 T CFuncNavAvoid::GetCostMultiplier(CBaseCombatCharacter*) const
 T CFuncNavAvoid::~CFuncNavAvoid()
 T CFuncNavBlocker::CalculateBlocked(bool*, Vector const&, Vector const&)
 T CFuncNavBlocker::DrawDebugTextOverlays()
 T CFuncNavBlocker::GetDataDescMap()
 T CFuncNavBlocker::InputBlockNav(inputdata_t&)
 T CFuncNavBlocker::InputUnblockNav(inputdata_t&)
 T CFuncNavBlocker::Spawn()
 T CFuncNavBlocker::UpdateBlocked()
 T CFuncNavBlocker::UpdateOnRemove()
 T CFuncNavBlocker::~CFuncNavBlocker()
 T CFuncNavCost::CostThink()
 T CFuncNavCost::GetCostMultiplier(CBaseCombatCharacter*) const
 T CFuncNavCost::GetDataDescMap()
 T CFuncNavCost::InputDisable(inputdata_t&)
 T CFuncNavCost::InputEnable(inputdata_t&)
 T CFuncNavCost::IsApplicableTo(CBaseCombatCharacter*) const
 T CFuncNavCost::Spawn()
 T CFuncNavCost::UpdateAllNavCostDecoration()
 T CFuncNavCost::UpdateOnRemove()
 T CFuncNavCost::~CFuncNavCost()
 T CFuncNavObstruction::CanObstructNavAreas() const
 T CFuncNavObstruction::DrawDebugTextOverlays()
 T CFuncNavObstruction::GetDataDescMap()
 T CFuncNavObstruction::GetNavObstructionHeight() const
 T CFuncNavObstruction::GetObstructingEntity()
 T CFuncNavObstruction::IsPotentiallyAbleToObstructNavAreas() const
 T CFuncNavObstruction::OnNavMeshLoaded()
 T CFuncNavObstruction::Spawn()
 T CFuncNavObstruction::UpdateOnRemove()
 T CFuncNavObstruction::~CFuncNavObstruction()
 T CFuncNavPrefer::GetCostMultiplier(CBaseCombatCharacter*) const
 T CFuncNavPrefer::~CFuncNavPrefer()
 T CFuncNavPrerequisite::CFuncNavPrerequisite()
 T CFuncNavPrerequisite::GetDataDescMap()
 T CFuncNavPrerequisite::GetTaskEntity()
 T CFuncNavPrerequisite::InputDisable(inputdata_t&)
 T CFuncNavPrerequisite::InputEnable(inputdata_t&)
 T CFuncNavPrerequisite::IsTask(CFuncNavPrerequisite::TaskType) const
 T CFuncNavPrerequisite::Spawn()
 T CFuncNavPrerequisite::~CFuncNavPrerequisite()
 T CFuncNoBuild::Activate()
 T CFuncNoBuild::CFuncNoBuild()
 T CFuncNoBuild::GetDataDescMap()
 T CFuncNoBuild::InputSetActive(inputdata_t&)
 T CFuncNoBuild::InputSetInactive(inputdata_t&)
 T CFuncNoBuild::InputToggleActive(inputdata_t&)
 T CFuncNoBuild::Precache()
 T CFuncNoBuild::Spawn()
 T CFuncNoBuild::~CFuncNoBuild()
 T CFuncOccluder::CFuncOccluder()
 T CFuncOccluder::GetDataDescMap()
 T CFuncOccluder::GetServerClass()
 T CFuncOccluder::InputActivate(inputdata_t&)
 T CFuncOccluder::InputDeactivate(inputdata_t&)
 T CFuncOccluder::InputToggle(inputdata_t&)
 T CFuncOccluder::Spawn()
 T CFuncOccluder::UpdateTransmitState()
 T CFuncOccluder::YouForgotToImplementOrDeclareServerClass()
 T CFuncOccluder::~CFuncOccluder()
 T CFuncPasstimeGoal::CFuncPasstimeGoal()
 T CFuncPasstimeGoal::GetDataDescMap()
 T CFuncPasstimeGoal::GetServerClass()
 T CFuncPasstimeGoal::GoalThink()
 T CFuncPasstimeGoal::OnScore(int)
 T CFuncPasstimeGoal::ShimEndTouch(CBaseEntity*)
 T CFuncPasstimeGoal::ShimStartTouch(CBaseEntity*)
 T CFuncPasstimeGoal::Spawn()
 T CFuncPasstimeGoal::UpdateTransmitState()
 T CFuncPasstimeGoal::YouForgotToImplementOrDeclareServerClass()
 T CFuncPasstimeGoal::~CFuncPasstimeGoal()
 T CFuncPasstimeGoalShim::EndTouch(CBaseEntity*)
 T CFuncPasstimeGoalShim::StartTouch(CBaseEntity*)
 T CFuncPasstimeGoalShim::~CFuncPasstimeGoalShim()
 T CFuncPasstimeGoalieZone::BPlayerInAny(CTFPlayer*)
 T CFuncPasstimeGoalieZone::GetDataDescMap()
 T CFuncPasstimeGoalieZone::Spawn()
 T CFuncPasstimeGoalieZone::~CFuncPasstimeGoalieZone()
 T CFuncPasstimeNoBallZone::GetDataDescMap()
 T CFuncPasstimeNoBallZone::Spawn()
 T CFuncPasstimeNoBallZone::~CFuncPasstimeNoBallZone()
 T CFuncPlat::Blocked(CBaseEntity*)
 T CFuncPlat::CallGoDown()
 T CFuncPlat::CallHitBottom()
 T CFuncPlat::CallHitTop()
 T CFuncPlat::CreateVPhysics()
 T CFuncPlat::GetDataDescMap()
 T CFuncPlat::GoDown()
 T CFuncPlat::GoUp()
 T CFuncPlat::HitBottom()
 T CFuncPlat::HitTop()
 T CFuncPlat::InputGoDown(inputdata_t&)
 T CFuncPlat::InputGoUp(inputdata_t&)
 T CFuncPlat::InputToggle(inputdata_t&)
 T CFuncPlat::PlatUse(CBaseEntity*, CBaseEntity*, USE_TYPE, float)
 T CFuncPlat::Precache()
 T CFuncPlat::Setup()
 T CFuncPlat::Spawn()
 T CFuncPlat::~CFuncPlat()
 T CFuncPlatRot::GetDataDescMap()
 T CFuncPlatRot::GoDown()
 T CFuncPlatRot::GoUp()
 T CFuncPlatRot::HitBottom()
 T CFuncPlatRot::HitTop()
 T CFuncPlatRot::RotMove(QAngle&, float)
 T CFuncPlatRot::SetupRotation()
 T CFuncPlatRot::Spawn()
 T CFuncPlatRot::~CFuncPlatRot()
 T CFuncReflectiveGlass::GetDataDescMap()
 T CFuncReflectiveGlass::GetServerClass()
 T CFuncReflectiveGlass::YouForgotToImplementOrDeclareServerClass()
 T CFuncReflectiveGlass::~CFuncReflectiveGlass()
 T CFuncRespawnFlagZone::GetDataDescMap()
 T CFuncRespawnFlagZone::Spawn()
 T CFuncRespawnFlagZone::Touch(CBaseEntity*)
 T CFuncRespawnFlagZone::~CFuncRespawnFlagZone()
 T CFuncRespawnRoom::Activate()
 T CFuncRespawnRoom::AddVisualizer(CFuncRespawnRoomVisualizer*)
 T CFuncRespawnRoom::CFuncRespawnRoom()
 T CFuncRespawnRoom::ChangeTeam(int)
 T CFuncRespawnRoom::EndTouch(CBaseEntity*)
 T CFuncRespawnRoom::GetActive() const
 T CFuncRespawnRoom::GetDataDescMap()
 T CFuncRespawnRoom::GetServerClass()
 T CFuncRespawnRoom::InputRoundActivate(inputdata_t&)
 T CFuncRespawnRoom::InputSetActive(inputdata_t&)
 T CFuncRespawnRoom::InputSetInactive(inputdata_t&)
 T CFuncRespawnRoom::InputToggleActive(inputdata_t&)
 T CFuncRespawnRoom::RespawnRoomTouch(CBaseEntity*)
 T CFuncRespawnRoom::SetActive(bool)
 T CFuncRespawnRoom::Spawn()
 T CFuncRespawnRoom::StartTouch(CBaseEntity*)
 T CFuncRespawnRoom::YouForgotToImplementOrDeclareServerClass()
 T CFuncRespawnRoom::~CFuncRespawnRoom()
 T CFuncRespawnRoomShim::Touch(CBaseEntity*)
 T CFuncRespawnRoomShim::~CFuncRespawnRoomShim()
 T CFuncRespawnRoomVisualizer::DrawDebugTextOverlays()
 T CFuncRespawnRoomVisualizer::GetDataDescMap()
 T CFuncRespawnRoomVisualizer::GetServerClass()
 T CFuncRespawnRoomVisualizer::InputRoundActivate(inputdata_t&)
 T CFuncRespawnRoomVisualizer::InputSetSolid(inputdata_t&)
 T CFuncRespawnRoomVisualizer::ShouldCollide(int, int) const
 T CFuncRespawnRoomVisualizer::ShouldTransmit(CCheckTransmitInfo const*)
 T CFuncRespawnRoomVisualizer::Spawn()
 T CFuncRespawnRoomVisualizer::UpdateTransmitState()
 T CFuncRespawnRoomVisualizer::YouForgotToImplementOrDeclareServerClass()
 T CFuncRespawnRoomVisualizer::~CFuncRespawnRoomVisualizer()
 T CFuncRotating::Blocked(CBaseEntity*)
 T CFuncRotating::CreateVPhysics()
 T CFuncRotating::DrawDebugTextOverlays()
 T CFuncRotating::GetDataDescMap()
 T CFuncRotating::GetServerClass()
 T CFuncRotating::HurtTouch(CBaseEntity*)
 T CFuncRotating::InputReverse(inputdata_t&)
 T CFuncRotating::InputSetSpeed(inputdata_t&)
 T CFuncRotating::InputStart(inputdata_t&)
 T CFuncRotating::InputStartBackward(inputdata_t&)
 T CFuncRotating::InputStartForward(inputdata_t&)
 T CFuncRotating::InputStop(inputdata_t&)
 T CFuncRotating::InputStopAtStartPos(inputdata_t&)
 T CFuncRotating::InputToggle(inputdata_t&)
 T CFuncRotating::KeyValue(char const*, char const*)
 T CFuncRotating::Precache()
 T CFuncRotating::RampPitchVol()
 T CFuncRotating::ReverseMove()
 T CFuncRotating::RotateMove()
 T CFuncRotating::RotatingUse(CBaseEntity*, CBaseEntity*, USE_TYPE, float)
 T CFuncRotating::SetTargetSpeed(float)
 T CFuncRotating::Spawn()
 T CFuncRotating::SpinDownMove()
 T CFuncRotating::SpinUpMove()
 T CFuncRotating::UpdateSpeed(float)
 T CFuncRotating::YouForgotToImplementOrDeclareServerClass()
 T CFuncRotating::~CFuncRotating()
 T CFuncSmokeVolume::Activate()
 T CFuncSmokeVolume::CFuncSmokeVolume()
 T CFuncSmokeVolume::GetDataDescMap()
 T CFuncSmokeVolume::GetServerClass()
 T CFuncSmokeVolume::Spawn()
 T CFuncSmokeVolume::YouForgotToImplementOrDeclareServerClass()
 T CFuncSmokeVolume::~CFuncSmokeVolume()
 T CFuncSuggestedBuild::Activate()
 T CFuncSuggestedBuild::GetDataDescMap()
 T CFuncSuggestedBuild::InputSetActive(inputdata_t&)
 T CFuncSuggestedBuild::InputSetInactive(inputdata_t&)
 T CFuncSuggestedBuild::InputToggleActive(inputdata_t&)
 T CFuncSuggestedBuild::IsFacingRequiredEntity(CBaseObject&) const
 T CFuncSuggestedBuild::Precache()
 T CFuncSuggestedBuild::Spawn()
 T CFuncSuggestedBuild::~CFuncSuggestedBuild()
 T CFuncTankTrain::Blocked(CBaseEntity*)
 T CFuncTankTrain::Event_Killed(CTakeDamageInfo const&)
 T CFuncTankTrain::GetDataDescMap()
 T CFuncTankTrain::OnTakeDamage(CTakeDamageInfo const&)
 T CFuncTankTrain::Spawn()
 T CFuncTankTrain::~CFuncTankTrain()
 T CFuncTrackAuto::GetDataDescMap()
 T CFuncTrackAuto::TriggerTrackChange(inputdata_t&)
 T CFuncTrackAuto::UpdateAutoTargets(int)
 T CFuncTrackAuto::Use(CBaseEntity*, CBaseEntity*, USE_TYPE, float)
 T CFuncTrackAuto::~CFuncTrackAuto()
 T CFuncTrackChange::EvaluateTrain(CPathTrack*)
 T CFuncTrackChange::Find()
 T CFuncTrackChange::GetDataDescMap()
 T CFuncTrackChange::GoDown()
 T CFuncTrackChange::GoUp()
 T CFuncTrackChange::HitBottom()
 T CFuncTrackChange::HitTop()
 T CFuncTrackChange::IsTogglePlat()
 T CFuncTrackChange::Precache()
 T CFuncTrackChange::Spawn()
 T CFuncTrackChange::Touch(CBaseEntity*)
 T CFuncTrackChange::UpdateAutoTargets(int)
 T CFuncTrackChange::UpdateTrain(QAngle&)
 T CFuncTrackChange::Use(CBaseEntity*, CBaseEntity*, USE_TYPE, float)
 T CFuncTrackChange::~CFuncTrackChange()
 T CFuncTrackTrain* _CreateEntityTemplate<CFuncTrackTrain>(CFuncTrackTrain*, char const*)
 T CFuncTrackTrain::ArriveAtNode(CPathTrack*)
 T CFuncTrackTrain::Blocked(CBaseEntity*)
 T CFuncTrackTrain::CFuncTrackTrain()
 T CFuncTrackTrain::CreateVPhysics()
 T CFuncTrackTrain::DeadEnd()
 T CFuncTrackTrain::DoUpdateOrientation(QAngle const&, QAngle const&, float)
 T CFuncTrackTrain::DrawDebugGeometryOverlays()
 T CFuncTrackTrain::DrawDebugTextOverlays()
 T CFuncTrackTrain::Find()
 T CFuncTrackTrain::GetDataDescMap()
 T CFuncTrackTrain::GetServerClass()
 T CFuncTrackTrain::InputResume(inputdata_t&)
 T CFuncTrackTrain::InputReverse(inputdata_t&)
 T CFuncTrackTrain::InputSetSpeed(inputdata_t&)
 T CFuncTrackTrain::InputSetSpeedDir(inputdata_t&)
 T CFuncTrackTrain::InputSetSpeedDirAccel(inputdata_t&)
 T CFuncTrackTrain::InputSetSpeedForwardModifier(inputdata_t&)
 T CFuncTrackTrain::InputSetSpeedReal(inputdata_t&)
 T CFuncTrackTrain::InputStartBackward(inputdata_t&)
 T CFuncTrackTrain::InputStartForward(inputdata_t&)
 T CFuncTrackTrain::InputStop(inputdata_t&)
 T CFuncTrackTrain::InputTeleportToPathTrack(inputdata_t&)
 T CFuncTrackTrain::InputToggle(inputdata_t&)
 T CFuncTrackTrain::IsBaseTrain() const
 T CFuncTrackTrain::KeyValue(char const*, char const*)
 T CFuncTrackTrain::MoveDone()
 T CFuncTrackTrain::NearestPath()
 T CFuncTrackTrain::Next()
 T CFuncTrackTrain::ObjectCaps()
 T CFuncTrackTrain::OnControls(CBaseEntity*)
 T CFuncTrackTrain::OnRestore()
 T CFuncTrackTrain::OnTakeDamage(CTakeDamageInfo const&)
 T CFuncTrackTrain::Precache()
 T CFuncTrackTrain::SetDirForward(bool)
 T CFuncTrackTrain::SetSpeed(float, bool)
 T CFuncTrackTrain::SetSpeedDirAccel(float)
 T CFuncTrackTrain::SetSpeedForwardModifier(float)
 T CFuncTrackTrain::SoundStop()
 T CFuncTrackTrain::SoundUpdate()
 T CFuncTrackTrain::Spawn()
 T CFuncTrackTrain::TeleportToPathTrack(CPathTrack*)
 T CFuncTrackTrain::UpdateOnRemove()
 T CFuncTrackTrain::UpdateOrientationAtPathTracks(CPathTrack*, CPathTrack*, Vector const&, float)
 T CFuncTrackTrain::UpdateOrientationBlend(TrainOrientationType_t, CPathTrack*, CPathTrack*, Vector const&, float)
 T CFuncTrackTrain::UpdateTrainVelocity(CPathTrack*, CPathTrack*, Vector const&, float)
 T CFuncTrackTrain::UpdateTransmitState()
 T CFuncTrackTrain::Use(CBaseEntity*, CBaseEntity*, USE_TYPE, float)
 T CFuncTrackTrain::YouForgotToImplementOrDeclareServerClass()
 T CFuncTrackTrain::~CFuncTrackTrain()
 T CFuncTrain::Activate()
 T CFuncTrain::Blocked(CBaseEntity*)
 T CFuncTrain::GetDataDescMap()
 T CFuncTrain::InputStart(inputdata_t&)
 T CFuncTrain::InputStop(inputdata_t&)
 T CFuncTrain::InputToggle(inputdata_t&)
 T CFuncTrain::Next()
 T CFuncTrain::OnRestore()
 T CFuncTrain::Precache()
 T CFuncTrain::SetupTarget()
 T CFuncTrain::Spawn()
 T CFuncTrain::Start()
 T CFuncTrain::Stop()
 T CFuncTrain::Use(CBaseEntity*, CBaseEntity*, USE_TYPE, float)
 T CFuncTrain::Wait()
 T CFuncTrain::~CFuncTrain()
 T CFuncTrainControls::Find()
 T CFuncTrainControls::GetDataDescMap()
 T CFuncTrainControls::Spawn()
 T CFuncTrainControls::~CFuncTrainControls()
 T CFuncVPhysicsClip::Activate()
 T CFuncVPhysicsClip::CreateVPhysics()
 T CFuncVPhysicsClip::ForceVPhysicsCollide(CBaseEntity*)
 T CFuncVPhysicsClip::GetDataDescMap()
 T CFuncVPhysicsClip::InputDisable(inputdata_t&)
 T CFuncVPhysicsClip::InputEnable(inputdata_t&)
 T CFuncVPhysicsClip::Spawn()
 T CFuncVPhysicsClip::~CFuncVPhysicsClip()
 T CFuncVehicleClip::CreateVPhysics()
 T CFuncVehicleClip::GetDataDescMap()
 T CFuncVehicleClip::InputDisable(inputdata_t&)
 T CFuncVehicleClip::InputEnable(inputdata_t&)
 T CFuncVehicleClip::Spawn()
 T CFuncVehicleClip::~CFuncVehicleClip()
 T CFuncWall::CreateVPhysics()
 T CFuncWall::GetDataDescMap()
 T CFuncWall::Spawn()
 T CFuncWall::Use(CBaseEntity*, CBaseEntity*, USE_TYPE, float)
 T CFuncWall::~CFuncWall()
 T CFuncWallToggle::GetDataDescMap()
 T CFuncWallToggle::InputToggle(inputdata_t&)
 T CFuncWallToggle::Spawn()
 T CFuncWallToggle::TurnOn()
 T CFuncWallToggle::Use(CBaseEntity*, CBaseEntity*, USE_TYPE, float)
 T CFuncWallToggle::~CFuncWallToggle()
 T CFunc_Dust::Activate()
 T CFunc_Dust::CFunc_Dust()
 T CFunc_Dust::GetDataDescMap()
 T CFunc_Dust::GetServerClass()
 T CFunc_Dust::InputTurnOff(inputdata_t&)
 T CFunc_Dust::InputTurnOn(inputdata_t&)
 T CFunc_Dust::KeyValue(char const*, char const*)
 T CFunc_Dust::Precache()
 T CFunc_Dust::Spawn()
 T CFunc_Dust::YouForgotToImplementOrDeclareServerClass()
 T CFunc_Dust::~CFunc_Dust()
 T CFunc_DustCloud::~CFunc_DustCloud()
 T CFunc_DustMotes* _CreateEntityTemplate<CFunc_DustMotes>(CFunc_DustMotes*, char const*)
 T CFunc_DustMotes::~CFunc_DustMotes()
 T CFunc_LOD::Activate()
 T CFunc_LOD::CreateVPhysics()
 T CFunc_LOD::GetDataDescMap()
 T CFunc_LOD::GetServerClass()
 T CFunc_LOD::KeyValue(char const*, char const*)
 T CFunc_LOD::Spawn()
 T CFunc_LOD::YouForgotToImplementOrDeclareServerClass()
 T CFunc_LOD::~CFunc_LOD()
 T CFunctor2<void (*)(CFunctor**, unsigned int), CFunctor**, int, CRefCounted1<CFunctor, CRefCountServiceBase<true, CRefMT> > >::operator()()
 T CFunctor2<void (*)(CFunctor**, unsigned int), CFunctor**, int, CRefCounted1<CFunctor, CRefCountServiceBase<true, CRefMT> > >::~CFunctor2()
 T CFunctor3<void (*)(IPhysicsObject*, Vector const&, Vector const&), IPhysicsObject*, Vector, Vector, CRefCounted1<CFunctor, CRefCountServiceBase<true, CRefMT> > >::operator()()
 T CFunctor3<void (*)(IPhysicsObject*, Vector const&, Vector const&), IPhysicsObject*, Vector, Vector, CRefCounted1<CFunctor, CRefCountServiceBase<true, CRefMT> > >::~CFunctor3()
 T CFunctor4<CBaseEntity* (*)(CBaseEntity*, CBaseEntity*, bool, float), CBaseEntity*, CBaseEntity*, bool, float, CRefCounted1<CFunctor, CRefCountServiceBase<true, CRefMT> > >::operator()()
 T CFunctor4<CBaseEntity* (*)(CBaseEntity*, CBaseEntity*, bool, float), CBaseEntity*, CBaseEntity*, bool, float, CRefCounted1<CFunctor, CRefCountServiceBase<true, CRefMT> > >::~CFunctor4()
 T CGCClientJobServerGoodbye::BYieldingRunJobFromMsg(GCSDK::IMsgNetPacket*)
 T CGCClientJobServerGoodbye::~CGCClientJobServerGoodbye()
 T CGCClientJobServerWelcome::BYieldingRunJobFromMsg(GCSDK::IMsgNetPacket*)
 T CGCClientJobServerWelcome::~CGCClientJobServerWelcome()
 T CGCClientSystem::BSendMessage(GCSDK::CMsgBase_t<GCSDK::GCMsgHdrEx_t> const&)
 T CGCClientSystem::BSendMessage(GCSDK::CProtoBufMsgBase const&)
 T CGCClientSystem::CGCClientSystem()
 T CGCClientSystem::GameServerActivate()
 T CGCClientSystem::GetGCClient()
 T CGCClientSystem::GetSOCache(CSteamID const&)
 T CGCClientSystem::InitGC()
 T CGCClientSystem::LevelInitPreEntity()
 T CGCClientSystem::LevelShutdownPostEntity()
 T CGCClientSystem::OnLogonSuccess(SteamServersConnected_t*)
 T CGCClientSystem::PostInit()
 T CGCClientSystem::PostInitGC()
 T CGCClientSystem::PreClientUpdate()
 T CGCClientSystem::PreInitGC()
 T CGCClientSystem::ReceivedServerGoodbye(CMsgServerGoodbye const&)
 T CGCClientSystem::ReceivedServerWelcome(CMsgServerWelcome const&)
 T CGCClientSystem::Shutdown()
 T CGCClientSystem::ThinkConnection()
 T CGCClientSystem::~CGCClientSystem()
 T CGCCoaching_CoachJoining::BYieldingRunGCJob(GCSDK::IMsgNetPacket*)
 T CGCCoaching_CoachJoining::~CGCCoaching_CoachJoining()
 T CGCCoaching_RemoveCurrentCoach::BYieldingRunGCJob(GCSDK::IMsgNetPacket*)
 T CGCCoaching_RemoveCurrentCoach::~CGCCoaching_RemoveCurrentCoach()
 T CGCCompetitiveDailyStatsRollupJob::BYieldingRunGCJob(GCSDK::IMsgNetPacket*)
 T CGCCompetitiveDailyStatsRollupJob::~CGCCompetitiveDailyStatsRollupJob()
 T CGCDev_NewItemRequestResponse::BYieldingRunGCJob(GCSDK::IMsgNetPacket*)
 T CGCDev_NewItemRequestResponse::~CGCDev_NewItemRequestResponse()
 T CGCKickPlayerFromLobbyJob::BYieldingRunGCJob(GCSDK::IMsgNetPacket*)
 T CGCKickPlayerFromLobbyJob::~CGCKickPlayerFromLobbyJob()
 T CGCMsgGC_PlayerDuckLeaderboard_IndividualUpdate::ByteSize() const
 T CGCMsgGC_PlayerDuckLeaderboard_IndividualUpdate::Clear()
 T CGCMsgGC_PlayerDuckLeaderboard_IndividualUpdate::GetCachedSize() const
 T CGCMsgGC_PlayerDuckLeaderboard_IndividualUpdate::GetMetadata() const
 T CGCMsgGC_PlayerDuckLeaderboard_IndividualUpdate::IsInitialized() const
 T CGCMsgGC_PlayerDuckLeaderboard_IndividualUpdate::MergeFrom(CGCMsgGC_PlayerDuckLeaderboard_IndividualUpdate const&)
 T CGCMsgGC_PlayerDuckLeaderboard_IndividualUpdate::New() const
 T CGCMsgGC_PlayerDuckLeaderboard_IndividualUpdate::SerializeWithCachedSizesToArray(unsigned char*) const
 T CGCMsgGC_PlayerDuckLeaderboard_IndividualUpdate::SetCachedSize(int) const
 T CGCMsgGC_PlayerDuckLeaderboard_IndividualUpdate::~CGCMsgGC_PlayerDuckLeaderboard_IndividualUpdate()
 T CGCMsgGC_War_GlobalStatsResponse::ByteSize() const
 T CGCMsgGC_War_GlobalStatsResponse::Clear()
 T CGCMsgGC_War_GlobalStatsResponse::GetCachedSize() const
 T CGCMsgGC_War_GlobalStatsResponse::GetMetadata() const
 T CGCMsgGC_War_GlobalStatsResponse::IsInitialized() const
 T CGCMsgGC_War_GlobalStatsResponse::MergeFrom(CGCMsgGC_War_GlobalStatsResponse const&)
 T CGCMsgGC_War_GlobalStatsResponse::New() const
 T CGCMsgGC_War_GlobalStatsResponse::SerializeWithCachedSizesToArray(unsigned char*) const
 T CGCMsgGC_War_GlobalStatsResponse::SetCachedSize(int) const
 T CGCMsgGC_War_GlobalStatsResponse::~CGCMsgGC_War_GlobalStatsResponse()
 T CGCMsgGC_War_GlobalStatsResponse_SideScore::ByteSize() const
 T CGCMsgGC_War_GlobalStatsResponse_SideScore::Clear()
 T CGCMsgGC_War_GlobalStatsResponse_SideScore::GetCachedSize() const
 T CGCMsgGC_War_GlobalStatsResponse_SideScore::GetMetadata() const
 T CGCMsgGC_War_GlobalStatsResponse_SideScore::IsInitialized() const
 T CGCMsgGC_War_GlobalStatsResponse_SideScore::MergeFrom(CGCMsgGC_War_GlobalStatsResponse_SideScore const&)
 T CGCMsgGC_War_GlobalStatsResponse_SideScore::New() const
 T CGCMsgGC_War_GlobalStatsResponse_SideScore::SerializeWithCachedSizesToArray(unsigned char*) const
 T CGCMsgGC_War_GlobalStatsResponse_SideScore::SetCachedSize(int) const
 T CGCMsgGC_War_GlobalStatsResponse_SideScore::~CGCMsgGC_War_GlobalStatsResponse_SideScore()
 T CGCMsgGC_War_IndividualUpdate::ByteSize() const
 T CGCMsgGC_War_IndividualUpdate::CGCMsgGC_War_IndividualUpdate()
 T CGCMsgGC_War_IndividualUpdate::Clear()
 T CGCMsgGC_War_IndividualUpdate::CopyFrom(CGCMsgGC_War_IndividualUpdate const&)
 T CGCMsgGC_War_IndividualUpdate::GetCachedSize() const
 T CGCMsgGC_War_IndividualUpdate::GetMetadata() const
 T CGCMsgGC_War_IndividualUpdate::IsInitialized() const
 T CGCMsgGC_War_IndividualUpdate::MergeFrom(CGCMsgGC_War_IndividualUpdate const&)
 T CGCMsgGC_War_IndividualUpdate::New() const
 T CGCMsgGC_War_IndividualUpdate::SerializeWithCachedSizesToArray(unsigned char*) const
 T CGCMsgGC_War_IndividualUpdate::SetCachedSize(int) const
 T CGCMsgGC_War_IndividualUpdate::default_instance()
 T CGCMsgGC_War_IndividualUpdate::descriptor()
 T CGCMsgGC_War_IndividualUpdate::~CGCMsgGC_War_IndividualUpdate()
 T CGCMsgGC_War_JoinWar::ByteSize() const
 T CGCMsgGC_War_JoinWar::Clear()
 T CGCMsgGC_War_JoinWar::GetCachedSize() const
 T CGCMsgGC_War_JoinWar::GetMetadata() const
 T CGCMsgGC_War_JoinWar::IsInitialized() const
 T CGCMsgGC_War_JoinWar::MergeFrom(CGCMsgGC_War_JoinWar const&)
 T CGCMsgGC_War_JoinWar::New() const
 T CGCMsgGC_War_JoinWar::SerializeWithCachedSizesToArray(unsigned char*) const
 T CGCMsgGC_War_JoinWar::SetCachedSize(int) const
 T CGCMsgGC_War_JoinWar::~CGCMsgGC_War_JoinWar()
 T CGCMsgGC_War_RequestGlobalStats::ByteSize() const
 T CGCMsgGC_War_RequestGlobalStats::Clear()
 T CGCMsgGC_War_RequestGlobalStats::GetCachedSize() const
 T CGCMsgGC_War_RequestGlobalStats::GetMetadata() const
 T CGCMsgGC_War_RequestGlobalStats::IsInitialized() const
 T CGCMsgGC_War_RequestGlobalStats::MergeFrom(CGCMsgGC_War_RequestGlobalStats const&)
 T CGCMsgGC_War_RequestGlobalStats::New() const
 T CGCMsgGC_War_RequestGlobalStats::SerializeWithCachedSizesToArray(unsigned char*) const
 T CGCMsgGC_War_RequestGlobalStats::SetCachedSize(int) const
 T CGCMsgGC_War_RequestGlobalStats::~CGCMsgGC_War_RequestGlobalStats()
 T CGCMsgGetIPLocation::ByteSize() const
 T CGCMsgGetIPLocation::Clear()
 T CGCMsgGetIPLocation::GetCachedSize() const
 T CGCMsgGetIPLocation::GetMetadata() const
 T CGCMsgGetIPLocation::IsInitialized() const
 T CGCMsgGetIPLocation::MergeFrom(CGCMsgGetIPLocation const&)
 T CGCMsgGetIPLocation::New() const
 T CGCMsgGetIPLocation::SerializeWithCachedSizesToArray(unsigned char*) const
 T CGCMsgGetIPLocation::SetCachedSize(int) const
 T CGCMsgGetIPLocation::~CGCMsgGetIPLocation()
 T CGCMsgGetIPLocationResponse::ByteSize() const
 T CGCMsgGetIPLocationResponse::Clear()
 T CGCMsgGetIPLocationResponse::GetCachedSize() const
 T CGCMsgGetIPLocationResponse::GetMetadata() const
 T CGCMsgGetIPLocationResponse::IsInitialized() const
 T CGCMsgGetIPLocationResponse::MergeFrom(CGCMsgGetIPLocationResponse const&)
 T CGCMsgGetIPLocationResponse::New() const
 T CGCMsgGetIPLocationResponse::SerializeWithCachedSizesToArray(unsigned char*) const
 T CGCMsgGetIPLocationResponse::SetCachedSize(int) const
 T CGCMsgGetIPLocationResponse::~CGCMsgGetIPLocationResponse()
 T CGCMsgGetSystemStats::ByteSize() const
 T CGCMsgGetSystemStats::Clear()
 T CGCMsgGetSystemStats::GetCachedSize() const
 T CGCMsgGetSystemStats::GetMetadata() const
 T CGCMsgGetSystemStats::IsInitialized() const
 T CGCMsgGetSystemStats::MergeFrom(CGCMsgGetSystemStats const&)
 T CGCMsgGetSystemStats::New() const
 T CGCMsgGetSystemStats::SerializeWithCachedSizesToArray(unsigned char*) const
 T CGCMsgGetSystemStats::SetCachedSize(int) const
 T CGCMsgGetSystemStats::~CGCMsgGetSystemStats()
 T CGCMsgGetSystemStatsResponse::ByteSize() const
 T CGCMsgGetSystemStatsResponse::Clear()
 T CGCMsgGetSystemStatsResponse::GetCachedSize() const
 T CGCMsgGetSystemStatsResponse::GetMetadata() const
 T CGCMsgGetSystemStatsResponse::IsInitialized() const
 T CGCMsgGetSystemStatsResponse::MergeFrom(CGCMsgGetSystemStatsResponse const&)
 T CGCMsgGetSystemStatsResponse::New() const
 T CGCMsgGetSystemStatsResponse::SerializeWithCachedSizesToArray(unsigned char*) const
 T CGCMsgGetSystemStatsResponse::SetCachedSize(int) const
 T CGCMsgGetSystemStatsResponse::~CGCMsgGetSystemStatsResponse()
 T CGCMsgMemCachedDelete::ByteSize() const
 T CGCMsgMemCachedDelete::Clear()
 T CGCMsgMemCachedDelete::GetCachedSize() const
 T CGCMsgMemCachedDelete::GetMetadata() const
 T CGCMsgMemCachedDelete::IsInitialized() const
 T CGCMsgMemCachedDelete::MergeFrom(CGCMsgMemCachedDelete const&)
 T CGCMsgMemCachedDelete::New() const
 T CGCMsgMemCachedDelete::SerializeWithCachedSizesToArray(unsigned char*) const
 T CGCMsgMemCachedDelete::SetCachedSize(int) const
 T CGCMsgMemCachedDelete::~CGCMsgMemCachedDelete()
 T CGCMsgMemCachedGet::ByteSize() const
 T CGCMsgMemCachedGet::Clear()
 T CGCMsgMemCachedGet::GetCachedSize() const
 T CGCMsgMemCachedGet::GetMetadata() const
 T CGCMsgMemCachedGet::IsInitialized() const
 T CGCMsgMemCachedGet::MergeFrom(CGCMsgMemCachedGet const&)
 T CGCMsgMemCachedGet::New() const
 T CGCMsgMemCachedGet::SerializeWithCachedSizesToArray(unsigned char*) const
 T CGCMsgMemCachedGet::SetCachedSize(int) const
 T CGCMsgMemCachedGet::~CGCMsgMemCachedGet()
 T CGCMsgMemCachedGetResponse::ByteSize() const
 T CGCMsgMemCachedGetResponse::Clear()
 T CGCMsgMemCachedGetResponse::GetCachedSize() const
 T CGCMsgMemCachedGetResponse::GetMetadata() const
 T CGCMsgMemCachedGetResponse::IsInitialized() const
 T CGCMsgMemCachedGetResponse::MergeFrom(CGCMsgMemCachedGetResponse const&)
 T CGCMsgMemCachedGetResponse::New() const
 T CGCMsgMemCachedGetResponse::SerializeWithCachedSizesToArray(unsigned char*) const
 T CGCMsgMemCachedGetResponse::SetCachedSize(int) const
 T CGCMsgMemCachedGetResponse::~CGCMsgMemCachedGetResponse()
 T CGCMsgMemCachedGetResponse_ValueTag::ByteSize() const
 T CGCMsgMemCachedGetResponse_ValueTag::Clear()
 T CGCMsgMemCachedGetResponse_ValueTag::GetCachedSize() const
 T CGCMsgMemCachedGetResponse_ValueTag::GetMetadata() const
 T CGCMsgMemCachedGetResponse_ValueTag::IsInitialized() const
 T CGCMsgMemCachedGetResponse_ValueTag::MergeFrom(CGCMsgMemCachedGetResponse_ValueTag const&)
 T CGCMsgMemCachedGetResponse_ValueTag::New() const
 T CGCMsgMemCachedGetResponse_ValueTag::SerializeWithCachedSizesToArray(unsigned char*) const
 T CGCMsgMemCachedGetResponse_ValueTag::SetCachedSize(int) const
 T CGCMsgMemCachedGetResponse_ValueTag::~CGCMsgMemCachedGetResponse_ValueTag()
 T CGCMsgMemCachedSet::ByteSize() const
 T CGCMsgMemCachedSet::Clear()
 T CGCMsgMemCachedSet::GetCachedSize() const
 T CGCMsgMemCachedSet::GetMetadata() const
 T CGCMsgMemCachedSet::IsInitialized() const
 T CGCMsgMemCachedSet::MergeFrom(CGCMsgMemCachedSet const&)
 T CGCMsgMemCachedSet::New() const
 T CGCMsgMemCachedSet::SerializeWithCachedSizesToArray(unsigned char*) const
 T CGCMsgMemCachedSet::SetCachedSize(int) const
 T CGCMsgMemCachedSet::~CGCMsgMemCachedSet()
 T CGCMsgMemCachedSet_KeyPair::ByteSize() const
 T CGCMsgMemCachedSet_KeyPair::Clear()
 T CGCMsgMemCachedSet_KeyPair::GetCachedSize() const
 T CGCMsgMemCachedSet_KeyPair::GetMetadata() const
 T CGCMsgMemCachedSet_KeyPair::IsInitialized() const
 T CGCMsgMemCachedSet_KeyPair::MergeFrom(CGCMsgMemCachedSet_KeyPair const&)
 T CGCMsgMemCachedSet_KeyPair::New() const
 T CGCMsgMemCachedSet_KeyPair::SerializeWithCachedSizesToArray(unsigned char*) const
 T CGCMsgMemCachedSet_KeyPair::SetCachedSize(int) const
 T CGCMsgMemCachedSet_KeyPair::SharedDtor()
 T CGCMsgMemCachedSet_KeyPair::~CGCMsgMemCachedSet_KeyPair()
 T CGCMsgMemCachedStats::ByteSize() const
 T CGCMsgMemCachedStats::Clear()
 T CGCMsgMemCachedStats::GetCachedSize() const
 T CGCMsgMemCachedStats::GetMetadata() const
 T CGCMsgMemCachedStats::IsInitialized() const
 T CGCMsgMemCachedStats::MergeFrom(CGCMsgMemCachedStats const&)
 T CGCMsgMemCachedStats::New() const
 T CGCMsgMemCachedStats::SerializeWithCachedSizesToArray(unsigned char*) const
 T CGCMsgMemCachedStats::SetCachedSize(int) const
 T CGCMsgMemCachedStats::~CGCMsgMemCachedStats()
 T CGCMsgMemCachedStatsResponse::ByteSize() const
 T CGCMsgMemCachedStatsResponse::Clear()
 T CGCMsgMemCachedStatsResponse::GetCachedSize() const
 T CGCMsgMemCachedStatsResponse::GetMetadata() const
 T CGCMsgMemCachedStatsResponse::IsInitialized() const
 T CGCMsgMemCachedStatsResponse::MergeFrom(CGCMsgMemCachedStatsResponse const&)
 T CGCMsgMemCachedStatsResponse::New() const
 T CGCMsgMemCachedStatsResponse::SerializeWithCachedSizesToArray(unsigned char*) const
 T CGCMsgMemCachedStatsResponse::SetCachedSize(int) const
 T CGCMsgMemCachedStatsResponse::~CGCMsgMemCachedStatsResponse()
 T CGCMsgSQLStats::ByteSize() const
 T CGCMsgSQLStats::Clear()
 T CGCMsgSQLStats::GetCachedSize() const
 T CGCMsgSQLStats::GetMetadata() const
 T CGCMsgSQLStats::IsInitialized() const
 T CGCMsgSQLStats::MergeFrom(CGCMsgSQLStats const&)
 T CGCMsgSQLStats::New() const
 T CGCMsgSQLStats::SerializeWithCachedSizesToArray(unsigned char*) const
 T CGCMsgSQLStats::SetCachedSize(int) const
 T CGCMsgSQLStats::~CGCMsgSQLStats()
 T CGCMsgSQLStatsResponse::ByteSize() const
 T CGCMsgSQLStatsResponse::Clear()
 T CGCMsgSQLStatsResponse::GetCachedSize() const
 T CGCMsgSQLStatsResponse::GetMetadata() const
 T CGCMsgSQLStatsResponse::IsInitialized() const
 T CGCMsgSQLStatsResponse::MergeFrom(CGCMsgSQLStatsResponse const&)
 T CGCMsgSQLStatsResponse::New() const
 T CGCMsgSQLStatsResponse::SerializeWithCachedSizesToArray(unsigned char*) const
 T CGCMsgSQLStatsResponse::SetCachedSize(int) const
 T CGCMsgSQLStatsResponse::~CGCMsgSQLStatsResponse()
 T CGCMsgSystemStatsSchema::ByteSize() const
 T CGCMsgSystemStatsSchema::Clear()
 T CGCMsgSystemStatsSchema::GetCachedSize() const
 T CGCMsgSystemStatsSchema::GetMetadata() const
 T CGCMsgSystemStatsSchema::IsInitialized() const
 T CGCMsgSystemStatsSchema::MergeFrom(CGCMsgSystemStatsSchema const&)
 T CGCMsgSystemStatsSchema::New() const
 T CGCMsgSystemStatsSchema::SerializeWithCachedSizesToArray(unsigned char*) const
 T CGCMsgSystemStatsSchema::SetCachedSize(int) const
 T CGCMsgSystemStatsSchema::~CGCMsgSystemStatsSchema()
 T CGCMsgTFHelloResponse::ByteSize() const
 T CGCMsgTFHelloResponse::Clear()
 T CGCMsgTFHelloResponse::GetCachedSize() const
 T CGCMsgTFHelloResponse::GetMetadata() const
 T CGCMsgTFHelloResponse::IsInitialized() const
 T CGCMsgTFHelloResponse::MergeFrom(CGCMsgTFHelloResponse const&)
 T CGCMsgTFHelloResponse::New() const
 T CGCMsgTFHelloResponse::SerializeWithCachedSizesToArray(unsigned char*) const
 T CGCMsgTFHelloResponse::SetCachedSize(int) const
 T CGCMsgTFHelloResponse::~CGCMsgTFHelloResponse()
 T CGCMsgTFSync::ByteSize() const
 T CGCMsgTFSync::Clear()
 T CGCMsgTFSync::GetCachedSize() const
 T CGCMsgTFSync::GetMetadata() const
 T CGCMsgTFSync::IsInitialized() const
 T CGCMsgTFSync::MergeFrom(CGCMsgTFSync const&)
 T CGCMsgTFSync::New() const
 T CGCMsgTFSync::SerializeWithCachedSizesToArray(unsigned char*) const
 T CGCMsgTFSync::SetCachedSize(int) const
 T CGCMsgTFSync::SharedDtor()
 T CGCMsgTFSync::~CGCMsgTFSync()
 T CGCMsgTFSyncEx::ByteSize() const
 T CGCMsgTFSyncEx::Clear()
 T CGCMsgTFSyncEx::GetCachedSize() const
 T CGCMsgTFSyncEx::GetMetadata() const
 T CGCMsgTFSyncEx::IsInitialized() const
 T CGCMsgTFSyncEx::MergeFrom(CGCMsgTFSyncEx const&)
 T CGCMsgTFSyncEx::New() const
 T CGCMsgTFSyncEx::SerializeWithCachedSizesToArray(unsigned char*) const
 T CGCMsgTFSyncEx::SetCachedSize(int) const
 T CGCMsgTFSyncEx::SharedDtor()
 T CGCMsgTFSyncEx::~CGCMsgTFSyncEx()
 T CGCMsg_WorldItemPlacement_Update::ByteSize() const
 T CGCMsg_WorldItemPlacement_Update::Clear()
 T CGCMsg_WorldItemPlacement_Update::GetCachedSize() const
 T CGCMsg_WorldItemPlacement_Update::GetMetadata() const
 T CGCMsg_WorldItemPlacement_Update::IsInitialized() const
 T CGCMsg_WorldItemPlacement_Update::MergeFrom(CGCMsg_WorldItemPlacement_Update const&)
 T CGCMsg_WorldItemPlacement_Update::New() const
 T CGCMsg_WorldItemPlacement_Update::SerializeWithCachedSizesToArray(unsigned char*) const
 T CGCMsg_WorldItemPlacement_Update::SetCachedSize(int) const
 T CGCMsg_WorldItemPlacement_Update::~CGCMsg_WorldItemPlacement_Update()
 T CGCQuestObjective_PointsChangeResponse::BYieldingRunGCJob(GCSDK::IMsgNetPacket*)
 T CGCQuestObjective_PointsChangeResponse::~CGCQuestObjective_PointsChangeResponse()
 T CGCReplicateConVars::BYieldingRunGCJob(GCSDK::IMsgNetPacket*)
 T CGCReplicateConVars::~CGCReplicateConVars()
 T CGCStorePurchaseInit_LineItem::ByteSize() const
 T CGCStorePurchaseInit_LineItem::Clear()
 T CGCStorePurchaseInit_LineItem::GetCachedSize() const
 T CGCStorePurchaseInit_LineItem::GetMetadata() const
 T CGCStorePurchaseInit_LineItem::IsInitialized() const
 T CGCStorePurchaseInit_LineItem::MergeFrom(CGCStorePurchaseInit_LineItem const&)
 T CGCStorePurchaseInit_LineItem::New() const
 T CGCStorePurchaseInit_LineItem::SerializeWithCachedSizesToArray(unsigned char*) const
 T CGCStorePurchaseInit_LineItem::SetCachedSize(int) const
 T CGCStorePurchaseInit_LineItem::~CGCStorePurchaseInit_LineItem()
 T CGCSystemMsg_GetAccountDetails::ByteSize() const
 T CGCSystemMsg_GetAccountDetails::Clear()
 T CGCSystemMsg_GetAccountDetails::GetCachedSize() const
 T CGCSystemMsg_GetAccountDetails::GetMetadata() const
 T CGCSystemMsg_GetAccountDetails::IsInitialized() const
 T CGCSystemMsg_GetAccountDetails::MergeFrom(CGCSystemMsg_GetAccountDetails const&)
 T CGCSystemMsg_GetAccountDetails::New() const
 T CGCSystemMsg_GetAccountDetails::SerializeWithCachedSizesToArray(unsigned char*) const
 T CGCSystemMsg_GetAccountDetails::SetCachedSize(int) const
 T CGCSystemMsg_GetAccountDetails::~CGCSystemMsg_GetAccountDetails()
 T CGCSystemMsg_GetAccountDetails_Response::ByteSize() const
 T CGCSystemMsg_GetAccountDetails_Response::Clear()
 T CGCSystemMsg_GetAccountDetails_Response::GetCachedSize() const
 T CGCSystemMsg_GetAccountDetails_Response::GetMetadata() const
 T CGCSystemMsg_GetAccountDetails_Response::IsInitialized() const
 T CGCSystemMsg_GetAccountDetails_Response::MergeFrom(CGCSystemMsg_GetAccountDetails_Response const&)
 T CGCSystemMsg_GetAccountDetails_Response::New() const
 T CGCSystemMsg_GetAccountDetails_Response::SerializeWithCachedSizesToArray(unsigned char*) const
 T CGCSystemMsg_GetAccountDetails_Response::SetCachedSize(int) const
 T CGCSystemMsg_GetAccountDetails_Response::SharedDtor()
 T CGCSystemMsg_GetAccountDetails_Response::~CGCSystemMsg_GetAccountDetails_Response()
 T CGCSystemMsg_GetPurchaseTrust_Request::ByteSize() const
 T CGCSystemMsg_GetPurchaseTrust_Request::Clear()
 T CGCSystemMsg_GetPurchaseTrust_Request::GetCachedSize() const
 T CGCSystemMsg_GetPurchaseTrust_Request::GetMetadata() const
 T CGCSystemMsg_GetPurchaseTrust_Request::IsInitialized() const
 T CGCSystemMsg_GetPurchaseTrust_Request::MergeFrom(CGCSystemMsg_GetPurchaseTrust_Request const&)
 T CGCSystemMsg_GetPurchaseTrust_Request::New() const
 T CGCSystemMsg_GetPurchaseTrust_Request::SerializeWithCachedSizesToArray(unsigned char*) const
 T CGCSystemMsg_GetPurchaseTrust_Request::SetCachedSize(int) const
 T CGCSystemMsg_GetPurchaseTrust_Request::~CGCSystemMsg_GetPurchaseTrust_Request()
 T CGCSystemMsg_GetPurchaseTrust_Response::ByteSize() const
 T CGCSystemMsg_GetPurchaseTrust_Response::Clear()
 T CGCSystemMsg_GetPurchaseTrust_Response::GetCachedSize() const
 T CGCSystemMsg_GetPurchaseTrust_Response::GetMetadata() const
 T CGCSystemMsg_GetPurchaseTrust_Response::IsInitialized() const
 T CGCSystemMsg_GetPurchaseTrust_Response::MergeFrom(CGCSystemMsg_GetPurchaseTrust_Response const&)
 T CGCSystemMsg_GetPurchaseTrust_Response::New() const
 T CGCSystemMsg_GetPurchaseTrust_Response::SerializeWithCachedSizesToArray(unsigned char*) const
 T CGCSystemMsg_GetPurchaseTrust_Response::SetCachedSize(int) const
 T CGCSystemMsg_GetPurchaseTrust_Response::~CGCSystemMsg_GetPurchaseTrust_Response()
 T CGCTFItemAcknowledged::BYieldingRunGCJob(GCSDK::IMsgNetPacket*)
 T CGCTFItemAcknowledged::~CGCTFItemAcknowledged()
 T CGCTFQuickplay_PlayerJoining::BYieldingRunGCJob(GCSDK::IMsgNetPacket*)
 T CGCTFQuickplay_PlayerJoining::~CGCTFQuickplay_PlayerJoining()
 T CGCToGCMsgMasterAck::ByteSize() const
 T CGCToGCMsgMasterAck::Clear()
 T CGCToGCMsgMasterAck::GetCachedSize() const
 T CGCToGCMsgMasterAck::GetMetadata() const
 T CGCToGCMsgMasterAck::IsInitialized() const
 T CGCToGCMsgMasterAck::MergeFrom(CGCToGCMsgMasterAck const&)
 T CGCToGCMsgMasterAck::New() const
 T CGCToGCMsgMasterAck::SerializeWithCachedSizesToArray(unsigned char*) const
 T CGCToGCMsgMasterAck::SetCachedSize(int) const
 T CGCToGCMsgMasterAck::SharedDtor()
 T CGCToGCMsgMasterAck::~CGCToGCMsgMasterAck()
 T CGCToGCMsgMasterAck_Response::ByteSize() const
 T CGCToGCMsgMasterAck_Response::Clear()
 T CGCToGCMsgMasterAck_Response::GetCachedSize() const
 T CGCToGCMsgMasterAck_Response::GetMetadata() const
 T CGCToGCMsgMasterAck_Response::IsInitialized() const
 T CGCToGCMsgMasterAck_Response::MergeFrom(CGCToGCMsgMasterAck_Response const&)
 T CGCToGCMsgMasterAck_Response::New() const
 T CGCToGCMsgMasterAck_Response::SerializeWithCachedSizesToArray(unsigned char*) const
 T CGCToGCMsgMasterAck_Response::SetCachedSize(int) const
 T CGCToGCMsgMasterAck_Response::~CGCToGCMsgMasterAck_Response()
 T CGCToGCMsgMasterStartupComplete::ByteSize() const
 T CGCToGCMsgMasterStartupComplete::Clear()
 T CGCToGCMsgMasterStartupComplete::GetCachedSize() const
 T CGCToGCMsgMasterStartupComplete::GetMetadata() const
 T CGCToGCMsgMasterStartupComplete::IsInitialized() const
 T CGCToGCMsgMasterStartupComplete::MergeFrom(CGCToGCMsgMasterStartupComplete const&)
 T CGCToGCMsgMasterStartupComplete::New() const
 T CGCToGCMsgMasterStartupComplete::SerializeWithCachedSizesToArray(unsigned char*) const
 T CGCToGCMsgMasterStartupComplete::SetCachedSize(int) const
 T CGCToGCMsgMasterStartupComplete::~CGCToGCMsgMasterStartupComplete()
 T CGCToGCMsgMasterStartupComplete_GCInfo::ByteSize() const
 T CGCToGCMsgMasterStartupComplete_GCInfo::Clear()
 T CGCToGCMsgMasterStartupComplete_GCInfo::GetCachedSize() const
 T CGCToGCMsgMasterStartupComplete_GCInfo::GetMetadata() const
 T CGCToGCMsgMasterStartupComplete_GCInfo::IsInitialized() const
 T CGCToGCMsgMasterStartupComplete_GCInfo::MergeFrom(CGCToGCMsgMasterStartupComplete_GCInfo const&)
 T CGCToGCMsgMasterStartupComplete_GCInfo::New() const
 T CGCToGCMsgMasterStartupComplete_GCInfo::SerializeWithCachedSizesToArray(unsigned char*) const
 T CGCToGCMsgMasterStartupComplete_GCInfo::SetCachedSize(int) const
 T CGCToGCMsgMasterStartupComplete_GCInfo::~CGCToGCMsgMasterStartupComplete_GCInfo()
 T CGCToGCMsgRouted::ByteSize() const
 T CGCToGCMsgRouted::Clear()
 T CGCToGCMsgRouted::GetCachedSize() const
 T CGCToGCMsgRouted::GetMetadata() const
 T CGCToGCMsgRouted::IsInitialized() const
 T CGCToGCMsgRouted::MergeFrom(CGCToGCMsgRouted const&)
 T CGCToGCMsgRouted::New() const
 T CGCToGCMsgRouted::SerializeWithCachedSizesToArray(unsigned char*) const
 T CGCToGCMsgRouted::SetCachedSize(int) const
 T CGCToGCMsgRouted::~CGCToGCMsgRouted()
 T CGCToGCMsgRoutedReply::ByteSize() const
 T CGCToGCMsgRoutedReply::Clear()
 T CGCToGCMsgRoutedReply::GetCachedSize() const
 T CGCToGCMsgRoutedReply::GetMetadata() const
 T CGCToGCMsgRoutedReply::IsInitialized() const
 T CGCToGCMsgRoutedReply::MergeFrom(CGCToGCMsgRoutedReply const&)
 T CGCToGCMsgRoutedReply::New() const
 T CGCToGCMsgRoutedReply::SerializeWithCachedSizesToArray(unsigned char*) const
 T CGCToGCMsgRoutedReply::SetCachedSize(int) const
 T CGCToGCMsgRoutedReply::~CGCToGCMsgRoutedReply()
 T CGCUpdateConVar::BYieldingRunGCJob(GCSDK::IMsgNetPacket*)
 T CGCUpdateConVar::~CGCUpdateConVar()
 T CGCUpdateItemSchema::BYieldingRunGCJob(GCSDK::IMsgNetPacket*)
 T CGCUpdateItemSchema::OnHTTPCompleted(HTTPRequestCompleted_t*, bool)
 T CGCUpdateItemSchema::~CGCUpdateItemSchema()
 T CGCUpdateServerModificationItemStateJob::BYieldingRunGCJob(GCSDK::IMsgNetPacket*)
 T CGCUpdateServerModificationItemStateJob::~CGCUpdateServerModificationItemStateJob()
 T CGCUseServerModificationItemJob::BYieldingRunGCJob(GCSDK::IMsgNetPacket*)
 T CGCUseServerModificationItemJob::~CGCUseServerModificationItemJob()
 T CGCVoteSystemVoteKickResponse::BYieldingRunJobFromMsg(GCSDK::IMsgNetPacket*)
 T CGCVoteSystemVoteKickResponse::~CGCVoteSystemVoteKickResponse()
 T CGC_GameServer_AuthChallenge::BYieldingRunGCJob(GCSDK::IMsgNetPacket*)
 T CGC_GameServer_AuthChallenge::~CGC_GameServer_AuthChallenge()
 T CGC_GameServer_AuthResult::BYieldingRunGCJob(GCSDK::IMsgNetPacket*)
 T CGC_GameServer_AuthResult::~CGC_GameServer_AuthResult()
 T CGC_GameServer_Duel_Request::BYieldingRunGCJob(GCSDK::IMsgNetPacket*)
 T CGC_GameServer_Duel_Request::~CGC_GameServer_Duel_Request()
 T CGC_GameServer_Duel_Response::BYieldingRunGCJob(GCSDK::IMsgNetPacket*)
 T CGC_GameServer_Duel_Response::~CGC_GameServer_Duel_Response()
 T CGC_RespawnPostLoadoutChange::BYieldingRunGCJob(GCSDK::IMsgNetPacket*)
 T CGC_RespawnPostLoadoutChange::~CGC_RespawnPostLoadoutChange()
 T CGameDLL_ConVarAccessor::RegisterConCommandBase(ConCommandBase*)
 T CGameEnd::GetDataDescMap()
 T CGameEnd::InputGameEnd(inputdata_t&)
 T CGameEnd::Use(CBaseEntity*, CBaseEntity*, USE_TYPE, float)
 T CGameEnd::~CGameEnd()
 T CGameEventListener::~CGameEventListener()
 T CGameGibManager::Activate()
 T CGameGibManager::GetDataDescMap()
 T CGameGibManager::InputSetMaxPieces(inputdata_t&)
 T CGameGibManager::InputSetMaxPiecesDX8(inputdata_t&)
 T CGameGibManager::~CGameGibManager()
 T CGameMovement::Accelerate(Vector&, float, float)
 T CGameMovement::AddGravity()
 T CGameMovement::AirAccelerate(Vector&, float, float)
 T CGameMovement::AirMove()
 T CGameMovement::CGameMovement()
 T CGameMovement::CalcRoll(QAngle const&, Vector const&, float, float)
 T CGameMovement::CanAccelerate()
 T CGameMovement::CanUnDuckJump(CGameTrace&)
 T CGameMovement::CanUnduck()
 T CGameMovement::CategorizePosition()
 T CGameMovement::CheckFalling()
 T CGameMovement::CheckJumpButton()
 T CGameMovement::CheckParameters()
 T CGameMovement::CheckStuck()
 T CGameMovement::CheckVelocity()
 T CGameMovement::CheckWater()
 T CGameMovement::CheckWaterJump()
 T CGameMovement::ClimbSpeed() const
 T CGameMovement::ComputeConstraintSpeedFactor()
 T CGameMovement::DecayPunchAngle()
 T CGameMovement::DiffPrint(char const*, ...)
 T CGameMovement::Duck()
 T CGameMovement::FinishDuck()
 T CGameMovement::FinishGravity()
 T CGameMovement::FinishMove()
 T CGameMovement::FinishTrackPredictionErrors(CBasePlayer*)
 T CGameMovement::FinishUnDuck()
 T CGameMovement::FinishUnDuckJump(CGameTrace&)
 T CGameMovement::Friction()
 T CGameMovement::FullLadderMove()
 T CGameMovement::FullNoClipMove(float, float)
 T CGameMovement::FullObserverMove()
 T CGameMovement::FullTossMove()
 T CGameMovement::FullWalkMove()
 T CGameMovement::GameHasLadders() const
 T CGameMovement::GetAirSpeedCap()
 T CGameMovement::GetCheckInterval(CGameMovement::IntervalType_t)
 T CGameMovement::GetPlayerMaxs() const
 T CGameMovement::GetPlayerMaxs(bool) const
 T CGameMovement::GetPlayerMins() const
 T CGameMovement::GetPlayerMins(bool) const
 T CGameMovement::GetPlayerViewOffset(bool) const
 T CGameMovement::GetPointContentsCached(Vector const&, int)
 T CGameMovement::HandleDuckingSpeedCrop()
 T CGameMovement::InWater()
 T CGameMovement::IsDead() const
 T CGameMovement::LadderDistance() const
 T CGameMovement::LadderLateralMultiplier() const
 T CGameMovement::LadderMask() const
 T CGameMovement::LadderMove()
 T CGameMovement::OnJump(float)
 T CGameMovement::OnLadder(CGameTrace&)
 T CGameMovement::OnLand(float)
 T CGameMovement::OnTryPlayerMoveCollision(CGameTrace&)
 T CGameMovement::PerformFlyCollisionResolution(CGameTrace&, Vector&)
 T CGameMovement::PlaySwimSound()
 T CGameMovement::PlayerMove()
 T CGameMovement::PlayerRoughLandingEffects(float)
 T CGameMovement::PlayerSolidMask(bool)
 T CGameMovement::ProcessMovement(CBasePlayer*, CMoveData*)
 T CGameMovement::PushEntity(Vector&, CGameTrace*)
 T CGameMovement::ReduceTimers()
 T CGameMovement::ResetGetPointContentsCache()
 T CGameMovement::SetDuckedEyeOffset(float)
 T CGameMovement::SetGroundEntity(CGameTrace*)
 T CGameMovement::StartGravity()
 T CGameMovement::StartTrackPredictionErrors(CBasePlayer*)
 T CGameMovement::StartUnDuckJump()
 T CGameMovement::StayOnGround()
 T CGameMovement::StepMove(Vector&, CGameTrace&)
 T CGameMovement::TestPlayerPosition(Vector const&, int, CGameTrace&)
 T CGameMovement::TracePlayerBBox(Vector const&, Vector const&, unsigned int, int, CGameTrace&)
 T CGameMovement::TryPlayerMove(Vector*, CGameTrace*)
 T CGameMovement::TryTouchGround(Vector const&, Vector const&, Vector const&, Vector const&, unsigned int, int, CGameTrace&)
 T CGameMovement::TryTouchGroundInQuadrants(Vector const&, Vector const&, unsigned int, int, CGameTrace&)
 T CGameMovement::UpdateDuckJumpEyeOffset()
 T CGameMovement::WalkMove()
 T CGameMovement::WaterJump()
 T CGameMovement::WaterMove()
 T CGameMovement::~CGameMovement()
 T CGamePlayerEquip::GetDataDescMap()
 T CGamePlayerEquip::KeyValue(char const*, char const*)
 T CGamePlayerEquip::Touch(CBaseEntity*)
 T CGamePlayerEquip::Use(CBaseEntity*, CBaseEntity*, USE_TYPE, float)
 T CGamePlayerEquip::~CGamePlayerEquip()
 T CGamePlayerTeam::Use(CBaseEntity*, CBaseEntity*, USE_TYPE, float)
 T CGamePlayerTeam::~CGamePlayerTeam()
 T CGamePlayerZone::GetDataDescMap()
 T CGamePlayerZone::InputCountPlayersInZone(inputdata_t&)
 T CGamePlayerZone::~CGamePlayerZone()
 T CGameRules::AIClassText(int)
 T CGameRules::AdjustPlayerDamageInflicted(float)
 T CGameRules::AdjustPlayerDamageTaken(CTakeDamageInfo*)
 T CGameRules::AllowAutoTargetCrosshair()
 T CGameRules::AllowThirdPersonCamera()
 T CGameRules::CGameRules()
 T CGameRules::CanEntityBeUsePushed(CBaseEntity*)
 T CGameRules::CanHaveAmmo(CBaseCombatCharacter*, char const*)
 T CGameRules::CanHaveAmmo(CBaseCombatCharacter*, int)
 T CGameRules::CanHavePlayerItem(CBasePlayer*, CBaseCombatWeapon*)
 T CGameRules::ChangePlayerTeam(CBasePlayer*, char const*, bool, bool)
 T CGameRules::CheckChatText(CBasePlayer*, char*)
 T CGameRules::CheckHaptics(CBasePlayer*)
 T CGameRules::ClientCommand(CBaseEntity*, CCommand const&)
 T CGameRules::ClientCommandKeyValues(edict_t*, KeyValues*)
 T CGameRules::ClientSettingsChanged(CBasePlayer*)
 T CGameRules::ClientSpawned(edict_t*)
 T CGameRules::CreateCustomNetworkStringTables()
 T CGameRules::CreateStandardEntities()
 T CGameRules::DefaultFOV()
 T CGameRules::EndGameFrame()
 T CGameRules::EndMultiplayerGame()
 T CGameRules::FPlayerCanTakeDamage(CBasePlayer*, CBaseEntity*, CTakeDamageInfo const&)
 T CGameRules::FlHEVChargerRechargeTime()
 T CGameRules::FlPlayerFallDeathDoesScreenFade(CBasePlayer*)
 T CGameRules::FrameUpdatePostEntityThink()
 T CGameRules::GetAmmoDamage(CBaseEntity*, CBaseEntity*, int)
 T CGameRules::GetAmmoQuantityScale(int)
 T CGameRules::GetAutoAimMode()
 T CGameRules::GetAutoAimScale(CBasePlayer*)
 T CGameRules::GetChatFormat(bool, CBasePlayer*)
 T CGameRules::GetChatLocation(bool, CBasePlayer*)
 T CGameRules::GetChatPrefix(bool, CBasePlayer*)
 T CGameRules::GetDamageCustomString(CTakeDamageInfo const&)
 T CGameRules::GetDamageMultiplier()
 T CGameRules::GetEncryptionKey()
 T CGameRules::GetGameDescription()
 T CGameRules::GetGameType()
 T CGameRules::GetGameTypeName()
 T CGameRules::GetIndexedTeamName(int)
 T CGameRules::GetNextBestWeapon(CBaseCombatCharacter*, CBaseCombatWeapon*)
 T CGameRules::GetPlayerSpawnSpot(CBasePlayer*)
 T CGameRules::GetSkillLevel()
 T CGameRules::GetTaggedConVarList(KeyValues*)
 T CGameRules::GetTeamIndex(char const*)
 T CGameRules::GetViewVectors() const
 T CGameRules::InRoundRestart()
 T CGameRules::InitDefaultAIRelationships()
 T CGameRules::IsConnectedUserInfoChangeAllowed(CBasePlayer*)
 T CGameRules::IsHolidayActive(int) const
 T CGameRules::IsManualMapChangeOkay(char const**)
 T CGameRules::IsSkillLevel(int)
 T CGameRules::IsSpawnPointValid(CBaseEntity*, CBasePlayer*)
 T CGameRules::IsTeamplay()
 T CGameRules::IsValidTeam(char const*)
 T CGameRules::LevelShutdown()
 T CGameRules::MarkAchievement(IRecipientFilter&, char const*)
 T CGameRules::Name()
 T CGameRules::OnFileReceived(char const*, unsigned int)
 T CGameRules::OnNavMeshLoad()
 T CGameRules::OnSkillLevelChanged(int)
 T CGameRules::PlayFootstepSounds(CBasePlayer*)
 T CGameRules::PlayTextureSounds()
 T CGameRules::Precache()
 T CGameRules::ProcessVerboseLogOutput()
 T CGameRules::RadiusDamage(CTakeDamageInfo const&, Vector const&, float, int, CBaseEntity*)
 T CGameRules::RefreshSkillData(bool)
 T CGameRules::ResetMapCycleTimeStamp()
 T CGameRules::SetDefaultPlayerTeam(CBasePlayer*)
 T CGameRules::SetSkillLevel(int)
 T CGameRules::ShouldAutoAim(CBasePlayer*, edict_t*)
 T CGameRules::ShouldBurningPropsEmitLight()
 T CGameRules::ShouldCollide(int, int)
 T CGameRules::ShouldDrawHeadLabels()
 T CGameRules::ShouldUseRobustRadiusDamage(CBaseEntity*)
 T CGameRules::Status(void (*)(char const*, ...))
 T CGameRules::SwitchToNextBestWeapon(CBaseCombatCharacter*, CBaseCombatWeapon*)
 T CGameRules::TacticalMissionManagerFactory()
 T CGameRules::Think()
 T CGameRules::UpdateClientData(CBasePlayer*)
 T CGameRules::WeaponTraceEntity(CBaseEntity*, Vector const&, Vector const&, unsigned int, CGameTrace*)
 T CGameRules::~CGameRules()
 T CGameRulesProxy::CGameRulesProxy()
 T CGameRulesProxy::GetServerClass()
 T CGameRulesProxy::NotifyNetworkStateChanged()
 T CGameRulesProxy::ObjectCaps()
 T CGameRulesProxy::UpdateTransmitState()
 T CGameRulesProxy::YouForgotToImplementOrDeclareServerClass()
 T CGameRulesProxy::~CGameRulesProxy()
 T CGameRulesRegister::CGameRulesRegister(char const*, void (*)())
 T CGameSaveRestoreInfo::GetEntityIndex(CBaseEntity const*)
 T CGameScore::GetDataDescMap()
 T CGameScore::InputApplyScore(inputdata_t&)
 T CGameScore::KeyValue(char const*, char const*)
 T CGameScore::Spawn()
 T CGameScore::Use(CBaseEntity*, CBaseEntity*, USE_TYPE, float)
 T CGameScore::~CGameScore()
 T CGameStringPool::AllocateWithKey(char const*, void const*)
 T CGameStringPool::Dump()
 T CGameStringPool::Dump()::_Local::F(char const* const*, char const* const*)
 T CGameStringPool::LevelShutdownPostEntity()
 T CGameStringPool::Name()
 T CGameStringPool::~CGameStringPool()
 T CGameText::Display(CBaseEntity*)
 T CGameText::GetDataDescMap()
 T CGameText::InputDisplay(inputdata_t&)
 T CGameText::KeyValue(char const*, char const*)
 T CGameText::Use(CBaseEntity*, CBaseEntity*, USE_TYPE, float)
 T CGameText::~CGameText()
 T CGameTrace::DidHitNonWorldEntity() const
 T CGameTrace::DidHitWorld() const
 T CGameTrace::GetEntityIndex() const
 T CGameUI::Deactivate(CBaseEntity*)
 T CGameUI::GetDataDescMap()
 T CGameUI::InputActivate(inputdata_t&)
 T CGameUI::InputDeactivate(inputdata_t&)
 T CGameUI::Think()
 T CGameUI::~CGameUI()
 T CGameWeaponManager::CGameWeaponManager()
 T CGameWeaponManager::GetDataDescMap()
 T CGameWeaponManager::InputSetAmmoModifier(inputdata_t&)
 T CGameWeaponManager::InputSetMaxPieces(inputdata_t&)
 T CGameWeaponManager::Spawn()
 T CGameWeaponManager::Think()
 T CGameWeaponManager::~CGameWeaponManager()
 T CGenericActor* _CreateEntityTemplate<CGenericActor>(CGenericActor*, char const*)
 T CGenericActor::Classify()
 T CGenericActor::GetDataDescMap()
 T CGenericActor::GetSoundInterests()
 T CGenericActor::HandleAnimEvent(animevent_t*)
 T CGenericActor::MaxYawSpeed()
 T CGenericActor::Precache()
 T CGenericActor::Spawn()
 T CGenericActor::~CGenericActor()
 T CGenericFlexCycler* _CreateEntityTemplate<CGenericFlexCycler>(CGenericFlexCycler*, char const*)
 T CGenericFlexCycler::Spawn()
 T CGenericFlexCycler::~CGenericFlexCycler()
 T CGenericNPC::Classify()
 T CGenericNPC::GetSoundInterests()
 T CGenericNPC::HandleAnimEvent(animevent_t*)
 T CGenericNPC::MaxYawSpeed()
 T CGenericNPC::Precache()
 T CGenericNPC::Spawn()
 T CGenericNPC::TempGunEffect()
 T CGenericNPC::~CGenericNPC()
 T CGhost::CGhost()
 T CGhost::CGhostIntention::CGhostIntention(CGhost*)
 T CGhost::CGhostIntention::FirstContainedResponder() const
 T CGhost::CGhostIntention::NextContainedResponder(INextBotEventResponder*) const
 T CGhost::CGhostIntention::Reset()
 T CGhost::CGhostIntention::Update()
 T CGhost::CGhostIntention::~CGhostIntention()
 T CGhost::EyePosition()
 T CGhost::GetIntentionInterface() const
 T CGhost::GetLocomotionInterface() const
 T CGhost::Precache()
 T CGhost::PrecacheGhost()
 T CGhost::ShouldCollide(int, int) const
 T CGhost::Spawn()
 T CGhost::~CGhost()
 T CGhostBehavior::DriftAroundAndAvoidObstacles(CGhost*)
 T CGhostBehavior::GetName() const
 T CGhostBehavior::OnStart(CGhost*, Action<CGhost>*)
 T CGhostBehavior::ScareNearbyPlayers(CGhost*)
 T CGhostBehavior::Update(CGhost*, float)
 T CGhostBehavior::~CGhostBehavior()
 T CGhostLocomotion::GetMaxAcceleration() const
 T CGhostLocomotion::GetMaxDeceleration() const
 T CGhostLocomotion::GetRunSpeed() const
 T CGhostLocomotion::~CGhostLocomotion()
 T CGib::BounceGibTouch(CBaseEntity*)
 T CGib::DieThink()
 T CGib::GetDataDescMap()
 T CGib::HasPhysicsAttacker(float)
 T CGib::InitGib(CBaseEntity*, float, float)
 T CGib::LimitVelocity()
 T CGib::ObjectCaps()
 T CGib::OnPhysGunDrop(CBasePlayer*, PhysGunDrop_t)
 T CGib::OnPhysGunPickup(CBasePlayer*, PhysGunPickup_t)
 T CGib::SUB_AllowedToFade()
 T CGib::SetBloodColor(int)
 T CGib::Spawn(char const*)
 T CGib::SpawnHeadGib(CBaseEntity*)
 T CGib::SpawnRandomGibs(CBaseEntity*, int, GibType_e)
 T CGib::StickyGibTouch(CBaseEntity*)
 T CGib::Use(CBaseEntity*, CBaseEntity*, USE_TYPE, float)
 T CGib::WaitTillLand()
 T CGib::~CGib()
 T CGibShooter::CreateGib()
 T CGibShooter::GetDataDescMap()
 T CGibShooter::InitPointGib(CGib*, Vector const&, float)
 T CGibShooter::InputShoot(inputdata_t&)
 T CGibShooter::Precache()
 T CGibShooter::ShootThink()
 T CGibShooter::Spawn()
 T CGibShooter::SpawnGib(Vector const&, float)
 T CGibShooter::Use(CBaseEntity*, CBaseEntity*, USE_TYPE, float)
 T CGibShooter::~CGibShooter()
 T CGlobalEntityList::AddListenerEntity(IEntityListener*)
 T CGlobalEntityList::AddToDeleteList(IServerNetworkable*)
 T CGlobalEntityList::CleanupDeleteList()
 T CGlobalEntityList::Clear()
 T CGlobalEntityList::FindEntityByClassname(CBaseEntity*, char const*)
 T CGlobalEntityList::FindEntityByClassnameNearest(char const*, Vector const&, float)
 T CGlobalEntityList::FindEntityByClassnameWithin(CBaseEntity*, char const*, Vector const&, Vector const&)
 T CGlobalEntityList::FindEntityByClassnameWithin(CBaseEntity*, char const*, Vector const&, float)
 T CGlobalEntityList::FindEntityByModel(CBaseEntity*, char const*)
 T CGlobalEntityList::FindEntityByName(CBaseEntity*, char const*, CBaseEntity*, CBaseEntity*, CBaseEntity*, IEntityFindFilter*)
 T CGlobalEntityList::FindEntityByNameNearest(char const*, Vector const&, float, CBaseEntity*, CBaseEntity*, CBaseEntity*)
 T CGlobalEntityList::FindEntityByNameWithin(CBaseEntity*, char const*, Vector const&, float, CBaseEntity*, CBaseEntity*, CBaseEntity*)
 T CGlobalEntityList::FindEntityByTarget(CBaseEntity*, char const*)
 T CGlobalEntityList::FindEntityClassNearestFacing(Vector const&, Vector const&, float, char*)
 T CGlobalEntityList::FindEntityGeneric(CBaseEntity*, char const*, CBaseEntity*, CBaseEntity*, CBaseEntity*)
 T CGlobalEntityList::FindEntityGenericNearest(char const*, Vector const&, float, CBaseEntity*, CBaseEntity*, CBaseEntity*)
 T CGlobalEntityList::FindEntityGenericWithin(CBaseEntity*, char const*, Vector const&, float, CBaseEntity*, CBaseEntity*, CBaseEntity*)
 T CGlobalEntityList::FindEntityInSphere(CBaseEntity*, Vector const&, float)
 T CGlobalEntityList::FindEntityNearestFacing(Vector const&, Vector const&, float)
 T CGlobalEntityList::FindEntityProcedural(char const*, CBaseEntity*, CBaseEntity*, CBaseEntity*)
 T CGlobalEntityList::IsEntityPtr(void*)
 T CGlobalEntityList::NextEnt(CBaseEntity*)
 T CGlobalEntityList::NotifyCreateEntity(CBaseEntity*)
 T CGlobalEntityList::NotifyRemoveEntity(CBaseHandle)
 T CGlobalEntityList::NotifySpawn(CBaseEntity*)
 T CGlobalEntityList::NumberOfEdicts()
 T CGlobalEntityList::NumberOfEntities()
 T CGlobalEntityList::OnAddEntity(IHandleEntity*, CBaseHandle)
 T CGlobalEntityList::OnRemoveEntity(IHandleEntity*, CBaseHandle)
 T CGlobalEntityList::RemoveListenerEntity(IEntityListener*)
 T CGlobalEntityList::ReportEntityFlagsChanged(CBaseEntity*, unsigned int, unsigned int)
 T CGlobalEntityList::ResetDeleteList()
 T CGlobalEntityList::~CGlobalEntityList()
 T CGlobalInitConstructor::CGlobalInitConstructor()
 T CGlobalState::AddEntity(char const*, char const*, GLOBALESTATE)
 T CGlobalState::DumpGlobals()
 T CGlobalState::LevelShutdownPostEntity()
 T CGlobalState::LevelShutdownPreEntity()
 T CGlobalState::~CGlobalState()
 T CGunTarget::Activate()
 T CGunTarget::BloodColor()
 T CGunTarget::BodyTarget(Vector const&, bool)
 T CGunTarget::Classify()
 T CGunTarget::CreateVPhysics()
 T CGunTarget::GetDataDescMap()
 T CGunTarget::InputStart(inputdata_t&)
 T CGunTarget::InputStop(inputdata_t&)
 T CGunTarget::InputToggle(inputdata_t&)
 T CGunTarget::Next()
 T CGunTarget::OnTakeDamage(CTakeDamageInfo const&)
 T CGunTarget::Spawn()
 T CGunTarget::Start()
 T CGunTarget::Wait()
 T CGunTarget::~CGunTarget()
 T CHLTVDirector::AnalyzeCameras()
 T CHLTVDirector::AnalyzePlayers()
 T CHLTVDirector::BuildActivePlayerList()
 T CHLTVDirector::BuildCameraList()
 T CHLTVDirector::CHLTVDirector()
 T CHLTVDirector::CreateShotFromEvent(CHLTVGameEvent*)
 T CHLTVDirector::FindBestGameEvent()
 T CHLTVDirector::FinishCameraManShot()
 T CHLTVDirector::FireGameEvent(IGameEvent*)
 T CHLTVDirector::FrameUpdatePostEntityThink()
 T CHLTVDirector::GetDelay()
 T CHLTVDirector::GetDirectorTick()
 T CHLTVDirector::GetFixedCameraEntityName()
 T CHLTVDirector::GetHLTVServer()
 T CHLTVDirector::GetModEvents()
 T CHLTVDirector::GetPVSEntity()
 T CHLTVDirector::GetPVSOrigin()
 T CHLTVDirector::Init()
 T CHLTVDirector::IsActive()
 T CHLTVDirector::LevelInitPostEntity()
 T CHLTVDirector::Name()
 T CHLTVDirector::RemoveEventsFromHistory(int)
 T CHLTVDirector::SetCameraMan(int)
 T CHLTVDirector::SetHLTVServer(IHLTVServer*)
 T CHLTVDirector::Shutdown()
 T CHLTVDirector::StartBestFixedCameraShot(bool)
 T CHLTVDirector::StartBestPlayerCameraShot()
 T CHLTVDirector::StartCameraManShot()
 T CHLTVDirector::StartChaseCameraShot(int, int, int, int, int, bool)
 T CHLTVDirector::StartDelayMessage()
 T CHLTVDirector::StartFixedCameraShot(int, int)
 T CHLTVDirector::StartInstantBroadcastShot()
 T CHLTVDirector::StartNewShot()
 T CHLTVDirector::StartRandomShot()
 T CHLTVDirector::UpdateSettings()
 T CHLTVDirector::~CHLTVDirector()
 T CHalloweenBaseBoss::Break()
 T CHalloweenBaseBoss::CHalloweenBaseBoss()
 T CHalloweenBaseBoss::Event_Killed(CTakeDamageInfo const&)
 T CHalloweenBaseBoss::GetBossType() const
 T CHalloweenBaseBoss::GetCritInjuryMultiplier() const
 T CHalloweenBaseBoss::GetLevel() const
 T CHalloweenBaseBoss::OnTakeDamage_Alive(CTakeDamageInfo const&)
 T CHalloweenBaseBoss::RememberAttacker(CTFPlayer*, bool, float)
 T CHalloweenBaseBoss::Spawn()
 T CHalloweenBaseBoss::SpawnBossAtPos(HalloweenBossType, Vector const&, int, CBaseEntity*)
 T CHalloweenBaseBoss::Update()
 T CHalloweenBaseBoss::UpdateOnRemove()
 T CHalloweenBaseBoss::~CHalloweenBaseBoss()
 T CHalloweenGiftPickup::CHalloweenGiftPickup()
 T CHalloweenGiftPickup::DespawnGift()
 T CHalloweenGiftPickup::GetDataDescMap()
 T CHalloweenGiftPickup::GetDefaultPowerupModel()
 T CHalloweenGiftPickup::GetServerClass()
 T CHalloweenGiftPickup::MyTouch(CBasePlayer*)
 T CHalloweenGiftPickup::Precache()
 T CHalloweenGiftPickup::RemoveGift()
 T CHalloweenGiftPickup::SetTargetPlayer(CTFPlayer*)
 T CHalloweenGiftPickup::Spawn()
 T CHalloweenGiftPickup::ValidTouch(CBasePlayer*)
 T CHalloweenGiftPickup::YouForgotToImplementOrDeclareServerClass()
 T CHalloweenGiftPickup::~CHalloweenGiftPickup()
 T CHalloweenGiftSpawnLocation* _CreateEntityTemplate<CHalloweenGiftSpawnLocation>(CHalloweenGiftSpawnLocation*, char const*)
 T CHalloweenGiftSpawnLocation::~CHalloweenGiftSpawnLocation()
 T CHalloweenPickup::CHalloweenPickup()
 T CHalloweenPickup::GetDataDescMap()
 T CHalloweenPickup::GetDefaultPowerupModel()
 T CHalloweenPickup::GetRespawnDelay()
 T CHalloweenPickup::GetServerClass()
 T CHalloweenPickup::ItemCanBeTouchedByPlayer(CBasePlayer*)
 T CHalloweenPickup::MyTouch(CBasePlayer*)
 T CHalloweenPickup::Precache()
 T CHalloweenPickup::Respawn()
 T CHalloweenPickup::ShouldTransmit(CCheckTransmitInfo const*)
 T CHalloweenPickup::UpdateTransmitState()
 T CHalloweenPickup::ValidTouch(CBasePlayer*)
 T CHalloweenPickup::YouForgotToImplementOrDeclareServerClass()
 T CHalloweenPickup::~CHalloweenPickup()
 T CHalloweenSoulPack::CHalloweenSoulPack()
 T CHalloweenSoulPack::FlyThink()
 T CHalloweenSoulPack::FlyTowardsTargetEntity()
 T CHalloweenSoulPack::GetServerClass()
 T CHalloweenSoulPack::InitSplineData()
 T CHalloweenSoulPack::ItemTouch(CBaseEntity*)
 T CHalloweenSoulPack::Precache()
 T CHalloweenSoulPack::Spawn()
 T CHalloweenSoulPack::UpdateTransmitState()
 T CHalloweenSoulPack::YouForgotToImplementOrDeclareServerClass()
 T CHalloweenSoulPack::~CHalloweenSoulPack()
 T CHandle<CTFPlayer> const& CNetworkVarBase<CHandle<CTFPlayer>, CTFPlayerDestructionLogic::NetworkVar_m_hBlueTeamLeader>::operator=<int>(int const&)
 T CHandle<CTFPlayer> const& CNetworkVarBase<CHandle<CTFPlayer>, CTFPlayerDestructionLogic::NetworkVar_m_hRedTeamLeader>::operator=<int>(int const&)
 T CHandleDummy::~CHandleDummy()
 T CHandleTest::GetServerClass()
 T CHandleTest::SetTransmit(CCheckTransmitInfo*, bool)
 T CHandleTest::UpdateTransmitState()
 T CHandleTest::YouForgotToImplementOrDeclareServerClass()
 T CHandleTest::~CHandleTest()
 T CHeadlessHatman::CHeadlessHatman()
 T CHeadlessHatman::GetBodyInterface() const
 T CHeadlessHatman::GetBossType() const
 T CHeadlessHatman::GetIntentionInterface() const
 T CHeadlessHatman::GetLocomotionInterface() const
 T CHeadlessHatman::GetServerClass()
 T CHeadlessHatman::OnTakeDamage_Alive(CTakeDamageInfo const&)
 T CHeadlessHatman::Precache()
 T CHeadlessHatman::PrecacheHeadlessHatman()
 T CHeadlessHatman::Spawn()
 T CHeadlessHatman::Update()
 T CHeadlessHatman::YouForgotToImplementOrDeclareServerClass()
 T CHeadlessHatman::~CHeadlessHatman()
 T CHeadlessHatmanAttack::AttackTarget(CHeadlessHatman*, CBaseCombatCharacter*, float)
 T CHeadlessHatmanAttack::GetName() const
 T CHeadlessHatmanAttack::IsPotentiallyChaseable(CHeadlessHatman*, CTFPlayer*)
 T CHeadlessHatmanAttack::OnContact(CHeadlessHatman*, CBaseEntity*, CGameTrace*)
 T CHeadlessHatmanAttack::OnStart(CHeadlessHatman*, Action<CHeadlessHatman>*)
 T CHeadlessHatmanAttack::OnStuck(CHeadlessHatman*)
 T CHeadlessHatmanAttack::RecomputeHomePosition()
 T CHeadlessHatmanAttack::SelectVictim(CHeadlessHatman*)
 T CHeadlessHatmanAttack::Update(CHeadlessHatman*, float)
 T CHeadlessHatmanAttack::UpdateAxeSwing(CHeadlessHatman*)
 T CHeadlessHatmanAttack::ValidateChaseVictim(CHeadlessHatman*)
 T CHeadlessHatmanAttack::~CHeadlessHatmanAttack()
 T CHeadlessHatmanBehavior::GetName() const
 T CHeadlessHatmanBehavior::InitialContainedAction(CHeadlessHatman*)
 T CHeadlessHatmanBehavior::Update(CHeadlessHatman*, float)
 T CHeadlessHatmanBehavior::~CHeadlessHatmanBehavior()
 T CHeadlessHatmanBody::CHeadlessHatmanBody(INextBot*)
 T CHeadlessHatmanBody::GetActivity() const
 T CHeadlessHatmanBody::GetSolidMask() const
 T CHeadlessHatmanBody::IsActivity(Activity) const
 T CHeadlessHatmanBody::StartActivity(Activity, unsigned int)
 T CHeadlessHatmanBody::Update()
 T CHeadlessHatmanBody::~CHeadlessHatmanBody()
 T CHeadlessHatmanDying::GetName() const
 T CHeadlessHatmanDying::OnStart(CHeadlessHatman*, Action<CHeadlessHatman>*)
 T CHeadlessHatmanDying::Update(CHeadlessHatman*, float)
 T CHeadlessHatmanDying::~CHeadlessHatmanDying()
 T CHeadlessHatmanEmerge::GetName() const
 T CHeadlessHatmanEmerge::OnStart(CHeadlessHatman*, Action<CHeadlessHatman>*)
 T CHeadlessHatmanEmerge::Update(CHeadlessHatman*, float)
 T CHeadlessHatmanEmerge::~CHeadlessHatmanEmerge()
 T CHeadlessHatmanIntention::CHeadlessHatmanIntention(CHeadlessHatman*)
 T CHeadlessHatmanIntention::FirstContainedResponder() const
 T CHeadlessHatmanIntention::IsPositionAllowed(INextBot const*, Vector const&) const
 T CHeadlessHatmanIntention::NextContainedResponder(INextBotEventResponder*) const
 T CHeadlessHatmanIntention::Reset()
 T CHeadlessHatmanIntention::Update()
 T CHeadlessHatmanIntention::~CHeadlessHatmanIntention()
 T CHeadlessHatmanLocomotion::GetMaxJumpHeight() const
 T CHeadlessHatmanLocomotion::GetMaxYawRate() const
 T CHeadlessHatmanLocomotion::GetRunSpeed() const
 T CHeadlessHatmanLocomotion::GetStepHeight() const
 T CHeadlessHatmanLocomotion::ShouldCollideWith(CBaseEntity const*) const
 T CHeadlessHatmanLocomotion::~CHeadlessHatmanLocomotion()
 T CHeadlessHatmanPathCost::operator()(CNavArea*, CNavArea*, CNavLadder const*, CFuncElevator const*, float) const
 T CHeadlessHatmanTerrify::GetName() const
 T CHeadlessHatmanTerrify::IsWearingPumpkinHeadOrSaxtonMask(CTFPlayer*)
 T CHeadlessHatmanTerrify::OnStart(CHeadlessHatman*, Action<CHeadlessHatman>*)
 T CHeadlessHatmanTerrify::Update(CHeadlessHatman*, float)
 T CHeadlessHatmanTerrify::~CHeadlessHatmanTerrify()
 T CHealthAmmoKit::GetDefaultPowerupModel()
 T CHealthAmmoKit::GetHealthKitName()
 T CHealthAmmoKit::GetPowerupSize()
 T CHealthAmmoKit::MyTouch(CBasePlayer*)
 T CHealthAmmoKit::Precache()
 T CHealthAmmoKit::UpdateModelIndexOverrides()
 T CHealthAmmoKit::~CHealthAmmoKit()
 T CHealthFilter::IsSelected(CBaseEntity const*) const
 T CHealthKit::GetDefaultPowerupModel()
 T CHealthKit::GetHealthKitName()
 T CHealthKit::GetPowerupSize()
 T CHealthKit::GetRespawnDelay()
 T CHealthKit::MyTouch(CBasePlayer*)
 T CHealthKit::Precache()
 T CHealthKit::Spawn()
 T CHealthKit::UpdateModelIndexOverrides()
 T CHealthKit::~CHealthKit()
 T CHealthKitMedium::GetDefaultPowerupModel()
 T CHealthKitMedium::GetHealthKitName()
 T CHealthKitMedium::GetPowerupSize()
 T CHealthKitMedium::Precache()
 T CHealthKitMedium::UpdateModelIndexOverrides()
 T CHealthKitMedium::~CHealthKitMedium()
 T CHealthKitSmall::GetDefaultPowerupModel()
 T CHealthKitSmall::GetHealthKitName()
 T CHealthKitSmall::GetPowerupSize()
 T CHealthKitSmall::Precache()
 T CHealthKitSmall::UpdateModelIndexOverrides()
 T CHealthKitSmall::~CHealthKitSmall()
 T CHightower_TeleportVortex::GetDataDescMap()
 T CHightower_TeleportVortex::GetServerClass()
 T CHightower_TeleportVortex::SetAdvantageTeam(inputdata_t&)
 T CHightower_TeleportVortex::Spawn()
 T CHightower_TeleportVortex::Touch(CBaseEntity*)
 T CHightower_TeleportVortex::YouForgotToImplementOrDeclareServerClass()
 T CHightower_TeleportVortex::~CHightower_TeleportVortex()
 T CHintCriteria::AddExcludePosition(Vector const&, float)
 T CHintCriteria::AddHintType(int)
 T CHintCriteria::AddIncludePosition(Vector const&, float)
 T CHintCriteria::AddZone(CUtlVector<CHintCriteria::hintZone_t, CUtlMemory<CHintCriteria::hintZone_t, int> >&, Vector const&, float)
 T CHintCriteria::CHintCriteria()
 T CHintCriteria::SetFlag(int)
 T CHintCriteria::SetGroup(string_t)
 T CHintCriteria::SetHintType(int)
 T CHintCriteria::~CHintCriteria()
 T CHintMessage::CHintMessage(char const*, CUtlVector<char const*, CUtlMemory<char const*, int> >*, float)
 T CHintMessage::Send(CBasePlayer*)
 T CHintMessageQueue::AddMessage(char const*, float, CUtlVector<char const*, CUtlMemory<char const*, int> >*)
 T CHintMessageQueue::Reset()
 T CHintMessageQueue::Update()
 T CHintMessageTimers::AddTimer(int, float, float, CUtlVector<char const*, CUtlMemory<char const*, int> >*)
 T CHintMessageTimers::Reset()
 T CHintMessageTimers::StartTimer(int)
 T CHintMessageTimers::StopTimer(int)
 T CHintMessageTimers::Update()
 T CHintSystem::HintMessage(int, bool, bool)
 T CHintSystem::ResetHintTimers()
 T CHintSystem::ResetHints()
 T CHintSystem::StartHintTimer(int)
 T CHintSystem::StopHintTimer(int)
 T CHintSystem::TimerShouldFire(int)
 T CHintSystem::Update()
 T CHistoryVector<EntityHistory_t, CEntityHistoryLess, 12>::InsertHistory(EntityHistory_t const&)
 T CHistoryVector<EntityHistory_t, CEntityHistoryLess, 4>::InsertHistory(EntityHistory_t const&)
 T CHybridMap_CTF_CP::UpdateTransmitState()
 T CHybridMap_CTF_CP::~CHybridMap_CTF_CP()
 T CIKContext::AddAutoplayLocks(Vector*, Quaternion*)
 T CIKContext::AddDependencies(mstudioseqdesc_t&, int, float, float const*, float)
 T CIKContext::AddSequenceLocks(mstudioseqdesc_t&, Vector*, Quaternion*)
 T CIKContext::AutoIKRelease()
 T CIKContext::CIKContext()
 T CIKContext::ClearTargets()
 T CIKContext::Init(CStudioHdr const*, QAngle const&, Vector const&, float, int, int)
 T CIKContext::SolveAutoplayLocks(Vector*, Quaternion*)
 T CIKContext::SolveDependencies(Vector*, Quaternion*, matrix3x4_t*, CBoneBitList&)
 T CIKContext::SolveLock(mstudioiklock_t const*, int, Vector*, Quaternion*, matrix3x4_t*, CBoneBitList&)
 T CIKContext::SolveSequenceLocks(mstudioseqdesc_t&, Vector*, Quaternion*)
 T CIKContext::UpdateTargets(Vector*, Quaternion*, matrix3x4_t*, CBoneBitList&)
 T CIKSaveRestoreOps::Restore(SaveRestoreFieldInfo_t const&, IRestore*)
 T CIKSaveRestoreOps::Save(SaveRestoreFieldInfo_t const&, ISave*)
 T CIKSolver::solve(float, float, float const*, float const*, float*)
 T CIKTarget::IsActive()
 T CIKTarget::SetAngles(QAngle const&)
 T CIKTarget::SetNormal(Vector const&)
 T CIKTarget::SetPos(Vector const&)
 T CIKTarget::SetPosWithNormalOffset(Vector const&, Vector const&)
 T CIPLocationInfo::ByteSize() const
 T CIPLocationInfo::Clear()
 T CIPLocationInfo::GetCachedSize() const
 T CIPLocationInfo::GetMetadata() const
 T CIPLocationInfo::IsInitialized() const
 T CIPLocationInfo::MergeFrom(CIPLocationInfo const&)
 T CIPLocationInfo::New() const
 T CIPLocationInfo::SerializeWithCachedSizesToArray(unsigned char*) const
 T CIPLocationInfo::SetCachedSize(int) const
 T CIPLocationInfo::SharedDtor()
 T CIPLocationInfo::~CIPLocationInfo()
 T CInfoCameraLink::Activate()
 T CInfoCameraLink::CInfoCameraLink()
 T CInfoCameraLink::GetDataDescMap()
 T CInfoCameraLink::InputSetCamera(inputdata_t&)
 T CInfoCameraLink::SetCameraByName(char const*)
 T CInfoCameraLink::~CInfoCameraLink()
 T CInfoIntermission::Spawn()
 T CInfoIntermission::Think()
 T CInfoIntermission::~CInfoIntermission()
 T CInfoLadderDismount::DrawDebugGeometryOverlays()
 T CInfoLadderDismount::GetServerClass()
 T CInfoLadderDismount::YouForgotToImplementOrDeclareServerClass()
 T CInfoLadderDismount::~CInfoLadderDismount()
 T CInfoLightingRelative::Activate()
 T CInfoLightingRelative::GetDataDescMap()
 T CInfoLightingRelative::GetServerClass()
 T CInfoLightingRelative::SetTransmit(CCheckTransmitInfo*, bool)
 T CInfoLightingRelative::UpdateTransmitState()
 T CInfoLightingRelative::YouForgotToImplementOrDeclareServerClass()
 T CInfoLightingRelative::~CInfoLightingRelative()
 T CInfoMassCenter::Spawn()
 T CInfoMassCenter::~CInfoMassCenter()
 T CInfoOverlayAccessor::GetDataDescMap()
 T CInfoOverlayAccessor::GetServerClass()
 T CInfoOverlayAccessor::UpdateTransmitState()
 T CInfoOverlayAccessor::YouForgotToImplementOrDeclareServerClass()
 T CInfoOverlayAccessor::~CInfoOverlayAccessor()
 T CInfoTarget::Spawn()
 T CInfoTarget::~CInfoTarget()
 T CInstancedResponseSystem::CInstancedResponseSystem(char const*)
 T CInstancedResponseSystem::GetScriptFile()
 T CInstancedResponseSystem::Init()
 T CInstancedResponseSystem::LevelInitPostEntity()
 T CInstancedResponseSystem::Release()
 T CInstancedResponseSystem::~CInstancedResponseSystem()
 T CInstancedSceneEntity::DispatchEndFace(CChoreoScene*, CBaseFlex*, CChoreoEvent*)
 T CInstancedSceneEntity::DispatchEndMoveTo(CChoreoScene*, CBaseFlex*, CChoreoEvent*)
 T CInstancedSceneEntity::DispatchEndSequence(CChoreoScene*, CBaseFlex*, CChoreoEvent*)
 T CInstancedSceneEntity::DispatchPauseScene(CChoreoScene*, char const*)
 T CInstancedSceneEntity::DispatchStartFace(CChoreoScene*, CBaseFlex*, CBaseEntity*, CChoreoEvent*)
 T CInstancedSceneEntity::DispatchStartMoveTo(CChoreoScene*, CBaseFlex*, CBaseEntity*, CChoreoEvent*)
 T CInstancedSceneEntity::DispatchStartSequence(CChoreoScene*, CBaseFlex*, CChoreoEvent*)
 T CInstancedSceneEntity::DoThink(float)
 T CInstancedSceneEntity::EstimateLength()
 T CInstancedSceneEntity::FindNamedActor(char const*)
 T CInstancedSceneEntity::FindNamedEntity(char const*)
 T CInstancedSceneEntity::GetDataDescMap()
 T CInstancedSceneEntity::GetPostSpeakDelay()
 T CInstancedSceneEntity::GetPreDelay()
 T CInstancedSceneEntity::OnLoaded()
 T CInstancedSceneEntity::OnRestore()
 T CInstancedSceneEntity::SetPostSpeakDelay(float)
 T CInstancedSceneEntity::SetPreDelay(float)
 T CInstancedSceneEntity::StartPlayback()
 T CInstancedSceneEntity::~CInstancedSceneEntity()
 T CIntroViewpoint::GetDataDescMap()
 T CIntroViewpoint::UpdateTransmitState()
 T CIntroViewpoint::~CIntroViewpoint()
 T CInventoryManager::AddBaseItemCriteria(baseitemcriteria_t*, CItemSelectionCriteria*)
 T CInventoryManager::CInventoryManager()
 T CInventoryManager::GameServerSteamAPIActivated()
 T CInventoryManager::GetBackpackPositionFromBackend(unsigned int)
 T CInventoryManager::GetInventoryForAccount(unsigned int)
 T CInventoryManager::Init()
 T CInventoryManager::LevelInitPreEntity()
 T CInventoryManager::LevelShutdownPostEntity()
 T CInventoryManager::PostInit()
 T CInventoryManager::PostInitGC()
 T CInventoryManager::PreInitGC()
 T CInventoryManager::Shutdown()
 T CInventoryManager::SteamRequestInventory(CPlayerInventory*, CSteamID, IInventoryUpdateListener*)
 T CInventoryManager::~CInventoryManager()
 T CItem::ActivateWhenAtRest(float)
 T CItem::CItem()
 T CItem::ComeToRest()
 T CItem::CreateItemVPhysicsObject()
 T CItem::FallThink()
 T CItem::GetDataDescMap()
 T CItem::ItemCanBeTouchedByPlayer(CBasePlayer*)
 T CItem::ItemTouch(CBaseEntity*)
 T CItem::Materialize()
 T CItem::MyTouch(CBasePlayer*)
 T CItem::ObjectCaps()
 T CItem::OnEntityEvent(EntityEvent_t, void*)
 T CItem::OnPhysGunDrop(CBasePlayer*, PhysGunDrop_t)
 T CItem::OnPhysGunPickup(CBasePlayer*, PhysGunPickup_t)
 T CItem::PhysicsSolidMaskForEntity() const
 T CItem::Precache()
 T CItem::Respawn()
 T CItem::Spawn()
 T CItem::Use(CBaseEntity*, CBaseEntity*, USE_TYPE, float)
 T CItem::~CItem()
 T CItemGeneration::GenerateItemFromScriptData(CEconItemView const*, Vector const&, QAngle const&, char const*)
 T CItemGeneration::GenerateRandomItem(CItemSelectionCriteria*, Vector const&, QAngle const&)
 T CItemGeneration::SpawnItem(CEconItemView const*, Vector const&, QAngle const&, char const*)
 T CItemGeneration::SpawnItem(int, Vector const&, QAngle const&, int, int, char const*)
 T CItemGeneration::~CItemGeneration()
 T CItemLevelingDefinition::BInitFromKV(KeyValues*, char const*, CUtlVector<CUtlString, CUtlMemory<CUtlString, int> >*)
 T CItemSelectionCriteria::BAddCondition(CItemSelectionCriteria::ICondition*)
 T CItemSelectionCriteria::BAddCondition(char const*, EItemCriteriaOperator, char const*, bool)
 T CItemSelectionCriteria::BAddCondition(char const*, EItemCriteriaOperator, float, bool)
 T CItemSelectionCriteria::BDeserializeFromMsg(CSOItemCriteria const&)
 T CItemSelectionCriteria::BEvaluate(CEconItemDefinition const*) const
 T CItemSelectionCriteria::BInitFromKV(KeyValues*)
 T CItemSelectionCriteria::BSerializeToMsg(CSOItemCriteria&) const
 T CItemSelectionCriteria::CCondition::BEvaluate(KeyValues*) const
 T CItemSelectionCriteria::CCondition::BItemDefinitionPassesCriteria(CEconItemDefinition const*) const
 T CItemSelectionCriteria::CCondition::BSerializeToMsg(CSOItemCriteriaCondition&) const
 T CItemSelectionCriteria::CCondition::GetEOp() const
 T CItemSelectionCriteria::CCondition::GetField() const
 T CItemSelectionCriteria::CCondition::GetValue() const
 T CItemSelectionCriteria::CCondition::~CCondition()
 T CItemSelectionCriteria::CFloatCondition::BInternalEvaluate(KeyValues*) const
 T CItemSelectionCriteria::CFloatCondition::BSerializeToMsg(CSOItemCriteriaCondition&) const
 T CItemSelectionCriteria::CFloatCondition::~CFloatCondition()
 T CItemSelectionCriteria::CSetCondition::BInternalEvaluate(KeyValues*) const
 T CItemSelectionCriteria::CSetCondition::BSerializeToMsg(CSOItemCriteriaCondition&) const
 T CItemSelectionCriteria::CSetCondition::~CSetCondition()
 T CItemSelectionCriteria::CStringCondition::BInternalEvaluate(KeyValues*) const
 T CItemSelectionCriteria::CStringCondition::BSerializeToMsg(CSOItemCriteriaCondition&) const
 T CItemSelectionCriteria::CStringCondition::GetValue() const
 T CItemSelectionCriteria::CStringCondition::~CStringCondition()
 T CItemSelectionCriteria::SetTags(char const*)
 T CItemSelectionCriteria::operator=(CItemSelectionCriteria const&)
 T CItemSelectionCriteria::~CItemSelectionCriteria()
 T CItemSoda::CanThink()
 T CItemSoda::CanTouch(CBaseEntity*)
 T CItemSoda::GetDataDescMap()
 T CItemSoda::Precache()
 T CItemSoda::Spawn()
 T CItemSoda::~CItemSoda()
 T CJobSendMsgUntilConfirmed<CMsgGCRematchRequest, CMsgGCRematchRequestResponse, (ETFGCMsg)6533>::BYieldingRunJob(void*)
 T CJobSendMsgUntilConfirmed<CMsgGCRematchRequest, CMsgGCRematchRequestResponse, (ETFGCMsg)6533>::BYieldingRunJobInternal()
 T CJobSendMsgUntilConfirmed<CMsgGCRematchRequest, CMsgGCRematchRequestResponse, (ETFGCMsg)6533>::CJobSendMsgUntilConfirmed(char const*, GCSDK::CProtoBufMsg<CMsgGCRematchRequest>*, void (*)(GCSDK::CProtoBufMsg<CMsgGCRematchRequestResponse>&))
 T CJobSendMsgUntilConfirmed<CMsgGCRematchRequest, CMsgGCRematchRequestResponse, (ETFGCMsg)6533>::~CJobSendMsgUntilConfirmed()
 T CJobSendMsgUntilConfirmed<CMsgGC_Match_Result, CMsgGC_Match_ResultResponse, (ETFGCMsg)6520>::BYieldingRunJob(void*)
 T CJobSendMsgUntilConfirmed<CMsgGC_Match_Result, CMsgGC_Match_ResultResponse, (ETFGCMsg)6520>::BYieldingRunJobInternal()
 T CJobSendMsgUntilConfirmed<CMsgGC_Match_Result, CMsgGC_Match_ResultResponse, (ETFGCMsg)6520>::CJobSendMsgUntilConfirmed(char const*, GCSDK::CProtoBufMsg<CMsgGC_Match_Result>*, void (*)(GCSDK::CProtoBufMsg<CMsgGC_Match_ResultResponse>&))
 T CJobSendMsgUntilConfirmed<CMsgGC_Match_Result, CMsgGC_Match_ResultResponse, (ETFGCMsg)6520>::~CJobSendMsgUntilConfirmed()
 T CJobSendMsgUntilConfirmed<CMsgGameServerKickingLobby, CMsgGameServerKickingLobbyResponse, (ETFGCMsg)6521>::BYieldingRunJob(void*)
 T CJobSendMsgUntilConfirmed<CMsgGameServerKickingLobby, CMsgGameServerKickingLobbyResponse, (ETFGCMsg)6521>::BYieldingRunJobInternal()
 T CJobSendMsgUntilConfirmed<CMsgGameServerKickingLobby, CMsgGameServerKickingLobbyResponse, (ETFGCMsg)6521>::CJobSendMsgUntilConfirmed(char const*, GCSDK::CProtoBufMsg<CMsgGameServerKickingLobby>*, void (*)(GCSDK::CProtoBufMsg<CMsgGameServerKickingLobbyResponse>&))
 T CJobSendMsgUntilConfirmed<CMsgGameServerKickingLobby, CMsgGameServerKickingLobbyResponse, (ETFGCMsg)6521>::~CJobSendMsgUntilConfirmed()
 T CJobSendMsgUntilConfirmed<CMsgMvMVictory, CMsgMvMMannUpVictoryReply, (ETFGCMsg)6298>::BYieldingRunJob(void*)
 T CJobSendMsgUntilConfirmed<CMsgMvMVictory, CMsgMvMMannUpVictoryReply, (ETFGCMsg)6298>::BYieldingRunJobInternal()
 T CJobSendMsgUntilConfirmed<CMsgMvMVictory, CMsgMvMMannUpVictoryReply, (ETFGCMsg)6298>::CJobSendMsgUntilConfirmed(char const*, GCSDK::CProtoBufMsg<CMsgMvMVictory>*, void (*)(GCSDK::CProtoBufMsg<CMsgMvMMannUpVictoryReply>&))
 T CJobSendMsgUntilConfirmed<CMsgMvMVictory, CMsgMvMMannUpVictoryReply, (ETFGCMsg)6298>::~CJobSendMsgUntilConfirmed()
 T CJobSendMsgUntilConfirmed<CMsgPlayerLeftMatch, CMsgPlayerLeftMatchResponse, (ETFGCMsg)6523>::BYieldingRunJob(void*)
 T CJobSendMsgUntilConfirmed<CMsgPlayerLeftMatch, CMsgPlayerLeftMatchResponse, (ETFGCMsg)6523>::BYieldingRunJobInternal()
 T CJobSendMsgUntilConfirmed<CMsgPlayerLeftMatch, CMsgPlayerLeftMatchResponse, (ETFGCMsg)6523>::CJobSendMsgUntilConfirmed(char const*, GCSDK::CProtoBufMsg<CMsgPlayerLeftMatch>*, void (*)(GCSDK::CProtoBufMsg<CMsgPlayerLeftMatchResponse>&))
 T CJobSendMsgUntilConfirmed<CMsgPlayerLeftMatch, CMsgPlayerLeftMatchResponse, (ETFGCMsg)6523>::~CJobSendMsgUntilConfirmed()
 T CKeepUpright::Activate()
 T CKeepUpright::GetDataDescMap()
 T CKeepUpright::InputSetAngularLimit(inputdata_t&)
 T CKeepUpright::InputTurnOff(inputdata_t&)
 T CKeepUpright::InputTurnOn(inputdata_t&)
 T CKeepUpright::Simulate(IPhysicsMotionController*, IPhysicsObject*, float, Vector&, Vector&)
 T CKeepUpright::Spawn()
 T CKeepUpright::~CKeepUpright()
 T CKeyValuesDumpContextAsDevMsg::KvBeginKey(KeyValues*, int)
 T CKeyValuesDumpContextAsDevMsg::KvWriteText(char const*)
 T CKeyValuesErrorStack::ReportError(char const*)
 T CKickIssue::CanCallVote(int, char const*, vote_create_failed_t&, int&)
 T CKickIssue::CreateVoteDataFromDetails(char const*)
 T CKickIssue::ExecuteCommand()
 T CKickIssue::GetDetailsString()
 T CKickIssue::GetDisplayString()
 T CKickIssue::GetVotePassedString()
 T CKickIssue::IsEnabled()
 T CKickIssue::IsTeamRestrictedVote()
 T CKickIssue::ListIssueDetails(CBasePlayer*)
 T CKickIssue::NeedsPermissionFromGC()
 T CKickIssue::NotifyGC(bool)
 T CKickIssue::OnVoteFailed(int)
 T CKickIssue::OnVoteStarted()
 T CKickIssue::PrintLogData()
 T CKickIssue::~CKickIssue()
 T CKnownCollector::Inspect(CKnownEntity const&)
 T CKnownEntity::Destroy()
 T CKnownEntity::GetEntity() const
 T CKnownEntity::GetLastKnownArea() const
 T CKnownEntity::GetLastKnownPosition() const
 T CKnownEntity::GetTimeSinceBecameKnown() const
 T CKnownEntity::GetTimeSinceBecameVisible() const
 T CKnownEntity::GetTimeSinceLastKnown() const
 T CKnownEntity::GetTimeSinceLastSeen() const
 T CKnownEntity::GetTimeWhenBecameVisible() const
 T CKnownEntity::HasLastKnownPositionBeenSeen() const
 T CKnownEntity::Is(CBaseEntity*) const
 T CKnownEntity::IsObsolete() const
 T CKnownEntity::IsVisibleInFOVNow() const
 T CKnownEntity::IsVisibleRecently() const
 T CKnownEntity::MarkLastKnownPositionAsSeen()
 T CKnownEntity::UpdatePosition()
 T CKnownEntity::UpdateVisibilityStatus(bool)
 T CKnownEntity::WasEverVisible() const
 T CKnownEntity::operator==(CKnownEntity const&) const
 T CKnownEntity::~CKnownEntity()
 T CKothLogic::GetDataDescMap()
 T CKothLogic::InputAddBlueTimer(inputdata_t&)
 T CKothLogic::InputAddRedTimer(inputdata_t&)
 T CKothLogic::InputRoundActivate(inputdata_t&)
 T CKothLogic::InputRoundSpawn(inputdata_t&)
 T CKothLogic::InputSetBlueTimer(inputdata_t&)
 T CKothLogic::InputSetRedTimer(inputdata_t&)
 T CKothLogic::UpdateTransmitState()
 T CKothLogic::~CKothLogic()
 T CLadderMatchGroupDescription::BMatchIsSafeToLeaveForPlayer(CMatchInfo const*, CMatchInfo::PlayerMatchData_t const*) const
 T CLadderMatchGroupDescription::BPlayWinMusic(int, bool) const
 T CLadderMatchGroupDescription::CLadderMatchGroupDescription(EMatchGroup, ConVar*)
 T CLadderMatchGroupDescription::CLadderProgressionDesc::CLadderProgressionDesc(EMatchGroup)
 T CLadderMatchGroupDescription::CLadderProgressionDesc::GetExperienceFromLadderData(CSOTFLadderData const*) const
 T CLadderMatchGroupDescription::CLadderProgressionDesc::GetLastAckdExperienceFromLadderData(CSOTFLadderData const*) const
 T CLadderMatchGroupDescription::InitGameRulesSettings() const
 T CLadderMatchGroupDescription::InitGameRulesSettingsPostEntity() const
 T CLadderMatchGroupDescription::PostMatchClearServerSettings() const
 T CLadderMatchGroupDescription::ShouldRequestLateJoin() const
 T CLagCompensationManager::BacktrackPlayer(CBasePlayer*, float)
 T CLagCompensationManager::CLagCompensationManager(char const*)
 T CLagCompensationManager::FinishLagCompensation(CBasePlayer*)
 T CLagCompensationManager::FrameUpdatePostEntityThink()
 T CLagCompensationManager::IsCurrentlyDoingLagCompensation() const
 T CLagCompensationManager::LevelShutdownPostEntity()
 T CLagCompensationManager::Shutdown()
 T CLagCompensationManager::StartLagCompensation(CBasePlayer*, CUserCmd*)
 T CLagCompensationManager::~CLagCompensationManager()
 T CLaserDot::Create(Vector const&, CBaseEntity*, bool)
 T CLaserDot::GetDataDescMap()
 T CLaserDot::GetServerClass()
 T CLaserDot::YouForgotToImplementOrDeclareServerClass()
 T CLaserDot::~CLaserDot()
 T CLeaderboardInfo::CLeaderboardInfo(char const*)
 T CLeaderboardInfo::OnFindLeaderboard(LeaderboardFindResult_t*, bool)
 T CLeaderboardInfo::RetrieveLeaderboardData()
 T CLeaderboardInfo::~CLeaderboardInfo()
 T CLight::FadeThink()
 T CLight::GetDataDescMap()
 T CLight::InputFadeToPattern(inputdata_t&)
 T CLight::InputSetPattern(inputdata_t&)
 T CLight::InputToggle(inputdata_t&)
 T CLight::InputTurnOff(inputdata_t&)
 T CLight::InputTurnOn(inputdata_t&)
 T CLight::KeyValue(char const*, char const*)
 T CLight::Spawn()
 T CLight::TurnOff()
 T CLight::TurnOn()
 T CLight::Use(CBaseEntity*, CBaseEntity*, USE_TYPE, float)
 T CLight::~CLight()
 T CLightGlow::Activate()
 T CLightGlow::CLightGlow()
 T CLightGlow::GetDataDescMap()
 T CLightGlow::GetServerClass()
 T CLightGlow::InputColor(inputdata_t&)
 T CLightGlow::Spawn()
 T CLightGlow::UpdateTransmitState()
 T CLightGlow::YouForgotToImplementOrDeclareServerClass()
 T CLightGlow::~CLightGlow()
 T CListMissions::Inspect(CTacticalMission const&)
 T CLobbyPendingPlayerReport::ByteSize() const
 T CLobbyPendingPlayerReport::Clear()
 T CLobbyPendingPlayerReport::GetCachedSize() const
 T CLobbyPendingPlayerReport::GetMetadata() const
 T CLobbyPendingPlayerReport::IsInitialized() const
 T CLobbyPendingPlayerReport::MergeFrom(CLobbyPendingPlayerReport const&)
 T CLobbyPendingPlayerReport::New() const
 T CLobbyPendingPlayerReport::SerializeWithCachedSizesToArray(unsigned char*) const
 T CLobbyPendingPlayerReport::SetCachedSize(int) const
 T CLobbyPendingPlayerReport::~CLobbyPendingPlayerReport()
 T CLogicActiveAutosave::GetDataDescMap()
 T CLogicActiveAutosave::InputDisable(inputdata_t&)
 T CLogicActiveAutosave::InputEnable(inputdata_t&)
 T CLogicActiveAutosave::SaveThink()
 T CLogicActiveAutosave::~CLogicActiveAutosave()
 T CLogicAuto::Activate()
 T CLogicAuto::GetDataDescMap()
 T CLogicAuto::ObjectCaps()
 T CLogicAuto::Think()
 T CLogicAuto::~CLogicAuto()
 T CLogicAutosave::GetDataDescMap()
 T CLogicAutosave::InputSave(inputdata_t&)
 T CLogicAutosave::InputSaveDangerous(inputdata_t&)
 T CLogicAutosave::InputSetMinHitpointsThreshold(inputdata_t&)
 T CLogicAutosave::~CLogicAutosave()
 T CLogicBranch::AddLogicBranchListener(CBaseEntity*)
 T CLogicBranch::DrawDebugTextOverlays()
 T CLogicBranch::GetDataDescMap()
 T CLogicBranch::InputSetValue(inputdata_t&)
 T CLogicBranch::InputSetValueTest(inputdata_t&)
 T CLogicBranch::InputTest(inputdata_t&)
 T CLogicBranch::InputToggle(inputdata_t&)
 T CLogicBranch::InputToggleTest(inputdata_t&)
 T CLogicBranch::UpdateOnRemove()
 T CLogicBranch::UpdateValue(bool, CBaseEntity*, CLogicBranch::LogicBranchFire_t)
 T CLogicBranch::~CLogicBranch()
 T CLogicBranchList::Activate()
 T CLogicBranchList::DoTest(CBaseEntity*)
 T CLogicBranchList::DrawDebugTextOverlays()
 T CLogicBranchList::GetDataDescMap()
 T CLogicBranchList::InputTest(inputdata_t&)
 T CLogicBranchList::Input_OnLogicBranchChanged(inputdata_t&)
 T CLogicBranchList::Input_OnLogicBranchRemoved(inputdata_t&)
 T CLogicBranchList::Spawn()
 T CLogicBranchList::~CLogicBranchList()
 T CLogicCase::GetDataDescMap()
 T CLogicCase::InputPickRandom(inputdata_t&)
 T CLogicCase::InputPickRandomShuffle(inputdata_t&)
 T CLogicCase::InputValue(inputdata_t&)
 T CLogicCase::Spawn()
 T CLogicCase::~CLogicCase()
 T CLogicCollisionPair::Activate()
 T CLogicCollisionPair::EnableCollisions(bool)
 T CLogicCollisionPair::GetDataDescMap()
 T CLogicCollisionPair::InputDisableCollisions(inputdata_t&)
 T CLogicCollisionPair::InputEnableCollisions(inputdata_t&)
 T CLogicCollisionPair::~CLogicCollisionPair()
 T CLogicCompare::DoCompare(CBaseEntity*, float)
 T CLogicCompare::DrawDebugTextOverlays()
 T CLogicCompare::GetDataDescMap()
 T CLogicCompare::InputCompare(inputdata_t&)
 T CLogicCompare::InputSetCompareValue(inputdata_t&)
 T CLogicCompare::InputSetValue(inputdata_t&)
 T CLogicCompare::InputSetValueCompare(inputdata_t&)
 T CLogicCompare::~CLogicCompare()
 T CLogicCompareInteger::GetDataDescMap()
 T CLogicCompareInteger::InputCompareValues(inputdata_t&)
 T CLogicCompareInteger::InputValue(inputdata_t&)
 T CLogicCompareInteger::~CLogicCompareInteger()
 T CLogicLineToEntity::Activate()
 T CLogicLineToEntity::GetDataDescMap()
 T CLogicLineToEntity::Spawn()
 T CLogicLineToEntity::Think()
 T CLogicLineToEntity::~CLogicLineToEntity()
 T CLogicMannPower::GetDataDescMap()
 T CLogicMannPower::~CLogicMannPower()
 T CLogicMeasureMovement::Activate()
 T CLogicMeasureMovement::GetDataDescMap()
 T CLogicMeasureMovement::InputDisable(inputdata_t&)
 T CLogicMeasureMovement::InputEnable(inputdata_t&)
 T CLogicMeasureMovement::InputSetMeasureReference(inputdata_t&)
 T CLogicMeasureMovement::InputSetMeasureTarget(inputdata_t&)
 T CLogicMeasureMovement::InputSetTarget(inputdata_t&)
 T CLogicMeasureMovement::InputSetTargetReference(inputdata_t&)
 T CLogicMeasureMovement::InputSetTargetScale(inputdata_t&)
 T CLogicMeasureMovement::MeasureThink()
 T CLogicMeasureMovement::SetMeasureTarget(char const*)
 T CLogicMeasureMovement::~CLogicMeasureMovement()
 T CLogicNavigation::Activate()
 T CLogicNavigation::GetDataDescMap()
 T CLogicNavigation::InputToggle(inputdata_t&)
 T CLogicNavigation::InputTurnOff(inputdata_t&)
 T CLogicNavigation::InputTurnOn(inputdata_t&)
 T CLogicNavigation::KeyValue(char const*, char const*)
 T CLogicNavigation::OnEntitySpawned(CBaseEntity*)
 T CLogicNavigation::UpdateOnRemove()
 T CLogicNavigation::UpdateProperty()
 T CLogicNavigation::~CLogicNavigation()
 T CLogicOnHoliday::GetDataDescMap()
 T CLogicOnHoliday::InputFire(inputdata_t&)
 T CLogicOnHoliday::~CLogicOnHoliday()
 T CLogicRelay::Activate()
 T CLogicRelay::GetDataDescMap()
 T CLogicRelay::InputCancelPending(inputdata_t&)
 T CLogicRelay::InputDisable(inputdata_t&)
 T CLogicRelay::InputEnable(inputdata_t&)
 T CLogicRelay::InputEnableRefire(inputdata_t&)
 T CLogicRelay::InputToggle(inputdata_t&)
 T CLogicRelay::InputTrigger(inputdata_t&)
 T CLogicRelay::Think()
 T CLogicRelay::~CLogicRelay()
 T CLogicalEntity::KeyValue(char const*, char const*)
 T CMD_BotWarpTeamToMe()
 T CMD_SelectAmbushAreas()
 T CMD_TankHealth(CCommand const&)
 T CMD_TankKill()
 T CMannVsMachineChangeChallengeIssue::CanCallVote(int, char const*, vote_create_failed_t&, int&)
 T CMannVsMachineChangeChallengeIssue::CanTeamCallVote(int) const
 T CMannVsMachineChangeChallengeIssue::ExecuteCommand()
 T CMannVsMachineChangeChallengeIssue::GetDetailsString()
 T CMannVsMachineChangeChallengeIssue::GetDisplayString()
 T CMannVsMachineChangeChallengeIssue::GetNumberVoteOptions()
 T CMannVsMachineChangeChallengeIssue::GetVotePassedString()
 T CMannVsMachineChangeChallengeIssue::IsEnabled()
 T CMannVsMachineChangeChallengeIssue::IsYesNoVote()
 T CMannVsMachineChangeChallengeIssue::ListIssueDetails(CBasePlayer*)
 T CMannVsMachineChangeChallengeIssue::~CMannVsMachineChangeChallengeIssue()
 T CMannVsMachineLogic* _CreateEntityTemplate<CMannVsMachineLogic>(CMannVsMachineLogic*, char const*)
 T CMannVsMachineLogic::GetDataDescMap()
 T CMannVsMachineLogic::InitPopulationManager()
 T CMannVsMachineLogic::SetupOnRoundStart()
 T CMannVsMachineLogic::Spawn()
 T CMannVsMachineLogic::Update()
 T CMannVsMachineLogic::UpdateTransmitState()
 T CMannVsMachineLogic::~CMannVsMachineLogic()
 T CMannVsMachineStats::CMannVsMachineStats()
 T CMannVsMachineStats::GetAcquiredCredits(int, bool)
 T CMannVsMachineStats::GetServerClass()
 T CMannVsMachineStats::GetSpending(int, unsigned long long)
 T CMannVsMachineStats::NotifyPlayerActiveUpgradeCosts(CTFPlayer*, int)
 T CMannVsMachineStats::NotifyTargetPlayerEvent(CTFPlayer*, unsigned int, eMannVsMachineEvent, int)
 T CMannVsMachineStats::ObjectCaps()
 T CMannVsMachineStats::PlayerEvent_BoughtInstantRespawn(CTFPlayer*, int)
 T CMannVsMachineStats::PlayerEvent_DealtDamageToBots(CTFPlayer*, int)
 T CMannVsMachineStats::PlayerEvent_DealtDamageToGiants(CTFPlayer*, int)
 T CMannVsMachineStats::PlayerEvent_DealtDamageToTanks(CTFPlayer*, int)
 T CMannVsMachineStats::PlayerEvent_Upgraded(CTFPlayer*, unsigned short, unsigned short, unsigned char, short, bool)
 T CMannVsMachineStats::ResetPlayerEvents(CTFPlayer*)
 T CMannVsMachineStats::ResetStats()
 T CMannVsMachineStats::ResetUpgradeSpending(CTFPlayer*)
 T CMannVsMachineStats::ResetWaveStats()
 T CMannVsMachineStats::RoundEvent_AcquiredCredits(unsigned int, int, bool)
 T CMannVsMachineStats::RoundEvent_CreditsDropped(unsigned int, int)
 T CMannVsMachineStats::RoundEvent_WaveEnd(bool)
 T CMannVsMachineStats::RoundEvent_WaveStart()
 T CMannVsMachineStats::RoundOver(bool)
 T CMannVsMachineStats::SendUpgradesToPlayer(CTFPlayer*, CUtlVector<CUpgradeInfo, CUtlMemory<CUpgradeInfo, int> >*)
 T CMannVsMachineStats::SetCurrentWave(unsigned int)
 T CMannVsMachineStats::UpdateTransmitState()
 T CMannVsMachineStats::YouForgotToImplementOrDeclareServerClass()
 T CMannVsMachineStats::~CMannVsMachineStats()
 T CMannVsMachineUpgradeManager::LevelInitPostEntity()
 T CMannVsMachineUpgradeManager::LevelShutdownPostEntity()
 T CMannVsMachineUpgradeManager::LoadUpgradesFileFromPath(char const*)
 T CMannVsMachineUpgradeManager::ParseUpgradeBlockForUIGroup(KeyValues*, int)
 T CMannVsMachineUpgradeManager::~CMannVsMachineUpgradeManager()
 T CMannVsMachineWaveStats::CMannVsMachineWaveStats()
 T CMannVsMachineWaveStats::ClearStats()
 T CMannVsMachineWaveStats::NetworkStateChanged()
 T CMannVsMachineWaveStats::NetworkStateChanged(void*)
 T CMannVsMachineWaveStats::operator+=(CMannVsMachineWaveStats const&)
 T CMapInfoContainer::CMapInfoContainer()
 T CMapInfoContainer::DownloadDuelLeaderboard()
 T CMapInfoContainer::FireGameEvent(IGameEvent*)
 T CMapInfoContainer::Init()
 T CMapInfoContainer::Name()
 T CMapInfoContainer::OnDuelLeaderboardScoresDownloaded_Friends(LeaderboardScoresDownloaded_t*, bool)
 T CMapInfoContainer::OnDuelLeaderboardScoresDownloaded_GlobalAroundUser(LeaderboardScoresDownloaded_t*, bool)
 T CMapInfoContainer::OnFindDuelLeaderboard(LeaderboardFindResult_t*, bool)
 T CMapInfoContainer::~CMapInfoContainer()
 T CMapLoadEntityFilter::CreateNextEntity(char const*)
 T CMapLoadEntityFilter::ShouldCreateEntity(char const*)
 T CMatchInfo::AddPlayer(CSteamID, CTFLobbyMember const*, bool, int, bool)
 T CMatchInfo::BPlayerSafeToLeaveMatch(CSteamID)
 T CMatchInfo::CMatchInfo(CTFGSLobby*)
 T CMatchInfo::CalculateMatchSkillRatingAdjustments(int)
 T CMatchInfo::CalculatePlayerMatchRankData()
 T CMatchInfo::GetCanonicalMatchSize() const
 T CMatchInfo::GetMatchDataForPlayer(CSteamID)
 T CMatchInfo::GetMatchDataForPlayer(CSteamID) const
 T CMatchInfo::GetMatchDataForPlayer(int)
 T CMatchInfo::GetNumActiveMatchPlayers() const
 T CMatchInfo::GetNumTotalMatchPlayers() const
 T CMatchInfo::GetRankForStat(CMatchInfo::RankStatType_t, int, unsigned int)
 T CMatchInfo::GiveXPDirectly(CSteamID, CMsgTFXPSource_XPSourceType, int)
 T CMatchInfo::GiveXPRewardToPlayerForAction(CSteamID, CMsgTFXPSource_XPSourceType, int)
 T CMatchInfo::PlayerMatchData_t::GetConnectionState() const
 T CMatchInfo::PlayerMatchData_t::UpdateClassesPlayed(int)
 T CMatchInfo::RequestGCRankData()
 T CMatchInfo::SetDailyRankData(CMatchInfo::DailyStatsRankBucket_t)
 T CMatchInfo::~CMatchInfo()
 T CMaterialModifyControl::CMaterialModifyControl()
 T CMaterialModifyControl::GetDataDescMap()
 T CMaterialModifyControl::GetServerClass()
 T CMaterialModifyControl::InputStartAnimSequence(inputdata_t&)
 T CMaterialModifyControl::InputStartFloatLerp(inputdata_t&)
 T CMaterialModifyControl::KeyValue(char const*, char const*)
 T CMaterialModifyControl::ObjectCaps()
 T CMaterialModifyControl::SetMaterialVar(inputdata_t&)
 T CMaterialModifyControl::SetMaterialVarToCurrentTime(inputdata_t&)
 T CMaterialModifyControl::ShouldTransmit(CCheckTransmitInfo const*)
 T CMaterialModifyControl::Spawn()
 T CMaterialModifyControl::UpdateTransmitState()
 T CMaterialModifyControl::YouForgotToImplementOrDeclareServerClass()
 T CMaterialModifyControl::~CMaterialModifyControl()
 T CMaterialOverrideContainer<IEconItemInterface>::GetMaterialOverride(int)
 T CMaterialReference::CMaterialReference(char const*, char const*, bool)
 T CMaterialReference::Init(char const*, char const*, bool)
 T CMaterialReference::~CMaterialReference()
 T CMathColorBlend::GetDataDescMap()
 T CMathColorBlend::InputValue(inputdata_t&)
 T CMathColorBlend::Spawn()
 T CMathColorBlend::~CMathColorBlend()
 T CMathCounter::DrawDebugTextOverlays()
 T CMathCounter::GetDataDescMap()
 T CMathCounter::InputAdd(inputdata_t&)
 T CMathCounter::InputDisable(inputdata_t&)
 T CMathCounter::InputDivide(inputdata_t&)
 T CMathCounter::InputEnable(inputdata_t&)
 T CMathCounter::InputGetValue(inputdata_t&)
 T CMathCounter::InputMultiply(inputdata_t&)
 T CMathCounter::InputSetHitMax(inputdata_t&)
 T CMathCounter::InputSetHitMin(inputdata_t&)
 T CMathCounter::InputSetValue(inputdata_t&)
 T CMathCounter::InputSetValueNoFire(inputdata_t&)
 T CMathCounter::InputSubtract(inputdata_t&)
 T CMathCounter::KeyValue(char const*, char const*)
 T CMathCounter::Spawn()
 T CMathCounter::UpdateOutValue(CBaseEntity*, float)
 T CMathCounter::~CMathCounter()
 T CMathRemap::GetDataDescMap()
 T CMathRemap::InputDisable(inputdata_t&)
 T CMathRemap::InputEnable(inputdata_t&)
 T CMathRemap::InputValue(inputdata_t&)
 T CMathRemap::Spawn()
 T CMathRemap::~CMathRemap()
 T CMedievalLogic::UpdateTransmitState()
 T CMedievalLogic::~CMedievalLogic()
 T CMedigunFilter::ShouldHitEntity(IHandleEntity*, int)
 T CMemberFunctor0<CParallelProcessor<CNavArea*, CFuncJobItemProcessor<CNavArea*> >*, void (CParallelProcessor<CNavArea*, CFuncJobItemProcessor<CNavArea*> >::*)(), CRefCounted1<CFunctor, CRefCountServiceBase<true, CRefMT> >, CFuncMemPolicyNone>::operator()()
 T CMemberFunctor0<CParallelProcessor<CNavArea*, CFuncJobItemProcessor<CNavArea*> >*, void (CParallelProcessor<CNavArea*, CFuncJobItemProcessor<CNavArea*> >::*)(), CRefCounted1<CFunctor, CRefCountServiceBase<true, CRefMT> >, CFuncMemPolicyNone>::~CMemberFunctor0()
 T CMemberFunctor0<CParallelProcessor<QueryCacheUpdateRecord_t, CFuncJobItemProcessor<QueryCacheUpdateRecord_t> >*, void (CParallelProcessor<QueryCacheUpdateRecord_t, CFuncJobItemProcessor<QueryCacheUpdateRecord_t> >::*)(), CRefCounted1<CFunctor, CRefCountServiceBase<true, CRefMT> >, CFuncMemPolicyNone>::operator()()
 T CMemberFunctor0<CParallelProcessor<QueryCacheUpdateRecord_t, CFuncJobItemProcessor<QueryCacheUpdateRecord_t> >*, void (CParallelProcessor<QueryCacheUpdateRecord_t, CFuncJobItemProcessor<QueryCacheUpdateRecord_t> >::*)(), CRefCounted1<CFunctor, CRefCountServiceBase<true, CRefMT> >, CFuncMemPolicyNone>::~CMemberFunctor0()
 T CMemberFunctor1<CAI_Navigator*, bool (CAI_Navigator::*)(Vector const&), Vector, CRefCounted1<CFunctor, CRefCountServiceBase<true, CRefMT> >, CFuncMemPolicyNone>::operator()()
 T CMemberFunctor1<CAI_Navigator*, bool (CAI_Navigator::*)(Vector const&), Vector, CRefCounted1<CFunctor, CRefCountServiceBase<true, CRefMT> >, CFuncMemPolicyNone>::~CMemberFunctor1()
 T CMemberFunctor1<IPhysicsObject*, void (IPhysicsObject::*)(bool), bool, CRefCounted1<CFunctor, CRefCountServiceBase<true, CRefMT> >, CFuncMemPolicyNone>::operator()()
 T CMemberFunctor1<IPhysicsObject*, void (IPhysicsObject::*)(bool), bool, CRefCounted1<CFunctor, CRefCountServiceBase<true, CRefMT> >, CFuncMemPolicyNone>::~CMemberFunctor1()
 T CMemberFunctor2<CAI_Navigator*, bool (CAI_Navigator::*)(AI_NavGoal_t const&, unsigned int), AI_NavGoal_t, unsigned int, CRefCounted1<CFunctor, CRefCountServiceBase<true, CRefMT> >, CFuncMemPolicyNone>::operator()()
 T CMemberFunctor2<CAI_Navigator*, bool (CAI_Navigator::*)(AI_NavGoal_t const&, unsigned int), AI_NavGoal_t, unsigned int, CRefCounted1<CFunctor, CRefCountServiceBase<true, CRefMT> >, CFuncMemPolicyNone>::~CMemberFunctor2()
 T CMemberFunctor3<CBreakableProp*, void (CBreakableProp::*)(Vector const&, Vector const&, QAngle const&), Vector, Vector, QAngle, CRefCounted1<CFunctor, CRefCountServiceBase<true, CRefMT> >, CFuncMemPolicyNone>::operator()()
 T CMemberFunctor3<CBreakableProp*, void (CBreakableProp::*)(Vector const&, Vector const&, QAngle const&), Vector, Vector, QAngle, CRefCounted1<CFunctor, CRefCountServiceBase<true, CRefMT> >, CFuncMemPolicyNone>::~CMemberFunctor3()
 T CMemoryStack::CMemoryStack()
 T CMemoryStack::CommitTo(unsigned char*)
 T CMemoryStack::FreeAll(bool)
 T CMemoryStack::Init(unsigned int, unsigned int, unsigned int, unsigned int)
 T CMemoryStack::~CMemoryStack()
 T CMerasmus::AddFakeProp(CTFMerasmusTrickOrTreatProp*)
 T CMerasmus::AddStun(CTFPlayer*)
 T CMerasmus::BombHeadMode()
 T CMerasmus::CMerasmus()
 T CMerasmus::CreateMerasmusGrenade(Vector const&, Vector const&, CBaseCombatCharacter*, float)
 T CMerasmus::FireGameEvent(IGameEvent*)
 T CMerasmus::GetBodyInterface() const
 T CMerasmus::GetBossType() const
 T CMerasmus::GetIntentionInterface() const
 T CMerasmus::GetLevel() const
 T CMerasmus::GetLocomotionInterface() const
 T CMerasmus::GetRandomPropModelName()
 T CMerasmus::GetServerClass()
 T CMerasmus::IsNextKilledPropMerasmus() const
 T CMerasmus::LeaveWarning()
 T CMerasmus::OnBeginStun()
 T CMerasmus::OnDisguise()
 T CMerasmus::OnEndStun()
 T CMerasmus::OnLeaveWhileInPropForm()
 T CMerasmus::OnRevealed(bool)
 T CMerasmus::OnTakeDamage_Alive(CTakeDamageInfo const&)
 T CMerasmus::PlayHighPrioritySound(char const*)
 T CMerasmus::PlayLowPrioritySound(IRecipientFilter&, char const*)
 T CMerasmus::Precache()
 T CMerasmus::PrecacheMerasmus()
 T CMerasmus::PushPlayer(CTFPlayer*, float) const
 T CMerasmus::SW_ReportMerasmusStats()
 T CMerasmus::ShouldDisguise() const
 T CMerasmus::ShouldLeave() const
 T CMerasmus::ShouldReveal() const
 T CMerasmus::Spawn()
 T CMerasmus::StartRespawnTimer() const
 T CMerasmus::TriggerLogicRelay(char const*, bool)
 T CMerasmus::Update()
 T CMerasmus::UpdateOnRemove()
 T CMerasmus::YouForgotToImplementOrDeclareServerClass()
 T CMerasmus::Zap(CBaseCombatCharacter*, char const*, float, float, float, int, int)
 T CMerasmus::~CMerasmus()
 T CMerasmusAOEAttack::GetName() const
 T CMerasmusAOEAttack::OnEnd(CMerasmus*, Action<CMerasmus>*)
 T CMerasmusAOEAttack::OnStart(CMerasmus*, Action<CMerasmus>*)
 T CMerasmusAOEAttack::QueueBombRingsForLaunch(CMerasmus*)
 T CMerasmusAOEAttack::QueueBombSpokesForLaunch(CMerasmus*)
 T CMerasmusAOEAttack::QueueSingleGrenadeForLaunch(Vector const&)
 T CMerasmusAOEAttack::Update(CMerasmus*, float)
 T CMerasmusAOEAttack::~CMerasmusAOEAttack()
 T CMerasmusAttack::GetName() const
 T CMerasmusAttack::IsPotentiallyChaseable(CMerasmus*, CTFPlayer*)
 T CMerasmusAttack::OnContact(CMerasmus*, CBaseEntity*, CGameTrace*)
 T CMerasmusAttack::OnStart(CMerasmus*, Action<CMerasmus>*)
 T CMerasmusAttack::OnStuck(CMerasmus*)
 T CMerasmusAttack::RecomputeHomePosition()
 T CMerasmusAttack::SelectVictim(CMerasmus*)
 T CMerasmusAttack::Update(CMerasmus*, float)
 T CMerasmusAttack::~CMerasmusAttack()
 T CMerasmusBehavior::GetName() const
 T CMerasmusBehavior::InitialContainedAction(CMerasmus*)
 T CMerasmusBehavior::OnInjured(CMerasmus*, CTakeDamageInfo const&)
 T CMerasmusBehavior::OnStart(CMerasmus*, Action<CMerasmus>*)
 T CMerasmusBehavior::Update(CMerasmus*, float)
 T CMerasmusBehavior::~CMerasmusBehavior()
 T CMerasmusBody::CMerasmusBody(INextBot*)
 T CMerasmusBody::GetActivity() const
 T CMerasmusBody::GetSolidMask() const
 T CMerasmusBody::IsActivity(Activity) const
 T CMerasmusBody::StartActivity(Activity, unsigned int)
 T CMerasmusBody::Update()
 T CMerasmusBody::~CMerasmusBody()
 T CMerasmusDancer::BlastOff()
 T CMerasmusDancer::Dance()
 T CMerasmusDancer::DanceThink()
 T CMerasmusDancer::GetServerClass()
 T CMerasmusDancer::PlayActivity(int)
 T CMerasmusDancer::PlaySequence(char const*)
 T CMerasmusDancer::Precache()
 T CMerasmusDancer::Spawn()
 T CMerasmusDancer::Vanish()
 T CMerasmusDancer::YouForgotToImplementOrDeclareServerClass()
 T CMerasmusDancer::~CMerasmusDancer()
 T CMerasmusDisguise::GetName() const
 T CMerasmusDisguise::OnEnd(CMerasmus*, Action<CMerasmus>*)
 T CMerasmusDisguise::OnStart(CMerasmus*, Action<CMerasmus>*)
 T CMerasmusDisguise::TryToDisguiseSpawn(CMerasmus*)
 T CMerasmusDisguise::Update(CMerasmus*, float)
 T CMerasmusDisguise::~CMerasmusDisguise()
 T CMerasmusDying::GetName() const
 T CMerasmusDying::OnStart(CMerasmus*, Action<CMerasmus>*)
 T CMerasmusDying::Update(CMerasmus*, float)
 T CMerasmusDying::~CMerasmusDying()
 T CMerasmusEscape::GetName() const
 T CMerasmusEscape::OnStart(CMerasmus*, Action<CMerasmus>*)
 T CMerasmusEscape::Update(CMerasmus*, float)
 T CMerasmusEscape::~CMerasmusEscape()
 T CMerasmusFlyingLocomotion::Approach(Vector const&, float)
 T CMerasmusFlyingLocomotion::FaceTowards(Vector const&)
 T CMerasmusFlyingLocomotion::GetDesiredAltitude() const
 T CMerasmusFlyingLocomotion::GetDesiredSpeed() const
 T CMerasmusFlyingLocomotion::GetGroundNormal() const
 T CMerasmusFlyingLocomotion::GetVelocity() const
 T CMerasmusFlyingLocomotion::MaintainAltitude()
 T CMerasmusFlyingLocomotion::Reset()
 T CMerasmusFlyingLocomotion::SetDesiredAltitude(float)
 T CMerasmusFlyingLocomotion::ShouldCollideWith(CBaseEntity const*) const
 T CMerasmusFlyingLocomotion::Update()
 T CMerasmusFlyingLocomotion::~CMerasmusFlyingLocomotion()
 T CMerasmusIntention::CMerasmusIntention(CMerasmus*)
 T CMerasmusIntention::FirstContainedResponder() const
 T CMerasmusIntention::IsPositionAllowed(INextBot const*, Vector const&) const
 T CMerasmusIntention::NextContainedResponder(INextBotEventResponder*) const
 T CMerasmusIntention::Reset()
 T CMerasmusIntention::Update()
 T CMerasmusIntention::~CMerasmusIntention()
 T CMerasmusLocomotion::GetMaxJumpHeight() const
 T CMerasmusLocomotion::GetMaxYawRate() const
 T CMerasmusLocomotion::GetRunSpeed() const
 T CMerasmusLocomotion::GetStepHeight() const
 T CMerasmusLocomotion::ShouldCollideWith(CBaseEntity const*) const
 T CMerasmusLocomotion::Update()
 T CMerasmusLocomotion::~CMerasmusLocomotion()
 T CMerasmusPathCost::operator()(CNavArea*, CNavArea*, CNavLadder const*, CFuncElevator const*, float) const
 T CMerasmusReveal::GetName() const
 T CMerasmusReveal::OnStart(CMerasmus*, Action<CMerasmus>*)
 T CMerasmusReveal::Update(CMerasmus*, float)
 T CMerasmusReveal::~CMerasmusReveal()
 T CMerasmusStaffAttack::CMerasmusStaffAttack(CTFPlayer*)
 T CMerasmusStaffAttack::GetName() const
 T CMerasmusStaffAttack::OnStart(CMerasmus*, Action<CMerasmus>*)
 T CMerasmusStaffAttack::Update(CMerasmus*, float)
 T CMerasmusStaffAttack::~CMerasmusStaffAttack()
 T CMerasmusStunned::GetName() const
 T CMerasmusStunned::OnEnd(CMerasmus*, Action<CMerasmus>*)
 T CMerasmusStunned::OnStart(CMerasmus*, Action<CMerasmus>*)
 T CMerasmusStunned::Update(CMerasmus*, float)
 T CMerasmusStunned::~CMerasmusStunned()
 T CMerasmusTeleport::CMerasmusTeleport(bool, bool)
 T CMerasmusTeleport::GetName() const
 T CMerasmusTeleport::GetTeleportPosition(CMerasmus*) const
 T CMerasmusTeleport::OnStart(CMerasmus*, Action<CMerasmus>*)
 T CMerasmusTeleport::Update(CMerasmus*, float)
 T CMerasmusTeleport::~CMerasmusTeleport()
 T CMerasmusThrowingGrenade::CMerasmusThrowingGrenade(CTFPlayer*)
 T CMerasmusThrowingGrenade::GetName() const
 T CMerasmusThrowingGrenade::OnEnd(CMerasmus*, Action<CMerasmus>*)
 T CMerasmusThrowingGrenade::OnStart(CMerasmus*, Action<CMerasmus>*)
 T CMerasmusThrowingGrenade::Update(CMerasmus*, float)
 T CMerasmusThrowingGrenade::~CMerasmusThrowingGrenade()
 T CMerasmusZap::GetName() const
 T CMerasmusZap::OnStart(CMerasmus*, Action<CMerasmus>*)
 T CMerasmusZap::PlayCastSound(CMerasmus*) const
 T CMerasmusZap::Update(CMerasmus*, float)
 T CMerasmusZap::~CMerasmusZap()
 T CMessage::GetDataDescMap()
 T CMessage::InputShowMessage(inputdata_t&)
 T CMessage::Precache()
 T CMessage::Spawn()
 T CMessage::Use(CBaseEntity*, CBaseEntity*, USE_TYPE, float)
 T CMessage::~CMessage()
 T CMessageEntity::Activate()
 T CMessageEntity::GetDataDescMap()
 T CMessageEntity::InputDisable(inputdata_t&)
 T CMessageEntity::InputEnable(inputdata_t&)
 T CMessageEntity::Spawn()
 T CMessageEntity::Think()
 T CMessageEntity::UpdateOnRemove()
 T CMessageEntity::~CMessageEntity()
 T CMissionPopulator::CMissionPopulator(CPopulationManager*)
 T CMissionPopulator::Parse(KeyValues*)
 T CMissionPopulator::UnpauseSpawning()
 T CMissionPopulator::Update()
 T CMissionPopulator::UpdateMission(CTFBot::MissionType)
 T CMissionPopulator::UpdateMissionDestroySentries()
 T CMissionPopulator::~CMissionPopulator()
 T CMobSpawner::HasEventChangeAttributes(char const*) const
 T CMobSpawner::Parse(KeyValues*)
 T CMobSpawner::Spawn(Vector const&, CUtlVector<CHandle<CBaseEntity>, CUtlMemory<CHandle<CBaseEntity>, int> >*)
 T CMobSpawner::~CMobSpawner()
 T CModelSoundsCache::BuildAnimationEventSoundList(CStudioHdr*, CUtlVector<unsigned short, CUtlMemory<unsigned short, int> >&)
 T CModelSoundsCache::CModelSoundsCache()
 T CModelSoundsCache::PrecacheSoundList()
 T CModelSoundsCache::Rebuild(char const*)
 T CModelSoundsCache::Restore(CUtlBuffer&)
 T CModelSoundsCache::Save(CUtlBuffer&)
 T CModelSoundsCache::~CModelSoundsCache()
 T CModelSoundsCacheSaver::LevelInitPostEntity()
 T CModelSoundsCacheSaver::LevelShutdownPostEntity()
 T CModelSoundsCacheSaver::~CModelSoundsCacheSaver()
 T CMomentaryRotButton::CreateVPhysics()
 T CMomentaryRotButton::Disable()
 T CMomentaryRotButton::DrawDebugTextOverlays()
 T CMomentaryRotButton::Enable()
 T CMomentaryRotButton::GetDataDescMap()
 T CMomentaryRotButton::InputDisable(inputdata_t&)
 T CMomentaryRotButton::InputDisableUpdateTarget(inputdata_t&)
 T CMomentaryRotButton::InputEnable(inputdata_t&)
 T CMomentaryRotButton::InputEnableUpdateTarget(inputdata_t&)
 T CMomentaryRotButton::InputSetPosition(inputdata_t&)
 T CMomentaryRotButton::InputSetPositionImmediately(inputdata_t&)
 T CMomentaryRotButton::Lock()
 T CMomentaryRotButton::ObjectCaps()
 T CMomentaryRotButton::PlaySound()
 T CMomentaryRotButton::ReturnMoveDone()
 T CMomentaryRotButton::SetPositionMoveDone()
 T CMomentaryRotButton::Spawn()
 T CMomentaryRotButton::Unlock()
 T CMomentaryRotButton::UpdateSelf(float, bool)
 T CMomentaryRotButton::UpdateThink()
 T CMomentaryRotButton::Use(CBaseEntity*, CBaseEntity*, USE_TYPE, float)
 T CMomentaryRotButton::UseMoveDone()
 T CMomentaryRotButton::~CMomentaryRotButton()
 T CMonsterResource::GetDataDescMap()
 T CMonsterResource::GetServerClass()
 T CMonsterResource::HideBossHealthMeter()
 T CMonsterResource::HideBossStunMeter()
 T CMonsterResource::HideSkillShotComboMeter()
 T CMonsterResource::IncrementSkillShotComboMeter()
 T CMonsterResource::ObjectCaps()
 T CMonsterResource::SetBossHealthPercentage(float)
 T CMonsterResource::SetBossStunPercentage(float)
 T CMonsterResource::Spawn()
 T CMonsterResource::StartSkillShotComboMeter(float)
 T CMonsterResource::Update()
 T CMonsterResource::UpdateTransmitState()
 T CMonsterResource::YouForgotToImplementOrDeclareServerClass()
 T CMonsterResource::~CMonsterResource()
 T CMotorController::Simulate(IPhysicsMotionController*, IPhysicsObject*, float, Vector&, Vector&)
 T CMoveHelperServer::AddToTouched(CGameTrace const&, Vector const&)
 T CMoveHelperServer::Con_NPrintf(int, char const*, ...)
 T CMoveHelperServer::GetName(CBaseHandle) const
 T CMoveHelperServer::GetSurfaceProps()
 T CMoveHelperServer::IsWorldEntity(CBaseHandle const&)
 T CMoveHelperServer::PlaybackEventFull(int, int, unsigned short, float, Vector&, Vector&, float, float, int, int, int, int)
 T CMoveHelperServer::PlayerFallingDamage()
 T CMoveHelperServer::PlayerSetAnimation(PLAYER_ANIM)
 T CMoveHelperServer::ProcessImpacts()
 T CMoveHelperServer::ResetTouchList()
 T CMoveHelperServer::SetHost(CBasePlayer*)
 T CMoveHelperServer::StartSound(Vector const&, char const*)
 T CMoveHelperServer::StartSound(Vector const&, int, char const*, float, soundlevel_t, int, int)
 T CMoveHelperServer::~CMoveHelperServer()
 T CMovementSpeedMod::GetDataDescMap()
 T CMovementSpeedMod::InputSpeedMod(inputdata_t&)
 T CMovementSpeedMod::~CMovementSpeedMod()
 T CMsgAMAddFreeLicense::ByteSize() const
 T CMsgAMAddFreeLicense::Clear()
 T CMsgAMAddFreeLicense::GetCachedSize() const
 T CMsgAMAddFreeLicense::GetMetadata() const
 T CMsgAMAddFreeLicense::IsInitialized() const
 T CMsgAMAddFreeLicense::MergeFrom(CMsgAMAddFreeLicense const&)
 T CMsgAMAddFreeLicense::New() const
 T CMsgAMAddFreeLicense::SerializeWithCachedSizesToArray(unsigned char*) const
 T CMsgAMAddFreeLicense::SetCachedSize(int) const
 T CMsgAMAddFreeLicense::~CMsgAMAddFreeLicense()
 T CMsgAMAddFreeLicenseResponse::ByteSize() const
 T CMsgAMAddFreeLicenseResponse::Clear()
 T CMsgAMAddFreeLicenseResponse::GetCachedSize() const
 T CMsgAMAddFreeLicenseResponse::GetMetadata() const
 T CMsgAMAddFreeLicenseResponse::IsInitialized() const
 T CMsgAMAddFreeLicenseResponse::MergeFrom(CMsgAMAddFreeLicenseResponse const&)
 T CMsgAMAddFreeLicenseResponse::New() const
 T CMsgAMAddFreeLicenseResponse::SerializeWithCachedSizesToArray(unsigned char*) const
 T CMsgAMAddFreeLicenseResponse::SetCachedSize(int) const
 T CMsgAMAddFreeLicenseResponse::~CMsgAMAddFreeLicenseResponse()
 T CMsgAMFindAccounts::ByteSize() const
 T CMsgAMFindAccounts::Clear()
 T CMsgAMFindAccounts::GetCachedSize() const
 T CMsgAMFindAccounts::GetMetadata() const
 T CMsgAMFindAccounts::IsInitialized() const
 T CMsgAMFindAccounts::MergeFrom(CMsgAMFindAccounts const&)
 T CMsgAMFindAccounts::New() const
 T CMsgAMFindAccounts::SerializeWithCachedSizesToArray(unsigned char*) const
 T CMsgAMFindAccounts::SetCachedSize(int) const
 T CMsgAMFindAccounts::~CMsgAMFindAccounts()
 T CMsgAMFindAccountsResponse::ByteSize() const
 T CMsgAMFindAccountsResponse::Clear()
 T CMsgAMFindAccountsResponse::GetCachedSize() const
 T CMsgAMFindAccountsResponse::GetMetadata() const
 T CMsgAMFindAccountsResponse::IsInitialized() const
 T CMsgAMFindAccountsResponse::MergeFrom(CMsgAMFindAccountsResponse const&)
 T CMsgAMFindAccountsResponse::New() const
 T CMsgAMFindAccountsResponse::SerializeWithCachedSizesToArray(unsigned char*) const
 T CMsgAMFindAccountsResponse::SetCachedSize(int) const
 T CMsgAMFindAccountsResponse::~CMsgAMFindAccountsResponse()
 T CMsgAMGetLicenses::ByteSize() const
 T CMsgAMGetLicenses::Clear()
 T CMsgAMGetLicenses::GetCachedSize() const
 T CMsgAMGetLicenses::GetMetadata() const
 T CMsgAMGetLicenses::IsInitialized() const
 T CMsgAMGetLicenses::MergeFrom(CMsgAMGetLicenses const&)
 T CMsgAMGetLicenses::New() const
 T CMsgAMGetLicenses::SerializeWithCachedSizesToArray(unsigned char*) const
 T CMsgAMGetLicenses::SetCachedSize(int) const
 T CMsgAMGetLicenses::~CMsgAMGetLicenses()
 T CMsgAMGetLicensesResponse::ByteSize() const
 T CMsgAMGetLicensesResponse::Clear()
 T CMsgAMGetLicensesResponse::GetCachedSize() const
 T CMsgAMGetLicensesResponse::GetMetadata() const
 T CMsgAMGetLicensesResponse::IsInitialized() const
 T CMsgAMGetLicensesResponse::MergeFrom(CMsgAMGetLicensesResponse const&)
 T CMsgAMGetLicensesResponse::New() const
 T CMsgAMGetLicensesResponse::SerializeWithCachedSizesToArray(unsigned char*) const
 T CMsgAMGetLicensesResponse::SetCachedSize(int) const
 T CMsgAMGetLicensesResponse::~CMsgAMGetLicensesResponse()
 T CMsgAMGetUserGameStats::ByteSize() const
 T CMsgAMGetUserGameStats::Clear()
 T CMsgAMGetUserGameStats::GetCachedSize() const
 T CMsgAMGetUserGameStats::GetMetadata() const
 T CMsgAMGetUserGameStats::IsInitialized() const
 T CMsgAMGetUserGameStats::MergeFrom(CMsgAMGetUserGameStats const&)
 T CMsgAMGetUserGameStats::New() const
 T CMsgAMGetUserGameStats::SerializeWithCachedSizesToArray(unsigned char*) const
 T CMsgAMGetUserGameStats::SetCachedSize(int) const
 T CMsgAMGetUserGameStats::~CMsgAMGetUserGameStats()
 T CMsgAMGetUserGameStatsResponse::ByteSize() const
 T CMsgAMGetUserGameStatsResponse::Clear()
 T CMsgAMGetUserGameStatsResponse::GetCachedSize() const
 T CMsgAMGetUserGameStatsResponse::GetMetadata() const
 T CMsgAMGetUserGameStatsResponse::IsInitialized() const
 T CMsgAMGetUserGameStatsResponse::MergeFrom(CMsgAMGetUserGameStatsResponse const&)
 T CMsgAMGetUserGameStatsResponse::New() const
 T CMsgAMGetUserGameStatsResponse::SerializeWithCachedSizesToArray(unsigned char*) const
 T CMsgAMGetUserGameStatsResponse::SetCachedSize(int) const
 T CMsgAMGetUserGameStatsResponse::~CMsgAMGetUserGameStatsResponse()
 T CMsgAMGetUserGameStatsResponse_Achievement_Blocks::ByteSize() const
 T CMsgAMGetUserGameStatsResponse_Achievement_Blocks::Clear()
 T CMsgAMGetUserGameStatsResponse_Achievement_Blocks::GetCachedSize() const
 T CMsgAMGetUserGameStatsResponse_Achievement_Blocks::GetMetadata() const
 T CMsgAMGetUserGameStatsResponse_Achievement_Blocks::IsInitialized() const
 T CMsgAMGetUserGameStatsResponse_Achievement_Blocks::MergeFrom(CMsgAMGetUserGameStatsResponse_Achievement_Blocks const&)
 T CMsgAMGetUserGameStatsResponse_Achievement_Blocks::New() const
 T CMsgAMGetUserGameStatsResponse_Achievement_Blocks::SerializeWithCachedSizesToArray(unsigned char*) const
 T CMsgAMGetUserGameStatsResponse_Achievement_Blocks::SetCachedSize(int) const
 T CMsgAMGetUserGameStatsResponse_Achievement_Blocks::~CMsgAMGetUserGameStatsResponse_Achievement_Blocks()
 T CMsgAMGetUserGameStatsResponse_Stats::ByteSize() const
 T CMsgAMGetUserGameStatsResponse_Stats::Clear()
 T CMsgAMGetUserGameStatsResponse_Stats::GetCachedSize() const
 T CMsgAMGetUserGameStatsResponse_Stats::GetMetadata() const
 T CMsgAMGetUserGameStatsResponse_Stats::IsInitialized() const
 T CMsgAMGetUserGameStatsResponse_Stats::MergeFrom(CMsgAMGetUserGameStatsResponse_Stats const&)
 T CMsgAMGetUserGameStatsResponse_Stats::New() const
 T CMsgAMGetUserGameStatsResponse_Stats::SerializeWithCachedSizesToArray(unsigned char*) const
 T CMsgAMGetUserGameStatsResponse_Stats::SetCachedSize(int) const
 T CMsgAMGetUserGameStatsResponse_Stats::~CMsgAMGetUserGameStatsResponse_Stats()
 T CMsgAMGrantGuestPasses2::ByteSize() const
 T CMsgAMGrantGuestPasses2::Clear()
 T CMsgAMGrantGuestPasses2::GetCachedSize() const
 T CMsgAMGrantGuestPasses2::GetMetadata() const
 T CMsgAMGrantGuestPasses2::IsInitialized() const
 T CMsgAMGrantGuestPasses2::MergeFrom(CMsgAMGrantGuestPasses2 const&)
 T CMsgAMGrantGuestPasses2::New() const
 T CMsgAMGrantGuestPasses2::SerializeWithCachedSizesToArray(unsigned char*) const
 T CMsgAMGrantGuestPasses2::SetCachedSize(int) const
 T CMsgAMGrantGuestPasses2::~CMsgAMGrantGuestPasses2()
 T CMsgAMGrantGuestPasses2Response::ByteSize() const
 T CMsgAMGrantGuestPasses2Response::Clear()
 T CMsgAMGrantGuestPasses2Response::GetCachedSize() const
 T CMsgAMGrantGuestPasses2Response::GetMetadata() const
 T CMsgAMGrantGuestPasses2Response::IsInitialized() const
 T CMsgAMGrantGuestPasses2Response::MergeFrom(CMsgAMGrantGuestPasses2Response const&)
 T CMsgAMGrantGuestPasses2Response::New() const
 T CMsgAMGrantGuestPasses2Response::SerializeWithCachedSizesToArray(unsigned char*) const
 T CMsgAMGrantGuestPasses2Response::SetCachedSize(int) const
 T CMsgAMGrantGuestPasses2Response::~CMsgAMGrantGuestPasses2Response()
 T CMsgAMSendEmail::ByteSize() const
 T CMsgAMSendEmail::Clear()
 T CMsgAMSendEmail::GetCachedSize() const
 T CMsgAMSendEmail::GetMetadata() const
 T CMsgAMSendEmail::IsInitialized() const
 T CMsgAMSendEmail::MergeFrom(CMsgAMSendEmail const&)
 T CMsgAMSendEmail::New() const
 T CMsgAMSendEmail::SerializeWithCachedSizesToArray(unsigned char*) const
 T CMsgAMSendEmail::SetCachedSize(int) const
 T CMsgAMSendEmail::~CMsgAMSendEmail()
 T CMsgAMSendEmailResponse::ByteSize() const
 T CMsgAMSendEmailResponse::Clear()
 T CMsgAMSendEmailResponse::GetCachedSize() const
 T CMsgAMSendEmailResponse::GetMetadata() const
 T CMsgAMSendEmailResponse::IsInitialized() const
 T CMsgAMSendEmailResponse::MergeFrom(CMsgAMSendEmailResponse const&)
 T CMsgAMSendEmailResponse::New() const
 T CMsgAMSendEmailResponse::SerializeWithCachedSizesToArray(unsigned char*) const
 T CMsgAMSendEmailResponse::SetCachedSize(int) const
 T CMsgAMSendEmailResponse::~CMsgAMSendEmailResponse()
 T CMsgAMSendEmail_PersonaNameReplacementToken::ByteSize() const
 T CMsgAMSendEmail_PersonaNameReplacementToken::Clear()
 T CMsgAMSendEmail_PersonaNameReplacementToken::GetCachedSize() const
 T CMsgAMSendEmail_PersonaNameReplacementToken::GetMetadata() const
 T CMsgAMSendEmail_PersonaNameReplacementToken::IsInitialized() const
 T CMsgAMSendEmail_PersonaNameReplacementToken::MergeFrom(CMsgAMSendEmail_PersonaNameReplacementToken const&)
 T CMsgAMSendEmail_PersonaNameReplacementToken::New() const
 T CMsgAMSendEmail_PersonaNameReplacementToken::SerializeWithCachedSizesToArray(unsigned char*) const
 T CMsgAMSendEmail_PersonaNameReplacementToken::SetCachedSize(int) const
 T CMsgAMSendEmail_PersonaNameReplacementToken::~CMsgAMSendEmail_PersonaNameReplacementToken()
 T CMsgAMSendEmail_ReplacementToken::ByteSize() const
 T CMsgAMSendEmail_ReplacementToken::Clear()
 T CMsgAMSendEmail_ReplacementToken::GetCachedSize() const
 T CMsgAMSendEmail_ReplacementToken::GetMetadata() const
 T CMsgAMSendEmail_ReplacementToken::IsInitialized() const
 T CMsgAMSendEmail_ReplacementToken::MergeFrom(CMsgAMSendEmail_ReplacementToken const&)
 T CMsgAMSendEmail_ReplacementToken::New() const
 T CMsgAMSendEmail_ReplacementToken::SerializeWithCachedSizesToArray(unsigned char*) const
 T CMsgAMSendEmail_ReplacementToken::SetCachedSize(int) const
 T CMsgAMSendEmail_ReplacementToken::SharedDtor()
 T CMsgAMSendEmail_ReplacementToken::~CMsgAMSendEmail_ReplacementToken()
 T CMsgAcceptInvite::ByteSize() const
 T CMsgAcceptInvite::Clear()
 T CMsgAcceptInvite::GetCachedSize() const
 T CMsgAcceptInvite::GetMetadata() const
 T CMsgAcceptInvite::IsInitialized() const
 T CMsgAcceptInvite::MergeFrom(CMsgAcceptInvite const&)
 T CMsgAcceptInvite::New() const
 T CMsgAcceptInvite::SerializeWithCachedSizesToArray(unsigned char*) const
 T CMsgAcceptInvite::SetCachedSize(int) const
 T CMsgAcceptInvite::~CMsgAcceptInvite()
 T CMsgAcceptInviteResponse::ByteSize() const
 T CMsgAcceptInviteResponse::Clear()
 T CMsgAcceptInviteResponse::GetCachedSize() const
 T CMsgAcceptInviteResponse::GetMetadata() const
 T CMsgAcceptInviteResponse::IsInitialized() const
 T CMsgAcceptInviteResponse::MergeFrom(CMsgAcceptInviteResponse const&)
 T CMsgAcceptInviteResponse::New() const
 T CMsgAcceptInviteResponse::SerializeWithCachedSizesToArray(unsigned char*) const
 T CMsgAcceptInviteResponse::SetCachedSize(int) const
 T CMsgAcceptInviteResponse::~CMsgAcceptInviteResponse()
 T CMsgAcknowledgeXP::ByteSize() const
 T CMsgAcknowledgeXP::Clear()
 T CMsgAcknowledgeXP::GetCachedSize() const
 T CMsgAcknowledgeXP::GetMetadata() const
 T CMsgAcknowledgeXP::IsInitialized() const
 T CMsgAcknowledgeXP::MergeFrom(CMsgAcknowledgeXP const&)
 T CMsgAcknowledgeXP::New() const
 T CMsgAcknowledgeXP::SerializeWithCachedSizesToArray(unsigned char*) const
 T CMsgAcknowledgeXP::SetCachedSize(int) const
 T CMsgAcknowledgeXP::~CMsgAcknowledgeXP()
 T CMsgAdjustItemEquippedState::ByteSize() const
 T CMsgAdjustItemEquippedState::Clear()
 T CMsgAdjustItemEquippedState::GetCachedSize() const
 T CMsgAdjustItemEquippedState::GetMetadata() const
 T CMsgAdjustItemEquippedState::IsInitialized() const
 T CMsgAdjustItemEquippedState::MergeFrom(CMsgAdjustItemEquippedState const&)
 T CMsgAdjustItemEquippedState::New() const
 T CMsgAdjustItemEquippedState::SerializeWithCachedSizesToArray(unsigned char*) const
 T CMsgAdjustItemEquippedState::SetCachedSize(int) const
 T CMsgAdjustItemEquippedState::~CMsgAdjustItemEquippedState()
 T CMsgApplyAutograph::ByteSize() const
 T CMsgApplyAutograph::Clear()
 T CMsgApplyAutograph::GetCachedSize() const
 T CMsgApplyAutograph::GetMetadata() const
 T CMsgApplyAutograph::IsInitialized() const
 T CMsgApplyAutograph::MergeFrom(CMsgApplyAutograph const&)
 T CMsgApplyAutograph::New() const
 T CMsgApplyAutograph::SerializeWithCachedSizesToArray(unsigned char*) const
 T CMsgApplyAutograph::SetCachedSize(int) const
 T CMsgApplyAutograph::~CMsgApplyAutograph()
 T CMsgApplyStrangeCountTransfer::ByteSize() const
 T CMsgApplyStrangeCountTransfer::Clear()
 T CMsgApplyStrangeCountTransfer::GetCachedSize() const
 T CMsgApplyStrangeCountTransfer::GetMetadata() const
 T CMsgApplyStrangeCountTransfer::IsInitialized() const
 T CMsgApplyStrangeCountTransfer::MergeFrom(CMsgApplyStrangeCountTransfer const&)
 T CMsgApplyStrangeCountTransfer::New() const
 T CMsgApplyStrangeCountTransfer::SerializeWithCachedSizesToArray(unsigned char*) const
 T CMsgApplyStrangeCountTransfer::SetCachedSize(int) const
 T CMsgApplyStrangeCountTransfer::~CMsgApplyStrangeCountTransfer()
 T CMsgApplyStrangePart::ByteSize() const
 T CMsgApplyStrangePart::Clear()
 T CMsgApplyStrangePart::GetCachedSize() const
 T CMsgApplyStrangePart::GetMetadata() const
 T CMsgApplyStrangePart::IsInitialized() const
 T CMsgApplyStrangePart::MergeFrom(CMsgApplyStrangePart const&)
 T CMsgApplyStrangePart::New() const
 T CMsgApplyStrangePart::SerializeWithCachedSizesToArray(unsigned char*) const
 T CMsgApplyStrangePart::SetCachedSize(int) const
 T CMsgApplyStrangePart::~CMsgApplyStrangePart()
 T CMsgApplyStrangeRestriction::ByteSize() const
 T CMsgApplyStrangeRestriction::Clear()
 T CMsgApplyStrangeRestriction::GetCachedSize() const
 T CMsgApplyStrangeRestriction::GetMetadata() const
 T CMsgApplyStrangeRestriction::IsInitialized() const
 T CMsgApplyStrangeRestriction::MergeFrom(CMsgApplyStrangeRestriction const&)
 T CMsgApplyStrangeRestriction::New() const
 T CMsgApplyStrangeRestriction::SerializeWithCachedSizesToArray(unsigned char*) const
 T CMsgApplyStrangeRestriction::SetCachedSize(int) const
 T CMsgApplyStrangeRestriction::~CMsgApplyStrangeRestriction()
 T CMsgApplyToolToBaseItem::ByteSize() const
 T CMsgApplyToolToBaseItem::Clear()
 T CMsgApplyToolToBaseItem::GetCachedSize() const
 T CMsgApplyToolToBaseItem::GetMetadata() const
 T CMsgApplyToolToBaseItem::IsInitialized() const
 T CMsgApplyToolToBaseItem::MergeFrom(CMsgApplyToolToBaseItem const&)
 T CMsgApplyToolToBaseItem::New() const
 T CMsgApplyToolToBaseItem::SerializeWithCachedSizesToArray(unsigned char*) const
 T CMsgApplyToolToBaseItem::SetCachedSize(int) const
 T CMsgApplyToolToBaseItem::~CMsgApplyToolToBaseItem()
 T CMsgApplyToolToItem::ByteSize() const
 T CMsgApplyToolToItem::Clear()
 T CMsgApplyToolToItem::GetCachedSize() const
 T CMsgApplyToolToItem::GetMetadata() const
 T CMsgApplyToolToItem::IsInitialized() const
 T CMsgApplyToolToItem::MergeFrom(CMsgApplyToolToItem const&)
 T CMsgApplyToolToItem::New() const
 T CMsgApplyToolToItem::SerializeWithCachedSizesToArray(unsigned char*) const
 T CMsgApplyToolToItem::SetCachedSize(int) const
 T CMsgApplyToolToItem::~CMsgApplyToolToItem()
 T CMsgApplyUpgradeCard::ByteSize() const
 T CMsgApplyUpgradeCard::Clear()
 T CMsgApplyUpgradeCard::GetCachedSize() const
 T CMsgApplyUpgradeCard::GetMetadata() const
 T CMsgApplyUpgradeCard::IsInitialized() const
 T CMsgApplyUpgradeCard::MergeFrom(CMsgApplyUpgradeCard const&)
 T CMsgApplyUpgradeCard::New() const
 T CMsgApplyUpgradeCard::SerializeWithCachedSizesToArray(unsigned char*) const
 T CMsgApplyUpgradeCard::SetCachedSize(int) const
 T CMsgApplyUpgradeCard::~CMsgApplyUpgradeCard()
 T CMsgCasualMatchmakingSearchCriteria::ByteSize() const
 T CMsgCasualMatchmakingSearchCriteria::CMsgCasualMatchmakingSearchCriteria()
 T CMsgCasualMatchmakingSearchCriteria::Clear()
 T CMsgCasualMatchmakingSearchCriteria::CopyFrom(CMsgCasualMatchmakingSearchCriteria const&)
 T CMsgCasualMatchmakingSearchCriteria::GetCachedSize() const
 T CMsgCasualMatchmakingSearchCriteria::GetMetadata() const
 T CMsgCasualMatchmakingSearchCriteria::IsInitialized() const
 T CMsgCasualMatchmakingSearchCriteria::MergeFrom(CMsgCasualMatchmakingSearchCriteria const&)
 T CMsgCasualMatchmakingSearchCriteria::New() const
 T CMsgCasualMatchmakingSearchCriteria::SerializeWithCachedSizesToArray(unsigned char*) const
 T CMsgCasualMatchmakingSearchCriteria::SetCachedSize(int) const
 T CMsgCasualMatchmakingSearchCriteria::~CMsgCasualMatchmakingSearchCriteria()
 T CMsgClientGoodbye::ByteSize() const
 T CMsgClientGoodbye::Clear()
 T CMsgClientGoodbye::GetCachedSize() const
 T CMsgClientGoodbye::GetMetadata() const
 T CMsgClientGoodbye::IsInitialized() const
 T CMsgClientGoodbye::MergeFrom(CMsgClientGoodbye const&)
 T CMsgClientGoodbye::New() const
 T CMsgClientGoodbye::SerializeWithCachedSizesToArray(unsigned char*) const
 T CMsgClientGoodbye::SetCachedSize(int) const
 T CMsgClientGoodbye::~CMsgClientGoodbye()
 T CMsgClientHello::ByteSize() const
 T CMsgClientHello::Clear()
 T CMsgClientHello::GetCachedSize() const
 T CMsgClientHello::GetMetadata() const
 T CMsgClientHello::IsInitialized() const
 T CMsgClientHello::MergeFrom(CMsgClientHello const&)
 T CMsgClientHello::New() const
 T CMsgClientHello::SerializeWithCachedSizesToArray(unsigned char*) const
 T CMsgClientHello::SetCachedSize(int) const
 T CMsgClientHello::~CMsgClientHello()
 T CMsgClientWelcome::ByteSize() const
 T CMsgClientWelcome::Clear()
 T CMsgClientWelcome::GetCachedSize() const
 T CMsgClientWelcome::GetMetadata() const
 T CMsgClientWelcome::IsInitialized() const
 T CMsgClientWelcome::MergeFrom(CMsgClientWelcome const&)
 T CMsgClientWelcome::New() const
 T CMsgClientWelcome::SerializeWithCachedSizesToArray(unsigned char*) const
 T CMsgClientWelcome::SetCachedSize(int) const
 T CMsgClientWelcome::~CMsgClientWelcome()
 T CMsgConVarValue::ByteSize() const
 T CMsgConVarValue::CMsgConVarValue()
 T CMsgConVarValue::Clear()
 T CMsgConVarValue::GetCachedSize() const
 T CMsgConVarValue::GetMetadata() const
 T CMsgConVarValue::IsInitialized() const
 T CMsgConVarValue::MergeFrom(CMsgConVarValue const&)
 T CMsgConVarValue::New() const
 T CMsgConVarValue::SerializeWithCachedSizesToArray(unsigned char*) const
 T CMsgConVarValue::SetCachedSize(int) const
 T CMsgConVarValue::SharedDtor()
 T CMsgConVarValue::default_instance()
 T CMsgConVarValue::descriptor()
 T CMsgConVarValue::~CMsgConVarValue()
 T CMsgConnectionStatus::ByteSize() const
 T CMsgConnectionStatus::Clear()
 T CMsgConnectionStatus::GetCachedSize() const
 T CMsgConnectionStatus::GetMetadata() const
 T CMsgConnectionStatus::IsInitialized() const
 T CMsgConnectionStatus::MergeFrom(CMsgConnectionStatus const&)
 T CMsgConnectionStatus::New() const
 T CMsgConnectionStatus::SerializeWithCachedSizesToArray(unsigned char*) const
 T CMsgConnectionStatus::SetCachedSize(int) const
 T CMsgConnectionStatus::~CMsgConnectionStatus()
 T CMsgConsumableExhausted::ByteSize() const
 T CMsgConsumableExhausted::Clear()
 T CMsgConsumableExhausted::GetCachedSize() const
 T CMsgConsumableExhausted::GetMetadata() const
 T CMsgConsumableExhausted::IsInitialized() const
 T CMsgConsumableExhausted::MergeFrom(CMsgConsumableExhausted const&)
 T CMsgConsumableExhausted::New() const
 T CMsgConsumableExhausted::SerializeWithCachedSizesToArray(unsigned char*) const
 T CMsgConsumableExhausted::SetCachedSize(int) const
 T CMsgConsumableExhausted::~CMsgConsumableExhausted()
 T CMsgCraftCollectionUpgrade::ByteSize() const
 T CMsgCraftCollectionUpgrade::Clear()
 T CMsgCraftCollectionUpgrade::GetCachedSize() const
 T CMsgCraftCollectionUpgrade::GetMetadata() const
 T CMsgCraftCollectionUpgrade::IsInitialized() const
 T CMsgCraftCollectionUpgrade::MergeFrom(CMsgCraftCollectionUpgrade const&)
 T CMsgCraftCollectionUpgrade::New() const
 T CMsgCraftCollectionUpgrade::SerializeWithCachedSizesToArray(unsigned char*) const
 T CMsgCraftCollectionUpgrade::SetCachedSize(int) const
 T CMsgCraftCollectionUpgrade::~CMsgCraftCollectionUpgrade()
 T CMsgCraftCommonStatClock::ByteSize() const
 T CMsgCraftCommonStatClock::Clear()
 T CMsgCraftCommonStatClock::GetCachedSize() const
 T CMsgCraftCommonStatClock::GetMetadata() const
 T CMsgCraftCommonStatClock::IsInitialized() const
 T CMsgCraftCommonStatClock::MergeFrom(CMsgCraftCommonStatClock const&)
 T CMsgCraftCommonStatClock::New() const
 T CMsgCraftCommonStatClock::SerializeWithCachedSizesToArray(unsigned char*) const
 T CMsgCraftCommonStatClock::SetCachedSize(int) const
 T CMsgCraftCommonStatClock::~CMsgCraftCommonStatClock()
 T CMsgCraftHalloweenOffering::ByteSize() const
 T CMsgCraftHalloweenOffering::Clear()
 T CMsgCraftHalloweenOffering::GetCachedSize() const
 T CMsgCraftHalloweenOffering::GetMetadata() const
 T CMsgCraftHalloweenOffering::IsInitialized() const
 T CMsgCraftHalloweenOffering::MergeFrom(CMsgCraftHalloweenOffering const&)
 T CMsgCraftHalloweenOffering::New() const
 T CMsgCraftHalloweenOffering::SerializeWithCachedSizesToArray(unsigned char*) const
 T CMsgCraftHalloweenOffering::SetCachedSize(int) const
 T CMsgCraftHalloweenOffering::~CMsgCraftHalloweenOffering()
 T CMsgCraftingResponse::ByteSize() const
 T CMsgCraftingResponse::Clear()
 T CMsgCraftingResponse::GetCachedSize() const
 T CMsgCraftingResponse::GetMetadata() const
 T CMsgCraftingResponse::IsInitialized() const
 T CMsgCraftingResponse::MergeFrom(CMsgCraftingResponse const&)
 T CMsgCraftingResponse::New() const
 T CMsgCraftingResponse::SerializeWithCachedSizesToArray(unsigned char*) const
 T CMsgCraftingResponse::SetCachedSize(int) const
 T CMsgCraftingResponse::~CMsgCraftingResponse()
 T CMsgCreateOrUpdateParty::ByteSize() const
 T CMsgCreateOrUpdateParty::Clear()
 T CMsgCreateOrUpdateParty::GetCachedSize() const
 T CMsgCreateOrUpdateParty::GetMetadata() const
 T CMsgCreateOrUpdateParty::IsInitialized() const
 T CMsgCreateOrUpdateParty::MergeFrom(CMsgCreateOrUpdateParty const&)
 T CMsgCreateOrUpdateParty::New() const
 T CMsgCreateOrUpdateParty::SerializeWithCachedSizesToArray(unsigned char*) const
 T CMsgCreateOrUpdateParty::SetCachedSize(int) const
 T CMsgCreateOrUpdateParty::~CMsgCreateOrUpdateParty()
 T CMsgCreateOrUpdatePartyReply::ByteSize() const
 T CMsgCreateOrUpdatePartyReply::Clear()
 T CMsgCreateOrUpdatePartyReply::GetCachedSize() const
 T CMsgCreateOrUpdatePartyReply::GetMetadata() const
 T CMsgCreateOrUpdatePartyReply::IsInitialized() const
 T CMsgCreateOrUpdatePartyReply::MergeFrom(CMsgCreateOrUpdatePartyReply const&)
 T CMsgCreateOrUpdatePartyReply::New() const
 T CMsgCreateOrUpdatePartyReply::SerializeWithCachedSizesToArray(unsigned char*) const
 T CMsgCreateOrUpdatePartyReply::SetCachedSize(int) const
 T CMsgCreateOrUpdatePartyReply::~CMsgCreateOrUpdatePartyReply()
 T CMsgDeliverGiftResponseGiver::ByteSize() const
 T CMsgDeliverGiftResponseGiver::Clear()
 T CMsgDeliverGiftResponseGiver::GetCachedSize() const
 T CMsgDeliverGiftResponseGiver::GetMetadata() const
 T CMsgDeliverGiftResponseGiver::IsInitialized() const
 T CMsgDeliverGiftResponseGiver::MergeFrom(CMsgDeliverGiftResponseGiver const&)
 T CMsgDeliverGiftResponseGiver::New() const
 T CMsgDeliverGiftResponseGiver::SerializeWithCachedSizesToArray(unsigned char*) const
 T CMsgDeliverGiftResponseGiver::SetCachedSize(int) const
 T CMsgDeliverGiftResponseGiver::~CMsgDeliverGiftResponseGiver()
 T CMsgDevDebugRollLootRequest::ByteSize() const
 T CMsgDevDebugRollLootRequest::Clear()
 T CMsgDevDebugRollLootRequest::GetCachedSize() const
 T CMsgDevDebugRollLootRequest::GetMetadata() const
 T CMsgDevDebugRollLootRequest::IsInitialized() const
 T CMsgDevDebugRollLootRequest::MergeFrom(CMsgDevDebugRollLootRequest const&)
 T CMsgDevDebugRollLootRequest::New() const
 T CMsgDevDebugRollLootRequest::SerializeWithCachedSizesToArray(unsigned char*) const
 T CMsgDevDebugRollLootRequest::SetCachedSize(int) const
 T CMsgDevDebugRollLootRequest::~CMsgDevDebugRollLootRequest()
 T CMsgDevNewItemRequest::ByteSize() const
 T CMsgDevNewItemRequest::Clear()
 T CMsgDevNewItemRequest::GetCachedSize() const
 T CMsgDevNewItemRequest::GetMetadata() const
 T CMsgDevNewItemRequest::IsInitialized() const
 T CMsgDevNewItemRequest::MergeFrom(CMsgDevNewItemRequest const&)
 T CMsgDevNewItemRequest::New() const
 T CMsgDevNewItemRequest::SerializeWithCachedSizesToArray(unsigned char*) const
 T CMsgDevNewItemRequest::SetCachedSize(int) const
 T CMsgDevNewItemRequest::~CMsgDevNewItemRequest()
 T CMsgEconPlayerStrangeCountAdjustment::ByteSize() const
 T CMsgEconPlayerStrangeCountAdjustment::Clear()
 T CMsgEconPlayerStrangeCountAdjustment::GetCachedSize() const
 T CMsgEconPlayerStrangeCountAdjustment::GetMetadata() const
 T CMsgEconPlayerStrangeCountAdjustment::IsInitialized() const
 T CMsgEconPlayerStrangeCountAdjustment::MergeFrom(CMsgEconPlayerStrangeCountAdjustment const&)
 T CMsgEconPlayerStrangeCountAdjustment::New() const
 T CMsgEconPlayerStrangeCountAdjustment::SerializeWithCachedSizesToArray(unsigned char*) const
 T CMsgEconPlayerStrangeCountAdjustment::SetCachedSize(int) const
 T CMsgEconPlayerStrangeCountAdjustment::~CMsgEconPlayerStrangeCountAdjustment()
 T CMsgEconPlayerStrangeCountAdjustment_CStrangeCountAdjustment::ByteSize() const
 T CMsgEconPlayerStrangeCountAdjustment_CStrangeCountAdjustment::Clear()
 T CMsgEconPlayerStrangeCountAdjustment_CStrangeCountAdjustment::GetCachedSize() const
 T CMsgEconPlayerStrangeCountAdjustment_CStrangeCountAdjustment::GetMetadata() const
 T CMsgEconPlayerStrangeCountAdjustment_CStrangeCountAdjustment::IsInitialized() const
 T CMsgEconPlayerStrangeCountAdjustment_CStrangeCountAdjustment::MergeFrom(CMsgEconPlayerStrangeCountAdjustment_CStrangeCountAdjustment const&)
 T CMsgEconPlayerStrangeCountAdjustment_CStrangeCountAdjustment::New() const
 T CMsgEconPlayerStrangeCountAdjustment_CStrangeCountAdjustment::SerializeWithCachedSizesToArray(unsigned char*) const
 T CMsgEconPlayerStrangeCountAdjustment_CStrangeCountAdjustment::SetCachedSize(int) const
 T CMsgEconPlayerStrangeCountAdjustment_CStrangeCountAdjustment::~CMsgEconPlayerStrangeCountAdjustment_CStrangeCountAdjustment()
 T CMsgExitMatchmaking::ByteSize() const
 T CMsgExitMatchmaking::Clear()
 T CMsgExitMatchmaking::GetCachedSize() const
 T CMsgExitMatchmaking::GetMetadata() const
 T CMsgExitMatchmaking::IsInitialized() const
 T CMsgExitMatchmaking::MergeFrom(CMsgExitMatchmaking const&)
 T CMsgExitMatchmaking::New() const
 T CMsgExitMatchmaking::SerializeWithCachedSizesToArray(unsigned char*) const
 T CMsgExitMatchmaking::SetCachedSize(int) const
 T CMsgExitMatchmaking::~CMsgExitMatchmaking()
 T CMsgFulfillDynamicRecipeComponent::ByteSize() const
 T CMsgFulfillDynamicRecipeComponent::Clear()
 T CMsgFulfillDynamicRecipeComponent::GetCachedSize() const
 T CMsgFulfillDynamicRecipeComponent::GetMetadata() const
 T CMsgFulfillDynamicRecipeComponent::IsInitialized() const
 T CMsgFulfillDynamicRecipeComponent::MergeFrom(CMsgFulfillDynamicRecipeComponent const&)
 T CMsgFulfillDynamicRecipeComponent::New() const
 T CMsgFulfillDynamicRecipeComponent::SerializeWithCachedSizesToArray(unsigned char*) const
 T CMsgFulfillDynamicRecipeComponent::SetCachedSize(int) const
 T CMsgFulfillDynamicRecipeComponent::~CMsgFulfillDynamicRecipeComponent()
 T CMsgGCBannedWordListRequest::ByteSize() const
 T CMsgGCBannedWordListRequest::Clear()
 T CMsgGCBannedWordListRequest::GetCachedSize() const
 T CMsgGCBannedWordListRequest::GetMetadata() const
 T CMsgGCBannedWordListRequest::IsInitialized() const
 T CMsgGCBannedWordListRequest::MergeFrom(CMsgGCBannedWordListRequest const&)
 T CMsgGCBannedWordListRequest::New() const
 T CMsgGCBannedWordListRequest::SerializeWithCachedSizesToArray(unsigned char*) const
 T CMsgGCBannedWordListRequest::SetCachedSize(int) const
 T CMsgGCBannedWordListRequest::~CMsgGCBannedWordListRequest()
 T CMsgGCCasualCriteriaStatsResponse::ByteSize() const
 T CMsgGCCasualCriteriaStatsResponse::Clear()
 T CMsgGCCasualCriteriaStatsResponse::GetCachedSize() const
 T CMsgGCCasualCriteriaStatsResponse::GetMetadata() const
 T CMsgGCCasualCriteriaStatsResponse::IsInitialized() const
 T CMsgGCCasualCriteriaStatsResponse::MergeFrom(CMsgGCCasualCriteriaStatsResponse const&)
 T CMsgGCCasualCriteriaStatsResponse::New() const
 T CMsgGCCasualCriteriaStatsResponse::SerializeWithCachedSizesToArray(unsigned char*) const
 T CMsgGCCasualCriteriaStatsResponse::SetCachedSize(int) const
 T CMsgGCCasualCriteriaStatsResponse::~CMsgGCCasualCriteriaStatsResponse()
 T CMsgGCCasualCriteriaStatsResponse_DataCenterPopulation::ByteSize() const
 T CMsgGCCasualCriteriaStatsResponse_DataCenterPopulation::Clear()
 T CMsgGCCasualCriteriaStatsResponse_DataCenterPopulation::GetCachedSize() const
 T CMsgGCCasualCriteriaStatsResponse_DataCenterPopulation::GetMetadata() const
 T CMsgGCCasualCriteriaStatsResponse_DataCenterPopulation::IsInitialized() const
 T CMsgGCCasualCriteriaStatsResponse_DataCenterPopulation::MergeFrom(CMsgGCCasualCriteriaStatsResponse_DataCenterPopulation const&)
 T CMsgGCCasualCriteriaStatsResponse_DataCenterPopulation::New() const
 T CMsgGCCasualCriteriaStatsResponse_DataCenterPopulation::SerializeWithCachedSizesToArray(unsigned char*) const
 T CMsgGCCasualCriteriaStatsResponse_DataCenterPopulation::SetCachedSize(int) const
 T CMsgGCCasualCriteriaStatsResponse_DataCenterPopulation::~CMsgGCCasualCriteriaStatsResponse_DataCenterPopulation()
 T CMsgGCCheckClanMembership::ByteSize() const
 T CMsgGCCheckClanMembership::Clear()
 T CMsgGCCheckClanMembership::GetCachedSize() const
 T CMsgGCCheckClanMembership::GetMetadata() const
 T CMsgGCCheckClanMembership::IsInitialized() const
 T CMsgGCCheckClanMembership::MergeFrom(CMsgGCCheckClanMembership const&)
 T CMsgGCCheckClanMembership::New() const
 T CMsgGCCheckClanMembership::SerializeWithCachedSizesToArray(unsigned char*) const
 T CMsgGCCheckClanMembership::SetCachedSize(int) const
 T CMsgGCCheckClanMembership::~CMsgGCCheckClanMembership()
 T CMsgGCCheckClanMembership_Response::ByteSize() const
 T CMsgGCCheckClanMembership_Response::Clear()
 T CMsgGCCheckClanMembership_Response::GetCachedSize() const
 T CMsgGCCheckClanMembership_Response::GetMetadata() const
 T CMsgGCCheckClanMembership_Response::IsInitialized() const
 T CMsgGCCheckClanMembership_Response::MergeFrom(CMsgGCCheckClanMembership_Response const&)
 T CMsgGCCheckClanMembership_Response::New() const
 T CMsgGCCheckClanMembership_Response::SerializeWithCachedSizesToArray(unsigned char*) const
 T CMsgGCCheckClanMembership_Response::SetCachedSize(int) const
 T CMsgGCCheckClanMembership_Response::~CMsgGCCheckClanMembership_Response()
 T CMsgGCCheckFriendship::ByteSize() const
 T CMsgGCCheckFriendship::Clear()
 T CMsgGCCheckFriendship::GetCachedSize() const
 T CMsgGCCheckFriendship::GetMetadata() const
 T CMsgGCCheckFriendship::IsInitialized() const
 T CMsgGCCheckFriendship::MergeFrom(CMsgGCCheckFriendship const&)
 T CMsgGCCheckFriendship::New() const
 T CMsgGCCheckFriendship::SerializeWithCachedSizesToArray(unsigned char*) const
 T CMsgGCCheckFriendship::SetCachedSize(int) const
 T CMsgGCCheckFriendship::~CMsgGCCheckFriendship()
 T CMsgGCCheckFriendship_Response::ByteSize() const
 T CMsgGCCheckFriendship_Response::Clear()
 T CMsgGCCheckFriendship_Response::GetCachedSize() const
 T CMsgGCCheckFriendship_Response::GetMetadata() const
 T CMsgGCCheckFriendship_Response::IsInitialized() const
 T CMsgGCCheckFriendship_Response::MergeFrom(CMsgGCCheckFriendship_Response const&)
 T CMsgGCCheckFriendship_Response::New() const
 T CMsgGCCheckFriendship_Response::SerializeWithCachedSizesToArray(unsigned char*) const
 T CMsgGCCheckFriendship_Response::SetCachedSize(int) const
 T CMsgGCCheckFriendship_Response::~CMsgGCCheckFriendship_Response()
 T CMsgGCClientDisplayNotification::ByteSize() const
 T CMsgGCClientDisplayNotification::Clear()
 T CMsgGCClientDisplayNotification::GetCachedSize() const
 T CMsgGCClientDisplayNotification::GetMetadata() const
 T CMsgGCClientDisplayNotification::IsInitialized() const
 T CMsgGCClientDisplayNotification::MergeFrom(CMsgGCClientDisplayNotification const&)
 T CMsgGCClientDisplayNotification::New() const
 T CMsgGCClientDisplayNotification::SerializeWithCachedSizesToArray(unsigned char*) const
 T CMsgGCClientDisplayNotification::SetCachedSize(int) const
 T CMsgGCClientDisplayNotification::SharedDtor()
 T CMsgGCClientDisplayNotification::~CMsgGCClientDisplayNotification()
 T CMsgGCClientMarketData::ByteSize() const
 T CMsgGCClientMarketData::Clear()
 T CMsgGCClientMarketData::GetCachedSize() const
 T CMsgGCClientMarketData::GetMetadata() const
 T CMsgGCClientMarketData::IsInitialized() const
 T CMsgGCClientMarketData::MergeFrom(CMsgGCClientMarketData const&)
 T CMsgGCClientMarketData::New() const
 T CMsgGCClientMarketData::SerializeWithCachedSizesToArray(unsigned char*) const
 T CMsgGCClientMarketData::SetCachedSize(int) const
 T CMsgGCClientMarketData::~CMsgGCClientMarketData()
 T CMsgGCClientMarketDataEntry::ByteSize() const
 T CMsgGCClientMarketDataEntry::Clear()
 T CMsgGCClientMarketDataEntry::GetCachedSize() const
 T CMsgGCClientMarketDataEntry::GetMetadata() const
 T CMsgGCClientMarketDataEntry::IsInitialized() const
 T CMsgGCClientMarketDataEntry::MergeFrom(CMsgGCClientMarketDataEntry const&)
 T CMsgGCClientMarketDataEntry::New() const
 T CMsgGCClientMarketDataEntry::SerializeWithCachedSizesToArray(unsigned char*) const
 T CMsgGCClientMarketDataEntry::SetCachedSize(int) const
 T CMsgGCClientMarketDataEntry::~CMsgGCClientMarketDataEntry()
 T CMsgGCClientMarketDataRequest::ByteSize() const
 T CMsgGCClientMarketDataRequest::Clear()
 T CMsgGCClientMarketDataRequest::GetCachedSize() const
 T CMsgGCClientMarketDataRequest::GetMetadata() const
 T CMsgGCClientMarketDataRequest::IsInitialized() const
 T CMsgGCClientMarketDataRequest::MergeFrom(CMsgGCClientMarketDataRequest const&)
 T CMsgGCClientMarketDataRequest::New() const
 T CMsgGCClientMarketDataRequest::SerializeWithCachedSizesToArray(unsigned char*) const
 T CMsgGCClientMarketDataRequest::SetCachedSize(int) const
 T CMsgGCClientMarketDataRequest::~CMsgGCClientMarketDataRequest()
 T CMsgGCClientPing::ByteSize() const
 T CMsgGCClientPing::Clear()
 T CMsgGCClientPing::GetCachedSize() const
 T CMsgGCClientPing::GetMetadata() const
 T CMsgGCClientPing::IsInitialized() const
 T CMsgGCClientPing::MergeFrom(CMsgGCClientPing const&)
 T CMsgGCClientPing::New() const
 T CMsgGCClientPing::SerializeWithCachedSizesToArray(unsigned char*) const
 T CMsgGCClientPing::SetCachedSize(int) const
 T CMsgGCClientPing::~CMsgGCClientPing()
 T CMsgGCCollectItem::ByteSize() const
 T CMsgGCCollectItem::Clear()
 T CMsgGCCollectItem::GetCachedSize() const
 T CMsgGCCollectItem::GetMetadata() const
 T CMsgGCCollectItem::IsInitialized() const
 T CMsgGCCollectItem::MergeFrom(CMsgGCCollectItem const&)
 T CMsgGCCollectItem::New() const
 T CMsgGCCollectItem::SerializeWithCachedSizesToArray(unsigned char*) const
 T CMsgGCCollectItem::SetCachedSize(int) const
 T CMsgGCCollectItem::~CMsgGCCollectItem()
 T CMsgGCDataCenterPing_Update::ByteSize() const
 T CMsgGCDataCenterPing_Update::Clear()
 T CMsgGCDataCenterPing_Update::GetCachedSize() const
 T CMsgGCDataCenterPing_Update::GetMetadata() const
 T CMsgGCDataCenterPing_Update::IsInitialized() const
 T CMsgGCDataCenterPing_Update::MergeFrom(CMsgGCDataCenterPing_Update const&)
 T CMsgGCDataCenterPing_Update::New() const
 T CMsgGCDataCenterPing_Update::SerializeWithCachedSizesToArray(unsigned char*) const
 T CMsgGCDataCenterPing_Update::SetCachedSize(int) const
 T CMsgGCDataCenterPing_Update::~CMsgGCDataCenterPing_Update()
 T CMsgGCDataCenterPing_Update_PingEntry::ByteSize() const
 T CMsgGCDataCenterPing_Update_PingEntry::Clear()
 T CMsgGCDataCenterPing_Update_PingEntry::GetCachedSize() const
 T CMsgGCDataCenterPing_Update_PingEntry::GetMetadata() const
 T CMsgGCDataCenterPing_Update_PingEntry::IsInitialized() const
 T CMsgGCDataCenterPing_Update_PingEntry::MergeFrom(CMsgGCDataCenterPing_Update_PingEntry const&)
 T CMsgGCDataCenterPing_Update_PingEntry::New() const
 T CMsgGCDataCenterPing_Update_PingEntry::SerializeWithCachedSizesToArray(unsigned char*) const
 T CMsgGCDataCenterPing_Update_PingEntry::SetCachedSize(int) const
 T CMsgGCDataCenterPing_Update_PingEntry::~CMsgGCDataCenterPing_Update_PingEntry()
 T CMsgGCError::ByteSize() const
 T CMsgGCError::Clear()
 T CMsgGCError::GetCachedSize() const
 T CMsgGCError::GetMetadata() const
 T CMsgGCError::IsInitialized() const
 T CMsgGCError::MergeFrom(CMsgGCError const&)
 T CMsgGCError::New() const
 T CMsgGCError::SerializeWithCachedSizesToArray(unsigned char*) const
 T CMsgGCError::SetCachedSize(int) const
 T CMsgGCError::~CMsgGCError()
 T CMsgGCGetCommandList::ByteSize() const
 T CMsgGCGetCommandList::Clear()
 T CMsgGCGetCommandList::GetCachedSize() const
 T CMsgGCGetCommandList::GetMetadata() const
 T CMsgGCGetCommandList::IsInitialized() const
 T CMsgGCGetCommandList::MergeFrom(CMsgGCGetCommandList const&)
 T CMsgGCGetCommandList::New() const
 T CMsgGCGetCommandList::SerializeWithCachedSizesToArray(unsigned char*) const
 T CMsgGCGetCommandList::SetCachedSize(int) const
 T CMsgGCGetCommandList::~CMsgGCGetCommandList()
 T CMsgGCGetCommandListResponse::ByteSize() const
 T CMsgGCGetCommandListResponse::Clear()
 T CMsgGCGetCommandListResponse::GetCachedSize() const
 T CMsgGCGetCommandListResponse::GetMetadata() const
 T CMsgGCGetCommandListResponse::IsInitialized() const
 T CMsgGCGetCommandListResponse::MergeFrom(CMsgGCGetCommandListResponse const&)
 T CMsgGCGetCommandListResponse::New() const
 T CMsgGCGetCommandListResponse::SerializeWithCachedSizesToArray(unsigned char*) const
 T CMsgGCGetCommandListResponse::SetCachedSize(int) const
 T CMsgGCGetCommandListResponse::~CMsgGCGetCommandListResponse()
 T CMsgGCGetEmailTemplate::ByteSize() const
 T CMsgGCGetEmailTemplate::Clear()
 T CMsgGCGetEmailTemplate::GetCachedSize() const
 T CMsgGCGetEmailTemplate::GetMetadata() const
 T CMsgGCGetEmailTemplate::IsInitialized() const
 T CMsgGCGetEmailTemplate::MergeFrom(CMsgGCGetEmailTemplate const&)
 T CMsgGCGetEmailTemplate::New() const
 T CMsgGCGetEmailTemplate::SerializeWithCachedSizesToArray(unsigned char*) const
 T CMsgGCGetEmailTemplate::SetCachedSize(int) const
 T CMsgGCGetEmailTemplate::~CMsgGCGetEmailTemplate()
 T CMsgGCGetEmailTemplateResponse::ByteSize() const
 T CMsgGCGetEmailTemplateResponse::Clear()
 T CMsgGCGetEmailTemplateResponse::GetCachedSize() const
 T CMsgGCGetEmailTemplateResponse::GetMetadata() const
 T CMsgGCGetEmailTemplateResponse::IsInitialized() const
 T CMsgGCGetEmailTemplateResponse::MergeFrom(CMsgGCGetEmailTemplateResponse const&)
 T CMsgGCGetEmailTemplateResponse::New() const
 T CMsgGCGetEmailTemplateResponse::SerializeWithCachedSizesToArray(unsigned char*) const
 T CMsgGCGetEmailTemplateResponse::SetCachedSize(int) const
 T CMsgGCGetEmailTemplateResponse::~CMsgGCGetEmailTemplateResponse()
 T CMsgGCGetPartnerAccountLink::ByteSize() const
 T CMsgGCGetPartnerAccountLink::Clear()
 T CMsgGCGetPartnerAccountLink::GetCachedSize() const
 T CMsgGCGetPartnerAccountLink::GetMetadata() const
 T CMsgGCGetPartnerAccountLink::IsInitialized() const
 T CMsgGCGetPartnerAccountLink::MergeFrom(CMsgGCGetPartnerAccountLink const&)
 T CMsgGCGetPartnerAccountLink::New() const
 T CMsgGCGetPartnerAccountLink::SerializeWithCachedSizesToArray(unsigned char*) const
 T CMsgGCGetPartnerAccountLink::SetCachedSize(int) const
 T CMsgGCGetPartnerAccountLink::~CMsgGCGetPartnerAccountLink()
 T CMsgGCGetPartnerAccountLink_Response::ByteSize() const
 T CMsgGCGetPartnerAccountLink_Response::Clear()
 T CMsgGCGetPartnerAccountLink_Response::GetCachedSize() const
 T CMsgGCGetPartnerAccountLink_Response::GetMetadata() const
 T CMsgGCGetPartnerAccountLink_Response::IsInitialized() const
 T CMsgGCGetPartnerAccountLink_Response::MergeFrom(CMsgGCGetPartnerAccountLink_Response const&)
 T CMsgGCGetPartnerAccountLink_Response::New() const
 T CMsgGCGetPartnerAccountLink_Response::SerializeWithCachedSizesToArray(unsigned char*) const
 T CMsgGCGetPartnerAccountLink_Response::SetCachedSize(int) const
 T CMsgGCGetPartnerAccountLink_Response::~CMsgGCGetPartnerAccountLink_Response()
 T CMsgGCGetPersonaNames::ByteSize() const
 T CMsgGCGetPersonaNames::Clear()
 T CMsgGCGetPersonaNames::GetCachedSize() const
 T CMsgGCGetPersonaNames::GetMetadata() const
 T CMsgGCGetPersonaNames::IsInitialized() const
 T CMsgGCGetPersonaNames::MergeFrom(CMsgGCGetPersonaNames const&)
 T CMsgGCGetPersonaNames::New() const
 T CMsgGCGetPersonaNames::SerializeWithCachedSizesToArray(unsigned char*) const
 T CMsgGCGetPersonaNames::SetCachedSize(int) const
 T CMsgGCGetPersonaNames::~CMsgGCGetPersonaNames()
 T CMsgGCGetPersonaNames_Response::ByteSize() const
 T CMsgGCGetPersonaNames_Response::Clear()
 T CMsgGCGetPersonaNames_Response::GetCachedSize() const
 T CMsgGCGetPersonaNames_Response::GetMetadata() const
 T CMsgGCGetPersonaNames_Response::IsInitialized() const
 T CMsgGCGetPersonaNames_Response::MergeFrom(CMsgGCGetPersonaNames_Response const&)
 T CMsgGCGetPersonaNames_Response::New() const
 T CMsgGCGetPersonaNames_Response::SerializeWithCachedSizesToArray(unsigned char*) const
 T CMsgGCGetPersonaNames_Response::SetCachedSize(int) const
 T CMsgGCGetPersonaNames_Response::~CMsgGCGetPersonaNames_Response()
 T CMsgGCGetPersonaNames_Response_PersonaName::ByteSize() const
 T CMsgGCGetPersonaNames_Response_PersonaName::Clear()
 T CMsgGCGetPersonaNames_Response_PersonaName::GetCachedSize() const
 T CMsgGCGetPersonaNames_Response_PersonaName::GetMetadata() const
 T CMsgGCGetPersonaNames_Response_PersonaName::IsInitialized() const
 T CMsgGCGetPersonaNames_Response_PersonaName::MergeFrom(CMsgGCGetPersonaNames_Response_PersonaName const&)
 T CMsgGCGetPersonaNames_Response_PersonaName::New() const
 T CMsgGCGetPersonaNames_Response_PersonaName::SerializeWithCachedSizesToArray(unsigned char*) const
 T CMsgGCGetPersonaNames_Response_PersonaName::SetCachedSize(int) const
 T CMsgGCGetPersonaNames_Response_PersonaName::~CMsgGCGetPersonaNames_Response_PersonaName()
 T CMsgGCGiftedItems::ByteSize() const
 T CMsgGCGiftedItems::Clear()
 T CMsgGCGiftedItems::GetCachedSize() const
 T CMsgGCGiftedItems::GetMetadata() const
 T CMsgGCGiftedItems::IsInitialized() const
 T CMsgGCGiftedItems::MergeFrom(CMsgGCGiftedItems const&)
 T CMsgGCGiftedItems::New() const
 T CMsgGCGiftedItems::SerializeWithCachedSizesToArray(unsigned char*) const
 T CMsgGCGiftedItems::SetCachedSize(int) const
 T CMsgGCGiftedItems::~CMsgGCGiftedItems()
 T CMsgGCHAccountLockStatusChange::ByteSize() const
 T CMsgGCHAccountLockStatusChange::Clear()
 T CMsgGCHAccountLockStatusChange::GetCachedSize() const
 T CMsgGCHAccountLockStatusChange::GetMetadata() const
 T CMsgGCHAccountLockStatusChange::IsInitialized() const
 T CMsgGCHAccountLockStatusChange::MergeFrom(CMsgGCHAccountLockStatusChange const&)
 T CMsgGCHAccountLockStatusChange::New() const
 T CMsgGCHAccountLockStatusChange::SerializeWithCachedSizesToArray(unsigned char*) const
 T CMsgGCHAccountLockStatusChange::SetCachedSize(int) const
 T CMsgGCHAccountLockStatusChange::~CMsgGCHAccountLockStatusChange()
 T CMsgGCHAccountPhoneNumberChange::ByteSize() const
 T CMsgGCHAccountPhoneNumberChange::Clear()
 T CMsgGCHAccountPhoneNumberChange::GetCachedSize() const
 T CMsgGCHAccountPhoneNumberChange::GetMetadata() const
 T CMsgGCHAccountPhoneNumberChange::IsInitialized() const
 T CMsgGCHAccountPhoneNumberChange::MergeFrom(CMsgGCHAccountPhoneNumberChange const&)
 T CMsgGCHAccountPhoneNumberChange::New() const
 T CMsgGCHAccountPhoneNumberChange::SerializeWithCachedSizesToArray(unsigned char*) const
 T CMsgGCHAccountPhoneNumberChange::SetCachedSize(int) const
 T CMsgGCHAccountPhoneNumberChange::~CMsgGCHAccountPhoneNumberChange()
 T CMsgGCHAccountTradeBanStatusChange::ByteSize() const
 T CMsgGCHAccountTradeBanStatusChange::Clear()
 T CMsgGCHAccountTradeBanStatusChange::GetCachedSize() const
 T CMsgGCHAccountTradeBanStatusChange::GetMetadata() const
 T CMsgGCHAccountTradeBanStatusChange::IsInitialized() const
 T CMsgGCHAccountTradeBanStatusChange::MergeFrom(CMsgGCHAccountTradeBanStatusChange const&)
 T CMsgGCHAccountTradeBanStatusChange::New() const
 T CMsgGCHAccountTradeBanStatusChange::SerializeWithCachedSizesToArray(unsigned char*) const
 T CMsgGCHAccountTradeBanStatusChange::SetCachedSize(int) const
 T CMsgGCHAccountTradeBanStatusChange::~CMsgGCHAccountTradeBanStatusChange()
 T CMsgGCHAccountTwoFactorChange::ByteSize() const
 T CMsgGCHAccountTwoFactorChange::Clear()
 T CMsgGCHAccountTwoFactorChange::GetCachedSize() const
 T CMsgGCHAccountTwoFactorChange::GetMetadata() const
 T CMsgGCHAccountTwoFactorChange::IsInitialized() const
 T CMsgGCHAccountTwoFactorChange::MergeFrom(CMsgGCHAccountTwoFactorChange const&)
 T CMsgGCHAccountTwoFactorChange::New() const
 T CMsgGCHAccountTwoFactorChange::SerializeWithCachedSizesToArray(unsigned char*) const
 T CMsgGCHAccountTwoFactorChange::SetCachedSize(int) const
 T CMsgGCHAccountTwoFactorChange::~CMsgGCHAccountTwoFactorChange()
 T CMsgGCHAccountVacStatusChange::ByteSize() const
 T CMsgGCHAccountVacStatusChange::Clear()
 T CMsgGCHAccountVacStatusChange::GetCachedSize() const
 T CMsgGCHAccountVacStatusChange::GetMetadata() const
 T CMsgGCHAccountVacStatusChange::IsInitialized() const
 T CMsgGCHAccountVacStatusChange::MergeFrom(CMsgGCHAccountVacStatusChange const&)
 T CMsgGCHAccountVacStatusChange::New() const
 T CMsgGCHAccountVacStatusChange::SerializeWithCachedSizesToArray(unsigned char*) const
 T CMsgGCHAccountVacStatusChange::SetCachedSize(int) const
 T CMsgGCHAccountVacStatusChange::~CMsgGCHAccountVacStatusChange()
 T CMsgGCHUpdateSession::ByteSize() const
 T CMsgGCHUpdateSession::Clear()
 T CMsgGCHUpdateSession::GetCachedSize() const
 T CMsgGCHUpdateSession::GetMetadata() const
 T CMsgGCHUpdateSession::IsInitialized() const
 T CMsgGCHUpdateSession::MergeFrom(CMsgGCHUpdateSession const&)
 T CMsgGCHUpdateSession::New() const
 T CMsgGCHUpdateSession::SerializeWithCachedSizesToArray(unsigned char*) const
 T CMsgGCHUpdateSession::SetCachedSize(int) const
 T CMsgGCHUpdateSession::~CMsgGCHUpdateSession()
 T CMsgGCHUpdateSession_ExtraField::ByteSize() const
 T CMsgGCHUpdateSession_ExtraField::Clear()
 T CMsgGCHUpdateSession_ExtraField::GetCachedSize() const
 T CMsgGCHUpdateSession_ExtraField::GetMetadata() const
 T CMsgGCHUpdateSession_ExtraField::IsInitialized() const
 T CMsgGCHUpdateSession_ExtraField::MergeFrom(CMsgGCHUpdateSession_ExtraField const&)
 T CMsgGCHUpdateSession_ExtraField::New() const
 T CMsgGCHUpdateSession_ExtraField::SerializeWithCachedSizesToArray(unsigned char*) const
 T CMsgGCHUpdateSession_ExtraField::SetCachedSize(int) const
 T CMsgGCHUpdateSession_ExtraField::SharedDtor()
 T CMsgGCHUpdateSession_ExtraField::~CMsgGCHUpdateSession_ExtraField()
 T CMsgGCHVacVerificationChange::ByteSize() const
 T CMsgGCHVacVerificationChange::Clear()
 T CMsgGCHVacVerificationChange::GetCachedSize() const
 T CMsgGCHVacVerificationChange::GetMetadata() const
 T CMsgGCHVacVerificationChange::IsInitialized() const
 T CMsgGCHVacVerificationChange::MergeFrom(CMsgGCHVacVerificationChange const&)
 T CMsgGCHVacVerificationChange::New() const
 T CMsgGCHVacVerificationChange::SerializeWithCachedSizesToArray(unsigned char*) const
 T CMsgGCHVacVerificationChange::SetCachedSize(int) const
 T CMsgGCHVacVerificationChange::~CMsgGCHVacVerificationChange()
 T CMsgGCIncrementKillCountResponse::ByteSize() const
 T CMsgGCIncrementKillCountResponse::Clear()
 T CMsgGCIncrementKillCountResponse::GetCachedSize() const
 T CMsgGCIncrementKillCountResponse::GetMetadata() const
 T CMsgGCIncrementKillCountResponse::IsInitialized() const
 T CMsgGCIncrementKillCountResponse::MergeFrom(CMsgGCIncrementKillCountResponse const&)
 T CMsgGCIncrementKillCountResponse::New() const
 T CMsgGCIncrementKillCountResponse::SerializeWithCachedSizesToArray(unsigned char*) const
 T CMsgGCIncrementKillCountResponse::SetCachedSize(int) const
 T CMsgGCIncrementKillCountResponse::~CMsgGCIncrementKillCountResponse()
 T CMsgGCItemPreviewItemBoughtNotification::ByteSize() const
 T CMsgGCItemPreviewItemBoughtNotification::Clear()
 T CMsgGCItemPreviewItemBoughtNotification::GetCachedSize() const
 T CMsgGCItemPreviewItemBoughtNotification::GetMetadata() const
 T CMsgGCItemPreviewItemBoughtNotification::IsInitialized() const
 T CMsgGCItemPreviewItemBoughtNotification::MergeFrom(CMsgGCItemPreviewItemBoughtNotification const&)
 T CMsgGCItemPreviewItemBoughtNotification::New() const
 T CMsgGCItemPreviewItemBoughtNotification::SerializeWithCachedSizesToArray(unsigned char*) const
 T CMsgGCItemPreviewItemBoughtNotification::SetCachedSize(int) const
 T CMsgGCItemPreviewItemBoughtNotification::~CMsgGCItemPreviewItemBoughtNotification()
 T CMsgGCMatchHistoryLoad::ByteSize() const
 T CMsgGCMatchHistoryLoad::Clear()
 T CMsgGCMatchHistoryLoad::GetCachedSize() const
 T CMsgGCMatchHistoryLoad::GetMetadata() const
 T CMsgGCMatchHistoryLoad::IsInitialized() const
 T CMsgGCMatchHistoryLoad::MergeFrom(CMsgGCMatchHistoryLoad const&)
 T CMsgGCMatchHistoryLoad::New() const
 T CMsgGCMatchHistoryLoad::SerializeWithCachedSizesToArray(unsigned char*) const
 T CMsgGCMatchHistoryLoad::SetCachedSize(int) const
 T CMsgGCMatchHistoryLoad::~CMsgGCMatchHistoryLoad()
 T CMsgGCMsgMasterSetClientMsgRouting::ByteSize() const
 T CMsgGCMsgMasterSetClientMsgRouting::Clear()
 T CMsgGCMsgMasterSetClientMsgRouting::GetCachedSize() const
 T CMsgGCMsgMasterSetClientMsgRouting::GetMetadata() const
 T CMsgGCMsgMasterSetClientMsgRouting::IsInitialized() const
 T CMsgGCMsgMasterSetClientMsgRouting::MergeFrom(CMsgGCMsgMasterSetClientMsgRouting const&)
 T CMsgGCMsgMasterSetClientMsgRouting::New() const
 T CMsgGCMsgMasterSetClientMsgRouting::SerializeWithCachedSizesToArray(unsigned char*) const
 T CMsgGCMsgMasterSetClientMsgRouting::SetCachedSize(int) const
 T CMsgGCMsgMasterSetClientMsgRouting::~CMsgGCMsgMasterSetClientMsgRouting()
 T CMsgGCMsgMasterSetClientMsgRouting_Entry::ByteSize() const
 T CMsgGCMsgMasterSetClientMsgRouting_Entry::Clear()
 T CMsgGCMsgMasterSetClientMsgRouting_Entry::GetCachedSize() const
 T CMsgGCMsgMasterSetClientMsgRouting_Entry::GetMetadata() const
 T CMsgGCMsgMasterSetClientMsgRouting_Entry::IsInitialized() const
 T CMsgGCMsgMasterSetClientMsgRouting_Entry::MergeFrom(CMsgGCMsgMasterSetClientMsgRouting_Entry const&)
 T CMsgGCMsgMasterSetClientMsgRouting_Entry::New() const
 T CMsgGCMsgMasterSetClientMsgRouting_Entry::SerializeWithCachedSizesToArray(unsigned char*) const
 T CMsgGCMsgMasterSetClientMsgRouting_Entry::SetCachedSize(int) const
 T CMsgGCMsgMasterSetClientMsgRouting_Entry::~CMsgGCMsgMasterSetClientMsgRouting_Entry()
 T CMsgGCMsgMasterSetClientMsgRouting_Response::ByteSize() const
 T CMsgGCMsgMasterSetClientMsgRouting_Response::Clear()
 T CMsgGCMsgMasterSetClientMsgRouting_Response::GetCachedSize() const
 T CMsgGCMsgMasterSetClientMsgRouting_Response::GetMetadata() const
 T CMsgGCMsgMasterSetClientMsgRouting_Response::IsInitialized() const
 T CMsgGCMsgMasterSetClientMsgRouting_Response::MergeFrom(CMsgGCMsgMasterSetClientMsgRouting_Response const&)
 T CMsgGCMsgMasterSetClientMsgRouting_Response::New() const
 T CMsgGCMsgMasterSetClientMsgRouting_Response::SerializeWithCachedSizesToArray(unsigned char*) const
 T CMsgGCMsgMasterSetClientMsgRouting_Response::SetCachedSize(int) const
 T CMsgGCMsgMasterSetClientMsgRouting_Response::~CMsgGCMsgMasterSetClientMsgRouting_Response()
 T CMsgGCMsgMasterSetDirectory::ByteSize() const
 T CMsgGCMsgMasterSetDirectory::Clear()
 T CMsgGCMsgMasterSetDirectory::GetCachedSize() const
 T CMsgGCMsgMasterSetDirectory::GetMetadata() const
 T CMsgGCMsgMasterSetDirectory::IsInitialized() const
 T CMsgGCMsgMasterSetDirectory::MergeFrom(CMsgGCMsgMasterSetDirectory const&)
 T CMsgGCMsgMasterSetDirectory::New() const
 T CMsgGCMsgMasterSetDirectory::SerializeWithCachedSizesToArray(unsigned char*) const
 T CMsgGCMsgMasterSetDirectory::SetCachedSize(int) const
 T CMsgGCMsgMasterSetDirectory::~CMsgGCMsgMasterSetDirectory()
 T CMsgGCMsgMasterSetDirectory_Response::ByteSize() const
 T CMsgGCMsgMasterSetDirectory_Response::Clear()
 T CMsgGCMsgMasterSetDirectory_Response::GetCachedSize() const
 T CMsgGCMsgMasterSetDirectory_Response::GetMetadata() const
 T CMsgGCMsgMasterSetDirectory_Response::IsInitialized() const
 T CMsgGCMsgMasterSetDirectory_Response::MergeFrom(CMsgGCMsgMasterSetDirectory_Response const&)
 T CMsgGCMsgMasterSetDirectory_Response::New() const
 T CMsgGCMsgMasterSetDirectory_Response::SerializeWithCachedSizesToArray(unsigned char*) const
 T CMsgGCMsgMasterSetDirectory_Response::SetCachedSize(int) const
 T CMsgGCMsgMasterSetDirectory_Response::~CMsgGCMsgMasterSetDirectory_Response()
 T CMsgGCMsgMasterSetDirectory_SubGC::ByteSize() const
 T CMsgGCMsgMasterSetDirectory_SubGC::Clear()
 T CMsgGCMsgMasterSetDirectory_SubGC::GetCachedSize() const
 T CMsgGCMsgMasterSetDirectory_SubGC::GetMetadata() const
 T CMsgGCMsgMasterSetDirectory_SubGC::IsInitialized() const
 T CMsgGCMsgMasterSetDirectory_SubGC::MergeFrom(CMsgGCMsgMasterSetDirectory_SubGC const&)
 T CMsgGCMsgMasterSetDirectory_SubGC::New() const
 T CMsgGCMsgMasterSetDirectory_SubGC::SerializeWithCachedSizesToArray(unsigned char*) const
 T CMsgGCMsgMasterSetDirectory_SubGC::SetCachedSize(int) const
 T CMsgGCMsgMasterSetDirectory_SubGC::SharedDtor()
 T CMsgGCMsgMasterSetDirectory_SubGC::~CMsgGCMsgMasterSetDirectory_SubGC()
 T CMsgGCMsgMasterSetWebAPIRouting::ByteSize() const
 T CMsgGCMsgMasterSetWebAPIRouting::Clear()
 T CMsgGCMsgMasterSetWebAPIRouting::GetCachedSize() const
 T CMsgGCMsgMasterSetWebAPIRouting::GetMetadata() const
 T CMsgGCMsgMasterSetWebAPIRouting::IsInitialized() const
 T CMsgGCMsgMasterSetWebAPIRouting::MergeFrom(CMsgGCMsgMasterSetWebAPIRouting const&)
 T CMsgGCMsgMasterSetWebAPIRouting::New() const
 T CMsgGCMsgMasterSetWebAPIRouting::SerializeWithCachedSizesToArray(unsigned char*) const
 T CMsgGCMsgMasterSetWebAPIRouting::SetCachedSize(int) const
 T CMsgGCMsgMasterSetWebAPIRouting::~CMsgGCMsgMasterSetWebAPIRouting()
 T CMsgGCMsgMasterSetWebAPIRouting_Entry::ByteSize() const
 T CMsgGCMsgMasterSetWebAPIRouting_Entry::Clear()
 T CMsgGCMsgMasterSetWebAPIRouting_Entry::GetCachedSize() const
 T CMsgGCMsgMasterSetWebAPIRouting_Entry::GetMetadata() const
 T CMsgGCMsgMasterSetWebAPIRouting_Entry::IsInitialized() const
 T CMsgGCMsgMasterSetWebAPIRouting_Entry::MergeFrom(CMsgGCMsgMasterSetWebAPIRouting_Entry const&)
 T CMsgGCMsgMasterSetWebAPIRouting_Entry::New() const
 T CMsgGCMsgMasterSetWebAPIRouting_Entry::SerializeWithCachedSizesToArray(unsigned char*) const
 T CMsgGCMsgMasterSetWebAPIRouting_Entry::SetCachedSize(int) const
 T CMsgGCMsgMasterSetWebAPIRouting_Entry::SharedDtor()
 T CMsgGCMsgMasterSetWebAPIRouting_Entry::~CMsgGCMsgMasterSetWebAPIRouting_Entry()
 T CMsgGCMsgMasterSetWebAPIRouting_Response::ByteSize() const
 T CMsgGCMsgMasterSetWebAPIRouting_Response::Clear()
 T CMsgGCMsgMasterSetWebAPIRouting_Response::GetCachedSize() const
 T CMsgGCMsgMasterSetWebAPIRouting_Response::GetMetadata() const
 T CMsgGCMsgMasterSetWebAPIRouting_Response::IsInitialized() const
 T CMsgGCMsgMasterSetWebAPIRouting_Response::MergeFrom(CMsgGCMsgMasterSetWebAPIRouting_Response const&)
 T CMsgGCMsgMasterSetWebAPIRouting_Response::New() const
 T CMsgGCMsgMasterSetWebAPIRouting_Response::SerializeWithCachedSizesToArray(unsigned char*) const
 T CMsgGCMsgMasterSetWebAPIRouting_Response::SetCachedSize(int) const
 T CMsgGCMsgMasterSetWebAPIRouting_Response::~CMsgGCMsgMasterSetWebAPIRouting_Response()
 T CMsgGCMsgSetOptions::ByteSize() const
 T CMsgGCMsgSetOptions::Clear()
 T CMsgGCMsgSetOptions::GetCachedSize() const
 T CMsgGCMsgSetOptions::GetMetadata() const
 T CMsgGCMsgSetOptions::IsInitialized() const
 T CMsgGCMsgSetOptions::MergeFrom(CMsgGCMsgSetOptions const&)
 T CMsgGCMsgSetOptions::New() const
 T CMsgGCMsgSetOptions::SerializeWithCachedSizesToArray(unsigned char*) const
 T CMsgGCMsgSetOptions::SetCachedSize(int) const
 T CMsgGCMsgSetOptions::~CMsgGCMsgSetOptions()
 T CMsgGCMsgSetOptions_MessageRange::ByteSize() const
 T CMsgGCMsgSetOptions_MessageRange::Clear()
 T CMsgGCMsgSetOptions_MessageRange::GetCachedSize() const
 T CMsgGCMsgSetOptions_MessageRange::GetMetadata() const
 T CMsgGCMsgSetOptions_MessageRange::IsInitialized() const
 T CMsgGCMsgSetOptions_MessageRange::MergeFrom(CMsgGCMsgSetOptions_MessageRange const&)
 T CMsgGCMsgSetOptions_MessageRange::New() const
 T CMsgGCMsgSetOptions_MessageRange::SerializeWithCachedSizesToArray(unsigned char*) const
 T CMsgGCMsgSetOptions_MessageRange::SetCachedSize(int) const
 T CMsgGCMsgSetOptions_MessageRange::~CMsgGCMsgSetOptions_MessageRange()
 T CMsgGCMsgSetOptions_Option_IsValid(int)
 T CMsgGCMsgWebAPIJobRequestForwardResponse::ByteSize() const
 T CMsgGCMsgWebAPIJobRequestForwardResponse::Clear()
 T CMsgGCMsgWebAPIJobRequestForwardResponse::GetCachedSize() const
 T CMsgGCMsgWebAPIJobRequestForwardResponse::GetMetadata() const
 T CMsgGCMsgWebAPIJobRequestForwardResponse::IsInitialized() const
 T CMsgGCMsgWebAPIJobRequestForwardResponse::MergeFrom(CMsgGCMsgWebAPIJobRequestForwardResponse const&)
 T CMsgGCMsgWebAPIJobRequestForwardResponse::New() const
 T CMsgGCMsgWebAPIJobRequestForwardResponse::SerializeWithCachedSizesToArray(unsigned char*) const
 T CMsgGCMsgWebAPIJobRequestForwardResponse::SetCachedSize(int) const
 T CMsgGCMsgWebAPIJobRequestForwardResponse::~CMsgGCMsgWebAPIJobRequestForwardResponse()
 T CMsgGCMultiplexMessage::ByteSize() const
 T CMsgGCMultiplexMessage::Clear()
 T CMsgGCMultiplexMessage::GetCachedSize() const
 T CMsgGCMultiplexMessage::GetMetadata() const
 T CMsgGCMultiplexMessage::IsInitialized() const
 T CMsgGCMultiplexMessage::MergeFrom(CMsgGCMultiplexMessage const&)
 T CMsgGCMultiplexMessage::New() const
 T CMsgGCMultiplexMessage::SerializeWithCachedSizesToArray(unsigned char*) const
 T CMsgGCMultiplexMessage::SetCachedSize(int) const
 T CMsgGCMultiplexMessage::~CMsgGCMultiplexMessage()
 T CMsgGCNameItemNotification::ByteSize() const
 T CMsgGCNameItemNotification::Clear()
 T CMsgGCNameItemNotification::GetCachedSize() const
 T CMsgGCNameItemNotification::GetMetadata() const
 T CMsgGCNameItemNotification::IsInitialized() const
 T CMsgGCNameItemNotification::MergeFrom(CMsgGCNameItemNotification const&)
 T CMsgGCNameItemNotification::New() const
 T CMsgGCNameItemNotification::SerializeWithCachedSizesToArray(unsigned char*) const
 T CMsgGCNameItemNotification::SetCachedSize(int) const
 T CMsgGCNameItemNotification::~CMsgGCNameItemNotification()
 T CMsgGCNotification::ByteSize() const
 T CMsgGCNotification::Clear()
 T CMsgGCNotification::GetCachedSize() const
 T CMsgGCNotification::GetMetadata() const
 T CMsgGCNotification::IsInitialized() const
 T CMsgGCNotification::MergeFrom(CMsgGCNotification const&)
 T CMsgGCNotification::New() const
 T CMsgGCNotification::SerializeWithCachedSizesToArray(unsigned char*) const
 T CMsgGCNotification::SetCachedSize(int) const
 T CMsgGCNotification::~CMsgGCNotification()
 T CMsgGCNotificationQueue::ByteSize() const
 T CMsgGCNotificationQueue::Clear()
 T CMsgGCNotificationQueue::GetCachedSize() const
 T CMsgGCNotificationQueue::GetMetadata() const
 T CMsgGCNotificationQueue::IsInitialized() const
 T CMsgGCNotificationQueue::MergeFrom(CMsgGCNotificationQueue const&)
 T CMsgGCNotificationQueue::New() const
 T CMsgGCNotificationQueue::SerializeWithCachedSizesToArray(unsigned char*) const
 T CMsgGCNotificationQueue::SetCachedSize(int) const
 T CMsgGCNotificationQueue::~CMsgGCNotificationQueue()
 T CMsgGCQuestComplete_Request::ByteSize() const
 T CMsgGCQuestComplete_Request::Clear()
 T CMsgGCQuestComplete_Request::GetCachedSize() const
 T CMsgGCQuestComplete_Request::GetMetadata() const
 T CMsgGCQuestComplete_Request::IsInitialized() const
 T CMsgGCQuestComplete_Request::MergeFrom(CMsgGCQuestComplete_Request const&)
 T CMsgGCQuestComplete_Request::New() const
 T CMsgGCQuestComplete_Request::SerializeWithCachedSizesToArray(unsigned char*) const
 T CMsgGCQuestComplete_Request::SetCachedSize(int) const
 T CMsgGCQuestComplete_Request::~CMsgGCQuestComplete_Request()
 T CMsgGCQuestCompleted::ByteSize() const
 T CMsgGCQuestCompleted::Clear()
 T CMsgGCQuestCompleted::GetCachedSize() const
 T CMsgGCQuestCompleted::GetMetadata() const
 T CMsgGCQuestCompleted::IsInitialized() const
 T CMsgGCQuestCompleted::MergeFrom(CMsgGCQuestCompleted const&)
 T CMsgGCQuestCompleted::New() const
 T CMsgGCQuestCompleted::SerializeWithCachedSizesToArray(unsigned char*) const
 T CMsgGCQuestCompleted::SetCachedSize(int) const
 T CMsgGCQuestCompleted::~CMsgGCQuestCompleted()
 T CMsgGCQuestDiscard_Request::ByteSize() const
 T CMsgGCQuestDiscard_Request::Clear()
 T CMsgGCQuestDiscard_Request::GetCachedSize() const
 T CMsgGCQuestDiscard_Request::GetMetadata() const
 T CMsgGCQuestDiscard_Request::IsInitialized() const
 T CMsgGCQuestDiscard_Request::MergeFrom(CMsgGCQuestDiscard_Request const&)
 T CMsgGCQuestDiscard_Request::New() const
 T CMsgGCQuestDiscard_Request::SerializeWithCachedSizesToArray(unsigned char*) const
 T CMsgGCQuestDiscard_Request::SetCachedSize(int) const
 T CMsgGCQuestDiscard_Request::~CMsgGCQuestDiscard_Request()
 T CMsgGCQuestObjective_PointsChange::ByteSize() const
 T CMsgGCQuestObjective_PointsChange::CMsgGCQuestObjective_PointsChange()
 T CMsgGCQuestObjective_PointsChange::Clear()
 T CMsgGCQuestObjective_PointsChange::CopyFrom(CMsgGCQuestObjective_PointsChange const&)
 T CMsgGCQuestObjective_PointsChange::GetCachedSize() const
 T CMsgGCQuestObjective_PointsChange::GetMetadata() const
 T CMsgGCQuestObjective_PointsChange::IsInitialized() const
 T CMsgGCQuestObjective_PointsChange::MergeFrom(CMsgGCQuestObjective_PointsChange const&)
 T CMsgGCQuestObjective_PointsChange::New() const
 T CMsgGCQuestObjective_PointsChange::SerializeWithCachedSizesToArray(unsigned char*) const
 T CMsgGCQuestObjective_PointsChange::SetCachedSize(int) const
 T CMsgGCQuestObjective_PointsChange::default_instance()
 T CMsgGCQuestObjective_PointsChange::descriptor()
 T CMsgGCQuestObjective_PointsChange::~CMsgGCQuestObjective_PointsChange()
 T CMsgGCQuestObjective_Progress::ByteSize() const
 T CMsgGCQuestObjective_Progress::Clear()
 T CMsgGCQuestObjective_Progress::GetCachedSize() const
 T CMsgGCQuestObjective_Progress::GetMetadata() const
 T CMsgGCQuestObjective_Progress::IsInitialized() const
 T CMsgGCQuestObjective_Progress::MergeFrom(CMsgGCQuestObjective_Progress const&)
 T CMsgGCQuestObjective_Progress::New() const
 T CMsgGCQuestObjective_Progress::SerializeWithCachedSizesToArray(unsigned char*) const
 T CMsgGCQuestObjective_Progress::SetCachedSize(int) const
 T CMsgGCQuestObjective_Progress::~CMsgGCQuestObjective_Progress()
 T CMsgGCQuestObjective_RequestLoanerItems::ByteSize() const
 T CMsgGCQuestObjective_RequestLoanerItems::Clear()
 T CMsgGCQuestObjective_RequestLoanerItems::GetCachedSize() const
 T CMsgGCQuestObjective_RequestLoanerItems::GetMetadata() const
 T CMsgGCQuestObjective_RequestLoanerItems::IsInitialized() const
 T CMsgGCQuestObjective_RequestLoanerItems::MergeFrom(CMsgGCQuestObjective_RequestLoanerItems const&)
 T CMsgGCQuestObjective_RequestLoanerItems::New() const
 T CMsgGCQuestObjective_RequestLoanerItems::SerializeWithCachedSizesToArray(unsigned char*) const
 T CMsgGCQuestObjective_RequestLoanerItems::SetCachedSize(int) const
 T CMsgGCQuestObjective_RequestLoanerItems::~CMsgGCQuestObjective_RequestLoanerItems()
 T CMsgGCQuestObjective_RequestLoanerResponse::ByteSize() const
 T CMsgGCQuestObjective_RequestLoanerResponse::Clear()
 T CMsgGCQuestObjective_RequestLoanerResponse::GetCachedSize() const
 T CMsgGCQuestObjective_RequestLoanerResponse::GetMetadata() const
 T CMsgGCQuestObjective_RequestLoanerResponse::IsInitialized() const
 T CMsgGCQuestObjective_RequestLoanerResponse::MergeFrom(CMsgGCQuestObjective_RequestLoanerResponse const&)
 T CMsgGCQuestObjective_RequestLoanerResponse::New() const
 T CMsgGCQuestObjective_RequestLoanerResponse::SerializeWithCachedSizesToArray(unsigned char*) const
 T CMsgGCQuestObjective_RequestLoanerResponse::SetCachedSize(int) const
 T CMsgGCQuestObjective_RequestLoanerResponse::~CMsgGCQuestObjective_RequestLoanerResponse()
 T CMsgGCRematchRequest::ByteSize() const
 T CMsgGCRematchRequest::CMsgGCRematchRequest()
 T CMsgGCRematchRequest::Clear()
 T CMsgGCRematchRequest::CopyFrom(CMsgGCRematchRequest const&)
 T CMsgGCRematchRequest::GetCachedSize() const
 T CMsgGCRematchRequest::GetMetadata() const
 T CMsgGCRematchRequest::IsInitialized() const
 T CMsgGCRematchRequest::MergeFrom(CMsgGCRematchRequest const&)
 T CMsgGCRematchRequest::New() const
 T CMsgGCRematchRequest::SerializeWithCachedSizesToArray(unsigned char*) const
 T CMsgGCRematchRequest::SetCachedSize(int) const
 T CMsgGCRematchRequest::default_instance()
 T CMsgGCRematchRequest::descriptor()
 T CMsgGCRematchRequest::~CMsgGCRematchRequest()
 T CMsgGCRematchRequestResponse::ByteSize() const
 T CMsgGCRematchRequestResponse::CMsgGCRematchRequestResponse()
 T CMsgGCRematchRequestResponse::Clear()
 T CMsgGCRematchRequestResponse::GetCachedSize() const
 T CMsgGCRematchRequestResponse::GetMetadata() const
 T CMsgGCRematchRequestResponse::IsInitialized() const
 T CMsgGCRematchRequestResponse::MergeFrom(CMsgGCRematchRequestResponse const&)
 T CMsgGCRematchRequestResponse::New() const
 T CMsgGCRematchRequestResponse::SerializeWithCachedSizesToArray(unsigned char*) const
 T CMsgGCRematchRequestResponse::SetCachedSize(int) const
 T CMsgGCRematchRequestResponse::default_instance()
 T CMsgGCRematchRequestResponse::descriptor()
 T CMsgGCRematchRequestResponse::~CMsgGCRematchRequestResponse()
 T CMsgGCRematchRequest_PartyEntry::ByteSize() const
 T CMsgGCRematchRequest_PartyEntry::CMsgGCRematchRequest_PartyEntry()
 T CMsgGCRematchRequest_PartyEntry::Clear()
 T CMsgGCRematchRequest_PartyEntry::GetCachedSize() const
 T CMsgGCRematchRequest_PartyEntry::GetMetadata() const
 T CMsgGCRematchRequest_PartyEntry::IsInitialized() const
 T CMsgGCRematchRequest_PartyEntry::MergeFrom(CMsgGCRematchRequest_PartyEntry const&)
 T CMsgGCRematchRequest_PartyEntry::New() const
 T CMsgGCRematchRequest_PartyEntry::SerializeWithCachedSizesToArray(unsigned char*) const
 T CMsgGCRematchRequest_PartyEntry::SetCachedSize(int) const
 T CMsgGCRematchRequest_PartyEntry::~CMsgGCRematchRequest_PartyEntry()
 T CMsgGCRemoveCustomizationAttributeSimple::ByteSize() const
 T CMsgGCRemoveCustomizationAttributeSimple::Clear()
 T CMsgGCRemoveCustomizationAttributeSimple::GetCachedSize() const
 T CMsgGCRemoveCustomizationAttributeSimple::GetMetadata() const
 T CMsgGCRemoveCustomizationAttributeSimple::IsInitialized() const
 T CMsgGCRemoveCustomizationAttributeSimple::MergeFrom(CMsgGCRemoveCustomizationAttributeSimple const&)
 T CMsgGCRemoveCustomizationAttributeSimple::New() const
 T CMsgGCRemoveCustomizationAttributeSimple::SerializeWithCachedSizesToArray(unsigned char*) const
 T CMsgGCRemoveCustomizationAttributeSimple::SetCachedSize(int) const
 T CMsgGCRemoveCustomizationAttributeSimple::~CMsgGCRemoveCustomizationAttributeSimple()
 T CMsgGCRemoveStrangePart::ByteSize() const
 T CMsgGCRemoveStrangePart::Clear()
 T CMsgGCRemoveStrangePart::GetCachedSize() const
 T CMsgGCRemoveStrangePart::GetMetadata() const
 T CMsgGCRemoveStrangePart::IsInitialized() const
 T CMsgGCRemoveStrangePart::MergeFrom(CMsgGCRemoveStrangePart const&)
 T CMsgGCRemoveStrangePart::New() const
 T CMsgGCRemoveStrangePart::SerializeWithCachedSizesToArray(unsigned char*) const
 T CMsgGCRemoveStrangePart::SetCachedSize(int) const
 T CMsgGCRemoveStrangePart::~CMsgGCRemoveStrangePart()
 T CMsgGCRemoveUpgradeCard::ByteSize() const
 T CMsgGCRemoveUpgradeCard::Clear()
 T CMsgGCRemoveUpgradeCard::GetCachedSize() const
 T CMsgGCRemoveUpgradeCard::GetMetadata() const
 T CMsgGCRemoveUpgradeCard::IsInitialized() const
 T CMsgGCRemoveUpgradeCard::MergeFrom(CMsgGCRemoveUpgradeCard const&)
 T CMsgGCRemoveUpgradeCard::New() const
 T CMsgGCRemoveUpgradeCard::SerializeWithCachedSizesToArray(unsigned char*) const
 T CMsgGCRemoveUpgradeCard::SetCachedSize(int) const
 T CMsgGCRemoveUpgradeCard::~CMsgGCRemoveUpgradeCard()
 T CMsgGCReportAbuse::ByteSize() const
 T CMsgGCReportAbuse::Clear()
 T CMsgGCReportAbuse::GetCachedSize() const
 T CMsgGCReportAbuse::GetMetadata() const
 T CMsgGCReportAbuse::IsInitialized() const
 T CMsgGCReportAbuse::MergeFrom(CMsgGCReportAbuse const&)
 T CMsgGCReportAbuse::New() const
 T CMsgGCReportAbuse::SerializeWithCachedSizesToArray(unsigned char*) const
 T CMsgGCReportAbuse::SetCachedSize(int) const
 T CMsgGCReportAbuse::~CMsgGCReportAbuse()
 T CMsgGCReportAbuseResponse::ByteSize() const
 T CMsgGCReportAbuseResponse::Clear()
 T CMsgGCReportAbuseResponse::GetCachedSize() const
 T CMsgGCReportAbuseResponse::GetMetadata() const
 T CMsgGCReportAbuseResponse::IsInitialized() const
 T CMsgGCReportAbuseResponse::MergeFrom(CMsgGCReportAbuseResponse const&)
 T CMsgGCReportAbuseResponse::New() const
 T CMsgGCReportAbuseResponse::SerializeWithCachedSizesToArray(unsigned char*) const
 T CMsgGCReportAbuseResponse::SetCachedSize(int) const
 T CMsgGCReportAbuseResponse::~CMsgGCReportAbuseResponse()
 T CMsgGCRequestCasualCriteriaStats::ByteSize() const
 T CMsgGCRequestCasualCriteriaStats::Clear()
 T CMsgGCRequestCasualCriteriaStats::GetCachedSize() const
 T CMsgGCRequestCasualCriteriaStats::GetMetadata() const
 T CMsgGCRequestCasualCriteriaStats::IsInitialized() const
 T CMsgGCRequestCasualCriteriaStats::MergeFrom(CMsgGCRequestCasualCriteriaStats const&)
 T CMsgGCRequestCasualCriteriaStats::New() const
 T CMsgGCRequestCasualCriteriaStats::SerializeWithCachedSizesToArray(unsigned char*) const
 T CMsgGCRequestCasualCriteriaStats::SetCachedSize(int) const
 T CMsgGCRequestCasualCriteriaStats::~CMsgGCRequestCasualCriteriaStats()
 T CMsgGCRequestStoreSalesData::ByteSize() const
 T CMsgGCRequestStoreSalesData::Clear()
 T CMsgGCRequestStoreSalesData::GetCachedSize() const
 T CMsgGCRequestStoreSalesData::GetMetadata() const
 T CMsgGCRequestStoreSalesData::IsInitialized() const
 T CMsgGCRequestStoreSalesData::MergeFrom(CMsgGCRequestStoreSalesData const&)
 T CMsgGCRequestStoreSalesData::New() const
 T CMsgGCRequestStoreSalesData::SerializeWithCachedSizesToArray(unsigned char*) const
 T CMsgGCRequestStoreSalesData::SetCachedSize(int) const
 T CMsgGCRequestStoreSalesData::~CMsgGCRequestStoreSalesData()
 T CMsgGCRequestStoreSalesDataResponse::ByteSize() const
 T CMsgGCRequestStoreSalesDataResponse::Clear()
 T CMsgGCRequestStoreSalesDataResponse::GetCachedSize() const
 T CMsgGCRequestStoreSalesDataResponse::GetMetadata() const
 T CMsgGCRequestStoreSalesDataResponse::IsInitialized() const
 T CMsgGCRequestStoreSalesDataResponse::MergeFrom(CMsgGCRequestStoreSalesDataResponse const&)
 T CMsgGCRequestStoreSalesDataResponse::New() const
 T CMsgGCRequestStoreSalesDataResponse::SerializeWithCachedSizesToArray(unsigned char*) const
 T CMsgGCRequestStoreSalesDataResponse::SetCachedSize(int) const
 T CMsgGCRequestStoreSalesDataResponse::~CMsgGCRequestStoreSalesDataResponse()
 T CMsgGCRequestStoreSalesDataResponse_Price::ByteSize() const
 T CMsgGCRequestStoreSalesDataResponse_Price::Clear()
 T CMsgGCRequestStoreSalesDataResponse_Price::GetCachedSize() const
 T CMsgGCRequestStoreSalesDataResponse_Price::GetMetadata() const
 T CMsgGCRequestStoreSalesDataResponse_Price::IsInitialized() const
 T CMsgGCRequestStoreSalesDataResponse_Price::MergeFrom(CMsgGCRequestStoreSalesDataResponse_Price const&)
 T CMsgGCRequestStoreSalesDataResponse_Price::New() const
 T CMsgGCRequestStoreSalesDataResponse_Price::SerializeWithCachedSizesToArray(unsigned char*) const
 T CMsgGCRequestStoreSalesDataResponse_Price::SetCachedSize(int) const
 T CMsgGCRequestStoreSalesDataResponse_Price::~CMsgGCRequestStoreSalesDataResponse_Price()
 T CMsgGCRequestStoreSalesDataUpToDateResponse::ByteSize() const
 T CMsgGCRequestStoreSalesDataUpToDateResponse::Clear()
 T CMsgGCRequestStoreSalesDataUpToDateResponse::GetCachedSize() const
 T CMsgGCRequestStoreSalesDataUpToDateResponse::GetMetadata() const
 T CMsgGCRequestStoreSalesDataUpToDateResponse::IsInitialized() const
 T CMsgGCRequestStoreSalesDataUpToDateResponse::MergeFrom(CMsgGCRequestStoreSalesDataUpToDateResponse const&)
 T CMsgGCRequestStoreSalesDataUpToDateResponse::New() const
 T CMsgGCRequestStoreSalesDataUpToDateResponse::SerializeWithCachedSizesToArray(unsigned char*) const
 T CMsgGCRequestStoreSalesDataUpToDateResponse::SetCachedSize(int) const
 T CMsgGCRequestStoreSalesDataUpToDateResponse::~CMsgGCRequestStoreSalesDataUpToDateResponse()
 T CMsgGCRequestSubGCSessionInfo::ByteSize() const
 T CMsgGCRequestSubGCSessionInfo::Clear()
 T CMsgGCRequestSubGCSessionInfo::GetCachedSize() const
 T CMsgGCRequestSubGCSessionInfo::GetMetadata() const
 T CMsgGCRequestSubGCSessionInfo::IsInitialized() const
 T CMsgGCRequestSubGCSessionInfo::MergeFrom(CMsgGCRequestSubGCSessionInfo const&)
 T CMsgGCRequestSubGCSessionInfo::New() const
 T CMsgGCRequestSubGCSessionInfo::SerializeWithCachedSizesToArray(unsigned char*) const
 T CMsgGCRequestSubGCSessionInfo::SetCachedSize(int) const
 T CMsgGCRequestSubGCSessionInfo::~CMsgGCRequestSubGCSessionInfo()
 T CMsgGCRequestSubGCSessionInfoResponse::ByteSize() const
 T CMsgGCRequestSubGCSessionInfoResponse::Clear()
 T CMsgGCRequestSubGCSessionInfoResponse::GetCachedSize() const
 T CMsgGCRequestSubGCSessionInfoResponse::GetMetadata() const
 T CMsgGCRequestSubGCSessionInfoResponse::IsInitialized() const
 T CMsgGCRequestSubGCSessionInfoResponse::MergeFrom(CMsgGCRequestSubGCSessionInfoResponse const&)
 T CMsgGCRequestSubGCSessionInfoResponse::New() const
 T CMsgGCRequestSubGCSessionInfoResponse::SerializeWithCachedSizesToArray(unsigned char*) const
 T CMsgGCRequestSubGCSessionInfoResponse::SetCachedSize(int) const
 T CMsgGCRequestSubGCSessionInfoResponse::~CMsgGCRequestSubGCSessionInfoResponse()
 T CMsgGCResetStrangeScores::ByteSize() const
 T CMsgGCResetStrangeScores::Clear()
 T CMsgGCResetStrangeScores::GetCachedSize() const
 T CMsgGCResetStrangeScores::GetMetadata() const
 T CMsgGCResetStrangeScores::IsInitialized() const
 T CMsgGCResetStrangeScores::MergeFrom(CMsgGCResetStrangeScores const&)
 T CMsgGCResetStrangeScores::New() const
 T CMsgGCResetStrangeScores::SerializeWithCachedSizesToArray(unsigned char*) const
 T CMsgGCResetStrangeScores::SetCachedSize(int) const
 T CMsgGCResetStrangeScores::~CMsgGCResetStrangeScores()
 T CMsgGCRoutingInfo::ByteSize() const
 T CMsgGCRoutingInfo::Clear()
 T CMsgGCRoutingInfo::GetCachedSize() const
 T CMsgGCRoutingInfo::GetMetadata() const
 T CMsgGCRoutingInfo::IsInitialized() const
 T CMsgGCRoutingInfo::MergeFrom(CMsgGCRoutingInfo const&)
 T CMsgGCRoutingInfo::New() const
 T CMsgGCRoutingInfo::SerializeWithCachedSizesToArray(unsigned char*) const
 T CMsgGCRoutingInfo::SetCachedSize(int) const
 T CMsgGCRoutingInfo::~CMsgGCRoutingInfo()
 T CMsgGCShowItemsPickedUp::ByteSize() const
 T CMsgGCShowItemsPickedUp::Clear()
 T CMsgGCShowItemsPickedUp::GetCachedSize() const
 T CMsgGCShowItemsPickedUp::GetMetadata() const
 T CMsgGCShowItemsPickedUp::IsInitialized() const
 T CMsgGCShowItemsPickedUp::MergeFrom(CMsgGCShowItemsPickedUp const&)
 T CMsgGCShowItemsPickedUp::New() const
 T CMsgGCShowItemsPickedUp::SerializeWithCachedSizesToArray(unsigned char*) const
 T CMsgGCShowItemsPickedUp::SetCachedSize(int) const
 T CMsgGCShowItemsPickedUp::~CMsgGCShowItemsPickedUp()
 T CMsgGCShuffleCrateContents::ByteSize() const
 T CMsgGCShuffleCrateContents::Clear()
 T CMsgGCShuffleCrateContents::GetCachedSize() const
 T CMsgGCShuffleCrateContents::GetMetadata() const
 T CMsgGCShuffleCrateContents::IsInitialized() const
 T CMsgGCShuffleCrateContents::MergeFrom(CMsgGCShuffleCrateContents const&)
 T CMsgGCShuffleCrateContents::New() const
 T CMsgGCShuffleCrateContents::SerializeWithCachedSizesToArray(unsigned char*) const
 T CMsgGCShuffleCrateContents::SetCachedSize(int) const
 T CMsgGCShuffleCrateContents::~CMsgGCShuffleCrateContents()
 T CMsgGCStorePurchaseCancel::ByteSize() const
 T CMsgGCStorePurchaseCancel::Clear()
 T CMsgGCStorePurchaseCancel::GetCachedSize() const
 T CMsgGCStorePurchaseCancel::GetMetadata() const
 T CMsgGCStorePurchaseCancel::IsInitialized() const
 T CMsgGCStorePurchaseCancel::MergeFrom(CMsgGCStorePurchaseCancel const&)
 T CMsgGCStorePurchaseCancel::New() const
 T CMsgGCStorePurchaseCancel::SerializeWithCachedSizesToArray(unsigned char*) const
 T CMsgGCStorePurchaseCancel::SetCachedSize(int) const
 T CMsgGCStorePurchaseCancel::~CMsgGCStorePurchaseCancel()
 T CMsgGCStorePurchaseCancelResponse::ByteSize() const
 T CMsgGCStorePurchaseCancelResponse::Clear()
 T CMsgGCStorePurchaseCancelResponse::GetCachedSize() const
 T CMsgGCStorePurchaseCancelResponse::GetMetadata() const
 T CMsgGCStorePurchaseCancelResponse::IsInitialized() const
 T CMsgGCStorePurchaseCancelResponse::MergeFrom(CMsgGCStorePurchaseCancelResponse const&)
 T CMsgGCStorePurchaseCancelResponse::New() const
 T CMsgGCStorePurchaseCancelResponse::SerializeWithCachedSizesToArray(unsigned char*) const
 T CMsgGCStorePurchaseCancelResponse::SetCachedSize(int) const
 T CMsgGCStorePurchaseCancelResponse::~CMsgGCStorePurchaseCancelResponse()
 T CMsgGCStorePurchaseFinalize::ByteSize() const
 T CMsgGCStorePurchaseFinalize::Clear()
 T CMsgGCStorePurchaseFinalize::GetCachedSize() const
 T CMsgGCStorePurchaseFinalize::GetMetadata() const
 T CMsgGCStorePurchaseFinalize::IsInitialized() const
 T CMsgGCStorePurchaseFinalize::MergeFrom(CMsgGCStorePurchaseFinalize const&)
 T CMsgGCStorePurchaseFinalize::New() const
 T CMsgGCStorePurchaseFinalize::SerializeWithCachedSizesToArray(unsigned char*) const
 T CMsgGCStorePurchaseFinalize::SetCachedSize(int) const
 T CMsgGCStorePurchaseFinalize::~CMsgGCStorePurchaseFinalize()
 T CMsgGCStorePurchaseFinalizeResponse::ByteSize() const
 T CMsgGCStorePurchaseFinalizeResponse::Clear()
 T CMsgGCStorePurchaseFinalizeResponse::GetCachedSize() const
 T CMsgGCStorePurchaseFinalizeResponse::GetMetadata() const
 T CMsgGCStorePurchaseFinalizeResponse::IsInitialized() const
 T CMsgGCStorePurchaseFinalizeResponse::MergeFrom(CMsgGCStorePurchaseFinalizeResponse const&)
 T CMsgGCStorePurchaseFinalizeResponse::New() const
 T CMsgGCStorePurchaseFinalizeResponse::SerializeWithCachedSizesToArray(unsigned char*) const
 T CMsgGCStorePurchaseFinalizeResponse::SetCachedSize(int) const
 T CMsgGCStorePurchaseFinalizeResponse::~CMsgGCStorePurchaseFinalizeResponse()
 T CMsgGCStorePurchaseInit::ByteSize() const
 T CMsgGCStorePurchaseInit::Clear()
 T CMsgGCStorePurchaseInit::GetCachedSize() const
 T CMsgGCStorePurchaseInit::GetMetadata() const
 T CMsgGCStorePurchaseInit::IsInitialized() const
 T CMsgGCStorePurchaseInit::MergeFrom(CMsgGCStorePurchaseInit const&)
 T CMsgGCStorePurchaseInit::New() const
 T CMsgGCStorePurchaseInit::SerializeWithCachedSizesToArray(unsigned char*) const
 T CMsgGCStorePurchaseInit::SetCachedSize(int) const
 T CMsgGCStorePurchaseInit::~CMsgGCStorePurchaseInit()
 T CMsgGCStorePurchaseInitResponse::ByteSize() const
 T CMsgGCStorePurchaseInitResponse::Clear()
 T CMsgGCStorePurchaseInitResponse::GetCachedSize() const
 T CMsgGCStorePurchaseInitResponse::GetMetadata() const
 T CMsgGCStorePurchaseInitResponse::IsInitialized() const
 T CMsgGCStorePurchaseInitResponse::MergeFrom(CMsgGCStorePurchaseInitResponse const&)
 T CMsgGCStorePurchaseInitResponse::New() const
 T CMsgGCStorePurchaseInitResponse::SerializeWithCachedSizesToArray(unsigned char*) const
 T CMsgGCStorePurchaseInitResponse::SetCachedSize(int) const
 T CMsgGCStorePurchaseInitResponse::~CMsgGCStorePurchaseInitResponse()
 T CMsgGCSurveyRequest::ByteSize() const
 T CMsgGCSurveyRequest::Clear()
 T CMsgGCSurveyRequest::GetCachedSize() const
 T CMsgGCSurveyRequest::GetMetadata() const
 T CMsgGCSurveyRequest::IsInitialized() const
 T CMsgGCSurveyRequest::MergeFrom(CMsgGCSurveyRequest const&)
 T CMsgGCSurveyRequest::New() const
 T CMsgGCSurveyRequest::SerializeWithCachedSizesToArray(unsigned char*) const
 T CMsgGCSurveyRequest::SetCachedSize(int) const
 T CMsgGCSurveyRequest::~CMsgGCSurveyRequest()
 T CMsgGCSurveyResponse::ByteSize() const
 T CMsgGCSurveyResponse::Clear()
 T CMsgGCSurveyResponse::GetCachedSize() const
 T CMsgGCSurveyResponse::GetMetadata() const
 T CMsgGCSurveyResponse::IsInitialized() const
 T CMsgGCSurveyResponse::MergeFrom(CMsgGCSurveyResponse const&)
 T CMsgGCSurveyResponse::New() const
 T CMsgGCSurveyResponse::SerializeWithCachedSizesToArray(unsigned char*) const
 T CMsgGCSurveyResponse::SetCachedSize(int) const
 T CMsgGCSurveyResponse::~CMsgGCSurveyResponse()
 T CMsgGCTFSpecificItemBroadcast::ByteSize() const
 T CMsgGCTFSpecificItemBroadcast::Clear()
 T CMsgGCTFSpecificItemBroadcast::GetCachedSize() const
 T CMsgGCTFSpecificItemBroadcast::GetMetadata() const
 T CMsgGCTFSpecificItemBroadcast::IsInitialized() const
 T CMsgGCTFSpecificItemBroadcast::MergeFrom(CMsgGCTFSpecificItemBroadcast const&)
 T CMsgGCTFSpecificItemBroadcast::New() const
 T CMsgGCTFSpecificItemBroadcast::SerializeWithCachedSizesToArray(unsigned char*) const
 T CMsgGCTFSpecificItemBroadcast::SetCachedSize(int) const
 T CMsgGCTFSpecificItemBroadcast::~CMsgGCTFSpecificItemBroadcast()
 T CMsgGCToGCGetUserServerMembers::ByteSize() const
 T CMsgGCToGCGetUserServerMembers::Clear()
 T CMsgGCToGCGetUserServerMembers::GetCachedSize() const
 T CMsgGCToGCGetUserServerMembers::GetMetadata() const
 T CMsgGCToGCGetUserServerMembers::IsInitialized() const
 T CMsgGCToGCGetUserServerMembers::MergeFrom(CMsgGCToGCGetUserServerMembers const&)
 T CMsgGCToGCGetUserServerMembers::New() const
 T CMsgGCToGCGetUserServerMembers::SerializeWithCachedSizesToArray(unsigned char*) const
 T CMsgGCToGCGetUserServerMembers::SetCachedSize(int) const
 T CMsgGCToGCGetUserServerMembers::~CMsgGCToGCGetUserServerMembers()
 T CMsgGCToGCGetUserServerMembersResponse::ByteSize() const
 T CMsgGCToGCGetUserServerMembersResponse::Clear()
 T CMsgGCToGCGetUserServerMembersResponse::GetCachedSize() const
 T CMsgGCToGCGetUserServerMembersResponse::GetMetadata() const
 T CMsgGCToGCGetUserServerMembersResponse::IsInitialized() const
 T CMsgGCToGCGetUserServerMembersResponse::MergeFrom(CMsgGCToGCGetUserServerMembersResponse const&)
 T CMsgGCToGCGetUserServerMembersResponse::New() const
 T CMsgGCToGCGetUserServerMembersResponse::SerializeWithCachedSizesToArray(unsigned char*) const
 T CMsgGCToGCGetUserServerMembersResponse::SetCachedSize(int) const
 T CMsgGCToGCGetUserServerMembersResponse::~CMsgGCToGCGetUserServerMembersResponse()
 T CMsgGCToGCGetUserSessionServer::ByteSize() const
 T CMsgGCToGCGetUserSessionServer::Clear()
 T CMsgGCToGCGetUserSessionServer::GetCachedSize() const
 T CMsgGCToGCGetUserSessionServer::GetMetadata() const
 T CMsgGCToGCGetUserSessionServer::IsInitialized() const
 T CMsgGCToGCGetUserSessionServer::MergeFrom(CMsgGCToGCGetUserSessionServer const&)
 T CMsgGCToGCGetUserSessionServer::New() const
 T CMsgGCToGCGetUserSessionServer::SerializeWithCachedSizesToArray(unsigned char*) const
 T CMsgGCToGCGetUserSessionServer::SetCachedSize(int) const
 T CMsgGCToGCGetUserSessionServer::~CMsgGCToGCGetUserSessionServer()
 T CMsgGCToGCGetUserSessionServerResponse::ByteSize() const
 T CMsgGCToGCGetUserSessionServerResponse::Clear()
 T CMsgGCToGCGetUserSessionServerResponse::GetCachedSize() const
 T CMsgGCToGCGetUserSessionServerResponse::GetMetadata() const
 T CMsgGCToGCGetUserSessionServerResponse::IsInitialized() const
 T CMsgGCToGCGetUserSessionServerResponse::MergeFrom(CMsgGCToGCGetUserSessionServerResponse const&)
 T CMsgGCToGCGetUserSessionServerResponse::New() const
 T CMsgGCToGCGetUserSessionServerResponse::SerializeWithCachedSizesToArray(unsigned char*) const
 T CMsgGCToGCGetUserSessionServerResponse::SetCachedSize(int) const
 T CMsgGCToGCGetUserSessionServerResponse::~CMsgGCToGCGetUserSessionServerResponse()
 T CMsgGCToGCGrantSelfMadeItemToAccount::ByteSize() const
 T CMsgGCToGCGrantSelfMadeItemToAccount::Clear()
 T CMsgGCToGCGrantSelfMadeItemToAccount::GetCachedSize() const
 T CMsgGCToGCGrantSelfMadeItemToAccount::GetMetadata() const
 T CMsgGCToGCGrantSelfMadeItemToAccount::IsInitialized() const
 T CMsgGCToGCGrantSelfMadeItemToAccount::MergeFrom(CMsgGCToGCGrantSelfMadeItemToAccount const&)
 T CMsgGCToGCGrantSelfMadeItemToAccount::New() const
 T CMsgGCToGCGrantSelfMadeItemToAccount::SerializeWithCachedSizesToArray(unsigned char*) const
 T CMsgGCToGCGrantSelfMadeItemToAccount::SetCachedSize(int) const
 T CMsgGCToGCGrantSelfMadeItemToAccount::~CMsgGCToGCGrantSelfMadeItemToAccount()
 T CMsgGCToGCIncrementRecruitmentLevel::ByteSize() const
 T CMsgGCToGCIncrementRecruitmentLevel::Clear()
 T CMsgGCToGCIncrementRecruitmentLevel::GetCachedSize() const
 T CMsgGCToGCIncrementRecruitmentLevel::GetMetadata() const
 T CMsgGCToGCIncrementRecruitmentLevel::IsInitialized() const
 T CMsgGCToGCIncrementRecruitmentLevel::MergeFrom(CMsgGCToGCIncrementRecruitmentLevel const&)
 T CMsgGCToGCIncrementRecruitmentLevel::New() const
 T CMsgGCToGCIncrementRecruitmentLevel::SerializeWithCachedSizesToArray(unsigned char*) const
 T CMsgGCToGCIncrementRecruitmentLevel::SetCachedSize(int) const
 T CMsgGCToGCIncrementRecruitmentLevel::~CMsgGCToGCIncrementRecruitmentLevel()
 T CMsgGCToGCPingRequest::ByteSize() const
 T CMsgGCToGCPingRequest::Clear()
 T CMsgGCToGCPingRequest::GetCachedSize() const
 T CMsgGCToGCPingRequest::GetMetadata() const
 T CMsgGCToGCPingRequest::IsInitialized() const
 T CMsgGCToGCPingRequest::MergeFrom(CMsgGCToGCPingRequest const&)
 T CMsgGCToGCPingRequest::New() const
 T CMsgGCToGCPingRequest::SerializeWithCachedSizesToArray(unsigned char*) const
 T CMsgGCToGCPingRequest::SetCachedSize(int) const
 T CMsgGCToGCPingRequest::~CMsgGCToGCPingRequest()
 T CMsgGCToGCPingResponse::ByteSize() const
 T CMsgGCToGCPingResponse::Clear()
 T CMsgGCToGCPingResponse::GetCachedSize() const
 T CMsgGCToGCPingResponse::GetMetadata() const
 T CMsgGCToGCPingResponse::IsInitialized() const
 T CMsgGCToGCPingResponse::MergeFrom(CMsgGCToGCPingResponse const&)
 T CMsgGCToGCPingResponse::New() const
 T CMsgGCToGCPingResponse::SerializeWithCachedSizesToArray(unsigned char*) const
 T CMsgGCToGCPingResponse::SetCachedSize(int) const
 T CMsgGCToGCPingResponse::~CMsgGCToGCPingResponse()
 T CMsgGCToGCSOCacheSubscribe::ByteSize() const
 T CMsgGCToGCSOCacheSubscribe::Clear()
 T CMsgGCToGCSOCacheSubscribe::GetCachedSize() const
 T CMsgGCToGCSOCacheSubscribe::GetMetadata() const
 T CMsgGCToGCSOCacheSubscribe::IsInitialized() const
 T CMsgGCToGCSOCacheSubscribe::MergeFrom(CMsgGCToGCSOCacheSubscribe const&)
 T CMsgGCToGCSOCacheSubscribe::New() const
 T CMsgGCToGCSOCacheSubscribe::SerializeWithCachedSizesToArray(unsigned char*) const
 T CMsgGCToGCSOCacheSubscribe::SetCachedSize(int) const
 T CMsgGCToGCSOCacheSubscribe::~CMsgGCToGCSOCacheSubscribe()
 T CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions::ByteSize() const
 T CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions::Clear()
 T CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions::GetCachedSize() const
 T CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions::GetMetadata() const
 T CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions::IsInitialized() const
 T CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions::MergeFrom(CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions const&)
 T CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions::New() const
 T CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions::SerializeWithCachedSizesToArray(unsigned char*) const
 T CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions::SetCachedSize(int) const
 T CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions::~CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions()
 T CMsgGCToGCSOCacheUnsubscribe::ByteSize() const
 T CMsgGCToGCSOCacheUnsubscribe::Clear()
 T CMsgGCToGCSOCacheUnsubscribe::GetCachedSize() const
 T CMsgGCToGCSOCacheUnsubscribe::GetMetadata() const
 T CMsgGCToGCSOCacheUnsubscribe::IsInitialized() const
 T CMsgGCToGCSOCacheUnsubscribe::MergeFrom(CMsgGCToGCSOCacheUnsubscribe const&)
 T CMsgGCToGCSOCacheUnsubscribe::New() const
 T CMsgGCToGCSOCacheUnsubscribe::SerializeWithCachedSizesToArray(unsigned char*) const
 T CMsgGCToGCSOCacheUnsubscribe::SetCachedSize(int) const
 T CMsgGCToGCSOCacheUnsubscribe::~CMsgGCToGCSOCacheUnsubscribe()
 T CMsgGCToGCThankedByNewUser::ByteSize() const
 T CMsgGCToGCThankedByNewUser::Clear()
 T CMsgGCToGCThankedByNewUser::GetCachedSize() const
 T CMsgGCToGCThankedByNewUser::GetMetadata() const
 T CMsgGCToGCThankedByNewUser::IsInitialized() const
 T CMsgGCToGCThankedByNewUser::MergeFrom(CMsgGCToGCThankedByNewUser const&)
 T CMsgGCToGCThankedByNewUser::New() const
 T CMsgGCToGCThankedByNewUser::SerializeWithCachedSizesToArray(unsigned char*) const
 T CMsgGCToGCThankedByNewUser::SetCachedSize(int) const
 T CMsgGCToGCThankedByNewUser::~CMsgGCToGCThankedByNewUser()
 T CMsgGCUpdateSubGCSessionInfo::ByteSize() const
 T CMsgGCUpdateSubGCSessionInfo::Clear()
 T CMsgGCUpdateSubGCSessionInfo::GetCachedSize() const
 T CMsgGCUpdateSubGCSessionInfo::GetMetadata() const
 T CMsgGCUpdateSubGCSessionInfo::IsInitialized() const
 T CMsgGCUpdateSubGCSessionInfo::MergeFrom(CMsgGCUpdateSubGCSessionInfo const&)
 T CMsgGCUpdateSubGCSessionInfo::New() const
 T CMsgGCUpdateSubGCSessionInfo::SerializeWithCachedSizesToArray(unsigned char*) const
 T CMsgGCUpdateSubGCSessionInfo::SetCachedSize(int) const
 T CMsgGCUpdateSubGCSessionInfo::~CMsgGCUpdateSubGCSessionInfo()
 T CMsgGCUpdateSubGCSessionInfo_CMsgUpdate::ByteSize() const
 T CMsgGCUpdateSubGCSessionInfo_CMsgUpdate::Clear()
 T CMsgGCUpdateSubGCSessionInfo_CMsgUpdate::GetCachedSize() const
 T CMsgGCUpdateSubGCSessionInfo_CMsgUpdate::GetMetadata() const
 T CMsgGCUpdateSubGCSessionInfo_CMsgUpdate::IsInitialized() const
 T CMsgGCUpdateSubGCSessionInfo_CMsgUpdate::MergeFrom(CMsgGCUpdateSubGCSessionInfo_CMsgUpdate const&)
 T CMsgGCUpdateSubGCSessionInfo_CMsgUpdate::New() const
 T CMsgGCUpdateSubGCSessionInfo_CMsgUpdate::SerializeWithCachedSizesToArray(unsigned char*) const
 T CMsgGCUpdateSubGCSessionInfo_CMsgUpdate::SetCachedSize(int) const
 T CMsgGCUpdateSubGCSessionInfo_CMsgUpdate::~CMsgGCUpdateSubGCSessionInfo_CMsgUpdate()
 T CMsgGC_Client2GCEconPreviewDataBlockRequest::ByteSize() const
 T CMsgGC_Client2GCEconPreviewDataBlockRequest::Clear()
 T CMsgGC_Client2GCEconPreviewDataBlockRequest::GetCachedSize() const
 T CMsgGC_Client2GCEconPreviewDataBlockRequest::GetMetadata() const
 T CMsgGC_Client2GCEconPreviewDataBlockRequest::IsInitialized() const
 T CMsgGC_Client2GCEconPreviewDataBlockRequest::MergeFrom(CMsgGC_Client2GCEconPreviewDataBlockRequest const&)
 T CMsgGC_Client2GCEconPreviewDataBlockRequest::New() const
 T CMsgGC_Client2GCEconPreviewDataBlockRequest::SerializeWithCachedSizesToArray(unsigned char*) const
 T CMsgGC_Client2GCEconPreviewDataBlockRequest::SetCachedSize(int) const
 T CMsgGC_Client2GCEconPreviewDataBlockRequest::~CMsgGC_Client2GCEconPreviewDataBlockRequest()
 T CMsgGC_Client2GCEconPreviewDataBlockResponse::ByteSize() const
 T CMsgGC_Client2GCEconPreviewDataBlockResponse::Clear()
 T CMsgGC_Client2GCEconPreviewDataBlockResponse::GetCachedSize() const
 T CMsgGC_Client2GCEconPreviewDataBlockResponse::GetMetadata() const
 T CMsgGC_Client2GCEconPreviewDataBlockResponse::IsInitialized() const
 T CMsgGC_Client2GCEconPreviewDataBlockResponse::MergeFrom(CMsgGC_Client2GCEconPreviewDataBlockResponse const&)
 T CMsgGC_Client2GCEconPreviewDataBlockResponse::New() const
 T CMsgGC_Client2GCEconPreviewDataBlockResponse::SerializeWithCachedSizesToArray(unsigned char*) const
 T CMsgGC_Client2GCEconPreviewDataBlockResponse::SetCachedSize(int) const
 T CMsgGC_Client2GCEconPreviewDataBlockResponse::~CMsgGC_Client2GCEconPreviewDataBlockResponse()
 T CMsgGC_Client_UseServerModificationItem::ByteSize() const
 T CMsgGC_Client_UseServerModificationItem::Clear()
 T CMsgGC_Client_UseServerModificationItem::GetCachedSize() const
 T CMsgGC_Client_UseServerModificationItem::GetMetadata() const
 T CMsgGC_Client_UseServerModificationItem::IsInitialized() const
 T CMsgGC_Client_UseServerModificationItem::MergeFrom(CMsgGC_Client_UseServerModificationItem const&)
 T CMsgGC_Client_UseServerModificationItem::New() const
 T CMsgGC_Client_UseServerModificationItem::SerializeWithCachedSizesToArray(unsigned char*) const
 T CMsgGC_Client_UseServerModificationItem::SetCachedSize(int) const
 T CMsgGC_Client_UseServerModificationItem::~CMsgGC_Client_UseServerModificationItem()
 T CMsgGC_Client_UseServerModificationItem_Response::ByteSize() const
 T CMsgGC_Client_UseServerModificationItem_Response::Clear()
 T CMsgGC_Client_UseServerModificationItem_Response::GetCachedSize() const
 T CMsgGC_Client_UseServerModificationItem_Response::GetMetadata() const
 T CMsgGC_Client_UseServerModificationItem_Response::IsInitialized() const
 T CMsgGC_Client_UseServerModificationItem_Response::MergeFrom(CMsgGC_Client_UseServerModificationItem_Response const&)
 T CMsgGC_Client_UseServerModificationItem_Response::New() const
 T CMsgGC_Client_UseServerModificationItem_Response::SerializeWithCachedSizesToArray(unsigned char*) const
 T CMsgGC_Client_UseServerModificationItem_Response::SetCachedSize(int) const
 T CMsgGC_Client_UseServerModificationItem_Response::~CMsgGC_Client_UseServerModificationItem_Response()
 T CMsgGC_DailyCompetitiveStatsRollup::ByteSize() const
 T CMsgGC_DailyCompetitiveStatsRollup::CMsgGC_DailyCompetitiveStatsRollup()
 T CMsgGC_DailyCompetitiveStatsRollup::Clear()
 T CMsgGC_DailyCompetitiveStatsRollup::GetCachedSize() const
 T CMsgGC_DailyCompetitiveStatsRollup::GetMetadata() const
 T CMsgGC_DailyCompetitiveStatsRollup::IsInitialized() const
 T CMsgGC_DailyCompetitiveStatsRollup::MergeFrom(CMsgGC_DailyCompetitiveStatsRollup const&)
 T CMsgGC_DailyCompetitiveStatsRollup::New() const
 T CMsgGC_DailyCompetitiveStatsRollup::SerializeWithCachedSizesToArray(unsigned char*) const
 T CMsgGC_DailyCompetitiveStatsRollup::SetCachedSize(int) const
 T CMsgGC_DailyCompetitiveStatsRollup::default_instance()
 T CMsgGC_DailyCompetitiveStatsRollup::descriptor()
 T CMsgGC_DailyCompetitiveStatsRollup::~CMsgGC_DailyCompetitiveStatsRollup()
 T CMsgGC_DailyCompetitiveStatsRollup_Response::ByteSize() const
 T CMsgGC_DailyCompetitiveStatsRollup_Response::CMsgGC_DailyCompetitiveStatsRollup_Response()
 T CMsgGC_DailyCompetitiveStatsRollup_Response::Clear()
 T CMsgGC_DailyCompetitiveStatsRollup_Response::GetCachedSize() const
 T CMsgGC_DailyCompetitiveStatsRollup_Response::GetMetadata() const
 T CMsgGC_DailyCompetitiveStatsRollup_Response::IsInitialized() const
 T CMsgGC_DailyCompetitiveStatsRollup_Response::MergeFrom(CMsgGC_DailyCompetitiveStatsRollup_Response const&)
 T CMsgGC_DailyCompetitiveStatsRollup_Response::New() const
 T CMsgGC_DailyCompetitiveStatsRollup_Response::SerializeWithCachedSizesToArray(unsigned char*) const
 T CMsgGC_DailyCompetitiveStatsRollup_Response::SetCachedSize(int) const
 T CMsgGC_DailyCompetitiveStatsRollup_Response::default_instance()
 T CMsgGC_DailyCompetitiveStatsRollup_Response::descriptor()
 T CMsgGC_DailyCompetitiveStatsRollup_Response::~CMsgGC_DailyCompetitiveStatsRollup_Response()
 T CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry::ByteSize() const
 T CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry::Clear()
 T CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry::GetCachedSize() const
 T CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry::GetMetadata() const
 T CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry::IsInitialized() const
 T CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry::MergeFrom(CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry const&)
 T CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry::New() const
 T CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry::SerializeWithCachedSizesToArray(unsigned char*) const
 T CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry::SetCachedSize(int) const
 T CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry::~CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry()
 T CMsgGC_GameServer_AckPolicy::ByteSize() const
 T CMsgGC_GameServer_AckPolicy::Clear()
 T CMsgGC_GameServer_AckPolicy::GetCachedSize() const
 T CMsgGC_GameServer_AckPolicy::GetMetadata() const
 T CMsgGC_GameServer_AckPolicy::IsInitialized() const
 T CMsgGC_GameServer_AckPolicy::MergeFrom(CMsgGC_GameServer_AckPolicy const&)
 T CMsgGC_GameServer_AckPolicy::New() const
 T CMsgGC_GameServer_AckPolicy::SerializeWithCachedSizesToArray(unsigned char*) const
 T CMsgGC_GameServer_AckPolicy::SetCachedSize(int) const
 T CMsgGC_GameServer_AckPolicy::~CMsgGC_GameServer_AckPolicy()
 T CMsgGC_GameServer_AckPolicyResponse::ByteSize() const
 T CMsgGC_GameServer_AckPolicyResponse::Clear()
 T CMsgGC_GameServer_AckPolicyResponse::GetCachedSize() const
 T CMsgGC_GameServer_AckPolicyResponse::GetMetadata() const
 T CMsgGC_GameServer_AckPolicyResponse::IsInitialized() const
 T CMsgGC_GameServer_AckPolicyResponse::MergeFrom(CMsgGC_GameServer_AckPolicyResponse const&)
 T CMsgGC_GameServer_AckPolicyResponse::New() const
 T CMsgGC_GameServer_AckPolicyResponse::SerializeWithCachedSizesToArray(unsigned char*) const
 T CMsgGC_GameServer_AckPolicyResponse::SetCachedSize(int) const
 T CMsgGC_GameServer_AckPolicyResponse::~CMsgGC_GameServer_AckPolicyResponse()
 T CMsgGC_GameServer_AuthChallenge::ByteSize() const
 T CMsgGC_GameServer_AuthChallenge::CMsgGC_GameServer_AuthChallenge()
 T CMsgGC_GameServer_AuthChallenge::Clear()
 T CMsgGC_GameServer_AuthChallenge::GetCachedSize() const
 T CMsgGC_GameServer_AuthChallenge::GetMetadata() const
 T CMsgGC_GameServer_AuthChallenge::IsInitialized() const
 T CMsgGC_GameServer_AuthChallenge::MergeFrom(CMsgGC_GameServer_AuthChallenge const&)
 T CMsgGC_GameServer_AuthChallenge::New() const
 T CMsgGC_GameServer_AuthChallenge::SerializeWithCachedSizesToArray(unsigned char*) const
 T CMsgGC_GameServer_AuthChallenge::SetCachedSize(int) const
 T CMsgGC_GameServer_AuthChallenge::default_instance()
 T CMsgGC_GameServer_AuthChallenge::descriptor()
 T CMsgGC_GameServer_AuthChallenge::~CMsgGC_GameServer_AuthChallenge()
 T CMsgGC_GameServer_AuthChallengeResponse::ByteSize() const
 T CMsgGC_GameServer_AuthChallengeResponse::CMsgGC_GameServer_AuthChallengeResponse()
 T CMsgGC_GameServer_AuthChallengeResponse::Clear()
 T CMsgGC_GameServer_AuthChallengeResponse::GetCachedSize() const
 T CMsgGC_GameServer_AuthChallengeResponse::GetMetadata() const
 T CMsgGC_GameServer_AuthChallengeResponse::IsInitialized() const
 T CMsgGC_GameServer_AuthChallengeResponse::MergeFrom(CMsgGC_GameServer_AuthChallengeResponse const&)
 T CMsgGC_GameServer_AuthChallengeResponse::New() const
 T CMsgGC_GameServer_AuthChallengeResponse::SerializeWithCachedSizesToArray(unsigned char*) const
 T CMsgGC_GameServer_AuthChallengeResponse::SetCachedSize(int) const
 T CMsgGC_GameServer_AuthChallengeResponse::default_instance()
 T CMsgGC_GameServer_AuthChallengeResponse::descriptor()
 T CMsgGC_GameServer_AuthChallengeResponse::~CMsgGC_GameServer_AuthChallengeResponse()
 T CMsgGC_GameServer_AuthResult::ByteSize() const
 T CMsgGC_GameServer_AuthResult::CMsgGC_GameServer_AuthResult()
 T CMsgGC_GameServer_AuthResult::Clear()
 T CMsgGC_GameServer_AuthResult::GetCachedSize() const
 T CMsgGC_GameServer_AuthResult::GetMetadata() const
 T CMsgGC_GameServer_AuthResult::IsInitialized() const
 T CMsgGC_GameServer_AuthResult::MergeFrom(CMsgGC_GameServer_AuthResult const&)
 T CMsgGC_GameServer_AuthResult::New() const
 T CMsgGC_GameServer_AuthResult::SerializeWithCachedSizesToArray(unsigned char*) const
 T CMsgGC_GameServer_AuthResult::SetCachedSize(int) const
 T CMsgGC_GameServer_AuthResult::default_instance()
 T CMsgGC_GameServer_AuthResult::descriptor()
 T CMsgGC_GameServer_AuthResult::~CMsgGC_GameServer_AuthResult()
 T CMsgGC_GameServer_CreateIdentity::ByteSize() const
 T CMsgGC_GameServer_CreateIdentity::Clear()
 T CMsgGC_GameServer_CreateIdentity::GetCachedSize() const
 T CMsgGC_GameServer_CreateIdentity::GetMetadata() const
 T CMsgGC_GameServer_CreateIdentity::IsInitialized() const
 T CMsgGC_GameServer_CreateIdentity::MergeFrom(CMsgGC_GameServer_CreateIdentity const&)
 T CMsgGC_GameServer_CreateIdentity::New() const
 T CMsgGC_GameServer_CreateIdentity::SerializeWithCachedSizesToArray(unsigned char*) const
 T CMsgGC_GameServer_CreateIdentity::SetCachedSize(int) const
 T CMsgGC_GameServer_CreateIdentity::~CMsgGC_GameServer_CreateIdentity()
 T CMsgGC_GameServer_CreateIdentityResponse::ByteSize() const
 T CMsgGC_GameServer_CreateIdentityResponse::Clear()
 T CMsgGC_GameServer_CreateIdentityResponse::GetCachedSize() const
 T CMsgGC_GameServer_CreateIdentityResponse::GetMetadata() const
 T CMsgGC_GameServer_CreateIdentityResponse::IsInitialized() const
 T CMsgGC_GameServer_CreateIdentityResponse::MergeFrom(CMsgGC_GameServer_CreateIdentityResponse const&)
 T CMsgGC_GameServer_CreateIdentityResponse::New() const
 T CMsgGC_GameServer_CreateIdentityResponse::SerializeWithCachedSizesToArray(unsigned char*) const
 T CMsgGC_GameServer_CreateIdentityResponse::SetCachedSize(int) const
 T CMsgGC_GameServer_CreateIdentityResponse::~CMsgGC_GameServer_CreateIdentityResponse()
 T CMsgGC_GameServer_LevelInfo::ByteSize() const
 T CMsgGC_GameServer_LevelInfo::CMsgGC_GameServer_LevelInfo()
 T CMsgGC_GameServer_LevelInfo::Clear()
 T CMsgGC_GameServer_LevelInfo::GetCachedSize() const
 T CMsgGC_GameServer_LevelInfo::GetMetadata() const
 T CMsgGC_GameServer_LevelInfo::IsInitialized() const
 T CMsgGC_GameServer_LevelInfo::MergeFrom(CMsgGC_GameServer_LevelInfo const&)
 T CMsgGC_GameServer_LevelInfo::New() const
 T CMsgGC_GameServer_LevelInfo::SerializeWithCachedSizesToArray(unsigned char*) const
 T CMsgGC_GameServer_LevelInfo::SetCachedSize(int) const
 T CMsgGC_GameServer_LevelInfo::default_instance()
 T CMsgGC_GameServer_LevelInfo::descriptor()
 T CMsgGC_GameServer_LevelInfo::~CMsgGC_GameServer_LevelInfo()
 T CMsgGC_GameServer_List::ByteSize() const
 T CMsgGC_GameServer_List::Clear()
 T CMsgGC_GameServer_List::GetCachedSize() const
 T CMsgGC_GameServer_List::GetMetadata() const
 T CMsgGC_GameServer_List::IsInitialized() const
 T CMsgGC_GameServer_List::MergeFrom(CMsgGC_GameServer_List const&)
 T CMsgGC_GameServer_List::New() const
 T CMsgGC_GameServer_List::SerializeWithCachedSizesToArray(unsigned char*) const
 T CMsgGC_GameServer_List::SetCachedSize(int) const
 T CMsgGC_GameServer_List::~CMsgGC_GameServer_List()
 T CMsgGC_GameServer_ListResponse::ByteSize() const
 T CMsgGC_GameServer_ListResponse::Clear()
 T CMsgGC_GameServer_ListResponse::GetCachedSize() const
 T CMsgGC_GameServer_ListResponse::GetMetadata() const
 T CMsgGC_GameServer_ListResponse::IsInitialized() const
 T CMsgGC_GameServer_ListResponse::MergeFrom(CMsgGC_GameServer_ListResponse const&)
 T CMsgGC_GameServer_ListResponse::New() const
 T CMsgGC_GameServer_ListResponse::SerializeWithCachedSizesToArray(unsigned char*) const
 T CMsgGC_GameServer_ListResponse::SetCachedSize(int) const
 T CMsgGC_GameServer_ListResponse::~CMsgGC_GameServer_ListResponse()
 T CMsgGC_GameServer_ListResponse_GameServerIdentity::ByteSize() const
 T CMsgGC_GameServer_ListResponse_GameServerIdentity::Clear()
 T CMsgGC_GameServer_ListResponse_GameServerIdentity::GetCachedSize() const
 T CMsgGC_GameServer_ListResponse_GameServerIdentity::GetMetadata() const
 T CMsgGC_GameServer_ListResponse_GameServerIdentity::IsInitialized() const
 T CMsgGC_GameServer_ListResponse_GameServerIdentity::MergeFrom(CMsgGC_GameServer_ListResponse_GameServerIdentity const&)
 T CMsgGC_GameServer_ListResponse_GameServerIdentity::New() const
 T CMsgGC_GameServer_ListResponse_GameServerIdentity::SerializeWithCachedSizesToArray(unsigned char*) const
 T CMsgGC_GameServer_ListResponse_GameServerIdentity::SetCachedSize(int) const
 T CMsgGC_GameServer_ListResponse_GameServerIdentity::~CMsgGC_GameServer_ListResponse_GameServerIdentity()
 T CMsgGC_GameServer_ResetIdentity::ByteSize() const
 T CMsgGC_GameServer_ResetIdentity::Clear()
 T CMsgGC_GameServer_ResetIdentity::GetCachedSize() const
 T CMsgGC_GameServer_ResetIdentity::GetMetadata() const
 T CMsgGC_GameServer_ResetIdentity::IsInitialized() const
 T CMsgGC_GameServer_ResetIdentity::MergeFrom(CMsgGC_GameServer_ResetIdentity const&)
 T CMsgGC_GameServer_ResetIdentity::New() const
 T CMsgGC_GameServer_ResetIdentity::SerializeWithCachedSizesToArray(unsigned char*) const
 T CMsgGC_GameServer_ResetIdentity::SetCachedSize(int) const
 T CMsgGC_GameServer_ResetIdentity::~CMsgGC_GameServer_ResetIdentity()
 T CMsgGC_GameServer_ResetIdentityResponse::ByteSize() const
 T CMsgGC_GameServer_ResetIdentityResponse::Clear()
 T CMsgGC_GameServer_ResetIdentityResponse::GetCachedSize() const
 T CMsgGC_GameServer_ResetIdentityResponse::GetMetadata() const
 T CMsgGC_GameServer_ResetIdentityResponse::IsInitialized() const
 T CMsgGC_GameServer_ResetIdentityResponse::MergeFrom(CMsgGC_GameServer_ResetIdentityResponse const&)
 T CMsgGC_GameServer_ResetIdentityResponse::New() const
 T CMsgGC_GameServer_ResetIdentityResponse::SerializeWithCachedSizesToArray(unsigned char*) const
 T CMsgGC_GameServer_ResetIdentityResponse::SetCachedSize(int) const
 T CMsgGC_GameServer_ResetIdentityResponse::~CMsgGC_GameServer_ResetIdentityResponse()
 T CMsgGC_GameServer_ServerModificationItem::ByteSize() const
 T CMsgGC_GameServer_ServerModificationItem::CMsgGC_GameServer_ServerModificationItem()
 T CMsgGC_GameServer_ServerModificationItem::Clear()
 T CMsgGC_GameServer_ServerModificationItem::GetCachedSize() const
 T CMsgGC_GameServer_ServerModificationItem::GetMetadata() const
 T CMsgGC_GameServer_ServerModificationItem::IsInitialized() const
 T CMsgGC_GameServer_ServerModificationItem::MergeFrom(CMsgGC_GameServer_ServerModificationItem const&)
 T CMsgGC_GameServer_ServerModificationItem::New() const
 T CMsgGC_GameServer_ServerModificationItem::SerializeWithCachedSizesToArray(unsigned char*) const
 T CMsgGC_GameServer_ServerModificationItem::SetCachedSize(int) const
 T CMsgGC_GameServer_ServerModificationItem::default_instance()
 T CMsgGC_GameServer_ServerModificationItem::descriptor()
 T CMsgGC_GameServer_ServerModificationItem::~CMsgGC_GameServer_ServerModificationItem()
 T CMsgGC_GameServer_ServerModificationItemExpired::ByteSize() const
 T CMsgGC_GameServer_ServerModificationItemExpired::CMsgGC_GameServer_ServerModificationItemExpired()
 T CMsgGC_GameServer_ServerModificationItemExpired::Clear()
 T CMsgGC_GameServer_ServerModificationItemExpired::GetCachedSize() const
 T CMsgGC_GameServer_ServerModificationItemExpired::GetMetadata() const
 T CMsgGC_GameServer_ServerModificationItemExpired::IsInitialized() const
 T CMsgGC_GameServer_ServerModificationItemExpired::MergeFrom(CMsgGC_GameServer_ServerModificationItemExpired const&)
 T CMsgGC_GameServer_ServerModificationItemExpired::New() const
 T CMsgGC_GameServer_ServerModificationItemExpired::SerializeWithCachedSizesToArray(unsigned char*) const
 T CMsgGC_GameServer_ServerModificationItemExpired::SetCachedSize(int) const
 T CMsgGC_GameServer_ServerModificationItemExpired::default_instance()
 T CMsgGC_GameServer_ServerModificationItemExpired::descriptor()
 T CMsgGC_GameServer_ServerModificationItemExpired::~CMsgGC_GameServer_ServerModificationItemExpired()
 T CMsgGC_GameServer_UseServerModificationItem::ByteSize() const
 T CMsgGC_GameServer_UseServerModificationItem::CMsgGC_GameServer_UseServerModificationItem()
 T CMsgGC_GameServer_UseServerModificationItem::Clear()
 T CMsgGC_GameServer_UseServerModificationItem::GetCachedSize() const
 T CMsgGC_GameServer_UseServerModificationItem::GetMetadata() const
 T CMsgGC_GameServer_UseServerModificationItem::IsInitialized() const
 T CMsgGC_GameServer_UseServerModificationItem::MergeFrom(CMsgGC_GameServer_UseServerModificationItem const&)
 T CMsgGC_GameServer_UseServerModificationItem::New() const
 T CMsgGC_GameServer_UseServerModificationItem::SerializeWithCachedSizesToArray(unsigned char*) const
 T CMsgGC_GameServer_UseServerModificationItem::SetCachedSize(int) const
 T CMsgGC_GameServer_UseServerModificationItem::default_instance()
 T CMsgGC_GameServer_UseServerModificationItem::descriptor()
 T CMsgGC_GameServer_UseServerModificationItem::~CMsgGC_GameServer_UseServerModificationItem()
 T CMsgGC_GameServer_UseServerModificationItem_Response::ByteSize() const
 T CMsgGC_GameServer_UseServerModificationItem_Response::CMsgGC_GameServer_UseServerModificationItem_Response()
 T CMsgGC_GameServer_UseServerModificationItem_Response::Clear()
 T CMsgGC_GameServer_UseServerModificationItem_Response::GetCachedSize() const
 T CMsgGC_GameServer_UseServerModificationItem_Response::GetMetadata() const
 T CMsgGC_GameServer_UseServerModificationItem_Response::IsInitialized() const
 T CMsgGC_GameServer_UseServerModificationItem_Response::MergeFrom(CMsgGC_GameServer_UseServerModificationItem_Response const&)
 T CMsgGC_GameServer_UseServerModificationItem_Response::New() const
 T CMsgGC_GameServer_UseServerModificationItem_Response::SerializeWithCachedSizesToArray(unsigned char*) const
 T CMsgGC_GameServer_UseServerModificationItem_Response::SetCachedSize(int) const
 T CMsgGC_GameServer_UseServerModificationItem_Response::default_instance()
 T CMsgGC_GameServer_UseServerModificationItem_Response::descriptor()
 T CMsgGC_GameServer_UseServerModificationItem_Response::~CMsgGC_GameServer_UseServerModificationItem_Response()
 T CMsgGC_Halloween_GrantItem::ByteSize() const
 T CMsgGC_Halloween_GrantItem::Clear()
 T CMsgGC_Halloween_GrantItem::GetCachedSize() const
 T CMsgGC_Halloween_GrantItem::GetMetadata() const
 T CMsgGC_Halloween_GrantItem::IsInitialized() const
 T CMsgGC_Halloween_GrantItem::MergeFrom(CMsgGC_Halloween_GrantItem const&)
 T CMsgGC_Halloween_GrantItem::New() const
 T CMsgGC_Halloween_GrantItem::SerializeWithCachedSizesToArray(unsigned char*) const
 T CMsgGC_Halloween_GrantItem::SetCachedSize(int) const
 T CMsgGC_Halloween_GrantItem::~CMsgGC_Halloween_GrantItem()
 T CMsgGC_Halloween_GrantItemResponse::ByteSize() const
 T CMsgGC_Halloween_GrantItemResponse::Clear()
 T CMsgGC_Halloween_GrantItemResponse::GetCachedSize() const
 T CMsgGC_Halloween_GrantItemResponse::GetMetadata() const
 T CMsgGC_Halloween_GrantItemResponse::IsInitialized() const
 T CMsgGC_Halloween_GrantItemResponse::MergeFrom(CMsgGC_Halloween_GrantItemResponse const&)
 T CMsgGC_Halloween_GrantItemResponse::New() const
 T CMsgGC_Halloween_GrantItemResponse::SerializeWithCachedSizesToArray(unsigned char*) const
 T CMsgGC_Halloween_GrantItemResponse::SetCachedSize(int) const
 T CMsgGC_Halloween_GrantItemResponse::~CMsgGC_Halloween_GrantItemResponse()
 T CMsgGC_Halloween_ItemClaimed::ByteSize() const
 T CMsgGC_Halloween_ItemClaimed::Clear()
 T CMsgGC_Halloween_ItemClaimed::GetCachedSize() const
 T CMsgGC_Halloween_ItemClaimed::GetMetadata() const
 T CMsgGC_Halloween_ItemClaimed::IsInitialized() const
 T CMsgGC_Halloween_ItemClaimed::MergeFrom(CMsgGC_Halloween_ItemClaimed const&)
 T CMsgGC_Halloween_ItemClaimed::New() const
 T CMsgGC_Halloween_ItemClaimed::SerializeWithCachedSizesToArray(unsigned char*) const
 T CMsgGC_Halloween_ItemClaimed::SetCachedSize(int) const
 T CMsgGC_Halloween_ItemClaimed::~CMsgGC_Halloween_ItemClaimed()
 T CMsgGC_Halloween_ReservedItem::ByteSize() const
 T CMsgGC_Halloween_ReservedItem::Clear()
 T CMsgGC_Halloween_ReservedItem::GetCachedSize() const
 T CMsgGC_Halloween_ReservedItem::GetMetadata() const
 T CMsgGC_Halloween_ReservedItem::IsInitialized() const
 T CMsgGC_Halloween_ReservedItem::MergeFrom(CMsgGC_Halloween_ReservedItem const&)
 T CMsgGC_Halloween_ReservedItem::New() const
 T CMsgGC_Halloween_ReservedItem::SerializeWithCachedSizesToArray(unsigned char*) const
 T CMsgGC_Halloween_ReservedItem::SetCachedSize(int) const
 T CMsgGC_Halloween_ReservedItem::~CMsgGC_Halloween_ReservedItem()
 T CMsgGC_KickPlayerFromLobby::ByteSize() const
 T CMsgGC_KickPlayerFromLobby::CMsgGC_KickPlayerFromLobby()
 T CMsgGC_KickPlayerFromLobby::Clear()
 T CMsgGC_KickPlayerFromLobby::GetCachedSize() const
 T CMsgGC_KickPlayerFromLobby::GetMetadata() const
 T CMsgGC_KickPlayerFromLobby::IsInitialized() const
 T CMsgGC_KickPlayerFromLobby::MergeFrom(CMsgGC_KickPlayerFromLobby const&)
 T CMsgGC_KickPlayerFromLobby::New() const
 T CMsgGC_KickPlayerFromLobby::SerializeWithCachedSizesToArray(unsigned char*) const
 T CMsgGC_KickPlayerFromLobby::SetCachedSize(int) const
 T CMsgGC_KickPlayerFromLobby::default_instance()
 T CMsgGC_KickPlayerFromLobby::descriptor()
 T CMsgGC_KickPlayerFromLobby::~CMsgGC_KickPlayerFromLobby()
 T CMsgGC_Match_Result::ByteSize() const
 T CMsgGC_Match_Result::CMsgGC_Match_Result()
 T CMsgGC_Match_Result::Clear()
 T CMsgGC_Match_Result::GetCachedSize() const
 T CMsgGC_Match_Result::GetMetadata() const
 T CMsgGC_Match_Result::IsInitialized() const
 T CMsgGC_Match_Result::MergeFrom(CMsgGC_Match_Result const&)
 T CMsgGC_Match_Result::New() const
 T CMsgGC_Match_Result::SerializeWithCachedSizesToArray(unsigned char*) const
 T CMsgGC_Match_Result::SetCachedSize(int) const
 T CMsgGC_Match_Result::default_instance()
 T CMsgGC_Match_Result::descriptor()
 T CMsgGC_Match_Result::~CMsgGC_Match_Result()
 T CMsgGC_Match_ResultResponse::ByteSize() const
 T CMsgGC_Match_ResultResponse::CMsgGC_Match_ResultResponse()
 T CMsgGC_Match_ResultResponse::Clear()
 T CMsgGC_Match_ResultResponse::GetCachedSize() const
 T CMsgGC_Match_ResultResponse::GetMetadata() const
 T CMsgGC_Match_ResultResponse::IsInitialized() const
 T CMsgGC_Match_ResultResponse::MergeFrom(CMsgGC_Match_ResultResponse const&)
 T CMsgGC_Match_ResultResponse::New() const
 T CMsgGC_Match_ResultResponse::SerializeWithCachedSizesToArray(unsigned char*) const
 T CMsgGC_Match_ResultResponse::SetCachedSize(int) const
 T CMsgGC_Match_ResultResponse::default_instance()
 T CMsgGC_Match_ResultResponse::descriptor()
 T CMsgGC_Match_ResultResponse::~CMsgGC_Match_ResultResponse()
 T CMsgGC_Match_Result_Player::ByteSize() const
 T CMsgGC_Match_Result_Player::CMsgGC_Match_Result_Player()
 T CMsgGC_Match_Result_Player::Clear()
 T CMsgGC_Match_Result_Player::GetCachedSize() const
 T CMsgGC_Match_Result_Player::GetMetadata() const
 T CMsgGC_Match_Result_Player::IsInitialized() const
 T CMsgGC_Match_Result_Player::MergeFrom(CMsgGC_Match_Result_Player const&)
 T CMsgGC_Match_Result_Player::New() const
 T CMsgGC_Match_Result_Player::SerializeWithCachedSizesToArray(unsigned char*) const
 T CMsgGC_Match_Result_Player::SetCachedSize(int) const
 T CMsgGC_Match_Result_Player::~CMsgGC_Match_Result_Player()
 T CMsgGC_PickupItemEligibility_Query::ByteSize() const
 T CMsgGC_PickupItemEligibility_Query::Clear()
 T CMsgGC_PickupItemEligibility_Query::GetCachedSize() const
 T CMsgGC_PickupItemEligibility_Query::GetMetadata() const
 T CMsgGC_PickupItemEligibility_Query::IsInitialized() const
 T CMsgGC_PickupItemEligibility_Query::MergeFrom(CMsgGC_PickupItemEligibility_Query const&)
 T CMsgGC_PickupItemEligibility_Query::New() const
 T CMsgGC_PickupItemEligibility_Query::SerializeWithCachedSizesToArray(unsigned char*) const
 T CMsgGC_PickupItemEligibility_Query::SetCachedSize(int) const
 T CMsgGC_PickupItemEligibility_Query::~CMsgGC_PickupItemEligibility_Query()
 T CMsgGC_PickupItemEligibility_QueryResponse::ByteSize() const
 T CMsgGC_PickupItemEligibility_QueryResponse::Clear()
 T CMsgGC_PickupItemEligibility_QueryResponse::GetCachedSize() const
 T CMsgGC_PickupItemEligibility_QueryResponse::GetMetadata() const
 T CMsgGC_PickupItemEligibility_QueryResponse::IsInitialized() const
 T CMsgGC_PickupItemEligibility_QueryResponse::MergeFrom(CMsgGC_PickupItemEligibility_QueryResponse const&)
 T CMsgGC_PickupItemEligibility_QueryResponse::New() const
 T CMsgGC_PickupItemEligibility_QueryResponse::SerializeWithCachedSizesToArray(unsigned char*) const
 T CMsgGC_PickupItemEligibility_QueryResponse::SetCachedSize(int) const
 T CMsgGC_PickupItemEligibility_QueryResponse::~CMsgGC_PickupItemEligibility_QueryResponse()
 T CMsgGC_ReportPlayer::ByteSize() const
 T CMsgGC_ReportPlayer::Clear()
 T CMsgGC_ReportPlayer::GetCachedSize() const
 T CMsgGC_ReportPlayer::GetMetadata() const
 T CMsgGC_ReportPlayer::IsInitialized() const
 T CMsgGC_ReportPlayer::MergeFrom(CMsgGC_ReportPlayer const&)
 T CMsgGC_ReportPlayer::New() const
 T CMsgGC_ReportPlayer::SerializeWithCachedSizesToArray(unsigned char*) const
 T CMsgGC_ReportPlayer::SetCachedSize(int) const
 T CMsgGC_ReportPlayer::~CMsgGC_ReportPlayer()
 T CMsgGC_TFVoteKickPlayerRequest::ByteSize() const
 T CMsgGC_TFVoteKickPlayerRequest::CMsgGC_TFVoteKickPlayerRequest()
 T CMsgGC_TFVoteKickPlayerRequest::Clear()
 T CMsgGC_TFVoteKickPlayerRequest::GetCachedSize() const
 T CMsgGC_TFVoteKickPlayerRequest::GetMetadata() const
 T CMsgGC_TFVoteKickPlayerRequest::IsInitialized() const
 T CMsgGC_TFVoteKickPlayerRequest::MergeFrom(CMsgGC_TFVoteKickPlayerRequest const&)
 T CMsgGC_TFVoteKickPlayerRequest::New() const
 T CMsgGC_TFVoteKickPlayerRequest::SerializeWithCachedSizesToArray(unsigned char*) const
 T CMsgGC_TFVoteKickPlayerRequest::SetCachedSize(int) const
 T CMsgGC_TFVoteKickPlayerRequest::default_instance()
 T CMsgGC_TFVoteKickPlayerRequest::descriptor()
 T CMsgGC_TFVoteKickPlayerRequest::~CMsgGC_TFVoteKickPlayerRequest()
 T CMsgGC_VoteKickPlayerRequestResponse::ByteSize() const
 T CMsgGC_VoteKickPlayerRequestResponse::CMsgGC_VoteKickPlayerRequestResponse()
 T CMsgGC_VoteKickPlayerRequestResponse::Clear()
 T CMsgGC_VoteKickPlayerRequestResponse::GetCachedSize() const
 T CMsgGC_VoteKickPlayerRequestResponse::GetMetadata() const
 T CMsgGC_VoteKickPlayerRequestResponse::IsInitialized() const
 T CMsgGC_VoteKickPlayerRequestResponse::MergeFrom(CMsgGC_VoteKickPlayerRequestResponse const&)
 T CMsgGC_VoteKickPlayerRequestResponse::New() const
 T CMsgGC_VoteKickPlayerRequestResponse::SerializeWithCachedSizesToArray(unsigned char*) const
 T CMsgGC_VoteKickPlayerRequestResponse::SetCachedSize(int) const
 T CMsgGC_VoteKickPlayerRequestResponse::default_instance()
 T CMsgGC_VoteKickPlayerRequestResponse::descriptor()
 T CMsgGC_VoteKickPlayerRequestResponse::~CMsgGC_VoteKickPlayerRequestResponse()
 T CMsgGameServerKickingLobby::ByteSize() const
 T CMsgGameServerKickingLobby::CMsgGameServerKickingLobby()
 T CMsgGameServerKickingLobby::Clear()
 T CMsgGameServerKickingLobby::GetCachedSize() const
 T CMsgGameServerKickingLobby::GetMetadata() const
 T CMsgGameServerKickingLobby::IsInitialized() const
 T CMsgGameServerKickingLobby::MergeFrom(CMsgGameServerKickingLobby const&)
 T CMsgGameServerKickingLobby::New() const
 T CMsgGameServerKickingLobby::SerializeWithCachedSizesToArray(unsigned char*) const
 T CMsgGameServerKickingLobby::SetCachedSize(int) const
 T CMsgGameServerKickingLobby::default_instance()
 T CMsgGameServerKickingLobby::descriptor()
 T CMsgGameServerKickingLobby::~CMsgGameServerKickingLobby()
 T CMsgGameServerKickingLobbyResponse::ByteSize() const
 T CMsgGameServerKickingLobbyResponse::CMsgGameServerKickingLobbyResponse()
 T CMsgGameServerKickingLobbyResponse::Clear()
 T CMsgGameServerKickingLobbyResponse::GetCachedSize() const
 T CMsgGameServerKickingLobbyResponse::GetMetadata() const
 T CMsgGameServerKickingLobbyResponse::IsInitialized() const
 T CMsgGameServerKickingLobbyResponse::MergeFrom(CMsgGameServerKickingLobbyResponse const&)
 T CMsgGameServerKickingLobbyResponse::New() const
 T CMsgGameServerKickingLobbyResponse::SerializeWithCachedSizesToArray(unsigned char*) const
 T CMsgGameServerKickingLobbyResponse::SetCachedSize(int) const
 T CMsgGameServerKickingLobbyResponse::default_instance()
 T CMsgGameServerKickingLobbyResponse::descriptor()
 T CMsgGameServerKickingLobbyResponse::~CMsgGameServerKickingLobbyResponse()
 T CMsgGameServerMatchmakingStatus::ByteSize() const
 T CMsgGameServerMatchmakingStatus::CMsgGameServerMatchmakingStatus()
 T CMsgGameServerMatchmakingStatus::Clear()
 T CMsgGameServerMatchmakingStatus::GetCachedSize() const
 T CMsgGameServerMatchmakingStatus::GetMetadata() const
 T CMsgGameServerMatchmakingStatus::IsInitialized() const
 T CMsgGameServerMatchmakingStatus::MergeFrom(CMsgGameServerMatchmakingStatus const&)
 T CMsgGameServerMatchmakingStatus::New() const
 T CMsgGameServerMatchmakingStatus::SerializeWithCachedSizesToArray(unsigned char*) const
 T CMsgGameServerMatchmakingStatus::SetCachedSize(int) const
 T CMsgGameServerMatchmakingStatus::SharedDtor()
 T CMsgGameServerMatchmakingStatus::default_instance()
 T CMsgGameServerMatchmakingStatus::descriptor()
 T CMsgGameServerMatchmakingStatus::~CMsgGameServerMatchmakingStatus()
 T CMsgGameServerMatchmakingStatus_Event_descriptor()
 T CMsgGameServerMatchmakingStatus_Player::ByteSize() const
 T CMsgGameServerMatchmakingStatus_Player::CMsgGameServerMatchmakingStatus_Player()
 T CMsgGameServerMatchmakingStatus_Player::Clear()
 T CMsgGameServerMatchmakingStatus_Player::GetCachedSize() const
 T CMsgGameServerMatchmakingStatus_Player::GetMetadata() const
 T CMsgGameServerMatchmakingStatus_Player::IsInitialized() const
 T CMsgGameServerMatchmakingStatus_Player::MergeFrom(CMsgGameServerMatchmakingStatus_Player const&)
 T CMsgGameServerMatchmakingStatus_Player::New() const
 T CMsgGameServerMatchmakingStatus_Player::SerializeWithCachedSizesToArray(unsigned char*) const
 T CMsgGameServerMatchmakingStatus_Player::SetCachedSize(int) const
 T CMsgGameServerMatchmakingStatus_Player::~CMsgGameServerMatchmakingStatus_Player()
 T CMsgHalloween_Merasmus2012::ByteSize() const
 T CMsgHalloween_Merasmus2012::CMsgHalloween_Merasmus2012()
 T CMsgHalloween_Merasmus2012::Clear()
 T CMsgHalloween_Merasmus2012::GetCachedSize() const
 T CMsgHalloween_Merasmus2012::GetMetadata() const
 T CMsgHalloween_Merasmus2012::IsInitialized() const
 T CMsgHalloween_Merasmus2012::MergeFrom(CMsgHalloween_Merasmus2012 const&)
 T CMsgHalloween_Merasmus2012::New() const
 T CMsgHalloween_Merasmus2012::SerializeWithCachedSizesToArray(unsigned char*) const
 T CMsgHalloween_Merasmus2012::SetCachedSize(int) const
 T CMsgHalloween_Merasmus2012::default_instance()
 T CMsgHalloween_Merasmus2012::descriptor()
 T CMsgHalloween_Merasmus2012::~CMsgHalloween_Merasmus2012()
 T CMsgHalloween_ServerBossEvent::ByteSize() const
 T CMsgHalloween_ServerBossEvent::Clear()
 T CMsgHalloween_ServerBossEvent::GetCachedSize() const
 T CMsgHalloween_ServerBossEvent::GetMetadata() const
 T CMsgHalloween_ServerBossEvent::IsInitialized() const
 T CMsgHalloween_ServerBossEvent::MergeFrom(CMsgHalloween_ServerBossEvent const&)
 T CMsgHalloween_ServerBossEvent::New() const
 T CMsgHalloween_ServerBossEvent::SerializeWithCachedSizesToArray(unsigned char*) const
 T CMsgHalloween_ServerBossEvent::SetCachedSize(int) const
 T CMsgHalloween_ServerBossEvent::~CMsgHalloween_ServerBossEvent()
 T CMsgHttpRequest::ByteSize() const
 T CMsgHttpRequest::Clear()
 T CMsgHttpRequest::GetCachedSize() const
 T CMsgHttpRequest::GetMetadata() const
 T CMsgHttpRequest::IsInitialized() const
 T CMsgHttpRequest::MergeFrom(CMsgHttpRequest const&)
 T CMsgHttpRequest::New() const
 T CMsgHttpRequest::SerializeWithCachedSizesToArray(unsigned char*) const
 T CMsgHttpRequest::SetCachedSize(int) const
 T CMsgHttpRequest::SharedDtor()
 T CMsgHttpRequest::~CMsgHttpRequest()
 T CMsgHttpRequest_QueryParam::ByteSize() const
 T CMsgHttpRequest_QueryParam::Clear()
 T CMsgHttpRequest_QueryParam::GetCachedSize() const
 T CMsgHttpRequest_QueryParam::GetMetadata() const
 T CMsgHttpRequest_QueryParam::IsInitialized() const
 T CMsgHttpRequest_QueryParam::MergeFrom(CMsgHttpRequest_QueryParam const&)
 T CMsgHttpRequest_QueryParam::New() const
 T CMsgHttpRequest_QueryParam::SerializeWithCachedSizesToArray(unsigned char*) const
 T CMsgHttpRequest_QueryParam::SetCachedSize(int) const
 T CMsgHttpRequest_QueryParam::SharedDtor()
 T CMsgHttpRequest_QueryParam::~CMsgHttpRequest_QueryParam()
 T CMsgHttpRequest_RequestHeader::ByteSize() const
 T CMsgHttpRequest_RequestHeader::Clear()
 T CMsgHttpRequest_RequestHeader::GetCachedSize() const
 T CMsgHttpRequest_RequestHeader::GetMetadata() const
 T CMsgHttpRequest_RequestHeader::IsInitialized() const
 T CMsgHttpRequest_RequestHeader::MergeFrom(CMsgHttpRequest_RequestHeader const&)
 T CMsgHttpRequest_RequestHeader::New() const
 T CMsgHttpRequest_RequestHeader::SerializeWithCachedSizesToArray(unsigned char*) const
 T CMsgHttpRequest_RequestHeader::SetCachedSize(int) const
 T CMsgHttpRequest_RequestHeader::SharedDtor()
 T CMsgHttpRequest_RequestHeader::~CMsgHttpRequest_RequestHeader()
 T CMsgHttpResponse::ByteSize() const
 T CMsgHttpResponse::Clear()
 T CMsgHttpResponse::GetCachedSize() const
 T CMsgHttpResponse::GetMetadata() const
 T CMsgHttpResponse::IsInitialized() const
 T CMsgHttpResponse::MergeFrom(CMsgHttpResponse const&)
 T CMsgHttpResponse::New() const
 T CMsgHttpResponse::SerializeWithCachedSizesToArray(unsigned char*) const
 T CMsgHttpResponse::SetCachedSize(int) const
 T CMsgHttpResponse::~CMsgHttpResponse()
 T CMsgHttpResponse_ResponseHeader::ByteSize() const
 T CMsgHttpResponse_ResponseHeader::Clear()
 T CMsgHttpResponse_ResponseHeader::GetCachedSize() const
 T CMsgHttpResponse_ResponseHeader::GetMetadata() const
 T CMsgHttpResponse_ResponseHeader::IsInitialized() const
 T CMsgHttpResponse_ResponseHeader::MergeFrom(CMsgHttpResponse_ResponseHeader const&)
 T CMsgHttpResponse_ResponseHeader::New() const
 T CMsgHttpResponse_ResponseHeader::SerializeWithCachedSizesToArray(unsigned char*) const
 T CMsgHttpResponse_ResponseHeader::SetCachedSize(int) const
 T CMsgHttpResponse_ResponseHeader::SharedDtor()
 T CMsgHttpResponse_ResponseHeader::~CMsgHttpResponse_ResponseHeader()
 T CMsgIncrementKillCountAttribute::ByteSize() const
 T CMsgIncrementKillCountAttribute::CMsgIncrementKillCountAttribute()
 T CMsgIncrementKillCountAttribute::Clear()
 T CMsgIncrementKillCountAttribute::GetCachedSize() const
 T CMsgIncrementKillCountAttribute::GetMetadata() const
 T CMsgIncrementKillCountAttribute::IsInitialized() const
 T CMsgIncrementKillCountAttribute::MergeFrom(CMsgIncrementKillCountAttribute const&)
 T CMsgIncrementKillCountAttribute::New() const
 T CMsgIncrementKillCountAttribute::SerializeWithCachedSizesToArray(unsigned char*) const
 T CMsgIncrementKillCountAttribute::SetCachedSize(int) const
 T CMsgIncrementKillCountAttribute::default_instance()
 T CMsgIncrementKillCountAttribute::descriptor()
 T CMsgIncrementKillCountAttribute::~CMsgIncrementKillCountAttribute()
 T CMsgIncrementKillCountAttribute_Multiple::ByteSize() const
 T CMsgIncrementKillCountAttribute_Multiple::CMsgIncrementKillCountAttribute_Multiple()
 T CMsgIncrementKillCountAttribute_Multiple::Clear()
 T CMsgIncrementKillCountAttribute_Multiple::GetCachedSize() const
 T CMsgIncrementKillCountAttribute_Multiple::GetMetadata() const
 T CMsgIncrementKillCountAttribute_Multiple::IsInitialized() const
 T CMsgIncrementKillCountAttribute_Multiple::MergeFrom(CMsgIncrementKillCountAttribute_Multiple const&)
 T CMsgIncrementKillCountAttribute_Multiple::New() const
 T CMsgIncrementKillCountAttribute_Multiple::SerializeWithCachedSizesToArray(unsigned char*) const
 T CMsgIncrementKillCountAttribute_Multiple::SetCachedSize(int) const
 T CMsgIncrementKillCountAttribute_Multiple::default_instance()
 T CMsgIncrementKillCountAttribute_Multiple::descriptor()
 T CMsgIncrementKillCountAttribute_Multiple::~CMsgIncrementKillCountAttribute_Multiple()
 T CMsgInvitationCreated::ByteSize() const
 T CMsgInvitationCreated::Clear()
 T CMsgInvitationCreated::GetCachedSize() const
 T CMsgInvitationCreated::GetMetadata() const
 T CMsgInvitationCreated::IsInitialized() const
 T CMsgInvitationCreated::MergeFrom(CMsgInvitationCreated const&)
 T CMsgInvitationCreated::New() const
 T CMsgInvitationCreated::SerializeWithCachedSizesToArray(unsigned char*) const
 T CMsgInvitationCreated::SetCachedSize(int) const
 T CMsgInvitationCreated::~CMsgInvitationCreated()
 T CMsgInviteToParty::ByteSize() const
 T CMsgInviteToParty::Clear()
 T CMsgInviteToParty::GetCachedSize() const
 T CMsgInviteToParty::GetMetadata() const
 T CMsgInviteToParty::IsInitialized() const
 T CMsgInviteToParty::MergeFrom(CMsgInviteToParty const&)
 T CMsgInviteToParty::New() const
 T CMsgInviteToParty::SerializeWithCachedSizesToArray(unsigned char*) const
 T CMsgInviteToParty::SetCachedSize(int) const
 T CMsgInviteToParty::~CMsgInviteToParty()
 T CMsgItemAcknowledged::ByteSize() const
 T CMsgItemAcknowledged::CMsgItemAcknowledged()
 T CMsgItemAcknowledged::Clear()
 T CMsgItemAcknowledged::GetCachedSize() const
 T CMsgItemAcknowledged::GetMetadata() const
 T CMsgItemAcknowledged::IsInitialized() const
 T CMsgItemAcknowledged::MergeFrom(CMsgItemAcknowledged const&)
 T CMsgItemAcknowledged::New() const
 T CMsgItemAcknowledged::SerializeWithCachedSizesToArray(unsigned char*) const
 T CMsgItemAcknowledged::SetCachedSize(int) const
 T CMsgItemAcknowledged::default_instance()
 T CMsgItemAcknowledged::descriptor()
 T CMsgItemAcknowledged::~CMsgItemAcknowledged()
 T CMsgKickFromParty::ByteSize() const
 T CMsgKickFromParty::Clear()
 T CMsgKickFromParty::GetCachedSize() const
 T CMsgKickFromParty::GetMetadata() const
 T CMsgKickFromParty::IsInitialized() const
 T CMsgKickFromParty::MergeFrom(CMsgKickFromParty const&)
 T CMsgKickFromParty::New() const
 T CMsgKickFromParty::SerializeWithCachedSizesToArray(unsigned char*) const
 T CMsgKickFromParty::SetCachedSize(int) const
 T CMsgKickFromParty::~CMsgKickFromParty()
 T CMsgKickedFromMatchmakingQueue::ByteSize() const
 T CMsgKickedFromMatchmakingQueue::Clear()
 T CMsgKickedFromMatchmakingQueue::GetCachedSize() const
 T CMsgKickedFromMatchmakingQueue::GetMetadata() const
 T CMsgKickedFromMatchmakingQueue::IsInitialized() const
 T CMsgKickedFromMatchmakingQueue::MergeFrom(CMsgKickedFromMatchmakingQueue const&)
 T CMsgKickedFromMatchmakingQueue::New() const
 T CMsgKickedFromMatchmakingQueue::SerializeWithCachedSizesToArray(unsigned char*) const
 T CMsgKickedFromMatchmakingQueue::SetCachedSize(int) const
 T CMsgKickedFromMatchmakingQueue::~CMsgKickedFromMatchmakingQueue()
 T CMsgLANServerAvailable::ByteSize() const
 T CMsgLANServerAvailable::Clear()
 T CMsgLANServerAvailable::GetCachedSize() const
 T CMsgLANServerAvailable::GetMetadata() const
 T CMsgLANServerAvailable::IsInitialized() const
 T CMsgLANServerAvailable::MergeFrom(CMsgLANServerAvailable const&)
 T CMsgLANServerAvailable::New() const
 T CMsgLANServerAvailable::SerializeWithCachedSizesToArray(unsigned char*) const
 T CMsgLANServerAvailable::SetCachedSize(int) const
 T CMsgLANServerAvailable::~CMsgLANServerAvailable()
 T CMsgLeaveGameAndPrepareToJoinParty::ByteSize() const
 T CMsgLeaveGameAndPrepareToJoinParty::Clear()
 T CMsgLeaveGameAndPrepareToJoinParty::GetCachedSize() const
 T CMsgLeaveGameAndPrepareToJoinParty::GetMetadata() const
 T CMsgLeaveGameAndPrepareToJoinParty::IsInitialized() const
 T CMsgLeaveGameAndPrepareToJoinParty::MergeFrom(CMsgLeaveGameAndPrepareToJoinParty const&)
 T CMsgLeaveGameAndPrepareToJoinParty::New() const
 T CMsgLeaveGameAndPrepareToJoinParty::SerializeWithCachedSizesToArray(unsigned char*) const
 T CMsgLeaveGameAndPrepareToJoinParty::SetCachedSize(int) const
 T CMsgLeaveGameAndPrepareToJoinParty::~CMsgLeaveGameAndPrepareToJoinParty()
 T CMsgLeaveParty::ByteSize() const
 T CMsgLeaveParty::Clear()
 T CMsgLeaveParty::GetCachedSize() const
 T CMsgLeaveParty::GetMetadata() const
 T CMsgLeaveParty::IsInitialized() const
 T CMsgLeaveParty::MergeFrom(CMsgLeaveParty const&)
 T CMsgLeaveParty::New() const
 T CMsgLeaveParty::SerializeWithCachedSizesToArray(unsigned char*) const
 T CMsgLeaveParty::SetCachedSize(int) const
 T CMsgLeaveParty::~CMsgLeaveParty()
 T CMsgLookupMultipleAccountNames::ByteSize() const
 T CMsgLookupMultipleAccountNames::Clear()
 T CMsgLookupMultipleAccountNames::GetCachedSize() const
 T CMsgLookupMultipleAccountNames::GetMetadata() const
 T CMsgLookupMultipleAccountNames::IsInitialized() const
 T CMsgLookupMultipleAccountNames::MergeFrom(CMsgLookupMultipleAccountNames const&)
 T CMsgLookupMultipleAccountNames::New() const
 T CMsgLookupMultipleAccountNames::SerializeWithCachedSizesToArray(unsigned char*) const
 T CMsgLookupMultipleAccountNames::SetCachedSize(int) const
 T CMsgLookupMultipleAccountNames::~CMsgLookupMultipleAccountNames()
 T CMsgLookupMultipleAccountNamesResponse::ByteSize() const
 T CMsgLookupMultipleAccountNamesResponse::Clear()
 T CMsgLookupMultipleAccountNamesResponse::GetCachedSize() const
 T CMsgLookupMultipleAccountNamesResponse::GetMetadata() const
 T CMsgLookupMultipleAccountNamesResponse::IsInitialized() const
 T CMsgLookupMultipleAccountNamesResponse::MergeFrom(CMsgLookupMultipleAccountNamesResponse const&)
 T CMsgLookupMultipleAccountNamesResponse::New() const
 T CMsgLookupMultipleAccountNamesResponse::SerializeWithCachedSizesToArray(unsigned char*) const
 T CMsgLookupMultipleAccountNamesResponse::SetCachedSize(int) const
 T CMsgLookupMultipleAccountNamesResponse::~CMsgLookupMultipleAccountNamesResponse()
 T CMsgLookupMultipleAccountNamesResponse_Account::ByteSize() const
 T CMsgLookupMultipleAccountNamesResponse_Account::Clear()
 T CMsgLookupMultipleAccountNamesResponse_Account::GetCachedSize() const
 T CMsgLookupMultipleAccountNamesResponse_Account::GetMetadata() const
 T CMsgLookupMultipleAccountNamesResponse_Account::IsInitialized() const
 T CMsgLookupMultipleAccountNamesResponse_Account::MergeFrom(CMsgLookupMultipleAccountNamesResponse_Account const&)
 T CMsgLookupMultipleAccountNamesResponse_Account::New() const
 T CMsgLookupMultipleAccountNamesResponse_Account::SerializeWithCachedSizesToArray(unsigned char*) const
 T CMsgLookupMultipleAccountNamesResponse_Account::SetCachedSize(int) const
 T CMsgLookupMultipleAccountNamesResponse_Account::~CMsgLookupMultipleAccountNamesResponse_Account()
 T CMsgMatchSearchCriteria::ByteSize() const
 T CMsgMatchSearchCriteria::Clear()
 T CMsgMatchSearchCriteria::GetCachedSize() const
 T CMsgMatchSearchCriteria::GetMetadata() const
 T CMsgMatchSearchCriteria::IsInitialized() const
 T CMsgMatchSearchCriteria::MergeFrom(CMsgMatchSearchCriteria const&)
 T CMsgMatchSearchCriteria::New() const
 T CMsgMatchSearchCriteria::SerializeWithCachedSizesToArray(unsigned char*) const
 T CMsgMatchSearchCriteria::SetCachedSize(int) const
 T CMsgMatchSearchCriteria::~CMsgMatchSearchCriteria()
 T CMsgMatchmakingProgress::ByteSize() const
 T CMsgMatchmakingProgress::Clear()
 T CMsgMatchmakingProgress::GetCachedSize() const
 T CMsgMatchmakingProgress::GetMetadata() const
 T CMsgMatchmakingProgress::IsInitialized() const
 T CMsgMatchmakingProgress::MergeFrom(CMsgMatchmakingProgress const&)
 T CMsgMatchmakingProgress::New() const
 T CMsgMatchmakingProgress::SerializeWithCachedSizesToArray(unsigned char*) const
 T CMsgMatchmakingProgress::SetCachedSize(int) const
 T CMsgMatchmakingProgress::~CMsgMatchmakingProgress()
 T CMsgMatchmakingSearchCountRequest::ByteSize() const
 T CMsgMatchmakingSearchCountRequest::Clear()
 T CMsgMatchmakingSearchCountRequest::GetCachedSize() const
 T CMsgMatchmakingSearchCountRequest::GetMetadata() const
 T CMsgMatchmakingSearchCountRequest::IsInitialized() const
 T CMsgMatchmakingSearchCountRequest::MergeFrom(CMsgMatchmakingSearchCountRequest const&)
 T CMsgMatchmakingSearchCountRequest::New() const
 T CMsgMatchmakingSearchCountRequest::SerializeWithCachedSizesToArray(unsigned char*) const
 T CMsgMatchmakingSearchCountRequest::SetCachedSize(int) const
 T CMsgMatchmakingSearchCountRequest::~CMsgMatchmakingSearchCountRequest()
 T CMsgMatchmakingSearchCountResponse::ByteSize() const
 T CMsgMatchmakingSearchCountResponse::Clear()
 T CMsgMatchmakingSearchCountResponse::GetCachedSize() const
 T CMsgMatchmakingSearchCountResponse::GetMetadata() const
 T CMsgMatchmakingSearchCountResponse::IsInitialized() const
 T CMsgMatchmakingSearchCountResponse::MergeFrom(CMsgMatchmakingSearchCountResponse const&)
 T CMsgMatchmakingSearchCountResponse::New() const
 T CMsgMatchmakingSearchCountResponse::SerializeWithCachedSizesToArray(unsigned char*) const
 T CMsgMatchmakingSearchCountResponse::SetCachedSize(int) const
 T CMsgMatchmakingSearchCountResponse::~CMsgMatchmakingSearchCountResponse()
 T CMsgMvMMannUpVictoryReply::ByteSize() const
 T CMsgMvMMannUpVictoryReply::CMsgMvMMannUpVictoryReply()
 T CMsgMvMMannUpVictoryReply::Clear()
 T CMsgMvMMannUpVictoryReply::GetCachedSize() const
 T CMsgMvMMannUpVictoryReply::GetMetadata() const
 T CMsgMvMMannUpVictoryReply::IsInitialized() const
 T CMsgMvMMannUpVictoryReply::MergeFrom(CMsgMvMMannUpVictoryReply const&)
 T CMsgMvMMannUpVictoryReply::New() const
 T CMsgMvMMannUpVictoryReply::SerializeWithCachedSizesToArray(unsigned char*) const
 T CMsgMvMMannUpVictoryReply::SetCachedSize(int) const
 T CMsgMvMMannUpVictoryReply::default_instance()
 T CMsgMvMMannUpVictoryReply::descriptor()
 T CMsgMvMMannUpVictoryReply::~CMsgMvMMannUpVictoryReply()
 T CMsgMvMVictory::ByteSize() const
 T CMsgMvMVictory::CMsgMvMVictory()
 T CMsgMvMVictory::Clear()
 T CMsgMvMVictory::GetCachedSize() const
 T CMsgMvMVictory::GetMetadata() const
 T CMsgMvMVictory::IsInitialized() const
 T CMsgMvMVictory::MergeFrom(CMsgMvMVictory const&)
 T CMsgMvMVictory::New() const
 T CMsgMvMVictory::SerializeWithCachedSizesToArray(unsigned char*) const
 T CMsgMvMVictory::SetCachedSize(int) const
 T CMsgMvMVictory::SharedDtor()
 T CMsgMvMVictory::default_instance()
 T CMsgMvMVictory::descriptor()
 T CMsgMvMVictory::~CMsgMvMVictory()
 T CMsgMvMVictoryInfo::ByteSize() const
 T CMsgMvMVictoryInfo::Clear()
 T CMsgMvMVictoryInfo::GetCachedSize() const
 T CMsgMvMVictoryInfo::GetMetadata() const
 T CMsgMvMVictoryInfo::IsInitialized() const
 T CMsgMvMVictoryInfo::MergeFrom(CMsgMvMVictoryInfo const&)
 T CMsgMvMVictoryInfo::New() const
 T CMsgMvMVictoryInfo::SerializeWithCachedSizesToArray(unsigned char*) const
 T CMsgMvMVictoryInfo::SetCachedSize(int) const
 T CMsgMvMVictoryInfo::SharedDtor()
 T CMsgMvMVictoryInfo::~CMsgMvMVictoryInfo()
 T CMsgMvMVictoryInfo_Item::ByteSize() const
 T CMsgMvMVictoryInfo_Item::Clear()
 T CMsgMvMVictoryInfo_Item::GetCachedSize() const
 T CMsgMvMVictoryInfo_Item::GetMetadata() const
 T CMsgMvMVictoryInfo_Item::IsInitialized() const
 T CMsgMvMVictoryInfo_Item::MergeFrom(CMsgMvMVictoryInfo_Item const&)
 T CMsgMvMVictoryInfo_Item::New() const
 T CMsgMvMVictoryInfo_Item::SerializeWithCachedSizesToArray(unsigned char*) const
 T CMsgMvMVictoryInfo_Item::SetCachedSize(int) const
 T CMsgMvMVictoryInfo_Item::~CMsgMvMVictoryInfo_Item()
 T CMsgMvMVictoryInfo_Player::ByteSize() const
 T CMsgMvMVictoryInfo_Player::Clear()
 T CMsgMvMVictoryInfo_Player::GetCachedSize() const
 T CMsgMvMVictoryInfo_Player::GetMetadata() const
 T CMsgMvMVictoryInfo_Player::IsInitialized() const
 T CMsgMvMVictoryInfo_Player::MergeFrom(CMsgMvMVictoryInfo_Player const&)
 T CMsgMvMVictoryInfo_Player::New() const
 T CMsgMvMVictoryInfo_Player::SerializeWithCachedSizesToArray(unsigned char*) const
 T CMsgMvMVictoryInfo_Player::SetCachedSize(int) const
 T CMsgMvMVictoryInfo_Player::~CMsgMvMVictoryInfo_Player()
 T CMsgMvMVictory_Player::ByteSize() const
 T CMsgMvMVictory_Player::CMsgMvMVictory_Player()
 T CMsgMvMVictory_Player::Clear()
 T CMsgMvMVictory_Player::GetCachedSize() const
 T CMsgMvMVictory_Player::GetMetadata() const
 T CMsgMvMVictory_Player::IsInitialized() const
 T CMsgMvMVictory_Player::MergeFrom(CMsgMvMVictory_Player const&)
 T CMsgMvMVictory_Player::New() const
 T CMsgMvMVictory_Player::SerializeWithCachedSizesToArray(unsigned char*) const
 T CMsgMvMVictory_Player::SetCachedSize(int) const
 T CMsgMvMVictory_Player::~CMsgMvMVictory_Player()
 T CMsgNotificationAcknowledge::ByteSize() const
 T CMsgNotificationAcknowledge::Clear()
 T CMsgNotificationAcknowledge::GetCachedSize() const
 T CMsgNotificationAcknowledge::GetMetadata() const
 T CMsgNotificationAcknowledge::IsInitialized() const
 T CMsgNotificationAcknowledge::MergeFrom(CMsgNotificationAcknowledge const&)
 T CMsgNotificationAcknowledge::New() const
 T CMsgNotificationAcknowledge::SerializeWithCachedSizesToArray(unsigned char*) const
 T CMsgNotificationAcknowledge::SetCachedSize(int) const
 T CMsgNotificationAcknowledge::~CMsgNotificationAcknowledge()
 T CMsgNotificationAcknowledgeReply::ByteSize() const
 T CMsgNotificationAcknowledgeReply::Clear()
 T CMsgNotificationAcknowledgeReply::GetCachedSize() const
 T CMsgNotificationAcknowledgeReply::GetMetadata() const
 T CMsgNotificationAcknowledgeReply::IsInitialized() const
 T CMsgNotificationAcknowledgeReply::MergeFrom(CMsgNotificationAcknowledgeReply const&)
 T CMsgNotificationAcknowledgeReply::New() const
 T CMsgNotificationAcknowledgeReply::SerializeWithCachedSizesToArray(unsigned char*) const
 T CMsgNotificationAcknowledgeReply::SetCachedSize(int) const
 T CMsgNotificationAcknowledgeReply::~CMsgNotificationAcknowledgeReply()
 T CMsgNotificationOfSuspiciousActivity::ByteSize() const
 T CMsgNotificationOfSuspiciousActivity::Clear()
 T CMsgNotificationOfSuspiciousActivity::GetCachedSize() const
 T CMsgNotificationOfSuspiciousActivity::GetMetadata() const
 T CMsgNotificationOfSuspiciousActivity::IsInitialized() const
 T CMsgNotificationOfSuspiciousActivity::MergeFrom(CMsgNotificationOfSuspiciousActivity const&)
 T CMsgNotificationOfSuspiciousActivity::New() const
 T CMsgNotificationOfSuspiciousActivity::SerializeWithCachedSizesToArray(unsigned char*) const
 T CMsgNotificationOfSuspiciousActivity::SetCachedSize(int) const
 T CMsgNotificationOfSuspiciousActivity::~CMsgNotificationOfSuspiciousActivity()
 T CMsgNotificationOfSuspiciousActivity_MultipleGameInstances::ByteSize() const
 T CMsgNotificationOfSuspiciousActivity_MultipleGameInstances::Clear()
 T CMsgNotificationOfSuspiciousActivity_MultipleGameInstances::GetCachedSize() const
 T CMsgNotificationOfSuspiciousActivity_MultipleGameInstances::GetMetadata() const
 T CMsgNotificationOfSuspiciousActivity_MultipleGameInstances::IsInitialized() const
 T CMsgNotificationOfSuspiciousActivity_MultipleGameInstances::MergeFrom(CMsgNotificationOfSuspiciousActivity_MultipleGameInstances const&)
 T CMsgNotificationOfSuspiciousActivity_MultipleGameInstances::New() const
 T CMsgNotificationOfSuspiciousActivity_MultipleGameInstances::SerializeWithCachedSizesToArray(unsigned char*) const
 T CMsgNotificationOfSuspiciousActivity_MultipleGameInstances::SetCachedSize(int) const
 T CMsgNotificationOfSuspiciousActivity_MultipleGameInstances::~CMsgNotificationOfSuspiciousActivity_MultipleGameInstances()
 T CMsgNotifyWatchdog::ByteSize() const
 T CMsgNotifyWatchdog::Clear()
 T CMsgNotifyWatchdog::GetCachedSize() const
 T CMsgNotifyWatchdog::GetMetadata() const
 T CMsgNotifyWatchdog::IsInitialized() const
 T CMsgNotifyWatchdog::MergeFrom(CMsgNotifyWatchdog const&)
 T CMsgNotifyWatchdog::New() const
 T CMsgNotifyWatchdog::SerializeWithCachedSizesToArray(unsigned char*) const
 T CMsgNotifyWatchdog::SetCachedSize(int) const
 T CMsgNotifyWatchdog::~CMsgNotifyWatchdog()
 T CMsgPackageLicense::ByteSize() const
 T CMsgPackageLicense::Clear()
 T CMsgPackageLicense::GetCachedSize() const
 T CMsgPackageLicense::GetMetadata() const
 T CMsgPackageLicense::IsInitialized() const
 T CMsgPackageLicense::MergeFrom(CMsgPackageLicense const&)
 T CMsgPackageLicense::New() const
 T CMsgPackageLicense::SerializeWithCachedSizesToArray(unsigned char*) const
 T CMsgPackageLicense::SetCachedSize(int) const
 T CMsgPackageLicense::~CMsgPackageLicense()
 T CMsgPartyInviteResponse::ByteSize() const
 T CMsgPartyInviteResponse::Clear()
 T CMsgPartyInviteResponse::GetCachedSize() const
 T CMsgPartyInviteResponse::GetMetadata() const
 T CMsgPartyInviteResponse::IsInitialized() const
 T CMsgPartyInviteResponse::MergeFrom(CMsgPartyInviteResponse const&)
 T CMsgPartyInviteResponse::New() const
 T CMsgPartyInviteResponse::SerializeWithCachedSizesToArray(unsigned char*) const
 T CMsgPartyInviteResponse::SetCachedSize(int) const
 T CMsgPartyInviteResponse::~CMsgPartyInviteResponse()
 T CMsgPlayerLeftMatch::ByteSize() const
 T CMsgPlayerLeftMatch::CMsgPlayerLeftMatch()
 T CMsgPlayerLeftMatch::Clear()
 T CMsgPlayerLeftMatch::GetCachedSize() const
 T CMsgPlayerLeftMatch::GetMetadata() const
 T CMsgPlayerLeftMatch::IsInitialized() const
 T CMsgPlayerLeftMatch::MergeFrom(CMsgPlayerLeftMatch const&)
 T CMsgPlayerLeftMatch::New() const
 T CMsgPlayerLeftMatch::SerializeWithCachedSizesToArray(unsigned char*) const
 T CMsgPlayerLeftMatch::SetCachedSize(int) const
 T CMsgPlayerLeftMatch::default_instance()
 T CMsgPlayerLeftMatch::descriptor()
 T CMsgPlayerLeftMatch::~CMsgPlayerLeftMatch()
 T CMsgPlayerLeftMatchResponse::ByteSize() const
 T CMsgPlayerLeftMatchResponse::CMsgPlayerLeftMatchResponse()
 T CMsgPlayerLeftMatchResponse::Clear()
 T CMsgPlayerLeftMatchResponse::GetCachedSize() const
 T CMsgPlayerLeftMatchResponse::GetMetadata() const
 T CMsgPlayerLeftMatchResponse::IsInitialized() const
 T CMsgPlayerLeftMatchResponse::MergeFrom(CMsgPlayerLeftMatchResponse const&)
 T CMsgPlayerLeftMatchResponse::New() const
 T CMsgPlayerLeftMatchResponse::SerializeWithCachedSizesToArray(unsigned char*) const
 T CMsgPlayerLeftMatchResponse::SetCachedSize(int) const
 T CMsgPlayerLeftMatchResponse::default_instance()
 T CMsgPlayerLeftMatchResponse::descriptor()
 T CMsgPlayerLeftMatchResponse::~CMsgPlayerLeftMatchResponse()
 T CMsgProtoBufHeader::ByteSize() const
 T CMsgProtoBufHeader::CMsgProtoBufHeader()
 T CMsgProtoBufHeader::Clear()
 T CMsgProtoBufHeader::GetCachedSize() const
 T CMsgProtoBufHeader::GetMetadata() const
 T CMsgProtoBufHeader::IsInitialized() const
 T CMsgProtoBufHeader::MergeFrom(CMsgProtoBufHeader const&)
 T CMsgProtoBufHeader::New() const
 T CMsgProtoBufHeader::SerializeWithCachedSizesToArray(unsigned char*) const
 T CMsgProtoBufHeader::SetCachedSize(int) const
 T CMsgProtoBufHeader::SharedDtor()
 T CMsgProtoBufHeader::default_instance()
 T CMsgProtoBufHeader::descriptor()
 T CMsgProtoBufHeader::~CMsgProtoBufHeader()
 T CMsgReadyUp::ByteSize() const
 T CMsgReadyUp::Clear()
 T CMsgReadyUp::GetCachedSize() const
 T CMsgReadyUp::GetMetadata() const
 T CMsgReadyUp::IsInitialized() const
 T CMsgReadyUp::MergeFrom(CMsgReadyUp const&)
 T CMsgReadyUp::New() const
 T CMsgReadyUp::SerializeWithCachedSizesToArray(unsigned char*) const
 T CMsgReadyUp::SetCachedSize(int) const
 T CMsgReadyUp::~CMsgReadyUp()
 T CMsgRecipeComponent::ByteSize() const
 T CMsgRecipeComponent::Clear()
 T CMsgRecipeComponent::GetCachedSize() const
 T CMsgRecipeComponent::GetMetadata() const
 T CMsgRecipeComponent::IsInitialized() const
 T CMsgRecipeComponent::MergeFrom(CMsgRecipeComponent const&)
 T CMsgRecipeComponent::New() const
 T CMsgRecipeComponent::SerializeWithCachedSizesToArray(unsigned char*) const
 T CMsgRecipeComponent::SetCachedSize(int) const
 T CMsgRecipeComponent::~CMsgRecipeComponent()
 T CMsgReplaySubmitContestEntry::ByteSize() const
 T CMsgReplaySubmitContestEntry::Clear()
 T CMsgReplaySubmitContestEntry::GetCachedSize() const
 T CMsgReplaySubmitContestEntry::GetMetadata() const
 T CMsgReplaySubmitContestEntry::IsInitialized() const
 T CMsgReplaySubmitContestEntry::MergeFrom(CMsgReplaySubmitContestEntry const&)
 T CMsgReplaySubmitContestEntry::New() const
 T CMsgReplaySubmitContestEntry::SerializeWithCachedSizesToArray(unsigned char*) const
 T CMsgReplaySubmitContestEntry::SetCachedSize(int) const
 T CMsgReplaySubmitContestEntry::~CMsgReplaySubmitContestEntry()
 T CMsgReplaySubmitContestEntryResponse::ByteSize() const
 T CMsgReplaySubmitContestEntryResponse::Clear()
 T CMsgReplaySubmitContestEntryResponse::GetCachedSize() const
 T CMsgReplaySubmitContestEntryResponse::GetMetadata() const
 T CMsgReplaySubmitContestEntryResponse::IsInitialized() const
 T CMsgReplaySubmitContestEntryResponse::MergeFrom(CMsgReplaySubmitContestEntryResponse const&)
 T CMsgReplaySubmitContestEntryResponse::New() const
 T CMsgReplaySubmitContestEntryResponse::SerializeWithCachedSizesToArray(unsigned char*) const
 T CMsgReplaySubmitContestEntryResponse::SetCachedSize(int) const
 T CMsgReplaySubmitContestEntryResponse::~CMsgReplaySubmitContestEntryResponse()
 T CMsgReplayUploadedToYouTube::ByteSize() const
 T CMsgReplayUploadedToYouTube::Clear()
 T CMsgReplayUploadedToYouTube::GetCachedSize() const
 T CMsgReplayUploadedToYouTube::GetMetadata() const
 T CMsgReplayUploadedToYouTube::IsInitialized() const
 T CMsgReplayUploadedToYouTube::MergeFrom(CMsgReplayUploadedToYouTube const&)
 T CMsgReplayUploadedToYouTube::New() const
 T CMsgReplayUploadedToYouTube::SerializeWithCachedSizesToArray(unsigned char*) const
 T CMsgReplayUploadedToYouTube::SetCachedSize(int) const
 T CMsgReplayUploadedToYouTube::SharedDtor()
 T CMsgReplayUploadedToYouTube::~CMsgReplayUploadedToYouTube()
 T CMsgReplicateConVars::ByteSize() const
 T CMsgReplicateConVars::CMsgReplicateConVars()
 T CMsgReplicateConVars::Clear()
 T CMsgReplicateConVars::GetCachedSize() const
 T CMsgReplicateConVars::GetMetadata() const
 T CMsgReplicateConVars::IsInitialized() const
 T CMsgReplicateConVars::MergeFrom(CMsgReplicateConVars const&)
 T CMsgReplicateConVars::New() const
 T CMsgReplicateConVars::SerializeWithCachedSizesToArray(unsigned char*) const
 T CMsgReplicateConVars::SetCachedSize(int) const
 T CMsgReplicateConVars::default_instance()
 T CMsgReplicateConVars::descriptor()
 T CMsgReplicateConVars::~CMsgReplicateConVars()
 T CMsgRequestInventoryRefresh::ByteSize() const
 T CMsgRequestInventoryRefresh::Clear()
 T CMsgRequestInventoryRefresh::GetCachedSize() const
 T CMsgRequestInventoryRefresh::GetMetadata() const
 T CMsgRequestInventoryRefresh::IsInitialized() const
 T CMsgRequestInventoryRefresh::MergeFrom(CMsgRequestInventoryRefresh const&)
 T CMsgRequestInventoryRefresh::New() const
 T CMsgRequestInventoryRefresh::SerializeWithCachedSizesToArray(unsigned char*) const
 T CMsgRequestInventoryRefresh::SetCachedSize(int) const
 T CMsgRequestInventoryRefresh::~CMsgRequestInventoryRefresh()
 T CMsgRequestItemPurgatory_FinalizePurchase::ByteSize() const
 T CMsgRequestItemPurgatory_FinalizePurchase::Clear()
 T CMsgRequestItemPurgatory_FinalizePurchase::GetCachedSize() const
 T CMsgRequestItemPurgatory_FinalizePurchase::GetMetadata() const
 T CMsgRequestItemPurgatory_FinalizePurchase::IsInitialized() const
 T CMsgRequestItemPurgatory_FinalizePurchase::MergeFrom(CMsgRequestItemPurgatory_FinalizePurchase const&)
 T CMsgRequestItemPurgatory_FinalizePurchase::New() const
 T CMsgRequestItemPurgatory_FinalizePurchase::SerializeWithCachedSizesToArray(unsigned char*) const
 T CMsgRequestItemPurgatory_FinalizePurchase::SetCachedSize(int) const
 T CMsgRequestItemPurgatory_FinalizePurchase::~CMsgRequestItemPurgatory_FinalizePurchase()
 T CMsgRequestItemPurgatory_FinalizePurchaseResponse::ByteSize() const
 T CMsgRequestItemPurgatory_FinalizePurchaseResponse::Clear()
 T CMsgRequestItemPurgatory_FinalizePurchaseResponse::GetCachedSize() const
 T CMsgRequestItemPurgatory_FinalizePurchaseResponse::GetMetadata() const
 T CMsgRequestItemPurgatory_FinalizePurchaseResponse::IsInitialized() const
 T CMsgRequestItemPurgatory_FinalizePurchaseResponse::MergeFrom(CMsgRequestItemPurgatory_FinalizePurchaseResponse const&)
 T CMsgRequestItemPurgatory_FinalizePurchaseResponse::New() const
 T CMsgRequestItemPurgatory_FinalizePurchaseResponse::SerializeWithCachedSizesToArray(unsigned char*) const
 T CMsgRequestItemPurgatory_FinalizePurchaseResponse::SetCachedSize(int) const
 T CMsgRequestItemPurgatory_FinalizePurchaseResponse::~CMsgRequestItemPurgatory_FinalizePurchaseResponse()
 T CMsgRequestItemPurgatory_RefundPurchase::ByteSize() const
 T CMsgRequestItemPurgatory_RefundPurchase::Clear()
 T CMsgRequestItemPurgatory_RefundPurchase::GetCachedSize() const
 T CMsgRequestItemPurgatory_RefundPurchase::GetMetadata() const
 T CMsgRequestItemPurgatory_RefundPurchase::IsInitialized() const
 T CMsgRequestItemPurgatory_RefundPurchase::MergeFrom(CMsgRequestItemPurgatory_RefundPurchase const&)
 T CMsgRequestItemPurgatory_RefundPurchase::New() const
 T CMsgRequestItemPurgatory_RefundPurchase::SerializeWithCachedSizesToArray(unsigned char*) const
 T CMsgRequestItemPurgatory_RefundPurchase::SetCachedSize(int) const
 T CMsgRequestItemPurgatory_RefundPurchase::~CMsgRequestItemPurgatory_RefundPurchase()
 T CMsgRequestItemPurgatory_RefundPurchaseResponse::ByteSize() const
 T CMsgRequestItemPurgatory_RefundPurchaseResponse::Clear()
 T CMsgRequestItemPurgatory_RefundPurchaseResponse::GetCachedSize() const
 T CMsgRequestItemPurgatory_RefundPurchaseResponse::GetMetadata() const
 T CMsgRequestItemPurgatory_RefundPurchaseResponse::IsInitialized() const
 T CMsgRequestItemPurgatory_RefundPurchaseResponse::MergeFrom(CMsgRequestItemPurgatory_RefundPurchaseResponse const&)
 T CMsgRequestItemPurgatory_RefundPurchaseResponse::New() const
 T CMsgRequestItemPurgatory_RefundPurchaseResponse::SerializeWithCachedSizesToArray(unsigned char*) const
 T CMsgRequestItemPurgatory_RefundPurchaseResponse::SetCachedSize(int) const
 T CMsgRequestItemPurgatory_RefundPurchaseResponse::~CMsgRequestItemPurgatory_RefundPurchaseResponse()
 T CMsgSOCacheHaveVersion::ByteSize() const
 T CMsgSOCacheHaveVersion::Clear()
 T CMsgSOCacheHaveVersion::GetCachedSize() const
 T CMsgSOCacheHaveVersion::GetMetadata() const
 T CMsgSOCacheHaveVersion::IsInitialized() const
 T CMsgSOCacheHaveVersion::MergeFrom(CMsgSOCacheHaveVersion const&)
 T CMsgSOCacheHaveVersion::New() const
 T CMsgSOCacheHaveVersion::SerializeWithCachedSizesToArray(unsigned char*) const
 T CMsgSOCacheHaveVersion::SetCachedSize(int) const
 T CMsgSOCacheHaveVersion::~CMsgSOCacheHaveVersion()
 T CMsgSOCacheSubscribed::ByteSize() const
 T CMsgSOCacheSubscribed::CMsgSOCacheSubscribed()
 T CMsgSOCacheSubscribed::Clear()
 T CMsgSOCacheSubscribed::GetCachedSize() const
 T CMsgSOCacheSubscribed::GetMetadata() const
 T CMsgSOCacheSubscribed::IsInitialized() const
 T CMsgSOCacheSubscribed::MergeFrom(CMsgSOCacheSubscribed const&)
 T CMsgSOCacheSubscribed::New() const
 T CMsgSOCacheSubscribed::SerializeWithCachedSizesToArray(unsigned char*) const
 T CMsgSOCacheSubscribed::SetCachedSize(int) const
 T CMsgSOCacheSubscribed::default_instance()
 T CMsgSOCacheSubscribed::descriptor()
 T CMsgSOCacheSubscribed::~CMsgSOCacheSubscribed()
 T CMsgSOCacheSubscribedUpToDate::ByteSize() const
 T CMsgSOCacheSubscribedUpToDate::Clear()
 T CMsgSOCacheSubscribedUpToDate::GetCachedSize() const
 T CMsgSOCacheSubscribedUpToDate::GetMetadata() const
 T CMsgSOCacheSubscribedUpToDate::IsInitialized() const
 T CMsgSOCacheSubscribedUpToDate::MergeFrom(CMsgSOCacheSubscribedUpToDate const&)
 T CMsgSOCacheSubscribedUpToDate::New() const
 T CMsgSOCacheSubscribedUpToDate::SerializeWithCachedSizesToArray(unsigned char*) const
 T CMsgSOCacheSubscribedUpToDate::SetCachedSize(int) const
 T CMsgSOCacheSubscribedUpToDate::~CMsgSOCacheSubscribedUpToDate()
 T CMsgSOCacheSubscribed_SubscribedType::ByteSize() const
 T CMsgSOCacheSubscribed_SubscribedType::Clear()
 T CMsgSOCacheSubscribed_SubscribedType::GetCachedSize() const
 T CMsgSOCacheSubscribed_SubscribedType::GetMetadata() const
 T CMsgSOCacheSubscribed_SubscribedType::IsInitialized() const
 T CMsgSOCacheSubscribed_SubscribedType::MergeFrom(CMsgSOCacheSubscribed_SubscribedType const&)
 T CMsgSOCacheSubscribed_SubscribedType::New() const
 T CMsgSOCacheSubscribed_SubscribedType::SerializeWithCachedSizesToArray(unsigned char*) const
 T CMsgSOCacheSubscribed_SubscribedType::SetCachedSize(int) const
 T CMsgSOCacheSubscribed_SubscribedType::~CMsgSOCacheSubscribed_SubscribedType()
 T CMsgSOCacheSubscriptionCheck::ByteSize() const
 T CMsgSOCacheSubscriptionCheck::CMsgSOCacheSubscriptionCheck()
 T CMsgSOCacheSubscriptionCheck::Clear()
 T CMsgSOCacheSubscriptionCheck::GetCachedSize() const
 T CMsgSOCacheSubscriptionCheck::GetMetadata() const
 T CMsgSOCacheSubscriptionCheck::IsInitialized() const
 T CMsgSOCacheSubscriptionCheck::MergeFrom(CMsgSOCacheSubscriptionCheck const&)
 T CMsgSOCacheSubscriptionCheck::New() const
 T CMsgSOCacheSubscriptionCheck::SerializeWithCachedSizesToArray(unsigned char*) const
 T CMsgSOCacheSubscriptionCheck::SetCachedSize(int) const
 T CMsgSOCacheSubscriptionCheck::default_instance()
 T CMsgSOCacheSubscriptionCheck::descriptor()
 T CMsgSOCacheSubscriptionCheck::~CMsgSOCacheSubscriptionCheck()
 T CMsgSOCacheSubscriptionRefresh::ByteSize() const
 T CMsgSOCacheSubscriptionRefresh::CMsgSOCacheSubscriptionRefresh()
 T CMsgSOCacheSubscriptionRefresh::Clear()
 T CMsgSOCacheSubscriptionRefresh::GetCachedSize() const
 T CMsgSOCacheSubscriptionRefresh::GetMetadata() const
 T CMsgSOCacheSubscriptionRefresh::IsInitialized() const
 T CMsgSOCacheSubscriptionRefresh::MergeFrom(CMsgSOCacheSubscriptionRefresh const&)
 T CMsgSOCacheSubscriptionRefresh::New() const
 T CMsgSOCacheSubscriptionRefresh::SerializeWithCachedSizesToArray(unsigned char*) const
 T CMsgSOCacheSubscriptionRefresh::SetCachedSize(int) const
 T CMsgSOCacheSubscriptionRefresh::default_instance()
 T CMsgSOCacheSubscriptionRefresh::descriptor()
 T CMsgSOCacheSubscriptionRefresh::~CMsgSOCacheSubscriptionRefresh()
 T CMsgSOCacheUnsubscribed::ByteSize() const
 T CMsgSOCacheUnsubscribed::CMsgSOCacheUnsubscribed()
 T CMsgSOCacheUnsubscribed::Clear()
 T CMsgSOCacheUnsubscribed::GetCachedSize() const
 T CMsgSOCacheUnsubscribed::GetMetadata() const
 T CMsgSOCacheUnsubscribed::IsInitialized() const
 T CMsgSOCacheUnsubscribed::MergeFrom(CMsgSOCacheUnsubscribed const&)
 T CMsgSOCacheUnsubscribed::New() const
 T CMsgSOCacheUnsubscribed::SerializeWithCachedSizesToArray(unsigned char*) const
 T CMsgSOCacheUnsubscribed::SetCachedSize(int) const
 T CMsgSOCacheUnsubscribed::default_instance()
 T CMsgSOCacheUnsubscribed::descriptor()
 T CMsgSOCacheUnsubscribed::~CMsgSOCacheUnsubscribed()
 T CMsgSOCacheVersion::ByteSize() const
 T CMsgSOCacheVersion::Clear()
 T CMsgSOCacheVersion::GetCachedSize() const
 T CMsgSOCacheVersion::GetMetadata() const
 T CMsgSOCacheVersion::IsInitialized() const
 T CMsgSOCacheVersion::MergeFrom(CMsgSOCacheVersion const&)
 T CMsgSOCacheVersion::New() const
 T CMsgSOCacheVersion::SerializeWithCachedSizesToArray(unsigned char*) const
 T CMsgSOCacheVersion::SetCachedSize(int) const
 T CMsgSOCacheVersion::~CMsgSOCacheVersion()
 T CMsgSOIDOwner::ByteSize() const
 T CMsgSOIDOwner::Clear()
 T CMsgSOIDOwner::GetCachedSize() const
 T CMsgSOIDOwner::GetMetadata() const
 T CMsgSOIDOwner::IsInitialized() const
 T CMsgSOIDOwner::MergeFrom(CMsgSOIDOwner const&)
 T CMsgSOIDOwner::New() const
 T CMsgSOIDOwner::SerializeWithCachedSizesToArray(unsigned char*) const
 T CMsgSOIDOwner::SetCachedSize(int) const
 T CMsgSOIDOwner::~CMsgSOIDOwner()
 T CMsgSOMultipleObjects::ByteSize() const
 T CMsgSOMultipleObjects::CMsgSOMultipleObjects()
 T CMsgSOMultipleObjects::Clear()
 T CMsgSOMultipleObjects::GetCachedSize() const
 T CMsgSOMultipleObjects::GetMetadata() const
 T CMsgSOMultipleObjects::IsInitialized() const
 T CMsgSOMultipleObjects::MergeFrom(CMsgSOMultipleObjects const&)
 T CMsgSOMultipleObjects::New() const
 T CMsgSOMultipleObjects::SerializeWithCachedSizesToArray(unsigned char*) const
 T CMsgSOMultipleObjects::SetCachedSize(int) const
 T CMsgSOMultipleObjects::default_instance()
 T CMsgSOMultipleObjects::descriptor()
 T CMsgSOMultipleObjects::~CMsgSOMultipleObjects()
 T CMsgSOMultipleObjects_SingleObject::ByteSize() const
 T CMsgSOMultipleObjects_SingleObject::Clear()
 T CMsgSOMultipleObjects_SingleObject::GetCachedSize() const
 T CMsgSOMultipleObjects_SingleObject::GetMetadata() const
 T CMsgSOMultipleObjects_SingleObject::IsInitialized() const
 T CMsgSOMultipleObjects_SingleObject::MergeFrom(CMsgSOMultipleObjects_SingleObject const&)
 T CMsgSOMultipleObjects_SingleObject::New() const
 T CMsgSOMultipleObjects_SingleObject::SerializeWithCachedSizesToArray(unsigned char*) const
 T CMsgSOMultipleObjects_SingleObject::SetCachedSize(int) const
 T CMsgSOMultipleObjects_SingleObject::~CMsgSOMultipleObjects_SingleObject()
 T CMsgSOSingleObject::ByteSize() const
 T CMsgSOSingleObject::CMsgSOSingleObject()
 T CMsgSOSingleObject::Clear()
 T CMsgSOSingleObject::GetCachedSize() const
 T CMsgSOSingleObject::GetMetadata() const
 T CMsgSOSingleObject::IsInitialized() const
 T CMsgSOSingleObject::MergeFrom(CMsgSOSingleObject const&)
 T CMsgSOSingleObject::New() const
 T CMsgSOSingleObject::SerializeWithCachedSizesToArray(unsigned char*) const
 T CMsgSOSingleObject::SetCachedSize(int) const
 T CMsgSOSingleObject::default_instance()
 T CMsgSOSingleObject::descriptor()
 T CMsgSOSingleObject::~CMsgSOSingleObject()
 T CMsgSaxxyAwarded::ByteSize() const
 T CMsgSaxxyAwarded::Clear()
 T CMsgSaxxyAwarded::GetCachedSize() const
 T CMsgSaxxyAwarded::GetMetadata() const
 T CMsgSaxxyAwarded::IsInitialized() const
 T CMsgSaxxyAwarded::MergeFrom(CMsgSaxxyAwarded const&)
 T CMsgSaxxyAwarded::New() const
 T CMsgSaxxyAwarded::SerializeWithCachedSizesToArray(unsigned char*) const
 T CMsgSaxxyAwarded::SetCachedSize(int) const
 T CMsgSaxxyAwarded::~CMsgSaxxyAwarded()
 T CMsgSelectPresetForClass::ByteSize() const
 T CMsgSelectPresetForClass::Clear()
 T CMsgSelectPresetForClass::GetCachedSize() const
 T CMsgSelectPresetForClass::GetMetadata() const
 T CMsgSelectPresetForClass::IsInitialized() const
 T CMsgSelectPresetForClass::MergeFrom(CMsgSelectPresetForClass const&)
 T CMsgSelectPresetForClass::New() const
 T CMsgSelectPresetForClass::SerializeWithCachedSizesToArray(unsigned char*) const
 T CMsgSelectPresetForClass::SetCachedSize(int) const
 T CMsgSelectPresetForClass::~CMsgSelectPresetForClass()
 T CMsgServerAvailable::ByteSize() const
 T CMsgServerAvailable::Clear()
 T CMsgServerAvailable::GetCachedSize() const
 T CMsgServerAvailable::GetMetadata() const
 T CMsgServerAvailable::IsInitialized() const
 T CMsgServerAvailable::MergeFrom(CMsgServerAvailable const&)
 T CMsgServerAvailable::New() const
 T CMsgServerAvailable::SerializeWithCachedSizesToArray(unsigned char*) const
 T CMsgServerAvailable::SetCachedSize(int) const
 T CMsgServerAvailable::~CMsgServerAvailable()
 T CMsgServerGoodbye::ByteSize() const
 T CMsgServerGoodbye::CMsgServerGoodbye()
 T CMsgServerGoodbye::Clear()
 T CMsgServerGoodbye::GetCachedSize() const
 T CMsgServerGoodbye::GetMetadata() const
 T CMsgServerGoodbye::IsInitialized() const
 T CMsgServerGoodbye::MergeFrom(CMsgServerGoodbye const&)
 T CMsgServerGoodbye::New() const
 T CMsgServerGoodbye::SerializeWithCachedSizesToArray(unsigned char*) const
 T CMsgServerGoodbye::SetCachedSize(int) const
 T CMsgServerGoodbye::default_instance()
 T CMsgServerGoodbye::descriptor()
 T CMsgServerGoodbye::~CMsgServerGoodbye()
 T CMsgServerHello::ByteSize() const
 T CMsgServerHello::CMsgServerHello()
 T CMsgServerHello::Clear()
 T CMsgServerHello::GetCachedSize() const
 T CMsgServerHello::GetMetadata() const
 T CMsgServerHello::IsInitialized() const
 T CMsgServerHello::MergeFrom(CMsgServerHello const&)
 T CMsgServerHello::New() const
 T CMsgServerHello::SerializeWithCachedSizesToArray(unsigned char*) const
 T CMsgServerHello::SetCachedSize(int) const
 T CMsgServerHello::default_instance()
 T CMsgServerHello::descriptor()
 T CMsgServerHello::~CMsgServerHello()
 T CMsgServerWelcome::ByteSize() const
 T CMsgServerWelcome::CMsgServerWelcome()
 T CMsgServerWelcome::Clear()
 T CMsgServerWelcome::GetCachedSize() const
 T CMsgServerWelcome::GetMetadata() const
 T CMsgServerWelcome::IsInitialized() const
 T CMsgServerWelcome::MergeFrom(CMsgServerWelcome const&)
 T CMsgServerWelcome::New() const
 T CMsgServerWelcome::SerializeWithCachedSizesToArray(unsigned char*) const
 T CMsgServerWelcome::SetCachedSize(int) const
 T CMsgServerWelcome::default_instance()
 T CMsgServerWelcome::descriptor()
 T CMsgServerWelcome::~CMsgServerWelcome()
 T CMsgSetHatEffectUseHeadOrigin::ByteSize() const
 T CMsgSetHatEffectUseHeadOrigin::Clear()
 T CMsgSetHatEffectUseHeadOrigin::GetCachedSize() const
 T CMsgSetHatEffectUseHeadOrigin::GetMetadata() const
 T CMsgSetHatEffectUseHeadOrigin::IsInitialized() const
 T CMsgSetHatEffectUseHeadOrigin::MergeFrom(CMsgSetHatEffectUseHeadOrigin const&)
 T CMsgSetHatEffectUseHeadOrigin::New() const
 T CMsgSetHatEffectUseHeadOrigin::SerializeWithCachedSizesToArray(unsigned char*) const
 T CMsgSetHatEffectUseHeadOrigin::SetCachedSize(int) const
 T CMsgSetHatEffectUseHeadOrigin::~CMsgSetHatEffectUseHeadOrigin()
 T CMsgSetItemEffectVerticalOffset::ByteSize() const
 T CMsgSetItemEffectVerticalOffset::Clear()
 T CMsgSetItemEffectVerticalOffset::GetCachedSize() const
 T CMsgSetItemEffectVerticalOffset::GetMetadata() const
 T CMsgSetItemEffectVerticalOffset::IsInitialized() const
 T CMsgSetItemEffectVerticalOffset::MergeFrom(CMsgSetItemEffectVerticalOffset const&)
 T CMsgSetItemEffectVerticalOffset::New() const
 T CMsgSetItemEffectVerticalOffset::SerializeWithCachedSizesToArray(unsigned char*) const
 T CMsgSetItemEffectVerticalOffset::SetCachedSize(int) const
 T CMsgSetItemEffectVerticalOffset::~CMsgSetItemEffectVerticalOffset()
 T CMsgSetItemPositions::ByteSize() const
 T CMsgSetItemPositions::Clear()
 T CMsgSetItemPositions::GetCachedSize() const
 T CMsgSetItemPositions::GetMetadata() const
 T CMsgSetItemPositions::IsInitialized() const
 T CMsgSetItemPositions::MergeFrom(CMsgSetItemPositions const&)
 T CMsgSetItemPositions::New() const
 T CMsgSetItemPositions::SerializeWithCachedSizesToArray(unsigned char*) const
 T CMsgSetItemPositions::SetCachedSize(int) const
 T CMsgSetItemPositions::~CMsgSetItemPositions()
 T CMsgSetItemPositions_ItemPosition::ByteSize() const
 T CMsgSetItemPositions_ItemPosition::Clear()
 T CMsgSetItemPositions_ItemPosition::GetCachedSize() const
 T CMsgSetItemPositions_ItemPosition::GetMetadata() const
 T CMsgSetItemPositions_ItemPosition::IsInitialized() const
 T CMsgSetItemPositions_ItemPosition::MergeFrom(CMsgSetItemPositions_ItemPosition const&)
 T CMsgSetItemPositions_ItemPosition::New() const
 T CMsgSetItemPositions_ItemPosition::SerializeWithCachedSizesToArray(unsigned char*) const
 T CMsgSetItemPositions_ItemPosition::SetCachedSize(int) const
 T CMsgSetItemPositions_ItemPosition::~CMsgSetItemPositions_ItemPosition()
 T CMsgSetItemSlotAttribute::ByteSize() const
 T CMsgSetItemSlotAttribute::Clear()
 T CMsgSetItemSlotAttribute::GetCachedSize() const
 T CMsgSetItemSlotAttribute::GetMetadata() const
 T CMsgSetItemSlotAttribute::IsInitialized() const
 T CMsgSetItemSlotAttribute::MergeFrom(CMsgSetItemSlotAttribute const&)
 T CMsgSetItemSlotAttribute::New() const
 T CMsgSetItemSlotAttribute::SerializeWithCachedSizesToArray(unsigned char*) const
 T CMsgSetItemSlotAttribute::SetCachedSize(int) const
 T CMsgSetItemSlotAttribute::~CMsgSetItemSlotAttribute()
 T CMsgSetPresetItemPosition::ByteSize() const
 T CMsgSetPresetItemPosition::Clear()
 T CMsgSetPresetItemPosition::GetCachedSize() const
 T CMsgSetPresetItemPosition::GetMetadata() const
 T CMsgSetPresetItemPosition::IsInitialized() const
 T CMsgSetPresetItemPosition::MergeFrom(CMsgSetPresetItemPosition const&)
 T CMsgSetPresetItemPosition::New() const
 T CMsgSetPresetItemPosition::SerializeWithCachedSizesToArray(unsigned char*) const
 T CMsgSetPresetItemPosition::SetCachedSize(int) const
 T CMsgSetPresetItemPosition::~CMsgSetPresetItemPosition()
 T CMsgSortItems::ByteSize() const
 T CMsgSortItems::Clear()
 T CMsgSortItems::GetCachedSize() const
 T CMsgSortItems::GetMetadata() const
 T CMsgSortItems::IsInitialized() const
 T CMsgSortItems::MergeFrom(CMsgSortItems const&)
 T CMsgSortItems::New() const
 T CMsgSortItems::SerializeWithCachedSizesToArray(unsigned char*) const
 T CMsgSortItems::SetCachedSize(int) const
 T CMsgSortItems::~CMsgSortItems()
 T CMsgStoreGetUserData::ByteSize() const
 T CMsgStoreGetUserData::Clear()
 T CMsgStoreGetUserData::GetCachedSize() const
 T CMsgStoreGetUserData::GetMetadata() const
 T CMsgStoreGetUserData::IsInitialized() const
 T CMsgStoreGetUserData::MergeFrom(CMsgStoreGetUserData const&)
 T CMsgStoreGetUserData::New() const
 T CMsgStoreGetUserData::SerializeWithCachedSizesToArray(unsigned char*) const
 T CMsgStoreGetUserData::SetCachedSize(int) const
 T CMsgStoreGetUserData::~CMsgStoreGetUserData()
 T CMsgStoreGetUserDataResponse::ByteSize() const
 T CMsgStoreGetUserDataResponse::Clear()
 T CMsgStoreGetUserDataResponse::GetCachedSize() const
 T CMsgStoreGetUserDataResponse::GetMetadata() const
 T CMsgStoreGetUserDataResponse::IsInitialized() const
 T CMsgStoreGetUserDataResponse::MergeFrom(CMsgStoreGetUserDataResponse const&)
 T CMsgStoreGetUserDataResponse::New() const
 T CMsgStoreGetUserDataResponse::SerializeWithCachedSizesToArray(unsigned char*) const
 T CMsgStoreGetUserDataResponse::SetCachedSize(int) const
 T CMsgStoreGetUserDataResponse::SharedDtor()
 T CMsgStoreGetUserDataResponse::~CMsgStoreGetUserDataResponse()
 T CMsgSystemBroadcast::ByteSize() const
 T CMsgSystemBroadcast::Clear()
 T CMsgSystemBroadcast::GetCachedSize() const
 T CMsgSystemBroadcast::GetMetadata() const
 T CMsgSystemBroadcast::IsInitialized() const
 T CMsgSystemBroadcast::MergeFrom(CMsgSystemBroadcast const&)
 T CMsgSystemBroadcast::New() const
 T CMsgSystemBroadcast::SerializeWithCachedSizesToArray(unsigned char*) const
 T CMsgSystemBroadcast::SetCachedSize(int) const
 T CMsgSystemBroadcast::~CMsgSystemBroadcast()
 T CMsgTFClientInit::ByteSize() const
 T CMsgTFClientInit::Clear()
 T CMsgTFClientInit::GetCachedSize() const
 T CMsgTFClientInit::GetMetadata() const
 T CMsgTFClientInit::IsInitialized() const
 T CMsgTFClientInit::MergeFrom(CMsgTFClientInit const&)
 T CMsgTFClientInit::New() const
 T CMsgTFClientInit::SerializeWithCachedSizesToArray(unsigned char*) const
 T CMsgTFClientInit::SetCachedSize(int) const
 T CMsgTFClientInit::~CMsgTFClientInit()
 T CMsgTFCoaching_AddToCoaches::ByteSize() const
 T CMsgTFCoaching_AddToCoaches::Clear()
 T CMsgTFCoaching_AddToCoaches::GetCachedSize() const
 T CMsgTFCoaching_AddToCoaches::GetMetadata() const
 T CMsgTFCoaching_AddToCoaches::IsInitialized() const
 T CMsgTFCoaching_AddToCoaches::MergeFrom(CMsgTFCoaching_AddToCoaches const&)
 T CMsgTFCoaching_AddToCoaches::New() const
 T CMsgTFCoaching_AddToCoaches::SerializeWithCachedSizesToArray(unsigned char*) const
 T CMsgTFCoaching_AddToCoaches::SetCachedSize(int) const
 T CMsgTFCoaching_AddToCoaches::~CMsgTFCoaching_AddToCoaches()
 T CMsgTFCoaching_AskCoach::ByteSize() const
 T CMsgTFCoaching_AskCoach::Clear()
 T CMsgTFCoaching_AskCoach::GetCachedSize() const
 T CMsgTFCoaching_AskCoach::GetMetadata() const
 T CMsgTFCoaching_AskCoach::IsInitialized() const
 T CMsgTFCoaching_AskCoach::MergeFrom(CMsgTFCoaching_AskCoach const&)
 T CMsgTFCoaching_AskCoach::New() const
 T CMsgTFCoaching_AskCoach::SerializeWithCachedSizesToArray(unsigned char*) const
 T CMsgTFCoaching_AskCoach::SetCachedSize(int) const
 T CMsgTFCoaching_AskCoach::~CMsgTFCoaching_AskCoach()
 T CMsgTFCoaching_AskCoachResponse::ByteSize() const
 T CMsgTFCoaching_AskCoachResponse::Clear()
 T CMsgTFCoaching_AskCoachResponse::GetCachedSize() const
 T CMsgTFCoaching_AskCoachResponse::GetMetadata() const
 T CMsgTFCoaching_AskCoachResponse::IsInitialized() const
 T CMsgTFCoaching_AskCoachResponse::MergeFrom(CMsgTFCoaching_AskCoachResponse const&)
 T CMsgTFCoaching_AskCoachResponse::New() const
 T CMsgTFCoaching_AskCoachResponse::SerializeWithCachedSizesToArray(unsigned char*) const
 T CMsgTFCoaching_AskCoachResponse::SetCachedSize(int) const
 T CMsgTFCoaching_AskCoachResponse::~CMsgTFCoaching_AskCoachResponse()
 T CMsgTFCoaching_CoachJoinGame::ByteSize() const
 T CMsgTFCoaching_CoachJoinGame::Clear()
 T CMsgTFCoaching_CoachJoinGame::GetCachedSize() const
 T CMsgTFCoaching_CoachJoinGame::GetMetadata() const
 T CMsgTFCoaching_CoachJoinGame::IsInitialized() const
 T CMsgTFCoaching_CoachJoinGame::MergeFrom(CMsgTFCoaching_CoachJoinGame const&)
 T CMsgTFCoaching_CoachJoinGame::New() const
 T CMsgTFCoaching_CoachJoinGame::SerializeWithCachedSizesToArray(unsigned char*) const
 T CMsgTFCoaching_CoachJoinGame::SetCachedSize(int) const
 T CMsgTFCoaching_CoachJoinGame::~CMsgTFCoaching_CoachJoinGame()
 T CMsgTFCoaching_CoachJoined::ByteSize() const
 T CMsgTFCoaching_CoachJoined::CMsgTFCoaching_CoachJoined()
 T CMsgTFCoaching_CoachJoined::Clear()
 T CMsgTFCoaching_CoachJoined::GetCachedSize() const
 T CMsgTFCoaching_CoachJoined::GetMetadata() const
 T CMsgTFCoaching_CoachJoined::IsInitialized() const
 T CMsgTFCoaching_CoachJoined::MergeFrom(CMsgTFCoaching_CoachJoined const&)
 T CMsgTFCoaching_CoachJoined::New() const
 T CMsgTFCoaching_CoachJoined::SerializeWithCachedSizesToArray(unsigned char*) const
 T CMsgTFCoaching_CoachJoined::SetCachedSize(int) const
 T CMsgTFCoaching_CoachJoined::default_instance()
 T CMsgTFCoaching_CoachJoined::descriptor()
 T CMsgTFCoaching_CoachJoined::~CMsgTFCoaching_CoachJoined()
 T CMsgTFCoaching_CoachJoining::ByteSize() const
 T CMsgTFCoaching_CoachJoining::CMsgTFCoaching_CoachJoining()
 T CMsgTFCoaching_CoachJoining::Clear()
 T CMsgTFCoaching_CoachJoining::GetCachedSize() const
 T CMsgTFCoaching_CoachJoining::GetMetadata() const
 T CMsgTFCoaching_CoachJoining::IsInitialized() const
 T CMsgTFCoaching_CoachJoining::MergeFrom(CMsgTFCoaching_CoachJoining const&)
 T CMsgTFCoaching_CoachJoining::New() const
 T CMsgTFCoaching_CoachJoining::SerializeWithCachedSizesToArray(unsigned char*) const
 T CMsgTFCoaching_CoachJoining::SetCachedSize(int) const
 T CMsgTFCoaching_CoachJoining::default_instance()
 T CMsgTFCoaching_CoachJoining::descriptor()
 T CMsgTFCoaching_CoachJoining::~CMsgTFCoaching_CoachJoining()
 T CMsgTFCoaching_FindCoach::ByteSize() const
 T CMsgTFCoaching_FindCoach::Clear()
 T CMsgTFCoaching_FindCoach::GetCachedSize() const
 T CMsgTFCoaching_FindCoach::GetMetadata() const
 T CMsgTFCoaching_FindCoach::IsInitialized() const
 T CMsgTFCoaching_FindCoach::MergeFrom(CMsgTFCoaching_FindCoach const&)
 T CMsgTFCoaching_FindCoach::New() const
 T CMsgTFCoaching_FindCoach::SerializeWithCachedSizesToArray(unsigned char*) const
 T CMsgTFCoaching_FindCoach::SetCachedSize(int) const
 T CMsgTFCoaching_FindCoach::~CMsgTFCoaching_FindCoach()
 T CMsgTFCoaching_FindCoachResponse::ByteSize() const
 T CMsgTFCoaching_FindCoachResponse::Clear()
 T CMsgTFCoaching_FindCoachResponse::GetCachedSize() const
 T CMsgTFCoaching_FindCoachResponse::GetMetadata() const
 T CMsgTFCoaching_FindCoachResponse::IsInitialized() const
 T CMsgTFCoaching_FindCoachResponse::MergeFrom(CMsgTFCoaching_FindCoachResponse const&)
 T CMsgTFCoaching_FindCoachResponse::New() const
 T CMsgTFCoaching_FindCoachResponse::SerializeWithCachedSizesToArray(unsigned char*) const
 T CMsgTFCoaching_FindCoachResponse::SetCachedSize(int) const
 T CMsgTFCoaching_FindCoachResponse::~CMsgTFCoaching_FindCoachResponse()
 T CMsgTFCoaching_LikeCurrentCoach::ByteSize() const
 T CMsgTFCoaching_LikeCurrentCoach::Clear()
 T CMsgTFCoaching_LikeCurrentCoach::GetCachedSize() const
 T CMsgTFCoaching_LikeCurrentCoach::GetMetadata() const
 T CMsgTFCoaching_LikeCurrentCoach::IsInitialized() const
 T CMsgTFCoaching_LikeCurrentCoach::MergeFrom(CMsgTFCoaching_LikeCurrentCoach const&)
 T CMsgTFCoaching_LikeCurrentCoach::New() const
 T CMsgTFCoaching_LikeCurrentCoach::SerializeWithCachedSizesToArray(unsigned char*) const
 T CMsgTFCoaching_LikeCurrentCoach::SetCachedSize(int) const
 T CMsgTFCoaching_LikeCurrentCoach::~CMsgTFCoaching_LikeCurrentCoach()
 T CMsgTFCoaching_RemoveCurrentCoach::ByteSize() const
 T CMsgTFCoaching_RemoveCurrentCoach::CMsgTFCoaching_RemoveCurrentCoach()
 T CMsgTFCoaching_RemoveCurrentCoach::Clear()
 T CMsgTFCoaching_RemoveCurrentCoach::GetCachedSize() const
 T CMsgTFCoaching_RemoveCurrentCoach::GetMetadata() const
 T CMsgTFCoaching_RemoveCurrentCoach::IsInitialized() const
 T CMsgTFCoaching_RemoveCurrentCoach::MergeFrom(CMsgTFCoaching_RemoveCurrentCoach const&)
 T CMsgTFCoaching_RemoveCurrentCoach::New() const
 T CMsgTFCoaching_RemoveCurrentCoach::SerializeWithCachedSizesToArray(unsigned char*) const
 T CMsgTFCoaching_RemoveCurrentCoach::SetCachedSize(int) const
 T CMsgTFCoaching_RemoveCurrentCoach::default_instance()
 T CMsgTFCoaching_RemoveCurrentCoach::descriptor()
 T CMsgTFCoaching_RemoveCurrentCoach::~CMsgTFCoaching_RemoveCurrentCoach()
 T CMsgTFCoaching_RemoveFromCoaches::ByteSize() const
 T CMsgTFCoaching_RemoveFromCoaches::Clear()
 T CMsgTFCoaching_RemoveFromCoaches::GetCachedSize() const
 T CMsgTFCoaching_RemoveFromCoaches::GetMetadata() const
 T CMsgTFCoaching_RemoveFromCoaches::IsInitialized() const
 T CMsgTFCoaching_RemoveFromCoaches::MergeFrom(CMsgTFCoaching_RemoveFromCoaches const&)
 T CMsgTFCoaching_RemoveFromCoaches::New() const
 T CMsgTFCoaching_RemoveFromCoaches::SerializeWithCachedSizesToArray(unsigned char*) const
 T CMsgTFCoaching_RemoveFromCoaches::SetCachedSize(int) const
 T CMsgTFCoaching_RemoveFromCoaches::~CMsgTFCoaching_RemoveFromCoaches()
 T CMsgTFFreeTrialChooseMostHelpfulFriend::ByteSize() const
 T CMsgTFFreeTrialChooseMostHelpfulFriend::Clear()
 T CMsgTFFreeTrialChooseMostHelpfulFriend::GetCachedSize() const
 T CMsgTFFreeTrialChooseMostHelpfulFriend::GetMetadata() const
 T CMsgTFFreeTrialChooseMostHelpfulFriend::IsInitialized() const
 T CMsgTFFreeTrialChooseMostHelpfulFriend::MergeFrom(CMsgTFFreeTrialChooseMostHelpfulFriend const&)
 T CMsgTFFreeTrialChooseMostHelpfulFriend::New() const
 T CMsgTFFreeTrialChooseMostHelpfulFriend::SerializeWithCachedSizesToArray(unsigned char*) const
 T CMsgTFFreeTrialChooseMostHelpfulFriend::SetCachedSize(int) const
 T CMsgTFFreeTrialChooseMostHelpfulFriend::~CMsgTFFreeTrialChooseMostHelpfulFriend()
 T CMsgTFFreeTrialConvertedToPremium::ByteSize() const
 T CMsgTFFreeTrialConvertedToPremium::Clear()
 T CMsgTFFreeTrialConvertedToPremium::GetCachedSize() const
 T CMsgTFFreeTrialConvertedToPremium::GetMetadata() const
 T CMsgTFFreeTrialConvertedToPremium::IsInitialized() const
 T CMsgTFFreeTrialConvertedToPremium::MergeFrom(CMsgTFFreeTrialConvertedToPremium const&)
 T CMsgTFFreeTrialConvertedToPremium::New() const
 T CMsgTFFreeTrialConvertedToPremium::SerializeWithCachedSizesToArray(unsigned char*) const
 T CMsgTFFreeTrialConvertedToPremium::SetCachedSize(int) const
 T CMsgTFFreeTrialConvertedToPremium::~CMsgTFFreeTrialConvertedToPremium()
 T CMsgTFGoldenWrenchBroadcast::ByteSize() const
 T CMsgTFGoldenWrenchBroadcast::Clear()
 T CMsgTFGoldenWrenchBroadcast::GetCachedSize() const
 T CMsgTFGoldenWrenchBroadcast::GetMetadata() const
 T CMsgTFGoldenWrenchBroadcast::IsInitialized() const
 T CMsgTFGoldenWrenchBroadcast::MergeFrom(CMsgTFGoldenWrenchBroadcast const&)
 T CMsgTFGoldenWrenchBroadcast::New() const
 T CMsgTFGoldenWrenchBroadcast::SerializeWithCachedSizesToArray(unsigned char*) const
 T CMsgTFGoldenWrenchBroadcast::SetCachedSize(int) const
 T CMsgTFGoldenWrenchBroadcast::~CMsgTFGoldenWrenchBroadcast()
 T CMsgTFJoinChatChannel::ByteSize() const
 T CMsgTFJoinChatChannel::Clear()
 T CMsgTFJoinChatChannel::GetCachedSize() const
 T CMsgTFJoinChatChannel::GetMetadata() const
 T CMsgTFJoinChatChannel::IsInitialized() const
 T CMsgTFJoinChatChannel::MergeFrom(CMsgTFJoinChatChannel const&)
 T CMsgTFJoinChatChannel::New() const
 T CMsgTFJoinChatChannel::SerializeWithCachedSizesToArray(unsigned char*) const
 T CMsgTFJoinChatChannel::SetCachedSize(int) const
 T CMsgTFJoinChatChannel::SharedDtor()
 T CMsgTFJoinChatChannel::~CMsgTFJoinChatChannel()
 T CMsgTFJoinChatChannelResponse::ByteSize() const
 T CMsgTFJoinChatChannelResponse::Clear()
 T CMsgTFJoinChatChannelResponse::GetCachedSize() const
 T CMsgTFJoinChatChannelResponse::GetMetadata() const
 T CMsgTFJoinChatChannelResponse::IsInitialized() const
 T CMsgTFJoinChatChannelResponse::MergeFrom(CMsgTFJoinChatChannelResponse const&)
 T CMsgTFJoinChatChannelResponse::New() const
 T CMsgTFJoinChatChannelResponse::SerializeWithCachedSizesToArray(unsigned char*) const
 T CMsgTFJoinChatChannelResponse::SetCachedSize(int) const
 T CMsgTFJoinChatChannelResponse::~CMsgTFJoinChatChannelResponse()
 T CMsgTFJoinChatChannelResponse_ChatMember::ByteSize() const
 T CMsgTFJoinChatChannelResponse_ChatMember::Clear()
 T CMsgTFJoinChatChannelResponse_ChatMember::GetCachedSize() const
 T CMsgTFJoinChatChannelResponse_ChatMember::GetMetadata() const
 T CMsgTFJoinChatChannelResponse_ChatMember::IsInitialized() const
 T CMsgTFJoinChatChannelResponse_ChatMember::MergeFrom(CMsgTFJoinChatChannelResponse_ChatMember const&)
 T CMsgTFJoinChatChannelResponse_ChatMember::New() const
 T CMsgTFJoinChatChannelResponse_ChatMember::SerializeWithCachedSizesToArray(unsigned char*) const
 T CMsgTFJoinChatChannelResponse_ChatMember::SetCachedSize(int) const
 T CMsgTFJoinChatChannelResponse_ChatMember::~CMsgTFJoinChatChannelResponse_ChatMember()
 T CMsgTFLeaveChatChannel::ByteSize() const
 T CMsgTFLeaveChatChannel::Clear()
 T CMsgTFLeaveChatChannel::GetCachedSize() const
 T CMsgTFLeaveChatChannel::GetMetadata() const
 T CMsgTFLeaveChatChannel::IsInitialized() const
 T CMsgTFLeaveChatChannel::MergeFrom(CMsgTFLeaveChatChannel const&)
 T CMsgTFLeaveChatChannel::New() const
 T CMsgTFLeaveChatChannel::SerializeWithCachedSizesToArray(unsigned char*) const
 T CMsgTFLeaveChatChannel::SetCachedSize(int) const
 T CMsgTFLeaveChatChannel::~CMsgTFLeaveChatChannel()
 T CMsgTFOtherJoinedChatChannel::ByteSize() const
 T CMsgTFOtherJoinedChatChannel::Clear()
 T CMsgTFOtherJoinedChatChannel::GetCachedSize() const
 T CMsgTFOtherJoinedChatChannel::GetMetadata() const
 T CMsgTFOtherJoinedChatChannel::IsInitialized() const
 T CMsgTFOtherJoinedChatChannel::MergeFrom(CMsgTFOtherJoinedChatChannel const&)
 T CMsgTFOtherJoinedChatChannel::New() const
 T CMsgTFOtherJoinedChatChannel::SerializeWithCachedSizesToArray(unsigned char*) const
 T CMsgTFOtherJoinedChatChannel::SetCachedSize(int) const
 T CMsgTFOtherJoinedChatChannel::~CMsgTFOtherJoinedChatChannel()
 T CMsgTFOtherLeftChatChannel::ByteSize() const
 T CMsgTFOtherLeftChatChannel::Clear()
 T CMsgTFOtherLeftChatChannel::GetCachedSize() const
 T CMsgTFOtherLeftChatChannel::GetMetadata() const
 T CMsgTFOtherLeftChatChannel::IsInitialized() const
 T CMsgTFOtherLeftChatChannel::MergeFrom(CMsgTFOtherLeftChatChannel const&)
 T CMsgTFOtherLeftChatChannel::New() const
 T CMsgTFOtherLeftChatChannel::SerializeWithCachedSizesToArray(unsigned char*) const
 T CMsgTFOtherLeftChatChannel::SetCachedSize(int) const
 T CMsgTFOtherLeftChatChannel::~CMsgTFOtherLeftChatChannel()
 T CMsgTFQuickplay_PlayerJoining::ByteSize() const
 T CMsgTFQuickplay_PlayerJoining::CMsgTFQuickplay_PlayerJoining()
 T CMsgTFQuickplay_PlayerJoining::Clear()
 T CMsgTFQuickplay_PlayerJoining::GetCachedSize() const
 T CMsgTFQuickplay_PlayerJoining::GetMetadata() const
 T CMsgTFQuickplay_PlayerJoining::IsInitialized() const
 T CMsgTFQuickplay_PlayerJoining::MergeFrom(CMsgTFQuickplay_PlayerJoining const&)
 T CMsgTFQuickplay_PlayerJoining::New() const
 T CMsgTFQuickplay_PlayerJoining::SerializeWithCachedSizesToArray(unsigned char*) const
 T CMsgTFQuickplay_PlayerJoining::SetCachedSize(int) const
 T CMsgTFQuickplay_PlayerJoining::default_instance()
 T CMsgTFQuickplay_PlayerJoining::descriptor()
 T CMsgTFQuickplay_PlayerJoining::~CMsgTFQuickplay_PlayerJoining()
 T CMsgTFQuickplay_ScoreServers::ByteSize() const
 T CMsgTFQuickplay_ScoreServers::Clear()
 T CMsgTFQuickplay_ScoreServers::GetCachedSize() const
 T CMsgTFQuickplay_ScoreServers::GetMetadata() const
 T CMsgTFQuickplay_ScoreServers::IsInitialized() const
 T CMsgTFQuickplay_ScoreServers::MergeFrom(CMsgTFQuickplay_ScoreServers const&)
 T CMsgTFQuickplay_ScoreServers::New() const
 T CMsgTFQuickplay_ScoreServers::SerializeWithCachedSizesToArray(unsigned char*) const
 T CMsgTFQuickplay_ScoreServers::SetCachedSize(int) const
 T CMsgTFQuickplay_ScoreServers::~CMsgTFQuickplay_ScoreServers()
 T CMsgTFQuickplay_ScoreServersResponse::ByteSize() const
 T CMsgTFQuickplay_ScoreServersResponse::Clear()
 T CMsgTFQuickplay_ScoreServersResponse::GetCachedSize() const
 T CMsgTFQuickplay_ScoreServersResponse::GetMetadata() const
 T CMsgTFQuickplay_ScoreServersResponse::IsInitialized() const
 T CMsgTFQuickplay_ScoreServersResponse::MergeFrom(CMsgTFQuickplay_ScoreServersResponse const&)
 T CMsgTFQuickplay_ScoreServersResponse::New() const
 T CMsgTFQuickplay_ScoreServersResponse::SerializeWithCachedSizesToArray(unsigned char*) const
 T CMsgTFQuickplay_ScoreServersResponse::SetCachedSize(int) const
 T CMsgTFQuickplay_ScoreServersResponse::~CMsgTFQuickplay_ScoreServersResponse()
 T CMsgTFQuickplay_ScoreServersResponse_ServerInfo::ByteSize() const
 T CMsgTFQuickplay_ScoreServersResponse_ServerInfo::Clear()
 T CMsgTFQuickplay_ScoreServersResponse_ServerInfo::GetCachedSize() const
 T CMsgTFQuickplay_ScoreServersResponse_ServerInfo::GetMetadata() const
 T CMsgTFQuickplay_ScoreServersResponse_ServerInfo::IsInitialized() const
 T CMsgTFQuickplay_ScoreServersResponse_ServerInfo::MergeFrom(CMsgTFQuickplay_ScoreServersResponse_ServerInfo const&)
 T CMsgTFQuickplay_ScoreServersResponse_ServerInfo::New() const
 T CMsgTFQuickplay_ScoreServersResponse_ServerInfo::SerializeWithCachedSizesToArray(unsigned char*) const
 T CMsgTFQuickplay_ScoreServersResponse_ServerInfo::SetCachedSize(int) const
 T CMsgTFQuickplay_ScoreServersResponse_ServerInfo::~CMsgTFQuickplay_ScoreServersResponse_ServerInfo()
 T CMsgTFQuickplay_ScoreServers_ServerInfo::ByteSize() const
 T CMsgTFQuickplay_ScoreServers_ServerInfo::Clear()
 T CMsgTFQuickplay_ScoreServers_ServerInfo::GetCachedSize() const
 T CMsgTFQuickplay_ScoreServers_ServerInfo::GetMetadata() const
 T CMsgTFQuickplay_ScoreServers_ServerInfo::IsInitialized() const
 T CMsgTFQuickplay_ScoreServers_ServerInfo::MergeFrom(CMsgTFQuickplay_ScoreServers_ServerInfo const&)
 T CMsgTFQuickplay_ScoreServers_ServerInfo::New() const
 T CMsgTFQuickplay_ScoreServers_ServerInfo::SerializeWithCachedSizesToArray(unsigned char*) const
 T CMsgTFQuickplay_ScoreServers_ServerInfo::SetCachedSize(int) const
 T CMsgTFQuickplay_ScoreServers_ServerInfo::~CMsgTFQuickplay_ScoreServers_ServerInfo()
 T CMsgTFRequestChatChannelList::ByteSize() const
 T CMsgTFRequestChatChannelList::Clear()
 T CMsgTFRequestChatChannelList::GetCachedSize() const
 T CMsgTFRequestChatChannelList::GetMetadata() const
 T CMsgTFRequestChatChannelList::IsInitialized() const
 T CMsgTFRequestChatChannelList::MergeFrom(CMsgTFRequestChatChannelList const&)
 T CMsgTFRequestChatChannelList::New() const
 T CMsgTFRequestChatChannelList::SerializeWithCachedSizesToArray(unsigned char*) const
 T CMsgTFRequestChatChannelList::SetCachedSize(int) const
 T CMsgTFRequestChatChannelList::~CMsgTFRequestChatChannelList()
 T CMsgTFRequestChatChannelListResponse::ByteSize() const
 T CMsgTFRequestChatChannelListResponse::Clear()
 T CMsgTFRequestChatChannelListResponse::GetCachedSize() const
 T CMsgTFRequestChatChannelListResponse::GetMetadata() const
 T CMsgTFRequestChatChannelListResponse::IsInitialized() const
 T CMsgTFRequestChatChannelListResponse::MergeFrom(CMsgTFRequestChatChannelListResponse const&)
 T CMsgTFRequestChatChannelListResponse::New() const
 T CMsgTFRequestChatChannelListResponse::SerializeWithCachedSizesToArray(unsigned char*) const
 T CMsgTFRequestChatChannelListResponse::SetCachedSize(int) const
 T CMsgTFRequestChatChannelListResponse::~CMsgTFRequestChatChannelListResponse()
 T CMsgTFRequestChatChannelListResponse_ChatChannel::ByteSize() const
 T CMsgTFRequestChatChannelListResponse_ChatChannel::Clear()
 T CMsgTFRequestChatChannelListResponse_ChatChannel::GetCachedSize() const
 T CMsgTFRequestChatChannelListResponse_ChatChannel::GetMetadata() const
 T CMsgTFRequestChatChannelListResponse_ChatChannel::IsInitialized() const
 T CMsgTFRequestChatChannelListResponse_ChatChannel::MergeFrom(CMsgTFRequestChatChannelListResponse_ChatChannel const&)
 T CMsgTFRequestChatChannelListResponse_ChatChannel::New() const
 T CMsgTFRequestChatChannelListResponse_ChatChannel::SerializeWithCachedSizesToArray(unsigned char*) const
 T CMsgTFRequestChatChannelListResponse_ChatChannel::SetCachedSize(int) const
 T CMsgTFRequestChatChannelListResponse_ChatChannel::~CMsgTFRequestChatChannelListResponse_ChatChannel()
 T CMsgTFRequestDefaultChatChannel::ByteSize() const
 T CMsgTFRequestDefaultChatChannel::Clear()
 T CMsgTFRequestDefaultChatChannel::GetCachedSize() const
 T CMsgTFRequestDefaultChatChannel::GetMetadata() const
 T CMsgTFRequestDefaultChatChannel::IsInitialized() const
 T CMsgTFRequestDefaultChatChannel::MergeFrom(CMsgTFRequestDefaultChatChannel const&)
 T CMsgTFRequestDefaultChatChannel::New() const
 T CMsgTFRequestDefaultChatChannel::SerializeWithCachedSizesToArray(unsigned char*) const
 T CMsgTFRequestDefaultChatChannel::SetCachedSize(int) const
 T CMsgTFRequestDefaultChatChannel::~CMsgTFRequestDefaultChatChannel()
 T CMsgTFRequestDefaultChatChannelResponse::ByteSize() const
 T CMsgTFRequestDefaultChatChannelResponse::Clear()
 T CMsgTFRequestDefaultChatChannelResponse::GetCachedSize() const
 T CMsgTFRequestDefaultChatChannelResponse::GetMetadata() const
 T CMsgTFRequestDefaultChatChannelResponse::IsInitialized() const
 T CMsgTFRequestDefaultChatChannelResponse::MergeFrom(CMsgTFRequestDefaultChatChannelResponse const&)
 T CMsgTFRequestDefaultChatChannelResponse::New() const
 T CMsgTFRequestDefaultChatChannelResponse::SerializeWithCachedSizesToArray(unsigned char*) const
 T CMsgTFRequestDefaultChatChannelResponse::SetCachedSize(int) const
 T CMsgTFRequestDefaultChatChannelResponse::~CMsgTFRequestDefaultChatChannelResponse()
 T CMsgTFRequestTF2Friends::ByteSize() const
 T CMsgTFRequestTF2Friends::Clear()
 T CMsgTFRequestTF2Friends::GetCachedSize() const
 T CMsgTFRequestTF2Friends::GetMetadata() const
 T CMsgTFRequestTF2Friends::IsInitialized() const
 T CMsgTFRequestTF2Friends::MergeFrom(CMsgTFRequestTF2Friends const&)
 T CMsgTFRequestTF2Friends::New() const
 T CMsgTFRequestTF2Friends::SerializeWithCachedSizesToArray(unsigned char*) const
 T CMsgTFRequestTF2Friends::SetCachedSize(int) const
 T CMsgTFRequestTF2Friends::~CMsgTFRequestTF2Friends()
 T CMsgTFRequestTF2FriendsResponse::ByteSize() const
 T CMsgTFRequestTF2FriendsResponse::Clear()
 T CMsgTFRequestTF2FriendsResponse::GetCachedSize() const
 T CMsgTFRequestTF2FriendsResponse::GetMetadata() const
 T CMsgTFRequestTF2FriendsResponse::IsInitialized() const
 T CMsgTFRequestTF2FriendsResponse::MergeFrom(CMsgTFRequestTF2FriendsResponse const&)
 T CMsgTFRequestTF2FriendsResponse::New() const
 T CMsgTFRequestTF2FriendsResponse::SerializeWithCachedSizesToArray(unsigned char*) const
 T CMsgTFRequestTF2FriendsResponse::SetCachedSize(int) const
 T CMsgTFRequestTF2FriendsResponse::~CMsgTFRequestTF2FriendsResponse()
 T CMsgTFSaxxyBroadcast::ByteSize() const
 T CMsgTFSaxxyBroadcast::Clear()
 T CMsgTFSaxxyBroadcast::GetCachedSize() const
 T CMsgTFSaxxyBroadcast::GetMetadata() const
 T CMsgTFSaxxyBroadcast::IsInitialized() const
 T CMsgTFSaxxyBroadcast::MergeFrom(CMsgTFSaxxyBroadcast const&)
 T CMsgTFSaxxyBroadcast::New() const
 T CMsgTFSaxxyBroadcast::SerializeWithCachedSizesToArray(unsigned char*) const
 T CMsgTFSaxxyBroadcast::SetCachedSize(int) const
 T CMsgTFSaxxyBroadcast::~CMsgTFSaxxyBroadcast()
 T CMsgTFThankedBySomeone::ByteSize() const
 T CMsgTFThankedBySomeone::Clear()
 T CMsgTFThankedBySomeone::GetCachedSize() const
 T CMsgTFThankedBySomeone::GetMetadata() const
 T CMsgTFThankedBySomeone::IsInitialized() const
 T CMsgTFThankedBySomeone::MergeFrom(CMsgTFThankedBySomeone const&)
 T CMsgTFThankedBySomeone::New() const
 T CMsgTFThankedBySomeone::SerializeWithCachedSizesToArray(unsigned char*) const
 T CMsgTFThankedBySomeone::SetCachedSize(int) const
 T CMsgTFThankedBySomeone::~CMsgTFThankedBySomeone()
 T CMsgTFThankedSomeone::ByteSize() const
 T CMsgTFThankedSomeone::Clear()
 T CMsgTFThankedSomeone::GetCachedSize() const
 T CMsgTFThankedSomeone::GetMetadata() const
 T CMsgTFThankedSomeone::IsInitialized() const
 T CMsgTFThankedSomeone::MergeFrom(CMsgTFThankedSomeone const&)
 T CMsgTFThankedSomeone::New() const
 T CMsgTFThankedSomeone::SerializeWithCachedSizesToArray(unsigned char*) const
 T CMsgTFThankedSomeone::SetCachedSize(int) const
 T CMsgTFThankedSomeone::~CMsgTFThankedSomeone()
 T CMsgTFVoteKickBanPlayer::ByteSize() const
 T CMsgTFVoteKickBanPlayer::Clear()
 T CMsgTFVoteKickBanPlayer::GetCachedSize() const
 T CMsgTFVoteKickBanPlayer::GetMetadata() const
 T CMsgTFVoteKickBanPlayer::IsInitialized() const
 T CMsgTFVoteKickBanPlayer::MergeFrom(CMsgTFVoteKickBanPlayer const&)
 T CMsgTFVoteKickBanPlayer::New() const
 T CMsgTFVoteKickBanPlayer::SerializeWithCachedSizesToArray(unsigned char*) const
 T CMsgTFVoteKickBanPlayer::SetCachedSize(int) const
 T CMsgTFVoteKickBanPlayer::~CMsgTFVoteKickBanPlayer()
 T CMsgTFVoteKickBanPlayerResult::ByteSize() const
 T CMsgTFVoteKickBanPlayerResult::CMsgTFVoteKickBanPlayerResult()
 T CMsgTFVoteKickBanPlayerResult::Clear()
 T CMsgTFVoteKickBanPlayerResult::GetCachedSize() const
 T CMsgTFVoteKickBanPlayerResult::GetMetadata() const
 T CMsgTFVoteKickBanPlayerResult::IsInitialized() const
 T CMsgTFVoteKickBanPlayerResult::MergeFrom(CMsgTFVoteKickBanPlayerResult const&)
 T CMsgTFVoteKickBanPlayerResult::New() const
 T CMsgTFVoteKickBanPlayerResult::SerializeWithCachedSizesToArray(unsigned char*) const
 T CMsgTFVoteKickBanPlayerResult::SetCachedSize(int) const
 T CMsgTFVoteKickBanPlayerResult::default_instance()
 T CMsgTFVoteKickBanPlayerResult::descriptor()
 T CMsgTFVoteKickBanPlayerResult::~CMsgTFVoteKickBanPlayerResult()
 T CMsgTFWorldStatus::ByteSize() const
 T CMsgTFWorldStatus::Clear()
 T CMsgTFWorldStatus::GetCachedSize() const
 T CMsgTFWorldStatus::GetMetadata() const
 T CMsgTFWorldStatus::IsInitialized() const
 T CMsgTFWorldStatus::MergeFrom(CMsgTFWorldStatus const&)
 T CMsgTFWorldStatus::New() const
 T CMsgTFWorldStatus::SerializeWithCachedSizesToArray(unsigned char*) const
 T CMsgTFWorldStatus::SetCachedSize(int) const
 T CMsgTFWorldStatus::~CMsgTFWorldStatus()
 T CMsgTFXPSource::ByteSize() const
 T CMsgTFXPSource::CMsgTFXPSource()
 T CMsgTFXPSource::Clear()
 T CMsgTFXPSource::CopyFrom(CMsgTFXPSource const&)
 T CMsgTFXPSource::GetCachedSize() const
 T CMsgTFXPSource::GetMetadata() const
 T CMsgTFXPSource::IsInitialized() const
 T CMsgTFXPSource::MergeFrom(CMsgTFXPSource const&)
 T CMsgTFXPSource::New() const
 T CMsgTFXPSource::SerializeWithCachedSizesToArray(unsigned char*) const
 T CMsgTFXPSource::SetCachedSize(int) const
 T CMsgTFXPSource::~CMsgTFXPSource()
 T CMsgTFXPSourceBreakdown::ByteSize() const
 T CMsgTFXPSourceBreakdown::CMsgTFXPSourceBreakdown()
 T CMsgTFXPSourceBreakdown::Clear()
 T CMsgTFXPSourceBreakdown::GetCachedSize() const
 T CMsgTFXPSourceBreakdown::GetMetadata() const
 T CMsgTFXPSourceBreakdown::IsInitialized() const
 T CMsgTFXPSourceBreakdown::MergeFrom(CMsgTFXPSourceBreakdown const&)
 T CMsgTFXPSourceBreakdown::New() const
 T CMsgTFXPSourceBreakdown::SerializeWithCachedSizesToArray(unsigned char*) const
 T CMsgTFXPSourceBreakdown::SetCachedSize(int) const
 T CMsgTFXPSourceBreakdown::~CMsgTFXPSourceBreakdown()
 T CMsgTrackUniquePlayerPairEvent::ByteSize() const
 T CMsgTrackUniquePlayerPairEvent::CMsgTrackUniquePlayerPairEvent()
 T CMsgTrackUniquePlayerPairEvent::Clear()
 T CMsgTrackUniquePlayerPairEvent::GetCachedSize() const
 T CMsgTrackUniquePlayerPairEvent::GetMetadata() const
 T CMsgTrackUniquePlayerPairEvent::IsInitialized() const
 T CMsgTrackUniquePlayerPairEvent::MergeFrom(CMsgTrackUniquePlayerPairEvent const&)
 T CMsgTrackUniquePlayerPairEvent::New() const
 T CMsgTrackUniquePlayerPairEvent::SerializeWithCachedSizesToArray(unsigned char*) const
 T CMsgTrackUniquePlayerPairEvent::SetCachedSize(int) const
 T CMsgTrackUniquePlayerPairEvent::default_instance()
 T CMsgTrackUniquePlayerPairEvent::descriptor()
 T CMsgTrackUniquePlayerPairEvent::~CMsgTrackUniquePlayerPairEvent()
 T CMsgUpdateHalloweenMerasmusLootLevel::ByteSize() const
 T CMsgUpdateHalloweenMerasmusLootLevel::CMsgUpdateHalloweenMerasmusLootLevel()
 T CMsgUpdateHalloweenMerasmusLootLevel::Clear()
 T CMsgUpdateHalloweenMerasmusLootLevel::GetCachedSize() const
 T CMsgUpdateHalloweenMerasmusLootLevel::GetMetadata() const
 T CMsgUpdateHalloweenMerasmusLootLevel::IsInitialized() const
 T CMsgUpdateHalloweenMerasmusLootLevel::MergeFrom(CMsgUpdateHalloweenMerasmusLootLevel const&)
 T CMsgUpdateHalloweenMerasmusLootLevel::New() const
 T CMsgUpdateHalloweenMerasmusLootLevel::SerializeWithCachedSizesToArray(unsigned char*) const
 T CMsgUpdateHalloweenMerasmusLootLevel::SetCachedSize(int) const
 T CMsgUpdateHalloweenMerasmusLootLevel::default_instance()
 T CMsgUpdateHalloweenMerasmusLootLevel::descriptor()
 T CMsgUpdateHalloweenMerasmusLootLevel::~CMsgUpdateHalloweenMerasmusLootLevel()
 T CMsgUpdateHalloweenMerasmusLootLevel_Player::ByteSize() const
 T CMsgUpdateHalloweenMerasmusLootLevel_Player::Clear()
 T CMsgUpdateHalloweenMerasmusLootLevel_Player::GetCachedSize() const
 T CMsgUpdateHalloweenMerasmusLootLevel_Player::GetMetadata() const
 T CMsgUpdateHalloweenMerasmusLootLevel_Player::IsInitialized() const
 T CMsgUpdateHalloweenMerasmusLootLevel_Player::MergeFrom(CMsgUpdateHalloweenMerasmusLootLevel_Player const&)
 T CMsgUpdateHalloweenMerasmusLootLevel_Player::New() const
 T CMsgUpdateHalloweenMerasmusLootLevel_Player::SerializeWithCachedSizesToArray(unsigned char*) const
 T CMsgUpdateHalloweenMerasmusLootLevel_Player::SetCachedSize(int) const
 T CMsgUpdateHalloweenMerasmusLootLevel_Player::~CMsgUpdateHalloweenMerasmusLootLevel_Player()
 T CMsgUpdateItemSchema::ByteSize() const
 T CMsgUpdateItemSchema::CMsgUpdateItemSchema()
 T CMsgUpdateItemSchema::Clear()
 T CMsgUpdateItemSchema::GetCachedSize() const
 T CMsgUpdateItemSchema::GetMetadata() const
 T CMsgUpdateItemSchema::IsInitialized() const
 T CMsgUpdateItemSchema::MergeFrom(CMsgUpdateItemSchema const&)
 T CMsgUpdateItemSchema::New() const
 T CMsgUpdateItemSchema::SerializeWithCachedSizesToArray(unsigned char*) const
 T CMsgUpdateItemSchema::SetCachedSize(int) const
 T CMsgUpdateItemSchema::SharedDtor()
 T CMsgUpdateItemSchema::default_instance()
 T CMsgUpdateItemSchema::descriptor()
 T CMsgUpdateItemSchema::~CMsgUpdateItemSchema()
 T CMsgUpdatePeriodicEvent::ByteSize() const
 T CMsgUpdatePeriodicEvent::Clear()
 T CMsgUpdatePeriodicEvent::GetCachedSize() const
 T CMsgUpdatePeriodicEvent::GetMetadata() const
 T CMsgUpdatePeriodicEvent::IsInitialized() const
 T CMsgUpdatePeriodicEvent::MergeFrom(CMsgUpdatePeriodicEvent const&)
 T CMsgUpdatePeriodicEvent::New() const
 T CMsgUpdatePeriodicEvent::SerializeWithCachedSizesToArray(unsigned char*) const
 T CMsgUpdatePeriodicEvent::SetCachedSize(int) const
 T CMsgUpdatePeriodicEvent::~CMsgUpdatePeriodicEvent()
 T CMsgUseItem::ByteSize() const
 T CMsgUseItem::Clear()
 T CMsgUseItem::GetCachedSize() const
 T CMsgUseItem::GetMetadata() const
 T CMsgUseItem::IsInitialized() const
 T CMsgUseItem::MergeFrom(CMsgUseItem const&)
 T CMsgUseItem::New() const
 T CMsgUseItem::SerializeWithCachedSizesToArray(unsigned char*) const
 T CMsgUseItem::SetCachedSize(int) const
 T CMsgUseItem::~CMsgUseItem()
 T CMsgWebAPIKey::ByteSize() const
 T CMsgWebAPIKey::Clear()
 T CMsgWebAPIKey::GetCachedSize() const
 T CMsgWebAPIKey::GetMetadata() const
 T CMsgWebAPIKey::IsInitialized() const
 T CMsgWebAPIKey::MergeFrom(CMsgWebAPIKey const&)
 T CMsgWebAPIKey::New() const
 T CMsgWebAPIKey::SerializeWithCachedSizesToArray(unsigned char*) const
 T CMsgWebAPIKey::SetCachedSize(int) const
 T CMsgWebAPIKey::~CMsgWebAPIKey()
 T CMsgWebAPIRequest::ByteSize() const
 T CMsgWebAPIRequest::Clear()
 T CMsgWebAPIRequest::GetCachedSize() const
 T CMsgWebAPIRequest::GetMetadata() const
 T CMsgWebAPIRequest::IsInitialized() const
 T CMsgWebAPIRequest::MergeFrom(CMsgWebAPIRequest const&)
 T CMsgWebAPIRequest::New() const
 T CMsgWebAPIRequest::SerializeWithCachedSizesToArray(unsigned char*) const
 T CMsgWebAPIRequest::SetCachedSize(int) const
 T CMsgWebAPIRequest::SharedDtor()
 T CMsgWebAPIRequest::~CMsgWebAPIRequest()
 T CMultiInputVar::AddValue(variant_t, int)
 T CMultiInputVar::~CMultiInputVar()
 T CMultiPlayerAnimState::AddToGestureSlot(int, Activity, bool)
 T CMultiPlayerAnimState::CMultiPlayerAnimState(CBasePlayer*, MultiPlayerMovementData_t&)
 T CMultiPlayerAnimState::CalcMainActivity()
 T CMultiPlayerAnimState::CalcMovementPlaybackRate(bool*)
 T CMultiPlayerAnimState::CalcMovementSpeed(bool*)
 T CMultiPlayerAnimState::ClearAnimationState()
 T CMultiPlayerAnimState::ComputeMainSequence()
 T CMultiPlayerAnimState::ComputePoseParam_AimPitch(CStudioHdr*)
 T CMultiPlayerAnimState::ComputePoseParam_AimYaw(CStudioHdr*)
 T CMultiPlayerAnimState::ComputePoseParam_MoveYaw(CStudioHdr*)
 T CMultiPlayerAnimState::ComputeSequences(CStudioHdr*)
 T CMultiPlayerAnimState::DebugGestureInfo()
 T CMultiPlayerAnimState::DebugShowAnimState(int)
 T CMultiPlayerAnimState::DebugShowAnimStateForPlayer(bool)
 T CMultiPlayerAnimState::DoAnimationEvent(PlayerAnimEvent_t, int)
 T CMultiPlayerAnimState::DoMovementTest(CStudioHdr*)
 T CMultiPlayerAnimState::EstimateYaw()
 T CMultiPlayerAnimState::GetCurrentMaxGroundSpeed()
 T CMultiPlayerAnimState::GetGesturePlaybackRate()
 T CMultiPlayerAnimState::GetMovementFlags(CStudioHdr*)
 T CMultiPlayerAnimState::GetOuterAbsVelocity(Vector&)
 T CMultiPlayerAnimState::GetOuterXYSpeed()
 T CMultiPlayerAnimState::GetRenderAngles()
 T CMultiPlayerAnimState::HandleDucking(Activity&)
 T CMultiPlayerAnimState::HandleDying(Activity&)
 T CMultiPlayerAnimState::HandleJumping(Activity&)
 T CMultiPlayerAnimState::HandleMoving(Activity&)
 T CMultiPlayerAnimState::HandleSwimming(Activity&)
 T CMultiPlayerAnimState::Init(CBasePlayer*, MultiPlayerMovementData_t&)
 T CMultiPlayerAnimState::InitGestureSlots()
 T CMultiPlayerAnimState::IsGestureSlotActive(int)
 T CMultiPlayerAnimState::IsGestureSlotPlaying(int, Activity)
 T CMultiPlayerAnimState::PlayFlinchGesture(Activity)
 T CMultiPlayerAnimState::Release()
 T CMultiPlayerAnimState::ResetGestureSlot(int)
 T CMultiPlayerAnimState::RestartGesture(int, Activity, bool)
 T CMultiPlayerAnimState::RestartMainSequence()
 T CMultiPlayerAnimState::SelectWeightedSequence(Activity)
 T CMultiPlayerAnimState::SetRunSpeed(float)
 T CMultiPlayerAnimState::SetSprintSpeed(float)
 T CMultiPlayerAnimState::SetWalkSpeed(float)
 T CMultiPlayerAnimState::SetupPoseParameters(CStudioHdr*)
 T CMultiPlayerAnimState::ShouldUpdateAnimState()
 T CMultiPlayerAnimState::ShowDebugInfo()
 T CMultiPlayerAnimState::TranslateActivity(Activity)
 T CMultiPlayerAnimState::Update(float, float)
 T CMultiPlayerAnimState::UpdateInterpolators()
 T CMultiPlayerAnimState::VerifyAnimLayerInSlot(int)
 T CMultiPlayerAnimState::~CMultiPlayerAnimState()
 T CMultiSource::GetDataDescMap()
 T CMultiSource::IsTriggered(CBaseEntity*)
 T CMultiSource::KeyValue(char const*, char const*)
 T CMultiSource::ObjectCaps()
 T CMultiSource::Register()
 T CMultiSource::Spawn()
 T CMultiSource::Use(CBaseEntity*, CBaseEntity*, USE_TYPE, float)
 T CMultiSource::~CMultiSource()
 T CMultiplayRules::AllowAutoTargetCrosshair()
 T CMultiplayRules::AllowDamage(CBaseEntity*, CTakeDamageInfo const&)
 T CMultiplayRules::CMultiplayRules()
 T CMultiplayRules::CanHaveItem(CBasePlayer*, CItem*)
 T CMultiplayRules::CanHavePlayerItem(CBasePlayer*, CBaseCombatWeapon*)
 T CMultiplayRules::ChangeLevel()
 T CMultiplayRules::ChangeLevelToMap(char const*)
 T CMultiplayRules::ClientCommand(CBaseEntity*, CCommand const&)
 T CMultiplayRules::ClientCommandKeyValues(edict_t*, KeyValues*)
 T CMultiplayRules::ClientConnected(edict_t*, char const*, char const*, char*, int)
 T CMultiplayRules::ClientDisconnected(edict_t*)
 T CMultiplayRules::ClientSettingsChanged(CBasePlayer*)
 T CMultiplayRules::Damage_GetNoPhysicsForce()
 T CMultiplayRules::Damage_GetShouldGibCorpse()
 T CMultiplayRules::Damage_GetShouldNotBleed()
 T CMultiplayRules::Damage_GetShowOnHud()
 T CMultiplayRules::Damage_GetTimeBased()
 T CMultiplayRules::Damage_IsTimeBased(int)
 T CMultiplayRules::Damage_NoPhysicsForce(int)
 T CMultiplayRules::Damage_ShouldGibCorpse(int)
 T CMultiplayRules::Damage_ShouldNotBleed(int)
 T CMultiplayRules::Damage_ShowOnHUD(int)
 T CMultiplayRules::DeadPlayerAmmo(CBasePlayer*)
 T CMultiplayRules::DeadPlayerWeapons(CBasePlayer*)
 T CMultiplayRules::DeathNotice(CBasePlayer*, CTakeDamageInfo const&)
 T CMultiplayRules::DetermineMapCycleFilename(char*, int, bool)
 T CMultiplayRules::EndMultiplayerGame()
 T CMultiplayRules::FAllowFlashlight()
 T CMultiplayRules::FAllowNPCs()
 T CMultiplayRules::FPlayerCanRespawn(CBasePlayer*)
 T CMultiplayRules::FPlayerCanTakeDamage(CBasePlayer*, CBaseEntity*, CTakeDamageInfo const&)
 T CMultiplayRules::FShouldSwitchWeapon(CBasePlayer*, CBaseCombatWeapon*)
 T CMultiplayRules::FlHEVChargerRechargeTime()
 T CMultiplayRules::FlHealthChargerRechargeTime()
 T CMultiplayRules::FlItemRespawnTime(CItem*)
 T CMultiplayRules::FlPlayerFallDamage(CBasePlayer*)
 T CMultiplayRules::FlPlayerSpawnTime(CBasePlayer*)
 T CMultiplayRules::FlWeaponRespawnTime(CBaseCombatWeapon*)
 T CMultiplayRules::FlWeaponTryRespawn(CBaseCombatWeapon*)
 T CMultiplayRules::FrameUpdatePostEntityThink()
 T CMultiplayRules::FreeMapCycleFileVector(CUtlVector<char*, CUtlMemory<char*, int> >&)
 T CMultiplayRules::GetDeathScorer(CBaseEntity*, CBaseEntity*, CBaseEntity*)
 T CMultiplayRules::GetLastMajorEventTime()
 T CMultiplayRules::GetNextBestWeapon(CBaseCombatCharacter*, CBaseCombatWeapon*)
 T CMultiplayRules::GetNextLevelName(char*, int, bool)
 T CMultiplayRules::GetPlayerSpawnSpot(CBasePlayer*)
 T CMultiplayRules::GetTaggedConVarList(KeyValues*)
 T CMultiplayRules::GetTeamID(CBaseEntity*)
 T CMultiplayRules::GoToIntermission()
 T CMultiplayRules::HandleTimeLimitChange()
 T CMultiplayRules::HaveAllPlayersSpeakConceptIfAllowed(int, int, char const*)
 T CMultiplayRules::IPointsForKill(CBasePlayer*, CBasePlayer*)
 T CMultiplayRules::IncrementMapCycleIndex()
 T CMultiplayRules::Init()
 T CMultiplayRules::InitCustomResponseRulesDicts()
 T CMultiplayRules::InitHUD(CBasePlayer*)
 T CMultiplayRules::IsAllowedToSpawn(CBaseEntity*)
 T CMultiplayRules::IsCoOp()
 T CMultiplayRules::IsDeathmatch()
 T CMultiplayRules::IsLoadingBugBaitReport()
 T CMultiplayRules::IsManualMapChangeOkay(char const**)
 T CMultiplayRules::IsMapInMapCycle(char const*)
 T CMultiplayRules::IsMultiplayer()
 T CMultiplayRules::ItemShouldRespawn(CItem*)
 T CMultiplayRules::LoadMapCycleFile()
 T CMultiplayRules::LoadMapCycleFileIntoVector(char const*, CUtlVector<char*, CUtlMemory<char*, int> >&)
 T CMultiplayRules::LoadVoiceCommandScript()
 T CMultiplayRules::PlayFootstepSounds(CBasePlayer*)
 T CMultiplayRules::PlayTextureSounds()
 T CMultiplayRules::PlayerCanHearChat(CBasePlayer*, CBasePlayer*)
 T CMultiplayRules::PlayerGotAmmo(CBaseCombatCharacter*, char*, int)
 T CMultiplayRules::PlayerGotItem(CBasePlayer*, CItem*)
 T CMultiplayRules::PlayerKilled(CBasePlayer*, CTakeDamageInfo const&)
 T CMultiplayRules::PlayerRelationship(CBaseEntity*, CBaseEntity*)
 T CMultiplayRules::PlayerSpawn(CBasePlayer*)
 T CMultiplayRules::PlayerThink(CBasePlayer*)
 T CMultiplayRules::RandomPlayersSpeakConceptIfAllowed(int, int, int, char const*)
 T CMultiplayRules::RawLoadMapCycleFileIntoVector(char const*, CUtlVector<char*, CUtlMemory<char*, int> >&)
 T CMultiplayRules::RefreshSkillData(bool)
 T CMultiplayRules::ResetMapCycleTimeStamp()
 T CMultiplayRules::ShouldDrawHeadLabels()
 T CMultiplayRules::ShutdownCustomResponseRulesDicts()
 T CMultiplayRules::SkipNextMapInCycle()
 T CMultiplayRules::SwitchToNextBestWeapon(CBaseCombatCharacter*, CBaseCombatWeapon*)
 T CMultiplayRules::Think()
 T CMultiplayRules::UseSuicidePenalty()
 T CMultiplayRules::VecItemRespawnAngles(CItem*)
 T CMultiplayRules::VecItemRespawnSpot(CItem*)
 T CMultiplayRules::VecWeaponRespawnSpot(CBaseCombatWeapon*)
 T CMultiplayRules::VoiceCommand(CBaseMultiplayerPlayer*, int, int)
 T CMultiplayRules::WeaponShouldRespawn(CBaseCombatWeapon*)
 T CMultiplayRules::~CMultiplayRules()
 T CMultiplayer_Expresser::AllowMultipleScenes()
 T CMultiplayer_Expresser::CMultiplayer_Expresser(CBaseFlex*)
 T CMultiplayer_Expresser::DisallowMultipleScenes()
 T CMultiplayer_Expresser::IsSpeaking()
 T CMultiplayer_Expresser::~CMultiplayer_Expresser()
 T CMultipleEscort::UpdateTransmitState()
 T CMultipleEscort::~CMultipleEscort()
 T CMvMMatchGroupDescription::BMatchIsSafeToLeaveForPlayer(CMatchInfo const*, CMatchInfo::PlayerMatchData_t const*) const
 T CMvMMatchGroupDescription::BPlayWinMusic(int, bool) const
 T CMvMMatchGroupDescription::InitGameRulesSettings() const
 T CMvMMatchGroupDescription::InitGameRulesSettingsPostEntity() const
 T CMvMMatchGroupDescription::InitServerSettingsForMatch(CTFGSLobby const*) const
 T CMvMMatchGroupDescription::PostMatchClearServerSettings() const
 T CMvMMatchGroupDescription::ShouldRequestLateJoin() const
 T CMvMVictoryInfo::Init(CTFGSLobby*)
 T CNPCMaker* _CreateEntityTemplate<CNPCMaker>(CNPCMaker*, char const*)
 T CNPCMaker::GetDataDescMap()
 T CNPCMaker::MakeNPC()
 T CNPCMaker::Precache()
 T CNPCMaker::~CNPCMaker()
 T CNPCSpawnDestination::GetDataDescMap()
 T CNPCSpawnDestination::~CNPCSpawnDestination()
 T CNPC_Furniture::Classify()
 T CNPC_Furniture::CreateVPhysics()
 T CNPC_Furniture::DrawDebugGeometryOverlays()
 T CNPC_Furniture::GetDataDescMap()
 T CNPC_Furniture::InputDisablePlayerCollision(inputdata_t&)
 T CNPC_Furniture::InputEnablePlayerCollision(inputdata_t&)
 T CNPC_Furniture::MaxYawSpeed()
 T CNPC_Furniture::NPCThink()
 T CNPC_Furniture::ObjectCaps()
 T CNPC_Furniture::OnRestore()
 T CNPC_Furniture::OnTakeDamage(CTakeDamageInfo const&)
 T CNPC_Furniture::Precache()
 T CNPC_Furniture::SelectSchedule()
 T CNPC_Furniture::SetPlayerAvoidState()
 T CNPC_Furniture::Spawn()
 T CNPC_Furniture::UpdateBoneFollowerState()
 T CNPC_Furniture::UpdateEfficiency(bool)
 T CNPC_Furniture::UpdateOnRemove()
 T CNPC_Furniture::~CNPC_Furniture()
 T CNPC_VehicleDriver::Activate()
 T CNPC_VehicleDriver::BloodColor()
 T CNPC_VehicleDriver::CheckForTeleport()
 T CNPC_VehicleDriver::Classify()
 T CNPC_VehicleDriver::DriveVehicle()
 T CNPC_VehicleDriver::GatherEnemyConditions(CBaseEntity*)
 T CNPC_VehicleDriver::GetClassScheduleIdSpace()
 T CNPC_VehicleDriver::GetDataDescMap()
 T CNPC_VehicleDriver::GetDefaultNavGoalTolerance()
 T CNPC_VehicleDriver::GetSchedulingErrorName()
 T CNPC_VehicleDriver::IRelationType(CBaseEntity*)
 T CNPC_VehicleDriver::InitCustomSchedules()
 T CNPC_VehicleDriver::InputGotoPathCorner(inputdata_t&)
 T CNPC_VehicleDriver::InputSetDriversMaxSpeed(inputdata_t&)
 T CNPC_VehicleDriver::InputSetDriversMinSpeed(inputdata_t&)
 T CNPC_VehicleDriver::InputStartFiring(inputdata_t&)
 T CNPC_VehicleDriver::InputStartForward(inputdata_t&)
 T CNPC_VehicleDriver::InputStop(inputdata_t&)
 T CNPC_VehicleDriver::InputStopFiring(inputdata_t&)
 T CNPC_VehicleDriver::LoadedSchedules()
 T CNPC_VehicleDriver::OnRestore()
 T CNPC_VehicleDriver::OverrideMove(float)
 T CNPC_VehicleDriver::OverridePathMove(float)
 T CNPC_VehicleDriver::Precache()
 T CNPC_VehicleDriver::PrescheduleThink()
 T CNPC_VehicleDriver::RangeAttack1Conditions(float, float)
 T CNPC_VehicleDriver::RangeAttack2Conditions(float, float)
 T CNPC_VehicleDriver::RunTask(Task_t const*)
 T CNPC_VehicleDriver::SelectSchedule()
 T CNPC_VehicleDriver::Spawn()
 T CNPC_VehicleDriver::SquadSlotName(int)
 T CNPC_VehicleDriver::StartTask(Task_t const*)
 T CNPC_VehicleDriver::TranslateSchedule(int)
 T CNPC_VehicleDriver::UpdateEfficiency(bool)
 T CNPC_VehicleDriver::UpdateOnRemove()
 T CNPC_VehicleDriver::WaypointReached()
 T CNPC_VehicleDriver::~CNPC_VehicleDriver()
 T CNavArea::AddFuncNavCostEntity(CFuncNavCost*)
 T CNavArea::AddIncomingConnection(CNavArea*, NavDirType)
 T CNavArea::AddLadderDown(CNavLadder*)
 T CNavArea::AddLadderUp(CNavLadder*)
 T CNavArea::AddSpotEncounters(CNavArea const*, NavDirType, CNavArea const*, NavDirType)
 T CNavArea::AddToOpenList()
 T CNavArea::AddToOpenListTail()
 T CNavArea::AssignNodes(CNavArea*)
 T CNavArea::Build(CNavNode*, CNavNode*, CNavNode*, CNavNode*)
 T CNavArea::Build(Vector const&, Vector const&)
 T CNavArea::Build(Vector const&, Vector const&, Vector const&, Vector const&)
 T CNavArea::CNavArea()
 T CNavArea::CheckFloor(CBaseEntity*)
 T CNavArea::CheckWaterLevel()
 T CNavArea::ClearAllNavCostEntities()
 T CNavArea::ClearSearchLists()
 T CNavArea::CollectAdjacentAreas(CUtlVector<CNavArea*, CUtlMemory<CNavArea*, int> >*) const
 T CNavArea::CompressIDs()
 T CNavArea::ComputeAdjacentConnectionHeightChange(CNavArea const*) const
 T CNavArea::ComputeClosestPointInPortal(CNavArea const*, NavDirType, Vector const&, Vector*) const
 T CNavArea::ComputeEarliestOccupyTimes()
 T CNavArea::ComputeFuncNavCost(CBaseCombatCharacter*) const
 T CNavArea::ComputeHidingSpots()
 T CNavArea::ComputeLargestPortal(CNavArea const*, Vector*, float*) const
 T CNavArea::ComputeLighting()
 T CNavArea::ComputeNormal(Vector*, bool) const
 T CNavArea::ComputePortal(CNavArea const*, NavDirType, Vector*, float*) const
 T CNavArea::ComputeSniperSpots()
 T CNavArea::ComputeSpotEncounters()
 T CNavArea::ComputeVisToArea(CNavArea*&)
 T CNavArea::ComputeVisibility(CNavArea const*, bool, bool, bool*) const
 T CNavArea::ComputeVisibilityDelta(CNavArea const*) const
 T CNavArea::ComputeVisibilityToMesh()
 T CNavArea::ConnectTo(CNavArea*, NavDirType)
 T CNavArea::ConnectTo(CNavLadder*)
 T CNavArea::Contains(CNavArea const*) const
 T CNavArea::Contains(Vector const&) const
 T CNavArea::CustomAnalysis(bool)
 T CNavArea::Disconnect(CNavArea*)
 T CNavArea::Disconnect(CNavLadder*)
 T CNavArea::Draw() const
 T CNavArea::DrawConnectedAreas() const
 T CNavArea::DrawDragSelectionSet(Color&) const
 T CNavArea::DrawFilled(int, int, int, int, float, bool, float) const
 T CNavArea::DrawHidingSpots() const
 T CNavArea::DrawSelectedSet(Vector const&) const
 T CNavArea::FindClosestNode(Vector const&, NavDirType) const
 T CNavArea::FinishMerge(CNavArea*)
 T CNavArea::FinishSplitEdit(CNavArea*, NavDirType)
 T CNavArea::GetClosestPointOnArea(Vector const*, Vector*) const
 T CNavArea::GetCornerHotspot(NavCornerType, Vector*) const
 T CNavArea::GetDanger(int)
 T CNavArea::GetDangerDecayRate() const
 T CNavArea::GetDistanceSquaredToPoint(Vector const&) const
 T CNavArea::GetExtent(Extent*) const
 T CNavArea::GetRandomPoint() const
 T CNavArea::GetZ(float, float) const
 T CNavArea::HasFuncNavAvoid() const
 T CNavArea::HasFuncNavPrefer() const
 T CNavArea::HasNodes() const
 T CNavArea::InheritAttributes(CNavArea*, CNavArea*)
 T CNavArea::IsAbleToMergeWith(CNavArea*) const
 T CNavArea::IsBlocked(int, bool) const
 T CNavArea::IsCompletelyVisible(CNavArea const*) const
 T CNavArea::IsCompletelyVisibleToTeam(int) const
 T CNavArea::IsConnected(CNavArea const*, NavDirType) const
 T CNavArea::IsConnected(CNavLadder const*, CNavLadder::LadderDirectionType) const
 T CNavArea::IsContiguous(CNavArea const*) const
 T CNavArea::IsCoplanar(CNavArea const*) const
 T CNavArea::IsEntirelyVisible(Vector const&, CBaseEntity const*) const
 T CNavArea::IsFlat() const
 T CNavArea::IsOverlapping(CNavArea const*) const
 T CNavArea::IsOverlapping(Extent const&) const
 T CNavArea::IsOverlapping(Vector const&, float) const
 T CNavArea::IsPartiallyVisible(Vector const&, CBaseEntity const*) const
 T CNavArea::IsPotentiallyVisible(CNavArea const*) const
 T CNavArea::IsPotentiallyVisibleToTeam(int) const
 T CNavArea::IsRoughlySquare() const
 T CNavArea::Load(CUtlBuffer&, unsigned int, unsigned int)
 T CNavArea::MarkAsBlocked(int, CBaseEntity*, bool)
 T CNavArea::MarkObstacleToAvoid(float)
 T CNavArea::MergeAdjacentConnections(CNavArea*)
 T CNavArea::MergeEdit(CNavArea*)
 T CNavArea::OnDestroyNotify(CNavArea*)
 T CNavArea::OnDestroyNotify(CNavLadder*)
 T CNavArea::OnEditCreateNotify(CNavArea*)
 T CNavArea::OnEditDestroyNotify(CNavArea*)
 T CNavArea::OnEditDestroyNotify(CNavLadder*)
 T CNavArea::OnEnter(CBaseCombatCharacter*, CNavArea*)
 T CNavArea::OnExit(CBaseCombatCharacter*, CNavArea*)
 T CNavArea::OnRoundRestart()
 T CNavArea::OnRoundRestartPreEntity()
 T CNavArea::OnServerActivate()
 T CNavArea::PlaceOnGround(NavCornerType, float)
 T CNavArea::PostLoad()
 T CNavArea::RaiseCorner(NavCornerType, int, bool)
 T CNavArea::RemoveFromOpenList()
 T CNavArea::RemoveOrthogonalConnections(NavDirType)
 T CNavArea::ResetNodes()
 T CNavArea::ResetPotentiallyVisibleAreas()
 T CNavArea::RestoreFromSelectedSet(KeyValues*)
 T CNavArea::Save(CUtlBuffer&, unsigned int) const
 T CNavArea::SaveToSelectedSet(KeyValues*) const
 T CNavArea::SetupPVS() const
 T CNavArea::Shift(Vector const&)
 T CNavArea::SpliceEdit(CNavArea*)
 T CNavArea::SplitEdit(bool, float, CNavArea**, CNavArea**)
 T CNavArea::Strip()
 T CNavArea::TestStairs()
 T CNavArea::UnblockArea(int)
 T CNavArea::UpdateAvoidanceObstacles()
 T CNavArea::UpdateBlocked(bool, int)
 T CNavArea::UpdateBlockedFromNavBlockers()
 T CNavArea::UpdateOnOpenList()
 T CNavArea::~CNavArea()
 T CNavLadder::CompressIDs()
 T CNavLadder::ConnectGeneratedLadder(float)
 T CNavLadder::ConnectTo(CNavArea*)
 T CNavLadder::Disconnect(CNavArea*)
 T CNavLadder::DrawConnectedAreas()
 T CNavLadder::DrawLadder() const
 T CNavLadder::IsConnected(CNavArea const*, CNavLadder::LadderDirectionType) const
 T CNavLadder::Load(CUtlBuffer&, unsigned int)
 T CNavLadder::OnDestroyNotify(CNavArea*)
 T CNavLadder::OnRoundRestart()
 T CNavLadder::OnSplit(CNavArea*, CNavArea*, CNavArea*)
 T CNavLadder::Save(CUtlBuffer&, unsigned int) const
 T CNavLadder::SetDir(NavDirType)
 T CNavLadder::Shift(Vector const&)
 T CNavLadder::~CNavLadder()
 T CNavMesh::AddNavArea(CNavArea*)
 T CNavMesh::AddNode(Vector const&, Vector const&, NavDirType, CNavNode*, bool, float, float, float)
 T CNavMesh::AddToSelectedSet(CNavArea*)
 T CNavMesh::AddWalkableSeed(Vector const&, Vector const&)
 T CNavMesh::AddWalkableSeeds()
 T CNavMesh::AllocateGrid(float, float, float, float)
 T CNavMesh::BeginAnalysis(bool)
 T CNavMesh::BeginCustomAnalysis(bool)
 T CNavMesh::BeginGeneration(bool)
 T CNavMesh::BeginVisibilityComputations()
 T CNavMesh::BuildArea(CNavNode*, int, int)
 T CNavMesh::BuildLadders()
 T CNavMesh::CNavMesh()
 T CNavMesh::ClearSelectedSet()
 T CNavMesh::CommandNavAddToSelectedSet()
 T CNavMesh::CommandNavAddToSelectedSetByID(CCommand const&)
 T CNavMesh::CommandNavBeginArea()
 T CNavMesh::CommandNavBeginDeselecting()
 T CNavMesh::CommandNavBeginDragDeselecting()
 T CNavMesh::CommandNavBeginDragSelecting()
 T CNavMesh::CommandNavBeginSelecting()
 T CNavMesh::CommandNavBeginShiftXY()
 T CNavMesh::CommandNavBuildLadder()
 T CNavMesh::CommandNavClearSelectedSet()
 T CNavMesh::CommandNavConnect()
 T CNavMesh::CommandNavCornerLower(CCommand const&)
 T CNavMesh::CommandNavCornerPlaceOnGround(CCommand const&)
 T CNavMesh::CommandNavCornerRaise(CCommand const&)
 T CNavMesh::CommandNavCornerSelect()
 T CNavMesh::CommandNavDelete()
 T CNavMesh::CommandNavDeleteMarked()
 T CNavMesh::CommandNavDisconnect()
 T CNavMesh::CommandNavDisconnectOutgoingOneWays()
 T CNavMesh::CommandNavEndArea()
 T CNavMesh::CommandNavEndDeselecting()
 T CNavMesh::CommandNavEndDragDeselecting()
 T CNavMesh::CommandNavEndDragSelecting()
 T CNavMesh::CommandNavEndSelecting()
 T CNavMesh::CommandNavEndShiftXY()
 T CNavMesh::CommandNavFloodSelect(CCommand const&)
 T CNavMesh::CommandNavLadderFlip()
 T CNavMesh::CommandNavLowerDragVolumeMax()
 T CNavMesh::CommandNavLowerDragVolumeMin()
 T CNavMesh::CommandNavMakeSniperSpots()
 T CNavMesh::CommandNavMark(CCommand const&)
 T CNavMesh::CommandNavMarkUnnamed()
 T CNavMesh::CommandNavMarkWalkable()
 T CNavMesh::CommandNavMerge()
 T CNavMesh::CommandNavMergeMesh(CCommand const&)
 T CNavMesh::CommandNavPlaceFloodFill()
 T CNavMesh::CommandNavPlacePick()
 T CNavMesh::CommandNavPlaceSet()
 T CNavMesh::CommandNavRaiseDragVolumeMax()
 T CNavMesh::CommandNavRaiseDragVolumeMin()
 T CNavMesh::CommandNavRecallSelectedSet()
 T CNavMesh::CommandNavRemoveFromSelectedSet()
 T CNavMesh::CommandNavRemoveJumpAreas()
 T CNavMesh::CommandNavSaveSelected(CCommand const&)
 T CNavMesh::CommandNavSelectBlockedAreas()
 T CNavMesh::CommandNavSelectDamagingAreas()
 T CNavMesh::CommandNavSelectHalfSpace(CCommand const&)
 T CNavMesh::CommandNavSelectInvalidAreas()
 T CNavMesh::CommandNavSelectObstructedAreas()
 T CNavMesh::CommandNavSelectOrphans()
 T CNavMesh::CommandNavSelectStairs()
 T CNavMesh::CommandNavSplice()
 T CNavMesh::CommandNavSplit()
 T CNavMesh::CommandNavStoreSelectedSet()
 T CNavMesh::CommandNavSubdivide(CCommand const&)
 T CNavMesh::CommandNavToggleAttribute(NavAttributeType)
 T CNavMesh::CommandNavToggleDeselecting(bool)
 T CNavMesh::CommandNavToggleInSelectedSet()
 T CNavMesh::CommandNavTogglePlaceMode()
 T CNavMesh::CommandNavTogglePlacePainting()
 T CNavMesh::CommandNavToggleSelectedSet()
 T CNavMesh::CommandNavToggleSelecting(bool)
 T CNavMesh::CommandNavUnmark()
 T CNavMesh::CommandNavWarpToMark()
 T CNavMesh::ConnectGeneratedAreas()
 T CNavMesh::CreateArea() const
 T CNavMesh::CreateHidingSpot() const
 T CNavMesh::CreateLadder(Vector const&, Vector const&, float, Vector2D const&, float)
 T CNavMesh::CreateNavAreasFromNodes()
 T CNavMesh::CreateObstacleTopAreaIfNecessary(CNavArea*, CNavArea*, NavDirType, bool)
 T CNavMesh::CreateObstacleTopAreas()
 T CNavMesh::DestroyArea(CNavArea*) const
 T CNavMesh::DestroyHidingSpots()
 T CNavMesh::DestroyLadders()
 T CNavMesh::DestroyNavigationMesh(bool)
 T CNavMesh::DrawDanger() const
 T CNavMesh::DrawEditMode()
 T CNavMesh::EndCustomAnalysis()
 T CNavMesh::EndVisibilityComputations()
 T CNavMesh::FindActiveNavArea()
 T CNavMesh::FindGroundForNode(Vector*, Vector*)
 T CNavMesh::FindLadderCorners(Vector*, Vector*, Vector*)
 T CNavMesh::FindNavAreaOrLadderAlongRay(Vector const&, Vector const&, CNavArea**, CNavLadder**, CNavArea*)
 T CNavMesh::FireGameEvent(IGameEvent*)
 T CNavMesh::FixConnections()
 T CNavMesh::FixCornerOnCornerAreas()
 T CNavMesh::FixUpGeneratedAreas()
 T CNavMesh::GetEditVectors(Vector*, Vector*)
 T CNavMesh::GetFilename() const
 T CNavMesh::GetGenerationTraceMask() const
 T CNavMesh::GetGroundHeight(Vector const&, float*, Vector*) const
 T CNavMesh::GetLadderByID(unsigned int) const
 T CNavMesh::GetMarkedArea() const
 T CNavMesh::GetNavArea(CBaseEntity*, int, float) const
 T CNavMesh::GetNavArea(Vector const&, float) const
 T CNavMesh::GetNavAreaByID(unsigned int) const
 T CNavMesh::GetNavDataFromFile(CUtlBuffer&, bool*)
 T CNavMesh::GetNearestNavArea(CBaseEntity*, int, float) const
 T CNavMesh::GetNearestNavArea(Vector const&, bool, float, bool, bool, int) const
 T CNavMesh::GetNextWalkableSeedNode()
 T CNavMesh::GetSelecteSetSize() const
 T CNavMesh::GetSelectedSet() const
 T CNavMesh::GetSimpleGroundHeight(Vector const&, float*, Vector*) const
 T CNavMesh::GetSubVersionNumber() const
 T CNavMesh::HandleObstacleTopAreas()
 T CNavMesh::IsAuthoritative() const
 T CNavMesh::IsInSelectedSet(CNavArea const*) const
 T CNavMesh::IsSelectedSetEmpty() const
 T CNavMesh::Load()
 T CNavMesh::LoadCustomData(CUtlBuffer&, unsigned int)
 T CNavMesh::LoadCustomDataPreArea(CUtlBuffer&, unsigned int)
 T CNavMesh::LoadPlaceDatabase()
 T CNavMesh::MarkJumpAreas()
 T CNavMesh::MarkStairAreas()
 T CNavMesh::MergeGeneratedAreas()
 T CNavMesh::NameToPlace(char const*) const
 T CNavMesh::OnAreaBlocked(CNavArea*)
 T CNavMesh::OnAreaUnblocked(CNavArea*)
 T CNavMesh::OnAvoidanceObstacleEnteredArea(CNavArea*)
 T CNavMesh::OnAvoidanceObstacleLeftArea(CNavArea*)
 T CNavMesh::OnBreakableBroken(CBaseEntity*)
 T CNavMesh::OnBreakableCreated(CBaseEntity*)
 T CNavMesh::OnEditCreateNotify(CNavArea*)
 T CNavMesh::OnEditDestroyNotify(CNavArea*)
 T CNavMesh::OnEditDestroyNotify(CNavLadder*)
 T CNavMesh::OnEditModeEnd()
 T CNavMesh::OnEditModeStart()
 T CNavMesh::OnNodeAdded(CNavNode*)
 T CNavMesh::OnRoundRestart()
 T CNavMesh::OnRoundRestartPreEntity()
 T CNavMesh::OnServerActivate()
 T CNavMesh::PartialNameToPlace(char const*) const
 T CNavMesh::PlaceToName(unsigned int) const
 T CNavMesh::PostCustomAnalysis()
 T CNavMesh::PostLoad(unsigned int)
 T CNavMesh::PreLoadAreas(int)
 T CNavMesh::PrintAllPlaces() const
 T CNavMesh::RaiseAreasWithInternalObstacles()
 T CNavMesh::RegisterAvoidanceObstacle(INavAvoidanceObstacle*)
 T CNavMesh::RemoveFromSelectedSet(CNavArea*)
 T CNavMesh::RemoveJumpAreas()
 T CNavMesh::RemoveNavArea(CNavArea*)
 T CNavMesh::RemoveOverlappingObstacleTopAreas()
 T CNavMesh::Reset()
 T CNavMesh::SampleStep()
 T CNavMesh::Save() const
 T CNavMesh::SaveCustomData(CUtlBuffer&) const
 T CNavMesh::SaveCustomDataPreArea(CUtlBuffer&) const
 T CNavMesh::SetEditMode(CNavMesh::EditModeType)
 T CNavMesh::SetMarkedArea(CNavArea*)
 T CNavMesh::SetPlayerSpawnName(char const*)
 T CNavMesh::SimplifySelectedAreas()
 T CNavMesh::SnapToGrid(float, bool) const
 T CNavMesh::SplitAreasUnderOverhangs()
 T CNavMesh::SquareUpAreas()
 T CNavMesh::StichAndRemoveJumpAreas()
 T CNavMesh::StitchAreaSet(CUtlVector<CNavArea*, CUtlMemory<CNavArea*, int> >*)
 T CNavMesh::StripNavigationAreas()
 T CNavMesh::TestArea(CNavNode*, int, int)
 T CNavMesh::UnregisterAvoidanceObstacle(INavAvoidanceObstacle*)
 T CNavMesh::Update()
 T CNavMesh::UpdateAvoidanceObstacleAreas()
 T CNavMesh::UpdateBlockedAreas()
 T CNavMesh::UpdateDragSelectionSet()
 T CNavMesh::UpdateGeneration(float)
 T CNavMesh::ValidateNavAreaConnections()
 T CNavMesh::~CNavMesh()
 T CNavNode::CNavNode(Vector const&, Vector const&, CNavNode*, bool)
 T CNavNode::CheckCrouch()
 T CNavNode::CleanupGeneration()
 T CNavNode::ConnectTo(CNavNode*, NavDirType, float, float, float)
 T CNavNode::Draw()
 T CNavNode::GetGroundHeightAboveNode(NavCornerType) const
 T CNavNode::GetNode(Vector const&)
 T CNavNode::IsClosedCell() const
 T CNavNode::TestForCrouchArea(NavCornerType, Vector const&, Vector const&, float*)
 T CNavVectorNoEditAllocator::Reset()
 T CNetworkColor32Base<color32_s, CBaseEntity::NetworkVar_m_clrRender>::Init(unsigned char, unsigned char, unsigned char)
 T CNetworkColor32Base<color32_s, CBaseEntity::NetworkVar_m_clrRender>::Init(unsigned char, unsigned char, unsigned char, unsigned char)
 T CNetworkColor32Base<color32_s, CShadowControl::NetworkVar_m_shadowColor>::Init(unsigned char, unsigned char, unsigned char, unsigned char)
 T CNetworkHandleBase<CBaseEntity, CBaseObject::NetworkVar_m_hBuiltOnEntity>::operator=(CBaseEntity const*)
 T CNetworkHandleBase<CBaseEntity, CBasePlayer::NetworkVar_m_hObserverTarget>::Set(CBaseEntity const*)
 T CNetworkHandleBase<CBaseEntity, CBasePlayer::NetworkVar_m_hVehicle>::operator=(CBaseEntity const*)
 T CNetworkHandleBase<CBaseEntity, CBasePlayer::NetworkVar_m_hZoomOwner>::operator=(CBaseEntity const*)
 T CNetworkHandleBase<CBaseEntity, CCaptureFlag::NetworkVar_m_hPrevOwner>::operator=(CBaseEntity const*)
 T CNetworkHandleBase<CBaseEntity, CObjectSentrygun::NetworkVar_m_hEnemy>::operator=(CBaseEntity const*)
 T CNetworkHandleBase<CBaseEntity, CSprite::NetworkVar_m_hAttachedToEntity>::operator=(CBaseEntity const*)
 T CNetworkHandleBase<CBaseObject, CTFWeaponBuilder::NetworkVar_m_hObjectBeingBuilt>::operator=(CBaseObject const*)
 T CNetworkHandleBase<CBasePlayer, CTFTeam::NetworkVar_m_hLeader>::operator=(CBasePlayer const*)
 T CNetworkHandleBase<CTFMiniGame, CTFMinigameLogic::NetworkVar_m_hActiveMinigame>::operator=(CTFMiniGame const*)
 T CNetworkHandleBase<CTFPlayer, CObjectSentrygun::NetworkVar_m_hAutoAimTarget>::operator=(CTFPlayer const*)
 T CNetworkHandleBase<CTFPlayer, CPasstimeBall::NetworkVar_m_hCarrier>::operator=(CTFPlayer const*)
 T CNetworkHandleBase<CTFPlayer, CPasstimeBall::NetworkVar_m_hPrevCarrier>::operator=(CTFPlayer const*)
 T CNetworkHandleBase<CTFPlayer, CTFPlayer::NetworkVar_m_hHighFivePartner>::operator=(CTFPlayer const*)
 T CNetworkVarBase<Vector, CPropVehicleDriveable::NetworkVar_m_vecEyeExitEndpoint>::NetworkStateChanged()
 T CNetworkVarBase<bool, CPropVehicleDriveable::NetworkVar_m_bEnterAnimOn>::NetworkStateChanged()
 T CNetworkVarBase<bool, CPropVehicleDriveable::NetworkVar_m_bExitAnimOn>::NetworkStateChanged()
 T CNetworkVarBase<float, CColorCorrection::NetworkVar_m_flCurWeight>::Set(float const&)
 T CNetworkVarBase<float, CSpriteTrail::NetworkVar_m_flStartWidthVariance>::Set(float const&)
 T CNetworkVarBase<float, CTFDroppedWeapon::NetworkVar_m_flChargeLevel>::Set(float const&)
 T CNetworkVarBase<float, CWeaponMedigun::NetworkVar_m_flChargeLevel>::Set(float const&)
 T CNetworkVarBase<int, CBasePlayer::NetworkVar_m_iObserverMode>::Set(int const&)
 T CNetworkVarBase<int, CObjectSentrygun::NetworkVar_m_iAmmoRockets>::Set(int const&)
 T CNetworkVarBase<int, CObjectSentrygun::NetworkVar_m_iAmmoShells>::Set(int const&)
 T CNetworkVarBase<int, CObjectSentrygun::NetworkVar_m_iState>::Set(int const&)
 T CNetworkVarBase<int, CPhysicsPropMultiplayer::NetworkVar_m_iPhysicsMode>::NetworkStateChanged()
 T CNetworkVarBase<int, CRopeKeyframe::NetworkVar_m_fLockedPoints>::Set(int const&)
 T CNetworkVarBase<int, CTFWeaponBase::NetworkVar_m_iReloadMode>::Set(int const&)
 T CNetworkVarBase<int, CVGuiScreen::NetworkVar_m_fScreenFlags>::Set(int const&)
 T CNetworkVarBase<unsigned int, CObjectSentrygun::NetworkVar_m_nShieldLevel>::Set(unsigned int const&)
 T CNetworkVectorBase<QAngle, CTFPlayer::NetworkVar_m_angEyeAngles>::Init(float, float, float)
 T CNetworkVectorBase<Vector, CEnvProjectedTexture::NetworkVar_m_LinearFloatLightColor>::Init(float, float, float)
 T CNetworkVectorBase<Vector, CPropVehicleDriveable::NetworkVar_m_vecEyeExitEndpoint>::Init(float, float, float)
 T CNetworkVectorBase<Vector, CPropVehicleDriveable::NetworkVar_m_vecGunCrosshair>::Init(float, float, float)
 T CNetworkVectorBase<Vector, CShadowControl::NetworkVar_m_shadowDirection>::Init(float, float, float)
 T CNetworkVectorBase<Vector, CSpriteTrail::NetworkVar_m_vecSkyboxOrigin>::Init(float, float, float)
 T CNetworkVectorBase<Vector, CSun::NetworkVar_m_vDirection>::Init(float, float, float)
 T CNetworkVectorBase<Vector, CTFBaseProjectile::NetworkVar_m_vInitialVelocity>::Init(float, float, float)
 T CNetworkVectorBase<Vector, CTFBaseRocket::NetworkVar_m_vInitialVelocity>::Init(float, float, float)
 T CNetworkVectorBase<Vector, CTFRagdoll::NetworkVar_m_vecRagdollOrigin>::Init(float, float, float)
 T CNetworkVectorBase<Vector, CTFRagdoll::NetworkVar_m_vecRagdollVelocity>::Init(float, float, float)
 T CNextLevelIssue::CanCallVote(int, char const*, vote_create_failed_t&, int&)
 T CNextLevelIssue::CanTeamCallVote(int) const
 T CNextLevelIssue::ExecuteCommand()
 T CNextLevelIssue::GetDetailsString()
 T CNextLevelIssue::GetDisplayString()
 T CNextLevelIssue::GetNumberVoteOptions()
 T CNextLevelIssue::GetQuorumRatio()
 T CNextLevelIssue::GetVoteOptions(CUtlVector<char const*, CUtlMemory<char const*, int> >&)
 T CNextLevelIssue::GetVotePassedString()
 T CNextLevelIssue::IsEnabled()
 T CNextLevelIssue::IsYesNoVote()
 T CNextLevelIssue::ListIssueDetails(CBasePlayer*)
 T CNextLevelIssue::~CNextLevelIssue()
 T CNoGrenadesZone::InputDisable(inputdata_t&)
 T CNoGrenadesZone::InputEnable(inputdata_t&)
 T CNoGrenadesZone::InputToggle(inputdata_t&)
 T CNoGrenadesZone::IsTouching(CBaseEntity const*) const
 T CNoGrenadesZone::Precache()
 T CNoGrenadesZone::Spawn()
 T CNoGrenadesZone::~CNoGrenadesZone()
 T CNoHoliday::IsActive(CRTime const&)
 T CNoHoliday::~CNoHoliday()
 T CNodeEnt::GetDataDescMap()
 T CNodeEnt::SetOwnerEntity(CBaseEntity*)
 T CNodeEnt::Spawn()
 T CNodeEnt::Spawn(char const*)
 T CNodeEnt::~CNodeEnt()
 T CNodeFilter::NodeDistanceSqr(CAI_Node&)
 T CNodeFilter::NodeIsValid(CAI_Node&)
 T CNodeList::IsLowerPriority(AI_NearNode_t const&, AI_NearNode_t const&)
 T CNodeList::RevIsLowerPriority(AI_NearNode_t const&, AI_NearNode_t const&)
 T CNonModifiedPointerProxy::CNonModifiedPointerProxy(void* (*)(SendProp const*, void const*, void const*, CSendProxyRecipients*, int))
 T CNotifyList::AddEntity(CBaseEntity*, CBaseEntity*)
 T CNotifyList::ClearEntity(CBaseEntity*)
 T CNotifyList::OnEntityCreated(CBaseEntity*)
 T CNotifyList::OnEntityDeleted(CBaseEntity*)
 T CNotifyList::RemoveEntity(CBaseEntity*, CBaseEntity*)
 T CNotifyList::ReportNamedEvent(CBaseEntity*, char const*)
 T CNotifyList::ReportSystemEvent(CBaseEntity*, notify_system_event_t, notify_system_event_params_t const&)
 T CNotifyList::~CNotifyList()
 T CNullEntity::Spawn()
 T CNullEntity::~CNullEntity()
 T CObjectCartDispenser::CanBeUpgraded(CTFPlayer*)
 T CObjectCartDispenser::DispenseMetal(CTFPlayer*)
 T CObjectCartDispenser::DispenseSouls()
 T CObjectCartDispenser::DropDuckPickup()
 T CObjectCartDispenser::DropSpellPickup()
 T CObjectCartDispenser::GetControlPanelInfo(int, char const*&)
 T CObjectCartDispenser::GetDataDescMap()
 T CObjectCartDispenser::GetServerClass()
 T CObjectCartDispenser::InputDisable(inputdata_t&)
 T CObjectCartDispenser::InputEnable(inputdata_t&)
 T CObjectCartDispenser::InputFireHalloweenBonus(inputdata_t&)
 T CObjectCartDispenser::InputSetDispenserLevel(inputdata_t&)
 T CObjectCartDispenser::OnGoActive()
 T CObjectCartDispenser::SetModel(char const*)
 T CObjectCartDispenser::Spawn()
 T CObjectCartDispenser::YouForgotToImplementOrDeclareServerClass()
 T CObjectCartDispenser::~CObjectCartDispenser()
 T CObjectDispenser::AddHealingTarget(CBaseEntity*)
 T CObjectDispenser::CObjectDispenser()
 T CObjectDispenser::CanBeRepaired() const
 T CObjectDispenser::CouldHealTarget(CBaseEntity*)
 T CObjectDispenser::DestroyObject()
 T CObjectDispenser::DetonateObject()
 T CObjectDispenser::DispenseAmmo(CTFPlayer*)
 T CObjectDispenser::DispenseMetal(CTFPlayer*)
 T CObjectDispenser::DispenseSouls()
 T CObjectDispenser::DispenseThink()
 T CObjectDispenser::DrawDebugTextOverlays()
 T CObjectDispenser::DropDuckPickup()
 T CObjectDispenser::DropSpellPickup()
 T CObjectDispenser::EndTouch(CBaseEntity*)
 T CObjectDispenser::FinishUpgrading()
 T CObjectDispenser::FirstSpawn()
 T CObjectDispenser::GetAvailableMetal() const
 T CObjectDispenser::GetBaseHealth()
 T CObjectDispenser::GetBuildingModel(int)
 T CObjectDispenser::GetControlPanelInfo(int, char const*&)
 T CObjectDispenser::GetDataDescMap()
 T CObjectDispenser::GetDispenserRadius()
 T CObjectDispenser::GetFinishedModel(int)
 T CObjectDispenser::GetHealRate() const
 T CObjectDispenser::GetMaxUpgradeLevel()
 T CObjectDispenser::GetMiniBuildingStartingHealth()
 T CObjectDispenser::GetPlacementModel()
 T CObjectDispenser::GetServerClass()
 T CObjectDispenser::InitializeMapPlacedObject()
 T CObjectDispenser::IsUpgrading() const
 T CObjectDispenser::MakeCarriedObject(CTFPlayer*)
 T CObjectDispenser::MakeMiniBuilding(CTFPlayer*)
 T CObjectDispenser::ObjectCaps()
 T CObjectDispenser::OnGoActive()
 T CObjectDispenser::PlayActiveSound()
 T CObjectDispenser::Precache()
 T CObjectDispenser::RefillThink()
 T CObjectDispenser::RemoveHealingTarget(CBaseEntity*)
 T CObjectDispenser::SetModel(char const*)
 T CObjectDispenser::SetStartBuildingModel()
 T CObjectDispenser::ShouldBeMiniBuilding(CTFPlayer*)
 T CObjectDispenser::Spawn()
 T CObjectDispenser::StartBuilding(CBaseEntity*)
 T CObjectDispenser::StartHealing(CBaseEntity*)
 T CObjectDispenser::StartPlacement(CTFPlayer*)
 T CObjectDispenser::StartTouch(CBaseEntity*)
 T CObjectDispenser::StartUpgrading()
 T CObjectDispenser::StopHealing(CBaseEntity*)
 T CObjectDispenser::Touch(CBaseEntity*)
 T CObjectDispenser::YouForgotToImplementOrDeclareServerClass()
 T CObjectDispenser::~CObjectDispenser()
 T CObjectInfo::~CObjectInfo()
 T CObjectSapper::ApplyRoboSapper(CTFPlayer*, float, int)
 T CObjectSapper::CObjectSapper()
 T CObjectSapper::DetachObjectFromObject()
 T CObjectSapper::FinishedBuilding()
 T CObjectSapper::GetBaseHealth()
 T CObjectSapper::GetDataDescMap()
 T CObjectSapper::GetReversesBuildingConstructionSpeed()
 T CObjectSapper::GetSapperModelName(SapperModel_t, char const*)
 T CObjectSapper::GetSapperSoundName()
 T CObjectSapper::GetServerClass()
 T CObjectSapper::IsHostileUpgrade()
 T CObjectSapper::IsValidRoboSapperTarget(CTFPlayer*)
 T CObjectSapper::Killed(CTakeDamageInfo const&)
 T CObjectSapper::OnGoActive()
 T CObjectSapper::OnTakeDamage(CTakeDamageInfo const&)
 T CObjectSapper::Precache()
 T CObjectSapper::SapperThink()
 T CObjectSapper::SetupAttachedVersion()
 T CObjectSapper::Spawn()
 T CObjectSapper::UpdateOnRemove()
 T CObjectSapper::YouForgotToImplementOrDeclareServerClass()
 T CObjectSapper::~CObjectSapper()
 T CObjectSentrygun::Attack()
 T CObjectSentrygun::CObjectSentrygun()
 T CObjectSentrygun::CanBeUpgraded(CTFPlayer*)
 T CObjectSentrygun::DrawDebugTextOverlays()
 T CObjectSentrygun::EmitSentrySound(IRecipientFilter&, int, char const*)
 T CObjectSentrygun::EmitSentrySound(char const*)
 T CObjectSentrygun::FInViewCone(CBaseEntity*)
 T CObjectSentrygun::FindTarget()
 T CObjectSentrygun::FinishUpgrading()
 T CObjectSentrygun::Fire()
 T CObjectSentrygun::FireRocket()
 T CObjectSentrygun::FirstSpawn()
 T CObjectSentrygun::FoundTarget(CBaseEntity*, Vector const&, bool)
 T CObjectSentrygun::GetAssistingTeammate(float) const
 T CObjectSentrygun::GetBaseHealth()
 T CObjectSentrygun::GetDataDescMap()
 T CObjectSentrygun::GetEnemyAimPosition(CBaseEntity*) const
 T CObjectSentrygun::GetMaxHealthForCurrentLevel()
 T CObjectSentrygun::GetMaxUpgradeLevel()
 T CObjectSentrygun::GetMiniBuildingStartingHealth()
 T CObjectSentrygun::GetPushMultiplier()
 T CObjectSentrygun::GetServerClass()
 T CObjectSentrygun::GetShieldLevel()
 T CObjectSentrygun::GetTimeSinceLastFired() const
 T CObjectSentrygun::GetTracerAttachment()
 T CObjectSentrygun::GetTurretAngles() const
 T CObjectSentrygun::GetUpgradeMetalRequired()
 T CObjectSentrygun::IsTruceValidForEnt() const
 T CObjectSentrygun::IsUpgrading() const
 T CObjectSentrygun::Killed(CTakeDamageInfo const&)
 T CObjectSentrygun::MakeCarriedObject(CTFPlayer*)
 T CObjectSentrygun::MakeDisposableBuilding(CTFPlayer*)
 T CObjectSentrygun::MakeMiniBuilding(CTFPlayer*)
 T CObjectSentrygun::MakeScaledBuilding(CTFPlayer*)
 T CObjectSentrygun::MakeTracer(Vector const&, CGameTrace const&, int)
 T CObjectSentrygun::ModifyFireBulletsDamage(CTakeDamageInfo*)
 T CObjectSentrygun::MoveTurret()
 T CObjectSentrygun::OnEndDisabled()
 T CObjectSentrygun::OnGoActive()
 T CObjectSentrygun::OnKilledEnemy(CBasePlayer*)
 T CObjectSentrygun::OnStartDisabled()
 T CObjectSentrygun::OnTakeDamage(CTakeDamageInfo const&)
 T CObjectSentrygun::OnWrenchHit(CTFPlayer*, CTFWrench*, Vector)
 T CObjectSentrygun::Precache()
 T CObjectSentrygun::RemoveAllAmmo()
 T CObjectSentrygun::SentryRotate()
 T CObjectSentrygun::SentryThink()
 T CObjectSentrygun::SetAutoAimTarget(CTFPlayer*)
 T CObjectSentrygun::SetBuildingSize()
 T CObjectSentrygun::SetModel(char const*)
 T CObjectSentrygun::SetStartBuildingModel()
 T CObjectSentrygun::Spawn()
 T CObjectSentrygun::StartBuilding(CBaseEntity*)
 T CObjectSentrygun::StartPlacement(CTFPlayer*)
 T CObjectSentrygun::StartUpgrading()
 T CObjectSentrygun::UpdateNavMeshCombatStatus()
 T CObjectSentrygun::ValidTargetBot(CBaseCombatCharacter*, Vector const&, Vector const&)
 T CObjectSentrygun::ValidTargetPlayer(CTFPlayer*, Vector const&, Vector const&)
 T CObjectSentrygun::YouForgotToImplementOrDeclareServerClass()
 T CObjectSentrygun::~CObjectSentrygun()
 T CObjectTeleporter::CObjectTeleporter()
 T CObjectTeleporter::CheckUpgradeOnHit(CTFPlayer*)
 T CObjectTeleporter::Command_Repair(CTFPlayer*, float)
 T CObjectTeleporter::DeterminePlaybackRate()
 T CObjectTeleporter::DrawDebugTextOverlays()
 T CObjectTeleporter::EndTouch(CBaseEntity*)
 T CObjectTeleporter::Explode()
 T CObjectTeleporter::FindMatch()
 T CObjectTeleporter::FinishUpgrading()
 T CObjectTeleporter::FinishedBuilding()
 T CObjectTeleporter::FirstSpawn()
 T CObjectTeleporter::GetBaseHealth()
 T CObjectTeleporter::GetDataDescMap()
 T CObjectTeleporter::GetMatchingTeleporter()
 T CObjectTeleporter::GetServerClass()
 T CObjectTeleporter::GetUpgradeMetalRequired()
 T CObjectTeleporter::InitializeMapPlacedObject()
 T CObjectTeleporter::InputDisable(inputdata_t&)
 T CObjectTeleporter::InputEnable(inputdata_t&)
 T CObjectTeleporter::InputWrenchHit(CTFPlayer*, CTFWrench*, Vector)
 T CObjectTeleporter::IsMatchingTeleporterReady()
 T CObjectTeleporter::IsPlacementPosValid()
 T CObjectTeleporter::IsReady()
 T CObjectTeleporter::IsSendingPlayer(CTFPlayer*)
 T CObjectTeleporter::IsUpgrading() const
 T CObjectTeleporter::MakeCarriedObject(CTFPlayer*)
 T CObjectTeleporter::OnGoActive()
 T CObjectTeleporter::PlayerCanBeTeleported(CTFPlayer*)
 T CObjectTeleporter::Precache()
 T CObjectTeleporter::RecieveTeleportingPlayer(CTFPlayer*)
 T CObjectTeleporter::SetModel(char const*)
 T CObjectTeleporter::SetObjectMode(int)
 T CObjectTeleporter::SetStartBuildingModel()
 T CObjectTeleporter::SetState(int)
 T CObjectTeleporter::ShowDirectionArrow(bool)
 T CObjectTeleporter::Spawn()
 T CObjectTeleporter::SpawnBread(CTFPlayer const*)
 T CObjectTeleporter::StartBuilding(CBaseEntity*)
 T CObjectTeleporter::StartTouch(CBaseEntity*)
 T CObjectTeleporter::StartUpgrading()
 T CObjectTeleporter::TeleporterReceive(CTFPlayer*, float)
 T CObjectTeleporter::TeleporterSend(CTFPlayer*)
 T CObjectTeleporter::TeleporterThink()
 T CObjectTeleporter::TeleporterTouch(CBaseEntity*)
 T CObjectTeleporter::UpdateOnRemove()
 T CObjectTeleporter::YouForgotToImplementOrDeclareServerClass()
 T CObjectTeleporter::~CObjectTeleporter()
 T CObjectsFileLoad::Init()
 T CObjectsFileLoad::~CObjectsFileLoad()
 T CObserverPoint::Activate()
 T CObserverPoint::CanUseObserverPoint(CTFPlayer*)
 T CObserverPoint::GetDataDescMap()
 T CObserverPoint::InputDisable(inputdata_t&)
 T CObserverPoint::InputEnable(inputdata_t&)
 T CObserverPoint::UpdateTransmitState()
 T CObserverPoint::~CObserverPoint()
 T COrHoliday::IsActive(CRTime const&)
 T COrHoliday::~COrHoliday()
 T COrnamentProp::Activate()
 T COrnamentProp::AttachTo(char const*, CBaseEntity*, CBaseEntity*)
 T COrnamentProp::GetDataDescMap()
 T COrnamentProp::InputDetach(inputdata_t&)
 T COrnamentProp::InputSetAttached(inputdata_t&)
 T COrnamentProp::Spawn()
 T COrnamentProp::~COrnamentProp()
 T COutputEvent::FireOutput(CBaseEntity*, CBaseEntity*, float)
 T CP4AutoEditAddFile::~CP4AutoEditAddFile()
 T CP4Factory::AccessFile(char const*) const
 T CP4File::Add()
 T CP4File::Edit()
 T CP4File::IsFileInPerforce()
 T CP4File::Revert()
 T CP4File::SetFileType(CUtlString const&)
 T CP4File::~CP4File()
 T CP4File_Dummy::Add()
 T CP4File_Dummy::Edit()
 T CP4File_Dummy::IsFileInPerforce()
 T CP4File_Dummy::SetFileType(CUtlString const&)
 T CP4File_Dummy::~CP4File_Dummy()
 T CPASAttenuationFilter::CPASAttenuationFilter(CBaseEntity*, char const*)
 T CPASAttenuationFilter::CPASAttenuationFilter(CBaseEntity*, float)
 T CPASAttenuationFilter::CPASAttenuationFilter(CBaseEntity*, soundlevel_t)
 T CPASAttenuationFilter::CPASAttenuationFilter(Vector const&, soundlevel_t)
 T CPASAttenuationFilter::Filter(Vector const&, float)
 T CPASAttenuationFilter::~CPASAttenuationFilter()
 T CPASFilter::~CPASFilter()
 T CPVSFilter::~CPVSFilter()
 T CParallelProcessor<CNavArea*, CFuncJobItemProcessor<CNavArea*> >::DoExecute()
 T CParallelProcessor<CNavArea*, CFuncJobItemProcessor<CNavArea*> >::Run(CNavArea**, unsigned int, int, IThreadPool*)
 T CParallelProcessor<QueryCacheUpdateRecord_t, CFuncJobItemProcessor<QueryCacheUpdateRecord_t> >::DoExecute()
 T CParallelProcessor<QueryCacheUpdateRecord_t, CFuncJobItemProcessor<QueryCacheUpdateRecord_t> >::Run(QueryCacheUpdateRecord_t*, unsigned int, int, IThreadPool*)
 T CParticleFire::GetDataDescMap()
 T CParticleFire::GetServerClass()
 T CParticleFire::YouForgotToImplementOrDeclareServerClass()
 T CParticleFire::~CParticleFire()
 T CParticleLight::GetDataDescMap()
 T CParticleLight::~CParticleLight()
 T CParticlePerformanceMonitor::GetDataDescMap()
 T CParticlePerformanceMonitor::GetServerClass()
 T CParticlePerformanceMonitor::InputStartMeasuring(inputdata_t&)
 T CParticlePerformanceMonitor::InputStopMeasuring(inputdata_t&)
 T CParticlePerformanceMonitor::InputTurnOffDisplay(inputdata_t&)
 T CParticlePerformanceMonitor::InputTurnOnDisplay(inputdata_t&)
 T CParticlePerformanceMonitor::Spawn()
 T CParticlePerformanceMonitor::UpdateTransmitState()
 T CParticlePerformanceMonitor::YouForgotToImplementOrDeclareServerClass()
 T CParticlePerformanceMonitor::~CParticlePerformanceMonitor()
 T CParticleSystem::Activate()
 T CParticleSystem::GetDataDescMap()
 T CParticleSystem::GetServerClass()
 T CParticleSystem::InputStart(inputdata_t&)
 T CParticleSystem::InputStop(inputdata_t&)
 T CParticleSystem::Precache()
 T CParticleSystem::ReadControlPointEnts()
 T CParticleSystem::Spawn()
 T CParticleSystem::StartParticleSystem()
 T CParticleSystem::StartParticleSystemThink()
 T CParticleSystem::StopParticleSystem()
 T CParticleSystem::UpdateTransmitState()
 T CParticleSystem::YouForgotToImplementOrDeclareServerClass()
 T CParticleSystem::~CParticleSystem()
 T CParticleSystemDefinition::ParseChildren(CDmxElement*)
 T CParticleSystemDefinition::ParseOperators(char const*, ParticleFunctionType_t, CDmxElement*, CUtlVector<CParticleOperatorInstance*, CUtlMemory<CParticleOperatorInstance*, int> >&)
 T CParticleSystemDefinition::Precache()
 T CParticleSystemDefinition::Read(CDmxElement*)
 T CParticleSystemDefinition::SetupContextData()
 T CParticleSystemDefinition::ShouldAlwaysPrecache() const
 T CParticleSystemDefinition::~CParticleSystemDefinition()
 T CParticleSystemDictionary::AddParticleSystem(CDmxElement*)
 T CParticleSystemDictionary::DestroyExistingElement(CDmxElement*)
 T CParticleSystemDictionary::FindParticleSystem(char const*)
 T CParticleSystemDictionary::~CParticleSystemDictionary()
 T CParticleSystemMgr::AddParticleOperator(ParticleFunctionType_t, IParticleOperatorDefinition*)
 T CParticleSystemMgr::CParticleSystemMgr()
 T CParticleSystemMgr::DecommitTempMemory()
 T CParticleSystemMgr::FindParticleSystem(char const*)
 T CParticleSystemMgr::GetParticleSystemCount()
 T CParticleSystemMgr::GetParticleSystemNameFromIndex(int)
 T CParticleSystemMgr::Init(IParticleSystemQuery*)
 T CParticleSystemMgr::ReadParticleConfigFile(CUtlBuffer&, bool, bool, char const*)
 T CParticleSystemMgr::ReadParticleConfigFile(char const*, bool, bool)
 T CParticleSystemMgr::ReadParticleDefinitions(CUtlBuffer&, char const*, bool, bool)
 T CParticleSystemMgr::ShouldLoadSheets(bool)
 T CParticleSystemMgr::~CParticleSystemMgr()
 T CParticleSystemQuery::GetCollisionGroupFromName(char const*)
 T CParticleSystemQuery::GetControllingObjectHitBoxInfo(CParticleCollection*, int, int, ModelHitBoxInfo_t*)
 T CParticleSystemQuery::GetLightingAtPoint(Vector const&, Color&)
 T CParticleSystemQuery::GetLocalPlayerEyeVectors(Vector*, Vector*, Vector*)
 T CParticleSystemQuery::GetLocalPlayerPos()
 T CParticleSystemQuery::GetPixelVisibility(int*, Vector const&, float)
 T CParticleSystemQuery::GetRandomPointsOnControllingObjectHitBox(CParticleCollection*, int, int, float, int, Vector*, Vector, Vector*, int*)
 T CParticleSystemQuery::IsPointInControllingObjectHitBox(CParticleCollection*, int, Vector, bool)
 T CParticleSystemQuery::MovePointInsideControllingObject(CParticleCollection*, void*, Vector*)
 T CParticleSystemQuery::SetUpLightingEnvironment(Vector const&)
 T CParticleSystemQuery::TraceLine(Vector const&, Vector const&, unsigned int, IHandleEntity const*, int, CBaseTrace*)
 T CPasstimeBall::BIgnorePlayer(CTFPlayer*)
 T CPasstimeBall::BOutOfPlay() const
 T CPasstimeBall::BlockDamage(CTFPlayer*, Vector const&)
 T CPasstimeBall::BlockReflect(CTFPlayer*, Vector const&, Vector const&)
 T CPasstimeBall::ChangeTeam(int)
 T CPasstimeBall::Create(Vector, QAngle)
 T CPasstimeBall::CreateModelCollider()
 T CPasstimeBall::CreateSphereCollider()
 T CPasstimeBall::DefaultThink()
 T CPasstimeBall::Deflected(CBaseEntity*, Vector&)
 T CPasstimeBall::FinishLagCompensation(CBasePlayer*)
 T CPasstimeBall::GetAirtimeDistance() const
 T CPasstimeBall::GetAirtimeSec() const
 T CPasstimeBall::GetCarrier() const
 T CPasstimeBall::GetCarryDuration() const
 T CPasstimeBall::GetCollisionCount() const
 T CPasstimeBall::GetHomingTarget() const
 T CPasstimeBall::GetPrevCarrier() const
 T CPasstimeBall::GetServerClass()
 T CPasstimeBall::GetThrower() const
 T CPasstimeBall::IsDeflectable()
 T CPasstimeBall::MoveTo(Vector const&, Vector const&)
 T CPasstimeBall::MoveToSpawner(Vector const&)
 T CPasstimeBall::OnBecomeNotCarried()
 T CPasstimeBall::OnCollision()
 T CPasstimeBall::OnTakeDamage(CTakeDamageInfo const&)
 T CPasstimeBall::PhysicsSolidMaskForEntity() const
 T CPasstimeBall::Precache()
 T CPasstimeBall::ResetTrail()
 T CPasstimeBall::SetHomingTarget(CTFPlayer*)
 T CPasstimeBall::SetStateCarried(CTFPlayer*)
 T CPasstimeBall::SetStateFree()
 T CPasstimeBall::SetStateOutOfPlay()
 T CPasstimeBall::ShouldCollide(int, int) const
 T CPasstimeBall::Spawn()
 T CPasstimeBall::StartLagCompensation(CBasePlayer*, CUserCmd*)
 T CPasstimeBall::TouchPlayer(CTFPlayer*)
 T CPasstimeBall::UpdateLagCompensationHistory()
 T CPasstimeBall::UpdateTransmitState()
 T CPasstimeBall::VPhysicsCollision(int, gamevcollisionevent_t*)
 T CPasstimeBall::YouForgotToImplementOrDeclareServerClass()
 T CPasstimeBall::~CPasstimeBall()
 T CPasstimeBallController::ApplyTo(CPasstimeBall*)
 T CPasstimeBallController::BallCollision(CPasstimeBall*, int, gamevcollisionevent_t*)
 T CPasstimeBallController::BallDamaged(CPasstimeBall*)
 T CPasstimeBallController::BallPickedUp(CPasstimeBall*, CTFPlayer*)
 T CPasstimeBallController::BallSpawned(CPasstimeBall*)
 T CPasstimeBallController::CPasstimeBallController(int)
 T CPasstimeBallController::DisableOn(CPasstimeBall const*)
 T CPasstimeBallController::OnBallCollision(CPasstimeBall*, int, gamevcollisionevent_t*)
 T CPasstimeBallController::OnBallDamaged(CPasstimeBall*)
 T CPasstimeBallController::OnBallPickedUp(CPasstimeBall*, CTFPlayer*)
 T CPasstimeBallController::OnBallSpawned(CPasstimeBall*)
 T CPasstimeBallController::OnDisabled()
 T CPasstimeBallController::OnEnabled()
 T CPasstimeBallController::SetIsEnabled(bool)
 T CPasstimeBallController::~CPasstimeBallController()
 T CPasstimeBallControllerHoming::Apply(CPasstimeBall*)
 T CPasstimeBallControllerHoming::CPasstimeBallControllerHoming()
 T CPasstimeBallControllerHoming::IsActive() const
 T CPasstimeBallControllerHoming::OnBallCollision(CPasstimeBall*, int, gamevcollisionevent_t*)
 T CPasstimeBallControllerHoming::OnBallDamaged(CPasstimeBall*)
 T CPasstimeBallControllerHoming::OnBallPickedUp(CPasstimeBall*, CTFPlayer*)
 T CPasstimeBallControllerHoming::OnBallSpawned(CPasstimeBall*)
 T CPasstimeBallControllerHoming::OnDisabled()
 T CPasstimeBallControllerHoming::SetTargetSpeed(float)
 T CPasstimeBallControllerHoming::StartHoming(CPasstimeBall*, CTFPlayer*, bool)
 T CPasstimeBallControllerHoming::~CPasstimeBallControllerHoming()
 T CPasstimeBallControllerPlayerSeek::Apply(CPasstimeBall*)
 T CPasstimeBallControllerPlayerSeek::CPasstimeBallControllerPlayerSeek()
 T CPasstimeBallControllerPlayerSeek::FindTarget(CTFPlayer*, Vector const&) const
 T CPasstimeBallControllerPlayerSeek::IsActive() const
 T CPasstimeBallControllerPlayerSeek::OnBallSpawned(CPasstimeBall*)
 T CPasstimeBallControllerPlayerSeek::OnDisabled()
 T CPasstimeBallControllerPlayerSeek::Seek(CPasstimeBall*, CTFPlayer*) const
 T CPasstimeBallControllerPlayerSeek::~CPasstimeBallControllerPlayerSeek()
 T CPasstimeBallSpawn::GetDataDescMap()
 T CPasstimeBallSpawn::InputDisable(inputdata_t&)
 T CPasstimeBallSpawn::InputEnable(inputdata_t&)
 T CPasstimeBallSpawn::~CPasstimeBallSpawn()
 T CPasstimeGun::ActivityList(int&)
 T CPasstimeGun::BValidPassTarget(CTFPlayer*, CTFPlayer*, HudNotification_t*)
 T CPasstimeGun::CPasstimeGun()
 T CPasstimeGun::CalcLaunch(CTFPlayer*, bool)
 T CPasstimeGun::CanBeSelected()
 T CPasstimeGun::CanCharge()
 T CPasstimeGun::CanDeploy()
 T CPasstimeGun::CanHolster() const
 T CPasstimeGun::Deploy()
 T CPasstimeGun::EThrowState const& CNetworkVarBase<CPasstimeGun::EThrowState, CPasstimeGun::NetworkVar_m_eThrowState>::operator=<CPasstimeGun::EThrowState>(CPasstimeGun::EThrowState const&)
 T CPasstimeGun::Equip(CBaseCombatCharacter*)
 T CPasstimeGun::GetChargeBeginTime()
 T CPasstimeGun::GetChargeMaxTime()
 T CPasstimeGun::GetCurrentCharge()
 T CPasstimeGun::GetDrawActivity()
 T CPasstimeGun::GetServerClass()
 T CPasstimeGun::GetWeaponID() const
 T CPasstimeGun::GetWorldModel() const
 T CPasstimeGun::HasPrimaryAmmo()
 T CPasstimeGun::Holster(CBaseCombatWeapon*)
 T CPasstimeGun::IsEnergyWeapon() const
 T CPasstimeGun::ItemHolsterFrame()
 T CPasstimeGun::ItemPostFrame()
 T CPasstimeGun::Precache()
 T CPasstimeGun::SendWeaponAnim(int)
 T CPasstimeGun::Spawn()
 T CPasstimeGun::Throw(CTFPlayer*)
 T CPasstimeGun::UpdateOnRemove()
 T CPasstimeGun::VisibleInWeaponSelection()
 T CPasstimeGun::WeaponReset()
 T CPasstimeGun::YouForgotToImplementOrDeclareServerClass()
 T CPasstimeGun::~CPasstimeGun()
 T CPathCorner::DrawDebugGeometryOverlays()
 T CPathCorner::DrawDebugTextOverlays()
 T CPathCorner::GetDataDescMap()
 T CPathCorner::GetDelay()
 T CPathCorner::InputInPass(inputdata_t&)
 T CPathCorner::InputSetNextPathCorner(inputdata_t&)
 T CPathCorner::Spawn()
 T CPathCorner::~CPathCorner()
 T CPathCornerCrash::~CPathCornerCrash()
 T CPathKeyFrame::Activate()
 T CPathKeyFrame::CalculateFrameDuration()
 T CPathKeyFrame::GetDataDescMap()
 T CPathKeyFrame::Spawn()
 T CPathKeyFrame::~CPathKeyFrame()
 T CPathTrack::Activate()
 T CPathTrack::BeginIteration()
 T CPathTrack::DisableAlternatePath()
 T CPathTrack::DisablePath()
 T CPathTrack::DrawDebugGeometryOverlays()
 T CPathTrack::EnableAlternatePath()
 T CPathTrack::EnablePath()
 T CPathTrack::EndIteration()
 T CPathTrack::GetDataDescMap()
 T CPathTrack::GetNext()
 T CPathTrack::GetNextInDir(bool)
 T CPathTrack::GetOrientation(bool)
 T CPathTrack::GetOrientationType()
 T CPathTrack::GetPrevious()
 T CPathTrack::HasBeenVisited() const
 T CPathTrack::InputDisableAlternatePath(inputdata_t&)
 T CPathTrack::InputDisablePath(inputdata_t&)
 T CPathTrack::InputEnableAlternatePath(inputdata_t&)
 T CPathTrack::InputEnablePath(inputdata_t&)
 T CPathTrack::InputPass(inputdata_t&)
 T CPathTrack::InputTeleport(inputdata_t&)
 T CPathTrack::InputToggleAlternatePath(inputdata_t&)
 T CPathTrack::InputTogglePath(inputdata_t&)
 T CPathTrack::Link()
 T CPathTrack::LookAhead(Vector&, float, int, CPathTrack**)
 T CPathTrack::Nearest(Vector const&)
 T CPathTrack::Spawn()
 T CPathTrack::ValidPath(CPathTrack*, int)
 T CPathTrack::Visit()
 T CPathTrack::~CPathTrack()
 T CPathfindNearestNodeFilter::IsValid(CAI_Node*)
 T CPathfindNearestNodeFilter::ShouldContinue()
 T CPauseGameIssue::CanCallVote(int, char const*, vote_create_failed_t&, int&)
 T CPauseGameIssue::ExecuteCommand()
 T CPauseGameIssue::GetDetailsString()
 T CPauseGameIssue::GetDisplayString()
 T CPauseGameIssue::GetVotePassedString()
 T CPauseGameIssue::IsEnabled()
 T CPauseGameIssue::ListIssueDetails(CBasePlayer*)
 T CPauseGameIssue::~CPauseGameIssue()
 T CPeriodicSpawnPopulator::CPeriodicSpawnPopulator(CPopulationManager*)
 T CPeriodicSpawnPopulator::Parse(KeyValues*)
 T CPeriodicSpawnPopulator::PostInitialize()
 T CPeriodicSpawnPopulator::UnpauseSpawning()
 T CPeriodicSpawnPopulator::Update()
 T CPeriodicSpawnPopulator::~CPeriodicSpawnPopulator()
 T CPhysBallSocket::CreateConstraint(IPhysicsConstraintGroup*, hl_constraint_info_t const&)
 T CPhysBallSocket::~CPhysBallSocket()
 T CPhysBox::CreateVPhysics()
 T CPhysBox::DrawDebugTextOverlays()
 T CPhysBox::GetDataDescMap()
 T CPhysBox::GetServerClass()
 T CPhysBox::HasPreferredCarryAnglesForPlayer(CBasePlayer*)
 T CPhysBox::InputDisableFloating(inputdata_t&)
 T CPhysBox::InputDisableMotion(inputdata_t&)
 T CPhysBox::InputEnableMotion(inputdata_t&)
 T CPhysBox::InputForceDrop(inputdata_t&)
 T CPhysBox::InputSleep(inputdata_t&)
 T CPhysBox::InputWake(inputdata_t&)
 T CPhysBox::ObjectCaps()
 T CPhysBox::OnPhysGunDrop(CBasePlayer*, PhysGunDrop_t)
 T CPhysBox::OnPhysGunPickup(CBasePlayer*, PhysGunPickup_t)
 T CPhysBox::OnTakeDamage(CTakeDamageInfo const&)
 T CPhysBox::PreferredCarryAngles()
 T CPhysBox::Spawn()
 T CPhysBox::Use(CBaseEntity*, CBaseEntity*, USE_TYPE, float)
 T CPhysBox::VPhysicsCollision(int, gamevcollisionevent_t*)
 T CPhysBox::VPhysicsUpdate(IPhysicsObject*)
 T CPhysBox::YouForgotToImplementOrDeclareServerClass()
 T CPhysBox::~CPhysBox()
 T CPhysBoxMultiplayer::Activate()
 T CPhysBoxMultiplayer::GetDataDescMap()
 T CPhysBoxMultiplayer::GetMass()
 T CPhysBoxMultiplayer::GetMultiplayerPhysicsMode()
 T CPhysBoxMultiplayer::GetServerClass()
 T CPhysBoxMultiplayer::IsAsleep()
 T CPhysBoxMultiplayer::YouForgotToImplementOrDeclareServerClass()
 T CPhysBoxMultiplayer::~CPhysBoxMultiplayer()
 T CPhysConstraint::Activate()
 T CPhysConstraint::ActivateConstraint()
 T CPhysConstraint::Deactivate()
 T CPhysConstraint::DrawDebugGeometryOverlays()
 T CPhysConstraint::DrawDebugTextOverlays()
 T CPhysConstraint::GetConstraintObjects(hl_constraint_info_t&)
 T CPhysConstraint::GetDataDescMap()
 T CPhysConstraint::InputBreak(inputdata_t&)
 T CPhysConstraint::InputOnBreak(inputdata_t&)
 T CPhysConstraint::InputTurnOff(inputdata_t&)
 T CPhysConstraint::InputTurnOn(inputdata_t&)
 T CPhysConstraint::NotifySystemEvent(CBaseEntity*, notify_system_event_t, notify_system_event_params_t const&)
 T CPhysConstraint::OnBreak()
 T CPhysConstraint::OnConstraintSetup(hl_constraint_info_t&)
 T CPhysConstraint::Precache()
 T CPhysConstraint::Spawn()
 T CPhysConstraint::~CPhysConstraint()
 T CPhysConstraintEvents::ConstraintBroken(IPhysicsConstraint*)
 T CPhysConstraintSystem::GetDataDescMap()
 T CPhysConstraintSystem::Spawn()
 T CPhysConstraintSystem::~CPhysConstraintSystem()
 T CPhysConvert::GetDataDescMap()
 T CPhysConvert::InputConvertTarget(inputdata_t&)
 T CPhysConvert::~CPhysConvert()
 T CPhysExplosion::DrawDebugTextOverlays()
 T CPhysExplosion::Explode(CBaseEntity*, CBaseEntity*)
 T CPhysExplosion::FindEntity(CBaseEntity*, CBaseEntity*, CBaseEntity*)
 T CPhysExplosion::GetDataDescMap()
 T CPhysExplosion::InputExplode(inputdata_t&)
 T CPhysExplosion::Spawn()
 T CPhysExplosion::~CPhysExplosion()
 T CPhysFixed::CreateConstraint(IPhysicsConstraintGroup*, hl_constraint_info_t const&)
 T CPhysFixed::DrawDebugGeometryOverlays()
 T CPhysFixed::DrawDebugTextOverlays()
 T CPhysFixed::MoveToRefPosition()
 T CPhysFixed::~CPhysFixed()
 T CPhysForce::Activate()
 T CPhysForce::ActivateForce()
 T CPhysForce::ForceOff()
 T CPhysForce::GetDataDescMap()
 T CPhysForce::InputActivate(inputdata_t&)
 T CPhysForce::InputDeactivate(inputdata_t&)
 T CPhysForce::InputForceScale(inputdata_t&)
 T CPhysForce::OnActivate()
 T CPhysForce::OnRestore()
 T CPhysForce::ScaleForce(float)
 T CPhysForce::Spawn()
 T CPhysForce::~CPhysForce()
 T CPhysHinge::CreateConstraint(IPhysicsConstraintGroup*, hl_constraint_info_t const&)
 T CPhysHinge::Deactivate()
 T CPhysHinge::DrawDebugGeometryOverlays()
 T CPhysHinge::GetDataDescMap()
 T CPhysHinge::InputSetHingeFriction(inputdata_t&)
 T CPhysHinge::InputSetVelocity(inputdata_t&)
 T CPhysHinge::IsWorldHinge(hl_constraint_info_t const&, int*)
 T CPhysHinge::NotifyVPhysicsStateChanged(IPhysicsObject*, CBaseEntity*, bool)
 T CPhysHinge::Spawn()
 T CPhysHinge::~CPhysHinge()
 T CPhysImpact::Activate()
 T CPhysImpact::GetDataDescMap()
 T CPhysImpact::InputImpact(inputdata_t&)
 T CPhysImpact::PointAtEntity()
 T CPhysImpact::Spawn()
 T CPhysImpact::~CPhysImpact()
 T CPhysLength::CreateConstraint(IPhysicsConstraintGroup*, hl_constraint_info_t const&)
 T CPhysLength::DrawDebugGeometryOverlays()
 T CPhysLength::GetDataDescMap()
 T CPhysLength::~CPhysLength()
 T CPhysMagnet::ConstraintBroken(IPhysicsConstraint*)
 T CPhysMagnet::DetachAll()
 T CPhysMagnet::DoMagnetSuck(CBaseEntity*)
 T CPhysMagnet::GetDataDescMap()
 T CPhysMagnet::GetServerClass()
 T CPhysMagnet::InputToggle(inputdata_t&)
 T CPhysMagnet::InputTurnOff(inputdata_t&)
 T CPhysMagnet::InputTurnOn(inputdata_t&)
 T CPhysMagnet::Precache()
 T CPhysMagnet::Spawn()
 T CPhysMagnet::Touch(CBaseEntity*)
 T CPhysMagnet::VPhysicsCollision(int, gamevcollisionevent_t*)
 T CPhysMagnet::YouForgotToImplementOrDeclareServerClass()
 T CPhysMagnet::~CPhysMagnet()
 T CPhysMotor::Activate()
 T CPhysMotor::GetDataDescMap()
 T CPhysMotor::InputSetTargetSpeed(inputdata_t&)
 T CPhysMotor::InputTurnOff(inputdata_t&)
 T CPhysMotor::InputTurnOn(inputdata_t&)
 T CPhysMotor::OnRestore()
 T CPhysMotor::Spawn()
 T CPhysMotor::Think()
 T CPhysMotor::~CPhysMotor()
 T CPhysObjSaveRestoreOps::IsEmpty(SaveRestoreFieldInfo_t const&)
 T CPhysObjSaveRestoreOps::MakeEmpty(SaveRestoreFieldInfo_t const&)
 T CPhysObjSaveRestoreOps::Restore(SaveRestoreFieldInfo_t const&, IRestore*)
 T CPhysObjSaveRestoreOps::Save(SaveRestoreFieldInfo_t const&, ISave*)
 T CPhysPulley::CreateConstraint(IPhysicsConstraintGroup*, hl_constraint_info_t const&)
 T CPhysPulley::DrawDebugGeometryOverlays()
 T CPhysPulley::GetDataDescMap()
 T CPhysPulley::~CPhysPulley()
 T CPhysSaveRestoreBlockHandler::AssociateModel(IPhysicsObject*, CPhysCollide const*)
 T CPhysSaveRestoreBlockHandler::AssociateModel(IPhysicsObject*, int)
 T CPhysSaveRestoreBlockHandler::ForgetAllModels()
 T CPhysSaveRestoreBlockHandler::ForgetModel(IPhysicsObject*)
 T CPhysSaveRestoreBlockHandler::GetBlockName()
 T CPhysSaveRestoreBlockHandler::NoteBBox(Vector const&, Vector const&, CPhysCollide*)
 T CPhysSaveRestoreBlockHandler::OnEntityCreated(CBaseEntity*)
 T CPhysSaveRestoreBlockHandler::OnEntityDeleted(CBaseEntity*)
 T CPhysSaveRestoreBlockHandler::PostRestore()
 T CPhysSaveRestoreBlockHandler::PostSave()
 T CPhysSaveRestoreBlockHandler::PreRestore()
 T CPhysSaveRestoreBlockHandler::PreSave(CSaveRestoreData*)
 T CPhysSaveRestoreBlockHandler::QueueRestore(CBaseEntity*, typedescription_t*, void**, PhysInterfaceId_t)
 T CPhysSaveRestoreBlockHandler::QueueSave(CBaseEntity*, typedescription_t*, void**, PhysInterfaceId_t)
 T CPhysSaveRestoreBlockHandler::ReadRestoreHeaders(IRestore*)
 T CPhysSaveRestoreBlockHandler::Restore(IRestore*, bool)
 T CPhysSaveRestoreBlockHandler::RestoreBlock(IRestore*, PhysObjectHeader_t const&)
 T CPhysSaveRestoreBlockHandler::RestorePhysicsObjectAndModel(IRestore*, PhysObjectHeader_t const&, CPhysSaveRestoreBlockHandler::QueuedItem_t*, int)
 T CPhysSaveRestoreBlockHandler::Save(ISave*)
 T CPhysSaveRestoreBlockHandler::SaveQueueFunc(CPhysSaveRestoreBlockHandler::QueuedItem_t const&, CPhysSaveRestoreBlockHandler::QueuedItem_t const&)
 T CPhysSaveRestoreBlockHandler::WriteSaveHeaders(ISave*)
 T CPhysSaveRestoreBlockHandler::~CPhysSaveRestoreBlockHandler()
 T CPhysSlideConstraint::CreateConstraint(IPhysicsConstraintGroup*, hl_constraint_info_t const&)
 T CPhysSlideConstraint::DrawDebugGeometryOverlays()
 T CPhysSlideConstraint::GetDataDescMap()
 T CPhysSlideConstraint::InputSetVelocity(inputdata_t&)
 T CPhysSlideConstraint::NotifyVPhysicsStateChanged(IPhysicsObject*, CBaseEntity*, bool)
 T CPhysSlideConstraint::~CPhysSlideConstraint()
 T CPhysSphere::CreateVPhysics()
 T CPhysSphere::OverridePropdata()
 T CPhysSphere::~CPhysSphere()
 T CPhysThruster::GetDataDescMap()
 T CPhysThruster::OnActivate()
 T CPhysThruster::SetupForces(IPhysicsObject*, Vector&, Vector&)
 T CPhysThruster::~CPhysThruster()
 T CPhysTorque::GetDataDescMap()
 T CPhysTorque::SetupForces(IPhysicsObject*, Vector&, Vector&)
 T CPhysTorque::Spawn()
 T CPhysTorque::~CPhysTorque()
 T CPhysicsCannister::BeginShutdownThink()
 T CPhysicsCannister::CannisterActivate(CBaseEntity*, Vector const&)
 T CPhysicsCannister::CreateVPhysics()
 T CPhysicsCannister::Deactivate()
 T CPhysicsCannister::Explode(CBaseEntity*)
 T CPhysicsCannister::ExplodeTouch(CBaseEntity*)
 T CPhysicsCannister::GetDataDescMap()
 T CPhysicsCannister::HasPhysicsAttacker(float)
 T CPhysicsCannister::HasPreferredCarryAnglesForPlayer(CBasePlayer*)
 T CPhysicsCannister::InputActivate(inputdata_t&)
 T CPhysicsCannister::InputDeactivate(inputdata_t&)
 T CPhysicsCannister::InputExplode(inputdata_t&)
 T CPhysicsCannister::InputWake(inputdata_t&)
 T CPhysicsCannister::IsAlive()
 T CPhysicsCannister::ObjectCaps()
 T CPhysicsCannister::OnAttemptPhysGunPickup(CBasePlayer*, PhysGunPickup_t)
 T CPhysicsCannister::OnPhysGunDrop(CBasePlayer*, PhysGunDrop_t)
 T CPhysicsCannister::OnPhysGunPickup(CBasePlayer*, PhysGunPickup_t)
 T CPhysicsCannister::OnRestore()
 T CPhysicsCannister::OnTakeDamage(CTakeDamageInfo const&)
 T CPhysicsCannister::PhysGunLaunchAngularImpulse()
 T CPhysicsCannister::PhysGunLaunchVelocity(Vector const&, float)
 T CPhysicsCannister::Precache()
 T CPhysicsCannister::PreferredCarryAngles()
 T CPhysicsCannister::ShouldPuntUseLaunchForces(PhysGunForce_t)
 T CPhysicsCannister::ShutdownJet()
 T CPhysicsCannister::Spawn()
 T CPhysicsCannister::TestCollision(Ray_t const&, unsigned int, CGameTrace&)
 T CPhysicsCannister::TraceAttack(CTakeDamageInfo const&, Vector const&, CGameTrace*, CDmgAccumulator*)
 T CPhysicsCannister::Use(CBaseEntity*, CBaseEntity*, USE_TYPE, float)
 T CPhysicsCannister::VPhysicsCollision(int, gamevcollisionevent_t*)
 T CPhysicsCannister::VPhysicsUpdate(IPhysicsObject*)
 T CPhysicsCannister::~CPhysicsCannister()
 T CPhysicsEntitySolver::GetDataDescMap()
 T CPhysicsEntitySolver::Spawn()
 T CPhysicsEntitySolver::Think()
 T CPhysicsEntitySolver::UpdateOnRemove()
 T CPhysicsEntitySolver::~CPhysicsEntitySolver()
 T CPhysicsGameTrace::VehiclePointInWater(Vector const&)
 T CPhysicsGameTrace::VehicleTraceRay(Ray_t const&, void*, CGameTrace*)
 T CPhysicsGameTrace::VehicleTraceRayWithWater(Ray_t const&, void*, CGameTrace*)
 T CPhysicsHook::FindOrAddVehicleScript(char const*, vehicleparams_t*, vehiclesounds_t*)
 T CPhysicsHook::FrameUpdatePostEntityThink()
 T CPhysicsHook::Init()
 T CPhysicsHook::LevelInitPostEntity()
 T CPhysicsHook::LevelInitPreEntity()
 T CPhysicsHook::LevelShutdownPostEntity()
 T CPhysicsHook::LevelShutdownPreEntity()
 T CPhysicsHook::Name()
 T CPhysicsHook::PreClientUpdate()
 T CPhysicsHook::~CPhysicsHook()
 T CPhysicsNPCSolver::BecomePenetrationSolver()
 T CPhysicsNPCSolver::CheckTouching()
 T CPhysicsNPCSolver::GetDataDescMap()
 T CPhysicsNPCSolver::IsContactOnNPCHead(IPhysicsFrictionSnapshot*, IPhysicsObject*, CAI_BaseNPC*)
 T CPhysicsNPCSolver::IsIntersecting()
 T CPhysicsNPCSolver::OnRestore()
 T CPhysicsNPCSolver::Simulate(IPhysicsMotionController*, IPhysicsObject*, float, Vector&, Vector&)
 T CPhysicsNPCSolver::Spawn()
 T CPhysicsNPCSolver::Think()
 T CPhysicsNPCSolver::UpdateOnRemove()
 T CPhysicsNPCSolver::~CPhysicsNPCSolver()
 T CPhysicsProp::CPhysicsProp()
 T CPhysicsProp::ClearFlagsThink()
 T CPhysicsProp::ComputeEnablingImpulse(int, gamevcollisionevent_t*)
 T CPhysicsProp::CreateVPhysics()
 T CPhysicsProp::DrawDebugTextOverlays()
 T CPhysicsProp::EnableMotion()
 T CPhysicsProp::GetDataDescMap()
 T CPhysicsProp::GetPropDataAngles(char const*, QAngle&)
 T CPhysicsProp::GetServerClass()
 T CPhysicsProp::HandleAnyCollisionInteractions(int, gamevcollisionevent_t*)
 T CPhysicsProp::InputDisableFloating(inputdata_t&)
 T CPhysicsProp::InputDisableMotion(inputdata_t&)
 T CPhysicsProp::InputEnableMotion(inputdata_t&)
 T CPhysicsProp::InputSleep(inputdata_t&)
 T CPhysicsProp::InputWake(inputdata_t&)
 T CPhysicsProp::ObjectCaps()
 T CPhysicsProp::OnPhysGunDrop(CBasePlayer*, PhysGunDrop_t)
 T CPhysicsProp::OnPhysGunPickup(CBasePlayer*, PhysGunPickup_t)
 T CPhysicsProp::OnTakeDamage(CTakeDamageInfo const&)
 T CPhysicsProp::OverridePropdata()
 T CPhysicsProp::Precache()
 T CPhysicsProp::Spawn()
 T CPhysicsProp::Use(CBaseEntity*, CBaseEntity*, USE_TYPE, float)
 T CPhysicsProp::VPhysicsCollision(int, gamevcollisionevent_t*)
 T CPhysicsProp::VPhysicsUpdate(IPhysicsObject*)
 T CPhysicsProp::YouForgotToImplementOrDeclareServerClass()
 T CPhysicsProp::~CPhysicsProp()
 T CPhysicsPropMultiplayer::CPhysicsPropMultiplayer()
 T CPhysicsPropMultiplayer::ComputeWorldSpaceSurroundingBox(Vector*, Vector*)
 T CPhysicsPropMultiplayer::GetDataDescMap()
 T CPhysicsPropMultiplayer::GetMass()
 T CPhysicsPropMultiplayer::GetMultiplayerPhysicsMode()
 T CPhysicsPropMultiplayer::GetPhysicsMode()
 T CPhysicsPropMultiplayer::GetServerClass()
 T CPhysicsPropMultiplayer::IsAsleep()
 T CPhysicsPropMultiplayer::SetPhysicsMode(int)
 T CPhysicsPropMultiplayer::Spawn()
 T CPhysicsPropMultiplayer::VPhysicsUpdate(IPhysicsObject*)
 T CPhysicsPropMultiplayer::YouForgotToImplementOrDeclareServerClass()
 T CPhysicsPropMultiplayer::~CPhysicsPropMultiplayer()
 T CPhysicsPropRespawnable::Event_Killed(CTakeDamageInfo const&)
 T CPhysicsPropRespawnable::GetDataDescMap()
 T CPhysicsPropRespawnable::Materialize()
 T CPhysicsPropRespawnable::Spawn()
 T CPhysicsPropRespawnable::~CPhysicsPropRespawnable()
 T CPhysicsPushedEntities::AddEntity(CBaseEntity*)
 T CPhysicsPushedEntities::CPhysicsPushedEntities()
 T CPhysicsPushedEntities::ComputeRotationalPushDirection(CBaseEntity*, CPhysicsPushedEntities::RotatingPushMove_t const&, Vector*, CBaseEntity*)
 T CPhysicsPushedEntities::FinishPush(bool, CPhysicsPushedEntities::RotatingPushMove_t const*)
 T CPhysicsPushedEntities::FinishRotPushedEntity(CBaseEntity*, CPhysicsPushedEntities::RotatingPushMove_t const&)
 T CPhysicsPushedEntities::GenerateBlockingEntityList()
 T CPhysicsPushedEntities::GenerateBlockingEntityListAddBox(Vector const&)
 T CPhysicsPushedEntities::IsPushedPositionValid(CBaseEntity*)
 T CPhysicsPushedEntities::LinearlyMoveRootEntity(CBaseEntity*, float, Vector*)
 T CPhysicsPushedEntities::PerformLinearPush(CBaseEntity*, float)
 T CPhysicsPushedEntities::PerformRotatePush(CBaseEntity*, float)
 T CPhysicsPushedEntities::RelinkPusherList(int*)
 T CPhysicsPushedEntities::RotateRootEntity(CBaseEntity*, float, CPhysicsPushedEntities::RotatingPushMove_t&)
 T CPhysicsPushedEntities::SetupAllInHierarchy(CBaseEntity*)
 T CPhysicsPushedEntities::SpeculativelyCheckLinearPush(Vector const&)
 T CPhysicsPushedEntities::SpeculativelyCheckPush(CPhysicsPushedEntities::PhysicsPushedInfo_t&, Vector const&, bool)
 T CPhysicsPushedEntities::SpeculativelyCheckRotPush(CPhysicsPushedEntities::RotatingPushMove_t const&, CBaseEntity*)
 T CPhysicsPushedEntities::StoreMovedEntities(physicspushlist_t&)
 T CPhysicsPushedEntities::UnlinkPusherList(int*)
 T CPhysicsPushedEntities::~CPhysicsPushedEntities()
 T CPhysicsShake::Simulate(IPhysicsMotionController*, IPhysicsObject*, float, Vector&, Vector&)
 T CPhysicsSpring::Activate()
 T CPhysicsSpring::DrawDebugGeometryOverlays()
 T CPhysicsSpring::DrawDebugTextOverlays()
 T CPhysicsSpring::GetDataDescMap()
 T CPhysicsSpring::GetSpringObjectConnections(string_t, string_t, IPhysicsObject**, IPhysicsObject**)
 T CPhysicsSpring::InputSetSpringConstant(inputdata_t&)
 T CPhysicsSpring::InputSetSpringDamping(inputdata_t&)
 T CPhysicsSpring::InputSetSpringLength(inputdata_t&)
 T CPhysicsSpring::NotifySystemEvent(CBaseEntity*, notify_system_event_t, notify_system_event_params_t const&)
 T CPhysicsSpring::Spawn()
 T CPhysicsSpring::~CPhysicsSpring()
 T CPhysicsWind::Simulate(IPhysicsMotionController*, IPhysicsObject*, float, Vector&, Vector&)
 T CPhysicsWire::GetDataDescMap()
 T CPhysicsWire::Precache()
 T CPhysicsWire::Spawn()
 T CPhysicsWire::~CPhysicsWire()
 T CPlane::CPlane()
 T CPlane::InitializePlane(Vector const&, Vector const&)
 T CPlane::PointDist(Vector const&)
 T CPlane::PointInFront(Vector const&)
 T CPlasma::CPlasma()
 T CPlasma::EnableSmoke(int)
 T CPlasma::GetDataDescMap()
 T CPlasma::GetServerClass()
 T CPlasma::Precache()
 T CPlasma::YouForgotToImplementOrDeclareServerClass()
 T CPlasma::~CPlasma()
 T CPlatTrigger::ObjectCaps()
 T CPlatTrigger::SpawnInsideTrigger(CFuncPlat*)
 T CPlatTrigger::Touch(CBaseEntity*)
 T CPlatTrigger::~CPlatTrigger()
 T CPlayerDestructionDispenser::GetControlPanelInfo(int, char const*&)
 T CPlayerDestructionDispenser::GetDataDescMap()
 T CPlayerDestructionDispenser::GetDispenserRadius()
 T CPlayerDestructionDispenser::GetServerClass()
 T CPlayerDestructionDispenser::OnGoActive()
 T CPlayerDestructionDispenser::Spawn()
 T CPlayerDestructionDispenser::YouForgotToImplementOrDeclareServerClass()
 T CPlayerDestructionDispenser::~CPlayerDestructionDispenser()
 T CPlayerInfo::ChangeTeam(int)
 T CPlayerInfo::GetAbsAngles()
 T CPlayerInfo::GetAbsOrigin()
 T CPlayerInfo::GetArmorValue()
 T CPlayerInfo::GetDeathCount()
 T CPlayerInfo::GetFragCount()
 T CPlayerInfo::GetHealth()
 T CPlayerInfo::GetLastUserCommand()
 T CPlayerInfo::GetLocalAngles()
 T CPlayerInfo::GetLocalOrigin()
 T CPlayerInfo::GetMaxHealth()
 T CPlayerInfo::GetModelName()
 T CPlayerInfo::GetName()
 T CPlayerInfo::GetNetworkIDString()
 T CPlayerInfo::GetPlayerMaxs()
 T CPlayerInfo::GetPlayerMins()
 T CPlayerInfo::GetTeamIndex()
 T CPlayerInfo::GetUserID()
 T CPlayerInfo::GetWeaponName()
 T CPlayerInfo::IsConnected()
 T CPlayerInfo::IsDead()
 T CPlayerInfo::IsEFlagSet(int)
 T CPlayerInfo::IsFakeClient()
 T CPlayerInfo::IsHLTV()
 T CPlayerInfo::IsInAVehicle()
 T CPlayerInfo::IsObserver()
 T CPlayerInfo::IsPlayer()
 T CPlayerInfo::IsReplay()
 T CPlayerInfo::RemoveAllItems(bool)
 T CPlayerInfo::RunPlayerMove(CBotCmd*)
 T CPlayerInfo::SetAbsAngles(QAngle&)
 T CPlayerInfo::SetAbsOrigin(Vector&)
 T CPlayerInfo::SetActiveWeapon(char const*)
 T CPlayerInfo::SetLastUserCommand(CBotCmd const&)
 T CPlayerInfo::SetLocalAngles(QAngle const&)
 T CPlayerInfo::SetLocalOrigin(Vector const&)
 T CPlayerInfoManager::GetGlobalVars()
 T CPlayerInfoManager::GetPlayerInfo(edict_t*)
 T CPlayerInventory::AddEconItem(CEconItem*, bool, bool, bool)
 T CPlayerInventory::AddListener(GCSDK::ISharedObjectListener*)
 T CPlayerInventory::CPlayerInventory()
 T CPlayerInventory::CanPurchaseItems(int) const
 T CPlayerInventory::DumpInventoryToConsole(bool)
 T CPlayerInventory::ExtractInventorySortPosition(unsigned int)
 T CPlayerInventory::FilloutItemFromEconItem(CEconItemView*, CEconItem*)
 T CPlayerInventory::GetInventoryItemByItemID(unsigned long long, int*)
 T CPlayerInventory::GetItemInLoadout(int, int)
 T CPlayerInventory::GetMaxItemCount() const
 T CPlayerInventory::GetPreviewItemDef() const
 T CPlayerInventory::GetSOCDataForItem(unsigned long long)
 T CPlayerInventory::ItemHasBeenUpdated(CEconItemView*, bool, bool)
 T CPlayerInventory::ItemIsBeingRemoved(CEconItemView*)
 T CPlayerInventory::ItemShouldBeIncluded(int)
 T CPlayerInventory::NotifyHasNewItems()
 T CPlayerInventory::OnHasNewItems()
 T CPlayerInventory::OnItemChangedPosition(CEconItemView*, unsigned int)
 T CPlayerInventory::PostSOUpdate(CSteamID const&, GCSDK::ESOCacheEvent)
 T CPlayerInventory::PreSOUpdate(CSteamID const&, GCSDK::ESOCacheEvent)
 T CPlayerInventory::RemoveItem(unsigned long long)
 T CPlayerInventory::RemoveListener(GCSDK::ISharedObjectListener*)
 T CPlayerInventory::RequestInventory(CSteamID)
 T CPlayerInventory::SOCacheSubscribed(CSteamID const&, GCSDK::ESOCacheEvent)
 T CPlayerInventory::SOCacheUnsubscribed(CSteamID const&, GCSDK::ESOCacheEvent)
 T CPlayerInventory::SOClear()
 T CPlayerInventory::SOCreated(CSteamID const&, GCSDK::CSharedObject const*, GCSDK::ESOCacheEvent)
 T CPlayerInventory::SODestroyed(CSteamID const&, GCSDK::CSharedObject const*, GCSDK::ESOCacheEvent)
 T CPlayerInventory::SOUpdated(CSteamID const&, GCSDK::CSharedObject const*, GCSDK::ESOCacheEvent)
 T CPlayerInventory::ValidateInventoryPositions()
 T CPlayerInventory::~CPlayerInventory()
 T CPlayerLocalData::CPlayerLocalData()
 T CPlayerLocalData::NetworkStateChanged()
 T CPlayerLocalData::NetworkStateChanged(void*)
 T CPlayerLocalData::NetworkVar_m_PlayerFog::NetworkStateChanged()
 T CPlayerLocalData::NetworkVar_m_PlayerFog::NetworkStateChanged(void*)
 T CPlayerLocalData::NetworkVar_m_audio::NetworkStateChanged()
 T CPlayerLocalData::NetworkVar_m_audio::NetworkStateChanged(void*)
 T CPlayerLocalData::NetworkVar_m_skybox3d::NetworkStateChanged()
 T CPlayerLocalData::NetworkVar_m_skybox3d::NetworkStateChanged(void*)
 T CPlayerLocalData::UpdateAreaBits(CBasePlayer*, unsigned char*)
 T CPlayerMove::CPlayerMove()
 T CPlayerMove::CheckMovingGround(CBasePlayer*, double)
 T CPlayerMove::FinishCommand(CBasePlayer*)
 T CPlayerMove::FinishMove(CBasePlayer*, CUserCmd*, CMoveData*)
 T CPlayerMove::RunCommand(CBasePlayer*, CUserCmd*, IMoveHelper*)
 T CPlayerMove::RunPostThink(CBasePlayer*)
 T CPlayerMove::RunPreThink(CBasePlayer*)
 T CPlayerMove::RunThink(CBasePlayer*, double)
 T CPlayerMove::SetupMove(CBasePlayer*, CUserCmd*, IMoveHelper*, CMoveData*)
 T CPlayerMove::StartCommand(CBasePlayer*, CUserCmd*)
 T CPlayerMove::~CPlayerMove()
 T CPlayerResource::GetDataDescMap()
 T CPlayerResource::GetServerClass()
 T CPlayerResource::Init(int)
 T CPlayerResource::NetworkVar_m_iTeam::Set(int, int const&)
 T CPlayerResource::ObjectCaps()
 T CPlayerResource::ResourceThink()
 T CPlayerResource::Spawn()
 T CPlayerResource::UpdateConnectedPlayer(int, CBasePlayer*)
 T CPlayerResource::UpdateDisconnectedPlayer(int)
 T CPlayerResource::UpdatePlayerData()
 T CPlayerResource::UpdateTransmitState()
 T CPlayerResource::YouForgotToImplementOrDeclareServerClass()
 T CPlayerResource::~CPlayerResource()
 T CPluginBotManager::CreateBot(char const*)
 T CPluginBotManager::GetBotController(edict_t*)
 T CPluginHelpersCheck::CreateMessage(char const*, edict_t*, DIALOG_TYPE, KeyValues*)
 T CPointAngleSensor* _CreateEntityTemplate<CPointAngleSensor>(CPointAngleSensor*, char const*)
 T CPointAngleSensor::Activate()
 T CPointAngleSensor::DrawDebugTextOverlays()
 T CPointAngleSensor::GetDataDescMap()
 T CPointAngleSensor::InputDisable(inputdata_t&)
 T CPointAngleSensor::InputEnable(inputdata_t&)
 T CPointAngleSensor::InputSetTargetEntity(inputdata_t&)
 T CPointAngleSensor::InputTest(inputdata_t&)
 T CPointAngleSensor::InputToggle(inputdata_t&)
 T CPointAngleSensor::IsFacingWithinTolerance(CBaseEntity*, CBaseEntity*, float, float*)
 T CPointAngleSensor::KeyValue(char const*, char const*)
 T CPointAngleSensor::Spawn()
 T CPointAngleSensor::Think()
 T CPointAngleSensor::~CPointAngleSensor()
 T CPointAngularVelocitySensor::Activate()
 T CPointAngularVelocitySensor::CompareToThreshold(CBaseEntity*, float, bool)
 T CPointAngularVelocitySensor::DrawDebugLines()
 T CPointAngularVelocitySensor::FireCompareOutput(int, CBaseEntity*)
 T CPointAngularVelocitySensor::GetDataDescMap()
 T CPointAngularVelocitySensor::InputTest(inputdata_t&)
 T CPointAngularVelocitySensor::InputTestWithInterval(inputdata_t&)
 T CPointAngularVelocitySensor::SampleAngularVelocity(CBaseEntity*)
 T CPointAngularVelocitySensor::Spawn()
 T CPointAngularVelocitySensor::Think()
 T CPointAngularVelocitySensor::~CPointAngularVelocitySensor()
 T CPointBonusMapsAccessor::Activate()
 T CPointBonusMapsAccessor::GetDataDescMap()
 T CPointBonusMapsAccessor::InputComplete(inputdata_t&)
 T CPointBonusMapsAccessor::InputSave(inputdata_t&)
 T CPointBonusMapsAccessor::InputUnlock(inputdata_t&)
 T CPointBonusMapsAccessor::~CPointBonusMapsAccessor()
 T CPointCamera::ChangeFOVThink()
 T CPointCamera::GetDataDescMap()
 T CPointCamera::GetServerClass()
 T CPointCamera::InputChangeFOV(inputdata_t&)
 T CPointCamera::InputSetOff(inputdata_t&)
 T CPointCamera::InputSetOn(inputdata_t&)
 T CPointCamera::InputSetOnAndTurnOthersOff(inputdata_t&)
 T CPointCamera::SetActive(bool)
 T CPointCamera::Spawn()
 T CPointCamera::UpdateTransmitState()
 T CPointCamera::YouForgotToImplementOrDeclareServerClass()
 T CPointCamera::~CPointCamera()
 T CPointClientCommand::GetDataDescMap()
 T CPointClientCommand::InputCommand(inputdata_t&)
 T CPointClientCommand::~CPointClientCommand()
 T CPointCommentaryNode::Activate()
 T CPointCommentaryNode::CleanupPostCommentary()
 T CPointCommentaryNode::FinishCommentary(bool)
 T CPointCommentaryNode::GetDataDescMap()
 T CPointCommentaryNode::GetServerClass()
 T CPointCommentaryNode::InputDisable(inputdata_t&)
 T CPointCommentaryNode::InputEnable(inputdata_t&)
 T CPointCommentaryNode::InputStartCommentary(inputdata_t&)
 T CPointCommentaryNode::InputStartUnstoppableCommentary(inputdata_t&)
 T CPointCommentaryNode::Precache()
 T CPointCommentaryNode::SetDisabled(bool)
 T CPointCommentaryNode::SetTransmit(CCheckTransmitInfo*, bool)
 T CPointCommentaryNode::SetUnderCrosshair(bool)
 T CPointCommentaryNode::Spawn()
 T CPointCommentaryNode::SpinThink()
 T CPointCommentaryNode::StartCommentary()
 T CPointCommentaryNode::TeleportTo(CBasePlayer*)
 T CPointCommentaryNode::TestCollision(Ray_t const&, unsigned int, CGameTrace&)
 T CPointCommentaryNode::UpdateTransmitState()
 T CPointCommentaryNode::UpdateViewPostThink()
 T CPointCommentaryNode::UpdateViewThink()
 T CPointCommentaryNode::YouForgotToImplementOrDeclareServerClass()
 T CPointCommentaryNode::~CPointCommentaryNode()
 T CPointDevShotCamera::DevShotThink_PostShot()
 T CPointDevShotCamera::DevShotThink_Setup()
 T CPointDevShotCamera::DevShotThink_TakeShot()
 T CPointDevShotCamera::GetDataDescMap()
 T CPointDevShotCamera::Spawn()
 T CPointDevShotCamera::UpdateTransmitState()
 T CPointDevShotCamera::~CPointDevShotCamera()
 T CPointEntity::KeyValue(char const*, char const*)
 T CPointEntity::ObjectCaps()
 T CPointEntity::Spawn()
 T CPointEntity::~CPointEntity()
 T CPointGamestatsCounter::GetDataDescMap()
 T CPointGamestatsCounter::InputDisable(inputdata_t&)
 T CPointGamestatsCounter::InputEnable(inputdata_t&)
 T CPointGamestatsCounter::InputIncrement(inputdata_t&)
 T CPointGamestatsCounter::InputSetName(inputdata_t&)
 T CPointGamestatsCounter::~CPointGamestatsCounter()
 T CPointHurt::GetDataDescMap()
 T CPointHurt::HurtThink()
 T CPointHurt::InputHurt(inputdata_t&)
 T CPointHurt::InputToggle(inputdata_t&)
 T CPointHurt::InputTurnOff(inputdata_t&)
 T CPointHurt::InputTurnOn(inputdata_t&)
 T CPointHurt::Precache()
 T CPointHurt::Spawn()
 T CPointHurt::~CPointHurt()
 T CPointNavInterface::GetDataDescMap()
 T CPointNavInterface::RecomputeBlockers(inputdata_t&)
 T CPointNavInterface::~CPointNavInterface()
 T CPointPlayerMoveConstraint::Activate()
 T CPointPlayerMoveConstraint::ConstraintThink()
 T CPointPlayerMoveConstraint::GetDataDescMap()
 T CPointPlayerMoveConstraint::InputTurnOff(inputdata_t&)
 T CPointPlayerMoveConstraint::InputTurnOn(inputdata_t&)
 T CPointPlayerMoveConstraint::UpdateTransmitState()
 T CPointPlayerMoveConstraint::~CPointPlayerMoveConstraint()
 T CPointPopulatorInterface::GetDataDescMap()
 T CPointPopulatorInterface::InputChangeBotAttributes(inputdata_t&)
 T CPointPopulatorInterface::InputChangeDefaultEventAttributes(inputdata_t&)
 T CPointPopulatorInterface::InputPauseBotSpawning(inputdata_t&)
 T CPointPopulatorInterface::InputUnpauseBotSpawning(inputdata_t&)
 T CPointPopulatorInterface::~CPointPopulatorInterface()
 T CPointProximitySensor::Activate()
 T CPointProximitySensor::GetDataDescMap()
 T CPointProximitySensor::InputDisable(inputdata_t&)
 T CPointProximitySensor::InputEnable(inputdata_t&)
 T CPointProximitySensor::InputSetTargetEntity(inputdata_t&)
 T CPointProximitySensor::InputToggle(inputdata_t&)
 T CPointProximitySensor::Think()
 T CPointProximitySensor::~CPointProximitySensor()
 T CPointPush::Activate()
 T CPointPush::GetDataDescMap()
 T CPointPush::InputDisable(inputdata_t&)
 T CPointPush::InputEnable(inputdata_t&)
 T CPointPush::PushEntity(CBaseEntity*)
 T CPointPush::PushThink()
 T CPointPush::~CPointPush()
 T CPointServerCommand::GetDataDescMap()
 T CPointServerCommand::InputCommand(inputdata_t&)
 T CPointServerCommand::~CPointServerCommand()
 T CPointSpotlight::Activate()
 T CPointSpotlight::ComputeRenderInfo()
 T CPointSpotlight::CreateEfficientSpotlight()
 T CPointSpotlight::GetDataDescMap()
 T CPointSpotlight::InputLightOff(inputdata_t&)
 T CPointSpotlight::InputLightOn(inputdata_t&)
 T CPointSpotlight::OnEntityEvent(EntityEvent_t, void*)
 T CPointSpotlight::Precache()
 T CPointSpotlight::Spawn()
 T CPointSpotlight::SpotlightCreate()
 T CPointSpotlight::SpotlightCurrentPos()
 T CPointSpotlight::SpotlightDestroy()
 T CPointSpotlight::SpotlightThink()
 T CPointSpotlight::SpotlightUpdate()
 T CPointSpotlight::UpdateTransmitState()
 T CPointSpotlight::~CPointSpotlight()
 T CPointTeleport::Activate()
 T CPointTeleport::GetDataDescMap()
 T CPointTeleport::InputTeleport(inputdata_t&)
 T CPointTeleport::~CPointTeleport()
 T CPointTemplate::AddTemplate(CBaseEntity*, char const*, int)
 T CPointTemplate::AllowNameFixup()
 T CPointTemplate::CreateInstance(Vector const&, QAngle const&, CUtlVector<CBaseEntity*, CUtlMemory<CBaseEntity*, int> >*)
 T CPointTemplate::FinishBuildingTemplates()
 T CPointTemplate::GetDataDescMap()
 T CPointTemplate::GetNumTemplateEntities()
 T CPointTemplate::GetNumTemplates()
 T CPointTemplate::GetTemplateEntity(int)
 T CPointTemplate::GetTemplateIndexForTemplate(int)
 T CPointTemplate::InputForceSpawn(inputdata_t&)
 T CPointTemplate::PerformPrecache()
 T CPointTemplate::Precache()
 T CPointTemplate::ShouldRemoveTemplateEntities()
 T CPointTemplate::Spawn()
 T CPointTemplate::StartBuildingTemplates()
 T CPointTemplate::~CPointTemplate()
 T CPointTemplatePrecacher::AddToPrecache(CBaseEntity*)
 T CPointTemplatePrecacher::LevelInitPreEntity()
 T CPointTemplatePrecacher::Shutdown()
 T CPointTemplatePrecacher::~CPointTemplatePrecacher()
 T CPointVelocitySensor::Activate()
 T CPointVelocitySensor::GetDataDescMap()
 T CPointVelocitySensor::InputDisable(inputdata_t&)
 T CPointVelocitySensor::InputEnable(inputdata_t&)
 T CPointVelocitySensor::SampleVelocity()
 T CPointVelocitySensor::Spawn()
 T CPointVelocitySensor::Think()
 T CPointVelocitySensor::~CPointVelocitySensor()
 T CPopulationManager::AddPlayerCurrencySpent(CTFPlayer*, int)
 T CPopulationManager::AddRespecToPlayer(CTFPlayer*)
 T CPopulationManager::AdjustMinPlayerSpawnTime()
 T CPopulationManager::AllocateBots()
 T CPopulationManager::CPopulationManager()
 T CPopulationManager::ClearCheckpoint()
 T CPopulationManager::CollectMvMBots(CUtlVector<CTFPlayer*, CUtlMemory<CTFPlayer*, int> >*)
 T CPopulationManager::CycleMission()
 T CPopulationManager::DebugWaveStats()
 T CPopulationManager::EndlessFlagHasReset()
 T CPopulationManager::EndlessParseBotUpgrades()
 T CPopulationManager::EndlessRollEscalation()
 T CPopulationManager::EndlessSetAttributesForBot(CTFBot*)
 T CPopulationManager::EndlessShouldResetFlag()
 T CPopulationManager::FindDefaultPopulationFileShortNames(CUtlVector<CUtlString, CUtlMemory<CUtlString, int> >&)
 T CPopulationManager::FindOrAddPlayerUpgradeHistory(CSteamID)
 T CPopulationManager::FindPopulationFileByShortName(char const*, CUtlString&)
 T CPopulationManager::FireGameEvent(IGameEvent*)
 T CPopulationManager::ForgetOtherBottleUpgrades(CTFPlayer*, CEconItemView*, int)
 T CPopulationManager::GameRulesThink()
 T CPopulationManager::GetCurrentWave()
 T CPopulationManager::GetDamageMultiplier()
 T CPopulationManager::GetDataDescMap()
 T CPopulationManager::GetHealthMultiplier(bool)
 T CPopulationManager::GetNumBuybackCreditsForPlayer(CTFPlayer*)
 T CPopulationManager::GetNumRespecsAvailableForPlayer(CTFPlayer*)
 T CPopulationManager::GetPlayerCurrencySpent(CTFPlayer*)
 T CPopulationManager::GetPlayerUpgradeHistory(CTFPlayer*)
 T CPopulationManager::GetPopulationFilename()
 T CPopulationManager::GetPopulationFilenameShort()
 T CPopulationManager::GetSentryBusterDamageAndKillThreshold(int&, int&) const
 T CPopulationManager::HasEventChangeAttributes(char const*) const
 T CPopulationManager::Initialize()
 T CPopulationManager::IsInEndlessWaves()
 T CPopulationManager::IsPlayerBeingTrackedForBuybacks(CTFPlayer*)
 T CPopulationManager::IsValidMvMMap(char const*)
 T CPopulationManager::JumpToWave(unsigned int, float)
 T CPopulationManager::LoadLastKnownMission()
 T CPopulationManager::LoadMissionCycleFile()
 T CPopulationManager::LoadMvMMission(KeyValues*)
 T CPopulationManager::MvMVictory()
 T CPopulationManager::OnCurrencyCollected(int, bool, bool)
 T CPopulationManager::OnCurrencyPackFade()
 T CPopulationManager::OnPlayerKilled(CTFPlayer*)
 T CPopulationManager::Parse()
 T CPopulationManager::PauseSpawning()
 T CPopulationManager::PlayerDoneViewingLoot(CTFPlayer const*)
 T CPopulationManager::Precache()
 T CPopulationManager::RemoveBuybackCreditFromPlayer(CTFPlayer*)
 T CPopulationManager::RemovePlayerAndItemUpgradesFromHistory(CTFPlayer*)
 T CPopulationManager::RemoveRespecFromPlayer(CTFPlayer*)
 T CPopulationManager::Reset()
 T CPopulationManager::ResetMap()
 T CPopulationManager::ResetRespecPoints()
 T CPopulationManager::RestoreCheckpoint()
 T CPopulationManager::RestorePlayerCurrency()
 T CPopulationManager::SendUpgradesToPlayer(CTFPlayer*)
 T CPopulationManager::SetBuybackCreditsForPlayer(CTFPlayer*, int)
 T CPopulationManager::SetCheckpoint(int)
 T CPopulationManager::SetNumRespecsForPlayer(CTFPlayer*, int)
 T CPopulationManager::SetPopulationFilename(char const*)
 T CPopulationManager::SetupOnRoundStart()
 T CPopulationManager::Spawn()
 T CPopulationManager::StartCurrentWave()
 T CPopulationManager::UnpauseSpawning()
 T CPopulationManager::Update()
 T CPopulationManager::UpdateObjectiveResource()
 T CPopulationManager::WaveEnd(bool)
 T CPopulationManager::~CPopulationManager()
 T CPopulatorInternalSpawnPoint::~CPopulatorInternalSpawnPoint()
 T CPoseController::BuildPoseIndexList()
 T CPoseController::BuildPropList()
 T CPoseController::GetDataDescMap()
 T CPoseController::GetServerClass()
 T CPoseController::InputGetFMod(inputdata_t&)
 T CPoseController::InputRandomizeFMod(inputdata_t&)
 T CPoseController::InputSetCycleFrequency(inputdata_t&)
 T CPoseController::InputSetFModAmplitude(inputdata_t&)
 T CPoseController::InputSetFModRate(inputdata_t&)
 T CPoseController::InputSetFModTimeOffset(inputdata_t&)
 T CPoseController::InputSetFModType(inputdata_t&)
 T CPoseController::InputSetInterpolationTime(inputdata_t&)
 T CPoseController::InputSetPoseParameterName(inputdata_t&)
 T CPoseController::InputSetPoseValue(inputdata_t&)
 T CPoseController::NetworkVar_m_hProps::Set(int, CHandle<CBaseEntity> const&)
 T CPoseController::SetCurrentPose(float)
 T CPoseController::SetCycleFrequency(float)
 T CPoseController::SetFModAmplitude(float)
 T CPoseController::SetFModRate(float)
 T CPoseController::SetFModTimeOffset(float)
 T CPoseController::SetFModType(int)
 T CPoseController::SetInterpolationTime(float)
 T CPoseController::SetPoseIndex(int, int)
 T CPoseController::SetPoseValue(float)
 T CPoseController::Spawn()
 T CPoseController::Think()
 T CPoseController::YouForgotToImplementOrDeclareServerClass()
 T CPoseController::~CPoseController()
 T CPostFrameNavigationHook::EnqueueEntityNavigationQuery(CAI_BaseNPC*, CFunctor*)
 T CPostFrameNavigationHook::FrameUpdatePostEntityThink()
 T CPostFrameNavigationHook::FrameUpdatePreEntityThink()
 T CPostFrameNavigationHook::Init()
 T CPostFrameNavigationHook::Name()
 T CPostFrameNavigationHook::~CPostFrameNavigationHook()
 T CPowerupVolume::CPowerupVolume()
 T CPowerupVolume::Precache()
 T CPowerupVolume::Spawn()
 T CPowerupVolume::Touch(CBaseEntity*)
 T CPowerupVolume::~CPowerupVolume()
 T CPrecacheOtherList::LevelInitPreEntity()
 T CPrecacheOtherList::LevelShutdownPostEntity()
 T CPrecacheOtherList::~CPrecacheOtherList()
 T CPrecacheRegister::CPrecacheRegister(void (*)(void*), void const*)
 T CPrecacheRegister::Precache()
 T CPrecacheRegister::PrecacheFn_Other(void*)
 T CPrecipitation::CPrecipitation()
 T CPrecipitation::GetDataDescMap()
 T CPrecipitation::GetServerClass()
 T CPrecipitation::Spawn()
 T CPrecipitation::YouForgotToImplementOrDeclareServerClass()
 T CPrecipitation::~CPrecipitation()
 T CPredictableId::CPredictableId()
 T CPredictableId::GetPlayer() const
 T CPredictableId::GetRaw() const
 T CPredictableId::IsActive() const
 T CPredictableId::ResetInstanceCounters()
 T CProjectedDecal::Activate()
 T CProjectedDecal::GetDataDescMap()
 T CProjectedDecal::InputActivate(inputdata_t&)
 T CProjectedDecal::KeyValue(char const*, char const*)
 T CProjectedDecal::Spawn()
 T CProjectedDecal::StaticDecal()
 T CProjectedDecal::TriggerDecal(CBaseEntity*, CBaseEntity*, USE_TYPE, float)
 T CProjectedDecal::~CProjectedDecal()
 T CPropData::GetRandomChunkModel(char const*, int)
 T CPropData::LevelInitPreEntity()
 T CPropData::LevelShutdownPostEntity()
 T CPropData::ParsePropDataFile()
 T CPropData::ParsePropFromBase(CBaseEntity*, char const*)
 T CPropData::ParsePropFromKV(CBaseEntity*, KeyValues*, KeyValues*)
 T CPropData::~CPropData()
 T CPropDoorRotating::AngularMove(QAngle const&, float)
 T CPropDoorRotating::BeginClosing()
 T CPropDoorRotating::BeginOpening(CBaseEntity*)
 T CPropDoorRotating::CalculateDoorVolume(QAngle, QAngle, Vector*, Vector*)
 T CPropDoorRotating::CheckDoorClear(doorCheck_e)
 T CPropDoorRotating::DoorCanClose(bool)
 T CPropDoorRotating::DoorResume()
 T CPropDoorRotating::DoorStop()
 T CPropDoorRotating::DoorTeleportToSpawnPosition()
 T CPropDoorRotating::DrawDebugTextOverlays()
 T CPropDoorRotating::GetDataDescMap()
 T CPropDoorRotating::GetNPCOpenData(CAI_BaseNPC*, opendata_t&)
 T CPropDoorRotating::GetOpenInterval()
 T CPropDoorRotating::InputSetRotationDistance(inputdata_t&)
 T CPropDoorRotating::InputSetSpeed(inputdata_t&)
 T CPropDoorRotating::IsHingeOnLeft()
 T CPropDoorRotating::MoveDone()
 T CPropDoorRotating::OnDoorClosed()
 T CPropDoorRotating::OnDoorOpened()
 T CPropDoorRotating::OnRestore()
 T CPropDoorRotating::OverridePropdata()
 T CPropDoorRotating::Spawn()
 T CPropDoorRotating::~CPropDoorRotating()
 T CPropSoccerBall::Activate()
 T CPropSoccerBall::BallTouch(CBaseEntity*)
 T CPropSoccerBall::GetDataDescMap()
 T CPropSoccerBall::Precache()
 T CPropSoccerBall::ShouldBlockNav() const
 T CPropSoccerBall::Spawn()
 T CPropSoccerBall::TestCollision(Ray_t const&, unsigned int, CGameTrace&)
 T CPropSoccerBall::TriggerTouchThink()
 T CPropSoccerBall::VPhysicsCollision(int, gamevcollisionevent_t*)
 T CPropSoccerBall::~CPropSoccerBall()
 T CPropVehicle::DampenEyePosition(Vector&, QAngle&)
 T CPropVehicle::DrawDebugGeometryOverlays()
 T CPropVehicle::DrawDebugTextOverlays()
 T CPropVehicle::GetDataDescMap()
 T CPropVehicle::GetSmoothedVelocity()
 T CPropVehicle::GetUprightStrength()
 T CPropVehicle::GetUprightTime()
 T CPropVehicle::HasPhysicsAttacker(float)
 T CPropVehicle::InputAction(inputdata_t&)
 T CPropVehicle::InputHandBrakeOff(inputdata_t&)
 T CPropVehicle::InputHandBrakeOn(inputdata_t&)
 T CPropVehicle::InputSteering(inputdata_t&)
 T CPropVehicle::InputThrottle(inputdata_t&)
 T CPropVehicle::OnPhysGunPickup(CBasePlayer*, PhysGunPickup_t)
 T CPropVehicle::Restore(IRestore&)
 T CPropVehicle::Spawn()
 T CPropVehicle::Teleport(Vector const*, QAngle const*, Vector const*)
 T CPropVehicle::Think()
 T CPropVehicle::VPhysicsUpdate(IPhysicsObject*)
 T CPropVehicle::~CPropVehicle()
 T CPropVehicleDriveable::AllowBlockedExit(CBaseCombatCharacter*, int)
 T CPropVehicleDriveable::AllowMidairExit(CBaseCombatCharacter*, int)
 T CPropVehicleDriveable::CPropVehicleDriveable()
 T CPropVehicleDriveable::CanEnterVehicle(CBaseEntity*)
 T CPropVehicleDriveable::CanExitVehicle(CBaseEntity*)
 T CPropVehicleDriveable::CreateServerVehicle()
 T CPropVehicleDriveable::DriveVehicle(float, CUserCmd*, int, int)
 T CPropVehicleDriveable::EnterVehicle(CBaseCombatCharacter*)
 T CPropVehicleDriveable::Event_KilledOther(CBaseEntity*, CTakeDamageInfo const&)
 T CPropVehicleDriveable::ExitVehicle(int)
 T CPropVehicleDriveable::FinishMove(CBasePlayer*, CUserCmd*, CMoveData*)
 T CPropVehicleDriveable::GetDataDescMap()
 T CPropVehicleDriveable::GetDriver()
 T CPropVehicleDriveable::GetServerClass()
 T CPropVehicleDriveable::GetServerVehicle()
 T CPropVehicleDriveable::GetVectors(Vector*, Vector*, Vector*) const
 T CPropVehicleDriveable::GetVehicleScriptName()
 T CPropVehicleDriveable::InputLock(inputdata_t&)
 T CPropVehicleDriveable::InputTurnOff(inputdata_t&)
 T CPropVehicleDriveable::InputTurnOn(inputdata_t&)
 T CPropVehicleDriveable::InputUnlock(inputdata_t&)
 T CPropVehicleDriveable::IsOverturned()
 T CPropVehicleDriveable::IsVehicleBodyInWater()
 T CPropVehicleDriveable::ItemPostFrame(CBasePlayer*)
 T CPropVehicleDriveable::NPC_AddPassenger(CAI_BaseNPC*, string_t, int)
 T CPropVehicleDriveable::NPC_CanEnterVehicle(CAI_BaseNPC*, bool)
 T CPropVehicleDriveable::NPC_CanExitVehicle(CAI_BaseNPC*, bool)
 T CPropVehicleDriveable::NPC_FinishedEnterVehicle(CAI_BaseNPC*, bool)
 T CPropVehicleDriveable::NPC_FinishedExitVehicle(CAI_BaseNPC*, bool)
 T CPropVehicleDriveable::NPC_RemovePassenger(CAI_BaseNPC*)
 T CPropVehicleDriveable::ObjectCaps()
 T CPropVehicleDriveable::OnRestore()
 T CPropVehicleDriveable::PassengerShouldReceiveDamage(CTakeDamageInfo&)
 T CPropVehicleDriveable::PreExitVehicle(CBaseCombatCharacter*, int)
 T CPropVehicleDriveable::Precache()
 T CPropVehicleDriveable::ProcessMovement(CBasePlayer*, CMoveData*)
 T CPropVehicleDriveable::Restore(IRestore&)
 T CPropVehicleDriveable::SetVehicleEntryAnim(bool)
 T CPropVehicleDriveable::SetVehicleExitAnim(bool, Vector)
 T CPropVehicleDriveable::SetupMove(CBasePlayer*, CUserCmd*, IMoveHelper*, CMoveData*)
 T CPropVehicleDriveable::ShouldThink()
 T CPropVehicleDriveable::Spawn()
 T CPropVehicleDriveable::Think()
 T CPropVehicleDriveable::TraceAttack(CTakeDamageInfo const&, Vector const&, CGameTrace*, CDmgAccumulator*)
 T CPropVehicleDriveable::Use(CBaseEntity*, CBaseEntity*, USE_TYPE, float)
 T CPropVehicleDriveable::VPhysicsCollision(int, gamevcollisionevent_t*)
 T CPropVehicleDriveable::VPhysicsGetObjectList(IPhysicsObject**, int)
 T CPropVehicleDriveable::VehicleAngleVectors(QAngle const&, Vector*, Vector*, Vector*)
 T CPropVehicleDriveable::YouForgotToImplementOrDeclareServerClass()
 T CPropVehicleDriveable::~CPropVehicleDriveable()
 T CPushBlockerEnum::CPushBlockerEnum(CPhysicsPushedEntities*)
 T CPushBlockerEnum::EnumElement(IHandleEntity*)
 T CPushBlockerEnum::GetPushableEntity(IHandleEntity*)
 T CPushBlockerEnum::IntersectsPushers(CBaseEntity*)
 T CPushable::CreateVPhysics()
 T CPushable::ObjectCaps()
 T CPushable::OnTakeDamage(CTakeDamageInfo const&)
 T CPushable::PhysicsSolidMaskForEntity() const
 T CPushable::Spawn()
 T CPushable::Use(CBaseEntity*, CBaseEntity*, USE_TYPE, float)
 T CPushable::VPhysicsCollision(int, gamevcollisionevent_t*)
 T CPushable::~CPushable()
 T CQuestDefinition::BInitFromKV(KeyValues*, CUtlVector<CUtlString, CUtlMemory<CUtlString, int> >*)
 T CQuestDefinition::GetRolledNameForItem(CEconItem const*) const
 T CQuestDefinition::GetRolledObjectivesForItem(CUtlVector<CTFQuestObjectiveDefinition const*, CUtlMemory<CTFQuestObjectiveDefinition const*, int> >&, CEconItem const*) const
 T CQuestItemTracker::CQuestItemTracker(GCSDK::CSharedObject const*, CSteamID, CSOTrackerManager*)
 T CQuestItemTracker::CommitChangesToDB()
 T CQuestItemTracker::GetEarnedBonusPoints() const
 T CQuestItemTracker::GetEarnedStandardPoints() const
 T CQuestItemTracker::IncrementCount(unsigned int, CQuestObjectiveDefinition const*)
 T CQuestItemTracker::OnRemove()
 T CQuestItemTracker::OnUpdate()
 T CQuestItemTracker::SendUpdateToClient(CQuestObjectiveDefinition const*)
 T CQuestItemTracker::Spew() const
 T CQuestItemTracker::UpdatePointsFromSOItem()
 T CQuestItemTracker::~CQuestItemTracker()
 T CQuestObjectiveDefinition::BInitFromKV(KeyValues*, CUtlVector<CUtlString, CUtlMemory<CUtlString, int> >*)
 T CQuestObjectiveDefinition::CQuestObjectiveDefinition()
 T CQuestObjectiveDefinition::~CQuestObjectiveDefinition()
 T CQuestObjectiveManager::AllocateNewProtoMessage() const
 T CQuestObjectiveManager::AllocateNewTracker(GCSDK::CSharedObject const*, CSteamID, CSOTrackerManager*) const
 T CQuestObjectiveManager::CQuestObjectiveManager()
 T CQuestObjectiveManager::GetDebugObjectDescription(GCSDK::CSharedObject const*) const
 T CQuestObjectiveManager::GetKeyForObjectTracker(GCSDK::CSharedObject const*, CSteamID)
 T CQuestObjectiveManager::GetName() const
 T CQuestObjectiveManager::GetType() const
 T CQuestObjectiveManager::ShouldTrackObject(CSteamID const&, GCSDK::CSharedObject const*) const
 T CQuestObjectiveManager::~CQuestObjectiveManager()
 T CQuestThemeDefinition::BInitFromKV(KeyValues*, CUtlVector<CUtlString, CUtlMemory<CUtlString, int> >*)
 T CQuestThemeDefinition::~CQuestThemeDefinition()
 T CRC32_Final(unsigned int*)
 T CRC32_Init(unsigned int*)
 T CRC32_ProcessBuffer(unsigned int*, void const*, int)
 T CRTime::CRTime()
 T CRTime::GetYear() const
 T CRTime::RTime32FromFmtString(char const*, char const*)
 T CRTime::RTime32FromString(char const*)
 T CRTime::RTime32ToString(unsigned int, char (&) [25], bool, bool)
 T CRTime::UpdateRealTime()
 T CRagGib::Spawn(char const*, Vector const&, Vector const&, float)
 T CRagGib::~CRagGib()
 T CRagdollAnimatedFriction::ParseKeyValue(void*, char const*, char const*)
 T CRagdollAnimatedFriction::SetDefaults(void*)
 T CRagdollBoogie::AttachToEntity(CBaseEntity*)
 T CRagdollBoogie::BoogieThink()
 T CRagdollBoogie::Create(CBaseEntity*, float, float, float, int)
 T CRagdollBoogie::DecrementSuppressionCount(CBaseEntity*)
 T CRagdollBoogie::GetDataDescMap()
 T CRagdollBoogie::IncrementSuppressionCount(CBaseEntity*)
 T CRagdollBoogie::Spawn()
 T CRagdollBoogie::ZapThink()
 T CRagdollBoogie::~CRagdollBoogie()
 T CRagdollCollisionRules::ParseKeyValue(void*, char const*, char const*)
 T CRagdollCollisionRules::SetDefaults(void*)
 T CRagdollConstraint::CreateConstraint(IPhysicsConstraintGroup*, hl_constraint_info_t const&)
 T CRagdollConstraint::GetDataDescMap()
 T CRagdollConstraint::~CRagdollConstraint()
 T CRagdollLRURetirement::FrameUpdatePostEntityThink()
 T CRagdollLRURetirement::LevelInitPreEntity()
 T CRagdollLRURetirement::MoveToTopOfLRU(CBaseAnimating*, bool)
 T CRagdollLRURetirement::Update(float)
 T CRagdollLRURetirement::~CRagdollLRURetirement()
 T CRagdollLowViolenceManager::SetLowViolence(char const*)
 T CRagdollMagnet::DistToPoint(Vector const&)
 T CRagdollMagnet::FindBestMagnet(CBaseEntity*)
 T CRagdollMagnet::GetDataDescMap()
 T CRagdollMagnet::GetForceVector(CBaseEntity*)
 T CRagdollMagnet::InputDisable(inputdata_t&)
 T CRagdollMagnet::InputEnable(inputdata_t&)
 T CRagdollMagnet::~CRagdollMagnet()
 T CRagdollManager::Activate()
 T CRagdollManager::CRagdollManager()
 T CRagdollManager::DrawDebugTextOverlays()
 T CRagdollManager::GetDataDescMap()
 T CRagdollManager::GetServerClass()
 T CRagdollManager::InputSetMaxRagdollCount(inputdata_t&)
 T CRagdollManager::InputSetMaxRagdollCountDX8(inputdata_t&)
 T CRagdollManager::UpdateCurrentMaxRagDollCount()
 T CRagdollManager::UpdateTransmitState()
 T CRagdollManager::YouForgotToImplementOrDeclareServerClass()
 T CRagdollManager::~CRagdollManager()
 T CRagdollProp::CRagdollProp()
 T CRagdollProp::ClearFlagsThink()
 T CRagdollProp::DisableAutoFade()
 T CRagdollProp::DrawDebugGeometryOverlays()
 T CRagdollProp::DrawDebugTextOverlays()
 T CRagdollProp::FadeOut(float, float)
 T CRagdollProp::FadeOutThink()
 T CRagdollProp::GetAngleOverrideFromCurrentState(char*, int)
 T CRagdollProp::GetDataDescMap()
 T CRagdollProp::GetResponseSystem()
 T CRagdollProp::GetServerClass()
 T CRagdollProp::HandleFirstCollisionInteractions(int, gamevcollisionevent_t*)
 T CRagdollProp::HasPhysgunInteraction(char const*, char const*)
 T CRagdollProp::HasPhysicsAttacker(float)
 T CRagdollProp::InitRagdoll(Vector const&, int, Vector const&, matrix3x4_t*, matrix3x4_t*, float, int, bool, bool)
 T CRagdollProp::InitRagdollAnimation()
 T CRagdollProp::InputDisableMotion(inputdata_t&)
 T CRagdollProp::InputEnableMotion(inputdata_t&)
 T CRagdollProp::InputFadeAndRemove(inputdata_t&)
 T CRagdollProp::InputStartRadgollBoogie(inputdata_t&)
 T CRagdollProp::InputTurnOff(inputdata_t&)
 T CRagdollProp::InputTurnOn(inputdata_t&)
 T CRagdollProp::IsAlive()
 T CRagdollProp::IsRagdoll()
 T CRagdollProp::ModifyOrAppendCriteria(AI_CriteriaSet&)
 T CRagdollProp::ObjectCaps()
 T CRagdollProp::OnPhysGunDrop(CBasePlayer*, PhysGunDrop_t)
 T CRagdollProp::OnPhysGunPickup(CBasePlayer*, PhysGunPickup_t)
 T CRagdollProp::OnRestore()
 T CRagdollProp::OnSave(IEntitySaveUtils*)
 T CRagdollProp::OnTakeDamage(CTakeDamageInfo const&)
 T CRagdollProp::PhysGunLaunchAngularImpulse()
 T CRagdollProp::Precache()
 T CRagdollProp::SetDamageEntity(CBaseEntity*)
 T CRagdollProp::SetDebrisThink()
 T CRagdollProp::SetupBones(matrix3x4_t*, int)
 T CRagdollProp::Spawn()
 T CRagdollProp::Teleport(Vector const*, QAngle const*, Vector const*)
 T CRagdollProp::TestCollision(Ray_t const&, unsigned int, CGameTrace&)
 T CRagdollProp::TraceAttack(CTakeDamageInfo const&, Vector const&, CGameTrace*, CDmgAccumulator*)
 T CRagdollProp::UpdateNetworkDataFromVPhysics(IPhysicsObject*, int)
 T CRagdollProp::UpdateOnRemove()
 T CRagdollProp::VPhysicsCollision(int, gamevcollisionevent_t*)
 T CRagdollProp::VPhysicsGetObjectList(IPhysicsObject**, int)
 T CRagdollProp::VPhysicsUpdate(IPhysicsObject*)
 T CRagdollProp::YouForgotToImplementOrDeclareServerClass()
 T CRagdollProp::~CRagdollProp()
 T CRagdollPropAttached::Detach()
 T CRagdollPropAttached::GetDataDescMap()
 T CRagdollPropAttached::GetServerClass()
 T CRagdollPropAttached::InitRagdollAttached(IPhysicsObject*, Vector const&, int, matrix3x4_t*, matrix3x4_t*, float, int, CBaseAnimating*, int, Vector const&, int, Vector const&)
 T CRagdollPropAttached::VPhysicsUpdate(IPhysicsObject*)
 T CRagdollPropAttached::YouForgotToImplementOrDeclareServerClass()
 T CRagdollPropAttached::~CRagdollPropAttached()
 T CRallyPoint::DrawDebugTextOverlays()
 T CRallyPoint::GetDataDescMap()
 T CRallyPoint::~CRallyPoint()
 T CRandomChanceString::AddString(char const*, int)
 T CRandomChoiceSpawner::GetClass(int)
 T CRandomChoiceSpawner::GetClassIcon(int)
 T CRandomChoiceSpawner::GetHealth(int)
 T CRandomChoiceSpawner::HasAttribute(CTFBot::AttributeType, int)
 T CRandomChoiceSpawner::HasEventChangeAttributes(char const*) const
 T CRandomChoiceSpawner::IsMiniBoss(int)
 T CRandomChoiceSpawner::IsVarious()
 T CRandomChoiceSpawner::Parse(KeyValues*)
 T CRandomChoiceSpawner::Spawn(Vector const&, CUtlVector<CHandle<CBaseEntity>, CUtlMemory<CHandle<CBaseEntity>, int> >*)
 T CRandomChoiceSpawner::~CRandomChoiceSpawner()
 T CRandomPlacementPopulator::CRandomPlacementPopulator(CPopulationManager*)
 T CRandomPlacementPopulator::Parse(KeyValues*)
 T CRandomPlacementPopulator::PostInitialize()
 T CRandomPlacementPopulator::~CRandomPlacementPopulator()
 T CRecipeComponentMatchingIterator::CRecipeComponentMatchingIterator(IEconItemInterface const*, IEconItemInterface const*)
 T CRecipeComponentMatchingIterator::OnIterateAttributeValue(CEconItemAttributeDefinition const*, CAttribute_DynamicRecipeComponent const&)
 T CRecipeComponentMatchingIterator::~CRecipeComponentMatchingIterator()
 T CRecipientFilter::AddAllPlayers()
 T CRecipientFilter::AddPlayersFromBitMask(CBitVec<255>&)
 T CRecipientFilter::AddRecipient(CBasePlayer const*)
 T CRecipientFilter::AddRecipientsByPAS(Vector const&)
 T CRecipientFilter::AddRecipientsByPVS(Vector const&)
 T CRecipientFilter::AddRecipientsByTeam(CTeam*)
 T CRecipientFilter::CRecipientFilter()
 T CRecipientFilter::CopyFrom(CRecipientFilter const&)
 T CRecipientFilter::GetRecipientCount() const
 T CRecipientFilter::GetRecipientIndex(int) const
 T CRecipientFilter::IgnorePredictionCull() const
 T CRecipientFilter::IsInitMessage() const
 T CRecipientFilter::IsReliable() const
 T CRecipientFilter::MakeInitMessage()
 T CRecipientFilter::MakeReliable()
 T CRecipientFilter::RemoveAllRecipients()
 T CRecipientFilter::RemovePlayersFromBitMask(CBitVec<255>&)
 T CRecipientFilter::RemoveRecipient(CBasePlayer*)
 T CRecipientFilter::RemoveRecipientByPlayerIndex(int)
 T CRecipientFilter::RemoveRecipientsByPVS(Vector const&)
 T CRecipientFilter::RemoveRecipientsByTeam(CTeam*)
 T CRecipientFilter::RemoveRecipientsNotOnTeam(CTeam*)
 T CRecipientFilter::SetIgnorePredictionCull(bool)
 T CRecipientFilter::UsePredictionRules()
 T CRecipientFilter::~CRecipientFilter()
 T CRefCountServiceBase<true, CRefMT>::OnFinalRelease()
 T CRefCounted1<CFunctor, CRefCountServiceBase<true, CRefMT> >::AddRef()
 T CRefCounted1<CFunctor, CRefCountServiceBase<true, CRefMT> >::Release()
 T CRegenerateZone::Activate()
 T CRegenerateZone::EndTouch(CBaseEntity*)
 T CRegenerateZone::GetDataDescMap()
 T CRegenerateZone::InputDisable(inputdata_t&)
 T CRegenerateZone::InputEnable(inputdata_t&)
 T CRegenerateZone::InputToggle(inputdata_t&)
 T CRegenerateZone::Precache()
 T CRegenerateZone::Regenerate(CTFPlayer*)
 T CRegenerateZone::Spawn()
 T CRegenerateZone::Touch(CBaseEntity*)
 T CRegenerateZone::~CRegenerateZone()
 T CReliableBroadcastRecipientFilter::~CReliableBroadcastRecipientFilter()
 T CReplayCachedContestData::ByteSize() const
 T CReplayCachedContestData::Clear()
 T CReplayCachedContestData::GetCachedSize() const
 T CReplayCachedContestData::GetMetadata() const
 T CReplayCachedContestData::IsInitialized() const
 T CReplayCachedContestData::MergeFrom(CReplayCachedContestData const&)
 T CReplayCachedContestData::New() const
 T CReplayCachedContestData::SerializeWithCachedSizesToArray(unsigned char*) const
 T CReplayCachedContestData::SetCachedSize(int) const
 T CReplayCachedContestData::~CReplayCachedContestData()
 T CReplayGameStatsHelper::UploadError(KeyValues*, bool)
 T CRespawnEntitiesFilter::CreateNextEntity(char const*)
 T CRespawnEntitiesFilter::ShouldCreateEntity(char const*)
 T CResponseSystem::Clear()
 T CResponseSystem::CompareUsingMatcher(char const*, Matcher&, bool)
 T CResponseSystem::ComputeMatcher(Criteria*, Matcher&)
 T CResponseSystem::CopyCriteriaFrom(Rule*, Rule*, CResponseSystem*)
 T CResponseSystem::CopyResponsesFrom(Rule*, Rule*, CResponseSystem*)
 T CResponseSystem::CopyRuleFrom(Rule*, int, CResponseSystem*)
 T CResponseSystem::DebugPrint(int, char const*, ...)
 T CResponseSystem::DescribeResponseGroup(ResponseGroup*, int, int)
 T CResponseSystem::DumpRules()
 T CResponseSystem::FindBestMatchingRule(AI_CriteriaSet const&, bool)
 T CResponseSystem::FindBestResponse(AI_CriteriaSet const&, AI_Response&, IResponseFilter*)
 T CResponseSystem::GetAllResponses(CUtlVector<AI_Response*, CUtlMemory<AI_Response*, int> >*)
 T CResponseSystem::GetBestResponse(CResponseSystem::ResponseSearchResult&, Rule*, bool, IResponseFilter*)
 T CResponseSystem::IsRootCommand()
 T CResponseSystem::LoadFromBuffer(char const*, char const*, CStringPool&)
 T CResponseSystem::LoadRuleSet(char const*)
 T CResponseSystem::LookForCriteria(AI_CriteriaSet const&, int)
 T CResponseSystem::ParseEnumeration()
 T CResponseSystem::ParseInclude(CStringPool&)
 T CResponseSystem::ParseOneCriterion(char const*)
 T CResponseSystem::ParseOneResponse(char const*, ResponseGroup&)
 T CResponseSystem::ParseResponse()
 T CResponseSystem::ParseRule()
 T CResponseSystem::Precache()
 T CResponseSystem::PrecacheResponses(bool)
 T CResponseSystem::PushScript(char const*, unsigned char*)
 T CResponseSystem::RecursiveLookForCriteria(AI_CriteriaSet const&, Criteria*)
 T CResponseSystem::RecursiveScoreSubcriteriaAgainstRule(AI_CriteriaSet const&, Criteria*, bool&, bool)
 T CResponseSystem::ResolveResponse(CResponseSystem::ResponseSearchResult&, int, char const*, bool, IResponseFilter*)
 T CResponseSystem::ResolveToken(Matcher&, char*, unsigned long, char const*)
 T CResponseSystem::ResponseWarning(char const*, ...)
 T CResponseSystem::ScoreCriteriaAgainstRule(AI_CriteriaSet const&, int, bool)
 T CResponseSystem::ScoreCriteriaAgainstRuleCriteria(AI_CriteriaSet const&, int, bool&, bool)
 T CResponseSystem::SelectWeightedResponseFromResponseGroup(ResponseGroup*, IResponseFilter*)
 T CResponseSystem::~CResponseSystem()
 T CRestartGameIssue::CanCallVote(int, char const*, vote_create_failed_t&, int&)
 T CRestartGameIssue::ExecuteCommand()
 T CRestartGameIssue::GetDisplayString()
 T CRestartGameIssue::GetVotePassedString()
 T CRestartGameIssue::IsEnabled()
 T CRestartGameIssue::ListIssueDetails(CBasePlayer*)
 T CRestartGameIssue::~CRestartGameIssue()
 T CRestore::CRestore(CSaveRestoreData*)
 T CRestore::DoReadAll(void*, datamap_t*, datamap_t*)
 T CRestore::EmptyFields(void*, typedescription_t*, int)
 T CRestore::EndBlock()
 T CRestore::GetGameSaveRestoreInfo()
 T CRestore::GetPrecacheMode()
 T CRestore::GetReadPos() const
 T CRestore::ReadAll(void*, datamap_t*)
 T CRestore::ReadBasicField(SaveRestoreRecordHeader_t const&, void*, datamap_t*, typedescription_t*)
 T CRestore::ReadBool(bool*, int, int)
 T CRestore::ReadData(char*, int, int)
 T CRestore::ReadEHandle(CHandle<CBaseEntity>*, int, int)
 T CRestore::ReadEdictPtr(edict_t**, int, int)
 T CRestore::ReadEntityPtr(CBaseEntity**, int, int)
 T CRestore::ReadFields(char const*, void*, datamap_t*, typedescription_t*, int)
 T CRestore::ReadFloat(float*, int, int)
 T CRestore::ReadFunction(datamap_t*, void (CBaseEntity::***)(inputdata_t&), int, int)
 T CRestore::ReadGameField(SaveRestoreRecordHeader_t const&, void*, datamap_t*, typedescription_t*)
 T CRestore::ReadHeader(SaveRestoreRecordHeader_t*)
 T CRestore::ReadInt()
 T CRestore::ReadInt(int*, int, int)
 T CRestore::ReadMatrix3x4Worldspace(matrix3x4_t*, int, int)
 T CRestore::ReadPositionVector(Vector*)
 T CRestore::ReadPositionVector(Vector*, int, int)
 T CRestore::ReadQuaternion(Quaternion*)
 T CRestore::ReadQuaternion(Quaternion*, int, int)
 T CRestore::ReadShort()
 T CRestore::ReadShort(short*, int, int)
 T CRestore::ReadString(char*, int, int)
 T CRestore::ReadString(string_t*, int, int)
 T CRestore::ReadTick(int*, int, int)
 T CRestore::ReadTime(float*, int, int)
 T CRestore::ReadVMatrix(VMatrix*, int, int)
 T CRestore::ReadVMatrixWorldspace(VMatrix*, int, int)
 T CRestore::ReadVector(Vector*)
 T CRestore::ReadVector(Vector*, int, int)
 T CRestore::SetReadPos(int)
 T CRestore::SkipHeader()
 T CRestore::StartBlock()
 T CRestore::StartBlock(SaveRestoreRecordHeader_t*)
 T CRestore::StartBlock(char*)
 T CRestore::StringFromHeaderSymbol(int)
 T CRestore::~CRestore()
 T CRevertSaved::GetDataDescMap()
 T CRevertSaved::InputReload(inputdata_t&)
 T CRevertSaved::LoadThink()
 T CRevertSaved::Use(CBaseEntity*, CBaseEntity*, USE_TYPE, float)
 T CRevertSaved::~CRevertSaved()
 T CRobotBehavior::GetName() const
 T CRobotBehavior::InitialContainedAction(CTFRobotDestruction_Robot*)
 T CRobotBehavior::OnContact(CTFRobotDestruction_Robot*, CBaseEntity*, CGameTrace*)
 T CRobotBehavior::OnInjured(CTFRobotDestruction_Robot*, CTakeDamageInfo const&)
 T CRobotBehavior::OnStart(CTFRobotDestruction_Robot*, Action<CTFRobotDestruction_Robot>*)
 T CRobotBehavior::Update(CTFRobotDestruction_Robot*, float)
 T CRobotBehavior::~CRobotBehavior()
 T CRobotDestructionVaultTrigger::EndTouch(CBaseEntity*)
 T CRobotDestructionVaultTrigger::GetDataDescMap()
 T CRobotDestructionVaultTrigger::PassesTriggerFilters(CBaseEntity*)
 T CRobotDestructionVaultTrigger::Precache()
 T CRobotDestructionVaultTrigger::Spawn()
 T CRobotDestructionVaultTrigger::StartTouch(CBaseEntity*)
 T CRobotDestructionVaultTrigger::StealPoints(CTFPlayer*)
 T CRobotDestructionVaultTrigger::StealPointsThink()
 T CRobotDestructionVaultTrigger::~CRobotDestructionVaultTrigger()
 T CRobotDispenser::DispenseAmmo(CTFPlayer*)
 T CRobotDispenser::DispenseMetal(CTFPlayer*)
 T CRobotDispenser::GetControlPanelInfo(int, char const*&)
 T CRobotDispenser::GetDataDescMap()
 T CRobotDispenser::GetDispenserRadius()
 T CRobotDispenser::GetHealRate() const
 T CRobotDispenser::GetServerClass()
 T CRobotDispenser::OnGoActive()
 T CRobotDispenser::PlayActiveSound()
 T CRobotDispenser::SetModel(char const*)
 T CRobotDispenser::Spawn()
 T CRobotDispenser::YouForgotToImplementOrDeclareServerClass()
 T CRobotDispenser::~CRobotDispenser()
 T CRobotEnterPanic::GetName() const
 T CRobotEnterPanic::OnInjured(CTFRobotDestruction_Robot*, CTakeDamageInfo const&)
 T CRobotEnterPanic::OnStart(CTFRobotDestruction_Robot*, Action<CTFRobotDestruction_Robot>*)
 T CRobotEnterPanic::Update(CTFRobotDestruction_Robot*, float)
 T CRobotEnterPanic::~CRobotEnterPanic()
 T CRobotIntention::CRobotIntention(CTFRobotDestruction_Robot*)
 T CRobotIntention::FirstContainedResponder() const
 T CRobotIntention::IsPositionAllowed(INextBot const*, Vector const&) const
 T CRobotIntention::NextContainedResponder(INextBotEventResponder*) const
 T CRobotIntention::Reset()
 T CRobotIntention::Update()
 T CRobotIntention::~CRobotIntention()
 T CRobotLeavePanic::GetName() const
 T CRobotLeavePanic::OnInjured(CTFRobotDestruction_Robot*, CTakeDamageInfo const&)
 T CRobotLeavePanic::OnStart(CTFRobotDestruction_Robot*, Action<CTFRobotDestruction_Robot>*)
 T CRobotLeavePanic::Update(CTFRobotDestruction_Robot*, float)
 T CRobotLeavePanic::~CRobotLeavePanic()
 T CRobotLocomotion::GetGroundSpeed() const
 T CRobotLocomotion::GetMaxJumpHeight() const
 T CRobotLocomotion::GetMaxYawRate() const
 T CRobotLocomotion::GetRunSpeed() const
 T CRobotLocomotion::GetStepHeight() const
 T CRobotLocomotion::ShouldCollideWith(CBaseEntity const*) const
 T CRobotLocomotion::~CRobotLocomotion()
 T CRobotMaterialize::GetName() const
 T CRobotMaterialize::OnStart(CTFRobotDestruction_Robot*, Action<CTFRobotDestruction_Robot>*)
 T CRobotMaterialize::Update(CTFRobotDestruction_Robot*, float)
 T CRobotMaterialize::~CRobotMaterialize()
 T CRobotPanic::GetName() const
 T CRobotPanic::OnEnd(CTFRobotDestruction_Robot*, Action<CTFRobotDestruction_Robot>*)
 T CRobotPanic::OnInjured(CTFRobotDestruction_Robot*, CTakeDamageInfo const&)
 T CRobotPanic::OnStart(CTFRobotDestruction_Robot*, Action<CTFRobotDestruction_Robot>*)
 T CRobotPanic::Update(CTFRobotDestruction_Robot*, float)
 T CRobotPanic::~CRobotPanic()
 T CRobotPathCost::operator()(CNavArea*, CNavArea*, CNavLadder const*, CFuncElevator const*, float) const
 T CRobotPatrol::GetName() const
 T CRobotPatrol::OnResume(CTFRobotDestruction_Robot*, Action<CTFRobotDestruction_Robot>*)
 T CRobotPatrol::OnStart(CTFRobotDestruction_Robot*, Action<CTFRobotDestruction_Robot>*)
 T CRobotPatrol::Update(CTFRobotDestruction_Robot*, float)
 T CRobotPatrol::~CRobotPatrol()
 T CRobotSpawn::GetName() const
 T CRobotSpawn::OnEnd(CTFRobotDestruction_Robot*, Action<CTFRobotDestruction_Robot>*)
 T CRobotSpawn::OnInjured(CTFRobotDestruction_Robot*, CTakeDamageInfo const&)
 T CRobotSpawn::OnStart(CTFRobotDestruction_Robot*, Action<CTFRobotDestruction_Robot>*)
 T CRobotSpawn::Update(CTFRobotDestruction_Robot*, float)
 T CRobotSpawn::~CRobotSpawn()
 T CRopeAnchor::FallThink()
 T CRopeAnchor::GetDataDescMap()
 T CRopeAnchor::RemoveThink()
 T CRopeAnchor::Spawn()
 T CRopeAnchor::~CRopeAnchor()
 T CRopeKeyframe::Activate()
 T CRopeKeyframe::Break()
 T CRopeKeyframe::CRopeKeyframe()
 T CRopeKeyframe::CreateWithSecondPointDetached(CBaseEntity*, int, int, int, char const*, int, bool)
 T CRopeKeyframe::EndpointsChanged()
 T CRopeKeyframe::GetDataDescMap()
 T CRopeKeyframe::GetEndPointPos(int, Vector&)
 T CRopeKeyframe::GetServerClass()
 T CRopeKeyframe::Init()
 T CRopeKeyframe::InputBreak(inputdata_t&)
 T CRopeKeyframe::InputSetForce(inputdata_t&)
 T CRopeKeyframe::InputSetScrollSpeed(inputdata_t&)
 T CRopeKeyframe::KeyValue(char const*, char const*)
 T CRopeKeyframe::NotifyPositionChanged(CBaseEntity*)
 T CRopeKeyframe::ObjectCaps()
 T CRopeKeyframe::OnTakeDamage(CTakeDamageInfo const&)
 T CRopeKeyframe::Precache()
 T CRopeKeyframe::PropagateForce(CBaseEntity*, CBaseEntity*, CBaseEntity*, float, float, float)
 T CRopeKeyframe::RecalculateLength()
 T CRopeKeyframe::SetAttachmentPoint(CBaseHandle&, short&, CBaseEntity*, int)
 T CRopeKeyframe::SetEndPoint(CBaseEntity*, int)
 T CRopeKeyframe::SetParent(CBaseEntity*, int)
 T CRopeKeyframe::SetStartPoint(CBaseEntity*, int)
 T CRopeKeyframe::SetTransmit(CCheckTransmitInfo*, bool)
 T CRopeKeyframe::ShakeRopes(Vector const&, float, float)
 T CRopeKeyframe::UpdateBBox(bool)
 T CRopeKeyframe::UpdateTransmitState()
 T CRopeKeyframe::YouForgotToImplementOrDeclareServerClass()
 T CRopeKeyframe::~CRopeKeyframe()
 T CRotButton* _CreateEntityTemplate<CRotButton>(CRotButton*, char const*)
 T CRotButton::CreateVPhysics()
 T CRotButton::Spawn()
 T CRotButton::~CRotButton()
 T CRotDoor::CreateVPhysics()
 T CRotDoor::GetDataDescMap()
 T CRotDoor::IsRotatingDoor()
 T CRotDoor::SetToggleState(int)
 T CRotDoor::Spawn()
 T CRotDoor::~CRotDoor()
 T CRotorWashShooter::DoWashPush(float, Vector const&)
 T CRotorWashShooter::GetDataDescMap()
 T CRotorWashShooter::Spawn()
 T CRotorWashShooter::~CRotorWashShooter()
 T CRuleBrushEntity::Spawn()
 T CRulePointEntity::GetDataDescMap()
 T CRulePointEntity::Spawn()
 T CSHA1::CSHA1()
 T CSHA1::Final()
 T CSHA1::GetHash(unsigned char*)
 T CSHA1::Transform(unsigned long*, unsigned char*)
 T CSHA1::Update(unsigned char*, unsigned int)
 T CSHA1::~CSHA1()
 T CSOClassPresetClientData::ByteSize() const
 T CSOClassPresetClientData::Clear()
 T CSOClassPresetClientData::GetCachedSize() const
 T CSOClassPresetClientData::GetMetadata() const
 T CSOClassPresetClientData::IsInitialized() const
 T CSOClassPresetClientData::MergeFrom(CSOClassPresetClientData const&)
 T CSOClassPresetClientData::New() const
 T CSOClassPresetClientData::SerializeWithCachedSizesToArray(unsigned char*) const
 T CSOClassPresetClientData::SetCachedSize(int) const
 T CSOClassPresetClientData::~CSOClassPresetClientData()
 T CSOEconClaimCode::ByteSize() const
 T CSOEconClaimCode::CSOEconClaimCode()
 T CSOEconClaimCode::Clear()
 T CSOEconClaimCode::GetCachedSize() const
 T CSOEconClaimCode::GetMetadata() const
 T CSOEconClaimCode::IsInitialized() const
 T CSOEconClaimCode::MergeFrom(CSOEconClaimCode const&)
 T CSOEconClaimCode::New() const
 T CSOEconClaimCode::SerializeWithCachedSizesToArray(unsigned char*) const
 T CSOEconClaimCode::SetCachedSize(int) const
 T CSOEconClaimCode::~CSOEconClaimCode()
 T CSOEconGameAccountClient::ByteSize() const
 T CSOEconGameAccountClient::Clear()
 T CSOEconGameAccountClient::GetCachedSize() const
 T CSOEconGameAccountClient::GetMetadata() const
 T CSOEconGameAccountClient::IsInitialized() const
 T CSOEconGameAccountClient::MergeFrom(CSOEconGameAccountClient const&)
 T CSOEconGameAccountClient::New() const
 T CSOEconGameAccountClient::SerializeWithCachedSizesToArray(unsigned char*) const
 T CSOEconGameAccountClient::SetCachedSize(int) const
 T CSOEconGameAccountClient::~CSOEconGameAccountClient()
 T CSOEconGameAccountForGameServers::ByteSize() const
 T CSOEconGameAccountForGameServers::CSOEconGameAccountForGameServers()
 T CSOEconGameAccountForGameServers::Clear()
 T CSOEconGameAccountForGameServers::GetCachedSize() const
 T CSOEconGameAccountForGameServers::GetMetadata() const
 T CSOEconGameAccountForGameServers::IsInitialized() const
 T CSOEconGameAccountForGameServers::MergeFrom(CSOEconGameAccountForGameServers const&)
 T CSOEconGameAccountForGameServers::New() const
 T CSOEconGameAccountForGameServers::SerializeWithCachedSizesToArray(unsigned char*) const
 T CSOEconGameAccountForGameServers::SetCachedSize(int) const
 T CSOEconGameAccountForGameServers::~CSOEconGameAccountForGameServers()
 T CSOEconItem::ByteSize() const
 T CSOEconItem::CSOEconItem()
 T CSOEconItem::Clear()
 T CSOEconItem::GetCachedSize() const
 T CSOEconItem::GetMetadata() const
 T CSOEconItem::IsInitialized() const
 T CSOEconItem::MergeFrom(CSOEconItem const&)
 T CSOEconItem::New() const
 T CSOEconItem::SerializeWithCachedSizesToArray(unsigned char*) const
 T CSOEconItem::SetCachedSize(int) const
 T CSOEconItem::SharedDtor()
 T CSOEconItem::default_instance()
 T CSOEconItem::~CSOEconItem()
 T CSOEconItemAttribute::ByteSize() const
 T CSOEconItemAttribute::Clear()
 T CSOEconItemAttribute::GetCachedSize() const
 T CSOEconItemAttribute::GetMetadata() const
 T CSOEconItemAttribute::IsInitialized() const
 T CSOEconItemAttribute::MergeFrom(CSOEconItemAttribute const&)
 T CSOEconItemAttribute::New() const
 T CSOEconItemAttribute::SerializeWithCachedSizesToArray(unsigned char*) const
 T CSOEconItemAttribute::SetCachedSize(int) const
 T CSOEconItemAttribute::~CSOEconItemAttribute()
 T CSOEconItemEquipped::ByteSize() const
 T CSOEconItemEquipped::Clear()
 T CSOEconItemEquipped::GetCachedSize() const
 T CSOEconItemEquipped::GetMetadata() const
 T CSOEconItemEquipped::IsInitialized() const
 T CSOEconItemEquipped::MergeFrom(CSOEconItemEquipped const&)
 T CSOEconItemEquipped::New() const
 T CSOEconItemEquipped::SerializeWithCachedSizesToArray(unsigned char*) const
 T CSOEconItemEquipped::SetCachedSize(int) const
 T CSOEconItemEquipped::~CSOEconItemEquipped()
 T CSOEconItemPresetInstance::ByteSize() const
 T CSOEconItemPresetInstance::Clear()
 T CSOEconItemPresetInstance::GetCachedSize() const
 T CSOEconItemPresetInstance::GetMetadata() const
 T CSOEconItemPresetInstance::IsInitialized() const
 T CSOEconItemPresetInstance::MergeFrom(CSOEconItemPresetInstance const&)
 T CSOEconItemPresetInstance::New() const
 T CSOEconItemPresetInstance::SerializeWithCachedSizesToArray(unsigned char*) const
 T CSOEconItemPresetInstance::SetCachedSize(int) const
 T CSOEconItemPresetInstance::~CSOEconItemPresetInstance()
 T CSOItemCriteria::ByteSize() const
 T CSOItemCriteria::CSOItemCriteria()
 T CSOItemCriteria::Clear()
 T CSOItemCriteria::GetCachedSize() const
 T CSOItemCriteria::GetMetadata() const
 T CSOItemCriteria::IsInitialized() const
 T CSOItemCriteria::MergeFrom(CSOItemCriteria const&)
 T CSOItemCriteria::New() const
 T CSOItemCriteria::SerializeWithCachedSizesToArray(unsigned char*) const
 T CSOItemCriteria::SetCachedSize(int) const
 T CSOItemCriteria::~CSOItemCriteria()
 T CSOItemCriteriaCondition::ByteSize() const
 T CSOItemCriteriaCondition::CSOItemCriteriaCondition()
 T CSOItemCriteriaCondition::Clear()
 T CSOItemCriteriaCondition::GetCachedSize() const
 T CSOItemCriteriaCondition::GetMetadata() const
 T CSOItemCriteriaCondition::IsInitialized() const
 T CSOItemCriteriaCondition::MergeFrom(CSOItemCriteriaCondition const&)
 T CSOItemCriteriaCondition::New() const
 T CSOItemCriteriaCondition::SerializeWithCachedSizesToArray(unsigned char*) const
 T CSOItemCriteriaCondition::SetCachedSize(int) const
 T CSOItemCriteriaCondition::SharedDtor()
 T CSOItemCriteriaCondition::~CSOItemCriteriaCondition()
 T CSOItemRecipe::ByteSize() const
 T CSOItemRecipe::CSOItemRecipe()
 T CSOItemRecipe::Clear()
 T CSOItemRecipe::GetCachedSize() const
 T CSOItemRecipe::GetMetadata() const
 T CSOItemRecipe::IsInitialized() const
 T CSOItemRecipe::MergeFrom(CSOItemRecipe const&)
 T CSOItemRecipe::New() const
 T CSOItemRecipe::SerializeWithCachedSizesToArray(unsigned char*) const
 T CSOItemRecipe::SetCachedSize(int) const
 T CSOItemRecipe::SharedDtor()
 T CSOItemRecipe::~CSOItemRecipe()
 T CSOLobbyInvite::ByteSize() const
 T CSOLobbyInvite::Clear()
 T CSOLobbyInvite::GetCachedSize() const
 T CSOLobbyInvite::GetMetadata() const
 T CSOLobbyInvite::IsInitialized() const
 T CSOLobbyInvite::MergeFrom(CSOLobbyInvite const&)
 T CSOLobbyInvite::New() const
 T CSOLobbyInvite::SerializeWithCachedSizesToArray(unsigned char*) const
 T CSOLobbyInvite::SetCachedSize(int) const
 T CSOLobbyInvite::~CSOLobbyInvite()
 T CSOPartyInvite::ByteSize() const
 T CSOPartyInvite::Clear()
 T CSOPartyInvite::GetCachedSize() const
 T CSOPartyInvite::GetMetadata() const
 T CSOPartyInvite::IsInitialized() const
 T CSOPartyInvite::MergeFrom(CSOPartyInvite const&)
 T CSOPartyInvite::New() const
 T CSOPartyInvite::SerializeWithCachedSizesToArray(unsigned char*) const
 T CSOPartyInvite::SetCachedSize(int) const
 T CSOPartyInvite::~CSOPartyInvite()
 T CSOTFDuelSummary::ByteSize() const
 T CSOTFDuelSummary::CSOTFDuelSummary()
 T CSOTFDuelSummary::Clear()
 T CSOTFDuelSummary::GetCachedSize() const
 T CSOTFDuelSummary::GetMetadata() const
 T CSOTFDuelSummary::IsInitialized() const
 T CSOTFDuelSummary::MergeFrom(CSOTFDuelSummary const&)
 T CSOTFDuelSummary::New() const
 T CSOTFDuelSummary::SerializeWithCachedSizesToArray(unsigned char*) const
 T CSOTFDuelSummary::SetCachedSize(int) const
 T CSOTFDuelSummary::~CSOTFDuelSummary()
 T CSOTFGameServerLobby::ByteSize() const
 T CSOTFGameServerLobby::CSOTFGameServerLobby()
 T CSOTFGameServerLobby::Clear()
 T CSOTFGameServerLobby::GetCachedSize() const
 T CSOTFGameServerLobby::GetMetadata() const
 T CSOTFGameServerLobby::IsInitialized() const
 T CSOTFGameServerLobby::MergeFrom(CSOTFGameServerLobby const&)
 T CSOTFGameServerLobby::New() const
 T CSOTFGameServerLobby::SerializeWithCachedSizesToArray(unsigned char*) const
 T CSOTFGameServerLobby::SetCachedSize(int) const
 T CSOTFGameServerLobby::SharedDtor()
 T CSOTFGameServerLobby::~CSOTFGameServerLobby()
 T CSOTFGameServerLobby_State_descriptor()
 T CSOTFLadderData::CSOTFLadderData()
 T CSOTFLadderData::~CSOTFLadderData()
 T CSOTFLadderPlayerStats::ByteSize() const
 T CSOTFLadderPlayerStats::CSOTFLadderPlayerStats()
 T CSOTFLadderPlayerStats::Clear()
 T CSOTFLadderPlayerStats::GetCachedSize() const
 T CSOTFLadderPlayerStats::GetMetadata() const
 T CSOTFLadderPlayerStats::IsInitialized() const
 T CSOTFLadderPlayerStats::MergeFrom(CSOTFLadderPlayerStats const&)
 T CSOTFLadderPlayerStats::New() const
 T CSOTFLadderPlayerStats::SerializeWithCachedSizesToArray(unsigned char*) const
 T CSOTFLadderPlayerStats::SetCachedSize(int) const
 T CSOTFLadderPlayerStats::~CSOTFLadderPlayerStats()
 T CSOTFMapContribution::ByteSize() const
 T CSOTFMapContribution::CSOTFMapContribution()
 T CSOTFMapContribution::Clear()
 T CSOTFMapContribution::GetCachedSize() const
 T CSOTFMapContribution::GetMetadata() const
 T CSOTFMapContribution::IsInitialized() const
 T CSOTFMapContribution::MergeFrom(CSOTFMapContribution const&)
 T CSOTFMapContribution::New() const
 T CSOTFMapContribution::SerializeWithCachedSizesToArray(unsigned char*) const
 T CSOTFMapContribution::SetCachedSize(int) const
 T CSOTFMapContribution::~CSOTFMapContribution()
 T CSOTFMatchResultPlayerStats::ByteSize() const
 T CSOTFMatchResultPlayerStats::Clear()
 T CSOTFMatchResultPlayerStats::GetCachedSize() const
 T CSOTFMatchResultPlayerStats::GetMetadata() const
 T CSOTFMatchResultPlayerStats::IsInitialized() const
 T CSOTFMatchResultPlayerStats::MergeFrom(CSOTFMatchResultPlayerStats const&)
 T CSOTFMatchResultPlayerStats::New() const
 T CSOTFMatchResultPlayerStats::SerializeWithCachedSizesToArray(unsigned char*) const
 T CSOTFMatchResultPlayerStats::SetCachedSize(int) const
 T CSOTFMatchResultPlayerStats::~CSOTFMatchResultPlayerStats()
 T CSOTFParty::ByteSize() const
 T CSOTFParty::CSOTFParty()
 T CSOTFParty::Clear()
 T CSOTFParty::GetCachedSize() const
 T CSOTFParty::GetMetadata() const
 T CSOTFParty::IsInitialized() const
 T CSOTFParty::MergeFrom(CSOTFParty const&)
 T CSOTFParty::New() const
 T CSOTFParty::SerializeWithCachedSizesToArray(unsigned char*) const
 T CSOTFParty::SetCachedSize(int) const
 T CSOTFParty::~CSOTFParty()
 T CSOTFPartyInvite::ByteSize() const
 T CSOTFPartyInvite::Clear()
 T CSOTFPartyInvite::GetCachedSize() const
 T CSOTFPartyInvite::GetMetadata() const
 T CSOTFPartyInvite::IsInitialized() const
 T CSOTFPartyInvite::MergeFrom(CSOTFPartyInvite const&)
 T CSOTFPartyInvite::New() const
 T CSOTFPartyInvite::SerializeWithCachedSizesToArray(unsigned char*) const
 T CSOTFPartyInvite::SetCachedSize(int) const
 T CSOTFPartyInvite::~CSOTFPartyInvite()
 T CSOTFPartyInvite_PartyMember::ByteSize() const
 T CSOTFPartyInvite_PartyMember::Clear()
 T CSOTFPartyInvite_PartyMember::GetCachedSize() const
 T CSOTFPartyInvite_PartyMember::GetMetadata() const
 T CSOTFPartyInvite_PartyMember::IsInitialized() const
 T CSOTFPartyInvite_PartyMember::MergeFrom(CSOTFPartyInvite_PartyMember const&)
 T CSOTFPartyInvite_PartyMember::New() const
 T CSOTFPartyInvite_PartyMember::SerializeWithCachedSizesToArray(unsigned char*) const
 T CSOTFPartyInvite_PartyMember::SetCachedSize(int) const
 T CSOTFPartyInvite_PartyMember::~CSOTFPartyInvite_PartyMember()
 T CSOTFPartyMember::ByteSize() const
 T CSOTFPartyMember::Clear()
 T CSOTFPartyMember::GetCachedSize() const
 T CSOTFPartyMember::GetMetadata() const
 T CSOTFPartyMember::IsInitialized() const
 T CSOTFPartyMember::MergeFrom(CSOTFPartyMember const&)
 T CSOTFPartyMember::New() const
 T CSOTFPartyMember::SerializeWithCachedSizesToArray(unsigned char*) const
 T CSOTFPartyMember::SetCachedSize(int) const
 T CSOTFPartyMember::~CSOTFPartyMember()
 T CSOTFPlayerInfo::ByteSize() const
 T CSOTFPlayerInfo::CSOTFPlayerInfo()
 T CSOTFPlayerInfo::Clear()
 T CSOTFPlayerInfo::GetCachedSize() const
 T CSOTFPlayerInfo::GetMetadata() const
 T CSOTFPlayerInfo::IsInitialized() const
 T CSOTFPlayerInfo::MergeFrom(CSOTFPlayerInfo const&)
 T CSOTFPlayerInfo::New() const
 T CSOTFPlayerInfo::SerializeWithCachedSizesToArray(unsigned char*) const
 T CSOTFPlayerInfo::SetCachedSize(int) const
 T CSOTFPlayerInfo::~CSOTFPlayerInfo()
 T CSOTrackerManager::CSOTrackerManager()
 T CSOTrackerManager::CommitAllChanges()
 T CSOTrackerManager::CommitRecord(CommitRecord_t*) const
 T CSOTrackerManager::CreateAndAddTracker(GCSDK::CSharedObject const*, CSteamID)
 T CSOTrackerManager::EnsureTrackersForPlayer(CSteamID const&)
 T CSOTrackerManager::EnsureTrackersForPlayer(CTFPlayer*)
 T CSOTrackerManager::FireGameEvent(IGameEvent*)
 T CSOTrackerManager::FrameUpdatePreEntityThink()
 T CSOTrackerManager::GetCommitRecord(unsigned long long)
 T CSOTrackerManager::GetTracker(unsigned long long) const
 T CSOTrackerManager::Initialize()
 T CSOTrackerManager::PostSOUpdate(CSteamID const&, GCSDK::ESOCacheEvent)
 T CSOTrackerManager::PreSOUpdate(CSteamID const&, GCSDK::ESOCacheEvent)
 T CSOTrackerManager::RemoveAndDeleteTrackerAtIndex(unsigned short)
 T CSOTrackerManager::RemoveTrackersForSteamID(CSteamID const&)
 T CSOTrackerManager::SOCacheSubscribed(CSteamID const&, GCSDK::ESOCacheEvent)
 T CSOTrackerManager::SOCacheUnsubscribed(CSteamID const&, GCSDK::ESOCacheEvent)
 T CSOTrackerManager::SOCreated(CSteamID const&, GCSDK::CSharedObject const*, GCSDK::ESOCacheEvent)
 T CSOTrackerManager::SODestroyed(CSteamID const&, GCSDK::CSharedObject const*, GCSDK::ESOCacheEvent)
 T CSOTrackerManager::SOUpdated(CSteamID const&, GCSDK::CSharedObject const*, GCSDK::ESOCacheEvent)
 T CSOTrackerManager::Shutdown()
 T CSOTrackerManager::Spew()
 T CSOTrackerManager::~CSOTrackerManager()
 T CSOWarData::ByteSize() const
 T CSOWarData::CSOWarData()
 T CSOWarData::Clear()
 T CSOWarData::GetCachedSize() const
 T CSOWarData::GetMetadata() const
 T CSOWarData::IsInitialized() const
 T CSOWarData::MergeFrom(CSOWarData const&)
 T CSOWarData::New() const
 T CSOWarData::SerializeWithCachedSizesToArray(unsigned char*) const
 T CSOWarData::SetCachedSize(int) const
 T CSOWarData::~CSOWarData()
 T CSave::CSave(CSaveRestoreData*)
 T CSave::DoWriteAll(void const*, datamap_t*, datamap_t*)
 T CSave::EndBlock()
 T CSave::EndLogging()
 T CSave::EntityFlagsSet(int, int)
 T CSave::EntityIndex(CBaseEntity const*)
 T CSave::GetGameSaveRestoreInfo()
 T CSave::GetWritePos() const
 T CSave::IsAsync()
 T CSave::SetWritePos(int)
 T CSave::ShouldSaveField(void const*, typedescription_t*)
 T CSave::StartBlock()
 T CSave::StartBlock(char const*)
 T CSave::StartLogging(char const*)
 T CSave::WriteAll(void const*, datamap_t*)
 T CSave::WriteBasicField(char const*, void*, datamap_t*, typedescription_t*)
 T CSave::WriteBool(bool const*, int)
 T CSave::WriteBool(char const*, bool const*, int)
 T CSave::WriteData(char const*, int)
 T CSave::WriteData(char const*, int, char const*)
 T CSave::WriteEHandle(CHandle<CBaseEntity> const*, int)
 T CSave::WriteEHandle(char const*, CHandle<CBaseEntity> const*, int)
 T CSave::WriteEdictPtr(char const*, edict_t**, int)
 T CSave::WriteEdictPtr(edict_t**, int)
 T CSave::WriteEntityPtr(CBaseEntity**, int)
 T CSave::WriteEntityPtr(char const*, CBaseEntity**, int)
 T CSave::WriteFields(char const*, void const*, datamap_t*, typedescription_t*, int)
 T CSave::WriteFloat(char const*, float const*, int)
 T CSave::WriteFloat(float const*, int)
 T CSave::WriteFunction(datamap_t*, char const*, void (CBaseEntity::***)(inputdata_t&), int)
 T CSave::WriteGameField(char const*, void*, datamap_t*, typedescription_t*)
 T CSave::WriteHeader(char const*, int)
 T CSave::WriteInt(char const*, int const*, int)
 T CSave::WriteInt(int const*, int)
 T CSave::WriteMatrix3x4Worldspace(matrix3x4_t const*, int)
 T CSave::WritePositionVector(Vector const&)
 T CSave::WritePositionVector(Vector const*, int)
 T CSave::WritePositionVector(char const*, Vector const&)
 T CSave::WritePositionVector(char const*, Vector const*, int)
 T CSave::WriteQuaternion(Quaternion const&)
 T CSave::WriteQuaternion(Quaternion const*, int)
 T CSave::WriteQuaternion(char const*, Quaternion const&)
 T CSave::WriteQuaternion(char const*, Quaternion const*, int)
 T CSave::WriteShort(char const*, short const*, int)
 T CSave::WriteShort(short const*, int)
 T CSave::WriteString(char const*)
 T CSave::WriteString(char const*, char const*)
 T CSave::WriteString(char const*, string_t const*, int)
 T CSave::WriteString(string_t const*, int)
 T CSave::WriteTick(char const*, int const*, int)
 T CSave::WriteTick(int const*, int)
 T CSave::WriteTime(char const*, float const*, int)
 T CSave::WriteTime(float const*, int)
 T CSave::WriteVMatrixWorldspace(VMatrix const*, int)
 T CSave::WriteVector(Vector const&)
 T CSave::WriteVector(Vector const*, int)
 T CSave::WriteVector(char const*, Vector const&)
 T CSave::WriteVector(char const*, Vector const*, int)
 T CSave::~CSave()
 T CSaveRestoreBlockSet::AddBlockHandler(ISaveRestoreBlockHandler*)
 T CSaveRestoreBlockSet::CallBlockHandlerRestore(ISaveRestoreBlockHandler*, int, IRestore*, bool)
 T CSaveRestoreBlockSet::GetBlockName()
 T CSaveRestoreBlockSet::PostRestore()
 T CSaveRestoreBlockSet::PostSave()
 T CSaveRestoreBlockSet::PreRestore()
 T CSaveRestoreBlockSet::PreSave(CSaveRestoreData*)
 T CSaveRestoreBlockSet::ReadRestoreHeaders(IRestore*)
 T CSaveRestoreBlockSet::RemoveBlockHandler(ISaveRestoreBlockHandler*)
 T CSaveRestoreBlockSet::Restore(IRestore*, bool)
 T CSaveRestoreBlockSet::Save(ISave*)
 T CSaveRestoreBlockSet::WriteSaveHeaders(ISave*)
 T CSaveRestoreBlockSet::~CSaveRestoreBlockSet()
 T CSceneEntity::Activate()
 T CSceneEntity::AddListManager(CSceneListManager*)
 T CSceneEntity::BuildSortedSpeakEventSoundsPrefetchList(CChoreoScene*, CUtlSymbolTable&, CUtlRBTree<CSceneEntity::SpeakEventSound_t, unsigned short, bool (*)(CSceneEntity::SpeakEventSound_t const&, CSceneEntity::SpeakEventSound_t const&), CUtlMemory<UtlRBTreeNode_t<CSceneEntity::SpeakEventSound_t, unsigned short>, unsigned short> >&, float)
 T CSceneEntity::CSceneEntity()
 T CSceneEntity::CancelPlayback()
 T CSceneEntity::CheckActors()
 T CSceneEntity::CheckEvent(float, CChoreoScene*, CChoreoEvent*)
 T CSceneEntity::CheckInterruptCompletion()
 T CSceneEntity::ClearActivatorTargets()
 T CSceneEntity::ClearInterrupt()
 T CSceneEntity::ClearSceneEvents(CChoreoScene*, bool)
 T CSceneEntity::ClearSchedules(CChoreoScene*)
 T CSceneEntity::DispatchEndExpression(CChoreoScene*, CBaseFlex*, CChoreoEvent*)
 T CSceneEntity::DispatchEndFace(CChoreoScene*, CBaseFlex*, CChoreoEvent*)
 T CSceneEntity::DispatchEndFlexAnimation(CChoreoScene*, CBaseFlex*, CChoreoEvent*)
 T CSceneEntity::DispatchEndGeneric(CChoreoScene*, CBaseFlex*, CChoreoEvent*)
 T CSceneEntity::DispatchEndGesture(CChoreoScene*, CBaseFlex*, CChoreoEvent*)
 T CSceneEntity::DispatchEndInterrupt(CChoreoScene*, CChoreoEvent*)
 T CSceneEntity::DispatchEndLookAt(CChoreoScene*, CBaseFlex*, CChoreoEvent*)
 T CSceneEntity::DispatchEndMoveTo(CChoreoScene*, CBaseFlex*, CChoreoEvent*)
 T CSceneEntity::DispatchEndPermitResponses(CChoreoScene*, CBaseFlex*, CChoreoEvent*)
 T CSceneEntity::DispatchEndSequence(CChoreoScene*, CBaseFlex*, CChoreoEvent*)
 T CSceneEntity::DispatchEndSpeak(CChoreoScene*, CBaseFlex*, CChoreoEvent*)
 T CSceneEntity::DispatchPauseScene(CChoreoScene*, char const*)
 T CSceneEntity::DispatchProcessLoop(CChoreoScene*, CChoreoEvent*)
 T CSceneEntity::DispatchStartExpression(CChoreoScene*, CBaseFlex*, CChoreoEvent*)
 T CSceneEntity::DispatchStartFace(CChoreoScene*, CBaseFlex*, CBaseEntity*, CChoreoEvent*)
 T CSceneEntity::DispatchStartFlexAnimation(CChoreoScene*, CBaseFlex*, CChoreoEvent*)
 T CSceneEntity::DispatchStartGeneric(CChoreoScene*, CBaseFlex*, CChoreoEvent*)
 T CSceneEntity::DispatchStartGesture(CChoreoScene*, CBaseFlex*, CChoreoEvent*)
 T CSceneEntity::DispatchStartInterrupt(CChoreoScene*, CChoreoEvent*)
 T CSceneEntity::DispatchStartLookAt(CChoreoScene*, CBaseFlex*, CBaseEntity*, CChoreoEvent*)
 T CSceneEntity::DispatchStartMoveTo(CChoreoScene*, CBaseFlex*, CBaseEntity*, CChoreoEvent*)
 T CSceneEntity::DispatchStartPermitResponses(CChoreoScene*, CBaseFlex*, CChoreoEvent*)
 T CSceneEntity::DispatchStartSequence(CChoreoScene*, CBaseFlex*, CChoreoEvent*)
 T CSceneEntity::DispatchStartSpeak(CChoreoScene*, CBaseFlex*, CChoreoEvent*, soundlevel_t)
 T CSceneEntity::DispatchStartSubScene(CChoreoScene*, CBaseFlex*, CChoreoEvent*)
 T CSceneEntity::DispatchStopPoint(CChoreoScene*, char const*)
 T CSceneEntity::DoThink(float)
 T CSceneEntity::EndEvent(float, CChoreoScene*, CChoreoEvent*)
 T CSceneEntity::EstimateLength()
 T CSceneEntity::FindNamedActor(CChoreoActor*)
 T CSceneEntity::FindNamedActor(char const*)
 T CSceneEntity::FindNamedActor(int)
 T CSceneEntity::FindNamedEntity(char const*, CBaseEntity*, bool, bool)
 T CSceneEntity::FindNamedEntityClosest(char const*, CBaseEntity*, bool, bool, char const*)
 T CSceneEntity::FindNamedTarget(string_t, bool)
 T CSceneEntity::GenerateSceneForSound(CBaseFlex*, char const*)
 T CSceneEntity::GetDataDescMap()
 T CSceneEntity::GetPostSpeakDelay()
 T CSceneEntity::GetServerClass()
 T CSceneEntity::GetSoundNameForPlayer(CChoreoEvent*, CBasePlayer*, char*, unsigned long, CBaseEntity*)
 T CSceneEntity::InputCancelAtNextInterrupt(inputdata_t&)
 T CSceneEntity::InputCancelPlayback(inputdata_t&)
 T CSceneEntity::InputInterjectResponse(inputdata_t&)
 T CSceneEntity::InputPausePlayback(inputdata_t&)
 T CSceneEntity::InputPitchShiftPlayback(inputdata_t&)
 T CSceneEntity::InputResumePlayback(inputdata_t&)
 T CSceneEntity::InputScriptPlayerDeath(inputdata_t&)
 T CSceneEntity::InputStartPlayback(inputdata_t&)
 T CSceneEntity::InputStopWaitingForActor(inputdata_t&)
 T CSceneEntity::InputTriggerEvent(inputdata_t&)
 T CSceneEntity::InterruptThisScene(CSceneEntity*)
 T CSceneEntity::LoadScene(char const*, IChoreoEventCallback*)
 T CSceneEntity::NotifyOfCompletion(CSceneEntity*)
 T CSceneEntity::OnLoaded()
 T CSceneEntity::OnRestore()
 T CSceneEntity::OnSceneFinished(bool, bool)
 T CSceneEntity::PausePlayback()
 T CSceneEntity::PauseThink()
 T CSceneEntity::PitchShiftPlayback(float)
 T CSceneEntity::Precache()
 T CSceneEntity::PrefetchAnimBlocks(CChoreoScene*)
 T CSceneEntity::ProcessEvent(float, CChoreoScene*, CChoreoEvent*)
 T CSceneEntity::QueueResumePlayback()
 T CSceneEntity::RequestCompletionNotification(CSceneEntity*)
 T CSceneEntity::ResumePlayback()
 T CSceneEntity::SetCurrentTime(float, bool)
 T CSceneEntity::ShouldNetwork() const
 T CSceneEntity::ShouldTransmit(CCheckTransmitInfo const*)
 T CSceneEntity::Spawn()
 T CSceneEntity::SpeakEventSoundLessFunc(CSceneEntity::SpeakEventSound_t const&, CSceneEntity::SpeakEventSound_t const&)
 T CSceneEntity::StartEvent(float, CChoreoScene*, CChoreoEvent*)
 T CSceneEntity::StartPlayback()
 T CSceneEntity::Think()
 T CSceneEntity::UnloadScene()
 T CSceneEntity::UpdateOnRemove()
 T CSceneEntity::UpdateTransmitState()
 T CSceneEntity::YouForgotToImplementOrDeclareServerClass()
 T CSceneEntity::~CSceneEntity()
 T CSceneEventInfo::InitWeight(CBaseFlex*)
 T CSceneEventInfo::UpdateWeight(CBaseFlex*)
 T CSceneFindMarkFilter::GetFilterResult()
 T CSceneFindMarkFilter::ShouldFindEntity(CBaseEntity*)
 T CSceneFindNearestMarkFilter::CSceneFindNearestMarkFilter(CBaseEntity const*, Vector const&, float)
 T CSceneFindNearestMarkFilter::GetFilterResult()
 T CSceneFindNearestMarkFilter::ShouldFindEntity(CBaseEntity*)
 T CSceneListManager::Activate()
 T CSceneListManager::AddListManager(CSceneListManager*)
 T CSceneListManager::GetDataDescMap()
 T CSceneListManager::InputShutdown(inputdata_t&)
 T CSceneListManager::RemoveScene(int)
 T CSceneListManager::SceneStarted(CBaseEntity*)
 T CSceneListManager::~CSceneListManager()
 T CSceneManager::AddSceneEntity(CSceneEntity*)
 T CSceneManager::GetDataDescMap()
 T CSceneManager::IsInInterruptableScenes(CBaseFlex*)
 T CSceneManager::IsRunningScriptedScene(CBaseFlex*, bool)
 T CSceneManager::IsRunningScriptedSceneAndNotPaused(CBaseFlex*, bool)
 T CSceneManager::IsRunningScriptedSceneWithSpeech(CBaseFlex*, bool)
 T CSceneManager::IsRunningScriptedSceneWithSpeechAndNotPaused(CBaseFlex*, bool)
 T CSceneManager::ObjectCaps()
 T CSceneManager::OnClientActive(CBasePlayer*)
 T CSceneManager::PauseActorsScenes(CBaseFlex*, bool)
 T CSceneManager::QueueActorsScenesToResume(CBaseFlex*, bool)
 T CSceneManager::QueueRestoredSound(CBaseFlex*, char const*, soundlevel_t, float)
 T CSceneManager::RemoveActorFromScenes(CBaseFlex*, bool, bool, char const*)
 T CSceneManager::RemoveSceneEntity(CSceneEntity*)
 T CSceneManager::RemoveScenesInvolvingActor(CBaseFlex*)
 T CSceneManager::Spawn()
 T CSceneManager::Think()
 T CSceneManager::~CSceneManager()
 T CSceneTokenProcessor::CurrentToken()
 T CSceneTokenProcessor::Error(char const*, ...)
 T CSceneTokenProcessor::GetToken(bool)
 T CSceneTokenProcessor::TokenAvailable()
 T CSchemaAttributeTypeProtobufBase<CAttribute_DynamicRecipeComponent>::BConvertStringToEconAttributeValue(CEconItemAttributeDefinition const*, char const*, attribute_data_union_t*, bool) const
 T CSchemaAttributeTypeProtobufBase<CAttribute_DynamicRecipeComponent>::ConvertByteStreamToTypedValue(std::string const&, CAttribute_DynamicRecipeComponent*) const
 T CSchemaAttributeTypeProtobufBase<CAttribute_DynamicRecipeComponent>::ConvertEconAttributeValueToString(CEconItemAttributeDefinition const*, attribute_data_union_t const&, std::string*) const
 T CSchemaAttributeTypeProtobufBase<CAttribute_DynamicRecipeComponent>::ConvertTypedValueToByteStream(CAttribute_DynamicRecipeComponent const&, std::string*) const
 T CSchemaAttributeTypeProtobufBase<CAttribute_ItemSlotCriteria>::ConvertByteStreamToTypedValue(std::string const&, CAttribute_ItemSlotCriteria*) const
 T CSchemaAttributeTypeProtobufBase<CAttribute_ItemSlotCriteria>::ConvertTypedValueToByteStream(CAttribute_ItemSlotCriteria const&, std::string*) const
 T CSchemaAttributeTypeProtobufBase<CAttribute_String>::ConvertByteStreamToTypedValue(std::string const&, CAttribute_String*) const
 T CSchemaAttributeTypeProtobufBase<CAttribute_String>::ConvertTypedValueToByteStream(CAttribute_String const&, std::string*) const
 T CSchemaAttributeTypeProtobufBase<CAttribute_WorldItemPlacement>::ConvertByteStreamToTypedValue(std::string const&, CAttribute_WorldItemPlacement*) const
 T CSchemaAttributeTypeProtobufBase<CAttribute_WorldItemPlacement>::ConvertTypedValueToByteStream(CAttribute_WorldItemPlacement const&, std::string*) const
 T CSchemaAttributeType_Default::BConvertStringToEconAttributeValue(CEconItemAttributeDefinition const*, char const*, attribute_data_union_t*, bool) const
 T CSchemaAttributeType_Default::BSupportsGameplayModificationAndNetworking() const
 T CSchemaAttributeType_Default::ConvertByteStreamToTypedValue(std::string const&, unsigned int*) const
 T CSchemaAttributeType_Default::ConvertEconAttributeValueToString(CEconItemAttributeDefinition const*, attribute_data_union_t const&, std::string*) const
 T CSchemaAttributeType_Default::ConvertTypedValueToByteStream(unsigned int const&, std::string*) const
 T CSchemaAttributeType_Default::~CSchemaAttributeType_Default()
 T CSchemaAttributeType_DynamicRecipeComponentDefinedItem::~CSchemaAttributeType_DynamicRecipeComponentDefinedItem()
 T CSchemaAttributeType_Float::BConvertStringToEconAttributeValue(CEconItemAttributeDefinition const*, char const*, attribute_data_union_t*, bool) const
 T CSchemaAttributeType_Float::BSupportsGameplayModificationAndNetworking() const
 T CSchemaAttributeType_Float::ConvertByteStreamToTypedValue(std::string const&, float*) const
 T CSchemaAttributeType_Float::ConvertEconAttributeValueToString(CEconItemAttributeDefinition const*, attribute_data_union_t const&, std::string*) const
 T CSchemaAttributeType_Float::ConvertTypedValueToByteStream(float const&, std::string*) const
 T CSchemaAttributeType_Float::~CSchemaAttributeType_Float()
 T CSchemaAttributeType_ItemSlotCriteria::BConvertStringToEconAttributeValue(CEconItemAttributeDefinition const*, char const*, attribute_data_union_t*, bool) const
 T CSchemaAttributeType_ItemSlotCriteria::ConvertEconAttributeValueToString(CEconItemAttributeDefinition const*, attribute_data_union_t const&, std::string*) const
 T CSchemaAttributeType_ItemSlotCriteria::~CSchemaAttributeType_ItemSlotCriteria()
 T CSchemaAttributeType_String::BConvertStringToEconAttributeValue(CEconItemAttributeDefinition const*, char const*, attribute_data_union_t*, bool) const
 T CSchemaAttributeType_String::ConvertEconAttributeValueToString(CEconItemAttributeDefinition const*, attribute_data_union_t const&, std::string*) const
 T CSchemaAttributeType_String::~CSchemaAttributeType_String()
 T CSchemaAttributeType_UInt64::BConvertStringToEconAttributeValue(CEconItemAttributeDefinition const*, char const*, attribute_data_union_t*, bool) const
 T CSchemaAttributeType_UInt64::ConvertByteStreamToTypedValue(std::string const&, unsigned long long*) const
 T CSchemaAttributeType_UInt64::ConvertEconAttributeValueToString(CEconItemAttributeDefinition const*, attribute_data_union_t const&, std::string*) const
 T CSchemaAttributeType_UInt64::ConvertTypedValueToByteStream(unsigned long long const&, std::string*) const
 T CSchemaAttributeType_UInt64::~CSchemaAttributeType_UInt64()
 T CSchemaAttributeType_WorldItemPlacement::BConvertStringToEconAttributeValue(CEconItemAttributeDefinition const*, char const*, attribute_data_union_t*, bool) const
 T CSchemaAttributeType_WorldItemPlacement::ConvertEconAttributeValueToString(CEconItemAttributeDefinition const*, attribute_data_union_t const&, std::string*) const
 T CSchemaAttributeType_WorldItemPlacement::~CSchemaAttributeType_WorldItemPlacement()
 T CScrambleTeams::CanCallVote(int, char const*, vote_create_failed_t&, int&)
 T CScrambleTeams::ExecuteCommand()
 T CScrambleTeams::GetDisplayString()
 T CScrambleTeams::GetVotePassedString()
 T CScrambleTeams::IsEnabled()
 T CScrambleTeams::ListIssueDetails(CBasePlayer*)
 T CScrambleTeams::~CScrambleTeams()
 T CScriptedTarget::DrawDebugGeometryOverlays()
 T CScriptedTarget::DrawDebugTextOverlays()
 T CScriptedTarget::FindEntity()
 T CScriptedTarget::GetDataDescMap()
 T CScriptedTarget::InputDisable(inputdata_t&)
 T CScriptedTarget::InputEnable(inputdata_t&)
 T CScriptedTarget::ObjectCaps()
 T CScriptedTarget::ScriptThink()
 T CScriptedTarget::Spawn()
 T CScriptedTarget::~CScriptedTarget()
 T CSearchForCover::PostSearch()
 T CSearchForCover::ShouldSearch(CNavArea*, CNavArea*, float)
 T CSearchForCover::operator()(CNavArea*, CNavArea*, float)
 T CSearchForCover::~CSearchForCover()
 T CSelectDefenseAreaForPoint::ShouldSearch(CNavArea*, CNavArea*, float)
 T CSelectDefenseAreaForPoint::operator()(CNavArea*, CNavArea*, float)
 T CSelectDefenseAreaForPoint::~CSelectDefenseAreaForPoint()
 T CSelectPrimaryPatient::Inspect(CKnownEntity const&)
 T CSelectPrimaryPatient::SelectPreferred(CTFPlayer*, CTFPlayer*)
 T CSentryGunSpawner::HasEventChangeAttributes(char const*) const
 T CSentryGunSpawner::Parse(KeyValues*)
 T CSentryGunSpawner::Spawn(Vector const&, CUtlVector<CHandle<CBaseEntity>, CUtlMemory<CHandle<CBaseEntity>, int> >*)
 T CSentryGunSpawner::~CSentryGunSpawner()
 T CServerBenchmark::CalculateBenchmarkCRC()
 T CServerBenchmark::EndBenchmark()
 T CServerBenchmark::GetTickOffset()
 T CServerBenchmark::InternalStartBenchmark(int, float)
 T CServerBenchmark::IsBenchmarkRunning()
 T CServerBenchmark::IsLocalBenchmarkPlayer(CBasePlayer*)
 T CServerBenchmark::OutputResults()
 T CServerBenchmark::RandomFloat(float, float)
 T CServerBenchmark::RandomInt(int, int)
 T CServerBenchmark::StartBenchmark()
 T CServerBenchmark::UpdateBenchmark()
 T CServerBenchmark::UpdateVPhysicsObjects()
 T CServerBenchmark::~CServerBenchmark()
 T CServerBenchmarkHook::CServerBenchmarkHook()
 T CServerBenchmarkHook::EndBenchmark()
 T CServerBenchmarkHook::StartBenchmark()
 T CServerBenchmarkHook::UpdateBenchmark()
 T CServerChoreoTools::GetEntIndex(void*)
 T CServerChoreoTools::GetSceneFile(void*)
 T CServerChoreoTools::NextChoreoEntity(void*)
 T CServerChoreoTools::ReloadSceneFromDisk(int)
 T CServerChoreoTools::~CServerChoreoTools()
 T CServerDLLSharedAppSystems::AddAppSystem(char const*, char const*)
 T CServerDLLSharedAppSystems::Count()
 T CServerDLLSharedAppSystems::GetDllName(int)
 T CServerDLLSharedAppSystems::GetInterfaceName(int)
 T CServerDLLSharedAppSystems::~CServerDLLSharedAppSystems()
 T CServerGameClients::ClientActive(edict_t*, bool)
 T CServerGameClients::ClientCommand(edict_t*, CCommand const&)
 T CServerGameClients::ClientCommandKeyValues(edict_t*, KeyValues*)
 T CServerGameClients::ClientConnect(edict_t*, char const*, char const*, char*, int)
 T CServerGameClients::ClientDisconnect(edict_t*)
 T CServerGameClients::ClientEarPosition(edict_t*, Vector*)
 T CServerGameClients::ClientPutInServer(edict_t*, char const*)
 T CServerGameClients::ClientSettingsChanged(edict_t*)
 T CServerGameClients::ClientSetupVisibility(edict_t*, edict_t*, unsigned char*, int)
 T CServerGameClients::ClientSpawned(edict_t*)
 T CServerGameClients::GetBugReportInfo(char*, int)
 T CServerGameClients::GetPlayerLimits(int&, int&, int&) const
 T CServerGameClients::GetPlayerState(edict_t*)
 T CServerGameClients::GetReplayDelay(edict_t*, int&)
 T CServerGameClients::NetworkIDValidated(char const*, char const*)
 T CServerGameClients::PostClientMessagesSent_DEPRECIATED()
 T CServerGameClients::ProcessUsercmds(edict_t*, bf_read*, int, int, int, bool, bool)
 T CServerGameClients::SetCommandClient(int)
 T CServerGameDLL::AsyncPrepareLevelResources(char*, unsigned long, char*, unsigned long, float*)
 T CServerGameDLL::BuildAdjacentMapList()
 T CServerGameDLL::CanProvideLevel(char*, int)
 T CServerGameDLL::CreateEntityTransitionList(CSaveRestoreData*, int)
 T CServerGameDLL::CreateNetworkStringTables()
 T CServerGameDLL::DLLInit(void* (*)(char const*, int*), void* (*)(char const*, int*), void* (*)(char const*, int*), CGlobalVars*)
 T CServerGameDLL::DLLShutdown()
 T CServerGameDLL::GameFrame(bool)
 T CServerGameDLL::GameInit()
 T CServerGameDLL::GameServerSteamAPIActivated()
 T CServerGameDLL::GameServerSteamAPIShutdown()
 T CServerGameDLL::GameShutdown()
 T CServerGameDLL::GetAllServerClasses()
 T CServerGameDLL::GetGameDescription()
 T CServerGameDLL::GetSaveComment(char*, int, float, float, bool)
 T CServerGameDLL::GetServerBrowserGameData()
 T CServerGameDLL::GetServerBrowserMapOverride()
 T CServerGameDLL::GetServerGCLobby()
 T CServerGameDLL::GetStandardSendProxies()
 T CServerGameDLL::GetTickInterval() const
 T CServerGameDLL::GetUserMessageInfo(int, char*, int, int&)
 T CServerGameDLL::InvalidateMdlCache()
 T CServerGameDLL::IsManualMapChangeOkay(char const**)
 T CServerGameDLL::IsRestoring()
 T CServerGameDLL::LevelInit(char const*, char const*, char const*, char const*, bool, bool)
 T CServerGameDLL::LevelInit_ParseAllEntities(char const*)
 T CServerGameDLL::LevelShutdown()
 T CServerGameDLL::LoadSpecificMOTDMsg(ConVar const&, char const*)
 T CServerGameDLL::OnQueryCvarValueFinished(int, edict_t*, EQueryCvarValueStatus, char const*, char const*)
 T CServerGameDLL::PostInit()
 T CServerGameDLL::PreClientUpdate(bool)
 T CServerGameDLL::PreSave(CSaveRestoreData*)
 T CServerGameDLL::PreSaveGameLoaded(char const*, bool)
 T CServerGameDLL::PrepareLevelResources(char*, unsigned long, char*, unsigned long)
 T CServerGameDLL::ReadRestoreHeaders(CSaveRestoreData*)
 T CServerGameDLL::ReplayInit(void* (*)(char const*, int*))
 T CServerGameDLL::Restore(CSaveRestoreData*, bool)
 T CServerGameDLL::RestoreGlobalState(CSaveRestoreData*)
 T CServerGameDLL::Save(CSaveRestoreData*)
 T CServerGameDLL::SaveGlobalState(CSaveRestoreData*)
 T CServerGameDLL::SaveInit(int)
 T CServerGameDLL::SaveReadFields(CSaveRestoreData*, char const*, void*, datamap_t*, typedescription_t*, int)
 T CServerGameDLL::SaveWriteFields(CSaveRestoreData*, char const*, void*, datamap_t*, typedescription_t*, int)
 T CServerGameDLL::ServerActivate(edict_t*, int, int)
 T CServerGameDLL::SetServerHibernation(bool)
 T CServerGameDLL::ShouldHideServer()
 T CServerGameDLL::Status(void (*)(char const*, ...))
 T CServerGameDLL::Think(bool)
 T CServerGameDLL::WriteSaveHeaders(CSaveRestoreData*)
 T CServerGameEnts::BaseEntityToEdict(CBaseEntity*)
 T CServerGameEnts::CheckTransmit(CCheckTransmitInfo*, unsigned short const*, int)
 T CServerGameEnts::EdictToBaseEntity(edict_t*)
 T CServerGameEnts::FreeContainingEntity(edict_t*)
 T CServerGameEnts::MarkEntitiesAsTouching(edict_t*, edict_t*)
 T CServerGameEnts::SetDebugEdictBase(edict_t*)
 T CServerGameEnts::~CServerGameEnts()
 T CServerGameTags::GetTaggedConVarList(KeyValues*)
 T CServerNetworkProperty::AreaNum() const
 T CServerNetworkProperty::AttachEdict(edict_t*)
 T CServerNetworkProperty::CServerNetworkProperty()
 T CServerNetworkProperty::FireEvent()
 T CServerNetworkProperty::GetBaseEntity()
 T CServerNetworkProperty::GetBaseNetworkable()
 T CServerNetworkProperty::GetClassName() const
 T CServerNetworkProperty::GetDataDescMap()
 T CServerNetworkProperty::GetEdict() const
 T CServerNetworkProperty::GetEntityHandle()
 T CServerNetworkProperty::GetNetworkParent()
 T CServerNetworkProperty::GetPVSInfo()
 T CServerNetworkProperty::GetServerClass()
 T CServerNetworkProperty::Init(CBaseEntity*)
 T CServerNetworkProperty::IsInPVS(CCheckTransmitInfo const*)
 T CServerNetworkProperty::IsMarkedForDeletion() const
 T CServerNetworkProperty::MarkForDeletion()
 T CServerNetworkProperty::RecomputePVSInformation()
 T CServerNetworkProperty::Release()
 T CServerNetworkProperty::SetUpdateInterval(float)
 T CServerNetworkProperty::~CServerNetworkProperty()
 T CServerOnlyEntity::ObjectCaps()
 T CServerOnlyPointEntity::KeyValue(char const*, char const*)
 T CServerRagdollTrigger::EndTouch(CBaseEntity*)
 T CServerRagdollTrigger::Spawn()
 T CServerRagdollTrigger::StartTouch(CBaseEntity*)
 T CServerRagdollTrigger::~CServerRagdollTrigger()
 T CServerReplayImp::UploadOgsData(KeyValues*, bool)
 T CServerReplayImp::~CServerReplayImp()
 T CServerTools::AddMultiDamage(CTakeDamageInfo const&, CBaseEntity*)
 T CServerTools::AddOriginToPVS(Vector const&)
 T CServerTools::ApplyMultiDamage()
 T CServerTools::ClearMultiDamage()
 T CServerTools::CreateEntityByName(char const*)
 T CServerTools::DestroyEntityByHammerId(int)
 T CServerTools::DispatchSpawn(CBaseEntity*)
 T CServerTools::FindEntityByClassname(CBaseEntity*, char const*)
 T CServerTools::FindEntityByClassnameNearest(char const*, Vector const&, float)
 T CServerTools::FindEntityByClassnameWithin(CBaseEntity*, char const*, Vector const&, Vector const&)
 T CServerTools::FindEntityByClassnameWithin(CBaseEntity*, char const*, Vector const&, float)
 T CServerTools::FindEntityByHammerID(int)
 T CServerTools::FindEntityByModel(CBaseEntity*, char const*)
 T CServerTools::FindEntityByName(CBaseEntity*, char const*, CBaseEntity*, CBaseEntity*, CBaseEntity*, IEntityFindFilter*)
 T CServerTools::FindEntityByNameNearest(char const*, Vector const&, float, CBaseEntity*, CBaseEntity*, CBaseEntity*)
 T CServerTools::FindEntityByNameWithin(CBaseEntity*, char const*, Vector const&, float, CBaseEntity*, CBaseEntity*, CBaseEntity*)
 T CServerTools::FindEntityByTarget(CBaseEntity*, char const*)
 T CServerTools::FindEntityClassNearestFacing(Vector const&, Vector const&, float, char*)
 T CServerTools::FindEntityGeneric(CBaseEntity*, char const*, CBaseEntity*, CBaseEntity*, CBaseEntity*)
 T CServerTools::FindEntityGenericNearest(char const*, Vector const&, float, CBaseEntity*, CBaseEntity*, CBaseEntity*)
 T CServerTools::FindEntityGenericWithin(CBaseEntity*, char const*, Vector const&, float, CBaseEntity*, CBaseEntity*, CBaseEntity*)
 T CServerTools::FindEntityInSphere(CBaseEntity*, Vector const&, float)
 T CServerTools::FindEntityNearestFacing(Vector const&, Vector const&, float)
 T CServerTools::FindEntityProcedural(char const*, CBaseEntity*, CBaseEntity*, CBaseEntity*)
 T CServerTools::FirstEntity()
 T CServerTools::GetBaseEntityByEntIndex(int)
 T CServerTools::GetEntityFactoryDictionary()
 T CServerTools::GetEntityList()
 T CServerTools::GetIServerEntity(IClientEntity*)
 T CServerTools::GetKeyValue(CBaseEntity*, char const*, char*, int)
 T CServerTools::GetPlayerFOV(IClientEntity*)
 T CServerTools::GetPlayerPosition(Vector&, QAngle&, IClientEntity*)
 T CServerTools::GetTempEntList()
 T CServerTools::GetTempEntsSystem()
 T CServerTools::IsEntityPtr(void*)
 T CServerTools::IsInNoClipMode(IClientEntity*)
 T CServerTools::MoveEngineViewTo(Vector const&, QAngle const&)
 T CServerTools::NextEntity(CBaseEntity*)
 T CServerTools::RadiusDamage(CTakeDamageInfo const&, Vector const&, float, int, CBaseEntity*)
 T CServerTools::ReloadParticleDefintions(char const*, void const*, int)
 T CServerTools::RemoveEntity(CBaseEntity*)
 T CServerTools::RemoveEntityImmediate(CBaseEntity*)
 T CServerTools::ResetSequence(CBaseAnimating*, int)
 T CServerTools::ResetSequenceInfo(CBaseAnimating*)
 T CServerTools::SetKeyValue(CBaseEntity*, char const*, Vector const&)
 T CServerTools::SetKeyValue(CBaseEntity*, char const*, char const*)
 T CServerTools::SetKeyValue(CBaseEntity*, char const*, float)
 T CServerTools::SetMoveType(CBaseEntity*, int)
 T CServerTools::SetMoveType(CBaseEntity*, int, int)
 T CServerTools::SetPlayerFOV(int, IClientEntity*)
 T CServerTools::SnapPlayerToPosition(Vector const&, QAngle const&, IClientEntity*)
 T CServerTools::~CServerTools()
 T CShadowControl::CShadowControl()
 T CShadowControl::GetDataDescMap()
 T CShadowControl::GetServerClass()
 T CShadowControl::InputSetAngles(inputdata_t&)
 T CShadowControl::KeyValue(char const*, char const*)
 T CShadowControl::ObjectCaps()
 T CShadowControl::Spawn()
 T CShadowControl::UpdateTransmitState()
 T CShadowControl::YouForgotToImplementOrDeclareServerClass()
 T CShadowControl::~CShadowControl()
 T CSheet::~CSheet()
 T CShowZone::Inspect(CNavArea const*)
 T CShower::ObjectCaps()
 T CShower::Spawn()
 T CShower::Think()
 T CShower::Touch(CBaseEntity*)
 T CShower::~CShower()
 T CSimThinkManager::EntityChanged(CBaseEntity*)
 T CSimThinkManager::OnEntityCreated(CBaseEntity*)
 T CSimThinkManager::OnEntityDeleted(CBaseEntity*)
 T CSimThinkManager::~CSimThinkManager()
 T CSimpleBot::CSimpleBot()
 T CSimpleBot::CSimpleBotIntention::CSimpleBotIntention(CSimpleBot*)
 T CSimpleBot::CSimpleBotIntention::FirstContainedResponder() const
 T CSimpleBot::CSimpleBotIntention::NextContainedResponder(INextBotEventResponder*) const
 T CSimpleBot::CSimpleBotIntention::Reset()
 T CSimpleBot::CSimpleBotIntention::Update()
 T CSimpleBot::CSimpleBotIntention::~CSimpleBotIntention()
 T CSimpleBot::GetIntentionInterface() const
 T CSimpleBot::GetLocomotionInterface() const
 T CSimpleBot::Precache()
 T CSimpleBot::Spawn()
 T CSimpleBot::~CSimpleBot()
 T CSimpleBotPathCost::operator()(CNavArea*, CNavArea*, CNavLadder const*, CFuncElevator const*, float) const
 T CSimpleBotRoam::GetName() const
 T CSimpleBotRoam::OnStart(CSimpleBot*, Action<CSimpleBot>*)
 T CSimpleBotRoam::OnStuck(CSimpleBot*)
 T CSimpleBotRoam::Update(CSimpleBot*, float)
 T CSimpleBotRoam::~CSimpleBotRoam()
 T CSimplePhysicsBrush::Spawn()
 T CSimplePhysicsBrush::~CSimplePhysicsBrush()
 T CSimplePhysicsProp::ObjectCaps()
 T CSimplePhysicsProp::Spawn()
 T CSimplePhysicsProp::Use(CBaseEntity*, CBaseEntity*, USE_TYPE, float)
 T CSimplePhysicsProp::~CSimplePhysicsProp()
 T CSingleUserRecipientFilter::~CSingleUserRecipientFilter()
 T CSingleUserReliableRecipientFilter::~CSingleUserReliableRecipientFilter()
 T CSkipKeys::ParseKeyValue(void*, char const*, char const*)
 T CSkipKeys::SetDefaults(void*)
 T CSkyCamera::Activate()
 T CSkyCamera::GetDataDescMap()
 T CSkyCamera::Spawn()
 T CSkyCamera::~CSkyCamera()
 T CSlideshowDisplay::BuildSlideShowImagesList()
 T CSlideshowDisplay::Disable()
 T CSlideshowDisplay::Enable()
 T CSlideshowDisplay::GetDataDescMap()
 T CSlideshowDisplay::GetServerClass()
 T CSlideshowDisplay::InputAddSlides(inputdata_t&)
 T CSlideshowDisplay::InputDisable(inputdata_t&)
 T CSlideshowDisplay::InputEnable(inputdata_t&)
 T CSlideshowDisplay::InputRemoveAllSlides(inputdata_t&)
 T CSlideshowDisplay::InputSetCycleType(inputdata_t&)
 T CSlideshowDisplay::InputSetDisplayText(inputdata_t&)
 T CSlideshowDisplay::InputSetMaxSlideTime(inputdata_t&)
 T CSlideshowDisplay::InputSetMinSlideTime(inputdata_t&)
 T CSlideshowDisplay::InputSetNoListRepeats(inputdata_t&)
 T CSlideshowDisplay::KeyValue(char const*, char const*)
 T CSlideshowDisplay::OnRestore()
 T CSlideshowDisplay::Precache()
 T CSlideshowDisplay::RestoreControlPanels()
 T CSlideshowDisplay::ScreenVisible(bool)
 T CSlideshowDisplay::SetTransmit(CCheckTransmitInfo*, bool)
 T CSlideshowDisplay::Spawn()
 T CSlideshowDisplay::SpawnControlPanels()
 T CSlideshowDisplay::UpdateTransmitState()
 T CSlideshowDisplay::YouForgotToImplementOrDeclareServerClass()
 T CSlideshowDisplay::~CSlideshowDisplay()
 T CSmokeStack::Activate()
 T CSmokeStack::CSmokeStack()
 T CSmokeStack::GetDataDescMap()
 T CSmokeStack::GetServerClass()
 T CSmokeStack::InputToggle(inputdata_t&)
 T CSmokeStack::InputTurnOff(inputdata_t&)
 T CSmokeStack::InputTurnOn(inputdata_t&)
 T CSmokeStack::KeyValue(char const*, char const*)
 T CSmokeStack::Precache()
 T CSmokeStack::RecalcWindVector()
 T CSmokeStack::Spawn()
 T CSmokeStack::YouForgotToImplementOrDeclareServerClass()
 T CSmokeStack::~CSmokeStack()
 T CSniperDot::CSniperDot()
 T CSniperDot::Create(Vector const&, CBaseEntity*, bool)
 T CSniperDot::GetDataDescMap()
 T CSniperDot::GetServerClass()
 T CSniperDot::ObjectCaps()
 T CSniperDot::Update(CBaseEntity*, Vector const&, Vector const&)
 T CSniperDot::YouForgotToImplementOrDeclareServerClass()
 T CSniperDot::~CSniperDot()
 T CSolidSetDefaults::ParseKeyValue(void*, char const*, char const*)
 T CSolidSetDefaults::SetDefaults(void*)
 T CSortedEntityList::ReportEntityList()
 T CSound::FIsScent()
 T CSound::FIsSound()
 T CSound::GetSoundReactOrigin()
 T CSound::Reset()
 T CSoundControllerImp::CheckLoopingSoundsForPlayer(CBasePlayer*)
 T CSoundControllerImp::CommandAdd(CSoundPatch*, float, soundcommands_t, float, float)
 T CSoundControllerImp::CommandClear(CSoundPatch*)
 T CSoundControllerImp::LevelShutdownPreEntity()
 T CSoundControllerImp::OnRestore()
 T CSoundControllerImp::Play(CSoundPatch*, float, float, float)
 T CSoundControllerImp::PreClientUpdate()
 T CSoundControllerImp::ProcessCommand(SoundCommand_t*)
 T CSoundControllerImp::RemoveFromList(CSoundPatch*)
 T CSoundControllerImp::RestoreSoundPatch(CSoundPatch**, IRestore*)
 T CSoundControllerImp::SaveSoundPatch(CSoundPatch*, ISave*)
 T CSoundControllerImp::Shutdown(CSoundPatch*)
 T CSoundControllerImp::SoundChangePitch(CSoundPatch*, float, float)
 T CSoundControllerImp::SoundChangeVolume(CSoundPatch*, float, float)
 T CSoundControllerImp::SoundCreate(IRecipientFilter&, int, EmitSound_t const&)
 T CSoundControllerImp::SoundCreate(IRecipientFilter&, int, char const*)
 T CSoundControllerImp::SoundCreate(IRecipientFilter&, int, int, char const*, float)
 T CSoundControllerImp::SoundCreate(IRecipientFilter&, int, int, char const*, soundlevel_t)
 T CSoundControllerImp::SoundDestroy(CSoundPatch*)
 T CSoundControllerImp::SoundFadeOut(CSoundPatch*, float, bool)
 T CSoundControllerImp::SoundGetName(CSoundPatch*)
 T CSoundControllerImp::SoundGetPitch(CSoundPatch*)
 T CSoundControllerImp::SoundGetVolume(CSoundPatch*)
 T CSoundControllerImp::SoundPlayEnvelope(CSoundPatch*, soundcommands_t, envelopeDescription_t*)
 T CSoundControllerImp::SoundPlayEnvelope(CSoundPatch*, soundcommands_t, envelopePoint_t*, int)
 T CSoundControllerImp::SoundSetCloseCaptionDuration(CSoundPatch*, float)
 T CSoundControllerImp::SystemReset()
 T CSoundControllerImp::SystemUpdate()
 T CSoundControllerImp::~CSoundControllerImp()
 T CSoundEmitterSystem::EmitAmbientSound(int, Vector const&, char const*, float, int, int, float, float*)
 T CSoundEmitterSystem::EmitAmbientSound(int, Vector const&, char const*, float, soundlevel_t, int, int, float, float*)
 T CSoundEmitterSystem::EmitCloseCaption(IRecipientFilter&, int, CSoundParameters const&, EmitSound_t const&)
 T CSoundEmitterSystem::EmitCloseCaption(IRecipientFilter&, int, bool, char const*, CUtlVector<Vector, CUtlMemory<Vector, int> >&, float, bool)
 T CSoundEmitterSystem::EmitSound(IRecipientFilter&, int, EmitSound_t const&)
 T CSoundEmitterSystem::EmitSoundByHandle(IRecipientFilter&, int, EmitSound_t const&, short&)
 T CSoundEmitterSystem::Init()
 T CSoundEmitterSystem::InternalPrecacheWaves(int)
 T CSoundEmitterSystem::LevelInitPostEntity()
 T CSoundEmitterSystem::LevelInitPreEntity()
 T CSoundEmitterSystem::LevelShutdownPostEntity()
 T CSoundEmitterSystem::LogPrecache(char const*)
 T CSoundEmitterSystem::Name()
 T CSoundEmitterSystem::PrecacheScriptSound(char const*)
 T CSoundEmitterSystem::PrefetchScriptSound(char const*)
 T CSoundEmitterSystem::Shutdown()
 T CSoundEmitterSystem::StopSound(int, int, char const*)
 T CSoundEmitterSystem::StopSoundByHandle(int, char const*, short&)
 T CSoundEmitterSystem::TraceEmitSound(char const*, ...)
 T CSoundEmitterSystem::~CSoundEmitterSystem()
 T CSoundEnt::ActiveList()
 T CSoundEnt::ClientSoundIndex(edict_t*)
 T CSoundEnt::GetDataDescMap()
 T CSoundEnt::InitSoundEnt()
 T CSoundEnt::Initialize()
 T CSoundEnt::InsertSound(int, Vector const&, int, float, CBaseEntity*, int, CBaseEntity*)
 T CSoundEnt::ObjectCaps()
 T CSoundEnt::OnRestore()
 T CSoundEnt::Precache()
 T CSoundEnt::ShutdownSoundEnt()
 T CSoundEnt::SoundPointerForIndex(int)
 T CSoundEnt::Spawn()
 T CSoundEnt::Think()
 T CSoundEnt::~CSoundEnt()
 T CSoundEnvelopeController::GetController()
 T CSoundPatch::AddPlayerPost(CBasePlayer*)
 T CSoundPatch::Init(IRecipientFilter*, CBaseEntity*, int, char const*, soundlevel_t)
 T CSoundPatch::ResumeSound()
 T CSoundPatch::StartSound(float)
 T CSoundPatch::Update(float, float)
 T CSoundPatchSaveRestoreOps::Restore(SaveRestoreFieldInfo_t const&, IRestore*)
 T CSoundPatchSaveRestoreOps::Save(SaveRestoreFieldInfo_t const&, ISave*)
 T CSoundscapeSystem::AddSoundscapeEntity(CEnvSoundscape*)
 T CSoundscapeSystem::AddSoundscapeFile(char const*)
 T CSoundscapeSystem::FrameUpdatePostEntityThink()
 T CSoundscapeSystem::GetSoundscapeIndex(char const*)
 T CSoundscapeSystem::Init()
 T CSoundscapeSystem::IsValidIndex(int)
 T CSoundscapeSystem::LevelInitPostEntity()
 T CSoundscapeSystem::LevelInitPreEntity()
 T CSoundscapeSystem::PrintDebugInfo()
 T CSoundscapeSystem::RemoveSoundscapeEntity(CEnvSoundscape*)
 T CSoundscapeSystem::Shutdown()
 T CSoundscapeSystem::~CSoundscapeSystem()
 T CSpawnLocation::FindSpawnLocation(Vector&)
 T CSpawnLocation::Parse(KeyValues*)
 T CSpawnLocation::SelectSpawnArea() const
 T CSpellPickup::GetDataDescMap()
 T CSpellPickup::GetDefaultPowerupModel()
 T CSpellPickup::GetPowerupModel()
 T CSpellPickup::ItemCanBeTouchedByPlayer(CBasePlayer*)
 T CSpellPickup::MyTouch(CBasePlayer*)
 T CSpellPickup::Precache()
 T CSpellPickup::Spawn()
 T CSpellPickup::~CSpellPickup()
 T CSplitString::CSplitString(char const*, char const*)
 T CSplitString::Construct(char const*, char const**, int)
 T CSplitString::~CSplitString()
 T CSpotlightEnd::GetDataDescMap()
 T CSpotlightEnd::GetServerClass()
 T CSpotlightEnd::ObjectCaps()
 T CSpotlightEnd::Spawn()
 T CSpotlightEnd::YouForgotToImplementOrDeclareServerClass()
 T CSpotlightEnd::~CSpotlightEnd()
 T CSprayCan::ObjectCaps()
 T CSprayCan::Precache()
 T CSprayCan::Think()
 T CSprayCan::~CSprayCan()
 T CSprite::Animate(float)
 T CSprite::AnimateThink()
 T CSprite::AnimateUntilDead()
 T CSprite::BeginFadeOutThink()
 T CSprite::CSprite()
 T CSprite::ComputeWorldSpaceSurroundingBox(Vector*, Vector*)
 T CSprite::ExpandThink()
 T CSprite::GetDataDescMap()
 T CSprite::GetServerClass()
 T CSprite::InputColorBlueValue(inputdata_t&)
 T CSprite::InputColorGreenValue(inputdata_t&)
 T CSprite::InputColorRedValue(inputdata_t&)
 T CSprite::InputHideSprite(inputdata_t&)
 T CSprite::InputShowSprite(inputdata_t&)
 T CSprite::InputToggleSprite(inputdata_t&)
 T CSprite::ObjectCaps()
 T CSprite::OnRestore()
 T CSprite::Precache()
 T CSprite::SetAttachment(CBaseEntity*, int)
 T CSprite::SetBrightness(int, float)
 T CSprite::SetModel(char const*)
 T CSprite::SetScale(float, float)
 T CSprite::SetSpriteScale(float)
 T CSprite::SetTransparency(int, int, int, int, int, int)
 T CSprite::ShouldTransmit(CCheckTransmitInfo const*)
 T CSprite::Spawn()
 T CSprite::SpriteCreate(char const*, Vector const&, bool)
 T CSprite::SpriteInit(char const*, Vector const&)
 T CSprite::TurnOff()
 T CSprite::TurnOn()
 T CSprite::UpdateTransmitState()
 T CSprite::Use(CBaseEntity*, CBaseEntity*, USE_TYPE, float)
 T CSprite::YouForgotToImplementOrDeclareServerClass()
 T CSprite::~CSprite()
 T CSpriteOriented::GetServerClass()
 T CSpriteOriented::Spawn()
 T CSpriteOriented::YouForgotToImplementOrDeclareServerClass()
 T CSpriteOriented::~CSpriteOriented()
 T CSpriteTrail::CSpriteTrail()
 T CSpriteTrail::GetDataDescMap()
 T CSpriteTrail::GetServerClass()
 T CSpriteTrail::Precache()
 T CSpriteTrail::SetEndWidth(float)
 T CSpriteTrail::SetLifeTime(float)
 T CSpriteTrail::SetStartWidth(float)
 T CSpriteTrail::SetTextureResolution(float)
 T CSpriteTrail::ShouldTransmit(CCheckTransmitInfo const*)
 T CSpriteTrail::Spawn()
 T CSpriteTrail::SpriteTrailCreate(char const*, Vector const&, bool)
 T CSpriteTrail::YouForgotToImplementOrDeclareServerClass()
 T CSpriteTrail::~CSpriteTrail()
 T CSquadSpawner::GetClass(int)
 T CSquadSpawner::GetClassIcon(int)
 T CSquadSpawner::GetHealth(int)
 T CSquadSpawner::HasAttribute(CTFBot::AttributeType, int)
 T CSquadSpawner::HasEventChangeAttributes(char const*) const
 T CSquadSpawner::IsMiniBoss(int)
 T CSquadSpawner::IsVarious()
 T CSquadSpawner::Parse(KeyValues*)
 T CSquadSpawner::Spawn(Vector const&, CUtlVector<CHandle<CBaseEntity>, CUtlMemory<CHandle<CBaseEntity>, int> >*)
 T CSquadSpawner::~CSquadSpawner()
 T CStdStringSaveRestoreOps::IsEmpty(SaveRestoreFieldInfo_t const&)
 T CStdStringSaveRestoreOps::MakeEmpty(SaveRestoreFieldInfo_t const&)
 T CStdStringSaveRestoreOps::Restore(SaveRestoreFieldInfo_t const&, IRestore*)
 T CStdStringSaveRestoreOps::Save(SaveRestoreFieldInfo_t const&, ISave*)
 T CSteamAPIContext::Init()
 T CSteamID::Render() const
 T CSteamID::Render(unsigned long long)
 T CSteamJet::CSteamJet()
 T CSteamJet::GetDataDescMap()
 T CSteamJet::GetServerClass()
 T CSteamJet::InputToggle(inputdata_t&)
 T CSteamJet::InputTurnOff(inputdata_t&)
 T CSteamJet::InputTurnOn(inputdata_t&)
 T CSteamJet::Precache()
 T CSteamJet::Spawn()
 T CSteamJet::Use(CBaseEntity*, CBaseEntity*, USE_TYPE, float)
 T CSteamJet::YouForgotToImplementOrDeclareServerClass()
 T CSteamJet::~CSteamJet()
 T CSteamWorksGameStatsUploader::AddStatsForUpload(KeyValues*, bool)
 T CSteamWorksGameStatsUploader::CSteamWorksGameStatsUploader()
 T CSteamWorksGameStatsUploader::EndSession()
 T CSteamWorksGameStatsUploader::FireGameEvent(IGameEvent*)
 T CSteamWorksGameStatsUploader::FlushStats()
 T CSteamWorksGameStatsUploader::FrameUpdatePostEntityThink()
 T CSteamWorksGameStatsUploader::FrameUpdatePreEntityThink()
 T CSteamWorksGameStatsUploader::GetInterface()
 T CSteamWorksGameStatsUploader::GetTimeSinceEpoch()
 T CSteamWorksGameStatsUploader::Init()
 T CSteamWorksGameStatsUploader::IsPerFrame()
 T CSteamWorksGameStatsUploader::LevelInitPostEntity()
 T CSteamWorksGameStatsUploader::LevelInitPreEntity()
 T CSteamWorksGameStatsUploader::LevelShutdown()
 T CSteamWorksGameStatsUploader::OnRestore()
 T CSteamWorksGameStatsUploader::OnSave()
 T CSteamWorksGameStatsUploader::ParseKeyValuesAndSendStats(KeyValues*, bool)
 T CSteamWorksGameStatsUploader::PostInit()
 T CSteamWorksGameStatsUploader::PreClientUpdate()
 T CSteamWorksGameStatsUploader::RequestSessionID()
 T CSteamWorksGameStatsUploader::SafeRemoveIfDesired()
 T CSteamWorksGameStatsUploader::ServerAddressToInt()
 T CSteamWorksGameStatsUploader::Shutdown()
 T CSteamWorksGameStatsUploader::StartSession()
 T CSteamWorksGameStatsUploader::Steam_OnSteamSessionInfoClosed(GameStatsSessionClosed_t*)
 T CSteamWorksGameStatsUploader::Steam_OnSteamSessionInfoIssued(GameStatsSessionIssued_t*)
 T CSteamWorksGameStatsUploader::WriteSessionRow()
 T CSteamWorksGameStatsUploader::~CSteamWorksGameStatsUploader()
 T CStrangeEventValidator::BInitEventParams(IEconItemInterface*, CTFPlayer*, CTFPlayer*)
 T CStringPool::Allocate(char const*)
 T CStringPool::CStringPool()
 T CStringPool::Find(char const*)
 T CStringPool::~CStringPool()
 T CStringRegistry::AddString(char const*, int)
 T CStringRegistry::CStringRegistry()
 T CStringRegistry::ClearStrings()
 T CStringRegistry::First() const
 T CStringRegistry::GetIDForKey(unsigned short)
 T CStringRegistry::GetStringForKey(unsigned short)
 T CStringRegistry::GetStringID(char const*)
 T CStringRegistry::GetStringText(int)
 T CStringRegistry::InvalidIndex() const
 T CStringRegistry::Next(unsigned short) const
 T CStringRegistry::~CStringRegistry()
 T CStringTableSaveRestoreOps::IsEmpty(SaveRestoreFieldInfo_t const&)
 T CStringTableSaveRestoreOps::MakeEmpty(SaveRestoreFieldInfo_t const&)
 T CStringTableSaveRestoreOps::Restore(SaveRestoreFieldInfo_t const&, IRestore*)
 T CStringTableSaveRestoreOps::Save(SaveRestoreFieldInfo_t const&, ISave*)
 T CStripWeapons::GetDataDescMap()
 T CStripWeapons::InputStripWeapons(inputdata_t&)
 T CStripWeapons::InputStripWeaponsAndSuit(inputdata_t&)
 T CStripWeapons::~CStripWeapons()
 T CStuckBotEvent::Draw(float)
 T CStudioHdr::CActivityToSequenceMapping::Initialize(CStudioHdr*)
 T CStudioHdr::CActivityToSequenceMapping::NumSequencesForActivity(int)
 T CStudioHdr::CActivityToSequenceMapping::Reinitialize(CStudioHdr*)
 T CStudioHdr::CActivityToSequenceMapping::SelectWeightedSequence(CStudioHdr*, int, int)
 T CStudioHdr::CActivityToSequenceMapping::ValidateAgainst(CStudioHdr const*)
 T CStudioHdr::CStudioHdr()
 T CStudioHdr::CStudioHdr(studiohdr_t const*, IMDLCache*)
 T CStudioHdr::EntryNode(int)
 T CStudioHdr::ExitNode(int)
 T CStudioHdr::GetActivityListVersion()
 T CStudioHdr::GetAttachmentBone(int)
 T CStudioHdr::GetNumAttachments() const
 T CStudioHdr::GetNumIKAutoplayLocks() const
 T CStudioHdr::GetNumPoseParameters() const
 T CStudioHdr::GetNumSeq() const
 T CStudioHdr::GetSharedPoseParameter(int, int) const
 T CStudioHdr::GetTransition(int, int) const
 T CStudioHdr::GroupStudioHdr(int)
 T CStudioHdr::Init(studiohdr_t const*, IMDLCache*)
 T CStudioHdr::RemapSeqBone(int, int) const
 T CStudioHdr::SequencesAvailable() const
 T CStudioHdr::SetActivityListVersion(int)
 T CStudioHdr::SetEventListVersion(int)
 T CStudioHdr::Term()
 T CStudioHdr::iRelativeAnim(int, int) const
 T CStudioHdr::iRelativeSeq(int, int) const
 T CStudioHdr::pAnimStudioHdr(int)
 T CStudioHdr::pAnimdesc(int)
 T CStudioHdr::pAttachment(int)
 T CStudioHdr::pIKAutoplayLock(int)
 T CStudioHdr::pPoseParameter(int)
 T CStudioHdr::pSeqStudioHdr(int)
 T CStudioHdr::pSeqdesc(int)
 T CStudioHdr::pszNodeName(int)
 T CStudioHdr::~CStudioHdr()
 T CSun::Activate()
 T CSun::CSun()
 T CSun::GetDataDescMap()
 T CSun::GetServerClass()
 T CSun::InputSetColor(inputdata_t&)
 T CSun::InputTurnOff(inputdata_t&)
 T CSun::InputTurnOn(inputdata_t&)
 T CSun::UpdateTransmitState()
 T CSun::YouForgotToImplementOrDeclareServerClass()
 T CSun::~CSun()
 T CTEArmorRicochet::GetServerClass()
 T CTEArmorRicochet::YouForgotToImplementOrDeclareServerClass()
 T CTEArmorRicochet::~CTEArmorRicochet()
 T CTEBSPDecal::GetServerClass()
 T CTEBSPDecal::Test(Vector const&, QAngle const&)
 T CTEBSPDecal::YouForgotToImplementOrDeclareServerClass()
 T CTEBSPDecal::~CTEBSPDecal()
 T CTEBaseBeam::CTEBaseBeam(char const*)
 T CTEBaseBeam::GetServerClass()
 T CTEBaseBeam::YouForgotToImplementOrDeclareServerClass()
 T CTEBaseBeam::~CTEBaseBeam()
 T CTEBeamEntPoint::GetServerClass()
 T CTEBeamEntPoint::Test(Vector const&, QAngle const&)
 T CTEBeamEntPoint::YouForgotToImplementOrDeclareServerClass()
 T CTEBeamEntPoint::~CTEBeamEntPoint()
 T CTEBeamEnts::GetServerClass()
 T CTEBeamEnts::Test(Vector const&, QAngle const&)
 T CTEBeamEnts::YouForgotToImplementOrDeclareServerClass()
 T CTEBeamEnts::~CTEBeamEnts()
 T CTEBeamFollow::GetServerClass()
 T CTEBeamFollow::Test(Vector const&, QAngle const&)
 T CTEBeamFollow::YouForgotToImplementOrDeclareServerClass()
 T CTEBeamFollow::~CTEBeamFollow()
 T CTEBeamLaser::GetServerClass()
 T CTEBeamLaser::Test(Vector const&, QAngle const&)
 T CTEBeamLaser::YouForgotToImplementOrDeclareServerClass()
 T CTEBeamLaser::~CTEBeamLaser()
 T CTEBeamPoints::GetServerClass()
 T CTEBeamPoints::Test(Vector const&, QAngle const&)
 T CTEBeamPoints::YouForgotToImplementOrDeclareServerClass()
 T CTEBeamPoints::~CTEBeamPoints()
 T CTEBeamRing::GetServerClass()
 T CTEBeamRing::Test(Vector const&, QAngle const&)
 T CTEBeamRing::YouForgotToImplementOrDeclareServerClass()
 T CTEBeamRing::~CTEBeamRing()
 T CTEBeamRingPoint::GetServerClass()
 T CTEBeamRingPoint::Test(Vector const&, QAngle const&)
 T CTEBeamRingPoint::YouForgotToImplementOrDeclareServerClass()
 T CTEBeamRingPoint::~CTEBeamRingPoint()
 T CTEBeamSpline::GetServerClass()
 T CTEBeamSpline::Test(Vector const&, QAngle const&)
 T CTEBeamSpline::YouForgotToImplementOrDeclareServerClass()
 T CTEBeamSpline::~CTEBeamSpline()
 T CTEBloodSprite::CTEBloodSprite(char const*)
 T CTEBloodSprite::GetServerClass()
 T CTEBloodSprite::Test(Vector const&, QAngle const&)
 T CTEBloodSprite::YouForgotToImplementOrDeclareServerClass()
 T CTEBloodSprite::~CTEBloodSprite()
 T CTEBloodStream::CTEBloodStream(char const*)
 T CTEBloodStream::GetServerClass()
 T CTEBloodStream::Test(Vector const&, QAngle const&)
 T CTEBloodStream::YouForgotToImplementOrDeclareServerClass()
 T CTEBloodStream::~CTEBloodStream()
 T CTEBreakModel::CTEBreakModel(char const*)
 T CTEBreakModel::GetServerClass()
 T CTEBreakModel::Precache()
 T CTEBreakModel::Test(Vector const&, QAngle const&)
 T CTEBreakModel::YouForgotToImplementOrDeclareServerClass()
 T CTEBreakModel::~CTEBreakModel()
 T CTEBubbleTrail::CTEBubbleTrail(char const*)
 T CTEBubbleTrail::GetServerClass()
 T CTEBubbleTrail::Test(Vector const&, QAngle const&)
 T CTEBubbleTrail::YouForgotToImplementOrDeclareServerClass()
 T CTEBubbleTrail::~CTEBubbleTrail()
 T CTEBubbles::CTEBubbles(char const*)
 T CTEBubbles::GetServerClass()
 T CTEBubbles::Test(Vector const&, QAngle const&)
 T CTEBubbles::YouForgotToImplementOrDeclareServerClass()
 T CTEBubbles::~CTEBubbles()
 T CTEClientProjectile::GetServerClass()
 T CTEClientProjectile::Test(Vector const&, QAngle const&)
 T CTEClientProjectile::YouForgotToImplementOrDeclareServerClass()
 T CTEClientProjectile::~CTEClientProjectile()
 T CTEDecal::GetServerClass()
 T CTEDecal::Test(Vector const&, QAngle const&)
 T CTEDecal::YouForgotToImplementOrDeclareServerClass()
 T CTEDecal::~CTEDecal()
 T CTEDust::GetServerClass()
 T CTEDust::Test(Vector const&, QAngle const&)
 T CTEDust::YouForgotToImplementOrDeclareServerClass()
 T CTEDust::~CTEDust()
 T CTEDynamicLight::CTEDynamicLight(char const*)
 T CTEDynamicLight::GetServerClass()
 T CTEDynamicLight::Test(Vector const&, QAngle const&)
 T CTEDynamicLight::YouForgotToImplementOrDeclareServerClass()
 T CTEDynamicLight::~CTEDynamicLight()
 T CTEEffectDispatch::GetServerClass()
 T CTEEffectDispatch::YouForgotToImplementOrDeclareServerClass()
 T CTEEffectDispatch::~CTEEffectDispatch()
 T CTEEnergySplash::GetServerClass()
 T CTEEnergySplash::Test(Vector const&, QAngle const&)
 T CTEEnergySplash::YouForgotToImplementOrDeclareServerClass()
 T CTEEnergySplash::~CTEEnergySplash()
 T CTEExplosion::CTEExplosion(char const*)
 T CTEExplosion::GetServerClass()
 T CTEExplosion::Test(Vector const&, QAngle const&)
 T CTEExplosion::YouForgotToImplementOrDeclareServerClass()
 T CTEExplosion::~CTEExplosion()
 T CTEFireBullets::GetServerClass()
 T CTEFireBullets::YouForgotToImplementOrDeclareServerClass()
 T CTEFireBullets::~CTEFireBullets()
 T CTEFizz::CTEFizz(char const*)
 T CTEFizz::GetServerClass()
 T CTEFizz::Precache()
 T CTEFizz::Test(Vector const&, QAngle const&)
 T CTEFizz::YouForgotToImplementOrDeclareServerClass()
 T CTEFizz::~CTEFizz()
 T CTEFootprintDecal::GetServerClass()
 T CTEFootprintDecal::YouForgotToImplementOrDeclareServerClass()
 T CTEFootprintDecal::~CTEFootprintDecal()
 T CTEGaussExplosion::GetServerClass()
 T CTEGaussExplosion::Test(Vector const&, QAngle const&)
 T CTEGaussExplosion::YouForgotToImplementOrDeclareServerClass()
 T CTEGaussExplosion::~CTEGaussExplosion()
 T CTEGlowSprite::CTEGlowSprite(char const*)
 T CTEGlowSprite::GetServerClass()
 T CTEGlowSprite::Test(Vector const&, QAngle const&)
 T CTEGlowSprite::YouForgotToImplementOrDeclareServerClass()
 T CTEGlowSprite::~CTEGlowSprite()
 T CTEImpact::GetServerClass()
 T CTEImpact::Precache()
 T CTEImpact::YouForgotToImplementOrDeclareServerClass()
 T CTEImpact::~CTEImpact()
 T CTEKillPlayerAttachments::GetServerClass()
 T CTEKillPlayerAttachments::Test(Vector const&, QAngle const&)
 T CTEKillPlayerAttachments::YouForgotToImplementOrDeclareServerClass()
 T CTEKillPlayerAttachments::~CTEKillPlayerAttachments()
 T CTELargeFunnel::GetServerClass()
 T CTELargeFunnel::Test(Vector const&, QAngle const&)
 T CTELargeFunnel::YouForgotToImplementOrDeclareServerClass()
 T CTELargeFunnel::~CTELargeFunnel()
 T CTEMetalSparks::GetServerClass()
 T CTEMetalSparks::Test(Vector const&, QAngle const&)
 T CTEMetalSparks::YouForgotToImplementOrDeclareServerClass()
 T CTEMetalSparks::~CTEMetalSparks()
 T CTEMuzzleFlash::GetServerClass()
 T CTEMuzzleFlash::Test(Vector const&, QAngle const&)
 T CTEMuzzleFlash::YouForgotToImplementOrDeclareServerClass()
 T CTEMuzzleFlash::~CTEMuzzleFlash()
 T CTEPhysicsProp::CTEPhysicsProp(char const*)
 T CTEPhysicsProp::GetServerClass()
 T CTEPhysicsProp::Precache()
 T CTEPhysicsProp::Test(Vector const&, QAngle const&)
 T CTEPhysicsProp::YouForgotToImplementOrDeclareServerClass()
 T CTEPhysicsProp::~CTEPhysicsProp()
 T CTEPlayerAnimEvent::GetServerClass()
 T CTEPlayerAnimEvent::YouForgotToImplementOrDeclareServerClass()
 T CTEPlayerAnimEvent::~CTEPlayerAnimEvent()
 T CTEPlayerDecal::GetServerClass()
 T CTEPlayerDecal::Test(Vector const&, QAngle const&)
 T CTEPlayerDecal::YouForgotToImplementOrDeclareServerClass()
 T CTEPlayerDecal::~CTEPlayerDecal()
 T CTEProjectedDecal::GetServerClass()
 T CTEProjectedDecal::Test(Vector const&, QAngle const&)
 T CTEProjectedDecal::YouForgotToImplementOrDeclareServerClass()
 T CTEProjectedDecal::~CTEProjectedDecal()
 T CTEShatterSurface::CTEShatterSurface(char const*)
 T CTEShatterSurface::GetServerClass()
 T CTEShatterSurface::Test(Vector const&, QAngle const&)
 T CTEShatterSurface::YouForgotToImplementOrDeclareServerClass()
 T CTEShatterSurface::~CTEShatterSurface()
 T CTEShowLine::GetServerClass()
 T CTEShowLine::Test(Vector const&, QAngle const&)
 T CTEShowLine::YouForgotToImplementOrDeclareServerClass()
 T CTEShowLine::~CTEShowLine()
 T CTESmoke::CTESmoke(char const*)
 T CTESmoke::GetServerClass()
 T CTESmoke::Test(Vector const&, QAngle const&)
 T CTESmoke::YouForgotToImplementOrDeclareServerClass()
 T CTESmoke::~CTESmoke()
 T CTESparks::GetServerClass()
 T CTESparks::Test(Vector const&, QAngle const&)
 T CTESparks::YouForgotToImplementOrDeclareServerClass()
 T CTESparks::~CTESparks()
 T CTESprite::CTESprite(char const*)
 T CTESprite::GetServerClass()
 T CTESprite::Precache()
 T CTESprite::Test(Vector const&, QAngle const&)
 T CTESprite::YouForgotToImplementOrDeclareServerClass()
 T CTESprite::~CTESprite()
 T CTESpriteSpray::CTESpriteSpray(char const*)
 T CTESpriteSpray::GetServerClass()
 T CTESpriteSpray::Test(Vector const&, QAngle const&)
 T CTESpriteSpray::YouForgotToImplementOrDeclareServerClass()
 T CTESpriteSpray::~CTESpriteSpray()
 T CTETFBlood::GetServerClass()
 T CTETFBlood::Test(Vector const&, QAngle const&)
 T CTETFBlood::YouForgotToImplementOrDeclareServerClass()
 T CTETFBlood::~CTETFBlood()
 T CTETFExplosion::GetServerClass()
 T CTETFExplosion::YouForgotToImplementOrDeclareServerClass()
 T CTETFExplosion::~CTETFExplosion()
 T CTETFParticleEffect::GetServerClass()
 T CTETFParticleEffect::YouForgotToImplementOrDeclareServerClass()
 T CTETFParticleEffect::~CTETFParticleEffect()
 T CTEWorldDecal::GetServerClass()
 T CTEWorldDecal::Test(Vector const&, QAngle const&)
 T CTEWorldDecal::YouForgotToImplementOrDeclareServerClass()
 T CTEWorldDecal::~CTEWorldDecal()
 T CTFAmmoPack::Create(Vector const&, QAngle const&, CBaseEntity*, char const*)
 T CTFAmmoPack::DropSoundThink()
 T CTFAmmoPack::FlyThink()
 T CTFAmmoPack::GetDataDescMap()
 T CTFAmmoPack::GetServerClass()
 T CTFAmmoPack::GiveAmmo(int, int)
 T CTFAmmoPack::InitWeaponDrop(CTFPlayer*, CTFWeaponBase*, int, bool, bool)
 T CTFAmmoPack::MakeHolidayPack()
 T CTFAmmoPack::PackTouch(CBaseEntity*)
 T CTFAmmoPack::PhysicsSolidMaskForEntity() const
 T CTFAmmoPack::Precache()
 T CTFAmmoPack::SetBonusScale(float)
 T CTFAmmoPack::SetInitialVelocity(Vector&)
 T CTFAmmoPack::Spawn()
 T CTFAmmoPack::YouForgotToImplementOrDeclareServerClass()
 T CTFAmmoPack::~CTFAmmoPack()
 T CTFArcherProxy::Precache()
 T CTFArcherProxy::SelectTarget()
 T CTFArcherProxy::ShootArrowAt(CBaseEntity*)
 T CTFArcherProxy::Spawn()
 T CTFArcherProxy::Update()
 T CTFArcherProxy::~CTFArcherProxy()
 T CTFBall_Ornament::ApplyBallImpactEffectOnVictim(CBaseEntity*)
 T CTFBall_Ornament::Explode(CGameTrace*, int)
 T CTFBall_Ornament::GetBallModelName() const
 T CTFBall_Ornament::GetBallViewModelName() const
 T CTFBall_Ornament::GetServerClass()
 T CTFBall_Ornament::GetWeaponID() const
 T CTFBall_Ornament::IsAllowedToExplode()
 T CTFBall_Ornament::PipebombTouch(CBaseEntity*)
 T CTFBall_Ornament::Precache()
 T CTFBall_Ornament::VPhysicsCollision(int, gamevcollisionevent_t*)
 T CTFBall_Ornament::VPhysicsCollisionThink()
 T CTFBall_Ornament::YouForgotToImplementOrDeclareServerClass()
 T CTFBall_Ornament::~CTFBall_Ornament()
 T CTFBaseBoss::BossThink()
 T CTFBaseBoss::CTFBaseBoss()
 T CTFBaseBoss::Event_Killed(CTakeDamageInfo const&)
 T CTFBaseBoss::GetCurrencyValue()
 T CTFBaseBoss::GetDataDescMap()
 T CTFBaseBoss::GetLocomotionInterface() const
 T CTFBaseBoss::GetServerClass()
 T CTFBaseBoss::InputAddHealth(inputdata_t&)
 T CTFBaseBoss::InputDisable(inputdata_t&)
 T CTFBaseBoss::InputEnable(inputdata_t&)
 T CTFBaseBoss::InputRemoveHealth(inputdata_t&)
 T CTFBaseBoss::InputSetHealth(inputdata_t&)
 T CTFBaseBoss::InputSetMaxHealth(inputdata_t&)
 T CTFBaseBoss::InputSetSpeed(inputdata_t&)
 T CTFBaseBoss::IsRemovedOnReset() const
 T CTFBaseBoss::ModifyDamage(CTakeDamageInfo*) const
 T CTFBaseBoss::OnTakeDamage(CTakeDamageInfo const&)
 T CTFBaseBoss::OnTakeDamage_Alive(CTakeDamageInfo const&)
 T CTFBaseBoss::Precache()
 T CTFBaseBoss::ResolvePlayerCollision(CTFPlayer*)
 T CTFBaseBoss::Spawn()
 T CTFBaseBoss::Touch(CBaseEntity*)
 T CTFBaseBoss::UpdateCollisionBounds()
 T CTFBaseBoss::UpdateOnRemove()
 T CTFBaseBoss::UpdateTransmitState()
 T CTFBaseBoss::YouForgotToImplementOrDeclareServerClass()
 T CTFBaseBoss::~CTFBaseBoss()
 T CTFBaseBossLocomotion::FaceTowards(Vector const&)
 T CTFBaseBossLocomotion::GetMaxJumpHeight() const
 T CTFBaseBossLocomotion::GetRunSpeed() const
 T CTFBaseBossLocomotion::GetStepHeight() const
 T CTFBaseBossLocomotion::~CTFBaseBossLocomotion()
 T CTFBaseProjectile::CTFBaseProjectile()
 T CTFBaseProjectile::Create(char const*, Vector const&, QAngle const&, CBaseEntity*, float, short, char const*, CBaseEntity*, bool, Vector, Vector)
 T CTFBaseProjectile::FlyThink()
 T CTFBaseProjectile::GetAssistant()
 T CTFBaseProjectile::GetDamage()
 T CTFBaseProjectile::GetDamageForce()
 T CTFBaseProjectile::GetDamageType()
 T CTFBaseProjectile::GetDataDescMap()
 T CTFBaseProjectile::GetGravity()
 T CTFBaseProjectile::GetProjectileModelName()
 T CTFBaseProjectile::GetProjectileType()
 T CTFBaseProjectile::GetScorer()
 T CTFBaseProjectile::GetServerClass()
 T CTFBaseProjectile::GetWeaponID() const
 T CTFBaseProjectile::PhysicsSolidMaskForEntity() const
 T CTFBaseProjectile::Precache()
 T CTFBaseProjectile::ProjectileTouch(CBaseEntity*)
 T CTFBaseProjectile::SetCritical(bool)
 T CTFBaseProjectile::SetDamage(float)
 T CTFBaseProjectile::SetLauncher(CBaseEntity*)
 T CTFBaseProjectile::SetScorer(CBaseEntity*)
 T CTFBaseProjectile::Spawn()
 T CTFBaseProjectile::YouForgotToImplementOrDeclareServerClass()
 T CTFBaseProjectile::~CTFBaseProjectile()
 T CTFBaseRocket::CTFBaseRocket()
 T CTFBaseRocket::CheckForStunOnImpact(CTFPlayer*)
 T CTFBaseRocket::Create(CBaseEntity*, char const*, Vector const&, QAngle const&, CBaseEntity*)
 T CTFBaseRocket::Destroy(bool, bool)
 T CTFBaseRocket::Explode(CGameTrace*, CBaseEntity*)
 T CTFBaseRocket::GetCustomDamageType() const
 T CTFBaseRocket::GetDamage()
 T CTFBaseRocket::GetDamageCustom()
 T CTFBaseRocket::GetDamageForceScale()
 T CTFBaseRocket::GetDamageType()
 T CTFBaseRocket::GetDataDescMap()
 T CTFBaseRocket::GetEnemy()
 T CTFBaseRocket::GetRadius()
 T CTFBaseRocket::GetServerClass()
 T CTFBaseRocket::GetStunLevel()
 T CTFBaseRocket::GetWeaponID() const
 T CTFBaseRocket::IncrementDeflected()
 T CTFBaseRocket::IsDestroyable()
 T CTFBaseRocket::PhysicsSolidMaskForEntity() const
 T CTFBaseRocket::Precache()
 T CTFBaseRocket::RocketTouch(CBaseEntity*)
 T CTFBaseRocket::SetDamage(float)
 T CTFBaseRocket::SetDamageForceScale(float)
 T CTFBaseRocket::SetLauncher(CBaseEntity*)
 T CTFBaseRocket::ShouldNotDetonate()
 T CTFBaseRocket::Spawn()
 T CTFBaseRocket::YouForgotToImplementOrDeclareServerClass()
 T CTFBaseRocket::~CTFBaseRocket()
 T CTFBat::BatDeflects()
 T CTFBat::GetServerClass()
 T CTFBat::GetWeaponID() const
 T CTFBat::PlayDeflectionSound(bool)
 T CTFBat::Smack()
 T CTFBat::YouForgotToImplementOrDeclareServerClass()
 T CTFBat::~CTFBat()
 T CTFBat_Fish::GetServerClass()
 T CTFBat_Fish::GetWeaponID() const
 T CTFBat_Fish::YouForgotToImplementOrDeclareServerClass()
 T CTFBat_Fish::~CTFBat_Fish()
 T CTFBat_Giftwrap::CreateBall()
 T CTFBat_Giftwrap::GetBallViewModelName() const
 T CTFBat_Giftwrap::GetEffectLabelText()
 T CTFBat_Giftwrap::GetServerClass()
 T CTFBat_Giftwrap::GetWeaponID() const
 T CTFBat_Giftwrap::Spawn()
 T CTFBat_Giftwrap::YouForgotToImplementOrDeclareServerClass()
 T CTFBat_Giftwrap::~CTFBat_Giftwrap()
 T CTFBat_Wood::BatDeflects()
 T CTFBat_Wood::CanCreateBall(CTFPlayer*)
 T CTFBat_Wood::CreateBall()
 T CTFBat_Wood::GetBallDynamics(Vector&, QAngle&, Vector&, Vector&, CTFPlayer*)
 T CTFBat_Wood::GetBallViewModelName() const
 T CTFBat_Wood::GetEffectBarAmmo()
 T CTFBat_Wood::GetServerClass()
 T CTFBat_Wood::GetWeaponID() const
 T CTFBat_Wood::InternalGetEffectBarRechargeTime()
 T CTFBat_Wood::LaunchBall()
 T CTFBat_Wood::LaunchBallThink()
 T CTFBat_Wood::PickedUpBall()
 T CTFBat_Wood::SecondaryAttack()
 T CTFBat_Wood::SendWeaponAnim(int)
 T CTFBat_Wood::YouForgotToImplementOrDeclareServerClass()
 T CTFBat_Wood::~CTFBat_Wood()
 T CTFBonesaw::Activate()
 T CTFBonesaw::DefaultDeploy(char*, char*, int, char*)
 T CTFBonesaw::DoMeleeDamage(CBaseEntity*, CGameTrace&)
 T CTFBonesaw::GetBoneSawSpeedMod()
 T CTFBonesaw::GetServerClass()
 T CTFBonesaw::GetWeaponID() const
 T CTFBonesaw::SecondaryAttack()
 T CTFBonesaw::YouForgotToImplementOrDeclareServerClass()
 T CTFBonesaw::~CTFBonesaw()
 T CTFBot* NextBotCreatePlayerBot<CTFBot>(char const*, bool)
 T CTFBot::AccumulateSniperSpots()
 T CTFBot::AddEventChangeAttributes(CTFBot::EventChangeAttributes_t const*)
 T CTFBot::AddItem(char const*)
 T CTFBot::AddTag(char const*)
 T CTFBot::AllocatePlayerEntity(edict_t*, char const*)
 T CTFBot::AvoidPlayers(CUserCmd*)
 T CTFBot::CTFBot()
 T CTFBot::CTFBotIntention::CTFBotIntention(CTFBot*)
 T CTFBot::CTFBotIntention::FirstContainedResponder() const
 T CTFBot::CTFBotIntention::NextContainedResponder(INextBotEventResponder*) const
 T CTFBot::CTFBotIntention::Reset()
 T CTFBot::CTFBotIntention::Update()
 T CTFBot::CTFBotIntention::~CTFBotIntention()
 T CTFBot::ChangeTeam(int, bool, bool)
 T CTFBot::ClearAttentionFocus()
 T CTFBot::ClearMyControlPoint()
 T CTFBot::DelayedThreatNotice(CHandle<CBaseEntity>, float)
 T CTFBot::DeleteSquad()
 T CTFBot::DisguiseAsMemberOfEnemyTeam()
 T CTFBot::DrawDebugTextOverlays()
 T CTFBot::EquipBestWeaponForThreat(CKnownEntity const*)
 T CTFBot::EquipLongRangeWeapon()
 T CTFBot::EquipRequiredWeapon()
 T CTFBot::EventChangeAttributes_t::EventChangeAttributes_t()
 T CTFBot::EventChangeAttributes_t::operator=(CTFBot::EventChangeAttributes_t const&)
 T CTFBot::EventChangeAttributes_t::~EventChangeAttributes_t()
 T CTFBot::Event_Killed(CTakeDamageInfo const&)
 T CTFBot::FireGameEvent(IGameEvent*)
 T CTFBot::ForgetSpy(CTFPlayer*)
 T CTFBot::GetAllowedTauntPartnerTeam() const
 T CTFBot::GetBodyInterface() const
 T CTFBot::GetBotType() const
 T CTFBot::GetClosestHumanLookingAtMe(int) const
 T CTFBot::GetDesiredAttackRange() const
 T CTFBot::GetDesiredPathLookAheadRange() const
 T CTFBot::GetEventChangeAttributes(char const*) const
 T CTFBot::GetFlagCaptureZone() const
 T CTFBot::GetFlagToFetch() const
 T CTFBot::GetIntentionInterface() const
 T CTFBot::GetLastKnownArea() const
 T CTFBot::GetLocomotionInterface() const
 T CTFBot::GetMaxAttackRange() const
 T CTFBot::GetMyControlPoint() const
 T CTFBot::GetNearestKnownSappableTarget()
 T CTFBot::GetNextSpawnClassname() const
 T CTFBot::GetThreatDanger(CBaseCombatCharacter*) const
 T CTFBot::GetTimeLeftToCapture() const
 T CTFBot::GetUberDeployDelayDuration()
 T CTFBot::GetUberHealthThreshold()
 T CTFBot::GetVisionInterface() const
 T CTFBot::HasTag(char const*)
 T CTFBot::InitClass()
 T CTFBot::IsAllowedToPickUpFlag() const
 T CTFBot::IsAmmoFull() const
 T CTFBot::IsAmmoLow() const
 T CTFBot::IsAnyPointBeingCaptured() const
 T CTFBot::IsAttentionFocused() const
 T CTFBot::IsAttentionFocusedOn(CBaseEntity*) const
 T CTFBot::IsBarrageAndReloadWeapon(CTFWeaponBase*) const
 T CTFBot::IsCombatWeapon(CTFWeaponBase*) const
 T CTFBot::IsContinuousFireWeapon(CTFWeaponBase*) const
 T CTFBot::IsDebugFilterMatch(char const*) const
 T CTFBot::IsDormantWhenDead() const
 T CTFBot::IsEntityBetweenTargetAndSelf(CBaseEntity*, CBaseEntity*)
 T CTFBot::IsExplosiveProjectileWeapon(CTFWeaponBase*) const
 T CTFBot::IsHitScanWeapon(CTFWeaponBase*) const
 T CTFBot::IsKnownSpy(CTFPlayer*) const
 T CTFBot::IsLineOfFireClear(CBaseEntity*) const
 T CTFBot::IsLineOfFireClear(Vector const&) const
 T CTFBot::IsLineOfFireClear(Vector const&, CBaseEntity*) const
 T CTFBot::IsLineOfFireClear(Vector const&, Vector const&) const
 T CTFBot::IsNearPoint(CTeamControlPoint*) const
 T CTFBot::IsPointBeingCaptured(CTeamControlPoint*) const
 T CTFBot::IsSuspectedSpy(CTFPlayer*)
 T CTFBot::IsWeaponRestricted(CTFWeaponBase*) const
 T CTFBot::JoinSquad(CTFBotSquad*)
 T CTFBot::LeaveSquad()
 T CTFBot::ModifyMaxHealth(int, bool, bool)
 T CTFBot::OnEventChangeAttributes(CTFBot::EventChangeAttributes_t const*)
 T CTFBot::OnWeaponFired(CBaseCombatCharacter*, CBaseCombatWeapon*)
 T CTFBot::OpportunisticallyUseWeaponAbilities()
 T CTFBot::PhysicsSimulate()
 T CTFBot::PopRequiredWeapon()
 T CTFBot::PressAltFireButton(float)
 T CTFBot::PressFireButton(float)
 T CTFBot::PressSpecialFireButton(float)
 T CTFBot::PushRequiredWeapon(CTFWeaponBase*)
 T CTFBot::RealizeSpy(CTFPlayer*)
 T CTFBot::RemoveTag(char const*)
 T CTFBot::SelectPointToCapture(CUtlVector<CTeamControlPoint*, CUtlMemory<CTeamControlPoint*, int> >*) const
 T CTFBot::SelectRandomReachableEnemy()
 T CTFBot::SelectReachableObjects(CUtlVector<CHandle<CBaseEntity>, CUtlMemory<CHandle<CBaseEntity>, int> > const&, CUtlVector<CHandle<CBaseEntity>, CUtlMemory<CHandle<CBaseEntity>, int> >*, INextBotFilter const&, CNavArea*, float) const
 T CTFBot::SetAttentionFocus(CBaseEntity*)
 T CTFBot::SetFlagTarget(CCaptureFlag*)
 T CTFBot::SetMission(CTFBot::MissionType, bool)
 T CTFBot::SetupSniperSpotAccumulation()
 T CTFBot::ShouldAutoJump()
 T CTFBot::ShouldFireCompressionBlast()
 T CTFBot::ShouldGib(CTakeDamageInfo const&)
 T CTFBot::ShouldTransmit(CCheckTransmitInfo const*)
 T CTFBot::Spawn()
 T CTFBot::StartIdleSound()
 T CTFBot::StopSuspectingSpy(CTFPlayer*)
 T CTFBot::SuspectSpy(CTFPlayer*)
 T CTFBot::SuspectedSpyInfo_t::IsCurrentlySuspected()
 T CTFBot::SuspectedSpyInfo_t::TestForRealizing()
 T CTFBot::Touch(CBaseEntity*)
 T CTFBot::TransientlyConsistentRandomValue(float, int) const
 T CTFBot::UpdateDelayedThreatNotices()
 T CTFBot::UpdateLookingAroundForEnemies()
 T CTFBot::UpdateLookingAroundForIncomingPlayers(bool)
 T CTFBot::UpdateOnRemove()
 T CTFBot::~CTFBot()
 T CTFBotActionPoint::Activate()
 T CTFBotActionPoint::GetDataDescMap()
 T CTFBotActionPoint::IsWithinRange(CBaseEntity*)
 T CTFBotActionPoint::ReachedActionPoint(CTFBot*)
 T CTFBotActionPoint::~CTFBotActionPoint()
 T CTFBotAttack::CTFBotAttack()
 T CTFBotAttack::GetName() const
 T CTFBotAttack::OnMoveToFailure(CTFBot*, Path const*, MoveToFailureType)
 T CTFBotAttack::OnMoveToSuccess(CTFBot*, Path const*)
 T CTFBotAttack::OnStart(CTFBot*, Action<CTFBot>*)
 T CTFBotAttack::OnStuck(CTFBot*)
 T CTFBotAttack::ShouldHurry(INextBot const*) const
 T CTFBotAttack::ShouldRetreat(INextBot const*) const
 T CTFBotAttack::Update(CTFBot*, float)
 T CTFBotAttack::~CTFBotAttack()
 T CTFBotAttackFlagDefenders::CTFBotAttackFlagDefenders(float)
 T CTFBotAttackFlagDefenders::GetName() const
 T CTFBotAttackFlagDefenders::OnStart(CTFBot*, Action<CTFBot>*)
 T CTFBotAttackFlagDefenders::Update(CTFBot*, float)
 T CTFBotAttackFlagDefenders::~CTFBotAttackFlagDefenders()
 T CTFBotBody::GetHeadAimTrackingInterval() const
 T CTFBotBody::~CTFBotBody()
 T CTFBotCapturePoint::GetName() const
 T CTFBotCapturePoint::OnMoveToFailure(CTFBot*, Path const*, MoveToFailureType)
 T CTFBotCapturePoint::OnMoveToSuccess(CTFBot*, Path const*)
 T CTFBotCapturePoint::OnResume(CTFBot*, Action<CTFBot>*)
 T CTFBotCapturePoint::OnStart(CTFBot*, Action<CTFBot>*)
 T CTFBotCapturePoint::OnStuck(CTFBot*)
 T CTFBotCapturePoint::OnTerritoryCaptured(CTFBot*, int)
 T CTFBotCapturePoint::OnTerritoryContested(CTFBot*, int)
 T CTFBotCapturePoint::OnTerritoryLost(CTFBot*, int)
 T CTFBotCapturePoint::ShouldHurry(INextBot const*) const
 T CTFBotCapturePoint::ShouldRetreat(INextBot const*) const
 T CTFBotCapturePoint::Update(CTFBot*, float)
 T CTFBotCapturePoint::~CTFBotCapturePoint()
 T CTFBotController::GetDataDescMap()
 T CTFBotController::InputBotAddCommandAttackEntity(inputdata_t&)
 T CTFBotController::InputBotAddCommandDefend(inputdata_t&)
 T CTFBotController::InputBotAddCommandMoveToEntity(inputdata_t&)
 T CTFBotController::InputBotAddCommandSwitchWeapon(inputdata_t&)
 T CTFBotController::InputBotClearQueue(inputdata_t&)
 T CTFBotController::InputBotPreventMovement(inputdata_t&)
 T CTFBotController::InputBotSetIgnoreHumans(inputdata_t&)
 T CTFBotController::InputCreateBot(inputdata_t&)
 T CTFBotController::InputRespawnBot(inputdata_t&)
 T CTFBotController::~CTFBotController()
 T CTFBotDead::GetName() const
 T CTFBotDead::OnStart(CTFBot*, Action<CTFBot>*)
 T CTFBotDead::Update(CTFBot*, float)
 T CTFBotDead::~CTFBotDead()
 T CTFBotDefendPoint::GetName() const
 T CTFBotDefendPoint::OnContact(CTFBot*, CBaseEntity*, CGameTrace*)
 T CTFBotDefendPoint::OnMoveToFailure(CTFBot*, Path const*, MoveToFailureType)
 T CTFBotDefendPoint::OnMoveToSuccess(CTFBot*, Path const*)
 T CTFBotDefendPoint::OnResume(CTFBot*, Action<CTFBot>*)
 T CTFBotDefendPoint::OnStart(CTFBot*, Action<CTFBot>*)
 T CTFBotDefendPoint::OnStuck(CTFBot*)
 T CTFBotDefendPoint::OnTerritoryCaptured(CTFBot*, int)
 T CTFBotDefendPoint::OnTerritoryContested(CTFBot*, int)
 T CTFBotDefendPoint::OnTerritoryLost(CTFBot*, int)
 T CTFBotDefendPoint::SelectAreaToDefendFrom(CTFBot*)
 T CTFBotDefendPoint::Update(CTFBot*, float)
 T CTFBotDefendPoint::~CTFBotDefendPoint()
 T CTFBotDefendPointBlockCapture::GetName() const
 T CTFBotDefendPointBlockCapture::IsPointSafe(CTFBot*)
 T CTFBotDefendPointBlockCapture::OnMoveToFailure(CTFBot*, Path const*, MoveToFailureType)
 T CTFBotDefendPointBlockCapture::OnMoveToSuccess(CTFBot*, Path const*)
 T CTFBotDefendPointBlockCapture::OnResume(CTFBot*, Action<CTFBot>*)
 T CTFBotDefendPointBlockCapture::OnStart(CTFBot*, Action<CTFBot>*)
 T CTFBotDefendPointBlockCapture::OnStuck(CTFBot*)
 T CTFBotDefendPointBlockCapture::OnTerritoryCaptured(CTFBot*, int)
 T CTFBotDefendPointBlockCapture::OnTerritoryContested(CTFBot*, int)
 T CTFBotDefendPointBlockCapture::OnTerritoryLost(CTFBot*, int)
 T CTFBotDefendPointBlockCapture::ShouldHurry(INextBot const*) const
 T CTFBotDefendPointBlockCapture::ShouldRetreat(INextBot const*) const
 T CTFBotDefendPointBlockCapture::Update(CTFBot*, float)
 T CTFBotDefendPointBlockCapture::~CTFBotDefendPointBlockCapture()
 T CTFBotDeliverFlag::GetName() const
 T CTFBotDeliverFlag::OnContact(CTFBot*, CBaseEntity*, CGameTrace*)
 T CTFBotDeliverFlag::OnEnd(CTFBot*, Action<CTFBot>*)
 T CTFBotDeliverFlag::OnStart(CTFBot*, Action<CTFBot>*)
 T CTFBotDeliverFlag::ShouldAttack(INextBot const*, CKnownEntity const*) const
 T CTFBotDeliverFlag::ShouldHurry(INextBot const*) const
 T CTFBotDeliverFlag::ShouldRetreat(INextBot const*) const
 T CTFBotDeliverFlag::Update(CTFBot*, float)
 T CTFBotDeliverFlag::UpgradeOverTime(CTFBot*)
 T CTFBotDeliverFlag::~CTFBotDeliverFlag()
 T CTFBotDestroyEnemySentry::ComputeCornerAttackSpot(CTFBot*)
 T CTFBotDestroyEnemySentry::ComputeSafeAttackSpot(CTFBot*)
 T CTFBotDestroyEnemySentry::GetName() const
 T CTFBotDestroyEnemySentry::IsPossible(CTFBot*)
 T CTFBotDestroyEnemySentry::OnResume(CTFBot*, Action<CTFBot>*)
 T CTFBotDestroyEnemySentry::OnStart(CTFBot*, Action<CTFBot>*)
 T CTFBotDestroyEnemySentry::ShouldAttack(INextBot const*, CKnownEntity const*) const
 T CTFBotDestroyEnemySentry::ShouldHurry(INextBot const*) const
 T CTFBotDestroyEnemySentry::ShouldRetreat(INextBot const*) const
 T CTFBotDestroyEnemySentry::Update(CTFBot*, float)
 T CTFBotDestroyEnemySentry::~CTFBotDestroyEnemySentry()
 T CTFBotEngineerBuild::GetName() const
 T CTFBotEngineerBuild::InitialContainedAction(CTFBot*)
 T CTFBotEngineerBuild::OnResume(CTFBot*, Action<CTFBot>*)
 T CTFBotEngineerBuild::OnStart(CTFBot*, Action<CTFBot>*)
 T CTFBotEngineerBuild::OnTerritoryLost(CTFBot*, int)
 T CTFBotEngineerBuild::ShouldAttack(INextBot const*, CKnownEntity const*) const
 T CTFBotEngineerBuild::ShouldHurry(INextBot const*) const
 T CTFBotEngineerBuild::Update(CTFBot*, float)
 T CTFBotEngineerBuild::~CTFBotEngineerBuild()
 T CTFBotEngineerBuildDispenser::GetName() const
 T CTFBotEngineerBuildDispenser::OnEnd(CTFBot*, Action<CTFBot>*)
 T CTFBotEngineerBuildDispenser::OnResume(CTFBot*, Action<CTFBot>*)
 T CTFBotEngineerBuildDispenser::OnStart(CTFBot*, Action<CTFBot>*)
 T CTFBotEngineerBuildDispenser::Update(CTFBot*, float)
 T CTFBotEngineerBuildDispenser::~CTFBotEngineerBuildDispenser()
 T CTFBotEngineerBuildSentryGun::CTFBotEngineerBuildSentryGun()
 T CTFBotEngineerBuildSentryGun::CTFBotEngineerBuildSentryGun(CTFBotHintSentrygun*)
 T CTFBotEngineerBuildSentryGun::GetName() const
 T CTFBotEngineerBuildSentryGun::OnResume(CTFBot*, Action<CTFBot>*)
 T CTFBotEngineerBuildSentryGun::OnStart(CTFBot*, Action<CTFBot>*)
 T CTFBotEngineerBuildSentryGun::Update(CTFBot*, float)
 T CTFBotEngineerBuildSentryGun::~CTFBotEngineerBuildSentryGun()
 T CTFBotEngineerBuildTeleportEntrance::GetName() const
 T CTFBotEngineerBuildTeleportEntrance::OnStart(CTFBot*, Action<CTFBot>*)
 T CTFBotEngineerBuildTeleportEntrance::OnStuck(CTFBot*)
 T CTFBotEngineerBuildTeleportEntrance::Update(CTFBot*, float)
 T CTFBotEngineerBuildTeleportEntrance::~CTFBotEngineerBuildTeleportEntrance()
 T CTFBotEngineerBuildTeleportExit::CTFBotEngineerBuildTeleportExit()
 T CTFBotEngineerBuildTeleportExit::CTFBotEngineerBuildTeleportExit(Vector const&, float)
 T CTFBotEngineerBuildTeleportExit::GetName() const
 T CTFBotEngineerBuildTeleportExit::OnResume(CTFBot*, Action<CTFBot>*)
 T CTFBotEngineerBuildTeleportExit::OnStart(CTFBot*, Action<CTFBot>*)
 T CTFBotEngineerBuildTeleportExit::OnStuck(CTFBot*)
 T CTFBotEngineerBuildTeleportExit::Update(CTFBot*, float)
 T CTFBotEngineerBuildTeleportExit::~CTFBotEngineerBuildTeleportExit()
 T CTFBotEngineerBuilding::CTFBotEngineerBuilding()
 T CTFBotEngineerBuilding::CTFBotEngineerBuilding(CTFBotHintSentrygun*)
 T CTFBotEngineerBuilding::CheckIfSentryIsOutOfPosition(CTFBot*) const
 T CTFBotEngineerBuilding::GetName() const
 T CTFBotEngineerBuilding::IsMetalSourceNearby(CTFBot*) const
 T CTFBotEngineerBuilding::OnEnd(CTFBot*, Action<CTFBot>*)
 T CTFBotEngineerBuilding::OnResume(CTFBot*, Action<CTFBot>*)
 T CTFBotEngineerBuilding::OnStart(CTFBot*, Action<CTFBot>*)
 T CTFBotEngineerBuilding::OnTerritoryCaptured(CTFBot*, int)
 T CTFBotEngineerBuilding::OnTerritoryLost(CTFBot*, int)
 T CTFBotEngineerBuilding::Update(CTFBot*, float)
 T CTFBotEngineerBuilding::UpgradeAndMaintainBuildings(CTFBot*)
 T CTFBotEngineerBuilding::~CTFBotEngineerBuilding()
 T CTFBotEngineerMoveToBuild::CollectBuildAreas(CTFBot*)
 T CTFBotEngineerMoveToBuild::GetName() const
 T CTFBotEngineerMoveToBuild::OnMoveToFailure(CTFBot*, Path const*, MoveToFailureType)
 T CTFBotEngineerMoveToBuild::OnMoveToSuccess(CTFBot*, Path const*)
 T CTFBotEngineerMoveToBuild::OnStart(CTFBot*, Action<CTFBot>*)
 T CTFBotEngineerMoveToBuild::OnStuck(CTFBot*)
 T CTFBotEngineerMoveToBuild::OnTerritoryLost(CTFBot*, int)
 T CTFBotEngineerMoveToBuild::SelectBuildLocation(CTFBot*)
 T CTFBotEngineerMoveToBuild::Update(CTFBot*, float)
 T CTFBotEngineerMoveToBuild::~CTFBotEngineerMoveToBuild()
 T CTFBotEscortFlagCarrier::GetName() const
 T CTFBotEscortFlagCarrier::OnStart(CTFBot*, Action<CTFBot>*)
 T CTFBotEscortFlagCarrier::Update(CTFBot*, float)
 T CTFBotEscortFlagCarrier::~CTFBotEscortFlagCarrier()
 T CTFBotEscortSquadLeader::CTFBotEscortSquadLeader(Action<CTFBot>*)
 T CTFBotEscortSquadLeader::GetName() const
 T CTFBotEscortSquadLeader::OnEnd(CTFBot*, Action<CTFBot>*)
 T CTFBotEscortSquadLeader::OnStart(CTFBot*, Action<CTFBot>*)
 T CTFBotEscortSquadLeader::Update(CTFBot*, float)
 T CTFBotEscortSquadLeader::~CTFBotEscortSquadLeader()
 T CTFBotFetchFlag::CTFBotFetchFlag(bool)
 T CTFBotFetchFlag::GetName() const
 T CTFBotFetchFlag::OnStart(CTFBot*, Action<CTFBot>*)
 T CTFBotFetchFlag::ShouldHurry(INextBot const*) const
 T CTFBotFetchFlag::ShouldRetreat(INextBot const*) const
 T CTFBotFetchFlag::Update(CTFBot*, float)
 T CTFBotFetchFlag::~CTFBotFetchFlag()
 T CTFBotGenerator::Activate()
 T CTFBotGenerator::CTFBotGenerator()
 T CTFBotGenerator::GeneratorThink()
 T CTFBotGenerator::GetDataDescMap()
 T CTFBotGenerator::InputClearAttentionFocus(inputdata_t&)
 T CTFBotGenerator::InputCommandGotoActionPoint(inputdata_t&)
 T CTFBotGenerator::InputDisable(inputdata_t&)
 T CTFBotGenerator::InputEnable(inputdata_t&)
 T CTFBotGenerator::InputRemoveBots(inputdata_t&)
 T CTFBotGenerator::InputSetAttentionFocus(inputdata_t&)
 T CTFBotGenerator::InputSetDifficulty(inputdata_t&)
 T CTFBotGenerator::InputSetDisableDodge(inputdata_t&)
 T CTFBotGenerator::InputSetSuppressFire(inputdata_t&)
 T CTFBotGenerator::InputSpawnBot(inputdata_t&)
 T CTFBotGenerator::OnBotKilled(CTFBot*)
 T CTFBotGenerator::SpawnBot()
 T CTFBotGenerator::~CTFBotGenerator()
 T CTFBotGetAmmo::CTFBotGetAmmo()
 T CTFBotGetAmmo::GetName() const
 T CTFBotGetAmmo::IsPossible(CTFBot*)
 T CTFBotGetAmmo::OnContact(CTFBot*, CBaseEntity*, CGameTrace*)
 T CTFBotGetAmmo::OnMoveToFailure(CTFBot*, Path const*, MoveToFailureType)
 T CTFBotGetAmmo::OnMoveToSuccess(CTFBot*, Path const*)
 T CTFBotGetAmmo::OnStart(CTFBot*, Action<CTFBot>*)
 T CTFBotGetAmmo::OnStuck(CTFBot*)
 T CTFBotGetAmmo::ShouldHurry(INextBot const*) const
 T CTFBotGetAmmo::Update(CTFBot*, float)
 T CTFBotGetAmmo::~CTFBotGetAmmo()
 T CTFBotGetHealth::GetName() const
 T CTFBotGetHealth::IsPossible(CTFBot*)
 T CTFBotGetHealth::OnMoveToFailure(CTFBot*, Path const*, MoveToFailureType)
 T CTFBotGetHealth::OnMoveToSuccess(CTFBot*, Path const*)
 T CTFBotGetHealth::OnStart(CTFBot*, Action<CTFBot>*)
 T CTFBotGetHealth::OnStuck(CTFBot*)
 T CTFBotGetHealth::ShouldHurry(INextBot const*) const
 T CTFBotGetHealth::Update(CTFBot*, float)
 T CTFBotGetHealth::~CTFBotGetHealth()
 T CTFBotHint::GetDataDescMap()
 T CTFBotHint::InputDisable(inputdata_t&)
 T CTFBotHint::InputEnable(inputdata_t&)
 T CTFBotHint::IsFor(CTFBot*) const
 T CTFBotHint::Spawn()
 T CTFBotHint::UpdateNavDecoration()
 T CTFBotHint::UpdateOnRemove()
 T CTFBotHint::~CTFBotHint()
 T CTFBotHintEngineerNest::DetonateObjectsFromHints(CUtlVector<CHandle<CBaseTFBotHintEntity>, CUtlMemory<CHandle<CBaseTFBotHintEntity>, int> > const&)
 T CTFBotHintEngineerNest::DetonateStaleNest()
 T CTFBotHintEngineerNest::GetDataDescMap()
 T CTFBotHintEngineerNest::GetHint(CUtlVector<CHandle<CBaseTFBotHintEntity>, CUtlMemory<CHandle<CBaseTFBotHintEntity>, int> > const&) const
 T CTFBotHintEngineerNest::GetHintType() const
 T CTFBotHintEngineerNest::GetSentryHint() const
 T CTFBotHintEngineerNest::GetServerClass()
 T CTFBotHintEngineerNest::GetTeleporterHint() const
 T CTFBotHintEngineerNest::HintTeleporterThink()
 T CTFBotHintEngineerNest::HintThink()
 T CTFBotHintEngineerNest::IsStaleNest() const
 T CTFBotHintEngineerNest::Spawn()
 T CTFBotHintEngineerNest::UpdateTransmitState()
 T CTFBotHintEngineerNest::YouForgotToImplementOrDeclareServerClass()
 T CTFBotHintEngineerNest::~CTFBotHintEngineerNest()
 T CTFBotHintSentrygun::GetDataDescMap()
 T CTFBotHintSentrygun::GetHintType() const
 T CTFBotHintSentrygun::IsAvailableForSelection(CTFPlayer*) const
 T CTFBotHintSentrygun::OnSentryGunDestroyed(CBaseEntity*)
 T CTFBotHintSentrygun::~CTFBotHintSentrygun()
 T CTFBotHintTeleporterExit::GetDataDescMap()
 T CTFBotHintTeleporterExit::GetHintType() const
 T CTFBotHintTeleporterExit::~CTFBotHintTeleporterExit()
 T CTFBotLocomotion::AdjustPosture(Vector const&)
 T CTFBotLocomotion::Approach(Vector const&, float)
 T CTFBotLocomotion::GetDeathDropHeight() const
 T CTFBotLocomotion::GetMaxJumpHeight() const
 T CTFBotLocomotion::GetRunSpeed() const
 T CTFBotLocomotion::IsAreaTraversable(CNavArea const*) const
 T CTFBotLocomotion::IsEntityTraversable(CBaseEntity*, ILocomotion::TraverseWhenType) const
 T CTFBotLocomotion::Jump()
 T CTFBotLocomotion::Update()
 T CTFBotLocomotion::~CTFBotLocomotion()
 T CTFBotMainAction::Dodge(CTFBot*)
 T CTFBotMainAction::FireWeaponAtEnemy(CTFBot*)
 T CTFBotMainAction::GetHealerOfThreat(CKnownEntity const*) const
 T CTFBotMainAction::GetName() const
 T CTFBotMainAction::InitialContainedAction(CTFBot*)
 T CTFBotMainAction::IsImmediateThreat(CBaseCombatCharacter const*, CKnownEntity const*) const
 T CTFBotMainAction::IsPositionAllowed(INextBot const*, Vector const&) const
 T CTFBotMainAction::OnContact(CTFBot*, CBaseEntity*, CGameTrace*)
 T CTFBotMainAction::OnInjured(CTFBot*, CTakeDamageInfo const&)
 T CTFBotMainAction::OnKilled(CTFBot*, CTakeDamageInfo const&)
 T CTFBotMainAction::OnOtherKilled(CTFBot*, CBaseCombatCharacter*, CTakeDamageInfo const&)
 T CTFBotMainAction::OnStart(CTFBot*, Action<CTFBot>*)
 T CTFBotMainAction::OnStuck(CTFBot*)
 T CTFBotMainAction::SelectMoreDangerousThreat(INextBot const*, CBaseCombatCharacter const*, CKnownEntity const*, CKnownEntity const*) const
 T CTFBotMainAction::SelectMoreDangerousThreatInternal(INextBot const*, CBaseCombatCharacter const*, CKnownEntity const*, CKnownEntity const*) const
 T CTFBotMainAction::SelectTargetPoint(INextBot const*, CBaseCombatCharacter const*) const
 T CTFBotMainAction::ShouldAttack(INextBot const*, CKnownEntity const*) const
 T CTFBotMainAction::ShouldHurry(INextBot const*) const
 T CTFBotMainAction::ShouldRetreat(INextBot const*) const
 T CTFBotMainAction::Update(CTFBot*, float)
 T CTFBotMainAction::~CTFBotMainAction()
 T CTFBotManager::DrawStuckBotData(float)
 T CTFBotManager::FindOrCreateStuckBot(int, char const*)
 T CTFBotManager::GetAvailableBotFromPool()
 T CTFBotManager::IsAllBotTeam(int)
 T CTFBotManager::IsInOfflinePractice() const
 T CTFBotManager::IsMeleeOnly() const
 T CTFBotManager::LevelShutdown()
 T CTFBotManager::MaintainBotQuota()
 T CTFBotManager::OnForceAddedBots(int)
 T CTFBotManager::OnForceKickedBots(int)
 T CTFBotManager::OnMapLoaded()
 T CTFBotManager::OnRoundRestart()
 T CTFBotManager::RemoveBotFromTeamAndKick(int)
 T CTFBotManager::Update()
 T CTFBotManager::~CTFBotManager()
 T CTFBotMedicHeal::ComputeFollowPosition(CTFBot*)
 T CTFBotMedicHeal::GetName() const
 T CTFBotMedicHeal::IsVisibleToEnemy(CTFBot*, Vector const&) const
 T CTFBotMedicHeal::OnActorEmoted(CTFBot*, CBaseCombatCharacter*, int)
 T CTFBotMedicHeal::OnMoveToFailure(CTFBot*, Path const*, MoveToFailureType)
 T CTFBotMedicHeal::OnMoveToSuccess(CTFBot*, Path const*)
 T CTFBotMedicHeal::OnResume(CTFBot*, Action<CTFBot>*)
 T CTFBotMedicHeal::OnStart(CTFBot*, Action<CTFBot>*)
 T CTFBotMedicHeal::OnStuck(CTFBot*)
 T CTFBotMedicHeal::SelectPatient(CTFBot*, CTFPlayer*)
 T CTFBotMedicHeal::ShouldAttack(INextBot const*, CKnownEntity const*) const
 T CTFBotMedicHeal::ShouldHurry(INextBot const*) const
 T CTFBotMedicHeal::ShouldRetreat(INextBot const*) const
 T CTFBotMedicHeal::Update(CTFBot*, float)
 T CTFBotMedicHeal::~CTFBotMedicHeal()
 T CTFBotMedicRetreat::GetName() const
 T CTFBotMedicRetreat::OnMoveToFailure(CTFBot*, Path const*, MoveToFailureType)
 T CTFBotMedicRetreat::OnResume(CTFBot*, Action<CTFBot>*)
 T CTFBotMedicRetreat::OnStart(CTFBot*, Action<CTFBot>*)
 T CTFBotMedicRetreat::OnStuck(CTFBot*)
 T CTFBotMedicRetreat::ShouldAttack(INextBot const*, CKnownEntity const*) const
 T CTFBotMedicRetreat::Update(CTFBot*, float)
 T CTFBotMedicRetreat::~CTFBotMedicRetreat()
 T CTFBotMeleeAttack::CTFBotMeleeAttack(float)
 T CTFBotMeleeAttack::GetName() const
 T CTFBotMeleeAttack::OnStart(CTFBot*, Action<CTFBot>*)
 T CTFBotMeleeAttack::Update(CTFBot*, float)
 T CTFBotMeleeAttack::~CTFBotMeleeAttack()
 T CTFBotMissionSuicideBomber::CTFBotMissionSuicideBomber()
 T CTFBotMissionSuicideBomber::Detonate(CTFBot*)
 T CTFBotMissionSuicideBomber::GetName() const
 T CTFBotMissionSuicideBomber::OnEnd(CTFBot*, Action<CTFBot>*)
 T CTFBotMissionSuicideBomber::OnKilled(CTFBot*, CTakeDamageInfo const&)
 T CTFBotMissionSuicideBomber::OnStart(CTFBot*, Action<CTFBot>*)
 T CTFBotMissionSuicideBomber::OnStuck(CTFBot*)
 T CTFBotMissionSuicideBomber::ShouldAttack(INextBot const*, CKnownEntity const*) const
 T CTFBotMissionSuicideBomber::StartDetonate(CTFBot*, bool, bool)
 T CTFBotMissionSuicideBomber::Update(CTFBot*, float)
 T CTFBotMissionSuicideBomber::~CTFBotMissionSuicideBomber()
 T CTFBotMvMDeployBomb::GetName() const
 T CTFBotMvMDeployBomb::OnContact(CTFBot*, CBaseEntity*, CGameTrace*)
 T CTFBotMvMDeployBomb::OnEnd(CTFBot*, Action<CTFBot>*)
 T CTFBotMvMDeployBomb::OnStart(CTFBot*, Action<CTFBot>*)
 T CTFBotMvMDeployBomb::ShouldAttack(INextBot const*, CKnownEntity const*) const
 T CTFBotMvMDeployBomb::Update(CTFBot*, float)
 T CTFBotMvMDeployBomb::~CTFBotMvMDeployBomb()
 T CTFBotMvMEngineerBuildSentryGun::CTFBotMvMEngineerBuildSentryGun(CTFBotHintSentrygun*)
 T CTFBotMvMEngineerBuildSentryGun::GetName() const
 T CTFBotMvMEngineerBuildSentryGun::OnEnd(CTFBot*, Action<CTFBot>*)
 T CTFBotMvMEngineerBuildSentryGun::OnStart(CTFBot*, Action<CTFBot>*)
 T CTFBotMvMEngineerBuildSentryGun::Update(CTFBot*, float)
 T CTFBotMvMEngineerBuildSentryGun::~CTFBotMvMEngineerBuildSentryGun()
 T CTFBotMvMEngineerBuildTeleportExit::CTFBotMvMEngineerBuildTeleportExit(CTFBotHintTeleporterExit*)
 T CTFBotMvMEngineerBuildTeleportExit::GetName() const
 T CTFBotMvMEngineerBuildTeleportExit::OnStart(CTFBot*, Action<CTFBot>*)
 T CTFBotMvMEngineerBuildTeleportExit::Update(CTFBot*, float)
 T CTFBotMvMEngineerBuildTeleportExit::~CTFBotMvMEngineerBuildTeleportExit()
 T CTFBotMvMEngineerHintFinder::FindHint(bool, bool, CHandle<CTFBotHintEngineerNest>*)
 T CTFBotMvMEngineerIdle::GetName() const
 T CTFBotMvMEngineerIdle::OnStart(CTFBot*, Action<CTFBot>*)
 T CTFBotMvMEngineerIdle::ShouldAdvanceNestSpot(CTFBot*)
 T CTFBotMvMEngineerIdle::ShouldAttack(INextBot const*, CKnownEntity const*) const
 T CTFBotMvMEngineerIdle::ShouldHurry(INextBot const*) const
 T CTFBotMvMEngineerIdle::ShouldRetreat(INextBot const*) const
 T CTFBotMvMEngineerIdle::TryToDetonateStaleNest()
 T CTFBotMvMEngineerIdle::Update(CTFBot*, float)
 T CTFBotMvMEngineerIdle::~CTFBotMvMEngineerIdle()
 T CTFBotMvMEngineerTeleportSpawn::CTFBotMvMEngineerTeleportSpawn(CBaseTFBotHintEntity*, bool)
 T CTFBotMvMEngineerTeleportSpawn::GetName() const
 T CTFBotMvMEngineerTeleportSpawn::OnStart(CTFBot*, Action<CTFBot>*)
 T CTFBotMvMEngineerTeleportSpawn::Update(CTFBot*, float)
 T CTFBotMvMEngineerTeleportSpawn::~CTFBotMvMEngineerTeleportSpawn()
 T CTFBotNavEntMoveTo::CTFBotNavEntMoveTo(CFuncNavPrerequisite const*)
 T CTFBotNavEntMoveTo::GetName() const
 T CTFBotNavEntMoveTo::OnStart(CTFBot*, Action<CTFBot>*)
 T CTFBotNavEntMoveTo::Update(CTFBot*, float)
 T CTFBotNavEntMoveTo::~CTFBotNavEntMoveTo()
 T CTFBotNavEntWait::CTFBotNavEntWait(CFuncNavPrerequisite const*)
 T CTFBotNavEntWait::GetName() const
 T CTFBotNavEntWait::OnStart(CTFBot*, Action<CTFBot>*)
 T CTFBotNavEntWait::Update(CTFBot*, float)
 T CTFBotNavEntWait::~CTFBotNavEntWait()
 T CTFBotPathCost::operator()(CNavArea*, CNavArea*, CNavLadder const*, CFuncElevator const*, float) const
 T CTFBotPayloadBlock::GetName() const
 T CTFBotPayloadBlock::OnMoveToFailure(CTFBot*, Path const*, MoveToFailureType)
 T CTFBotPayloadBlock::OnMoveToSuccess(CTFBot*, Path const*)
 T CTFBotPayloadBlock::OnResume(CTFBot*, Action<CTFBot>*)
 T CTFBotPayloadBlock::OnStart(CTFBot*, Action<CTFBot>*)
 T CTFBotPayloadBlock::OnStuck(CTFBot*)
 T CTFBotPayloadBlock::OnTerritoryCaptured(CTFBot*, int)
 T CTFBotPayloadBlock::OnTerritoryContested(CTFBot*, int)
 T CTFBotPayloadBlock::OnTerritoryLost(CTFBot*, int)
 T CTFBotPayloadBlock::ShouldHurry(INextBot const*) const
 T CTFBotPayloadBlock::ShouldRetreat(INextBot const*) const
 T CTFBotPayloadBlock::Update(CTFBot*, float)
 T CTFBotPayloadBlock::~CTFBotPayloadBlock()
 T CTFBotPayloadGuard::FindVantagePoint(CTFBot*, CBaseEntity*)
 T CTFBotPayloadGuard::GetName() const
 T CTFBotPayloadGuard::OnMoveToFailure(CTFBot*, Path const*, MoveToFailureType)
 T CTFBotPayloadGuard::OnMoveToSuccess(CTFBot*, Path const*)
 T CTFBotPayloadGuard::OnResume(CTFBot*, Action<CTFBot>*)
 T CTFBotPayloadGuard::OnStart(CTFBot*, Action<CTFBot>*)
 T CTFBotPayloadGuard::OnStuck(CTFBot*)
 T CTFBotPayloadGuard::OnTerritoryCaptured(CTFBot*, int)
 T CTFBotPayloadGuard::OnTerritoryContested(CTFBot*, int)
 T CTFBotPayloadGuard::OnTerritoryLost(CTFBot*, int)
 T CTFBotPayloadGuard::ShouldHurry(INextBot const*) const
 T CTFBotPayloadGuard::ShouldRetreat(INextBot const*) const
 T CTFBotPayloadGuard::Update(CTFBot*, float)
 T CTFBotPayloadGuard::~CTFBotPayloadGuard()
 T CTFBotPayloadPush::GetName() const
 T CTFBotPayloadPush::OnMoveToFailure(CTFBot*, Path const*, MoveToFailureType)
 T CTFBotPayloadPush::OnMoveToSuccess(CTFBot*, Path const*)
 T CTFBotPayloadPush::OnResume(CTFBot*, Action<CTFBot>*)
 T CTFBotPayloadPush::OnStart(CTFBot*, Action<CTFBot>*)
 T CTFBotPayloadPush::OnStuck(CTFBot*)
 T CTFBotPayloadPush::ShouldHurry(INextBot const*) const
 T CTFBotPayloadPush::ShouldRetreat(INextBot const*) const
 T CTFBotPayloadPush::Update(CTFBot*, float)
 T CTFBotPayloadPush::~CTFBotPayloadPush()
 T CTFBotPrepareStickybombTrap::CTFBotPrepareStickybombTrap()
 T CTFBotPrepareStickybombTrap::GetName() const
 T CTFBotPrepareStickybombTrap::InitBombTargetAreas(CTFBot*)
 T CTFBotPrepareStickybombTrap::IsPossible(CTFBot*)
 T CTFBotPrepareStickybombTrap::OnEnd(CTFBot*, Action<CTFBot>*)
 T CTFBotPrepareStickybombTrap::OnInjured(CTFBot*, CTakeDamageInfo const&)
 T CTFBotPrepareStickybombTrap::OnStart(CTFBot*, Action<CTFBot>*)
 T CTFBotPrepareStickybombTrap::OnSuspend(CTFBot*, Action<CTFBot>*)
 T CTFBotPrepareStickybombTrap::ShouldAttack(INextBot const*, CKnownEntity const*) const
 T CTFBotPrepareStickybombTrap::Update(CTFBot*, float)
 T CTFBotPrepareStickybombTrap::~CTFBotPrepareStickybombTrap()
 T CTFBotProxy::CTFBotProxy()
 T CTFBotProxy::GetDataDescMap()
 T CTFBotProxy::InputDelete(inputdata_t&)
 T CTFBotProxy::InputSetClass(inputdata_t&)
 T CTFBotProxy::InputSetMovementGoal(inputdata_t&)
 T CTFBotProxy::InputSetTeam(inputdata_t&)
 T CTFBotProxy::InputSpawn(inputdata_t&)
 T CTFBotProxy::OnKilled()
 T CTFBotProxy::Think()
 T CTFBotProxy::~CTFBotProxy()
 T CTFBotPushToCapturePoint::CTFBotPushToCapturePoint(Action<CTFBot>*)
 T CTFBotPushToCapturePoint::GetName() const
 T CTFBotPushToCapturePoint::OnNavAreaChanged(CTFBot*, CNavArea*, CNavArea*)
 T CTFBotPushToCapturePoint::Update(CTFBot*, float)
 T CTFBotPushToCapturePoint::~CTFBotPushToCapturePoint()
 T CTFBotRetreatToCover::CTFBotRetreatToCover(Action<CTFBot>*)
 T CTFBotRetreatToCover::CTFBotRetreatToCover(float)
 T CTFBotRetreatToCover::FindCoverArea(CTFBot*)
 T CTFBotRetreatToCover::GetName() const
 T CTFBotRetreatToCover::OnMoveToFailure(CTFBot*, Path const*, MoveToFailureType)
 T CTFBotRetreatToCover::OnMoveToSuccess(CTFBot*, Path const*)
 T CTFBotRetreatToCover::OnStart(CTFBot*, Action<CTFBot>*)
 T CTFBotRetreatToCover::OnStuck(CTFBot*)
 T CTFBotRetreatToCover::ShouldHurry(INextBot const*) const
 T CTFBotRetreatToCover::Update(CTFBot*, float)
 T CTFBotRetreatToCover::~CTFBotRetreatToCover()
 T CTFBotRoster::GetDataDescMap()
 T CTFBotRoster::InputSetAllowDemoman(inputdata_t&)
 T CTFBotRoster::InputSetAllowEngineer(inputdata_t&)
 T CTFBotRoster::InputSetAllowHeavy(inputdata_t&)
 T CTFBotRoster::InputSetAllowMedic(inputdata_t&)
 T CTFBotRoster::InputSetAllowPyro(inputdata_t&)
 T CTFBotRoster::InputSetAllowScout(inputdata_t&)
 T CTFBotRoster::InputSetAllowSniper(inputdata_t&)
 T CTFBotRoster::InputSetAllowSoldier(inputdata_t&)
 T CTFBotRoster::InputSetAllowSpy(inputdata_t&)
 T CTFBotRoster::IsClassAllowed(int) const
 T CTFBotRoster::IsClassChangeAllowed() const
 T CTFBotRoster::~CTFBotRoster()
 T CTFBotScenarioMonitor::DesiredScenarioAndClassAction(CTFBot*)
 T CTFBotScenarioMonitor::GetName() const
 T CTFBotScenarioMonitor::InitialContainedAction(CTFBot*)
 T CTFBotScenarioMonitor::OnStart(CTFBot*, Action<CTFBot>*)
 T CTFBotScenarioMonitor::Update(CTFBot*, float)
 T CTFBotScenarioMonitor::~CTFBotScenarioMonitor()
 T CTFBotSeekAndDestroy::CTFBotSeekAndDestroy(float)
 T CTFBotSeekAndDestroy::ChooseGoalArea(CTFBot*)
 T CTFBotSeekAndDestroy::GetName() const
 T CTFBotSeekAndDestroy::OnMoveToFailure(CTFBot*, Path const*, MoveToFailureType)
 T CTFBotSeekAndDestroy::OnMoveToSuccess(CTFBot*, Path const*)
 T CTFBotSeekAndDestroy::OnResume(CTFBot*, Action<CTFBot>*)
 T CTFBotSeekAndDestroy::OnStart(CTFBot*, Action<CTFBot>*)
 T CTFBotSeekAndDestroy::OnStuck(CTFBot*)
 T CTFBotSeekAndDestroy::OnTerritoryCaptured(CTFBot*, int)
 T CTFBotSeekAndDestroy::OnTerritoryContested(CTFBot*, int)
 T CTFBotSeekAndDestroy::OnTerritoryLost(CTFBot*, int)
 T CTFBotSeekAndDestroy::RecomputeSeekPath(CTFBot*)
 T CTFBotSeekAndDestroy::ShouldHurry(INextBot const*) const
 T CTFBotSeekAndDestroy::ShouldRetreat(INextBot const*) const
 T CTFBotSeekAndDestroy::Update(CTFBot*, float)
 T CTFBotSeekAndDestroy::~CTFBotSeekAndDestroy()
 T CTFBotSniperLurk::FindHint(CTFBot*)
 T CTFBotSniperLurk::FindNewHome(CTFBot*)
 T CTFBotSniperLurk::GetName() const
 T CTFBotSniperLurk::OnEnd(CTFBot*, Action<CTFBot>*)
 T CTFBotSniperLurk::OnResume(CTFBot*, Action<CTFBot>*)
 T CTFBotSniperLurk::OnStart(CTFBot*, Action<CTFBot>*)
 T CTFBotSniperLurk::OnSuspend(CTFBot*, Action<CTFBot>*)
 T CTFBotSniperLurk::SelectMoreDangerousThreat(INextBot const*, CBaseCombatCharacter const*, CKnownEntity const*, CKnownEntity const*) const
 T CTFBotSniperLurk::ShouldAttack(INextBot const*, CKnownEntity const*) const
 T CTFBotSniperLurk::ShouldRetreat(INextBot const*) const
 T CTFBotSniperLurk::Update(CTFBot*, float)
 T CTFBotSniperLurk::~CTFBotSniperLurk()
 T CTFBotSpawner::CTFBotSpawner(IPopulator*)
 T CTFBotSpawner::GetClass(int)
 T CTFBotSpawner::GetClassIcon(int)
 T CTFBotSpawner::GetHealth(int)
 T CTFBotSpawner::HasAttribute(CTFBot::AttributeType, int)
 T CTFBotSpawner::HasEventChangeAttributes(char const*) const
 T CTFBotSpawner::IsMiniBoss(int)
 T CTFBotSpawner::Parse(KeyValues*)
 T CTFBotSpawner::ParseEventChangeAttributes(KeyValues*)
 T CTFBotSpawner::Spawn(Vector const&, CUtlVector<CHandle<CBaseEntity>, CUtlMemory<CHandle<CBaseEntity>, int> >*)
 T CTFBotSpawner::~CTFBotSpawner()
 T CTFBotSpyAttack::CTFBotSpyAttack(CTFPlayer*)
 T CTFBotSpyAttack::GetName() const
 T CTFBotSpyAttack::IsHindrance(INextBot const*, CBaseEntity*) const
 T CTFBotSpyAttack::OnContact(CTFBot*, CBaseEntity*, CGameTrace*)
 T CTFBotSpyAttack::OnInjured(CTFBot*, CTakeDamageInfo const&)
 T CTFBotSpyAttack::OnResume(CTFBot*, Action<CTFBot>*)
 T CTFBotSpyAttack::OnStart(CTFBot*, Action<CTFBot>*)
 T CTFBotSpyAttack::OnStuck(CTFBot*)
 T CTFBotSpyAttack::SelectMoreDangerousThreat(INextBot const*, CBaseCombatCharacter const*, CKnownEntity const*, CKnownEntity const*) const
 T CTFBotSpyAttack::ShouldAttack(INextBot const*, CKnownEntity const*) const
 T CTFBotSpyAttack::ShouldHurry(INextBot const*) const
 T CTFBotSpyAttack::ShouldRetreat(INextBot const*) const
 T CTFBotSpyAttack::Update(CTFBot*, float)
 T CTFBotSpyAttack::~CTFBotSpyAttack()
 T CTFBotSpyHide::CTFBotSpyHide(CTFPlayer*)
 T CTFBotSpyHide::FindHidingSpot(CTFBot*)
 T CTFBotSpyHide::GetName() const
 T CTFBotSpyHide::OnMoveToFailure(CTFBot*, Path const*, MoveToFailureType)
 T CTFBotSpyHide::OnMoveToSuccess(CTFBot*, Path const*)
 T CTFBotSpyHide::OnResume(CTFBot*, Action<CTFBot>*)
 T CTFBotSpyHide::OnStart(CTFBot*, Action<CTFBot>*)
 T CTFBotSpyHide::ShouldAttack(INextBot const*, CKnownEntity const*) const
 T CTFBotSpyHide::Update(CTFBot*, float)
 T CTFBotSpyHide::~CTFBotSpyHide()
 T CTFBotSpyInfiltrate::FindHidingSpot(CTFBot*)
 T CTFBotSpyInfiltrate::GetName() const
 T CTFBotSpyInfiltrate::OnEnd(CTFBot*, Action<CTFBot>*)
 T CTFBotSpyInfiltrate::OnResume(CTFBot*, Action<CTFBot>*)
 T CTFBotSpyInfiltrate::OnStart(CTFBot*, Action<CTFBot>*)
 T CTFBotSpyInfiltrate::OnStuck(CTFBot*)
 T CTFBotSpyInfiltrate::OnSuspend(CTFBot*, Action<CTFBot>*)
 T CTFBotSpyInfiltrate::OnTerritoryCaptured(CTFBot*, int)
 T CTFBotSpyInfiltrate::OnTerritoryLost(CTFBot*, int)
 T CTFBotSpyInfiltrate::ShouldAttack(INextBot const*, CKnownEntity const*) const
 T CTFBotSpyInfiltrate::Update(CTFBot*, float)
 T CTFBotSpyInfiltrate::~CTFBotSpyInfiltrate()
 T CTFBotSpyLeaveSpawnRoom::GetName() const
 T CTFBotSpyLeaveSpawnRoom::OnStart(CTFBot*, Action<CTFBot>*)
 T CTFBotSpyLeaveSpawnRoom::ShouldAttack(INextBot const*, CKnownEntity const*) const
 T CTFBotSpyLeaveSpawnRoom::Update(CTFBot*, float)
 T CTFBotSpyLeaveSpawnRoom::~CTFBotSpyLeaveSpawnRoom()
 T CTFBotSpyLurk::GetName() const
 T CTFBotSpyLurk::OnStart(CTFBot*, Action<CTFBot>*)
 T CTFBotSpyLurk::ShouldAttack(INextBot const*, CKnownEntity const*) const
 T CTFBotSpyLurk::Update(CTFBot*, float)
 T CTFBotSpyLurk::~CTFBotSpyLurk()
 T CTFBotSpySap::AreAllDangerousSentriesSapped(CTFBot*) const
 T CTFBotSpySap::CTFBotSpySap(CBaseObject*)
 T CTFBotSpySap::GetName() const
 T CTFBotSpySap::IsHindrance(INextBot const*, CBaseEntity*) const
 T CTFBotSpySap::OnEnd(CTFBot*, Action<CTFBot>*)
 T CTFBotSpySap::OnResume(CTFBot*, Action<CTFBot>*)
 T CTFBotSpySap::OnStart(CTFBot*, Action<CTFBot>*)
 T CTFBotSpySap::OnStuck(CTFBot*)
 T CTFBotSpySap::OnSuspend(CTFBot*, Action<CTFBot>*)
 T CTFBotSpySap::ShouldAttack(INextBot const*, CKnownEntity const*) const
 T CTFBotSpySap::ShouldRetreat(INextBot const*) const
 T CTFBotSpySap::Update(CTFBot*, float)
 T CTFBotSpySap::~CTFBotSpySap()
 T CTFBotSquad::CTFBotSquad()
 T CTFBotSquad::CollectMembers(CUtlVector<CTFBot*, CUtlMemory<CTFBot*, int> >*) const
 T CTFBotSquad::FirstContainedResponder() const
 T CTFBotSquad::GetLeader() const
 T CTFBotSquad::GetMemberCount() const
 T CTFBotSquad::IsInFormation() const
 T CTFBotSquad::Join(CTFBot*)
 T CTFBotSquad::Leave(CTFBot*)
 T CTFBotSquad::NextContainedResponder(INextBotEventResponder*) const
 T CTFBotSquad::ShouldSquadLeaderWaitForFormation() const
 T CTFBotSquad::~CTFBotSquad()
 T CTFBotStickybombSentrygun::CTFBotStickybombSentrygun(CObjectSentrygun*)
 T CTFBotStickybombSentrygun::CTFBotStickybombSentrygun(CObjectSentrygun*, float, float, float)
 T CTFBotStickybombSentrygun::GetName() const
 T CTFBotStickybombSentrygun::IsAimOnTarget(CTFBot*, float, float, float)
 T CTFBotStickybombSentrygun::OnEnd(CTFBot*, Action<CTFBot>*)
 T CTFBotStickybombSentrygun::OnInjured(CTFBot*, CTakeDamageInfo const&)
 T CTFBotStickybombSentrygun::OnStart(CTFBot*, Action<CTFBot>*)
 T CTFBotStickybombSentrygun::OnSuspend(CTFBot*, Action<CTFBot>*)
 T CTFBotStickybombSentrygun::ShouldAttack(INextBot const*, CKnownEntity const*) const
 T CTFBotStickybombSentrygun::ShouldHurry(INextBot const*) const
 T CTFBotStickybombSentrygun::ShouldRetreat(INextBot const*) const
 T CTFBotStickybombSentrygun::Update(CTFBot*, float)
 T CTFBotStickybombSentrygun::~CTFBotStickybombSentrygun()
 T CTFBotTacticalMonitor::AvoidBumpingEnemies(CTFBot*)
 T CTFBotTacticalMonitor::FindNearbyTeleporter(CTFBot*)
 T CTFBotTacticalMonitor::GetName() const
 T CTFBotTacticalMonitor::InitialContainedAction(CTFBot*)
 T CTFBotTacticalMonitor::MonitorArmedStickyBombs(CTFBot*)
 T CTFBotTacticalMonitor::OnCommandString(CTFBot*, char const*)
 T CTFBotTacticalMonitor::OnNavAreaChanged(CTFBot*, CNavArea*, CNavArea*)
 T CTFBotTacticalMonitor::OnOtherKilled(CTFBot*, CBaseCombatCharacter*, CTakeDamageInfo const&)
 T CTFBotTacticalMonitor::OnStart(CTFBot*, Action<CTFBot>*)
 T CTFBotTacticalMonitor::Update(CTFBot*, float)
 T CTFBotTacticalMonitor::~CTFBotTacticalMonitor()
 T CTFBotTaunt::GetName() const
 T CTFBotTaunt::OnStart(CTFBot*, Action<CTFBot>*)
 T CTFBotTaunt::Update(CTFBot*, float)
 T CTFBotTaunt::~CTFBotTaunt()
 T CTFBotUberAttackEnemySentry::CTFBotUberAttackEnemySentry(CObjectSentrygun*)
 T CTFBotUberAttackEnemySentry::GetName() const
 T CTFBotUberAttackEnemySentry::OnEnd(CTFBot*, Action<CTFBot>*)
 T CTFBotUberAttackEnemySentry::OnStart(CTFBot*, Action<CTFBot>*)
 T CTFBotUberAttackEnemySentry::ShouldAttack(INextBot const*, CKnownEntity const*) const
 T CTFBotUberAttackEnemySentry::ShouldHurry(INextBot const*) const
 T CTFBotUberAttackEnemySentry::ShouldRetreat(INextBot const*) const
 T CTFBotUberAttackEnemySentry::Update(CTFBot*, float)
 T CTFBotUberAttackEnemySentry::~CTFBotUberAttackEnemySentry()
 T CTFBotUseItem::CTFBotUseItem(CTFWeaponBase*)
 T CTFBotUseItem::GetName() const
 T CTFBotUseItem::OnEnd(CTFBot*, Action<CTFBot>*)
 T CTFBotUseItem::OnStart(CTFBot*, Action<CTFBot>*)
 T CTFBotUseItem::Update(CTFBot*, float)
 T CTFBotUseItem::~CTFBotUseItem()
 T CTFBotUseTeleporter::CTFBotUseTeleporter(CObjectTeleporter*, CTFBotUseTeleporter::UseHowType)
 T CTFBotUseTeleporter::GetName() const
 T CTFBotUseTeleporter::OnStart(CTFBot*, Action<CTFBot>*)
 T CTFBotUseTeleporter::Update(CTFBot*, float)
 T CTFBotUseTeleporter::~CTFBotUseTeleporter()
 T CTFBotVision::CollectPotentiallyVisibleEntities(CUtlVector<CBaseEntity*, CUtlMemory<CBaseEntity*, int> >*)
 T CTFBotVision::GetMaxVisionRange() const
 T CTFBotVision::GetMinRecognizeTime() const
 T CTFBotVision::IsIgnored(CBaseEntity*) const
 T CTFBotVision::IsVisibleEntityNoticed(CBaseEntity*) const
 T CTFBotVision::Update()
 T CTFBotVision::UpdatePotentiallyVisibleNPCVector()
 T CTFBotVision::~CTFBotVision()
 T CTFBotWaitForOutOfPositionSquadMember::GetName() const
 T CTFBotWaitForOutOfPositionSquadMember::OnStart(CTFBot*, Action<CTFBot>*)
 T CTFBotWaitForOutOfPositionSquadMember::Update(CTFBot*, float)
 T CTFBotWaitForOutOfPositionSquadMember::~CTFBotWaitForOutOfPositionSquadMember()
 T CTFBottle::DefaultDeploy(char*, char*, int, char*)
 T CTFBottle::GetServerClass()
 T CTFBottle::GetWeaponID() const
 T CTFBottle::Smack()
 T CTFBottle::SwitchBodyGroups()
 T CTFBottle::WeaponReset()
 T CTFBottle::YouForgotToImplementOrDeclareServerClass()
 T CTFBottle::~CTFBottle()
 T CTFBuffItem::BlowHorn()
 T CTFBuffItem::CTFBuffItem()
 T CTFBuffItem::CanReload()
 T CTFBuffItem::CreateBanner()
 T CTFBuffItem::Detach()
 T CTFBuffItem::Equip(CBaseCombatCharacter*)
 T CTFBuffItem::GetBuffType()
 T CTFBuffItem::GetServerClass()
 T CTFBuffItem::GetWeaponID() const
 T CTFBuffItem::Holster(CBaseCombatWeapon*)
 T CTFBuffItem::IsFull()
 T CTFBuffItem::Precache()
 T CTFBuffItem::PrimaryAttack()
 T CTFBuffItem::RaiseFlag()
 T CTFBuffItem::SendWeaponAnim(int)
 T CTFBuffItem::WeaponReset()
 T CTFBuffItem::YouForgotToImplementOrDeclareServerClass()
 T CTFBuffItem::~CTFBuffItem()
 T CTFCannon::GetServerClass()
 T CTFCannon::GetWeaponID() const
 T CTFCannon::YouForgotToImplementOrDeclareServerClass()
 T CTFCannon::~CTFCannon()
 T CTFChargedSMG::ApplyOnHitAttributes(CBaseEntity*, CTFPlayer*, CTakeDamageInfo const&)
 T CTFChargedSMG::CanPerformSecondaryAttack() const
 T CTFChargedSMG::GetDataDescMap()
 T CTFChargedSMG::GetServerClass()
 T CTFChargedSMG::GetWeaponID() const
 T CTFChargedSMG::SecondaryAttack()
 T CTFChargedSMG::WeaponReset()
 T CTFChargedSMG::YouForgotToImplementOrDeclareServerClass()
 T CTFChargedSMG::~CTFChargedSMG()
 T CTFCleaver::CreateJarProjectile(Vector const&, QAngle const&, Vector const&, Vector const&, CBaseCombatCharacter*, CTFWeaponInfo const&)
 T CTFCleaver::GetAngularImpulse()
 T CTFCleaver::GetEffectLabelText()
 T CTFCleaver::GetProjectileSpeed()
 T CTFCleaver::GetServerClass()
 T CTFCleaver::GetVelocityVector(Vector const&, Vector const&, Vector const&)
 T CTFCleaver::GetWeaponID() const
 T CTFCleaver::InternalGetEffectBarRechargeTime()
 T CTFCleaver::SecondaryAttack()
 T CTFCleaver::ShouldSpeakWhenFiring()
 T CTFCleaver::YouForgotToImplementOrDeclareServerClass()
 T CTFCleaver::~CTFCleaver()
 T CTFClub::GetServerClass()
 T CTFClub::GetWeaponID() const
 T CTFClub::YouForgotToImplementOrDeclareServerClass()
 T CTFClub::~CTFClub()
 T CTFCompoundBow::AddPipeBomb(CTFGrenadePipebombProjectile*)
 T CTFCompoundBow::ApplyRefireSpeedModifications(float&)
 T CTFCompoundBow::CalcIsAttackCriticalHelper()
 T CTFCompoundBow::CanPickupOtherWeapon() const
 T CTFCompoundBow::CanReload()
 T CTFCompoundBow::DetonateRemotePipebombs(bool)
 T CTFCompoundBow::ForceLaunchGrenade()
 T CTFCompoundBow::GetChargeForceReleaseTime()
 T CTFCompoundBow::GetChargeMaxTime()
 T CTFCompoundBow::GetCurrentCharge()
 T CTFCompoundBow::GetDataDescMap()
 T CTFCompoundBow::GetProjectileDamage()
 T CTFCompoundBow::GetProjectileFireSetup(CTFPlayer*, Vector, Vector*, QAngle*, bool, float)
 T CTFCompoundBow::GetProjectileGravity()
 T CTFCompoundBow::GetProjectileSpeed()
 T CTFCompoundBow::GetServerClass()
 T CTFCompoundBow::GetWeaponID() const
 T CTFCompoundBow::Holster(CBaseCombatWeapon*)
 T CTFCompoundBow::ItemPostFrame()
 T CTFCompoundBow::LaunchGrenade()
 T CTFCompoundBow::LowerBow()
 T CTFCompoundBow::OwnerCanJump()
 T CTFCompoundBow::Precache()
 T CTFCompoundBow::PrimaryAttack()
 T CTFCompoundBow::Reload()
 T CTFCompoundBow::SecondaryAttack()
 T CTFCompoundBow::SendWeaponAnim(int)
 T CTFCompoundBow::SetArrowAlight(bool)
 T CTFCompoundBow::ShouldDoMuzzleFlash()
 T CTFCompoundBow::WeaponReset()
 T CTFCompoundBow::YouForgotToImplementOrDeclareServerClass()
 T CTFCompoundBow::~CTFCompoundBow()
 T CTFCondition::Add(float)
 T CTFCondition::IsHealable()
 T CTFCondition::UsesMinDuration()
 T CTFCondition::~CTFCondition()
 T CTFConditionList::Add(ETFCond, float, CTFPlayer*, CBaseEntity*)
 T CTFConditionList::CTFConditionList()
 T CTFConditionList::GetProvider(ETFCond) const
 T CTFConditionList::InCond(ETFCond) const
 T CTFConditionList::NetworkStateChanged()
 T CTFConditionList::NetworkStateChanged(void*)
 T CTFConditionList::Remove(ETFCond, bool)
 T CTFConditionList::RemoveAll()
 T CTFConditionList::ServerThink()
 T CTFConditionList::Think()
 T CTFConditionList::_Add(ETFCond, float, CTFPlayer*, CBaseEntity*)
 T CTFConditionList::_Remove(ETFCond, bool)
 T CTFConditionQuestCondition::BInitFromKV(KeyValues*, CUtlVector<CUtlString, CUtlMemory<CUtlString, int> >*)
 T CTFConditionQuestCondition::GetOutputKeyValues(KeyValues*)
 T CTFConditionQuestCondition::GetRequiredParamKeys(KeyValues*)
 T CTFConditionQuestCondition::GetValueString() const
 T CTFConditionQuestCondition::PassesRestrictions(IGameEvent*) const
 T CTFConditionQuestCondition::~CTFConditionQuestCondition()
 T CTFCondition_CritBoost::IsHealable()
 T CTFCondition_CritBoost::OnAdded()
 T CTFCondition_CritBoost::OnRemoved()
 T CTFCondition_CritBoost::OnServerThink()
 T CTFCondition_CritBoost::OnThink()
 T CTFCondition_CritBoost::UsesMinDuration()
 T CTFCondition_CritBoost::~CTFCondition_CritBoost()
 T CTFCraftingRecipeDefinition::ItemListMatchesInputs(CUtlVector<CEconItem*, CUtlMemory<CEconItem*, int> >*, KeyValues*, bool, CUtlVector<unsigned long long, CUtlMemory<unsigned long long, int> >*) const
 T CTFCraftingRecipeDefinition::~CTFCraftingRecipeDefinition()
 T CTFCrossbow::GetDataDescMap()
 T CTFCrossbow::GetProjectileGravity()
 T CTFCrossbow::GetProjectileSpeed()
 T CTFCrossbow::GetServerClass()
 T CTFCrossbow::GetWeaponID() const
 T CTFCrossbow::Holster(CBaseCombatWeapon*)
 T CTFCrossbow::IsViewModelFlipped()
 T CTFCrossbow::ItemPostFrame()
 T CTFCrossbow::ModifyProjectile(CBaseEntity*)
 T CTFCrossbow::SecondaryAttack()
 T CTFCrossbow::WeaponRegenerate()
 T CTFCrossbow::YouForgotToImplementOrDeclareServerClass()
 T CTFCrossbow::~CTFCrossbow()
 T CTFDRGPomson::GetIdleParticleEffect()
 T CTFDRGPomson::GetMuzzleFlashParticleEffect()
 T CTFDRGPomson::GetProjectileFireSetup(CTFPlayer*, Vector, Vector*, QAngle*, bool, float)
 T CTFDRGPomson::GetServerClass()
 T CTFDRGPomson::GetWeaponID() const
 T CTFDRGPomson::Precache()
 T CTFDRGPomson::YouForgotToImplementOrDeclareServerClass()
 T CTFDRGPomson::~CTFDRGPomson()
 T CTFDamageEvent::NetworkStateChanged()
 T CTFDamageEvent::NetworkStateChanged(void*)
 T CTFDecapitationMeleeWeaponBase::CanDecapitate()
 T CTFDecapitationMeleeWeaponBase::FireGameEvent(IGameEvent*)
 T CTFDecapitationMeleeWeaponBase::GetCustomDamageType() const
 T CTFDecapitationMeleeWeaponBase::GetMeleeDamage(CBaseEntity*, int*, int*)
 T CTFDecapitationMeleeWeaponBase::GetWeaponID() const
 T CTFDecapitationMeleeWeaponBase::Holster(CBaseCombatWeapon*)
 T CTFDecapitationMeleeWeaponBase::Precache()
 T CTFDecapitationMeleeWeaponBase::SetupGameEventListeners()
 T CTFDecapitationMeleeWeaponBase::TranslateViewmodelHandActivityInternal(Activity)
 T CTFDefendPointMission::GetDeployZone(CBasePlayer*) const
 T CTFDefendPointMission::GetEnemyZone() const
 T CTFDefendPointMission::GetName() const
 T CTFDefendPointMission::GetObjectiveZone() const
 T CTFDefendPointMission::~CTFDefendPointMission()
 T CTFDefendPointSniperZone::~CTFDefendPointSniperZone()
 T CTFDespawn::GetName() const
 T CTFDespawn::Update(CTFBot*, float)
 T CTFDespawn::~CTFDespawn()
 T CTFDroppedWeapon::CTFDroppedWeapon()
 T CTFDroppedWeapon::ChargeLevelDegradeThink()
 T CTFDroppedWeapon::Create(CTFPlayer*, Vector const&, QAngle const&, char const*, CEconItemView const*)
 T CTFDroppedWeapon::GetServerClass()
 T CTFDroppedWeapon::InitDroppedWeapon(CTFPlayer*, CTFWeaponBase*, bool, bool)
 T CTFDroppedWeapon::InitPickedUpWeapon(CTFPlayer*, CTFWeaponBase*)
 T CTFDroppedWeapon::NetworkVar_m_Item::NetworkStateChanged()
 T CTFDroppedWeapon::NetworkVar_m_Item::NetworkStateChanged(void*)
 T CTFDroppedWeapon::NetworkVar_m_Item::~NetworkVar_m_Item()
 T CTFDroppedWeapon::Spawn()
 T CTFDroppedWeapon::YouForgotToImplementOrDeclareServerClass()
 T CTFDroppedWeapon::~CTFDroppedWeapon()
 T CTFDuelSummary::~CTFDuelSummary()
 T CTFEventLog::Init()
 T CTFEventLog::PrintEvent(IGameEvent*)
 T CTFEventLog::PrintTFEvent(IGameEvent*)
 T CTFEventLog::~CTFEventLog()
 T CTFFireAxe::GetServerClass()
 T CTFFireAxe::GetWeaponID() const
 T CTFFireAxe::YouForgotToImplementOrDeclareServerClass()
 T CTFFireAxe::~CTFFireAxe()
 T CTFFists::AllowTaunts()
 T CTFFists::DoViewModelAnimation()
 T CTFFists::GetServerClass()
 T CTFFists::GetWeaponID() const
 T CTFFists::HideWhileStunned()
 T CTFFists::Holster(CBaseCombatWeapon*)
 T CTFFists::ItemPreFrame()
 T CTFFists::OnEntityHit(CBaseEntity*, CTakeDamageInfo*)
 T CTFFists::PrimaryAttack()
 T CTFFists::Punch()
 T CTFFists::SecondaryAttack()
 T CTFFists::SendPlayerAnimEvent(CTFPlayer*)
 T CTFFists::SetWeaponVisible(bool)
 T CTFFists::YouForgotToImplementOrDeclareServerClass()
 T CTFFists::~CTFFists()
 T CTFFlagEventTypeRestriction::BInitFromKV(KeyValues*, CUtlVector<CUtlString, CUtlMemory<CUtlString, int> >*)
 T CTFFlagEventTypeRestriction::GetOutputKeyValues(KeyValues*)
 T CTFFlagEventTypeRestriction::GetRequiredParamKeys(KeyValues*)
 T CTFFlagEventTypeRestriction::GetValueString() const
 T CTFFlagEventTypeRestriction::PassesRestrictions(IGameEvent*) const
 T CTFFlagEventTypeRestriction::~CTFFlagEventTypeRestriction()
 T CTFFlameEntity::Create(Vector const&, QAngle const&, CBaseEntity*, float, int, float, bool, bool)
 T CTFFlameEntity::FlameThink()
 T CTFFlameEntity::OnCollide(CBaseEntity*)
 T CTFFlameEntity::OnCollideWithTeammate(CTFPlayer*)
 T CTFFlameEntity::RemoveFlame()
 T CTFFlameEntity::Spawn()
 T CTFFlameEntity::~CTFFlameEntity()
 T CTFFlameThrower::CTFFlameThrower()
 T CTFFlameThrower::CalculateHalloweenSpell()
 T CTFFlameThrower::CanAirBlast() const
 T CTFFlameThrower::DecrementActiveFlameCount()
 T CTFFlameThrower::DecrementFlameDamageCount()
 T CTFFlameThrower::DeflectEntity(CBaseEntity*, CTFPlayer*, Vector&, Vector&, Vector&)
 T CTFFlameThrower::DeflectPlayer(CTFPlayer*, CTFPlayer*, Vector&, Vector&, Vector&)
 T CTFFlameThrower::Deploy()
 T CTFFlameThrower::DestroySounds()
 T CTFFlameThrower::FireAirBlast(int)
 T CTFFlameThrower::FireGameEvent(IGameEvent*)
 T CTFFlameThrower::GetBuffType()
 T CTFFlameThrower::GetDataDescMap()
 T CTFFlameThrower::GetDeflectionSize()
 T CTFFlameThrower::GetMuzzlePosHelper(bool)
 T CTFFlameThrower::GetServerClass()
 T CTFFlameThrower::GetWeaponID() const
 T CTFFlameThrower::HitTargetThink()
 T CTFFlameThrower::Holster(CBaseCombatWeapon*)
 T CTFFlameThrower::IncrementActiveFlameCount()
 T CTFFlameThrower::IncrementFlameDamageCount()
 T CTFFlameThrower::IsFiring() const
 T CTFFlameThrower::ItemPostFrame()
 T CTFFlameThrower::Lower()
 T CTFFlameThrower::PlayDeflectionSound(bool)
 T CTFFlameThrower::Precache()
 T CTFFlameThrower::PrimaryAttack()
 T CTFFlameThrower::ResetFlameHitCount()
 T CTFFlameThrower::SecondaryAttack()
 T CTFFlameThrower::SetHitTarget()
 T CTFFlameThrower::SetWeaponState(int)
 T CTFFlameThrower::Spawn()
 T CTFFlameThrower::SupportsAirBlastFunction(EFlameThrowerAirblastFunction) const
 T CTFFlameThrower::UseRage()
 T CTFFlameThrower::WeaponReset()
 T CTFFlameThrower::YouForgotToImplementOrDeclareServerClass()
 T CTFFlameThrower::~CTFFlameThrower()
 T CTFFlareGun::AddFlare(CTFProjectile_Flare*)
 T CTFFlareGun::CTFFlareGun()
 T CTFFlareGun::ChargePostFrame()
 T CTFFlareGun::DeathNotice(CBaseEntity*)
 T CTFFlareGun::Deploy()
 T CTFFlareGun::DestroySounds()
 T CTFFlareGun::GetChargeEffect() const
 T CTFFlareGun::GetDataDescMap()
 T CTFFlareGun::GetServerClass()
 T CTFFlareGun::GetWeaponID() const
 T CTFFlareGun::Holster(CBaseCombatWeapon*)
 T CTFFlareGun::ItemPostFrame()
 T CTFFlareGun::Precache()
 T CTFFlareGun::PrimaryAttack()
 T CTFFlareGun::SecondaryAttack()
 T CTFFlareGun::StartCharge()
 T CTFFlareGun::StopCharge()
 T CTFFlareGun::WeaponReset()
 T CTFFlareGun::YouForgotToImplementOrDeclareServerClass()
 T CTFFlareGun::~CTFFlareGun()
 T CTFFlareGun_Revenge::CTFFlareGun_Revenge()
 T CTFFlareGun_Revenge::ChargePostFrame()
 T CTFFlareGun_Revenge::Deploy()
 T CTFFlareGun_Revenge::Detach()
 T CTFFlareGun_Revenge::GetChargeEffect() const
 T CTFFlareGun_Revenge::GetCustomDamageType() const
 T CTFFlareGun_Revenge::GetMuzzleFlashParticleEffect()
 T CTFFlareGun_Revenge::GetServerClass()
 T CTFFlareGun_Revenge::GetWeaponID() const
 T CTFFlareGun_Revenge::Holster(CBaseCombatWeapon*)
 T CTFFlareGun_Revenge::IsEnergyWeapon() const
 T CTFFlareGun_Revenge::Precache()
 T CTFFlareGun_Revenge::PrimaryAttack()
 T CTFFlareGun_Revenge::ReadyToFireSound() const
 T CTFFlareGun_Revenge::SecondaryAttack()
 T CTFFlareGun_Revenge::YouForgotToImplementOrDeclareServerClass()
 T CTFFlareGun_Revenge::~CTFFlareGun_Revenge()
 T CTFForceRespawn::ForceRespawn(bool, int, bool)
 T CTFForceRespawn::GetDataDescMap()
 T CTFForceRespawn::InputForceRespawn(inputdata_t&)
 T CTFForceRespawn::InputForceRespawnSwitchTeams(inputdata_t&)
 T CTFForceRespawn::InputForceTeamRespawn(inputdata_t&)
 T CTFForceRespawn::~CTFForceRespawn()
 T CTFGCServerSystem::BLateJoinEligible()
 T CTFGCServerSystem::CTFGCServerSystem()
 T CTFGCServerSystem::ClientActive(CSteamID)
 T CTFGCServerSystem::ClientConnected(CSteamID, edict_t*)
 T CTFGCServerSystem::ClientDisconnected(CSteamID)
 T CTFGCServerSystem::CreateRematch(CMsgGCRematchRequest const&)
 T CTFGCServerSystem::EndManagedMatch(bool)
 T CTFGCServerSystem::FireGameEvent(IGameEvent*)
 T CTFGCServerSystem::GCKickedPlayer(CSteamID)
 T CTFGCServerSystem::GetLiveMatchPlayer(CSteamID)
 T CTFGCServerSystem::GetLobby() const
 T CTFGCServerSystem::GetPartyForPlayer(CSteamID) const
 T CTFGCServerSystem::HasLobby() const
 T CTFGCServerSystem::Init()
 T CTFGCServerSystem::LevelInitPreEntity()
 T CTFGCServerSystem::LevelShutdownPostEntity()
 T CTFGCServerSystem::MMServerModeChanged()
 T CTFGCServerSystem::MatchPlayerAbandonThink()
 T CTFGCServerSystem::MatchPlayerEjected(CSteamID, TFMatchLeaveReason)
 T CTFGCServerSystem::PostInitGC()
 T CTFGCServerSystem::PostSOUpdate(CSteamID const&, GCSDK::ESOCacheEvent)
 T CTFGCServerSystem::PreClientUpdate()
 T CTFGCServerSystem::PreInitGC()
 T CTFGCServerSystem::PreSOUpdate(CSteamID const&, GCSDK::ESOCacheEvent)
 T CTFGCServerSystem::SOCacheSubscribed(CSteamID const&, GCSDK::ESOCacheEvent)
 T CTFGCServerSystem::SOCacheUnsubscribed(CSteamID const&, GCSDK::ESOCacheEvent)
 T CTFGCServerSystem::SOCreated(CSteamID const&, GCSDK::CSharedObject const*, GCSDK::ESOCacheEvent)
 T CTFGCServerSystem::SODestroyed(CSteamID const&, GCSDK::CSharedObject const*, GCSDK::ESOCacheEvent)
 T CTFGCServerSystem::SOUpdated(CSteamID const&, GCSDK::CSharedObject const*, GCSDK::ESOCacheEvent)
 T CTFGCServerSystem::SendCompetitiveMatchResult(GCSDK::CProtoBufMsg<CMsgGC_Match_Result>*)
 T CTFGCServerSystem::SendMvMVictoryResult()
 T CTFGCServerSystem::SendPlayerLeftMatch(CSteamID, TFMatchLeaveReason, bool)
 T CTFGCServerSystem::SendRejectLobby()
 T CTFGCServerSystem::SetHibernation(bool)
 T CTFGCServerSystem::SetMatchPlayerDropped(CSteamID, TFMatchLeaveReason)
 T CTFGCServerSystem::ShouldHibernate()
 T CTFGCServerSystem::ShouldHideServer()
 T CTFGCServerSystem::Shutdown()
 T CTFGCServerSystem::SteamIDAllowedToConnect(CSteamID const&) const
 T CTFGCServerSystem::UpdateConnectedPlayersAndServerInfo(CMsgGameServerMatchmakingStatus_Event, bool)
 T CTFGCServerSystem::UpdateServerDetails()
 T CTFGCServerSystem::~CTFGCServerSystem()
 T CTFGSLobby::GetMannUpTourName() const
 T CTFGSLobby::GetMember(int) const
 T CTFGSLobby::GetMemberConnectState(int) const
 T CTFGSLobby::GetMemberDetails(CSteamID) const
 T CTFGSLobby::GetMemberDetails(int) const
 T CTFGSLobby::SpewDebug()
 T CTFGSLobby::~CTFGSLobby()
 T CTFGameModeHistory::Init()
 T CTFGameModeHistory::~CTFGameModeHistory()
 T CTFGameMovement::AirDash()
 T CTFGameMovement::AirMove()
 T CTFGameMovement::CanAccelerate()
 T CTFGameMovement::CategorizePosition()
 T CTFGameMovement::ChargeMove()
 T CTFGameMovement::CheckFalling()
 T CTFGameMovement::CheckJumpButton()
 T CTFGameMovement::CheckKartWallBumping()
 T CTFGameMovement::CheckStuck()
 T CTFGameMovement::CheckWater()
 T CTFGameMovement::CheckWaterJump()
 T CTFGameMovement::CheckWaterJumpButton()
 T CTFGameMovement::Duck()
 T CTFGameMovement::DuckOverrides()
 T CTFGameMovement::FullTossMove()
 T CTFGameMovement::FullWalkMove()
 T CTFGameMovement::FullWalkMoveUnderwater()
 T CTFGameMovement::GameHasLadders() const
 T CTFGameMovement::GetAirSpeedCap()
 T CTFGameMovement::GetPlayerViewOffset(bool) const
 T CTFGameMovement::GrapplingHookMove()
 T CTFGameMovement::HandleDuckingSpeedCrop()
 T CTFGameMovement::HighMaxSpeedMove()
 T CTFGameMovement::OnDuck(int)
 T CTFGameMovement::OnUnDuck(int)
 T CTFGameMovement::PlayerMove()
 T CTFGameMovement::PlayerRoughLandingEffects(float)
 T CTFGameMovement::PlayerSolidMask(bool)
 T CTFGameMovement::ProcessMovement(CBasePlayer*, CMoveData*)
 T CTFGameMovement::SetGroundEntity(CGameTrace*)
 T CTFGameMovement::StepMove(Vector&, CGameTrace&)
 T CTFGameMovement::StunMove()
 T CTFGameMovement::TauntMove()
 T CTFGameMovement::TestPlayerPosition(Vector const&, int, CGameTrace&)
 T CTFGameMovement::ToggleParachute()
 T CTFGameMovement::TracePlayerBBox(Vector const&, Vector const&, unsigned int, int, CGameTrace&)
 T CTFGameMovement::VehicleMove()
 T CTFGameMovement::WalkMove()
 T CTFGameMovement::WaterMove()
 T CTFGameMovement::~CTFGameMovement()
 T CTFGameRules::Activate()
 T CTFGameRules::AddActiveBoss(CBaseCombatCharacter*)
 T CTFGameRules::AddPlayerToQueue(CTFPlayer*)
 T CTFGameRules::AddPlayerToQueueHead(CTFPlayer*)
 T CTFGameRules::AllowDamage(CBaseEntity*, CTakeDamageInfo const&)
 T CTFGameRules::AllowThirdPersonCamera()
 T CTFGameRules::ApplyOnDamageAliveModifyRules(CTakeDamageInfo const&, CBaseEntity*, CTFGameRules::DamageModifyExtras_t&)
 T CTFGameRules::ApplyOnDamageModifyRules(CTakeDamageInfo&, CBaseEntity*, bool)
 T CTFGameRules::Arena_CleanupPlayerQueue()
 T CTFGameRules::Arena_ClientDisconnect(char const*)
 T CTFGameRules::Arena_NotifyTeamSizeChange()
 T CTFGameRules::Arena_PlayersNeededForMatch()
 T CTFGameRules::Arena_PrepareNewPlayerQueue(bool)
 T CTFGameRules::Arena_RunTeamLogic()
 T CTFGameRules::Arena_SendPlayerNotifications()
 T CTFGameRules::BHavePlayers()
 T CTFGameRules::BeginHaunting(int, float, float)
 T CTFGameRules::BetweenRounds_End()
 T CTFGameRules::BetweenRounds_Start()
 T CTFGameRules::BetweenRounds_Think()
 T CTFGameRules::BonusStateThink()
 T CTFGameRules::BroadcastDrawLine(CTFPlayer*, KeyValues*)
 T CTFGameRules::CTFGameRules()
 T CTFGameRules::CalcDominationAndRevenge(CTFPlayer*, CBaseEntity*, CTFPlayer*, bool, int*)
 T CTFGameRules::CalcPlayerScore(RoundStats_t*, CTFPlayer*)
 T CTFGameRules::CalcPlayerSupportScore(RoundStats_t*, int)
 T CTFGameRules::CalculateCurrencyAmount_ByType(CurrencyRewards_t)
 T CTFGameRules::CalculateCurrencyAmount_CustomPack(int)
 T CTFGameRules::CanBotChangeClass(CBasePlayer*)
 T CTFGameRules::CanBotChooseClass(CBasePlayer*, int)
 T CTFGameRules::CanChangeClassInStalemate()
 T CTFGameRules::CanChangeTeam(int) const
 T CTFGameRules::CanChangelevelBecauseOfTimeLimit()
 T CTFGameRules::CanFlagBeCaptured(CBaseEntity*)
 T CTFGameRules::CanGoToStalemate()
 T CTFGameRules::CanHaveAmmo(CBaseCombatCharacter*, int)
 T CTFGameRules::CanPlayerChooseClass(CBasePlayer*, int)
 T CTFGameRules::CanUpgradeWithAttrib(CTFPlayer*, int, unsigned short, CMannVsMachineUpgrades*)
 T CTFGameRules::ChangePlayerName(CTFPlayer*, char const*)
 T CTFGameRules::CheckCapsPerRound()
 T CTFGameRules::CheckHelltowerCartAchievement(int)
 T CTFGameRules::CheckRespawnWaves()
 T CTFGameRules::CheckTauntAchievement(CTFPlayer*, int, int*)
 T CTFGameRules::CheckWinLimit(bool)
 T CTFGameRules::CleanUpMap()
 T CTFGameRules::ClearHalloweenEffectStatus()
 T CTFGameRules::ClientCommand(CBaseEntity*, CCommand const&)
 T CTFGameRules::ClientCommandKeyValues(edict_t*, KeyValues*)
 T CTFGameRules::ClientConnected(edict_t*, char const*, char const*, char*, int)
 T CTFGameRules::ClientDisconnected(edict_t*)
 T CTFGameRules::ClientSettingsChanged(CBasePlayer*)
 T CTFGameRules::ClientSpawned(edict_t*)
 T CTFGameRules::CollectCapturePoints(CBasePlayer*, CUtlVector<CTeamControlPoint*, CUtlMemory<CTeamControlPoint*, int> >*) const
 T CTFGameRules::CollectDefendPoints(CBasePlayer*, CUtlVector<CTeamControlPoint*, CUtlMemory<CTeamControlPoint*, int> >*) const
 T CTFGameRules::ComputeHealthAndAmmoVectors()
 T CTFGameRules::CreateStandardEntities()
 T CTFGameRules::Damage_GetShouldNotBleed()
 T CTFGameRules::Damage_GetShowOnHud()
 T CTFGameRules::Damage_GetTimeBased()
 T CTFGameRules::Damage_IsTimeBased(int)
 T CTFGameRules::Damage_ShouldNotBleed(int)
 T CTFGameRules::Damage_ShowOnHUD(int)
 T CTFGameRules::DeathNotice(CBasePlayer*, CTakeDamageInfo const&)
 T CTFGameRules::DeathNotice(CBasePlayer*, CTakeDamageInfo const&, char const*)
 T CTFGameRules::DefaultFOV()
 T CTFGameRules::DistributeCurrencyAmount(int, CTFPlayer*, bool, bool, bool)
 T CTFGameRules::DropBonusDuck(Vector const&, CTFPlayer*, CTFPlayer*, CTFPlayer*, bool, bool) const
 T CTFGameRules::DropHalloweenSoulPack(int, Vector const&, CBaseEntity*, int)
 T CTFGameRules::DropHalloweenSoulPackToTeam(int, Vector const&, int, int)
 T CTFGameRules::DropSpellPickup(Vector const&, int) const
 T CTFGameRules::EndCompetitiveMatch()
 T CTFGameRules::EndManagedMvMMatch(bool)
 T CTFGameRules::FPlayerCanTakeDamage(CBasePlayer*, CBaseEntity*, CTakeDamageInfo const&)
 T CTFGameRules::FillOutTeamplayRoundWinEvent(IGameEvent*)
 T CTFGameRules::FireGameEvent(IGameEvent*)
 T CTFGameRules::FlItemRespawnTime(CItem*)
 T CTFGameRules::FlPlayerFallDamage(CBasePlayer*)
 T CTFGameRules::FlPlayerFallDeathDoesScreenFade(CBasePlayer*)
 T CTFGameRules::FlagsMayBeCapped()
 T CTFGameRules::FrameUpdatePostEntityThink()
 T CTFGameRules::GameModeUsesUpgrades()
 T CTFGameRules::GetAmmoEntityVector()
 T CTFGameRules::GetAssignedHumanTeam()
 T CTFGameRules::GetAssister(CBasePlayer*, CBasePlayer*, CBaseEntity*)
 T CTFGameRules::GetAutoAimMode()
 T CTFGameRules::GetBonusRoundTime(bool)
 T CTFGameRules::GetCaptureValueForPlayer(CBasePlayer*)
 T CTFGameRules::GetChatFormat(bool, CBasePlayer*)
 T CTFGameRules::GetCostForUpgrade(CMannVsMachineUpgrades*, int, int, CTFPlayer*)
 T CTFGameRules::GetCurrentMatchGroup() const
 T CTFGameRules::GetDeathScorer(CBaseEntity*, CBaseEntity*, CBaseEntity*)
 T CTFGameRules::GetEncryptionKey()
 T CTFGameRules::GetFarthestOwnedControlPoint(int, bool)
 T CTFGameRules::GetGameDescription()
 T CTFGameRules::GetGameType()
 T CTFGameRules::GetGameTypeName()
 T CTFGameRules::GetHalloweenScenario() const
 T CTFGameRules::GetHealthEntityVector()
 T CTFGameRules::GetKillingWeaponName(CTakeDamageInfo const&, CTFPlayer*, int*)
 T CTFGameRules::GetNextMvMPopfile()
 T CTFGameRules::GetPayloadToBlock(int) const
 T CTFGameRules::GetPayloadToPush(int) const
 T CTFGameRules::GetPlayerSpawnSpot(CBasePlayer*)
 T CTFGameRules::GetRecentDamager(CTFPlayer*, int, float)
 T CTFGameRules::GetRespawnTimeScalar(int)
 T CTFGameRules::GetRespawnWaveMaxLength(int, bool)
 T CTFGameRules::GetStalemateSong(int)
 T CTFGameRules::GetStatsMinimumPlayedTime()
 T CTFGameRules::GetStatsMinimumPlayers()
 T CTFGameRules::GetTaggedConVarList(KeyValues*)
 T CTFGameRules::GetTeamAssignmentOverride(CTFPlayer*, int)
 T CTFGameRules::GetTeamForLobbyTeam(TF_GC_TEAM)
 T CTFGameRules::GetUpgradeTier(int)
 T CTFGameRules::GetViewVectors() const
 T CTFGameRules::GoToIntermission()
 T CTFGameRules::HandleCTFCaptureBonus(int)
 T CTFGameRules::HandleMapEvent(inputdata_t&)
 T CTFGameRules::HandleScrambleTeams()
 T CTFGameRules::HandleSwitchTeams()
 T CTFGameRules::HandleTeamScoreModify(int, int)
 T CTFGameRules::HasPassedMinRespawnTime(CBasePlayer*)
 T CTFGameRules::InitCustomResponseRulesDicts()
 T CTFGameRules::InitTeams()
 T CTFGameRules::InternalHandleTeamWin(int)
 T CTFGameRules::IsBirthday() const
 T CTFGameRules::IsCompetitiveMode() const
 T CTFGameRules::IsConnectedUserInfoChangeAllowed(CBasePlayer*)
 T CTFGameRules::IsDefaultGameMode()
 T CTFGameRules::IsFirstBloodAllowed()
 T CTFGameRules::IsHolidayActive(int) const
 T CTFGameRules::IsInArenaMode() const
 T CTFGameRules::IsInItemTestingMode()
 T CTFGameRules::IsInKothMode() const
 T CTFGameRules::IsInTraining()
 T CTFGameRules::IsManagedMatchEnded() const
 T CTFGameRules::IsMatchTypeCompetitive() const
 T CTFGameRules::IsPVEModeActive() const
 T CTFGameRules::IsPVEModeControlled(CBaseEntity*) const
 T CTFGameRules::IsQuickBuildTime()
 T CTFGameRules::IsSpawnPointValid(CBaseEntity*, CBasePlayer*, bool, PlayerTeamSpawnMode_t)
 T CTFGameRules::IsTruceActive() const
 T CTFGameRules::IsUpgradeTierEnabled(CTFPlayer*, int, int)
 T CTFGameRules::IsUsingGrapplingHook() const
 T CTFGameRules::IsUsingSpells() const
 T CTFGameRules::IsValveMap()
 T CTFGameRules::ItemShouldRespawn(CItem*)
 T CTFGameRules::ItemTesting_SetupFromKV(KeyValues*)
 T CTFGameRules::LevelInitPostEntity()
 T CTFGameRules::LevelShutdown()
 T CTFGameRules::LoadMapCycleFile()
 T CTFGameRules::LoadMapCycleFileIntoVector(char const*, CUtlVector<char*, CUtlMemory<char*, int> >&)
 T CTFGameRules::LoadNextTrainingMap()
 T CTFGameRules::LoseSongName(int)
 T CTFGameRules::ManageCompetitiveMode()
 T CTFGameRules::ManageServerSideVoteCreation()
 T CTFGameRules::ManageStopwatchTimer(bool)
 T CTFGameRules::MatchSummaryEnd()
 T CTFGameRules::MatchSummaryStart()
 T CTFGameRules::MatchSummaryTeleport()
 T CTFGameRules::MatchmakingShouldUseStopwatchMode()
 T CTFGameRules::OnCoachJoining(unsigned int, unsigned int)
 T CTFGameRules::OnDispenserBuilt(CBaseEntity*)
 T CTFGameRules::OnDispenserDestroyed(CBaseEntity*)
 T CTFGameRules::OnFileReceived(char const*, unsigned int)
 T CTFGameRules::OnNavMeshLoad()
 T CTFGameRules::OnPlayerLeftParty(CSteamID)
 T CTFGameRules::OnPlayerSpawned(CTFPlayer*)
 T CTFGameRules::OnRemoveCoach(unsigned int)
 T CTFGameRules::OnWorkshopMapUpdated(unsigned long long)
 T CTFGameRules::PeriodicHalloweenUpdate()
 T CTFGameRules::PlayHelltowerAnnouncerVO(int, int)
 T CTFGameRules::PlaySpecialCapSounds(int, CTeamControlPoint*)
 T CTFGameRules::PlayTrainCaptureAlert(CTeamControlPoint*, bool)
 T CTFGameRules::PlayWinSong(int)
 T CTFGameRules::PlayerArenaRoundScoreSortFunc(PlayerArenaRoundScore_t const*, PlayerArenaRoundScore_t const*)
 T CTFGameRules::PlayerHistory_AddPlayer(CTFPlayer*)
 T CTFGameRules::PlayerHistory_GetPlayerInfo(CTFPlayer*)
 T CTFGameRules::PlayerHistory_GetTimeSinceLastSeen(CTFPlayer*)
 T CTFGameRules::PlayerKilled(CBasePlayer*, CTakeDamageInfo const&)
 T CTFGameRules::PlayerKilledCheckAchievements(CTFPlayer*, CTFPlayer*)
 T CTFGameRules::PlayerMayBlockPoint(CBasePlayer*, int, char*, int)
 T CTFGameRules::PlayerMayCapturePoint(CBasePlayer*, int, char*, int)
 T CTFGameRules::PlayerReadyStatus_ArePlayersOnTeamReady(int)
 T CTFGameRules::PlayerReadyStatus_HaveMinPlayersToEnable()
 T CTFGameRules::PlayerReadyStatus_ResetState()
 T CTFGameRules::PlayerReadyStatus_ShouldStartCountdown()
 T CTFGameRules::PlayerReadyStatus_UpdatePlayerState(CTFPlayer*, bool)
 T CTFGameRules::PlayerRoundScoreSortFunc(PlayerRoundScore_t const*, PlayerRoundScore_t const*)
 T CTFGameRules::PointsMayAlwaysBeBlocked()
 T CTFGameRules::PointsMayBeCaptured()
 T CTFGameRules::PowerupModeFlagStandoffActive()
 T CTFGameRules::PowerupTeamImbalance(int)
 T CTFGameRules::PreRound_End()
 T CTFGameRules::PreRound_Start()
 T CTFGameRules::Precache()
 T CTFGameRules::PreviousRoundEnd()
 T CTFGameRules::ProcessVerboseLogOutput()
 T CTFGameRules::PushAllPlayersAway(Vector const&, float, float, int, CUtlVector<CTFPlayer*, CUtlMemory<CTFPlayer*, int> >*)
 T CTFGameRules::RadiusDamage(CTFRadiusDamageInfo&)
 T CTFGameRules::RadiusDamage(CTakeDamageInfo const&, Vector const&, float, int, CBaseEntity*)
 T CTFGameRules::RecalculateControlPointState()
 T CTFGameRules::RecalculateTruce()
 T CTFGameRules::RematchLobbyCreationFailed()
 T CTFGameRules::RemoveAllBuildings(bool)
 T CTFGameRules::RemoveAllProjectiles()
 T CTFGameRules::RemoveAllProjectilesAndBuildings(bool)
 T CTFGameRules::RemoveAllSentriesAmmo()
 T CTFGameRules::RemovePlayerFromQueue(CTFPlayer*)
 T CTFGameRules::ReportMatchResultsToGC(CMsgGC_Match_Result_Status)
 T CTFGameRules::RespawnPlayers(bool, bool, int)
 T CTFGameRules::RespawnTeam(int)
 T CTFGameRules::RestartTournament()
 T CTFGameRules::RestoreActiveTimer()
 T CTFGameRules::RoundCleanupShouldIgnore(CBaseEntity*)
 T CTFGameRules::RoundRespawn()
 T CTFGameRules::SendArenaWinPanelInfo()
 T CTFGameRules::SendHudNotification(IRecipientFilter&, HudNotification_t, bool)
 T CTFGameRules::SendHudNotification(IRecipientFilter&, char const*, char const*, int)
 T CTFGameRules::SendTeamScoresEvent()
 T CTFGameRules::SendWinPanelInfo(bool)
 T CTFGameRules::SetCompetitiveMode(bool)
 T CTFGameRules::SetCtfWinningTeam()
 T CTFGameRules::SetCurrentRoundStateBitString()
 T CTFGameRules::SetCustomUpgradesFile(inputdata_t&)
 T CTFGameRules::SetHalloweenEffectStatus(int, float)
 T CTFGameRules::SetIT(CBaseEntity*)
 T CTFGameRules::SetNextMvMPopfile(char const*)
 T CTFGameRules::SetRoundOverlayDetails()
 T CTFGameRules::SetSetup(bool)
 T CTFGameRules::SetStalemate(int, bool, bool)
 T CTFGameRules::SetWinningTeam(int, int, bool, bool, bool, bool)
 T CTFGameRules::SetupOnBonusEnd()
 T CTFGameRules::SetupOnBonusStart()
 T CTFGameRules::SetupOnRoundRunning()
 T CTFGameRules::SetupOnRoundStart()
 T CTFGameRules::SetupOnStalemateEnd()
 T CTFGameRules::SetupOnStalemateStart()
 T CTFGameRules::SetupSpawnPointsForRound()
 T CTFGameRules::ShouldBalanceTeams()
 T CTFGameRules::ShouldCollide(int, int)
 T CTFGameRules::ShouldCreateEntity(char const*)
 T CTFGameRules::ShouldDrawHeadLabels()
 T CTFGameRules::ShouldDropBonusDuck()
 T CTFGameRules::ShouldGoToBonusRound()
 T CTFGameRules::ShouldMakeChristmasAmmoPack()
 T CTFGameRules::ShouldRespawnQuickly(CBasePlayer*)
 T CTFGameRules::ShouldScorePerRound()
 T CTFGameRules::ShouldScrambleTeams()
 T CTFGameRules::ShouldSkipAutoScramble()
 T CTFGameRules::ShouldSwitchTeams()
 T CTFGameRules::ShouldWaitToStartRecording()
 T CTFGameRules::ShowRoundInfoPanel(CTFPlayer*)
 T CTFGameRules::ShutdownCustomResponseRulesDicts()
 T CTFGameRules::SpawnHalloweenBoss()
 T CTFGameRules::SpawnPlayerInHell(CTFPlayer*, char const*)
 T CTFGameRules::SpawnZombieMob()
 T CTFGameRules::StartCompetitiveMatch()
 T CTFGameRules::StartManagedMatch()
 T CTFGameRules::Status(void (*)(char const*, ...))
 T CTFGameRules::StopCompetitiveMatch(CMsgGC_Match_Result_Status)
 T CTFGameRules::StopWatchModeThink()
 T CTFGameRules::StopWatchShouldBeTimedWin()
 T CTFGameRules::StopWatchShouldBeTimedWin_Calculate()
 T CTFGameRules::SwitchToNextBestWeapon(CBaseCombatCharacter*, CBaseCombatWeapon*)
 T CTFGameRules::SyncMatchSettings()
 T CTFGameRules::TFVoiceManager(CBasePlayer*, CBasePlayer*)
 T CTFGameRules::TacticalMissionManagerFactory()
 T CTFGameRules::TeamMayCapturePoint(int, int)
 T CTFGameRules::TeamPlayerCountChanged(CTFTeam*)
 T CTFGameRules::TeleportPlayersToTargetEntities(int, char const*, CUtlVector<CTFPlayer*, CUtlMemory<CTFPlayer*, int> >*)
 T CTFGameRules::Think()
 T CTFGameRules::TimerMayExpire()
 T CTFGameRules::TournamentModeCanEndWithTimelimit()
 T CTFGameRules::TrackWorkshopMapsInMapCycle()
 T CTFGameRules::UsePlayerReadyStatusMode()
 T CTFGameRules::UseSuicidePenalty()
 T CTFGameRules::VecItemRespawnAngles(CItem*)
 T CTFGameRules::VecItemRespawnSpot(CItem*)
 T CTFGameRules::VoiceCommand(CBaseMultiplayerPlayer*, int, int)
 T CTFGameRules::WinSongName(int)
 T CTFGameRules::~CTFGameRules()
 T CTFGameRulesProxy::Activate()
 T CTFGameRulesProxy::FireGameEvent(IGameEvent*)
 T CTFGameRulesProxy::GetDataDescMap()
 T CTFGameRulesProxy::GetServerClass()
 T CTFGameRulesProxy::InputAddBlueTeamRespawnWaveTime(inputdata_t&)
 T CTFGameRulesProxy::InputAddBlueTeamScore(inputdata_t&)
 T CTFGameRulesProxy::InputAddRedTeamRespawnWaveTime(inputdata_t&)
 T CTFGameRulesProxy::InputAddRedTeamScore(inputdata_t&)
 T CTFGameRulesProxy::InputHandleMapEvent(inputdata_t&)
 T CTFGameRulesProxy::InputPlayVO(inputdata_t&)
 T CTFGameRulesProxy::InputPlayVOBlue(inputdata_t&)
 T CTFGameRulesProxy::InputPlayVORed(inputdata_t&)
 T CTFGameRulesProxy::InputSetBlueKothClockActive(inputdata_t&)
 T CTFGameRulesProxy::InputSetBlueTeamGoalString(inputdata_t&)
 T CTFGameRulesProxy::InputSetBlueTeamRespawnWaveTime(inputdata_t&)
 T CTFGameRulesProxy::InputSetBlueTeamRole(inputdata_t&)
 T CTFGameRulesProxy::InputSetCTFCaptureBonusTime(inputdata_t&)
 T CTFGameRulesProxy::InputSetCustomUpgradesFile(inputdata_t&)
 T CTFGameRulesProxy::InputSetMapForcedTruceDuringBossFight(inputdata_t&)
 T CTFGameRulesProxy::InputSetRedKothClockActive(inputdata_t&)
 T CTFGameRulesProxy::InputSetRedTeamGoalString(inputdata_t&)
 T CTFGameRulesProxy::InputSetRedTeamRespawnWaveTime(inputdata_t&)
 T CTFGameRulesProxy::InputSetRedTeamRole(inputdata_t&)
 T CTFGameRulesProxy::InputSetRequiredObserverTarget(inputdata_t&)
 T CTFGameRulesProxy::InputSetRoundRespawnFreezeEnabled(inputdata_t&)
 T CTFGameRulesProxy::TeamPlayerCountChanged(CTFTeam*)
 T CTFGameRulesProxy::YouForgotToImplementOrDeclareServerClass()
 T CTFGameRulesProxy::~CTFGameRulesProxy()
 T CTFGameStats::AccumulateGameData()
 T CTFGameStats::AccumulateVoteData()
 T CTFGameStats::AddDataForSend(KeyValues*, StatSendType_t)
 T CTFGameStats::CTFGameStats()
 T CTFGameStats::Clear()
 T CTFGameStats::Event_AssistDestroyBuilding(CTFPlayer*, CBaseObject*)
 T CTFGameStats::Event_AssistKill(CTFPlayer*, CBaseEntity*)
 T CTFGameStats::Event_Backstab(CTFPlayer*)
 T CTFGameStats::Event_BossDamage(CBasePlayer*, int)
 T CTFGameStats::Event_HalloweenBossEvent(unsigned char, unsigned short, unsigned char, unsigned char, float)
 T CTFGameStats::Event_Headshot(CTFPlayer*, bool)
 T CTFGameStats::Event_KillDetail(CTFPlayer*, CTFPlayer*, CTFPlayer*, IGameEvent*, CTakeDamageInfo const&)
 T CTFGameStats::Event_LevelInit()
 T CTFGameStats::Event_LevelShutdown(float)
 T CTFGameStats::Event_PlayerAmmokitPickup(CTFPlayer*)
 T CTFGameStats::Event_PlayerAwardBonusPoints(CTFPlayer*, CBaseEntity*, int)
 T CTFGameStats::Event_PlayerBlockedDamage(CTFPlayer*, int)
 T CTFGameStats::Event_PlayerCapturedPoint(CTFPlayer*)
 T CTFGameStats::Event_PlayerChangedClass(CTFPlayer*, int, int)
 T CTFGameStats::Event_PlayerCollectedCurrency(CBasePlayer*, int)
 T CTFGameStats::Event_PlayerConnected(CBasePlayer*)
 T CTFGameStats::Event_PlayerCreatedBuilding(CTFPlayer*, CBaseObject*)
 T CTFGameStats::Event_PlayerDamage(CBasePlayer*, CTakeDamageInfo const&, int)
 T CTFGameStats::Event_PlayerDamageAssist(CBasePlayer*, int)
 T CTFGameStats::Event_PlayerDefendedPoint(CTFPlayer*)
 T CTFGameStats::Event_PlayerDestroyedBuilding(CTFPlayer*, CBaseObject*)
 T CTFGameStats::Event_PlayerDisconnectedTF(CTFPlayer*)
 T CTFGameStats::Event_PlayerDominatedOther(CTFPlayer*)
 T CTFGameStats::Event_PlayerEarnedKillStreak(CTFPlayer*)
 T CTFGameStats::Event_PlayerFiredWeapon(CTFPlayer*, bool)
 T CTFGameStats::Event_PlayerForceRespawn(CTFPlayer*)
 T CTFGameStats::Event_PlayerHealedOther(CTFPlayer*, float)
 T CTFGameStats::Event_PlayerHealedOtherAssist(CTFPlayer*, float)
 T CTFGameStats::Event_PlayerHealthkitPickup(CTFPlayer*)
 T CTFGameStats::Event_PlayerInvulnerable(CTFPlayer*)
 T CTFGameStats::Event_PlayerKilled(CBasePlayer*, CTakeDamageInfo const&)
 T CTFGameStats::Event_PlayerKilledOther(CBasePlayer*, CBaseEntity*, CTakeDamageInfo const&)
 T CTFGameStats::Event_PlayerLeachedHealth(CTFPlayer*, bool, float)
 T CTFGameStats::Event_PlayerLoadoutChanged(CTFPlayer*, bool)
 T CTFGameStats::Event_PlayerReturnedFlag(CTFPlayer*)
 T CTFGameStats::Event_PlayerRevenge(CTFPlayer*)
 T CTFGameStats::Event_PlayerRevived(CTFPlayer*)
 T CTFGameStats::Event_PlayerScoresEscortPoints(CTFPlayer*, int)
 T CTFGameStats::Event_PlayerSpawned(CTFPlayer*)
 T CTFGameStats::Event_PlayerStunBall(CTFPlayer*, bool)
 T CTFGameStats::Event_PlayerSuicide(CBasePlayer*)
 T CTFGameStats::Event_PlayerUsedTeleport(CTFPlayer*, CTFPlayer*)
 T CTFGameStats::Event_PowerUpModeDeath(CTFPlayer*, CTFPlayer*)
 T CTFGameStats::Event_PowerUpRuneDuration(CTFPlayer*, int, int)
 T CTFGameStats::Event_RoundEnd(int, bool, float, bool)
 T CTFGameStats::Event_TeamChange(CTFPlayer*, int, int)
 T CTFGameStats::FindPlayerStats(CBasePlayer*)
 T CTFGameStats::FireGameEvent(IGameEvent*)
 T CTFGameStats::GetVoteData(char const*, int, CUtlVector<char const*, CUtlMemory<char const*, int> >&)
 T CTFGameStats::Init()
 T CTFGameStats::LevelInitPreEntity()
 T CTFGameStats::LevelShutdownPreClearSteamAPIContext()
 T CTFGameStats::ResetKillHistory(CTFPlayer*)
 T CTFGameStats::ResetPlayerStats(CTFPlayer*)
 T CTFGameStats::ResetRoundStats()
 T CTFGameStats::SW_ClassChange(CTFPlayer*, int, int)
 T CTFGameStats::SW_GameEvent(CTFPlayer*, char const*, int)
 T CTFGameStats::SW_GameStats_WriteKill(CTFPlayer*, CTFPlayer*, CTFPlayer*, IGameEvent*, CTakeDamageInfo const&)
 T CTFGameStats::SW_GameStats_WriteMap()
 T CTFGameStats::SW_GameStats_WritePlayer(CTFPlayer*, bool)
 T CTFGameStats::SW_GameStats_WriteRound(int, bool, int)
 T CTFGameStats::SW_PasstimeRoundEnded()
 T CTFGameStats::SW_WriteHostsRow()
 T CTFGameStats::SendStatsToPlayer(CTFPlayer*, bool)
 T CTFGameStats::StoreGameEndReason(char const*)
 T CTFGameStats::UseOldFormat()
 T CTFGameStats::~CTFGameStats()
 T CTFGenericBomb::Detonate(inputdata_t&)
 T CTFGenericBomb::Event_Killed(CTakeDamageInfo const&)
 T CTFGenericBomb::GenericTouch(CBaseEntity*)
 T CTFGenericBomb::GetDataDescMap()
 T CTFGenericBomb::GetServerClass()
 T CTFGenericBomb::Precache()
 T CTFGenericBomb::Spawn()
 T CTFGenericBomb::YouForgotToImplementOrDeclareServerClass()
 T CTFGenericBomb::~CTFGenericBomb()
 T CTFGenericBombShim::Touch(CBaseEntity*)
 T CTFGenericBombShim::~CTFGenericBombShim()
 T CTFGenericStringRestriction::BInitFromKV(KeyValues*, CUtlVector<CUtlString, CUtlMemory<CUtlString, int> >*)
 T CTFGenericStringRestriction::GetConditionName() const
 T CTFGenericStringRestriction::GetOutputKeyValues(KeyValues*)
 T CTFGenericStringRestriction::GetRequiredParamKeys(KeyValues*)
 T CTFGenericStringRestriction::PassesRestrictions(IGameEvent*) const
 T CTFGenericStringRestriction::~CTFGenericStringRestriction()
 T CTFGenericSubStringRestriction::PassesRestrictions(IGameEvent*) const
 T CTFGenericSubStringRestriction::~CTFGenericSubStringRestriction()
 T CTFGlow::GetDataDescMap()
 T CTFGlow::GetServerClass()
 T CTFGlow::InputDisable(inputdata_t&)
 T CTFGlow::InputEnable(inputdata_t&)
 T CTFGlow::InputSetGlowColor(inputdata_t&)
 T CTFGlow::Spawn()
 T CTFGlow::UpdateTransmitState()
 T CTFGlow::YouForgotToImplementOrDeclareServerClass()
 T CTFGlow::~CTFGlow()
 T CTFGotoActionPoint::GetName() const
 T CTFGotoActionPoint::OnStart(CTFBot*, Action<CTFBot>*)
 T CTFGotoActionPoint::Update(CTFBot*, float)
 T CTFGotoActionPoint::~CTFGotoActionPoint()
 T CTFGrapplingHook::ActivateRune()
 T CTFGrapplingHook::ActivityList(int&)
 T CTFGrapplingHook::CanAttack()
 T CTFGrapplingHook::Deploy()
 T CTFGrapplingHook::FireProjectile(CTFPlayer*)
 T CTFGrapplingHook::GetCanAttackFlags() const
 T CTFGrapplingHook::GetDataDescMap()
 T CTFGrapplingHook::GetProjectileFireSetup(CTFPlayer*, Vector, Vector*, QAngle*, bool, float)
 T CTFGrapplingHook::GetProjectileGravity()
 T CTFGrapplingHook::GetProjectileSpeed()
 T CTFGrapplingHook::GetServerClass()
 T CTFGrapplingHook::GetWeaponID() const
 T CTFGrapplingHook::GetWeaponProjectileType() const
 T CTFGrapplingHook::Holster(CBaseCombatWeapon*)
 T CTFGrapplingHook::ItemPostFrame()
 T CTFGrapplingHook::OnHookReleased(bool)
 T CTFGrapplingHook::PlayWeaponShootSound()
 T CTFGrapplingHook::PoseParamList(int&)
 T CTFGrapplingHook::Precache()
 T CTFGrapplingHook::PrimaryAttack()
 T CTFGrapplingHook::RemoveHookProjectile(bool)
 T CTFGrapplingHook::SendWeaponAnim(int)
 T CTFGrapplingHook::ShouldRemoveDisguiseOnPrimaryAttack() const
 T CTFGrapplingHook::ShouldRemoveInvisibilityOnPrimaryAttack() const
 T CTFGrapplingHook::YouForgotToImplementOrDeclareServerClass()
 T CTFGrapplingHook::~CTFGrapplingHook()
 T CTFGrenadeLauncher::AddDonkVictim(CBaseEntity const*)
 T CTFGrenadeLauncher::CanCharge()
 T CTFGrenadeLauncher::Deploy()
 T CTFGrenadeLauncher::FireFullClipAtOnce()
 T CTFGrenadeLauncher::FireProjectileInternal(CTFPlayer*)
 T CTFGrenadeLauncher::GetChargeBeginTime()
 T CTFGrenadeLauncher::GetChargeMaxTime()
 T CTFGrenadeLauncher::GetDataDescMap()
 T CTFGrenadeLauncher::GetDefaultClip1() const
 T CTFGrenadeLauncher::GetMaxClip1() const
 T CTFGrenadeLauncher::GetProjectileSpeed()
 T CTFGrenadeLauncher::GetServerClass()
 T CTFGrenadeLauncher::GetWeaponID() const
 T CTFGrenadeLauncher::Holster(CBaseCombatWeapon*)
 T CTFGrenadeLauncher::IsBlastImpactWeapon() const
 T CTFGrenadeLauncher::IsDoubleDonk(CBaseEntity const*) const
 T CTFGrenadeLauncher::ItemPostFrame()
 T CTFGrenadeLauncher::ItemPreFrame()
 T CTFGrenadeLauncher::LaunchGrenade()
 T CTFGrenadeLauncher::Misfire()
 T CTFGrenadeLauncher::PostFire()
 T CTFGrenadeLauncher::PrimaryAttack()
 T CTFGrenadeLauncher::Reload()
 T CTFGrenadeLauncher::ResetDetonateTime()
 T CTFGrenadeLauncher::SecondaryAttack()
 T CTFGrenadeLauncher::SendWeaponAnim(int)
 T CTFGrenadeLauncher::Spawn()
 T CTFGrenadeLauncher::WeaponIdle()
 T CTFGrenadeLauncher::WeaponReset()
 T CTFGrenadeLauncher::YouForgotToImplementOrDeclareServerClass()
 T CTFGrenadeLauncher::~CTFGrenadeLauncher()
 T CTFGrenadePipebombProjectile::ArmThink()
 T CTFGrenadePipebombProjectile::BounceSound()
 T CTFGrenadePipebombProjectile::CTFGrenadePipebombProjectile()
 T CTFGrenadePipebombProjectile::Create(Vector const&, QAngle const&, Vector const&, Vector const&, CBaseCombatCharacter*, CTFWeaponInfo const&, int, float)
 T CTFGrenadePipebombProjectile::CreatePipebombGibs()
 T CTFGrenadePipebombProjectile::Deflected(CBaseEntity*, Vector&)
 T CTFGrenadePipebombProjectile::Detonate()
 T CTFGrenadePipebombProjectile::DetonateStickies()
 T CTFGrenadePipebombProjectile::DetonateThink()
 T CTFGrenadePipebombProjectile::Fizzle()
 T CTFGrenadePipebombProjectile::GetDamageCustom()
 T CTFGrenadePipebombProjectile::GetDamageRadius()
 T CTFGrenadePipebombProjectile::GetDamageType()
 T CTFGrenadePipebombProjectile::GetDataDescMap()
 T CTFGrenadePipebombProjectile::GetLiveTime()
 T CTFGrenadePipebombProjectile::GetServerClass()
 T CTFGrenadePipebombProjectile::GetWeaponID() const
 T CTFGrenadePipebombProjectile::IncrementDeflected()
 T CTFGrenadePipebombProjectile::IsDeflectable()
 T CTFGrenadePipebombProjectile::OnTakeDamage(CTakeDamageInfo const&)
 T CTFGrenadePipebombProjectile::PipebombTouch(CBaseEntity*)
 T CTFGrenadePipebombProjectile::PreArmThink()
 T CTFGrenadePipebombProjectile::Precache()
 T CTFGrenadePipebombProjectile::SetCustomPipebombModel()
 T CTFGrenadePipebombProjectile::SetPipebombMode(int)
 T CTFGrenadePipebombProjectile::ShouldMiniCritOnReflect() const
 T CTFGrenadePipebombProjectile::Spawn()
 T CTFGrenadePipebombProjectile::StickybombTouch(CBaseEntity*)
 T CTFGrenadePipebombProjectile::UpdateOnRemove()
 T CTFGrenadePipebombProjectile::VPhysicsCollision(int, gamevcollisionevent_t*)
 T CTFGrenadePipebombProjectile::YouForgotToImplementOrDeclareServerClass()
 T CTFGrenadePipebombProjectile::~CTFGrenadePipebombProjectile()
 T CTFHLTVDirector::CreateShotFromEvent(CHLTVGameEvent*)
 T CTFHLTVDirector::GetFixedCameraEntityName()
 T CTFHLTVDirector::GetModEvents()
 T CTFHLTVDirector::SetHLTVServer(IHLTVServer*)
 T CTFHLTVDirector::~CTFHLTVDirector()
 T CTFHalloweenFortuneTeller* _CreateEntityTemplate<CTFHalloweenFortuneTeller>(CTFHalloweenFortuneTeller*, char const*)
 T CTFHalloweenFortuneTeller::ApplyFortuneEffect()
 T CTFHalloweenFortuneTeller::DanceThink()
 T CTFHalloweenFortuneTeller::EndFortuneTell()
 T CTFHalloweenFortuneTeller::FireGameEvent(IGameEvent*)
 T CTFHalloweenFortuneTeller::GetDataDescMap()
 T CTFHalloweenFortuneTeller::InputDisableFortuneTelling(inputdata_t&)
 T CTFHalloweenFortuneTeller::InputEnableFortuneTelling(inputdata_t&)
 T CTFHalloweenFortuneTeller::InputEndFortuneTelling(inputdata_t&)
 T CTFHalloweenFortuneTeller::InputStartFortuneTelling(inputdata_t&)
 T CTFHalloweenFortuneTeller::Precache()
 T CTFHalloweenFortuneTeller::Spawn()
 T CTFHalloweenFortuneTeller::SpeakThink()
 T CTFHalloweenFortuneTeller::StartFortuneTell()
 T CTFHalloweenFortuneTeller::StartFortuneWarning()
 T CTFHalloweenFortuneTeller::StopTalkingAnim()
 T CTFHalloweenFortuneTeller::TellFortune()
 T CTFHalloweenFortuneTeller::UpdateOnRemove()
 T CTFHalloweenFortuneTeller::~CTFHalloweenFortuneTeller()
 T CTFHalloweenMinigame::CTFHalloweenMinigame()
 T CTFHalloweenMinigame::FireGameEvent(IGameEvent*)
 T CTFHalloweenMinigame::GetDataDescMap()
 T CTFHalloweenMinigame::GetServerClass()
 T CTFHalloweenMinigame::InputDisableSpawnBoss(inputdata_t&)
 T CTFHalloweenMinigame::InputEnableSpawnBoss(inputdata_t&)
 T CTFHalloweenMinigame::InputKartLoseAnimationBlue(inputdata_t&)
 T CTFHalloweenMinigame::InputKartLoseAnimationRed(inputdata_t&)
 T CTFHalloweenMinigame::InputKartWinAnimationBlue(inputdata_t&)
 T CTFHalloweenMinigame::InputKartWinAnimationRed(inputdata_t&)
 T CTFHalloweenMinigame::InternalHandleInputScore(inputdata_t&)
 T CTFHalloweenMinigame::OnTeleportPlayerToMinigame(CTFPlayer*)
 T CTFHalloweenMinigame::ReturnAllPlayers()
 T CTFHalloweenMinigame::Spawn()
 T CTFHalloweenMinigame::TeleportAllPlayers()
 T CTFHalloweenMinigame::TeleportAllPlayersThink()
 T CTFHalloweenMinigame::YouForgotToImplementOrDeclareServerClass()
 T CTFHalloweenMinigame::~CTFHalloweenMinigame()
 T CTFHalloweenMinigame_FallingPlatforms::CTFHalloweenMinigame_FallingPlatforms()
 T CTFHalloweenMinigame_FallingPlatforms::FireGameEvent(IGameEvent*)
 T CTFHalloweenMinigame_FallingPlatforms::GetDataDescMap()
 T CTFHalloweenMinigame_FallingPlatforms::GetServerClass()
 T CTFHalloweenMinigame_FallingPlatforms::InputChoosePlatform(inputdata_t&)
 T CTFHalloweenMinigame_FallingPlatforms::YouForgotToImplementOrDeclareServerClass()
 T CTFHalloweenMinigame_FallingPlatforms::~CTFHalloweenMinigame_FallingPlatforms()
 T CTFHellZap::EndTouch(CBaseEntity*)
 T CTFHellZap::GetDataDescMap()
 T CTFHellZap::GetServerClass()
 T CTFHellZap::InputDisable(inputdata_t&)
 T CTFHellZap::InputEnable(inputdata_t&)
 T CTFHellZap::InputZapAllTouching(inputdata_t&)
 T CTFHellZap::Spawn()
 T CTFHellZap::StartTouch(CBaseEntity*)
 T CTFHellZap::YouForgotToImplementOrDeclareServerClass()
 T CTFHellZap::ZapAllTouching()
 T CTFHellZap::ZapThink()
 T CTFHellZap::~CTFHellZap()
 T CTFHolidayEntity::CTFHolidayEntity()
 T CTFHolidayEntity::FireGameEvent(IGameEvent*)
 T CTFHolidayEntity::GetDataDescMap()
 T CTFHolidayEntity::HalloweenTeleportToHellDanceThink()
 T CTFHolidayEntity::InputHalloweenSetUsingSpells(inputdata_t&)
 T CTFHolidayEntity::InputHalloweenTeleportToHell(inputdata_t&)
 T CTFHolidayEntity::Teleport()
 T CTFHolidayEntity::UpdateTransmitState()
 T CTFHolidayEntity::~CTFHolidayEntity()
 T CTFHudNotify::Display(CBaseEntity*)
 T CTFHudNotify::GetDataDescMap()
 T CTFHudNotify::InputDisplay(inputdata_t&)
 T CTFHudNotify::~CTFHudNotify()
 T CTFInfoPowerupSpawn::GetDataDescMap()
 T CTFInfoPowerupSpawn::Spawn()
 T CTFInfoPowerupSpawn::~CTFInfoPowerupSpawn()
 T CTFIntermission::GetDataDescMap()
 T CTFIntermission::InputActivate(inputdata_t&)
 T CTFIntermission::~CTFIntermission()
 T CTFInventoryManager::AddBaseItemCriteria(baseitemcriteria_t*, CItemSelectionCriteria*)
 T CTFInventoryManager::GenerateBaseItems()
 T CTFInventoryManager::GetActiveSets(CUtlVector<CEconItemSetDefinition const*, CUtlMemory<CEconItemSetDefinition const*, int> >*, CSteamID, int)
 T CTFInventoryManager::GetBaseItemForClass(int, int)
 T CTFInventoryManager::GetItemInLoadoutForClass(int, int, CSteamID*)
 T CTFInventoryManager::PostInit()
 T CTFInventoryManager::SlotContainsBaseItems(EEquipType_t, int)
 T CTFInventoryManager::~CTFInventoryManager()
 T CTFItem::Drop(CTFPlayer*, bool, bool, bool)
 T CTFItem::GetItemID() const
 T CTFItem::GetServerClass()
 T CTFItem::PickUp(CTFPlayer*, bool)
 T CTFItem::YouForgotToImplementOrDeclareServerClass()
 T CTFItem::~CTFItem()
 T CTFItemDefinition::BInitFromKV(KeyValues*, CUtlVector<CUtlString, CUtlMemory<CUtlString, int> >*)
 T CTFItemDefinition::BInitFromTestItemKVs(int, KeyValues*, CUtlVector<CUtlString, CUtlMemory<CUtlString, int> >*)
 T CTFItemDefinition::CopyPolymorphic(CEconItemDefinition const*)
 T CTFItemDefinition::GeneratePrecacheModelStrings(bool, CUtlVector<char const*, CUtlMemory<char const*, int> >*) const
 T CTFItemDefinition::GetLoadoutSlot(int) const
 T CTFItemDefinition::GetPlayerDisplayModelAlt(int) const
 T CTFItemDefinition::IsContentStreamable() const
 T CTFItemDefinition::~CTFItemDefinition()
 T CTFItemSchema::BCanStrangeFilterApplyToStrangeSlotInItem(unsigned int, unsigned int, IEconItemInterface const*, int, unsigned int*) const
 T CTFItemSchema::BInitGameModes(KeyValues*, CUtlVector<CUtlString, CUtlMemory<CUtlString, int> >*)
 T CTFItemSchema::BInitMMCategories(KeyValues*, CUtlVector<CUtlString, CUtlMemory<CUtlString, int> >*)
 T CTFItemSchema::BInitMaps(KeyValues*, CUtlVector<CUtlString, CUtlMemory<CUtlString, int> >*)
 T CTFItemSchema::BInitMvmMissions(KeyValues*, CUtlVector<CUtlString, CUtlMemory<CUtlString, int> >*)
 T CTFItemSchema::BInitMvmTours(KeyValues*, CUtlVector<CUtlString, CUtlMemory<CUtlString, int> >*)
 T CTFItemSchema::BInitQuestObjectiveConditions(KeyValues*, CUtlVector<CUtlString, CUtlMemory<CUtlString, int> >*)
 T CTFItemSchema::BInitQuestThemes(KeyValues*, CUtlVector<CUtlString, CUtlMemory<CUtlString, int> >*)
 T CTFItemSchema::BInitSchema(KeyValues*, CUtlVector<CUtlString, CUtlMemory<CUtlString, int> >*)
 T CTFItemSchema::BInitWarDefs(KeyValues*, CUtlVector<CUtlString, CUtlMemory<CUtlString, int> >*)
 T CTFItemSchema::CTFItemSchema()
 T CTFItemSchema::CreateCraftingRecipeDefinition()
 T CTFItemSchema::CreateEconItemDefinition()
 T CTFItemSchema::CreateEconStyleInfo()
 T CTFItemSchema::CreateEconToolImpl(char const*, char const*, char const*, item_capabilities_t, KeyValues*)
 T CTFItemSchema::CreateQuestDefinition()
 T CTFItemSchema::FindMvmMissionByName(char const*) const
 T CTFItemSchema::GetCustomExpirationDate(char const*) const
 T CTFItemSchema::GetGameCategory(EGameCategory) const
 T CTFItemSchema::GetMasterMapDefByIndex(unsigned int) const
 T CTFItemSchema::GetMasterMapDefByName(char const*) const
 T CTFItemSchema::GetWarDefinitionByIndex(unsigned char) const
 T CTFItemSchema::Reset()
 T CTFItemSchema::~CTFItemSchema()
 T CTFItemSystem::GenerateBaseItem(baseitemcriteria_t*)
 T CTFItemSystem::~CTFItemSystem()
 T CTFJar::CTFJar()
 T CTFJar::CanThrowUnderWater()
 T CTFJar::CreateJarProjectile(Vector const&, QAngle const&, Vector const&, Vector const&, CBaseCombatCharacter*, CTFWeaponInfo const&)
 T CTFJar::FireJar(CTFPlayer*)
 T CTFJar::GetAngularImpulse()
 T CTFJar::GetEffectLabelText()
 T CTFJar::GetProjectileEntityName(CAttribute_String*)
 T CTFJar::GetProjectileSpeed()
 T CTFJar::GetServerClass()
 T CTFJar::GetVelocityVector(Vector const&, Vector const&, Vector const&)
 T CTFJar::GetWeaponID() const
 T CTFJar::InternalGetEffectBarRechargeTime()
 T CTFJar::PrimaryAttack()
 T CTFJar::ShouldSpeakWhenFiring()
 T CTFJar::TossJarThink()
 T CTFJar::YouForgotToImplementOrDeclareServerClass()
 T CTFJar::~CTFJar()
 T CTFJarMilk::CreateJarProjectile(Vector const&, QAngle const&, Vector const&, Vector const&, CBaseCombatCharacter*, CTFWeaponInfo const&)
 T CTFJarMilk::GetServerClass()
 T CTFJarMilk::GetWeaponID() const
 T CTFJarMilk::YouForgotToImplementOrDeclareServerClass()
 T CTFJarMilk::~CTFJarMilk()
 T CTFKatana::Deploy()
 T CTFKatana::GetActivityWeaponRole() const
 T CTFKatana::GetMeleeDamage(CBaseEntity*, int*, int*)
 T CTFKatana::GetServerClass()
 T CTFKatana::GetSkinOverride() const
 T CTFKatana::OnDecapitation(CTFPlayer*)
 T CTFKatana::YouForgotToImplementOrDeclareServerClass()
 T CTFKatana::~CTFKatana()
 T CTFKnife::ApplyOnInjuredAttributes(CTFPlayer*, CTFPlayer*, CTakeDamageInfo const&)
 T CTFKnife::BackstabBlocked()
 T CTFKnife::BackstabVMThink()
 T CTFKnife::CTFKnife()
 T CTFKnife::CalcIsAttackCriticalHelper()
 T CTFKnife::CalcIsAttackCriticalHelperNoCrits()
 T CTFKnife::CanDeploy()
 T CTFKnife::CanHolster() const
 T CTFKnife::CanPerformBackstabAgainstTarget(CTFPlayer*)
 T CTFKnife::DecreaseRegenerationTime(float, bool)
 T CTFKnife::Deploy()
 T CTFKnife::DisguiseOnKill()
 T CTFKnife::DoSwingTrace(CGameTrace&)
 T CTFKnife::GetMeleeDamage(CBaseEntity*, int*, int*)
 T CTFKnife::GetServerClass()
 T CTFKnife::GetWeaponID() const
 T CTFKnife::IsBehindAndFacingTarget(CTFPlayer*)
 T CTFKnife::ItemBusyFrame()
 T CTFKnife::ItemHolsterFrame()
 T CTFKnife::ItemPostFrame()
 T CTFKnife::ItemPreFrame()
 T CTFKnife::PrimaryAttack()
 T CTFKnife::ResetVars()
 T CTFKnife::SendPlayerAnimEvent(CTFPlayer*)
 T CTFKnife::SendWeaponAnim(int)
 T CTFKnife::ShouldDisguiseOnBackstab()
 T CTFKnife::WeaponRegenerate()
 T CTFKnife::WeaponReset()
 T CTFKnife::YouForgotToImplementOrDeclareServerClass()
 T CTFKnife::~CTFKnife()
 T CTFLaserPointer::CreateLaserDot()
 T CTFLaserPointer::Deploy()
 T CTFLaserPointer::DestroyLaserDot()
 T CTFLaserPointer::GetServerClass()
 T CTFLaserPointer::GetWeaponID() const
 T CTFLaserPointer::Holster(CBaseCombatWeapon*)
 T CTFLaserPointer::ItemPostFrame()
 T CTFLaserPointer::Precache()
 T CTFLaserPointer::PrimaryAttack()
 T CTFLaserPointer::SecondaryAttack()
 T CTFLaserPointer::UpdateLaserDot()
 T CTFLaserPointer::UsesClipsForAmmo1() const
 T CTFLaserPointer::UsesClipsForAmmo2() const
 T CTFLaserPointer::WeaponIdle()
 T CTFLaserPointer::YouForgotToImplementOrDeclareServerClass()
 T CTFLaserPointer::~CTFLaserPointer()
 T CTFLobbyMember::ByteSize() const
 T CTFLobbyMember::Clear()
 T CTFLobbyMember::GetCachedSize() const
 T CTFLobbyMember::GetMetadata() const
 T CTFLobbyMember::IsInitialized() const
 T CTFLobbyMember::MergeFrom(CTFLobbyMember const&)
 T CTFLobbyMember::New() const
 T CTFLobbyMember::SerializeWithCachedSizesToArray(unsigned char*) const
 T CTFLobbyMember::SetCachedSize(int) const
 T CTFLobbyMember::~CTFLobbyMember()
 T CTFLobbyMember_ConnectState_descriptor()
 T CTFLunchBox::ApplyBiteEffects(CTFPlayer*)
 T CTFLunchBox::DrainAmmo(bool)
 T CTFLunchBox::DropAllowed()
 T CTFLunchBox::GetDataDescMap()
 T CTFLunchBox::GetServerClass()
 T CTFLunchBox::GetWeaponID() const
 T CTFLunchBox::InternalGetEffectBarRechargeTime()
 T CTFLunchBox::Precache()
 T CTFLunchBox::PrimaryAttack()
 T CTFLunchBox::SecondaryAttack()
 T CTFLunchBox::UpdateOnRemove()
 T CTFLunchBox::UsesPrimaryAmmo()
 T CTFLunchBox::WeaponReset()
 T CTFLunchBox::YouForgotToImplementOrDeclareServerClass()
 T CTFLunchBox::~CTFLunchBox()
 T CTFLunchBox_Drink::AllowTaunts()
 T CTFLunchBox_Drink::DropAllowed()
 T CTFLunchBox_Drink::GetServerClass()
 T CTFLunchBox_Drink::YouForgotToImplementOrDeclareServerClass()
 T CTFLunchBox_Drink::~CTFLunchBox_Drink()
 T CTFMapContribution::~CTFMapContribution()
 T CTFMapsWorkshop::AddMap(unsigned long long)
 T CTFMapsWorkshop::AsyncPrepareLevelResources(char*, unsigned long, char*, unsigned long, float*)
 T CTFMapsWorkshop::CanonicalNameForMap(unsigned long long, CUtlString const&, CUtlString&)
 T CTFMapsWorkshop::GameServerSteamAPIActivated()
 T CTFMapsWorkshop::GetMapName(unsigned long long, CUtlString&)
 T CTFMapsWorkshop::Init()
 T CTFMapsWorkshop::IsValidOriginalFileNameForMap(CUtlString const&)
 T CTFMapsWorkshop::MapIDFromName(CUtlString)
 T CTFMapsWorkshop::Name()
 T CTFMapsWorkshop::OnCanProvideLevel(char*, int)
 T CTFMapsWorkshop::PrepareLevelResources(char*, unsigned long, char*, unsigned long)
 T CTFMapsWorkshop::PrintStatusToConsole()
 T CTFMapsWorkshop::Refresh()
 T CTFMapsWorkshop::Shutdown()
 T CTFMapsWorkshop::Steam_OnUGCDownload(DownloadItemResult_t*)
 T CTFMapsWorkshop::Steam_OnUGCItemInstalled(ItemInstalled_t*)
 T CTFMapsWorkshop::~CTFMapsWorkshop()
 T CTFMechanicalArm::GetAmmoPerShot()
 T CTFMechanicalArm::GetCustomDamageType() const
 T CTFMechanicalArm::GetServerClass()
 T CTFMechanicalArm::GetWeaponID() const
 T CTFMechanicalArm::IsValidVictim(CTFPlayer*, CBaseEntity*)
 T CTFMechanicalArm::Precache()
 T CTFMechanicalArm::PrimaryAttack()
 T CTFMechanicalArm::SecondaryAttack()
 T CTFMechanicalArm::ShockAttack()
 T CTFMechanicalArm::ShockVictim(CTFPlayer*, CBaseEntity*)
 T CTFMechanicalArm::UpdateBodygroups(CBaseCombatCharacter*, int)
 T CTFMechanicalArm::YouForgotToImplementOrDeclareServerClass()
 T CTFMechanicalArm::~CTFMechanicalArm()
 T CTFMedigunShield::Create(CTFPlayer*)
 T CTFMedigunShield::EndTouch(CBaseEntity*)
 T CTFMedigunShield::GetDataDescMap()
 T CTFMedigunShield::GetServerClass()
 T CTFMedigunShield::IsCombatItem() const
 T CTFMedigunShield::OnTakeDamage(CTakeDamageInfo const&)
 T CTFMedigunShield::Precache()
 T CTFMedigunShield::ShieldThink()
 T CTFMedigunShield::ShieldTouch(CBaseEntity*)
 T CTFMedigunShield::ShouldCollide(int, int) const
 T CTFMedigunShield::Spawn()
 T CTFMedigunShield::StartTouch(CBaseEntity*)
 T CTFMedigunShield::TraceAttack(CTakeDamageInfo const&, Vector const&, CGameTrace*, CDmgAccumulator*)
 T CTFMedigunShield::UpdateShieldPosition()
 T CTFMedigunShield::YouForgotToImplementOrDeclareServerClass()
 T CTFMedigunShield::~CTFMedigunShield()
 T CTFMerasmusTrickOrTreatProp* _CreateEntityTemplate<CTFMerasmusTrickOrTreatProp>(CTFMerasmusTrickOrTreatProp*, char const*)
 T CTFMerasmusTrickOrTreatProp::Create(Vector const&, QAngle const&)
 T CTFMerasmusTrickOrTreatProp::Event_Killed(CTakeDamageInfo const&)
 T CTFMerasmusTrickOrTreatProp::OnTakeDamage(CTakeDamageInfo const&)
 T CTFMerasmusTrickOrTreatProp::Spawn()
 T CTFMerasmusTrickOrTreatProp::SpawnTrickOrTreatItem()
 T CTFMerasmusTrickOrTreatProp::Touch(CBaseEntity*)
 T CTFMerasmusTrickOrTreatProp::~CTFMerasmusTrickOrTreatProp()
 T CTFMiniGame::CTFMiniGame()
 T CTFMiniGame::FireGameEvent(IGameEvent*)
 T CTFMiniGame::GetDataDescMap()
 T CTFMiniGame::GetServerClass()
 T CTFMiniGame::GetTeamSpawnPointName(int) const
 T CTFMiniGame::InputChangeHudResFile(inputdata_t&)
 T CTFMiniGame::InputScoreTeamBlue(inputdata_t&)
 T CTFMiniGame::InputScoreTeamRed(inputdata_t&)
 T CTFMiniGame::InternalHandleInputScore(inputdata_t&)
 T CTFMiniGame::NetworkVar_m_nMinigameTeamScore::Set(int, int const&)
 T CTFMiniGame::OnTeleportPlayerToMinigame(CTFPlayer*)
 T CTFMiniGame::Precache()
 T CTFMiniGame::ReturnAllPlayers()
 T CTFMiniGame::ScorePointsForTeam(int, int)
 T CTFMiniGame::Spawn()
 T CTFMiniGame::SuddenDeathTimeStartThink()
 T CTFMiniGame::TeleportAllPlayers()
 T CTFMiniGame::UpdateDeadPlayers(int, COutputEvent&, COutputEvent&, bool&)
 T CTFMiniGame::UpdateTransmitState()
 T CTFMiniGame::YouForgotToImplementOrDeclareServerClass()
 T CTFMiniGame::~CTFMiniGame()
 T CTFMinigameLogic::GetDataDescMap()
 T CTFMinigameLogic::GetServerClass()
 T CTFMinigameLogic::InputReturnFromMinigame(inputdata_t&)
 T CTFMinigameLogic::InputSetAdvantageTeam(inputdata_t&)
 T CTFMinigameLogic::InputTeleportToMinigame(inputdata_t&)
 T CTFMinigameLogic::InputTeleportToRandomMinigame(inputdata_t&)
 T CTFMinigameLogic::ReturnFromMinigame()
 T CTFMinigameLogic::TeleportToMinigame(int)
 T CTFMinigameLogic::UpdateTransmitState()
 T CTFMinigameLogic::YouForgotToImplementOrDeclareServerClass()
 T CTFMinigameLogic::~CTFMinigameLogic()
 T CTFMinigun::ActivatePushBackAttackMode()
 T CTFMinigun::ApplyOnHitAttributes(CTFPlayer*, CTFPlayer*, CTakeDamageInfo const&)
 T CTFMinigun::AttackEnemyProjectiles()
 T CTFMinigun::CTFMinigun()
 T CTFMinigun::CanHolster() const
 T CTFMinigun::CanInspect() const
 T CTFMinigun::CanReload()
 T CTFMinigun::FireGameEvent(IGameEvent*)
 T CTFMinigun::GetCustomDamageType() const
 T CTFMinigun::GetDataDescMap()
 T CTFMinigun::GetDmgAccumulator()
 T CTFMinigun::GetProjectileDamage()
 T CTFMinigun::GetServerClass()
 T CTFMinigun::GetWeaponID() const
 T CTFMinigun::GetWeaponSpread()
 T CTFMinigun::HandleFireOnEmpty()
 T CTFMinigun::Holster(CBaseCombatWeapon*)
 T CTFMinigun::HolsterOnDetach()
 T CTFMinigun::ItemPostFrame()
 T CTFMinigun::Lower()
 T CTFMinigun::PlayWeaponShootSound()
 T CTFMinigun::Precache()
 T CTFMinigun::PrimaryAttack()
 T CTFMinigun::RingOfFireAttack(int)
 T CTFMinigun::SecondaryAttack()
 T CTFMinigun::SendWeaponAnim(int)
 T CTFMinigun::SetWeaponState(MinigunState_t)
 T CTFMinigun::SharedAttack()
 T CTFMinigun::ShouldDoMuzzleFlash()
 T CTFMinigun::Spawn()
 T CTFMinigun::UpdateTransmitState()
 T CTFMinigun::WeaponIdle()
 T CTFMinigun::WeaponReset()
 T CTFMinigun::WindDown()
 T CTFMinigun::WindUp()
 T CTFMinigun::YouForgotToImplementOrDeclareServerClass()
 T CTFMinigun::~CTFMinigun()
 T CTFNavArea::AddPotentiallyVisibleActor(CBaseCombatCharacter*)
 T CTFNavArea::CTFNavArea()
 T CTFNavArea::CollectNextIncursionAreas(int, CUtlVector<CTFNavArea*, CUtlMemory<CTFNavArea*, int> >*)
 T CTFNavArea::CollectPriorIncursionAreas(int, CUtlVector<CTFNavArea*, CUtlMemory<CTFNavArea*, int> >*)
 T CTFNavArea::ComputeInvasionAreaVectors()
 T CTFNavArea::CustomAnalysis(bool)
 T CTFNavArea::Draw() const
 T CTFNavArea::GetCombatIntensity() const
 T CTFNavArea::IsBlocked(int, bool) const
 T CTFNavArea::IsInCombat() const
 T CTFNavArea::IsPotentiallyVisibleToTeam(int) const
 T CTFNavArea::IsTFMarked() const
 T CTFNavArea::IsValidForWanderingPopulation() const
 T CTFNavArea::Load(CUtlBuffer&, unsigned int, unsigned int)
 T CTFNavArea::MakeNewTFMarker()
 T CTFNavArea::OnCombat()
 T CTFNavArea::OnRoundRestart()
 T CTFNavArea::OnServerActivate()
 T CTFNavArea::Save(CUtlBuffer&, unsigned int) const
 T CTFNavArea::TFMark()
 T CTFNavArea::UpdateBlocked(bool, int)
 T CTFNavArea::~CTFNavArea()
 T CTFNavMesh::BeginCustomAnalysis(bool)
 T CTFNavMesh::CTFNavMesh()
 T CTFNavMesh::CollectAreaWithinBombTravelRange(CUtlVector<CTFNavArea*, CUtlMemory<CTFNavArea*, int> >*, float, float) const
 T CTFNavMesh::CollectBuiltObjects(CUtlVector<CBaseObject*, CUtlMemory<CBaseObject*, int> >*, int)
 T CTFNavMesh::CollectControlPointAreas()
 T CTFNavMesh::CollectSpawnRoomThresholdAreas(CUtlVector<CTFNavArea*, CUtlMemory<CTFNavArea*, int> >*, int) const
 T CTFNavMesh::ComputeBlockedAreas()
 T CTFNavMesh::ComputeBombTargetDistance()
 T CTFNavMesh::ComputeIncursionDistances()
 T CTFNavMesh::ComputeIncursionDistances(CTFNavArea*, int)
 T CTFNavMesh::ComputeInvasionAreas()
 T CTFNavMesh::ComputeLegalBombDropAreas()
 T CTFNavMesh::CreateArea() const
 T CTFNavMesh::DecorateMesh()
 T CTFNavMesh::EndCustomAnalysis()
 T CTFNavMesh::FireGameEvent(IGameEvent*)
 T CTFNavMesh::GetGenerationTraceMask() const
 T CTFNavMesh::GetSubVersionNumber() const
 T CTFNavMesh::IsAuthoritative() const
 T CTFNavMesh::LoadCustomData(CUtlBuffer&, unsigned int)
 T CTFNavMesh::OnObjectChanged()
 T CTFNavMesh::OnRoundRestart()
 T CTFNavMesh::OnServerActivate()
 T CTFNavMesh::PostCustomAnalysis()
 T CTFNavMesh::RecomputeInternalData()
 T CTFNavMesh::SaveCustomData(CUtlBuffer&) const
 T CTFNavMesh::Update()
 T CTFNavMesh::UpdateDebugDisplay() const
 T CTFNavMesh::~CTFNavMesh()
 T CTFObjectiveResource::AddMannVsMachineWaveClassFlags(int, unsigned int)
 T CTFObjectiveResource::CTFObjectiveResource()
 T CTFObjectiveResource::ClearMannVsMachineWaveClassFlags()
 T CTFObjectiveResource::DecrementMannVsMachineWaveClassCount(string_t, unsigned int)
 T CTFObjectiveResource::DecrementTeleporterCount()
 T CTFObjectiveResource::GetDataDescMap()
 T CTFObjectiveResource::GetMannVsMachineWaveClassCount(int)
 T CTFObjectiveResource::GetServerClass()
 T CTFObjectiveResource::IncrementMannVsMachineWaveClassCount(string_t, unsigned int)
 T CTFObjectiveResource::IncrementTeleporterCount()
 T CTFObjectiveResource::SetBaseMvMBombUpgradeTime(float)
 T CTFObjectiveResource::SetFlagCarrierUpgradeLevel(int)
 T CTFObjectiveResource::SetMannVsMachineWaveClassActive(string_t, bool)
 T CTFObjectiveResource::SetMannVsMachineWaveClassCount(int, int)
 T CTFObjectiveResource::SetMannVsMachineWaveClassName(int, string_t)
 T CTFObjectiveResource::SetNextMvMBombUpgradeTime(float)
 T CTFObjectiveResource::Spawn()
 T CTFObjectiveResource::YouForgotToImplementOrDeclareServerClass()
 T CTFObjectiveResource::~CTFObjectiveResource()
 T CTFPEPBrawlerBlaster::GetServerClass()
 T CTFPEPBrawlerBlaster::GetWeaponID() const
 T CTFPEPBrawlerBlaster::YouForgotToImplementOrDeclareServerClass()
 T CTFPEPBrawlerBlaster::~CTFPEPBrawlerBlaster()
 T CTFParachute::CanBeSelected()
 T CTFParachute::CanDeploy()
 T CTFParachute::CreateBanner()
 T CTFParachute::GetServerClass()
 T CTFParachute::GetWeaponID() const
 T CTFParachute::VisibleInWeaponSelection()
 T CTFParachute::YouForgotToImplementOrDeclareServerClass()
 T CTFParachute::~CTFParachute()
 T CTFParachute_Primary::GetServerClass()
 T CTFParachute_Primary::YouForgotToImplementOrDeclareServerClass()
 T CTFParachute_Primary::~CTFParachute_Primary()
 T CTFParachute_Secondary::GetServerClass()
 T CTFParachute_Secondary::YouForgotToImplementOrDeclareServerClass()
 T CTFParachute_Secondary::~CTFParachute_Secondary()
 T CTFParticleCannon::Deploy()
 T CTFParticleCannon::Energy_GetRechargeCost() const
 T CTFParticleCannon::Energy_GetShotCost() const
 T CTFParticleCannon::FireChargedShot()
 T CTFParticleCannon::GetChargeBeginTime()
 T CTFParticleCannon::GetChargeForceReleaseTime()
 T CTFParticleCannon::GetChargeMaxTime()
 T CTFParticleCannon::GetDataDescMap()
 T CTFParticleCannon::GetMuzzleFlashParticleEffect()
 T CTFParticleCannon::GetProjectileGravity()
 T CTFParticleCannon::GetProjectileSpeed()
 T CTFParticleCannon::GetServerClass()
 T CTFParticleCannon::GetShootSound(int) const
 T CTFParticleCannon::GetWeaponID() const
 T CTFParticleCannon::Holster(CBaseCombatWeapon*)
 T CTFParticleCannon::IsEnergyWeapon() const
 T CTFParticleCannon::IsViewModelFlipped()
 T CTFParticleCannon::ItemPostFrame()
 T CTFParticleCannon::ModifyProjectile(CBaseEntity*)
 T CTFParticleCannon::OwnerCanTaunt()
 T CTFParticleCannon::PlayWeaponShootSound()
 T CTFParticleCannon::Precache()
 T CTFParticleCannon::PrimaryAttack()
 T CTFParticleCannon::SecondaryAttack()
 T CTFParticleCannon::ShouldPlayFireAnim()
 T CTFParticleCannon::WeaponReset()
 T CTFParticleCannon::YouForgotToImplementOrDeclareServerClass()
 T CTFParticleCannon::~CTFParticleCannon()
 T CTFParty::AllowInvites() const
 T CTFParty::BShouldDeleteByCache() const
 T CTFParty::CTFParty()
 T CTFParty::Dump() const
 T CTFParty::GetGroupID() const
 T CTFParty::GetLeader() const
 T CTFParty::GetMember(int) const
 T CTFParty::GetMemberIndexBySteamID(CSteamID const&) const
 T CTFParty::GetNumMembers() const
 T CTFParty::GetNumPendingInvites() const
 T CTFParty::GetPendingInvite(int) const
 T CTFParty::GetPendingInviteIndexBySteamID(CSteamID const&) const
 T CTFParty::GetSharedObjectForMember(CSteamID const&)
 T CTFParty::~CTFParty()
 T CTFPasstimeLogic::AddBallPower(int)
 T CTFPasstimeLogic::BCanPlayerPickUpBall(CTFPlayer*, HudNotification_t*) const
 T CTFPasstimeLogic::BallHistSampleThink()
 T CTFPasstimeLogic::BallPower_PackHealThink()
 T CTFPasstimeLogic::BallPower_PackThink()
 T CTFPasstimeLogic::BallPower_PowerThink()
 T CTFPasstimeLogic::CalcProgressFrac() const
 T CTFPasstimeLogic::EjectBall(CTFPlayer*, CTFPlayer*)
 T CTFPasstimeLogic::EndRoundExpiredTimer()
 T CTFPasstimeLogic::FireGameEvent(IGameEvent*)
 T CTFPasstimeLogic::GetBall() const
 T CTFPasstimeLogic::GetDataDescMap()
 T CTFPasstimeLogic::GetLastPassTime(CTFPlayer*)
 T CTFPasstimeLogic::GetPackSpeed(CTFPlayer*) const
 T CTFPasstimeLogic::GetServerClass()
 T CTFPasstimeLogic::InputJumpPadUsed(inputdata_t&)
 T CTFPasstimeLogic::InputRoomTriggerOnTouch(inputdata_t&)
 T CTFPasstimeLogic::InputSetSection(inputdata_t&)
 T CTFPasstimeLogic::InputSpawnBall(inputdata_t&)
 T CTFPasstimeLogic::InputSpeedBoostUsed(inputdata_t&)
 T CTFPasstimeLogic::InputTimeUp(inputdata_t&)
 T CTFPasstimeLogic::LaunchBall(CTFPlayer*, Vector const&, Vector const&)
 T CTFPasstimeLogic::MoveBallToSpawner()
 T CTFPasstimeLogic::NetworkVar_m_trackPoints::Set(int, Vector const&)
 T CTFPasstimeLogic::OnBallCarrierDamaged(CTFPlayer*, CTFPlayer*, CTakeDamageInfo const&)
 T CTFPasstimeLogic::OnBallCarrierMeleeHit(CTFPlayer*, CTFPlayer*)
 T CTFPasstimeLogic::OnBallCollision(CPasstimeBall*, int, gamevcollisionevent_t*)
 T CTFPasstimeLogic::OnBallGet()
 T CTFPasstimeLogic::OnEnterGoal(CPasstimeBall*, CFuncPasstimeGoal*)
 T CTFPasstimeLogic::OnEnterGoal(CTFPlayer*, CFuncPasstimeGoal*)
 T CTFPasstimeLogic::OnExitGoal(CPasstimeBall*, CFuncPasstimeGoal*)
 T CTFPasstimeLogic::OnPlayerTouchBall(CTFPlayer*, CPasstimeBall*)
 T CTFPasstimeLogic::OnStayInGoal(CTFPlayer*, CFuncPasstimeGoal*)
 T CTFPasstimeLogic::OneSecStatsUpdateThink()
 T CTFPasstimeLogic::ParseSetSection(char const*, SetSectionParams&) const
 T CTFPasstimeLogic::PostSpawn()
 T CTFPasstimeLogic::Precache()
 T CTFPasstimeLogic::ReplicatePackMemberBits()
 T CTFPasstimeLogic::RespawnBall()
 T CTFPasstimeLogic::Score(CTFPlayer*, int, int, bool)
 T CTFPasstimeLogic::SecretRoom_Solve()
 T CTFPasstimeLogic::SecretRoom_Spawn()
 T CTFPasstimeLogic::SecretRoom_UpdateTv(int)
 T CTFPasstimeLogic::SetLastPassTime(CTFPlayer*)
 T CTFPasstimeLogic::ShouldEndOvertime() const
 T CTFPasstimeLogic::Spawn()
 T CTFPasstimeLogic::SpawnBallAtRandomSpawnerThink()
 T CTFPasstimeLogic::SpawnBallAtSpawner(CPasstimeBallSpawn*)
 T CTFPasstimeLogic::StealBall(CTFPlayer*, CTFPlayer*)
 T CTFPasstimeLogic::ThinkExpiredTimer()
 T CTFPasstimeLogic::UpdateTransmitState()
 T CTFPasstimeLogic::YouForgotToImplementOrDeclareServerClass()
 T CTFPasstimeLogic::statica(inputdata_t&)
 T CTFPasstimeLogic::staticb(inputdata_t&)
 T CTFPasstimeLogic::staticc(inputdata_t&)
 T CTFPasstimeLogic::~CTFPasstimeLogic()
 T CTFPhysicsPushEntities::FinishRotPushedEntity(CBaseEntity*, CPhysicsPushedEntities::RotatingPushMove_t const&)
 T CTFPhysicsPushEntities::IsPlayerAABBIntersetingPusherOBB(CBaseEntity*, CBaseEntity*)
 T CTFPhysicsPushEntities::LinearCheckPush(CPhysicsPushedEntities::PhysicsPushedInfo_t&)
 T CTFPhysicsPushEntities::LinearPushTFPlayer(CPhysicsPushedEntities::PhysicsPushedInfo_t&, Vector const&, bool)
 T CTFPhysicsPushEntities::MovePlayer(CBaseEntity*, CPhysicsPushedEntities::PhysicsPushedInfo_t&, float, bool)
 T CTFPhysicsPushEntities::RotationCheckPush(CPhysicsPushedEntities::PhysicsPushedInfo_t&)
 T CTFPhysicsPushEntities::RotationPushTFPlayer(CPhysicsPushedEntities::PhysicsPushedInfo_t&, Vector const&, CPhysicsPushedEntities::RotatingPushMove_t const&, bool)
 T CTFPhysicsPushEntities::SpeculativelyCheckLinearPush(Vector const&)
 T CTFPhysicsPushEntities::SpeculativelyCheckRotPush(CPhysicsPushedEntities::RotatingPushMove_t const&, CBaseEntity*)
 T CTFPhysicsPushEntities::~CTFPhysicsPushEntities()
 T CTFPipebombLauncher::AddPipeBomb(CTFGrenadePipebombProjectile*)
 T CTFPipebombLauncher::ApplyPostHitEffects(CTakeDamageInfo const&, CTFPlayer*)
 T CTFPipebombLauncher::CTFPipebombLauncher()
 T CTFPipebombLauncher::CanCharge()
 T CTFPipebombLauncher::DeathNotice(CBaseEntity*)
 T CTFPipebombLauncher::Deploy()
 T CTFPipebombLauncher::DetonateRemotePipebombs(bool)
 T CTFPipebombLauncher::FireProjectile(CTFPlayer*)
 T CTFPipebombLauncher::ForceLaunchGrenade()
 T CTFPipebombLauncher::GetChargeBeginTime()
 T CTFPipebombLauncher::GetChargeForceReleaseTime()
 T CTFPipebombLauncher::GetChargeMaxTime()
 T CTFPipebombLauncher::GetDataDescMap()
 T CTFPipebombLauncher::GetProjectileSpeed()
 T CTFPipebombLauncher::GetServerClass()
 T CTFPipebombLauncher::GetWeaponID() const
 T CTFPipebombLauncher::Holster(CBaseCombatWeapon*)
 T CTFPipebombLauncher::ItemBusyFrame()
 T CTFPipebombLauncher::ItemPostFrame()
 T CTFPipebombLauncher::LaunchGrenade()
 T CTFPipebombLauncher::ModifyPipebombsInView(int)
 T CTFPipebombLauncher::PrimaryAttack()
 T CTFPipebombLauncher::Reload()
 T CTFPipebombLauncher::SecondaryAttack()
 T CTFPipebombLauncher::Spawn()
 T CTFPipebombLauncher::UpdateOnRemove()
 T CTFPipebombLauncher::WeaponIdle()
 T CTFPipebombLauncher::WeaponReset()
 T CTFPipebombLauncher::YouForgotToImplementOrDeclareServerClass()
 T CTFPipebombLauncher::~CTFPipebombLauncher()
 T CTFPistol::GetDataDescMap()
 T CTFPistol::GetServerClass()
 T CTFPistol::GetWeaponID() const
 T CTFPistol::YouForgotToImplementOrDeclareServerClass()
 T CTFPistol::~CTFPistol()
 T CTFPistol_Scout::GetServerClass()
 T CTFPistol_Scout::GetWeaponID() const
 T CTFPistol_Scout::YouForgotToImplementOrDeclareServerClass()
 T CTFPistol_Scout::~CTFPistol_Scout()
 T CTFPistol_ScoutPrimary::GetServerClass()
 T CTFPistol_ScoutPrimary::GetViewModelWeaponRole()
 T CTFPistol_ScoutPrimary::GetWeaponID() const
 T CTFPistol_ScoutPrimary::Holster(CBaseCombatWeapon*)
 T CTFPistol_ScoutPrimary::ItemPostFrame()
 T CTFPistol_ScoutPrimary::PlayWeaponShootSound()
 T CTFPistol_ScoutPrimary::Precache()
 T CTFPistol_ScoutPrimary::Push()
 T CTFPistol_ScoutPrimary::SecondaryAttack()
 T CTFPistol_ScoutPrimary::YouForgotToImplementOrDeclareServerClass()
 T CTFPistol_ScoutPrimary::~CTFPistol_ScoutPrimary()
 T CTFPistol_ScoutSecondary::GetDamageType() const
 T CTFPistol_ScoutSecondary::GetServerClass()
 T CTFPistol_ScoutSecondary::GetViewModelWeaponRole()
 T CTFPistol_ScoutSecondary::GetWeaponID() const
 T CTFPistol_ScoutSecondary::YouForgotToImplementOrDeclareServerClass()
 T CTFPistol_ScoutSecondary::~CTFPistol_ScoutSecondary()
 T CTFPlayer::AcceptTauntWithPartner(CTFPlayer*)
 T CTFPlayer::AddConnectedPlayers(CUtlVector<CTFPlayer*, CUtlMemory<CTFPlayer*, int> >&, CTFPlayer*)
 T CTFPlayer::AddCurrency(int)
 T CTFPlayer::AddCustomAttribute(char const*, float, float)
 T CTFPlayer::AddHalloweenKartPushEvent(CTFPlayer*, CBaseEntity*, CBaseEntity*, Vector, int, int)
 T CTFPlayer::AddObject(CBaseObject*)
 T CTFPlayer::AddToSpyKnife(float, bool)
 T CTFPlayer::AmmoPackCleanUp()
 T CTFPlayer::ApplyAbsVelocityImpulse(Vector const&)
 T CTFPlayer::ApplyAirBlastImpulse(Vector const&)
 T CTFPlayer::ApplyPunchImpulseX(float)
 T CTFPlayer::ApplyPushFromDamage(CTakeDamageInfo const&, Vector)
 T CTFPlayer::ApplySetBonuses()
 T CTFPlayer::AttemptToExitFreezeCam()
 T CTFPlayer::AwardAchievement(int, int)
 T CTFPlayer::BeginPurchasableUpgrades()
 T CTFPlayer::BuildObservableEntityList()
 T CTFPlayer::BumpWeapon(CBaseCombatWeapon*)
 T CTFPlayer::CTFPlayer()
 T CTFPlayer::CalculateAmmoPackPositionAndAngles(CTFWeaponBase*, Vector&, QAngle&)
 T CTFPlayer::CalculateTeamBalanceScore()
 T CTFPlayer::CanAirDash() const
 T CTFPlayer::CanAttack(int)
 T CTFPlayer::CanBeAutobalanced()
 T CTFPlayer::CanBeForcedToLaugh()
 T CTFPlayer::CanBreatheUnderwater() const
 T CTFPlayer::CanBuild(int, int)
 T CTFPlayer::CanDisguise()
 T CTFPlayer::CanDisguise_OnKill()
 T CTFPlayer::CanGetWet() const
 T CTFPlayer::CanGoInvisible(bool)
 T CTFPlayer::CanHearAndReadChatFrom(CBasePlayer*)
 T CTFPlayer::CanMoveDuringTaunt()
 T CTFPlayer::CanPickupBuilding(CBaseObject*)
 T CTFPlayer::CanPickupDroppedWeapon(CTFDroppedWeapon const*)
 T CTFPlayer::CanPlayerMove() const
 T CTFPlayer::CanScorePointForPD() const
 T CTFPlayer::CanSpeakVoiceCommand()
 T CTFPlayer::CancelEurekaTeleport()
 T CTFPlayer::ChangeTeam(int)
 T CTFPlayer::ChangeTeam(int, bool, bool)
 T CTFPlayer::CheatImpulseCommands(int)
 T CTFPlayer::CheckBlockBackstab(CTFPlayer*)
 T CTFPlayer::CheckForIdle()
 T CTFPlayer::CheckInstantLoadoutRespawn()
 T CTFPlayer::CheckObserverSettings()
 T CTFPlayer::ClearDisguiseWeaponList()
 T CTFPlayer::ClearExpression()
 T CTFPlayer::ClearTauntAttack()
 T CTFPlayer::ClearUpgradeHistory()
 T CTFPlayer::ClearWeaponFireScene()
 T CTFPlayer::ClientCommand(CCommand const&)
 T CTFPlayer::CommitSuicide(bool, bool)
 T CTFPlayer::CreateDisguiseWeaponList(CTFPlayer*)
 T CTFPlayer::CreateFeignDeathRagdoll(CTakeDamageInfo const&, bool, bool, bool)
 T CTFPlayer::CreatePlayer(char const*, edict_t*)
 T CTFPlayer::CreateRagdollEntity()
 T CTFPlayer::CreateRagdollEntity(bool, bool, bool, bool, bool, bool, bool, bool, int, bool)
 T CTFPlayer::CreateViewModel(int)
 T CTFPlayer::DamageEffect(float, int)
 T CTFPlayer::DeathSound(CTakeDamageInfo const&)
 T CTFPlayer::DestroyRagdoll()
 T CTFPlayer::DetermineAssistForKill(CTakeDamageInfo const&)
 T CTFPlayer::DetonateObjectOfType(int, int, bool)
 T CTFPlayer::DoAnimationEvent(PlayerAnimEvent_t, int)
 T CTFPlayer::DoClassSpecialSkill()
 T CTFPlayer::DoNoiseMaker()
 T CTFPlayer::DoTauntAttack()
 T CTFPlayer::DrawDebugTextOverlays()
 T CTFPlayer::DropAmmoPack(CTakeDamageInfo const&, bool, bool)
 T CTFPlayer::DropCurrencyPack(CurrencyRewards_t, int, bool, CBasePlayer*)
 T CTFPlayer::DropDeathCallingCard(CTFPlayer*, CTFPlayer*)
 T CTFPlayer::DropFlag(bool)
 T CTFPlayer::DropHealthPack(CTakeDamageInfo const&, bool)
 T CTFPlayer::DropRune(bool, int)
 T CTFPlayer::EndClassSpecialSkill()
 T CTFPlayer::EndLongTaunt()
 T CTFPlayer::EndPurchasableUpgrades()
 T CTFPlayer::EntSelectSpawnPoint()
 T CTFPlayer::EstimateProjectileImpactPosition(float, float, float)
 T CTFPlayer::EstimateStickybombProjectileImpactPosition(float, float, float)
 T CTFPlayer::Event_Killed(CTakeDamageInfo const&)
 T CTFPlayer::Event_KilledOther(CBaseEntity*, CTakeDamageInfo const&)
 T CTFPlayer::FeignDeath(CTakeDamageInfo const&)
 T CTFPlayer::FindInitialObserverTarget()
 T CTFPlayer::FindNearestObservableTarget(Vector, float)
 T CTFPlayer::FindNextObserverTarget(bool)
 T CTFPlayer::FindOpenTauntPartnerPosition(CEconItemView*, Vector&, float*)
 T CTFPlayer::FindPartnerTauntInitiator()
 T CTFPlayer::FinishedObject(CBaseObject*)
 T CTFPlayer::FireBullet(CTFWeaponBase*, FireBulletsInfo_t const&, bool, int, int)
 T CTFPlayer::FlashlightIsOn()
 T CTFPlayer::FlashlightTurnOff()
 T CTFPlayer::FlashlightTurnOn()
 T CTFPlayer::ForceChangeTeam(int, bool)
 T CTFPlayer::ForcePlayerViewAngles(QAngle const&)
 T CTFPlayer::ForceRespawn()
 T CTFPlayer::ForgetFirstUpgradeForItem(CEconItemView*)
 T CTFPlayer::GetActiveSets(CUtlVector<CEconItemSetDefinition const*, CUtlMemory<CEconItemSetDefinition const*, int> >*)
 T CTFPlayer::GetActiveTFWeapon() const
 T CTFPlayer::GetAllowedTauntPartnerTeam() const
 T CTFPlayer::GetAmmoCount(int) const
 T CTFPlayer::GetAttributeContainer()
 T CTFPlayer::GetAttributeList()
 T CTFPlayer::GetAttributeManager()
 T CTFPlayer::GetAttributeOwner()
 T CTFPlayer::GetAutoTeam(int)
 T CTFPlayer::GetBuildResources()
 T CTFPlayer::GetChargeEffectBeingProvided()
 T CTFPlayer::GetClassEyeHeight()
 T CTFPlayer::GetClosestCaptureZone()
 T CTFPlayer::GetControlPointStandingOn()
 T CTFPlayer::GetDataDescMap()
 T CTFPlayer::GetDroppedWeaponInRange()
 T CTFPlayer::GetEntityForLoadoutSlot(int)
 T CTFPlayer::GetEquippedWearableForLoadoutSlot(int)
 T CTFPlayer::GetHeadScaleSpeed() const
 T CTFPlayer::GetItem() const
 T CTFPlayer::GetKartSpeedBoost()
 T CTFPlayer::GetLoadoutItem(int, int, bool)
 T CTFPlayer::GetMaxAmmo(int, int)
 T CTFPlayer::GetMaxHealth() const
 T CTFPlayer::GetMaxHealthForBuffing() const
 T CTFPlayer::GetMovementForwardPull() const
 T CTFPlayer::GetNextObserverSearchStartPoint(bool)
 T CTFPlayer::GetNumActivePipebombs()
 T CTFPlayer::GetNumObjects(int, int)
 T CTFPlayer::GetNumberofDominations()
 T CTFPlayer::GetObject(int) const
 T CTFPlayer::GetObjectBuildSpeedMultiplier(int, bool) const
 T CTFPlayer::GetObjectCount() const
 T CTFPlayer::GetObjectOfType(int, int) const
 T CTFPlayer::GetOpposingTFTeam()
 T CTFPlayer::GetOverrideStepSound(char const*)
 T CTFPlayer::GetResponseSceneFromConcept(int, char*, int)
 T CTFPlayer::GetResponseSystem()
 T CTFPlayer::GetRuneHealthBonus() const
 T CTFPlayer::GetSceneSoundToken()
 T CTFPlayer::GetServerClass()
 T CTFPlayer::GetSpecialDSP()
 T CTFPlayer::GetStepSoundVelocities(float*, float*)
 T CTFPlayer::GetTFTeam()
 T CTFPlayer::GetTimeSinceWasBombHead() const
 T CTFPlayer::GiveAmmo(int, int, bool)
 T CTFPlayer::GiveAmmo(int, int, bool, EAmmoSource)
 T CTFPlayer::GiveDefaultItems()
 T CTFPlayer::GiveNamedItem(char const*, int, CEconItemView const*, bool)
 T CTFPlayer::HandleAchievement_Medic_AssistHeavy(CTFPlayer*)
 T CTFPlayer::HandleAchievement_Pyro_BurnFromBehind(CTFPlayer*)
 T CTFPlayer::HandleAnimEvent(animevent_t*)
 T CTFPlayer::HandleCommand_JoinClass(char const*, bool)
 T CTFPlayer::HandleCommand_JoinTeam(char const*)
 T CTFPlayer::HandleTauntCommand(int)
 T CTFPlayer::HandleWeaponSlotAfterTaunt()
 T CTFPlayer::HasItem() const
 T CTFPlayer::HasTheFlag(ETFFlagType*, int) const
 T CTFPlayer::HasWearablesEquipped(CSchemaFieldHandle<CEconItemDefinition> const*, int) const
 T CTFPlayer::HolsterOffHandWeapon()
 T CTFPlayer::ImpactWaterTrace(CGameTrace&, Vector const&)
 T CTFPlayer::IncrementKillCountSinceLastDeploy(CTakeDamageInfo const&)
 T CTFPlayer::InitClass()
 T CTFPlayer::InitialSpawn()
 T CTFPlayer::InputBleedPlayer(inputdata_t&)
 T CTFPlayer::InputClearCustomModelRotation(inputdata_t&)
 T CTFPlayer::InputExtinguishPlayer(inputdata_t&)
 T CTFPlayer::InputIgnitePlayer(inputdata_t&)
 T CTFPlayer::InputRollRareSpell(inputdata_t&)
 T CTFPlayer::InputRoundSpawn(inputdata_t&)
 T CTFPlayer::InputSetCustomModel(inputdata_t&)
 T CTFPlayer::InputSetCustomModelOffset(inputdata_t&)
 T CTFPlayer::InputSetCustomModelRotates(inputdata_t&)
 T CTFPlayer::InputSetCustomModelRotation(inputdata_t&)
 T CTFPlayer::InputSetCustomModelVisibleToSelf(inputdata_t&)
 T CTFPlayer::InputSetForcedTauntCam(inputdata_t&)
 T CTFPlayer::InputSpeakResponseConcept(inputdata_t&)
 T CTFPlayer::InputTriggerLootIslandAchievement(inputdata_t&)
 T CTFPlayer::InputTriggerLootIslandAchievement2(inputdata_t&)
 T CTFPlayer::InspectButtonPressed()
 T CTFPlayer::InspectButtonReleased()
 T CTFPlayer::Internal_HandleMapEvent(inputdata_t&)
 T CTFPlayer::InventoryUpdated(CPlayerInventory*)
 T CTFPlayer::IsActiveTFWeapon(CSchemaFieldHandle<CEconItemDefinition> const&) const
 T CTFPlayer::IsAllowedToInitiateTauntWithPartner(CEconItemView*, char*, int)
 T CTFPlayer::IsAllowedToPickUpFlag() const
 T CTFPlayer::IsAllowedToTaunt()
 T CTFPlayer::IsAnyEnemySentryAbleToAttackMe() const
 T CTFPlayer::IsCapturingPoint()
 T CTFPlayer::IsDeflectable()
 T CTFPlayer::IsDemowolf() const
 T CTFPlayer::IsFairyHeavy() const
 T CTFPlayer::IsFrankenHeavy() const
 T CTFPlayer::IsInspecting() const
 T CTFPlayer::IsMiniBoss() const
 T CTFPlayer::IsPlayerClass(int) const
 T CTFPlayer::IsReadyToPlay()
 T CTFPlayer::IsReadyToSpawn()
 T CTFPlayer::IsRobotCostumeEquipped() const
 T CTFPlayer::IsThreatAimingTowardMe(CBaseEntity*, float) const
 T CTFPlayer::IsThreatFiringAtMe(CBaseEntity*) const
 T CTFPlayer::IsTruceValidForEnt() const
 T CTFPlayer::IsValidObserverTarget(CBaseEntity*)
 T CTFPlayer::IsWormsGearEquipped() const
 T CTFPlayer::ItemIsAllowed(CEconItemView*)
 T CTFPlayer::ItemPostFrame()
 T CTFPlayer::ItemTesting_GetTestItem(int, int)
 T CTFPlayer::ItemTesting_Start(KeyValues*)
 T CTFPlayer::ItemTesting_UpdateBots(KeyValues*)
 T CTFPlayer::ItemsMatch(TFPlayerClassData_t*, CEconItemView*, CEconItemView*, CTFWeaponBase*)
 T CTFPlayer::ManageBuilderWeapons(TFPlayerClassData_t*)
 T CTFPlayer::ManageRegularWeapons(TFPlayerClassData_t*)
 T CTFPlayer::MaybeDrawRailgunBeam(IRecipientFilter*, CTFWeaponBase*, Vector const&, Vector const&)
 T CTFPlayer::MedicGetChargeLevel(CTFWeaponBase**)
 T CTFPlayer::MedicGetHealTarget()
 T CTFPlayer::MerasmusPlayerBombExplode(bool)
 T CTFPlayer::ModeWantsSpectatorGUI(int)
 T CTFPlayer::ModifyEmitSoundParams(EmitSound_t&)
 T CTFPlayer::ModifyOrAppendCriteria(AI_CriteriaSet&)
 T CTFPlayer::NetworkVar_m_AttributeManager::NetworkStateChanged()
 T CTFPlayer::NetworkVar_m_AttributeManager::NetworkStateChanged(void*)
 T CTFPlayer::NetworkVar_m_AttributeManager::~NetworkVar_m_AttributeManager()
 T CTFPlayer::NetworkVar_m_Shared::NetworkStateChanged()
 T CTFPlayer::NetworkVar_m_Shared::NetworkStateChanged(void*)
 T CTFPlayer::NetworkVar_m_Shared::~NetworkVar_m_Shared()
 T CTFPlayer::NoteSpokeVoiceCommand(char const*)
 T CTFPlayer::NoteWeaponFired()
 T CTFPlayer::OnAchievementEarned(int)
 T CTFPlayer::OnBurnOther(CTFPlayer*, CTFWeaponBase*)
 T CTFPlayer::OnDamagedByExplosion(CTakeDamageInfo const&)
 T CTFPlayer::OnDealtDamage(CBaseCombatCharacter*, CTakeDamageInfo const&)
 T CTFPlayer::OnEmitFootstepSound(CSoundParameters const&, Vector const&, float)
 T CTFPlayer::OnKilledOther_Effects(CBaseEntity*, CTakeDamageInfo const&)
 T CTFPlayer::OnMyWeaponFired(CBaseCombatWeapon*)
 T CTFPlayer::OnNavAreaChanged(CNavArea*, CNavArea*)
 T CTFPlayer::OnTakeDamage(CTakeDamageInfo const&)
 T CTFPlayer::OnTakeDamage_Alive(CTakeDamageInfo const&)
 T CTFPlayer::OnTauntSucceeded(char const*, int, int)
 T CTFPlayer::OwnedObjectDestroyed(CBaseObject*)
 T CTFPlayer::PainSound(CTakeDamageInfo const&)
 T CTFPlayer::ParseSharedTauntDataFromEconItemView(CEconItemView*)
 T CTFPlayer::PickupWeaponFromOther(CTFDroppedWeapon*)
 T CTFPlayer::PlayCritReceivedSound()
 T CTFPlayer::PlayDamageResistSound(float, float)
 T CTFPlayer::PlayReadySound()
 T CTFPlayer::PlayScene(char const*, float, AI_Response*, IRecipientFilter*)
 T CTFPlayer::PlaySpecificSequence(char const*)
 T CTFPlayer::PlayTauntOutroScene()
 T CTFPlayer::PlayTauntRemapInputScene()
 T CTFPlayer::PlayTauntSceneFromItem(CEconItemView*)
 T CTFPlayer::PlayerDeathThink()
 T CTFPlayer::PlayerHasPowerplay()
 T CTFPlayer::PlayerRunCommand(CUserCmd*, IMoveHelper*)
 T CTFPlayer::PlayerUse()
 T CTFPlayer::PostInventoryApplication()
 T CTFPlayer::PostThink()
 T CTFPlayer::PowerplayThink()
 T CTFPlayer::PreThink()
 T CTFPlayer::Precache()
 T CTFPlayer::PrecacheKart()
 T CTFPlayer::PrecacheMvM()
 T CTFPlayer::PrecachePlayerModels()
 T CTFPlayer::PrecacheTFPlayer()
 T CTFPlayer::ProcessSceneEvent(CSceneEventInfo*, CChoreoScene*, CChoreoEvent*)
 T CTFPlayer::ReapplyItemUpgrades(CEconItemView*)
 T CTFPlayer::ReapplyPlayerUpgrades()
 T CTFPlayer::ReapplyProvision()
 T CTFPlayer::RefreshCollisionBounds()
 T CTFPlayer::RegenThink()
 T CTFPlayer::Regenerate(bool)
 T CTFPlayer::RememberUpgrade(int, CEconItemView*, int, int, bool)
 T CTFPlayer::RemoveAllCustomAttributes()
 T CTFPlayer::RemoveAllItems()
 T CTFPlayer::RemoveAllItems(bool)
 T CTFPlayer::RemoveAllObjects(bool)
 T CTFPlayer::RemoveAllOwnedEntitiesFromWorld(bool)
 T CTFPlayer::RemoveAllWeapons()
 T CTFPlayer::RemoveAmmo(int, char const*)
 T CTFPlayer::RemoveAmmo(int, int)
 T CTFPlayer::RemoveBuildResources(int)
 T CTFPlayer::RemoveCurrency(int)
 T CTFPlayer::RemoveCustomAttribute(char const*)
 T CTFPlayer::RemoveDisguise()
 T CTFPlayer::RemoveInvisibility()
 T CTFPlayer::RemoveMeleeCrit()
 T CTFPlayer::RemoveNemesisRelationships()
 T CTFPlayer::RemoveObject(CBaseObject*)
 T CTFPlayer::RemoveOwnedProjectiles()
 T CTFPlayer::RemovePlayerAttributes(bool)
 T CTFPlayer::RemoveTeleportEffect()
 T CTFPlayer::ResetKartDamage()
 T CTFPlayer::ResetPerRoundStats()
 T CTFPlayer::ResetScores()
 T CTFPlayer::RuneRegenThink()
 T CTFPlayer::SOCacheUnsubscribed(CSteamID const&)
 T CTFPlayer::SaveLastWeaponSlot()
 T CTFPlayer::SaveMe()
 T CTFPlayer::SayAskForBall()
 T CTFPlayer::SelectClosestControlPointByTravelDistance(CUtlVector<CTeamControlPoint*, CUtlMemory<CTeamControlPoint*, int> >*) const
 T CTFPlayer::SelectItem(char const*, int)
 T CTFPlayer::SelectSpawnSpotByName(char const*, CBaseEntity*&)
 T CTFPlayer::SelectSpawnSpotByType(char const*, CBaseEntity*&)
 T CTFPlayer::SetAnimation(PLAYER_ANIM)
 T CTFPlayer::SetBlastJumpState(int, bool)
 T CTFPlayer::SetBombHeadTimestamp()
 T CTFPlayer::SetCampaignMedalActive(int)
 T CTFPlayer::SetCurrentTauntMoveSpeed(float)
 T CTFPlayer::SetGrapplingHookTarget(CBaseEntity*, bool)
 T CTFPlayer::SetIsCoaching(bool)
 T CTFPlayer::SetItem(CTFItem*)
 T CTFPlayer::SetNumberofDominations(int)
 T CTFPlayer::SetObserverMode(int)
 T CTFPlayer::SetObserverTarget(CBaseEntity*)
 T CTFPlayer::SetOffHandWeapon(CTFWeaponBase*)
 T CTFPlayer::SetPowerplayEnabled(bool)
 T CTFPlayer::SetStepSoundTime(stepsoundtimes_t, bool)
 T CTFPlayer::SetTauntYaw(float)
 T CTFPlayer::SetupVisibility(CBaseEntity*, unsigned char*, int)
 T CTFPlayer::ShouldAnnounceAchievement()
 T CTFPlayer::ShouldCollide(int, int) const
 T CTFPlayer::ShouldForceTransmitsForTeam(int)
 T CTFPlayer::ShouldGainInstantSpawn()
 T CTFPlayer::ShouldGetBonusPointsForExtinguishEvent(int)
 T CTFPlayer::ShouldGib(CTakeDamageInfo const&)
 T CTFPlayer::ShouldShowVoiceSubtitleToEnemy()
 T CTFPlayer::ShouldStopTaunting()
 T CTFPlayer::ShouldTransmit(CCheckTransmitInfo const*)
 T CTFPlayer::Spawn()
 T CTFPlayer::SpeakConceptIfAllowed(int, char const*, char*, unsigned long, IRecipientFilter*)
 T CTFPlayer::SpeakWeaponFire(int)
 T CTFPlayer::SpyDeadRingerDeath(CTakeDamageInfo const&)
 T CTFPlayer::StartBuildingObjectOfType(int, int)
 T CTFPlayer::StartedBuildingObject(int)
 T CTFPlayer::StateEnter(int)
 T CTFPlayer::StateEnterACTIVE()
 T CTFPlayer::StateEnterDYING()
 T CTFPlayer::StateEnterOBSERVER()
 T CTFPlayer::StateEnterWELCOME()
 T CTFPlayer::StateThinkDYING()
 T CTFPlayer::StateThinkOBSERVER()
 T CTFPlayer::StateThinkWELCOME()
 T CTFPlayer::StopRagdollDeathAnim()
 T CTFPlayer::StopTaunt()
 T CTFPlayer::StopTauntSoundLoop()
 T CTFPlayer::StunSound(CTFPlayer*, int, int)
 T CTFPlayer::TFPlayerThink()
 T CTFPlayer::TakeHealth(float, int)
 T CTFPlayer::Taunt(taunts_t, int)
 T CTFPlayer::TeamFortress_CalculateMaxSpeed(bool) const
 T CTFPlayer::TeamFortress_ClientDisconnected()
 T CTFPlayer::TeamFortress_GetDisguiseTarget(int, int)
 T CTFPlayer::TeamFortress_SetSpeed()
 T CTFPlayer::TeleportEffect()
 T CTFPlayer::Touch(CBaseEntity*)
 T CTFPlayer::TraceAttack(CTakeDamageInfo const&, Vector const&, CGameTrace*, CDmgAccumulator*)
 T CTFPlayer::TryToPickupBuilding()
 T CTFPlayer::TryToPickupDroppedWeapon()
 T CTFPlayer::UpdateCustomAttributes()
 T CTFPlayer::UpdateExpression()
 T CTFPlayer::UpdateHalloween()
 T CTFPlayer::UpdateInventory(bool)
 T CTFPlayer::UpdateModel()
 T CTFPlayer::UpdateOnRemove()
 T CTFPlayer::UseActionSlotItemPressed()
 T CTFPlayer::UseActionSlotItemReleased()
 T CTFPlayer::ValidateCurrentObserverTarget()
 T CTFPlayer::ValidateWeapons(TFPlayerClassData_t*, bool)
 T CTFPlayer::ValidateWearables(TFPlayerClassData_t*)
 T CTFPlayer::VerifySOCache()
 T CTFPlayer::WantsLagCompensationOnEntity(CBasePlayer const*, CUserCmd const*, CBitVec<2048> const*) const
 T CTFPlayer::Weapon_CanSwitchTo(CBaseCombatWeapon*)
 T CTFPlayer::Weapon_Drop(CBaseCombatWeapon*, Vector const*, Vector const*)
 T CTFPlayer::Weapon_Equip(CBaseCombatWeapon*)
 T CTFPlayer::Weapon_FrameUpdate()
 T CTFPlayer::Weapon_GetWeaponByType(int)
 T CTFPlayer::Weapon_HandleAnimEvent(animevent_t*)
 T CTFPlayer::Weapon_OwnsThisID(int) const
 T CTFPlayer::Weapon_ShouldSetLast(CBaseCombatWeapon*, CBaseCombatWeapon*)
 T CTFPlayer::Weapon_Switch(CBaseCombatWeapon*, int)
 T CTFPlayer::YouForgotToImplementOrDeclareServerClass()
 T CTFPlayer::~CTFPlayer()
 T CTFPlayerAnimState::CalcMainActivity()
 T CTFPlayerAnimState::CheckPasstimeThrowAnimation()
 T CTFPlayerAnimState::CheckStunAnimation()
 T CTFPlayerAnimState::ClearAnimationState()
 T CTFPlayerAnimState::ComputePoseParam_AimYaw(CStudioHdr*)
 T CTFPlayerAnimState::DoAnimationEvent(PlayerAnimEvent_t, int)
 T CTFPlayerAnimState::GetCurrentMaxGroundSpeed()
 T CTFPlayerAnimState::GetGesturePlaybackRate()
 T CTFPlayerAnimState::GetOuterAbsVelocity(Vector&)
 T CTFPlayerAnimState::HandleDucking(Activity&)
 T CTFPlayerAnimState::HandleJumping(Activity&)
 T CTFPlayerAnimState::HandleMoving(Activity&)
 T CTFPlayerAnimState::HandleSwimming(Activity&)
 T CTFPlayerAnimState::RestartGesture(int, Activity, bool)
 T CTFPlayerAnimState::ShouldUpdateAnimState()
 T CTFPlayerAnimState::Taunt_ComputePoseParam_MoveX(CStudioHdr*)
 T CTFPlayerAnimState::Taunt_ComputePoseParam_MoveY(CStudioHdr*)
 T CTFPlayerAnimState::TranslateActivity(Activity)
 T CTFPlayerAnimState::Update(float, float)
 T CTFPlayerAnimState::Vehicle_LeanAccel(float)
 T CTFPlayerAnimState::~CTFPlayerAnimState()
 T CTFPlayerClass::CTFPlayerClass()
 T CTFPlayerClass::~CTFPlayerClass()
 T CTFPlayerClassDataMgr::AddAdditionalPlayerDeathSounds()
 T CTFPlayerClassDataMgr::Get(unsigned int)
 T CTFPlayerClassDataMgr::Init()
 T CTFPlayerClassDataMgr::~CTFPlayerClassDataMgr()
 T CTFPlayerClassShared::CTFPlayerClassShared()
 T CTFPlayerClassShared::CanBuildObject(int)
 T CTFPlayerClassShared::CustomModelHasChanged()
 T CTFPlayerClassShared::GetHandModelName(int) const
 T CTFPlayerClassShared::GetModelName() const
 T CTFPlayerClassShared::Init(int)
 T CTFPlayerClassShared::NetworkStateChanged()
 T CTFPlayerClassShared::NetworkStateChanged(void*)
 T CTFPlayerClassShared::Reset()
 T CTFPlayerClassShared::SetCustomModel(char const*, bool)
 T CTFPlayerDestructionLogic::CTFPlayerDestructionLogic()
 T CTFPlayerDestructionLogic::CalcTeamLeader(int)
 T CTFPlayerDestructionLogic::CountdownThink()
 T CTFPlayerDestructionLogic::CreateDispenser(int)
 T CTFPlayerDestructionLogic::EvaluatePlayerCount()
 T CTFPlayerDestructionLogic::FireGameEvent(IGameEvent*)
 T CTFPlayerDestructionLogic::GetCountdownImage()
 T CTFPlayerDestructionLogic::GetDataDescMap()
 T CTFPlayerDestructionLogic::GetHealDistance()
 T CTFPlayerDestructionLogic::GetPlayerDestructionLogic()
 T CTFPlayerDestructionLogic::GetPropModelName() const
 T CTFPlayerDestructionLogic::GetServerClass()
 T CTFPlayerDestructionLogic::GetTeamLeader(int) const
 T CTFPlayerDestructionLogic::GetType() const
 T CTFPlayerDestructionLogic::InputDisableMaxScoreUpdating(inputdata_t&)
 T CTFPlayerDestructionLogic::InputEnableMaxScoreUpdating(inputdata_t&)
 T CTFPlayerDestructionLogic::InputScoreBluePoints(inputdata_t&)
 T CTFPlayerDestructionLogic::InputScoreRedPoints(inputdata_t&)
 T CTFPlayerDestructionLogic::InputSetCountdownImage(inputdata_t&)
 T CTFPlayerDestructionLogic::InputSetCountdownTimer(inputdata_t&)
 T CTFPlayerDestructionLogic::InputSetFlagResetDelay(inputdata_t&)
 T CTFPlayerDestructionLogic::InputSetPointsOnPlayerDeath(inputdata_t&)
 T CTFPlayerDestructionLogic::IsUsingCustomCountdownImage()
 T CTFPlayerDestructionLogic::OnBlueScoreChanged()
 T CTFPlayerDestructionLogic::OnRedScoreChanged()
 T CTFPlayerDestructionLogic::PlayPropDropSound(CTFPlayer*)
 T CTFPlayerDestructionLogic::PlayPropPickupSound(CTFPlayer*)
 T CTFPlayerDestructionLogic::PlaySound(char const*, CTFPlayer*)
 T CTFPlayerDestructionLogic::Precache()
 T CTFPlayerDestructionLogic::TeamWin(int)
 T CTFPlayerDestructionLogic::YouForgotToImplementOrDeclareServerClass()
 T CTFPlayerDestructionLogic::~CTFPlayerDestructionLogic()
 T CTFPlayerInfo::~CTFPlayerInfo()
 T CTFPlayerInventory::CTFPlayerInventory()
 T CTFPlayerInventory::CanPurchaseItems(int) const
 T CTFPlayerInventory::ClearClassLoadoutChangeTracking()
 T CTFPlayerInventory::DumpInventoryToConsole(bool)
 T CTFPlayerInventory::ExtractInventorySortPosition(unsigned int)
 T CTFPlayerInventory::GetFirstItemOfItemDef(unsigned short, CPlayerInventory*)
 T CTFPlayerInventory::GetItemInLoadout(int, int)
 T CTFPlayerInventory::GetMaxItemCount() const
 T CTFPlayerInventory::GetPreviewItemDef() const
 T CTFPlayerInventory::ItemHasBeenUpdated(CEconItemView*, bool, bool)
 T CTFPlayerInventory::ItemIsBeingRemoved(CEconItemView*)
 T CTFPlayerInventory::NotifyHasNewItems()
 T CTFPlayerInventory::OnHasNewItems()
 T CTFPlayerInventory::SOCreated(CSteamID const&, GCSDK::CSharedObject const*, GCSDK::ESOCacheEvent)
 T CTFPlayerInventory::SOUpdated(CSteamID const&, GCSDK::CSharedObject const*, GCSDK::ESOCacheEvent)
 T CTFPlayerInventory::ValidateInventoryPositions()
 T CTFPlayerInventory::~CTFPlayerInventory()
 T CTFPlayerMove::FinishMove(CBasePlayer*, CUserCmd*, CMoveData*)
 T CTFPlayerMove::SetupMove(CBasePlayer*, CUserCmd*, IMoveHelper*, CMoveData*)
 T CTFPlayerMove::StartCommand(CBasePlayer*, CUserCmd*)
 T CTFPlayerMove::~CTFPlayerMove()
 T CTFPlayerResource::CTFPlayerResource()
 T CTFPlayerResource::FireGameEvent(IGameEvent*)
 T CTFPlayerResource::GetPartyLeaderIndex(int)
 T CTFPlayerResource::GetServerClass()
 T CTFPlayerResource::GetTotalScore(int)
 T CTFPlayerResource::Init(int)
 T CTFPlayerResource::NetworkVar_m_iConnectionState::Set(int, MM_PlayerConnectionState_t const&)
 T CTFPlayerResource::SetPartyLeaderIndex(int, int)
 T CTFPlayerResource::SetPlayerClassWhenKilled(int, int)
 T CTFPlayerResource::Spawn()
 T CTFPlayerResource::UpdateConnectedPlayer(int, CBasePlayer*)
 T CTFPlayerResource::UpdateDisconnectedPlayer(int)
 T CTFPlayerResource::UpdatePlayerData()
 T CTFPlayerResource::YouForgotToImplementOrDeclareServerClass()
 T CTFPlayerResource::~CTFPlayerResource()
 T CTFPlayerShared::ActivateRageBuff(CBaseEntity*, int)
 T CTFPlayerShared::AddCond(ETFCond, float, CBaseEntity*)
 T CTFPlayerShared::AddPhaseEffects()
 T CTFPlayerShared::AddTempCritBonus(float)
 T CTFPlayerShared::AddToSpyCloakMeter(float, bool)
 T CTFPlayerShared::ApplyAttributeToPlayer(char const*, float)
 T CTFPlayerShared::Burn(CTFPlayer*, CTFWeaponBase*, float)
 T CTFPlayerShared::CTFPlayerShared()
 T CTFPlayerShared::CalcChargeCrit(bool)
 T CTFPlayerShared::CalculateChargeCap() const
 T CTFPlayerShared::CalculateObjectCost(CTFPlayer*, int)
 T CTFPlayerShared::CanBeDebuffed() const
 T CTFPlayerShared::CanRecieveMedigunChargeEffect(medigun_charge_types) const
 T CTFPlayerShared::CanRuneCharge() const
 T CTFPlayerShared::CheckForAchievement(int)
 T CTFPlayerShared::CompleteDisguise()
 T CTFPlayerShared::ConditionGameRulesThink()
 T CTFPlayerShared::ConditionThink()
 T CTFPlayerShared::CreateVehicleMove(float, CUserCmd*)
 T CTFPlayerShared::DebugPrintConditions()
 T CTFPlayerShared::DemoShieldChargeThink()
 T CTFPlayerShared::DetermineDisguiseWeapon(bool)
 T CTFPlayerShared::DetermineDisguiseWearables()
 T CTFPlayerShared::Disguise(int, int, CTFPlayer*, bool)
 T CTFPlayerShared::EndCharge()
 T CTFPlayerShared::FadeInvis(float)
 T CTFPlayerShared::FindDisguiseTarget()
 T CTFPlayerShared::FireGameEvent(IGameEvent*)
 T CTFPlayerShared::GetActiveStunInfo() const
 T CTFPlayerShared::GetActiveTFWeapon() const
 T CTFPlayerShared::GetAmountStunned(int)
 T CTFPlayerShared::GetCarryingRuneType() const
 T CTFPlayerShared::GetConditionAssistFromAttacker()
 T CTFPlayerShared::GetConditionAssistFromVictim()
 T CTFPlayerShared::GetConditionDuration(ETFCond) const
 T CTFPlayerShared::GetConditionProvider(ETFCond) const
 T CTFPlayerShared::GetCritMult()
 T CTFPlayerShared::GetDesiredPlayerClassIndex()
 T CTFPlayerShared::GetDisguiseMaxBuffedHealth(bool, bool)
 T CTFPlayerShared::GetDisguiseMaxHealth()
 T CTFPlayerShared::GetDisguiseTeam() const
 T CTFPlayerShared::GetFirstHealer()
 T CTFPlayerShared::GetHealerByIndex(int)
 T CTFPlayerShared::GetMaxBuffedHealth(bool, bool)
 T CTFPlayerShared::GetNumKillsInTime(float)
 T CTFPlayerShared::GetPasstimePassTarget() const
 T CTFPlayerShared::GetPercentInvisible() const
 T CTFPlayerShared::GetSpeedWatchersList(CUtlVector<CTFPlayer*, CUtlMemory<CTFPlayer*, int> >*) const
 T CTFPlayerShared::GetStunner()
 T CTFPlayerShared::HasDemoShieldEquipped() const
 T CTFPlayerShared::Heal(CBaseEntity*, float, float, float, bool, CTFPlayer*)
 T CTFPlayerShared::Heal_Radius(bool)
 T CTFPlayerShared::HealerIsDispenser(int)
 T CTFPlayerShared::HealthKitPickupEffects(int)
 T CTFPlayerShared::InCond(ETFCond) const
 T CTFPlayerShared::IncrementRevengeCrits()
 T CTFPlayerShared::Init(CTFPlayer*)
 T CTFPlayerShared::InstantlySniperUnzoom()
 T CTFPlayerShared::InterruptCharge()
 T CTFPlayerShared::InvisibilityThink()
 T CTFPlayerShared::IsAiming()
 T CTFPlayerShared::IsAlly(CBaseEntity*)
 T CTFPlayerShared::IsControlStunned()
 T CTFPlayerShared::IsCritBoosted() const
 T CTFPlayerShared::IsInvulnerable() const
 T CTFPlayerShared::IsLoser()
 T CTFPlayerShared::IsLoserStateStunned() const
 T CTFPlayerShared::IsPlayerDominated(int)
 T CTFPlayerShared::IsPlayerDominatingMe(int)
 T CTFPlayerShared::IsSnared()
 T CTFPlayerShared::IsStealthed() const
 T CTFPlayerShared::MakeBleed(CTFPlayer*, CTFWeaponBase*, float, int, bool)
 T CTFPlayerShared::ModifyRage(float)
 T CTFPlayerShared::NetworkStateChanged()
 T CTFPlayerShared::NetworkStateChanged(void*)
 T CTFPlayerShared::NetworkVar_m_ConditionList::NetworkStateChanged()
 T CTFPlayerShared::NetworkVar_m_ConditionList::NetworkStateChanged(void*)
 T CTFPlayerShared::NetworkVar_m_RoundScoreData::NetworkStateChanged()
 T CTFPlayerShared::NetworkVar_m_RoundScoreData::NetworkStateChanged(void*)
 T CTFPlayerShared::NetworkVar_m_ScoreData::NetworkStateChanged()
 T CTFPlayerShared::NetworkVar_m_ScoreData::NetworkStateChanged(void*)
 T CTFPlayerShared::NoteLastDamageTime(int)
 T CTFPlayerShared::OnAddBalloonHead()
 T CTFPlayerShared::OnAddFeignDeath()
 T CTFPlayerShared::OnAddHalloweenGhostMode()
 T CTFPlayerShared::OnAddHalloweenGiant()
 T CTFPlayerShared::OnAddHalloweenKart()
 T CTFPlayerShared::OnAddHalloweenSpeedBoost()
 T CTFPlayerShared::OnAddHalloweenTiny()
 T CTFPlayerShared::OnAddInPurgatory()
 T CTFPlayerShared::OnAddInvulnerable()
 T CTFPlayerShared::OnAddMadMilk()
 T CTFPlayerShared::OnAddMeleeOnly()
 T CTFPlayerShared::OnAddPlague()
 T CTFPlayerShared::OnAddShieldCharge()
 T CTFPlayerShared::OnAddStealthed()
 T CTFPlayerShared::OnAddStunned()
 T CTFPlayerShared::OnAddTaunting()
 T CTFPlayerShared::OnConditionAdded(ETFCond)
 T CTFPlayerShared::OnConditionRemoved(ETFCond)
 T CTFPlayerShared::OnRemoveBalloonHead()
 T CTFPlayerShared::OnRemoveDisguised()
 T CTFPlayerShared::OnRemoveHalloweenBombHead()
 T CTFPlayerShared::OnRemoveHalloweenGhostMode()
 T CTFPlayerShared::OnRemoveHalloweenGiant()
 T CTFPlayerShared::OnRemoveHalloweenKart()
 T CTFPlayerShared::OnRemoveHalloweenSpeedBoost()
 T CTFPlayerShared::OnRemoveHalloweenTiny()
 T CTFPlayerShared::OnRemoveInPurgatory()
 T CTFPlayerShared::OnRemoveMeleeOnly()
 T CTFPlayerShared::OnRemovePhase()
 T CTFPlayerShared::OnRemoveStealthed()
 T CTFPlayerShared::OnRemoveStunned()
 T CTFPlayerShared::OnRemoveTaunting()
 T CTFPlayerShared::OnRemoveUrine()
 T CTFPlayerShared::OnSpyTouchedByEnemy()
 T CTFPlayerShared::ProcessDisguiseImpulse(CTFPlayer*)
 T CTFPlayerShared::PulseKingRuneBuff()
 T CTFPlayerShared::PulseMedicRadiusHeal()
 T CTFPlayerShared::PulseRageBuff(CTFPlayerShared::ERageBuffSlot)
 T CTFPlayerShared::RadiusCurrencyCollectionCheck()
 T CTFPlayerShared::RadiusHealthkitCollectionCheck()
 T CTFPlayerShared::RadiusSpyScan()
 T CTFPlayerShared::RecalculateChargeEffects(bool)
 T CTFPlayerShared::RecalculatePlayerBodygroups()
 T CTFPlayerShared::RecordDamageEvent(CTakeDamageInfo const&, bool, int)
 T CTFPlayerShared::RemoveAllCond()
 T CTFPlayerShared::RemoveAttributeFromPlayer(char const*)
 T CTFPlayerShared::RemoveCond(ETFCond, bool)
 T CTFPlayerShared::RemoveDisguise()
 T CTFPlayerShared::RemoveDisguiseWeapon()
 T CTFPlayerShared::RemoveDisguiseWearables()
 T CTFPlayerShared::RemovePhaseEffects()
 T CTFPlayerShared::ResetRageBuffs()
 T CTFPlayerShared::ResetRageMeter()
 T CTFPlayerShared::ResetRageSystem()
 T CTFPlayerShared::ResetStreaks()
 T CTFPlayerShared::SelfBurn(float)
 T CTFPlayerShared::SendNewInvulnGameEvent()
 T CTFPlayerShared::SetAirDash(int)
 T CTFPlayerShared::SetCarriedObject(CBaseObject*)
 T CTFPlayerShared::SetCarryingRuneType(RuneTypes_t)
 T CTFPlayerShared::SetChargeEffect(medigun_charge_types, bool, bool, MedigunEffects_t const&, float, CTFPlayer*)
 T CTFPlayerShared::SetDisguiseHealth(int)
 T CTFPlayerShared::SetJumping(bool)
 T CTFPlayerShared::SetPasstimePassTarget(CTFPlayer*)
 T CTFPlayerShared::SetPlayerDominated(CTFPlayer*, bool)
 T CTFPlayerShared::SetPlayerDominatingMe(CTFPlayer*, bool)
 T CTFPlayerShared::SetRageMeter(float)
 T CTFPlayerShared::SetRevengeCrits(int)
 T CTFPlayerShared::SetScoutHypeMeter(float)
 T CTFPlayerShared::SetStunExpireTime(float)
 T CTFPlayerShared::Spawn()
 T CTFPlayerShared::StopBleed(CTFPlayer*, CTFWeaponBase*)
 T CTFPlayerShared::StopHealing(CBaseEntity*)
 T CTFPlayerShared::StunPlayer(float, float, int, CTFPlayer*)
 T CTFPlayerShared::TestAndExpireChargeEffect(medigun_charge_types)
 T CTFPlayerShared::UpdateChargeMeter()
 T CTFPlayerShared::UpdateCloakMeter()
 T CTFPlayerShared::UpdateCritMult()
 T CTFPlayerShared::UpdateEnergyDrinkMeter()
 T CTFPlayerShared::UpdateLegacyStunSystem()
 T CTFPlayerShared::UpdatePhaseEffects()
 T CTFPlayerShared::UpdateRageBuffsAndRage()
 T CTFPlayerShared::~CTFPlayerShared()
 T CTFPlayerSharedUtils::GetBuilderForObjectType(CTFPlayer*, int)
 T CTFPlayerSharedUtils::GetEconItemViewByLoadoutSlot(CTFPlayer*, int, CEconEntity**)
 T CTFPlayertPathCost::operator()(CNavArea*, CNavArea*, CNavLadder const*, CFuncElevator const*, float) const
 T CTFPointWeaponMimic::DetonateStickies(inputdata_t&)
 T CTFPointWeaponMimic::FireArrow()
 T CTFPointWeaponMimic::FireGrenade()
 T CTFPointWeaponMimic::FireRocket()
 T CTFPointWeaponMimic::FireStickyGrenade()
 T CTFPointWeaponMimic::GetDataDescMap()
 T CTFPointWeaponMimic::GetFiringAngles() const
 T CTFPointWeaponMimic::InputFireMultiple(inputdata_t&)
 T CTFPointWeaponMimic::InputFireOnce(inputdata_t&)
 T CTFPointWeaponMimic::Spawn()
 T CTFPointWeaponMimic::~CTFPointWeaponMimic()
 T CTFPowerup::CTFPowerup()
 T CTFPowerup::DropSingleInstance(Vector&, CBaseCombatCharacter*, float, float)
 T CTFPowerup::GetDataDescMap()
 T CTFPowerup::GetLifeTime()
 T CTFPowerup::GetPowerupModel()
 T CTFPowerup::GetPowerupSize()
 T CTFPowerup::GetRespawnDelay()
 T CTFPowerup::InputDisable(inputdata_t&)
 T CTFPowerup::InputEnable(inputdata_t&)
 T CTFPowerup::InputToggle(inputdata_t&)
 T CTFPowerup::IsDisabled()
 T CTFPowerup::ItemCanBeTouchedByPlayer(CBasePlayer*)
 T CTFPowerup::Materialize()
 T CTFPowerup::Materialize_Internal()
 T CTFPowerup::MyTouch(CBasePlayer*)
 T CTFPowerup::Precache()
 T CTFPowerup::Respawn()
 T CTFPowerup::SetDisabled(bool)
 T CTFPowerup::Spawn()
 T CTFPowerup::ValidTouch(CBasePlayer*)
 T CTFPowerup::~CTFPowerup()
 T CTFPowerupBottle::GetDataDescMap()
 T CTFPowerupBottle::GetMaxNumCharges() const
 T CTFPowerupBottle::GetNumCharges() const
 T CTFPowerupBottle::GetPowerupType() const
 T CTFPowerupBottle::GetServerClass()
 T CTFPowerupBottle::GetSkin()
 T CTFPowerupBottle::Precache()
 T CTFPowerupBottle::ReapplyProvision()
 T CTFPowerupBottle::RemoveEffect()
 T CTFPowerupBottle::Reset()
 T CTFPowerupBottle::SetNumCharges(unsigned char)
 T CTFPowerupBottle::StatusThink()
 T CTFPowerupBottle::UnEquip(CBasePlayer*)
 T CTFPowerupBottle::Use()
 T CTFPowerupBottle::YouForgotToImplementOrDeclareServerClass()
 T CTFPowerupBottle::~CTFPowerupBottle()
 T CTFProjectile_Arrow::AdjustDamageDirection(CTakeDamageInfo const&, Vector&, CBaseEntity*)
 T CTFProjectile_Arrow::ArrowTouch(CBaseEntity*)
 T CTFProjectile_Arrow::BreakArrow()
 T CTFProjectile_Arrow::BuildingHealingArrow(CBaseEntity*)
 T CTFProjectile_Arrow::CTFProjectile_Arrow()
 T CTFProjectile_Arrow::CanHeadshot()
 T CTFProjectile_Arrow::CheckRagdollPinned(Vector const&, Vector const&, int, int, CBaseEntity*, int, int)
 T CTFProjectile_Arrow::CheckSkyboxImpact(CBaseEntity*)
 T CTFProjectile_Arrow::Create(Vector const&, QAngle const&, float, float, ProjectileType_t, CBaseEntity*, CBaseEntity*)
 T CTFProjectile_Arrow::CreateTrail()
 T CTFProjectile_Arrow::Deflected(CBaseEntity*, Vector&)
 T CTFProjectile_Arrow::GetArrowSkin() const
 T CTFProjectile_Arrow::GetAssistant()
 T CTFProjectile_Arrow::GetBoneAttachmentInfo(mstudiobbox_t*, CBaseAnimating*, Vector&, QAngle&, int&, int&)
 T CTFProjectile_Arrow::GetDamage()
 T CTFProjectile_Arrow::GetDataDescMap()
 T CTFProjectile_Arrow::GetProjectileType() const
 T CTFProjectile_Arrow::GetScorer()
 T CTFProjectile_Arrow::GetServerClass()
 T CTFProjectile_Arrow::GetTrailParticleName()
 T CTFProjectile_Arrow::GetWeaponID() const
 T CTFProjectile_Arrow::ImpactSound(char const*, bool)
 T CTFProjectile_Arrow::ImpactTeamPlayer(CTFPlayer*)
 T CTFProjectile_Arrow::ImpactThink()
 T CTFProjectile_Arrow::IncrementDeflected()
 T CTFProjectile_Arrow::InitArrow(QAngle const&, float, float, ProjectileType_t, CBaseEntity*, CBaseEntity*)
 T CTFProjectile_Arrow::IsBreakable() const
 T CTFProjectile_Arrow::IsDeflectable()
 T CTFProjectile_Arrow::IsDestroyable()
 T CTFProjectile_Arrow::OnArrowImpact(mstudiobbox_t*, CBaseEntity*, CBaseEntity*)
 T CTFProjectile_Arrow::OnArrowImpactObject(CBaseEntity*)
 T CTFProjectile_Arrow::OnArrowMissAllPlayers()
 T CTFProjectile_Arrow::PositionArrowOnBone(mstudiobbox_t*, CBaseAnimating*)
 T CTFProjectile_Arrow::Precache()
 T CTFProjectile_Arrow::RemoveThink()
 T CTFProjectile_Arrow::RemoveTrail()
 T CTFProjectile_Arrow::ShouldNotDetonate()
 T CTFProjectile_Arrow::Spawn()
 T CTFProjectile_Arrow::StrikeTarget(mstudiobbox_t*, CBaseEntity*)
 T CTFProjectile_Arrow::YouForgotToImplementOrDeclareServerClass()
 T CTFProjectile_Arrow::~CTFProjectile_Arrow()
 T CTFProjectile_Cleaver::Create(Vector const&, QAngle const&, Vector const&, Vector const&, CBaseCombatCharacter*, CTFWeaponInfo const&, int)
 T CTFProjectile_Cleaver::Detonate()
 T CTFProjectile_Cleaver::Explode(CGameTrace*, int)
 T CTFProjectile_Cleaver::GetDamage()
 T CTFProjectile_Cleaver::GetEffectCondition()
 T CTFProjectile_Cleaver::GetImpactEffect()
 T CTFProjectile_Cleaver::GetServerClass()
 T CTFProjectile_Cleaver::GetWeaponID() const
 T CTFProjectile_Cleaver::OnHit(CBaseEntity*)
 T CTFProjectile_Cleaver::Precache()
 T CTFProjectile_Cleaver::SetCustomPipebombModel()
 T CTFProjectile_Cleaver::YouForgotToImplementOrDeclareServerClass()
 T CTFProjectile_Cleaver::~CTFProjectile_Cleaver()
 T CTFProjectile_EnergyBall::CanHeadshot()
 T CTFProjectile_EnergyBall::Create(Vector const&, QAngle const&, float, float, CBaseEntity*, CBaseEntity*)
 T CTFProjectile_EnergyBall::Deflected(CBaseEntity*, Vector&)
 T CTFProjectile_EnergyBall::Explode(CGameTrace*, CBaseEntity*)
 T CTFProjectile_EnergyBall::GetAssistant()
 T CTFProjectile_EnergyBall::GetDamage()
 T CTFProjectile_EnergyBall::GetDamageCustom()
 T CTFProjectile_EnergyBall::GetDamageType()
 T CTFProjectile_EnergyBall::GetDataDescMap()
 T CTFProjectile_EnergyBall::GetScorer()
 T CTFProjectile_EnergyBall::GetServerClass()
 T CTFProjectile_EnergyBall::GetWeaponID() const
 T CTFProjectile_EnergyBall::ImpactTeamPlayer(CTFPlayer*)
 T CTFProjectile_EnergyBall::InitEnergyBall(Vector const&, QAngle const&, float, float, CBaseEntity*, CBaseEntity*)
 T CTFProjectile_EnergyBall::IsDeflectable()
 T CTFProjectile_EnergyBall::Precache()
 T CTFProjectile_EnergyBall::Spawn()
 T CTFProjectile_EnergyBall::YouForgotToImplementOrDeclareServerClass()
 T CTFProjectile_EnergyBall::~CTFProjectile_EnergyBall()
 T CTFProjectile_EnergyRing::CanHeadshot()
 T CTFProjectile_EnergyRing::Create(CTFWeaponBaseGun*, Vector const&, QAngle const&, float, float, CBaseEntity*, CBaseEntity*, Vector, Vector, bool)
 T CTFProjectile_EnergyRing::GetDamage()
 T CTFProjectile_EnergyRing::GetDamageCustom()
 T CTFProjectile_EnergyRing::GetGravity()
 T CTFProjectile_EnergyRing::GetProjectileModelName()
 T CTFProjectile_EnergyRing::GetServerClass()
 T CTFProjectile_EnergyRing::GetWeaponID() const
 T CTFProjectile_EnergyRing::ImpactTeamPlayer(CTFPlayer*)
 T CTFProjectile_EnergyRing::IsDeflectable()
 T CTFProjectile_EnergyRing::PlayImpactEffects(Vector const&, bool)
 T CTFProjectile_EnergyRing::Precache()
 T CTFProjectile_EnergyRing::ProjectileTouch(CBaseEntity*)
 T CTFProjectile_EnergyRing::ResolveFlyCollisionCustom(CGameTrace&, Vector&)
 T CTFProjectile_EnergyRing::Spawn()
 T CTFProjectile_EnergyRing::YouForgotToImplementOrDeclareServerClass()
 T CTFProjectile_EnergyRing::~CTFProjectile_EnergyRing()
 T CTFProjectile_Flare::Create(CBaseEntity*, Vector const&, QAngle const&, CBaseEntity*, CBaseEntity*)
 T CTFProjectile_Flare::Deflected(CBaseEntity*, Vector&)
 T CTFProjectile_Flare::Detonate(bool)
 T CTFProjectile_Flare::Explode(CGameTrace*, CBaseEntity*)
 T CTFProjectile_Flare::Explode_Air(CGameTrace*, int, bool)
 T CTFProjectile_Flare::GetAssistant()
 T CTFProjectile_Flare::GetDamageType()
 T CTFProjectile_Flare::GetDataDescMap()
 T CTFProjectile_Flare::GetRadius()
 T CTFProjectile_Flare::GetScorer()
 T CTFProjectile_Flare::GetServerClass()
 T CTFProjectile_Flare::GetWeaponID() const
 T CTFProjectile_Flare::ImpactThink()
 T CTFProjectile_Flare::IsDeflectable()
 T CTFProjectile_Flare::IsDestroyable()
 T CTFProjectile_Flare::PerformCustomPhysics(Vector*, Vector*, QAngle*, QAngle*)
 T CTFProjectile_Flare::Precache()
 T CTFProjectile_Flare::SendDeathNotice()
 T CTFProjectile_Flare::Spawn()
 T CTFProjectile_Flare::YouForgotToImplementOrDeclareServerClass()
 T CTFProjectile_Flare::~CTFProjectile_Flare()
 T CTFProjectile_GrapplingHook::BreakArrow()
 T CTFProjectile_GrapplingHook::CanCollideWithTeammates() const
 T CTFProjectile_GrapplingHook::CanHeadshot()
 T CTFProjectile_GrapplingHook::CheckSkyboxImpact(CBaseEntity*)
 T CTFProjectile_GrapplingHook::GetDamage()
 T CTFProjectile_GrapplingHook::GetDataDescMap()
 T CTFProjectile_GrapplingHook::GetServerClass()
 T CTFProjectile_GrapplingHook::HookLatchedThink()
 T CTFProjectile_GrapplingHook::HookTarget(CBaseEntity*)
 T CTFProjectile_GrapplingHook::InitArrow(QAngle const&, float, float, ProjectileType_t, CBaseEntity*, CBaseEntity*)
 T CTFProjectile_GrapplingHook::IsBreakable() const
 T CTFProjectile_GrapplingHook::IsDeflectable()
 T CTFProjectile_GrapplingHook::OnArrowImpact(mstudiobbox_t*, CBaseEntity*, CBaseEntity*)
 T CTFProjectile_GrapplingHook::OnArrowImpactObject(CBaseEntity*)
 T CTFProjectile_GrapplingHook::OnArrowMissAllPlayers()
 T CTFProjectile_GrapplingHook::Precache()
 T CTFProjectile_GrapplingHook::Spawn()
 T CTFProjectile_GrapplingHook::StartImpactFleshSoundLoop()
 T CTFProjectile_GrapplingHook::UpdateOnRemove()
 T CTFProjectile_GrapplingHook::YouForgotToImplementOrDeclareServerClass()
 T CTFProjectile_GrapplingHook::~CTFProjectile_GrapplingHook()
 T CTFProjectile_HealingBolt::CanHeadshot()
 T CTFProjectile_HealingBolt::GetCollideWithTeammatesDelay() const
 T CTFProjectile_HealingBolt::GetDataDescMap()
 T CTFProjectile_HealingBolt::GetServerClass()
 T CTFProjectile_HealingBolt::ImpactTeamPlayer(CTFPlayer*)
 T CTFProjectile_HealingBolt::InitArrow(QAngle const&, float, float, ProjectileType_t, CBaseEntity*, CBaseEntity*)
 T CTFProjectile_HealingBolt::YouForgotToImplementOrDeclareServerClass()
 T CTFProjectile_HealingBolt::~CTFProjectile_HealingBolt()
 T CTFProjectile_Jar::CTFProjectile_Jar()
 T CTFProjectile_Jar::CreateStickyAttachmentToTarget(CTFPlayer*, CTFPlayer*, CGameTrace*)
 T CTFProjectile_Jar::Explode(CGameTrace*, int)
 T CTFProjectile_Jar::ExplodesOnHit()
 T CTFProjectile_Jar::GetBoneAttachmentInfo(mstudiobbox_t*, CBaseAnimating*, Vector&, QAngle&, int&, int&)
 T CTFProjectile_Jar::GetDamage()
 T CTFProjectile_Jar::GetDamageRadius()
 T CTFProjectile_Jar::GetEffectCondition()
 T CTFProjectile_Jar::GetImpactEffect()
 T CTFProjectile_Jar::GetProjectileType() const
 T CTFProjectile_Jar::GetServerClass()
 T CTFProjectile_Jar::GetWeaponID() const
 T CTFProjectile_Jar::OnBreadMonsterHit(CBaseEntity*, CGameTrace*)
 T CTFProjectile_Jar::OnHit(CBaseEntity*)
 T CTFProjectile_Jar::OnHitWorld()
 T CTFProjectile_Jar::PipebombTouch(CBaseEntity*)
 T CTFProjectile_Jar::PositionArrowOnBone(mstudiobbox_t*, CBaseAnimating*)
 T CTFProjectile_Jar::Precache()
 T CTFProjectile_Jar::SetCustomPipebombModel()
 T CTFProjectile_Jar::VPhysicsCollision(int, gamevcollisionevent_t*)
 T CTFProjectile_Jar::VPhysicsCollisionThink()
 T CTFProjectile_Jar::YouForgotToImplementOrDeclareServerClass()
 T CTFProjectile_Jar::~CTFProjectile_Jar()
 T CTFProjectile_JarMilk::GetEffectCondition()
 T CTFProjectile_JarMilk::GetImpactEffect()
 T CTFProjectile_JarMilk::GetServerClass()
 T CTFProjectile_JarMilk::GetWeaponID() const
 T CTFProjectile_JarMilk::Precache()
 T CTFProjectile_JarMilk::SetCustomPipebombModel()
 T CTFProjectile_JarMilk::YouForgotToImplementOrDeclareServerClass()
 T CTFProjectile_JarMilk::~CTFProjectile_JarMilk()
 T CTFProjectile_Rocket::Create(CBaseEntity*, Vector const&, QAngle const&, CBaseEntity*, CBaseEntity*)
 T CTFProjectile_Rocket::Deflected(CBaseEntity*, Vector&)
 T CTFProjectile_Rocket::GetAssistant()
 T CTFProjectile_Rocket::GetDamageCustom()
 T CTFProjectile_Rocket::GetDamageType()
 T CTFProjectile_Rocket::GetScorer()
 T CTFProjectile_Rocket::GetServerClass()
 T CTFProjectile_Rocket::GetWeaponID() const
 T CTFProjectile_Rocket::IsDeflectable()
 T CTFProjectile_Rocket::Precache()
 T CTFProjectile_Rocket::RocketTouch(CBaseEntity*)
 T CTFProjectile_Rocket::SetScorer(CBaseEntity*)
 T CTFProjectile_Rocket::Spawn()
 T CTFProjectile_Rocket::YouForgotToImplementOrDeclareServerClass()
 T CTFProjectile_Rocket::~CTFProjectile_Rocket()
 T CTFProjectile_SentryRocket::GetProjectileType() const
 T CTFProjectile_SentryRocket::GetServerClass()
 T CTFProjectile_SentryRocket::Spawn()
 T CTFProjectile_SentryRocket::YouForgotToImplementOrDeclareServerClass()
 T CTFProjectile_SentryRocket::~CTFProjectile_SentryRocket()
 T CTFProjectile_SpellBats::ApplyBlastDamage(CTFPlayer*, Vector)
 T CTFProjectile_SpellBats::Explode(CGameTrace*, int)
 T CTFProjectile_SpellBats::ExplodeEffectOnTarget(CTFPlayer*, CTFPlayer*, CBaseCombatCharacter*)
 T CTFProjectile_SpellBats::GetCustomDamageType() const
 T CTFProjectile_SpellBats::GetDamageRadius() const
 T CTFProjectile_SpellBats::GetExplodeEffectParticle() const
 T CTFProjectile_SpellBats::GetExplodeEffectSound() const
 T CTFProjectile_SpellBats::GetModelScale() const
 T CTFProjectile_SpellBats::GetServerClass()
 T CTFProjectile_SpellBats::GetWeaponID() const
 T CTFProjectile_SpellBats::InitialExplodeEffects(CTFPlayer*, CGameTrace const*)
 T CTFProjectile_SpellBats::IsDeflectable()
 T CTFProjectile_SpellBats::Spawn()
 T CTFProjectile_SpellBats::YouForgotToImplementOrDeclareServerClass()
 T CTFProjectile_SpellBats::~CTFProjectile_SpellBats()
 T CTFProjectile_SpellFireball::Explode(CGameTrace const*)
 T CTFProjectile_SpellFireball::ExplodeEffectOnTarget(CTFPlayer*, CTFPlayer*, CBaseCombatCharacter*)
 T CTFProjectile_SpellFireball::GetCustomDamageType() const
 T CTFProjectile_SpellFireball::GetDamageRadius() const
 T CTFProjectile_SpellFireball::GetExplodeEffectParticle() const
 T CTFProjectile_SpellFireball::GetExplodeEffectSound() const
 T CTFProjectile_SpellFireball::GetProjectileModelName()
 T CTFProjectile_SpellFireball::GetServerClass()
 T CTFProjectile_SpellFireball::GetWeaponID() const
 T CTFProjectile_SpellFireball::InitialExplodeEffects(CTFPlayer*, CGameTrace const*)
 T CTFProjectile_SpellFireball::IsDeflectable()
 T CTFProjectile_SpellFireball::RocketTouch(CBaseEntity*)
 T CTFProjectile_SpellFireball::Spawn()
 T CTFProjectile_SpellFireball::UpdateTransmitState()
 T CTFProjectile_SpellFireball::YouForgotToImplementOrDeclareServerClass()
 T CTFProjectile_SpellFireball::~CTFProjectile_SpellFireball()
 T CTFProjectile_SpellKartBats::ApplyBlastDamage(CTFPlayer*, Vector)
 T CTFProjectile_SpellKartBats::ExplodeEffectOnTarget(CTFPlayer*, CTFPlayer*, CBaseCombatCharacter*)
 T CTFProjectile_SpellKartBats::GetServerClass()
 T CTFProjectile_SpellKartBats::YouForgotToImplementOrDeclareServerClass()
 T CTFProjectile_SpellKartBats::~CTFProjectile_SpellKartBats()
 T CTFProjectile_SpellKartOrb::Explode(CGameTrace const*)
 T CTFProjectile_SpellKartOrb::ExplodeAndRemove()
 T CTFProjectile_SpellKartOrb::GetExplodeEffectParticle() const
 T CTFProjectile_SpellKartOrb::GetServerClass()
 T CTFProjectile_SpellKartOrb::MoveChecking()
 T CTFProjectile_SpellKartOrb::RocketTouch(CBaseEntity*)
 T CTFProjectile_SpellKartOrb::Spawn()
 T CTFProjectile_SpellKartOrb::YouForgotToImplementOrDeclareServerClass()
 T CTFProjectile_SpellKartOrb::~CTFProjectile_SpellKartOrb()
 T CTFProjectile_SpellLightningOrb::ExplodeAndRemove()
 T CTFProjectile_SpellLightningOrb::ExplodeEffectOnTarget(CTFPlayer*, CTFPlayer*, CBaseCombatCharacter*)
 T CTFProjectile_SpellLightningOrb::GetCustomDamageType() const
 T CTFProjectile_SpellLightningOrb::GetDamageRadius() const
 T CTFProjectile_SpellLightningOrb::GetExplodeEffectSound() const
 T CTFProjectile_SpellLightningOrb::GetProjectileModelName()
 T CTFProjectile_SpellLightningOrb::GetServerClass()
 T CTFProjectile_SpellLightningOrb::InitialExplodeEffects(CTFPlayer*, CGameTrace const*)
 T CTFProjectile_SpellLightningOrb::RocketTouch(CBaseEntity*)
 T CTFProjectile_SpellLightningOrb::Spawn()
 T CTFProjectile_SpellLightningOrb::VortexThink()
 T CTFProjectile_SpellLightningOrb::YouForgotToImplementOrDeclareServerClass()
 T CTFProjectile_SpellLightningOrb::Zap(int)
 T CTFProjectile_SpellLightningOrb::ZapThink()
 T CTFProjectile_SpellLightningOrb::~CTFProjectile_SpellLightningOrb()
 T CTFProjectile_SpellMeteorShower::Explode(CGameTrace*, int)
 T CTFProjectile_SpellMeteorShower::GetExplodeEffectParticle() const
 T CTFProjectile_SpellMeteorShower::GetExplodeEffectSound() const
 T CTFProjectile_SpellMeteorShower::GetModelScale() const
 T CTFProjectile_SpellMeteorShower::GetServerClass()
 T CTFProjectile_SpellMeteorShower::YouForgotToImplementOrDeclareServerClass()
 T CTFProjectile_SpellMeteorShower::~CTFProjectile_SpellMeteorShower()
 T CTFProjectile_SpellMirv::ExplodeEffectOnTarget(CTFPlayer*, CTFPlayer*, CBaseCombatCharacter*)
 T CTFProjectile_SpellMirv::GetCustomDamageType() const
 T CTFProjectile_SpellMirv::GetDamageRadius() const
 T CTFProjectile_SpellMirv::GetExplodeEffectParticle() const
 T CTFProjectile_SpellMirv::GetExplodeEffectSound() const
 T CTFProjectile_SpellMirv::GetModelScale() const
 T CTFProjectile_SpellMirv::GetServerClass()
 T CTFProjectile_SpellMirv::InitialExplodeEffects(CTFPlayer*, CGameTrace const*)
 T CTFProjectile_SpellMirv::SetCustomPipebombModel()
 T CTFProjectile_SpellMirv::YouForgotToImplementOrDeclareServerClass()
 T CTFProjectile_SpellMirv::~CTFProjectile_SpellMirv()
 T CTFProjectile_SpellPumpkin::ApplyBlastDamage(CTFPlayer*, Vector)
 T CTFProjectile_SpellPumpkin::ExplodeEffectOnTarget(CTFPlayer*, CTFPlayer*, CBaseCombatCharacter*)
 T CTFProjectile_SpellPumpkin::GetCustomDamageType() const
 T CTFProjectile_SpellPumpkin::GetDamageRadius() const
 T CTFProjectile_SpellPumpkin::GetExplodeEffectParticle() const
 T CTFProjectile_SpellPumpkin::GetExplodeEffectSound() const
 T CTFProjectile_SpellPumpkin::GetModelScale() const
 T CTFProjectile_SpellPumpkin::GetServerClass()
 T CTFProjectile_SpellPumpkin::InitialExplodeEffects(CTFPlayer*, CGameTrace const*)
 T CTFProjectile_SpellPumpkin::PipebombTouch(CBaseEntity*)
 T CTFProjectile_SpellPumpkin::SetCustomPipebombModel()
 T CTFProjectile_SpellPumpkin::VPhysicsCollision(int, gamevcollisionevent_t*)
 T CTFProjectile_SpellPumpkin::YouForgotToImplementOrDeclareServerClass()
 T CTFProjectile_SpellPumpkin::~CTFProjectile_SpellPumpkin()
 T CTFProjectile_SpellSpawnBoss::ExplodeEffectOnTarget(CTFPlayer*, CTFPlayer*, CBaseCombatCharacter*)
 T CTFProjectile_SpellSpawnBoss::GetCustomDamageType() const
 T CTFProjectile_SpellSpawnBoss::GetDamageRadius() const
 T CTFProjectile_SpellSpawnBoss::GetExplodeEffectParticle() const
 T CTFProjectile_SpellSpawnBoss::GetExplodeEffectSound() const
 T CTFProjectile_SpellSpawnBoss::GetModelScale() const
 T CTFProjectile_SpellSpawnBoss::GetServerClass()
 T CTFProjectile_SpellSpawnBoss::InitialExplodeEffects(CTFPlayer*, CGameTrace const*)
 T CTFProjectile_SpellSpawnBoss::SetCustomPipebombModel()
 T CTFProjectile_SpellSpawnBoss::YouForgotToImplementOrDeclareServerClass()
 T CTFProjectile_SpellSpawnBoss::~CTFProjectile_SpellSpawnBoss()
 T CTFProjectile_SpellSpawnHorde::ExplodeEffectOnTarget(CTFPlayer*, CTFPlayer*, CBaseCombatCharacter*)
 T CTFProjectile_SpellSpawnHorde::GetCustomDamageType() const
 T CTFProjectile_SpellSpawnHorde::GetDamageRadius() const
 T CTFProjectile_SpellSpawnHorde::GetExplodeEffectParticle() const
 T CTFProjectile_SpellSpawnHorde::GetExplodeEffectSound() const
 T CTFProjectile_SpellSpawnHorde::GetModelScale() const
 T CTFProjectile_SpellSpawnHorde::GetServerClass()
 T CTFProjectile_SpellSpawnHorde::InitialExplodeEffects(CTFPlayer*, CGameTrace const*)
 T CTFProjectile_SpellSpawnHorde::SetCustomPipebombModel()
 T CTFProjectile_SpellSpawnHorde::YouForgotToImplementOrDeclareServerClass()
 T CTFProjectile_SpellSpawnHorde::~CTFProjectile_SpellSpawnHorde()
 T CTFProjectile_SpellSpawnZombie::Explode(CGameTrace*, int)
 T CTFProjectile_SpellSpawnZombie::ExplodeEffectOnTarget(CTFPlayer*, CTFPlayer*, CBaseCombatCharacter*)
 T CTFProjectile_SpellSpawnZombie::GetCustomDamageType() const
 T CTFProjectile_SpellSpawnZombie::GetDamageRadius() const
 T CTFProjectile_SpellSpawnZombie::GetExplodeEffectParticle() const
 T CTFProjectile_SpellSpawnZombie::GetExplodeEffectSound() const
 T CTFProjectile_SpellSpawnZombie::GetModelScale() const
 T CTFProjectile_SpellSpawnZombie::GetServerClass()
 T CTFProjectile_SpellSpawnZombie::InitialExplodeEffects(CTFPlayer*, CGameTrace const*)
 T CTFProjectile_SpellSpawnZombie::PipebombTouch(CBaseEntity*)
 T CTFProjectile_SpellSpawnZombie::SetCustomPipebombModel()
 T CTFProjectile_SpellSpawnZombie::VPhysicsCollision(int, gamevcollisionevent_t*)
 T CTFProjectile_SpellSpawnZombie::YouForgotToImplementOrDeclareServerClass()
 T CTFProjectile_SpellSpawnZombie::~CTFProjectile_SpellSpawnZombie()
 T CTFProjectile_SpellTransposeTeleport::ExplodeEffectOnTarget(CTFPlayer*, CTFPlayer*, CBaseCombatCharacter*)
 T CTFProjectile_SpellTransposeTeleport::GetCustomDamageType() const
 T CTFProjectile_SpellTransposeTeleport::GetDamageRadius() const
 T CTFProjectile_SpellTransposeTeleport::GetExplodeEffectParticle() const
 T CTFProjectile_SpellTransposeTeleport::GetExplodeEffectSound() const
 T CTFProjectile_SpellTransposeTeleport::GetServerClass()
 T CTFProjectile_SpellTransposeTeleport::GetWeaponID() const
 T CTFProjectile_SpellTransposeTeleport::InitialExplodeEffects(CTFPlayer*, CGameTrace const*)
 T CTFProjectile_SpellTransposeTeleport::PhysicsSolidMaskForEntity() const
 T CTFProjectile_SpellTransposeTeleport::RecordPosThink()
 T CTFProjectile_SpellTransposeTeleport::Spawn()
 T CTFProjectile_SpellTransposeTeleport::YouForgotToImplementOrDeclareServerClass()
 T CTFProjectile_SpellTransposeTeleport::~CTFProjectile_SpellTransposeTeleport()
 T CTFProjectile_Syringe::Create(Vector const&, QAngle const&, CTFWeaponBaseGun*, CBaseEntity*, CBaseEntity*, bool)
 T CTFProjectile_Syringe::GetGravity()
 T CTFProjectile_Syringe::GetProjectileModelName()
 T CTFProjectile_Syringe::PhysicsSolidMaskForEntity() const
 T CTFProjectile_Syringe::~CTFProjectile_Syringe()
 T CTFProjectile_Throwable::ApplyBlastDamage(CTFPlayer*, Vector)
 T CTFProjectile_Throwable::Explode()
 T CTFProjectile_Throwable::Explode(CGameTrace*, int)
 T CTFProjectile_Throwable::ExplodeEffectOnTarget(CTFPlayer*, CTFPlayer*, CBaseCombatCharacter*)
 T CTFProjectile_Throwable::ExplodesOnHit()
 T CTFProjectile_Throwable::GetAngularImpulse()
 T CTFProjectile_Throwable::GetCustomDamageType() const
 T CTFProjectile_Throwable::GetDamage()
 T CTFProjectile_Throwable::GetDamageRadius() const
 T CTFProjectile_Throwable::GetExplodeEffectParticle() const
 T CTFProjectile_Throwable::GetExplodeEffectSound() const
 T CTFProjectile_Throwable::GetModelScale() const
 T CTFProjectile_Throwable::GetProjectileMaxSpeed()
 T CTFProjectile_Throwable::GetProjectileSpeed()
 T CTFProjectile_Throwable::GetProjectileType() const
 T CTFProjectile_Throwable::GetServerClass()
 T CTFProjectile_Throwable::GetShakeAmplitude()
 T CTFProjectile_Throwable::GetThrowSoundEffect() const
 T CTFProjectile_Throwable::GetVelocityVector(Vector const&, Vector const&, Vector const&, float)
 T CTFProjectile_Throwable::GetWeaponID() const
 T CTFProjectile_Throwable::InitThrowable(float)
 T CTFProjectile_Throwable::InitialExplodeEffects(CTFPlayer*, CGameTrace const*)
 T CTFProjectile_Throwable::IsDeflectable()
 T CTFProjectile_Throwable::Misfire()
 T CTFProjectile_Throwable::OnHit(CBaseEntity*)
 T CTFProjectile_Throwable::SetCustomPipebombModel()
 T CTFProjectile_Throwable::Spawn()
 T CTFProjectile_Throwable::YouForgotToImplementOrDeclareServerClass()
 T CTFProjectile_Throwable::~CTFProjectile_Throwable()
 T CTFProjectile_ThrowableBreadMonster::Detonate()
 T CTFProjectile_ThrowableBreadMonster::Explode(CGameTrace*, int)
 T CTFProjectile_ThrowableBreadMonster::ExplodesOnHit()
 T CTFProjectile_ThrowableBreadMonster::GetDamage()
 T CTFProjectile_ThrowableBreadMonster::GetDamageRadius() const
 T CTFProjectile_ThrowableBreadMonster::GetExplodeEffectParticle() const
 T CTFProjectile_ThrowableBreadMonster::GetExplodeEffectSound() const
 T CTFProjectile_ThrowableBreadMonster::GetProjectileType() const
 T CTFProjectile_ThrowableBreadMonster::GetServerClass()
 T CTFProjectile_ThrowableBreadMonster::GetThrowSoundEffect() const
 T CTFProjectile_ThrowableBreadMonster::OnHit(CBaseEntity*)
 T CTFProjectile_ThrowableBreadMonster::SetCustomPipebombModel()
 T CTFProjectile_ThrowableBreadMonster::YouForgotToImplementOrDeclareServerClass()
 T CTFProjectile_ThrowableBreadMonster::~CTFProjectile_ThrowableBreadMonster()
 T CTFProjectile_ThrowableBrick::ExplodesOnHit()
 T CTFProjectile_ThrowableBrick::GetDamage()
 T CTFProjectile_ThrowableBrick::GetDamageRadius() const
 T CTFProjectile_ThrowableBrick::GetExplodeEffectParticle() const
 T CTFProjectile_ThrowableBrick::GetExplodeEffectSound() const
 T CTFProjectile_ThrowableBrick::GetServerClass()
 T CTFProjectile_ThrowableBrick::OnHit(CBaseEntity*)
 T CTFProjectile_ThrowableBrick::SetCustomPipebombModel()
 T CTFProjectile_ThrowableBrick::YouForgotToImplementOrDeclareServerClass()
 T CTFProjectile_ThrowableBrick::~CTFProjectile_ThrowableBrick()
 T CTFProjectile_ThrowableRepel::ExplodesOnHit()
 T CTFProjectile_ThrowableRepel::GetDamage()
 T CTFProjectile_ThrowableRepel::GetDamageRadius() const
 T CTFProjectile_ThrowableRepel::GetExplodeEffectParticle() const
 T CTFProjectile_ThrowableRepel::GetExplodeEffectSound() const
 T CTFProjectile_ThrowableRepel::GetServerClass()
 T CTFProjectile_ThrowableRepel::OnHit(CBaseEntity*)
 T CTFProjectile_ThrowableRepel::SetCustomPipebombModel()
 T CTFProjectile_ThrowableRepel::YouForgotToImplementOrDeclareServerClass()
 T CTFProjectile_ThrowableRepel::~CTFProjectile_ThrowableRepel()
 T CTFPumpkinBomb::Break()
 T CTFPumpkinBomb::Event_Killed(CTakeDamageInfo const&)
 T CTFPumpkinBomb::GetServerClass()
 T CTFPumpkinBomb::OnTakeDamage(CTakeDamageInfo const&)
 T CTFPumpkinBomb::Precache()
 T CTFPumpkinBomb::PumpkinTouch(CBaseEntity*)
 T CTFPumpkinBomb::RemovePumpkin()
 T CTFPumpkinBomb::SetInitParams(float, float, float, int, float)
 T CTFPumpkinBomb::Spawn()
 T CTFPumpkinBomb::YouForgotToImplementOrDeclareServerClass()
 T CTFPumpkinBomb::~CTFPumpkinBomb()
 T CTFPumpkinBombShim::Touch(CBaseEntity*)
 T CTFPumpkinBombShim::~CTFPumpkinBombShim()
 T CTFQuestAndOperatorRestriction::IsValidForPlayer(CTFPlayer const*, InvalidReason&) const
 T CTFQuestAndOperatorRestriction::PassesRestrictions(IGameEvent*) const
 T CTFQuestAndOperatorRestriction::~CTFQuestAndOperatorRestriction()
 T CTFQuestBasePlayerRestriction::BInitFromKV(KeyValues*, CUtlVector<CUtlString, CUtlMemory<CUtlString, int> >*)
 T CTFQuestBasePlayerRestriction::GetPlayerFromEvent(IGameEvent*) const
 T CTFQuestBasePlayerRestriction::PassesRestrictions(IGameEvent*) const
 T CTFQuestCondition* CreateCTFQuestConditionSubClass<CTFConditionQuestCondition>()
 T CTFQuestCondition* CreateCTFQuestConditionSubClass<CTFFlagEventTypeRestriction>()
 T CTFQuestCondition* CreateCTFQuestConditionSubClass<CTFGenericStringRestriction>()
 T CTFQuestCondition* CreateCTFQuestConditionSubClass<CTFGenericSubStringRestriction>()
 T CTFQuestCondition* CreateCTFQuestConditionSubClass<CTFQuestAndOperatorRestriction>()
 T CTFQuestCondition* CreateCTFQuestConditionSubClass<CTFQuestCustomDamageRestriction>()
 T CTFQuestCondition* CreateCTFQuestConditionSubClass<CTFQuestGameTypeRestriction>()
 T CTFQuestCondition* CreateCTFQuestConditionSubClass<CTFQuestLoadoutPositionRestriction>()
 T CTFQuestCondition* CreateCTFQuestConditionSubClass<CTFQuestMapRestriction>()
 T CTFQuestCondition* CreateCTFQuestConditionSubClass<CTFQuestNotOperatorRestriction>()
 T CTFQuestCondition* CreateCTFQuestConditionSubClass<CTFQuestOrOperatorRestriction>()
 T CTFQuestCondition* CreateCTFQuestConditionSubClass<CTFQuestPlayerAliveRestriction>()
 T CTFQuestCondition* CreateCTFQuestConditionSubClass<CTFQuestPlayerClassRestriction>()
 T CTFQuestCondition* CreateCTFQuestConditionSubClass<CTFQuestPlayerConditionRestriction>()
 T CTFQuestCondition* CreateCTFQuestConditionSubClass<CTFQuestPlayerDisguiseRestriction>()
 T CTFQuestCondition* CreateCTFQuestConditionSubClass<CTFQuestPlayerDistanceRestriction>()
 T CTFQuestCondition* CreateCTFQuestConditionSubClass<CTFQuestPlayerIsOwnerRestriction>()
 T CTFQuestCondition* CreateCTFQuestConditionSubClass<CTFQuestPlayerJumpingRestriction>()
 T CTFQuestCondition* CreateCTFQuestConditionSubClass<CTFQuestPlayerObjectRestriction>()
 T CTFQuestCondition* CreateCTFQuestConditionSubClass<CTFQuestScorerRestriction>()
 T CTFQuestCondition* CreateCTFQuestConditionSubClass<CTFQuestTeamRestriction>()
 T CTFQuestCondition* CreateCTFQuestConditionSubClass<CTFQuestWeaponTypeRestriction>()
 T CTFQuestCondition* CreateCTFQuestConditionSubClass<CTFWeaponClassRestriction>()
 T CTFQuestCondition::AddChildByName(char const*)
 T CTFQuestCondition::BInitFromKV(KeyValues*, CUtlVector<CUtlString, CUtlMemory<CUtlString, int> >*)
 T CTFQuestCondition::GetChildren(CUtlVector<CTFQuestCondition*, CUtlMemory<CTFQuestCondition*, int> >&)
 T CTFQuestCondition::GetConditionName() const
 T CTFQuestCondition::GetEventName() const
 T CTFQuestCondition::GetMaxInputCount() const
 T CTFQuestCondition::GetOutputKeyValues(KeyValues*)
 T CTFQuestCondition::GetQuestOwner() const
 T CTFQuestCondition::GetRequiredParamKeys(KeyValues*)
 T CTFQuestCondition::GetValidRestrictions(CUtlVector<char const*, CUtlMemory<char const*, int> >&) const
 T CTFQuestCondition::GetValueString() const
 T CTFQuestCondition::IsEvaluator() const
 T CTFQuestCondition::IsOperator() const
 T CTFQuestCondition::IsValidForPlayer(CTFPlayer const*, InvalidReason&) const
 T CTFQuestCondition::PrintDebugText() const
 T CTFQuestCondition::RemoveAndDeleteChild(CTFQuestCondition*)
 T CTFQuestCondition::SetEventName(char const*)
 T CTFQuestCondition::~CTFQuestCondition()
 T CTFQuestCountEvaluator::AddChildByName(char const*)
 T CTFQuestCountEvaluator::BInitFromKV(KeyValues*, CUtlVector<CUtlString, CUtlMemory<CUtlString, int> >*)
 T CTFQuestCountEvaluator::EvaluateCondition(CTFQuestEvaluator*, int)
 T CTFQuestCountEvaluator::GetChildren(CUtlVector<CTFQuestCondition*, CUtlMemory<CTFQuestCondition*, int> >&)
 T CTFQuestCountEvaluator::GetChildrenSubTypeCount() const
 T CTFQuestCountEvaluator::GetConditionName() const
 T CTFQuestCountEvaluator::GetMaxInputCount() const
 T CTFQuestCountEvaluator::GetOutputKeyValues(KeyValues*)
 T CTFQuestCountEvaluator::GetRequiredParamKeys(KeyValues*)
 T CTFQuestCountEvaluator::GetValidChildren(CUtlVector<char const*, CUtlMemory<char const*, int> >&) const
 T CTFQuestCountEvaluator::IsValidForPlayer(CTFPlayer const*, InvalidReason&) const
 T CTFQuestCountEvaluator::RemoveAndDeleteChild(CTFQuestCondition*)
 T CTFQuestCountEvaluator::ResetCondition()
 T CTFQuestCountEvaluator::~CTFQuestCountEvaluator()
 T CTFQuestCustomDamageRestriction::BInitFromKV(KeyValues*, CUtlVector<CUtlString, CUtlMemory<CUtlString, int> >*)
 T CTFQuestCustomDamageRestriction::GetOutputKeyValues(KeyValues*)
 T CTFQuestCustomDamageRestriction::GetRequiredParamKeys(KeyValues*)
 T CTFQuestCustomDamageRestriction::GetValueString() const
 T CTFQuestCustomDamageRestriction::PassesRestrictions(IGameEvent*) const
 T CTFQuestCustomDamageRestriction::~CTFQuestCustomDamageRestriction()
 T CTFQuestEvaluator::CTFQuestEvaluator()
 T CTFQuestEvaluator::GetBaseName() const
 T CTFQuestEvaluator::GetOutputKeyValues(KeyValues*)
 T CTFQuestEvaluator::GetRequiredParamKeys(KeyValues*)
 T CTFQuestEvaluator::GetValidChildren(CUtlVector<char const*, CUtlMemory<char const*, int> >&) const
 T CTFQuestEvaluator::GetValidTypes(CUtlVector<char const*, CUtlMemory<char const*, int> >&) const
 T CTFQuestEvaluator::IsEvaluator() const
 T CTFQuestEvaluator::~CTFQuestEvaluator()
 T CTFQuestEventListener::AddChildByName(char const*)
 T CTFQuestEventListener::BInitFromKV(KeyValues*, CUtlVector<CUtlString, CUtlMemory<CUtlString, int> >*)
 T CTFQuestEventListener::EvaluateCondition(CTFQuestEvaluator*, int)
 T CTFQuestEventListener::FireGameEvent(IGameEvent*)
 T CTFQuestEventListener::GetChildren(CUtlVector<CTFQuestCondition*, CUtlMemory<CTFQuestCondition*, int> >&)
 T CTFQuestEventListener::GetConditionName() const
 T CTFQuestEventListener::GetEventName() const
 T CTFQuestEventListener::GetMaxInputCount() const
 T CTFQuestEventListener::GetOutputKeyValues(KeyValues*)
 T CTFQuestEventListener::GetRequiredParamKeys(KeyValues*)
 T CTFQuestEventListener::GetValueString() const
 T CTFQuestEventListener::IsValidForPlayer(CTFPlayer const*, InvalidReason&) const
 T CTFQuestEventListener::RemoveAndDeleteChild(CTFQuestCondition*)
 T CTFQuestEventListener::ResetCondition()
 T CTFQuestEventListener::SetEventName(char const*)
 T CTFQuestEventListener::~CTFQuestEventListener()
 T CTFQuestGameTypeRestriction::BInitFromKV(KeyValues*, CUtlVector<CUtlString, CUtlMemory<CUtlString, int> >*)
 T CTFQuestGameTypeRestriction::GetOutputKeyValues(KeyValues*)
 T CTFQuestGameTypeRestriction::GetRequiredParamKeys(KeyValues*)
 T CTFQuestGameTypeRestriction::GetValueString() const
 T CTFQuestGameTypeRestriction::IsValidForPlayer(CTFPlayer const*, InvalidReason&) const
 T CTFQuestGameTypeRestriction::PassesRestrictions(IGameEvent*) const
 T CTFQuestGameTypeRestriction::~CTFQuestGameTypeRestriction()
 T CTFQuestLoadoutPositionRestriction::BInitFromKV(KeyValues*, CUtlVector<CUtlString, CUtlMemory<CUtlString, int> >*)
 T CTFQuestLoadoutPositionRestriction::BPlayerCheck(CTFPlayer const*, IGameEvent*) const
 T CTFQuestLoadoutPositionRestriction::GetOutputKeyValues(KeyValues*)
 T CTFQuestLoadoutPositionRestriction::GetRequiredParamKeys(KeyValues*)
 T CTFQuestLoadoutPositionRestriction::GetValueString() const
 T CTFQuestLoadoutPositionRestriction::~CTFQuestLoadoutPositionRestriction()
 T CTFQuestMapRestriction::BInitFromKV(KeyValues*, CUtlVector<CUtlString, CUtlMemory<CUtlString, int> >*)
 T CTFQuestMapRestriction::GetOutputKeyValues(KeyValues*)
 T CTFQuestMapRestriction::GetRequiredParamKeys(KeyValues*)
 T CTFQuestMapRestriction::GetValueString() const
 T CTFQuestMapRestriction::IsValidForPlayer(CTFPlayer const*, InvalidReason&) const
 T CTFQuestMapRestriction::PassesRestrictions(IGameEvent*) const
 T CTFQuestMapRestriction::~CTFQuestMapRestriction()
 T CTFQuestNotOperatorRestriction::GetMaxInputCount() const
 T CTFQuestNotOperatorRestriction::IsValidForPlayer(CTFPlayer const*, InvalidReason&) const
 T CTFQuestNotOperatorRestriction::PassesRestrictions(IGameEvent*) const
 T CTFQuestNotOperatorRestriction::PrintDebugText() const
 T CTFQuestNotOperatorRestriction::~CTFQuestNotOperatorRestriction()
 T CTFQuestObjectiveConditionsDefinition::BInitFromKV(KeyValues*, CUtlVector<CUtlString, CUtlMemory<CUtlString, int> >*)
 T CTFQuestObjectiveConditionsDefinition::~CTFQuestObjectiveConditionsDefinition()
 T CTFQuestObjectiveDefinition::BInitFromKV(KeyValues*, CUtlVector<CUtlString, CUtlMemory<CUtlString, int> >*)
 T CTFQuestObjectiveDefinition::GetConditionsKeyValues() const
 T CTFQuestObjectiveDefinition::~CTFQuestObjectiveDefinition()
 T CTFQuestOperatorRestriction::AddChildByName(char const*)
 T CTFQuestOperatorRestriction::BInitFromKV(KeyValues*, CUtlVector<CUtlString, CUtlMemory<CUtlString, int> >*)
 T CTFQuestOperatorRestriction::GetChildren(CUtlVector<CTFQuestCondition*, CUtlMemory<CTFQuestCondition*, int> >&)
 T CTFQuestOperatorRestriction::GetMaxInputCount() const
 T CTFQuestOperatorRestriction::IsOperator() const
 T CTFQuestOperatorRestriction::PrintDebugText() const
 T CTFQuestOperatorRestriction::RemoveAndDeleteChild(CTFQuestCondition*)
 T CTFQuestOperatorRestriction::~CTFQuestOperatorRestriction()
 T CTFQuestOrOperatorRestriction::IsValidForPlayer(CTFPlayer const*, InvalidReason&) const
 T CTFQuestOrOperatorRestriction::PassesRestrictions(IGameEvent*) const
 T CTFQuestOrOperatorRestriction::~CTFQuestOrOperatorRestriction()
 T CTFQuestPlayerAliveRestriction::BInitFromKV(KeyValues*, CUtlVector<CUtlString, CUtlMemory<CUtlString, int> >*)
 T CTFQuestPlayerAliveRestriction::BPlayerCheck(CTFPlayer const*, IGameEvent*) const
 T CTFQuestPlayerAliveRestriction::GetOutputKeyValues(KeyValues*)
 T CTFQuestPlayerAliveRestriction::GetRequiredParamKeys(KeyValues*)
 T CTFQuestPlayerAliveRestriction::~CTFQuestPlayerAliveRestriction()
 T CTFQuestPlayerClassRestriction::BInitFromKV(KeyValues*, CUtlVector<CUtlString, CUtlMemory<CUtlString, int> >*)
 T CTFQuestPlayerClassRestriction::BPlayerCheck(CTFPlayer const*, IGameEvent*) const
 T CTFQuestPlayerClassRestriction::GetOutputKeyValues(KeyValues*)
 T CTFQuestPlayerClassRestriction::GetRequiredParamKeys(KeyValues*)
 T CTFQuestPlayerClassRestriction::GetValueString() const
 T CTFQuestPlayerClassRestriction::IsValidForPlayer(CTFPlayer const*, InvalidReason&) const
 T CTFQuestPlayerClassRestriction::~CTFQuestPlayerClassRestriction()
 T CTFQuestPlayerConditionRestriction::BInitFromKV(KeyValues*, CUtlVector<CUtlString, CUtlMemory<CUtlString, int> >*)
 T CTFQuestPlayerConditionRestriction::BPlayerCheck(CTFPlayer const*, IGameEvent*) const
 T CTFQuestPlayerConditionRestriction::GetOutputKeyValues(KeyValues*)
 T CTFQuestPlayerConditionRestriction::GetRequiredParamKeys(KeyValues*)
 T CTFQuestPlayerConditionRestriction::GetValueString() const
 T CTFQuestPlayerConditionRestriction::~CTFQuestPlayerConditionRestriction()
 T CTFQuestPlayerDisguiseRestriction::BInitFromKV(KeyValues*, CUtlVector<CUtlString, CUtlMemory<CUtlString, int> >*)
 T CTFQuestPlayerDisguiseRestriction::BPlayerCheck(CTFPlayer const*, IGameEvent*) const
 T CTFQuestPlayerDisguiseRestriction::GetOutputKeyValues(KeyValues*)
 T CTFQuestPlayerDisguiseRestriction::GetRequiredParamKeys(KeyValues*)
 T CTFQuestPlayerDisguiseRestriction::~CTFQuestPlayerDisguiseRestriction()
 T CTFQuestPlayerDistanceRestriction::BInitFromKV(KeyValues*, CUtlVector<CUtlString, CUtlMemory<CUtlString, int> >*)
 T CTFQuestPlayerDistanceRestriction::BPlayerCheck(CTFPlayer const*, IGameEvent*) const
 T CTFQuestPlayerDistanceRestriction::GetOutputKeyValues(KeyValues*)
 T CTFQuestPlayerDistanceRestriction::GetRequiredParamKeys(KeyValues*)
 T CTFQuestPlayerDistanceRestriction::~CTFQuestPlayerDistanceRestriction()
 T CTFQuestPlayerIsOwnerRestriction::BInitFromKV(KeyValues*, CUtlVector<CUtlString, CUtlMemory<CUtlString, int> >*)
 T CTFQuestPlayerIsOwnerRestriction::BPlayerCheck(CTFPlayer const*, IGameEvent*) const
 T CTFQuestPlayerIsOwnerRestriction::GetOutputKeyValues(KeyValues*)
 T CTFQuestPlayerIsOwnerRestriction::GetRequiredParamKeys(KeyValues*)
 T CTFQuestPlayerIsOwnerRestriction::IsValidForPlayer(CTFPlayer const*, InvalidReason&) const
 T CTFQuestPlayerIsOwnerRestriction::~CTFQuestPlayerIsOwnerRestriction()
 T CTFQuestPlayerJumpingRestriction::BInitFromKV(KeyValues*, CUtlVector<CUtlString, CUtlMemory<CUtlString, int> >*)
 T CTFQuestPlayerJumpingRestriction::BPlayerCheck(CTFPlayer const*, IGameEvent*) const
 T CTFQuestPlayerJumpingRestriction::GetOutputKeyValues(KeyValues*)
 T CTFQuestPlayerJumpingRestriction::GetRequiredParamKeys(KeyValues*)
 T CTFQuestPlayerJumpingRestriction::~CTFQuestPlayerJumpingRestriction()
 T CTFQuestPlayerObjectRestriction::BInitFromKV(KeyValues*, CUtlVector<CUtlString, CUtlMemory<CUtlString, int> >*)
 T CTFQuestPlayerObjectRestriction::BPlayerCheck(CTFPlayer const*, IGameEvent*) const
 T CTFQuestPlayerObjectRestriction::GetOutputKeyValues(KeyValues*)
 T CTFQuestPlayerObjectRestriction::GetRequiredParamKeys(KeyValues*)
 T CTFQuestPlayerObjectRestriction::GetValueString() const
 T CTFQuestPlayerObjectRestriction::IsValidForPlayer(CTFPlayer const*, InvalidReason&) const
 T CTFQuestPlayerObjectRestriction::~CTFQuestPlayerObjectRestriction()
 T CTFQuestRestriction::GetBaseName() const
 T CTFQuestRestriction::GetEventName() const
 T CTFQuestRestriction::GetValidChildren(CUtlVector<char const*, CUtlMemory<char const*, int> >&) const
 T CTFQuestRestriction::GetValidTypes(CUtlVector<char const*, CUtlMemory<char const*, int> >&) const
 T CTFQuestRestriction::SetEventName(char const*)
 T CTFQuestScorerRestriction::BInitFromKV(KeyValues*, CUtlVector<CUtlString, CUtlMemory<CUtlString, int> >*)
 T CTFQuestScorerRestriction::BPlayerCheck(CTFPlayer const*, IGameEvent*) const
 T CTFQuestScorerRestriction::GetOutputKeyValues(KeyValues*)
 T CTFQuestScorerRestriction::GetRequiredParamKeys(KeyValues*)
 T CTFQuestScorerRestriction::IsValidForPlayer(CTFPlayer const*, InvalidReason&) const
 T CTFQuestScorerRestriction::~CTFQuestScorerRestriction()
 T CTFQuestTeamRestriction::BInitFromKV(KeyValues*, CUtlVector<CUtlString, CUtlMemory<CUtlString, int> >*)
 T CTFQuestTeamRestriction::GetOutputKeyValues(KeyValues*)
 T CTFQuestTeamRestriction::GetRequiredParamKeys(KeyValues*)
 T CTFQuestTeamRestriction::GetValueString() const
 T CTFQuestTeamRestriction::PassesRestrictions(IGameEvent*) const
 T CTFQuestTeamRestriction::~CTFQuestTeamRestriction()
 T CTFQuestWeaponTypeRestriction::BInitFromKV(KeyValues*, CUtlVector<CUtlString, CUtlMemory<CUtlString, int> >*)
 T CTFQuestWeaponTypeRestriction::GetValueString() const
 T CTFQuestWeaponTypeRestriction::PassesRestrictions(IGameEvent*) const
 T CTFQuestWeaponTypeRestriction::~CTFQuestWeaponTypeRestriction()
 T CTFRadiusDamageInfo::ApplyToEntity(CBaseEntity*)
 T CTFRadiusDamageInfo::CalculateFalloff()
 T CTFRagdoll::CTFRagdoll()
 T CTFRagdoll::GetServerClass()
 T CTFRagdoll::UpdateTransmitState()
 T CTFRagdoll::YouForgotToImplementOrDeclareServerClass()
 T CTFRagdoll::~CTFRagdoll()
 T CTFRaygun::CTFRaygun()
 T CTFRaygun::Deploy()
 T CTFRaygun::Energy_GetRechargeCost() const
 T CTFRaygun::Energy_GetShotCost() const
 T CTFRaygun::GetDamage()
 T CTFRaygun::GetMuzzleFlashParticleEffect()
 T CTFRaygun::GetProjectileGravity()
 T CTFRaygun::GetProjectileSpeed()
 T CTFRaygun::GetServerClass()
 T CTFRaygun::GetWeaponID() const
 T CTFRaygun::Holster(CBaseCombatWeapon*)
 T CTFRaygun::IsEnergyWeapon() const
 T CTFRaygun::IsViewModelFlipped()
 T CTFRaygun::ItemPostFrame()
 T CTFRaygun::ModifyProjectile(CBaseEntity*)
 T CTFRaygun::Precache()
 T CTFRaygun::PrimaryAttack()
 T CTFRaygun::YouForgotToImplementOrDeclareServerClass()
 T CTFRaygun::~CTFRaygun()
 T CTFRequiredQuestItemsSet::BInitFromKV(KeyValues*, CUtlVector<CUtlString, CUtlMemory<CUtlString, int> >*)
 T CTFRequiredQuestItemsSet::BPostInit(CUtlVector<CUtlString, CUtlMemory<CUtlString, int> >*)
 T CTFReviveMarker::AddMarkerHealth(float)
 T CTFReviveMarker::CTFReviveMarker()
 T CTFReviveMarker::Create(CTFPlayer*)
 T CTFReviveMarker::GetDataDescMap()
 T CTFReviveMarker::GetServerClass()
 T CTFReviveMarker::IsCombatItem() const
 T CTFReviveMarker::IsReviveInProgress()
 T CTFReviveMarker::NetworkStateChanged_m_iHealth()
 T CTFReviveMarker::NetworkStateChanged_m_iHealth(void*)
 T CTFReviveMarker::NetworkStateChanged_m_iMaxHealth()
 T CTFReviveMarker::NetworkStateChanged_m_iMaxHealth(void*)
 T CTFReviveMarker::Precache()
 T CTFReviveMarker::PromptOwner()
 T CTFReviveMarker::ReviveOwner()
 T CTFReviveMarker::ReviveThink()
 T CTFReviveMarker::SetOwner(CTFPlayer*)
 T CTFReviveMarker::ShouldCollide(int, int) const
 T CTFReviveMarker::ShouldTransmit(CCheckTransmitInfo const*)
 T CTFReviveMarker::Spawn()
 T CTFReviveMarker::UpdateTransmitState()
 T CTFReviveMarker::YouForgotToImplementOrDeclareServerClass()
 T CTFReviveMarker::~CTFReviveMarker()
 T CTFRevolver::CanFireCriticalShot(bool)
 T CTFRevolver::DefaultReload(int, int, int)
 T CTFRevolver::Deploy()
 T CTFRevolver::Detach()
 T CTFRevolver::GetDamageType() const
 T CTFRevolver::GetDataDescMap()
 T CTFRevolver::GetProjectileDamage()
 T CTFRevolver::GetServerClass()
 T CTFRevolver::GetWeaponID() const
 T CTFRevolver::GetWeaponSpread()
 T CTFRevolver::Holster(CBaseCombatWeapon*)
 T CTFRevolver::PrimaryAttack()
 T CTFRevolver::YouForgotToImplementOrDeclareServerClass()
 T CTFRevolver::~CTFRevolver()
 T CTFRobotArm::DoViewModelAnimation()
 T CTFRobotArm::Drop(Vector const&)
 T CTFRobotArm::Equip(CBaseCombatCharacter*)
 T CTFRobotArm::GetDamageCustom()
 T CTFRobotArm::GetForceScale()
 T CTFRobotArm::GetServerClass()
 T CTFRobotArm::HideAttachmentsAndShowBodygroupsWhenPerformingWeaponIndependentTaunt() const
 T CTFRobotArm::OnActiveStateChanged(int)
 T CTFRobotArm::Precache()
 T CTFRobotArm::PrimaryAttack()
 T CTFRobotArm::RemoveRobotArm()
 T CTFRobotArm::Smack()
 T CTFRobotArm::UpdateOnRemove()
 T CTFRobotArm::WeaponIdle()
 T CTFRobotArm::YouForgotToImplementOrDeclareServerClass()
 T CTFRobotArm::~CTFRobotArm()
 T CTFRobotDestructionLogic::Activate()
 T CTFRobotDestructionLogic::ApproachTargetScoresThink()
 T CTFRobotDestructionLogic::ApproachTeamTargetScore(int, int, int)
 T CTFRobotDestructionLogic::BlueTeamWin()
 T CTFRobotDestructionLogic::CTFRobotDestructionLogic()
 T CTFRobotDestructionLogic::FireGameEvent(IGameEvent*)
 T CTFRobotDestructionLogic::FlagDestroyed(int)
 T CTFRobotDestructionLogic::GetCountdownEndTime()
 T CTFRobotDestructionLogic::GetCountdownImage()
 T CTFRobotDestructionLogic::GetDataDescMap()
 T CTFRobotDestructionLogic::GetHealDistance()
 T CTFRobotDestructionLogic::GetRespawnScaleForTeam(int) const
 T CTFRobotDestructionLogic::GetRobotDestructionLogic()
 T CTFRobotDestructionLogic::GetScore(int) const
 T CTFRobotDestructionLogic::GetServerClass()
 T CTFRobotDestructionLogic::GetTargetScore(int) const
 T CTFRobotDestructionLogic::GetTeamLeader(int) const
 T CTFRobotDestructionLogic::GetType() const
 T CTFRobotDestructionLogic::InputRoundActivate(inputdata_t&)
 T CTFRobotDestructionLogic::IsUsingCustomCountdownImage()
 T CTFRobotDestructionLogic::ManageGameState()
 T CTFRobotDestructionLogic::OnBlueScoreChanged()
 T CTFRobotDestructionLogic::OnRedScoreChanged()
 T CTFRobotDestructionLogic::PlaySoundInPlayersEars(CTFPlayer*, EmitSound_t const&) const
 T CTFRobotDestructionLogic::PlaySoundInfoForScoreEvent(CTFPlayer*, bool, int, int, RDScoreMethod_t)
 T CTFRobotDestructionLogic::Precache()
 T CTFRobotDestructionLogic::RedTeamWin()
 T CTFRobotDestructionLogic::RobotAttacked(CTFRobotDestruction_Robot*)
 T CTFRobotDestructionLogic::RobotCreated(CTFRobotDestruction_Robot*)
 T CTFRobotDestructionLogic::RobotRemoved(CTFRobotDestruction_Robot*)
 T CTFRobotDestructionLogic::ScorePoints(int, int, RDScoreMethod_t, CTFPlayer*)
 T CTFRobotDestructionLogic::SetCountdownEndTime(float)
 T CTFRobotDestructionLogic::Spawn()
 T CTFRobotDestructionLogic::TeamWin(int)
 T CTFRobotDestructionLogic::UpdateTransmitState()
 T CTFRobotDestructionLogic::YouForgotToImplementOrDeclareServerClass()
 T CTFRobotDestructionLogic::~CTFRobotDestructionLogic()
 T CTFRobotDestruction_Robot::ArriveAtPath()
 T CTFRobotDestruction_Robot::CTFRobotDestruction_Robot()
 T CTFRobotDestruction_Robot::DisableUber()
 T CTFRobotDestruction_Robot::EnableUber()
 T CTFRobotDestruction_Robot::Event_Killed(CTakeDamageInfo const&)
 T CTFRobotDestruction_Robot::GetBodyInterface() const
 T CTFRobotDestruction_Robot::GetDataDescMap()
 T CTFRobotDestruction_Robot::GetIntentionInterface() const
 T CTFRobotDestruction_Robot::GetLocomotionInterface() const
 T CTFRobotDestruction_Robot::GetServerClass()
 T CTFRobotDestruction_Robot::HandleAnimEvent(animevent_t*)
 T CTFRobotDestruction_Robot::InputStopAndUseComputer(inputdata_t&)
 T CTFRobotDestruction_Robot::IsRemovedOnReset() const
 T CTFRobotDestruction_Robot::ModifyDamage(CTakeDamageInfo*) const
 T CTFRobotDestruction_Robot::NetworkStateChanged_m_iHealth()
 T CTFRobotDestruction_Robot::NetworkStateChanged_m_iHealth(void*)
 T CTFRobotDestruction_Robot::OnTakeDamage(CTakeDamageInfo const&)
 T CTFRobotDestruction_Robot::PlayDeathEffects()
 T CTFRobotDestruction_Robot::Precache()
 T CTFRobotDestruction_Robot::RepairSelfThink()
 T CTFRobotDestruction_Robot::SelfDestructThink()
 T CTFRobotDestruction_Robot::SetNewActivity(Activity)
 T CTFRobotDestruction_Robot::ShouldCollide(int, int) const
 T CTFRobotDestruction_Robot::Spawn()
 T CTFRobotDestruction_Robot::SpewBars(int)
 T CTFRobotDestruction_Robot::SpewBarsThink()
 T CTFRobotDestruction_Robot::SpewGibs()
 T CTFRobotDestruction_Robot::StaticPrecache()
 T CTFRobotDestruction_Robot::TraceAttack(CTakeDamageInfo const&, Vector const&, CGameTrace*, CDmgAccumulator*)
 T CTFRobotDestruction_Robot::UpdateAnimsThink()
 T CTFRobotDestruction_Robot::UpdateOnRemove()
 T CTFRobotDestruction_Robot::YouForgotToImplementOrDeclareServerClass()
 T CTFRobotDestruction_Robot::~CTFRobotDestruction_Robot()
 T CTFRobotDestruction_RobotAnimController::GetPoseParams()
 T CTFRobotDestruction_RobotAnimController::Update()
 T CTFRobotDestruction_RobotGroup::Activate()
 T CTFRobotDestruction_RobotGroup::AddToGroup(CTFRobotDestruction_RobotSpawn*)
 T CTFRobotDestruction_RobotGroup::CTFRobotDestruction_RobotGroup()
 T CTFRobotDestruction_RobotGroup::GetDataDescMap()
 T CTFRobotDestruction_RobotGroup::GetServerClass()
 T CTFRobotDestruction_RobotGroup::NetworkStateChanged_m_iTeamNum()
 T CTFRobotDestruction_RobotGroup::NetworkStateChanged_m_iTeamNum(void*)
 T CTFRobotDestruction_RobotGroup::OnRobotAttacked()
 T CTFRobotDestruction_RobotGroup::OnRobotKilled()
 T CTFRobotDestruction_RobotGroup::RespawnCountdownFinish()
 T CTFRobotDestruction_RobotGroup::RespawnRobots()
 T CTFRobotDestruction_RobotGroup::Spawn()
 T CTFRobotDestruction_RobotGroup::StartRespawnTimerIfNeeded(CTFRobotDestruction_RobotGroup*)
 T CTFRobotDestruction_RobotGroup::UpdateState()
 T CTFRobotDestruction_RobotGroup::UpdateTransmitState()
 T CTFRobotDestruction_RobotGroup::YouForgotToImplementOrDeclareServerClass()
 T CTFRobotDestruction_RobotGroup::~CTFRobotDestruction_RobotGroup()
 T CTFRobotDestruction_RobotSpawn::Activate()
 T CTFRobotDestruction_RobotSpawn::ClearRobot()
 T CTFRobotDestruction_RobotSpawn::GetDataDescMap()
 T CTFRobotDestruction_RobotSpawn::GetServerClass()
 T CTFRobotDestruction_RobotSpawn::InputSpawnRobot(inputdata_t&)
 T CTFRobotDestruction_RobotSpawn::OnRobotKilled()
 T CTFRobotDestruction_RobotSpawn::Precache()
 T CTFRobotDestruction_RobotSpawn::ShouldCollide(int, int) const
 T CTFRobotDestruction_RobotSpawn::Spawn()
 T CTFRobotDestruction_RobotSpawn::SpawnRobot()
 T CTFRobotDestruction_RobotSpawn::YouForgotToImplementOrDeclareServerClass()
 T CTFRobotDestruction_RobotSpawn::~CTFRobotDestruction_RobotSpawn()
 T CTFRocketLauncher::CTFRocketLauncher()
 T CTFRocketLauncher::CheckReloadMisfire()
 T CTFRocketLauncher::DefaultReload(int, int, int)
 T CTFRocketLauncher::FireProjectile(CTFPlayer*)
 T CTFRocketLauncher::GetDataDescMap()
 T CTFRocketLauncher::GetServerClass()
 T CTFRocketLauncher::GetWeaponID() const
 T CTFRocketLauncher::GetWeaponProjectileType() const
 T CTFRocketLauncher::IsBlastImpactWeapon() const
 T CTFRocketLauncher::ItemPostFrame()
 T CTFRocketLauncher::Misfire()
 T CTFRocketLauncher::ModifyEmitSoundParams(EmitSound_t&)
 T CTFRocketLauncher::Precache()
 T CTFRocketLauncher::ShouldBlockPrimaryFire()
 T CTFRocketLauncher::YouForgotToImplementOrDeclareServerClass()
 T CTFRocketLauncher::~CTFRocketLauncher()
 T CTFRocketLauncher_AirStrike::GetCount()
 T CTFRocketLauncher_AirStrike::GetDataDescMap()
 T CTFRocketLauncher_AirStrike::GetServerClass()
 T CTFRocketLauncher_AirStrike::GetWeaponID() const
 T CTFRocketLauncher_AirStrike::OnPlayerKill(CTFPlayer*, CTakeDamageInfo const&)
 T CTFRocketLauncher_AirStrike::YouForgotToImplementOrDeclareServerClass()
 T CTFRocketLauncher_AirStrike::~CTFRocketLauncher_AirStrike()
 T CTFRocketLauncher_DirectHit::GetDataDescMap()
 T CTFRocketLauncher_DirectHit::GetServerClass()
 T CTFRocketLauncher_DirectHit::GetWeaponID() const
 T CTFRocketLauncher_DirectHit::YouForgotToImplementOrDeclareServerClass()
 T CTFRocketLauncher_DirectHit::~CTFRocketLauncher_DirectHit()
 T CTFRune::BlinkThink()
 T CTFRune::ComeToRest()
 T CTFRune::CreateRune(Vector const&, RuneTypes_t, int, bool, bool, Vector)
 T CTFRune::GetDefaultPowerupModel()
 T CTFRune::MyTouch(CBasePlayer*)
 T CTFRune::Precache()
 T CTFRune::RepositionRune(RuneTypes_t, int)
 T CTFRune::ShouldTransmit(CCheckTransmitInfo const*)
 T CTFRune::Spawn()
 T CTFRune::UpdateTransmitState()
 T CTFRune::~CTFRune()
 T CTFRuneTemp::GetDefaultPowerupModel()
 T CTFRuneTemp::GetRespawnDelay()
 T CTFRuneTemp::MyTouch(CBasePlayer*)
 T CTFRuneTemp::Precache()
 T CTFRuneTemp::Spawn()
 T CTFRuneTemp::~CTFRuneTemp()
 T CTFRuneTempCrit::~CTFRuneTempCrit()
 T CTFRuneTempUber::GetDefaultPowerupModel()
 T CTFRuneTempUber::~CTFRuneTempUber()
 T CTFSMG::CanFireCriticalShot(bool)
 T CTFSMG::GetDamageType() const
 T CTFSMG::GetDataDescMap()
 T CTFSMG::GetServerClass()
 T CTFSMG::GetWeaponID() const
 T CTFSMG::YouForgotToImplementOrDeclareServerClass()
 T CTFSMG::~CTFSMG()
 T CTFScatterGun::ApplyPostHitEffects(CTakeDamageInfo const&, CTFPlayer*)
 T CTFScatterGun::Equip(CBaseCombatCharacter*)
 T CTFScatterGun::FinishReload()
 T CTFScatterGun::FireBullet(CTFPlayer*)
 T CTFScatterGun::GetServerClass()
 T CTFScatterGun::GetWeaponID() const
 T CTFScatterGun::HasKnockback()
 T CTFScatterGun::Reload()
 T CTFScatterGun::SendWeaponAnim(int)
 T CTFScatterGun::YouForgotToImplementOrDeclareServerClass()
 T CTFScatterGun::~CTFScatterGun()
 T CTFServerBenchmark::AddSentries()
 T CTFServerBenchmark::CreateBot()
 T CTFServerBenchmark::GetBlueSpawnPoint(bool)
 T CTFServerBenchmark::GetPhysicsModelNames(CUtlVector<char*, CUtlMemory<char*, int> >&)
 T CTFServerBenchmark::MoveRedPlayersToBlueArea()
 T CTFServerBenchmark::StartBenchmark()
 T CTFServerBenchmark::UpdateBenchmark()
 T CTFShotgun* _CreateEntityTemplate<CTFShotgun>(CTFShotgun*, char const*)
 T CTFShotgun::GetDmgAccumulator()
 T CTFShotgun::GetServerClass()
 T CTFShotgun::GetWeaponID() const
 T CTFShotgun::PlayWeaponShootSound()
 T CTFShotgun::PrimaryAttack()
 T CTFShotgun::YouForgotToImplementOrDeclareServerClass()
 T CTFShotgun::~CTFShotgun()
 T CTFShotgunBuildingRescue::GetProjectileGravity()
 T CTFShotgunBuildingRescue::GetProjectileSpeed()
 T CTFShotgunBuildingRescue::GetServerClass()
 T CTFShotgunBuildingRescue::GetWeaponID() const
 T CTFShotgunBuildingRescue::IsViewModelFlipped()
 T CTFShotgunBuildingRescue::YouForgotToImplementOrDeclareServerClass()
 T CTFShotgunBuildingRescue::~CTFShotgunBuildingRescue()
 T CTFShotgun_HWG::GetServerClass()
 T CTFShotgun_HWG::GetWeaponID() const
 T CTFShotgun_HWG::YouForgotToImplementOrDeclareServerClass()
 T CTFShotgun_HWG::~CTFShotgun_HWG()
 T CTFShotgun_Pyro::GetServerClass()
 T CTFShotgun_Pyro::GetWeaponID() const
 T CTFShotgun_Pyro::YouForgotToImplementOrDeclareServerClass()
 T CTFShotgun_Pyro::~CTFShotgun_Pyro()
 T CTFShotgun_Revenge::Deploy()
 T CTFShotgun_Revenge::Detach()
 T CTFShotgun_Revenge::GetCustomDamageType() const
 T CTFShotgun_Revenge::GetServerClass()
 T CTFShotgun_Revenge::GetWeaponID() const
 T CTFShotgun_Revenge::Holster(CBaseCombatWeapon*)
 T CTFShotgun_Revenge::Precache()
 T CTFShotgun_Revenge::PrimaryAttack()
 T CTFShotgun_Revenge::SentryKilled(int)
 T CTFShotgun_Revenge::YouForgotToImplementOrDeclareServerClass()
 T CTFShotgun_Revenge::~CTFShotgun_Revenge()
 T CTFShotgun_Soldier::GetServerClass()
 T CTFShotgun_Soldier::GetWeaponID() const
 T CTFShotgun_Soldier::YouForgotToImplementOrDeclareServerClass()
 T CTFShotgun_Soldier::~CTFShotgun_Soldier()
 T CTFShovel::Deploy()
 T CTFShovel::GetDamageCustom()
 T CTFShovel::GetForceScale()
 T CTFShovel::GetMeleeDamage(CBaseEntity*, int*, int*)
 T CTFShovel::GetServerClass()
 T CTFShovel::GetSpeedMod()
 T CTFShovel::GetWeaponID() const
 T CTFShovel::HasDamageBoost()
 T CTFShovel::HasSpeedBoost()
 T CTFShovel::Holster(CBaseCombatWeapon*)
 T CTFShovel::ItemPreFrame()
 T CTFShovel::MoveSpeedThink()
 T CTFShovel::PrimaryAttack()
 T CTFShovel::YouForgotToImplementOrDeclareServerClass()
 T CTFShovel::~CTFShovel()
 T CTFSniperRifle::ApplyChargeSpeedModifications(float&)
 T CTFSniperRifle::ApplyScopeSpeedModifications(float&)
 T CTFSniperRifle::CanFireCriticalShot(bool)
 T CTFSniperRifle::CanHolster() const
 T CTFSniperRifle::CreateSniperDot()
 T CTFSniperRifle::Detach()
 T CTFSniperRifle::ExplosiveHeadShot(CTFPlayer*, CTFPlayer*)
 T CTFSniperRifle::Fire(CTFPlayer*)
 T CTFSniperRifle::GetBuffType()
 T CTFSniperRifle::GetCustomDamageType() const
 T CTFSniperRifle::GetDamageType() const
 T CTFSniperRifle::GetDataDescMap()
 T CTFSniperRifle::GetJarateTime() const
 T CTFSniperRifle::GetPenetrateType() const
 T CTFSniperRifle::GetProjectileDamage()
 T CTFSniperRifle::GetServerClass()
 T CTFSniperRifle::GetWeaponID() const
 T CTFSniperRifle::HandleZooms()
 T CTFSniperRifle::Holster(CBaseCombatWeapon*)
 T CTFSniperRifle::IsFullyCharged() const
 T CTFSniperRifle::IsJarateRifle() const
 T CTFSniperRifle::IsZoomed()
 T CTFSniperRifle::ItemPostFrame()
 T CTFSniperRifle::Lower()
 T CTFSniperRifle::MustBeZoomedToFire()
 T CTFSniperRifle::OnBulletFire(int)
 T CTFSniperRifle::OnControlStunned()
 T CTFSniperRifle::OnPlayerKill(CTFPlayer*, CTakeDamageInfo const&)
 T CTFSniperRifle::OwnerCanJump()
 T CTFSniperRifle::PlayWeaponShootSound()
 T CTFSniperRifle::Precache()
 T CTFSniperRifle::Reload()
 T CTFSniperRifle::SniperRifleChargeRateMod()
 T CTFSniperRifle::Spawn()
 T CTFSniperRifle::UpdateSniperDot()
 T CTFSniperRifle::WeaponReset()
 T CTFSniperRifle::YouForgotToImplementOrDeclareServerClass()
 T CTFSniperRifle::Zoom()
 T CTFSniperRifle::ZoomIn()
 T CTFSniperRifle::ZoomOut()
 T CTFSniperRifle::ZoomOutIn()
 T CTFSniperRifle::~CTFSniperRifle()
 T CTFSniperRifleClassic::Deploy()
 T CTFSniperRifleClassic::Detach()
 T CTFSniperRifleClassic::GetDamageType() const
 T CTFSniperRifleClassic::GetServerClass()
 T CTFSniperRifleClassic::GetWeaponID() const
 T CTFSniperRifleClassic::HandleZooms()
 T CTFSniperRifleClassic::Holster(CBaseCombatWeapon*)
 T CTFSniperRifleClassic::ItemPostFrame()
 T CTFSniperRifleClassic::Lower()
 T CTFSniperRifleClassic::MustBeZoomedToFire()
 T CTFSniperRifleClassic::Precache()
 T CTFSniperRifleClassic::WeaponReset()
 T CTFSniperRifleClassic::YouForgotToImplementOrDeclareServerClass()
 T CTFSniperRifleClassic::Zoom()
 T CTFSniperRifleClassic::ZoomIn()
 T CTFSniperRifleClassic::ZoomOut()
 T CTFSniperRifleClassic::~CTFSniperRifleClassic()
 T CTFSniperRifleDecap::GetServerClass()
 T CTFSniperRifleDecap::GetWeaponID() const
 T CTFSniperRifleDecap::OnPlayerKill(CTFPlayer*, CTakeDamageInfo const&)
 T CTFSniperRifleDecap::SniperRifleChargeRateMod()
 T CTFSniperRifleDecap::YouForgotToImplementOrDeclareServerClass()
 T CTFSniperRifleDecap::~CTFSniperRifleDecap()
 T CTFSodaPopper::GetServerClass()
 T CTFSodaPopper::GetWeaponID() const
 T CTFSodaPopper::ItemBusyFrame()
 T CTFSodaPopper::SecondaryAttack()
 T CTFSodaPopper::YouForgotToImplementOrDeclareServerClass()
 T CTFSodaPopper::~CTFSodaPopper()
 T CTFSpawner::CTFSpawner()
 T CTFSpawner::GetDataDescMap()
 T CTFSpawner::InputDisable(inputdata_t&)
 T CTFSpawner::InputEnable(inputdata_t&)
 T CTFSpawner::InputReset(inputdata_t&)
 T CTFSpawner::SpawnerThink()
 T CTFSpawner::~CTFSpawner()
 T CTFSpellBook::CTFSpellBook()
 T CTFSpellBook::CanBeSelected()
 T CTFSpellBook::CanCastSpell(CTFPlayer*)
 T CTFSpellBook::CanThrowUnderWater()
 T CTFSpellBook::CastKartBombHead(CTFPlayer*)
 T CTFSpellBook::CastKartRocketJump(CTFPlayer*)
 T CTFSpellBook::CastKartSpell()
 T CTFSpellBook::CastKartUber(CTFPlayer*)
 T CTFSpellBook::CastRocketJump(CTFPlayer*)
 T CTFSpellBook::CastSelfHeal(CTFPlayer*)
 T CTFSpellBook::CastSelfSpeedBoost(CTFPlayer*)
 T CTFSpellBook::CastSelfStealth(CTFPlayer*)
 T CTFSpellBook::CastSpell(CTFPlayer*, int)
 T CTFSpellBook::ClearSpell()
 T CTFSpellBook::CreateSpellJar(Vector const&, QAngle const&, Vector const&, Vector const&, CBaseCombatCharacter*, CTFWeaponInfo const&)
 T CTFSpellBook::CreateSpellRocket(Vector const&, QAngle const&, Vector const&, Vector const&, CBaseCombatCharacter*, CTFWeaponInfo const&)
 T CTFSpellBook::FireJar(CTFPlayer*)
 T CTFSpellBook::GetEffectLabelText()
 T CTFSpellBook::GetServerClass()
 T CTFSpellBook::GetWeaponID() const
 T CTFSpellBook::HasASpellWithCharges()
 T CTFSpellBook::IsEnergyWeapon() const
 T CTFSpellBook::ItemBusyFrame()
 T CTFSpellBook::ItemHolsterFrame()
 T CTFSpellBook::ItemPostFrame()
 T CTFSpellBook::PaySpellCost(CTFPlayer*)
 T CTFSpellBook::Precache()
 T CTFSpellBook::PrimaryAttack()
 T CTFSpellBook::RollNewSpell(int, bool)
 T CTFSpellBook::RollNewSpellFinish()
 T CTFSpellBook::SetSelectedSpell(int)
 T CTFSpellBook::ShowHudElement()
 T CTFSpellBook::TossJarThink()
 T CTFSpellBook::VisibleInWeaponSelection()
 T CTFSpellBook::YouForgotToImplementOrDeclareServerClass()
 T CTFSpellBook::~CTFSpellBook()
 T CTFSpell_MeteorShowerSpawner::GetDataDescMap()
 T CTFSpell_MeteorShowerSpawner::MeteorShowerThink()
 T CTFSpell_MeteorShowerSpawner::Spawn()
 T CTFSpell_MeteorShowerSpawner::SpawnMeteor(CTFPlayer*, Vector const&, QAngle const&, Vector const&)
 T CTFSpell_MeteorShowerSpawner::~CTFSpell_MeteorShowerSpawner()
 T CTFStickBomb::GetServerClass()
 T CTFStickBomb::GetWeaponID() const
 T CTFStickBomb::GetWorldModel() const
 T CTFStickBomb::Precache()
 T CTFStickBomb::Smack()
 T CTFStickBomb::SwitchBodyGroups()
 T CTFStickBomb::WeaponRegenerate()
 T CTFStickBomb::WeaponReset()
 T CTFStickBomb::YouForgotToImplementOrDeclareServerClass()
 T CTFStickBomb::~CTFStickBomb()
 T CTFStunBall::ApplyBallImpactEffectOnVictim(CBaseEntity*)
 T CTFStunBall::Explode(CGameTrace*, int)
 T CTFStunBall::GetBallModelName() const
 T CTFStunBall::GetBallViewModelName() const
 T CTFStunBall::GetDamage()
 T CTFStunBall::GetDamageForce()
 T CTFStunBall::GetDamageType()
 T CTFStunBall::GetServerClass()
 T CTFStunBall::GetShakeAmplitude()
 T CTFStunBall::GetShakeRadius()
 T CTFStunBall::GetWeaponID() const
 T CTFStunBall::IsAllowedToExplode()
 T CTFStunBall::IsDestroyable()
 T CTFStunBall::PipebombTouch(CBaseEntity*)
 T CTFStunBall::Precache()
 T CTFStunBall::RemoveBallTrail()
 T CTFStunBall::Spawn()
 T CTFStunBall::VPhysicsCollision(int, gamevcollisionevent_t*)
 T CTFStunBall::YouForgotToImplementOrDeclareServerClass()
 T CTFStunBall::~CTFStunBall()
 T CTFStyleInfo::BInitFromKV(KeyValues*, CUtlVector<CUtlString, CUtlMemory<CUtlString, int> >*)
 T CTFStyleInfo::GeneratePrecacheModelStringsForStyle(CUtlVector<char const*, CUtlMemory<char const*, int> >*) const
 T CTFStyleInfo::GetPlayerDisplayModel(int, int) const
 T CTFStyleInfo::~CTFStyleInfo()
 T CTFSword::Deploy()
 T CTFSword::GetServerClass()
 T CTFSword::GetSwingRange()
 T CTFSword::GetSwordHealthMod()
 T CTFSword::GetSwordSpeedMod()
 T CTFSword::OnDecapitation(CTFPlayer*)
 T CTFSword::WeaponReset()
 T CTFSword::YouForgotToImplementOrDeclareServerClass()
 T CTFSword::~CTFSword()
 T CTFSyringeGun::Deploy()
 T CTFSyringeGun::GetDataDescMap()
 T CTFSyringeGun::GetServerClass()
 T CTFSyringeGun::GetWeaponID() const
 T CTFSyringeGun::HasPrimaryAmmo()
 T CTFSyringeGun::Holster(CBaseCombatWeapon*)
 T CTFSyringeGun::Precache()
 T CTFSyringeGun::RemoveProjectileAmmo(CTFPlayer*)
 T CTFSyringeGun::YouForgotToImplementOrDeclareServerClass()
 T CTFSyringeGun::~CTFSyringeGun()
 T CTFTacticalMissionManager::OnRoundRestart()
 T CTFTacticalMissionManager::OnServerActivate()
 T CTFTacticalMissionManager::~CTFTacticalMissionManager()
 T CTFTankBoss::CTFTankBoss()
 T CTFTankBoss::Event_Killed(CTakeDamageInfo const&)
 T CTFTankBoss::Explode()
 T CTFTankBoss::GetBodyInterface() const
 T CTFTankBoss::GetCurrencyValue()
 T CTFTankBoss::GetDataDescMap()
 T CTFTankBoss::GetServerClass()
 T CTFTankBoss::InputAddCaptureDestroyPostfix(inputdata_t&)
 T CTFTankBoss::InputDestroyIfAtCapturePoint(inputdata_t&)
 T CTFTankBoss::ModifyDamage(CTakeDamageInfo*) const
 T CTFTankBoss::OnTakeDamage_Alive(CTakeDamageInfo const&)
 T CTFTankBoss::Precache()
 T CTFTankBoss::SetSkin(int)
 T CTFTankBoss::SetStartingPathTrackNode(char*)
 T CTFTankBoss::Spawn()
 T CTFTankBoss::TankBossThink()
 T CTFTankBoss::UpdateCollisionBounds()
 T CTFTankBoss::UpdateOnRemove()
 T CTFTankBoss::YouForgotToImplementOrDeclareServerClass()
 T CTFTankBoss::~CTFTankBoss()
 T CTFTankBossBody::CTFTankBossBody(INextBot*)
 T CTFTankBossBody::GetSolidMask() const
 T CTFTankBossBody::SetSkin(int)
 T CTFTankBossBody::StartSequence(char const*)
 T CTFTankBossBody::Update()
 T CTFTankBossBody::~CTFTankBossBody()
 T CTFTankDestruction::AnimThink()
 T CTFTankDestruction::GetDataDescMap()
 T CTFTankDestruction::Precache()
 T CTFTankDestruction::Spawn()
 T CTFTankDestruction::~CTFTankDestruction()
 T CTFTargetDummy* _CreateEntityTemplate<CTFTargetDummy>(CTFTargetDummy*, char const*)
 T CTFTargetDummy::DestroyThink()
 T CTFTargetDummy::Event_Killed(CTakeDamageInfo const&)
 T CTFTargetDummy::OnTakeDamage(CTakeDamageInfo const&)
 T CTFTargetDummy::Precache()
 T CTFTargetDummy::ShouldCollide(int, int) const
 T CTFTargetDummy::Spawn()
 T CTFTargetDummy::SpewGibs()
 T CTFTargetDummy::~CTFTargetDummy()
 T CTFTauntInfo::BInitFromKV(KeyValues*, CUtlVector<CUtlString, CUtlMemory<CUtlString, int> >*)
 T CTFTauntInfo::InitTauntInputRemap(KeyValues*, CUtlVector<CUtlString, CUtlMemory<CUtlString, int> >*)
 T CTFTauntInfo::~CTFTauntInfo()
 T CTFTauntProp::GetServerClass()
 T CTFTauntProp::PlayScene(char const*, float, AI_Response*, IRecipientFilter*)
 T CTFTauntProp::ProcessSceneEvent(CSceneEventInfo*, CChoreoScene*, CChoreoEvent*)
 T CTFTauntProp::StartSceneEvent(CSceneEventInfo*, CChoreoScene*, CChoreoEvent*, CChoreoActor*, CBaseEntity*)
 T CTFTauntProp::UpdateOnRemove()
 T CTFTauntProp::YouForgotToImplementOrDeclareServerClass()
 T CTFTauntProp::~CTFTauntProp()
 T CTFTeam::AddObject(CBaseObject*)
 T CTFTeam::AddPlayer(CBasePlayer*)
 T CTFTeam::CTFTeam()
 T CTFTeam::GetNumObjects(int)
 T CTFTeam::GetObject(int)
 T CTFTeam::GetServerClass()
 T CTFTeam::IsObjectOnTeam(CBaseObject*) const
 T CTFTeam::RemoveObject(CBaseObject*)
 T CTFTeam::RemovePlayer(CBasePlayer*)
 T CTFTeam::YouForgotToImplementOrDeclareServerClass()
 T CTFTeam::~CTFTeam()
 T CTFTeamManager::AddTeamScore(int, int)
 T CTFTeamManager::Create(char const*, color32_s)
 T CTFTeamManager::GetFlagCaptures(int)
 T CTFTeamManager::GetTeam(int)
 T CTFTeamManager::GetTeamCount()
 T CTFTeamManager::IncrementFlagCaptures(int)
 T CTFTeamManager::Init()
 T CTFTeamManager::Shutdown()
 T CTFTeamSpawn::Activate()
 T CTFTeamSpawn::DrawDebugTextOverlays()
 T CTFTeamSpawn::GetDataDescMap()
 T CTFTeamSpawn::InputDisable(inputdata_t&)
 T CTFTeamSpawn::InputEnable(inputdata_t&)
 T CTFTeamSpawn::InputRoundSpawn(inputdata_t&)
 T CTFTeamSpawn::~CTFTeamSpawn()
 T CTFTeleportLocation::~CTFTeleportLocation()
 T CTFThrowable::CTFThrowable()
 T CTFThrowable::CanCharge()
 T CTFThrowable::FireJar(CTFPlayer*)
 T CTFThrowable::FireProjectileInternal()
 T CTFThrowable::GetChargeBeginTime()
 T CTFThrowable::GetChargeMaxTime()
 T CTFThrowable::GetDetonationTime()
 T CTFThrowable::GetEffectLabelText()
 T CTFThrowable::GetServerClass()
 T CTFThrowable::GetWeaponID() const
 T CTFThrowable::InternalGetEffectBarRechargeTime()
 T CTFThrowable::ItemPostFrame()
 T CTFThrowable::ModifyEventParticles(char const*)
 T CTFThrowable::Precache()
 T CTFThrowable::PrimaryAttack()
 T CTFThrowable::ShowHudElement()
 T CTFThrowable::TossJarThink()
 T CTFThrowable::YouForgotToImplementOrDeclareServerClass()
 T CTFThrowable::~CTFThrowable()
 T CTFTrainingAttackSentryActionPoint::GetName() const
 T CTFTrainingAttackSentryActionPoint::Update(CTFBot*, float)
 T CTFTrainingAttackSentryActionPoint::~CTFTrainingAttackSentryActionPoint()
 T CTFTrainingDynamicProp::~CTFTrainingDynamicProp()
 T CTFViewModel::AddViewModelBob(CBasePlayer*, Vector&, QAngle&)
 T CTFViewModel::CalcViewModelLag(Vector&, QAngle&, QAngle&)
 T CTFViewModel::CalcViewModelView(CBasePlayer*, Vector const&, QAngle const&)
 T CTFViewModel::GetServerClass()
 T CTFViewModel::YouForgotToImplementOrDeclareServerClass()
 T CTFViewModel::~CTFViewModel()
 T CTFWarTracker::CTFWarTracker(GCSDK::CSharedObject const*, CSteamID, CSOTrackerManager*)
 T CTFWarTracker::CommitChangesToDB()
 T CTFWarTracker::FireGameEvent(IGameEvent*)
 T CTFWarTracker::OnRemove()
 T CTFWarTracker::OnUpdate()
 T CTFWarTracker::~CTFWarTracker()
 T CTFWarTrackerManager::AllocateNewProtoMessage() const
 T CTFWarTrackerManager::AllocateNewTracker(GCSDK::CSharedObject const*, CSteamID, CSOTrackerManager*) const
 T CTFWarTrackerManager::GetDebugObjectDescription(GCSDK::CSharedObject const*) const
 T CTFWarTrackerManager::GetKeyForObjectTracker(GCSDK::CSharedObject const*, CSteamID)
 T CTFWarTrackerManager::GetName() const
 T CTFWarTrackerManager::GetType() const
 T CTFWarTrackerManager::ShouldTrackObject(CSteamID const&, GCSDK::CSharedObject const*) const
 T CTFWarTrackerManager::~CTFWarTrackerManager()
 T CTFWeaponBase::AbortReload()
 T CTFWeaponBase::Activate()
 T CTFWeaponBase::ActivityList(int&)
 T CTFWeaponBase::AddAssociatedObject(CBaseObject*)
 T CTFWeaponBase::AddKillCombo(int)
 T CTFWeaponBase::AllowTaunts()
 T CTFWeaponBase::ApplyFireDelay(float) const
 T CTFWeaponBase::ApplyItemRegen()
 T CTFWeaponBase::ApplyOnHitAttributes(CBaseEntity*, CTFPlayer*, CTakeDamageInfo const&)
 T CTFWeaponBase::ApplyOnInjuredAttributes(CTFPlayer*, CTFPlayer*, CTakeDamageInfo const&)
 T CTFWeaponBase::ApplyPostHitEffects(CTakeDamageInfo const&, CTFPlayer*)
 T CTFWeaponBase::AreRandomCritsEnabled()
 T CTFWeaponBase::AttemptToMaterialize()
 T CTFWeaponBase::AutoFiresFullClip() const
 T CTFWeaponBase::AutoFiresFullClipAllAtOnce() const
 T CTFWeaponBase::CTFWeaponBase()
 T CTFWeaponBase::CalcIsAttackCritical()
 T CTFWeaponBase::CalcIsAttackCriticalHelper()
 T CTFWeaponBase::CalcIsAttackCriticalHelperNoCrits()
 T CTFWeaponBase::CanAttack()
 T CTFWeaponBase::CanBeCritBoosted()
 T CTFWeaponBase::CanDrop()
 T CTFWeaponBase::CanFireCriticalShot(bool)
 T CTFWeaponBase::CanFireRandomCriticalShot(float)
 T CTFWeaponBase::CanHaveRevengeCrits()
 T CTFWeaponBase::CanHolster() const
 T CTFWeaponBase::CanInspect() const
 T CTFWeaponBase::CanOverload() const
 T CTFWeaponBase::CanPerformSecondaryAttack() const
 T CTFWeaponBase::CanPickupOtherWeapon() const
 T CTFWeaponBase::ChangeTeam(int)
 T CTFWeaponBase::CheckEffectBarRegen()
 T CTFWeaponBase::CheckReload()
 T CTFWeaponBase::CheckReloadMisfire()
 T CTFWeaponBase::CheckRespawn()
 T CTFWeaponBase::ClearKillComboCount()
 T CTFWeaponBase::Clip1()
 T CTFWeaponBase::Clip2()
 T CTFWeaponBase::DefaultReload(int, int, int)
 T CTFWeaponBase::DeflectEntity(CBaseEntity*, CTFPlayer*, Vector&, Vector&, Vector&)
 T CTFWeaponBase::DeflectPlayer(CTFPlayer*, CTFPlayer*, Vector&, Vector&, Vector&)
 T CTFWeaponBase::DeflectProjectiles()
 T CTFWeaponBase::DeflectionForce(Vector const&, float, float)
 T CTFWeaponBase::Deploy()
 T CTFWeaponBase::Detach()
 T CTFWeaponBase::DisguiseWeaponThink()
 T CTFWeaponBase::Drop(Vector const&)
 T CTFWeaponBase::EffectBarRegenFinished()
 T CTFWeaponBase::Energy_DrainEnergy()
 T CTFWeaponBase::Energy_DrainEnergy(float)
 T CTFWeaponBase::Energy_FullyCharged() const
 T CTFWeaponBase::Energy_GetMaxEnergy() const
 T CTFWeaponBase::Energy_GetRechargeCost() const
 T CTFWeaponBase::Energy_GetShotCost() const
 T CTFWeaponBase::Energy_HasEnergy()
 T CTFWeaponBase::Energy_Recharge()
 T CTFWeaponBase::Equip(CBaseCombatCharacter*)
 T CTFWeaponBase::ExtraWearableEquipped(CTFWearable*)
 T CTFWeaponBase::ExtraWearableViewModelEquipped(CTFWearable*)
 T CTFWeaponBase::FallInit()
 T CTFWeaponBase::FinishReload()
 T CTFWeaponBase::FireFullClipAtOnce()
 T CTFWeaponBase::ForceWeaponSwitch() const
 T CTFWeaponBase::GetActivityWeaponRole() const
 T CTFWeaponBase::GetBulletSpread()
 T CTFWeaponBase::GetCanAttackFlags() const
 T CTFWeaponBase::GetCustomDamageType() const
 T CTFWeaponBase::GetDamageType() const
 T CTFWeaponBase::GetDataDescMap()
 T CTFWeaponBase::GetDefaultClip1() const
 T CTFWeaponBase::GetDeflectionSize()
 T CTFWeaponBase::GetDropSkinOverride()
 T CTFWeaponBase::GetEffectBarAmmo()
 T CTFWeaponBase::GetEffectBarProgress()
 T CTFWeaponBase::GetInventoryModel()
 T CTFWeaponBase::GetJarateTime()
 T CTFWeaponBase::GetKillEaterKillEventType() const
 T CTFWeaponBase::GetLastDeployTime()
 T CTFWeaponBase::GetLastHitTime()
 T CTFWeaponBase::GetMaxClip1() const
 T CTFWeaponBase::GetMaxHealthMod()
 T CTFWeaponBase::GetMuzzleFlashEffectName_1st()
 T CTFWeaponBase::GetMuzzleFlashEffectName_3rd()
 T CTFWeaponBase::GetMuzzleFlashModel()
 T CTFWeaponBase::GetMuzzleFlashModelLifetime()
 T CTFWeaponBase::GetMuzzleFlashParticleEffect()
 T CTFWeaponBase::GetOwnerViaInterface()
 T CTFWeaponBase::GetParticleColor(int)
 T CTFWeaponBase::GetPenetrateType() const
 T CTFWeaponBase::GetPlayerOwner() const
 T CTFWeaponBase::GetProjectileFireSetup(CTFPlayer*, Vector, Vector*, QAngle*, bool, float)
 T CTFWeaponBase::GetServerClass()
 T CTFWeaponBase::GetShootSound(int) const
 T CTFWeaponBase::GetSkin()
 T CTFWeaponBase::GetSpeedMod()
 T CTFWeaponBase::GetSpreadAngles()
 T CTFWeaponBase::GetTFPlayerOwner() const
 T CTFWeaponBase::GetTFWpnData() const
 T CTFWeaponBase::GetTracerType()
 T CTFWeaponBase::GetViewModel(int) const
 T CTFWeaponBase::GetViewModelWeaponRole()
 T CTFWeaponBase::GetWeaponID() const
 T CTFWeaponBase::GetWorldModel() const
 T CTFWeaponBase::HandleInspect()
 T CTFWeaponBase::HasAmmo()
 T CTFWeaponBase::HasLastShotCritical()
 T CTFWeaponBase::HideAttachmentsAndShowBodygroupsWhenPerformingWeaponIndependentTaunt() const
 T CTFWeaponBase::HideWhileStunned()
 T CTFWeaponBase::Holster(CBaseCombatWeapon*)
 T CTFWeaponBase::IncrementAmmo()
 T CTFWeaponBase::InternalGetEffectBarRechargeTime()
 T CTFWeaponBase::IsBlastImpactWeapon() const
 T CTFWeaponBase::IsEnergyWeapon() const
 T CTFWeaponBase::IsFiring() const
 T CTFWeaponBase::IsHonorBound() const
 T CTFWeaponBase::IsInspectActivity(int)
 T CTFWeaponBase::IsPredicted() const
 T CTFWeaponBase::IsReloading() const
 T CTFWeaponBase::IsSilentKiller()
 T CTFWeaponBase::IsViewModelFlipped()
 T CTFWeaponBase::IsWeapon(int) const
 T CTFWeaponBase::ItemBusyFrame()
 T CTFWeaponBase::ItemHolsterFrame()
 T CTFWeaponBase::ItemPostFrame()
 T CTFWeaponBase::Lower()
 T CTFWeaponBase::Materialize()
 T CTFWeaponBase::Misfire()
 T CTFWeaponBase::OnActiveStateChanged(int)
 T CTFWeaponBase::OnBulletFire(int)
 T CTFWeaponBase::OnControlStunned()
 T CTFWeaponBase::OnPlayerKill(CTFPlayer*, CTakeDamageInfo const&)
 T CTFWeaponBase::Operator_HandleAnimEvent(animevent_t*, CBaseCombatCharacter*)
 T CTFWeaponBase::OwnerCanJump()
 T CTFWeaponBase::OwnerCanTaunt()
 T CTFWeaponBase::PlayDeflectionSound(bool)
 T CTFWeaponBase::PlayUpgradedShootSound(char const*)
 T CTFWeaponBase::Precache()
 T CTFWeaponBase::PrimaryAttack()
 T CTFWeaponBase::Ready()
 T CTFWeaponBase::ReapplyProvision()
 T CTFWeaponBase::Reload()
 T CTFWeaponBase::ReloadSingly()
 T CTFWeaponBase::ReloadSinglyPostFrame()
 T CTFWeaponBase::RemoveAssociatedObject(CBaseObject*)
 T CTFWeaponBase::RemoveExtraWearables()
 T CTFWeaponBase::Respawn()
 T CTFWeaponBase::SecondaryAttack()
 T CTFWeaponBase::SendObjectDeflectedEvent(CTFPlayer*, CTFPlayer*, int, CBaseAnimating*)
 T CTFWeaponBase::SendWeaponAnim(int)
 T CTFWeaponBase::SetReloadTimer(float)
 T CTFWeaponBase::SetWeaponVisible(bool)
 T CTFWeaponBase::ShouldRemoveInvisibilityOnPrimaryAttack() const
 T CTFWeaponBase::Spawn()
 T CTFWeaponBase::StartEffectBarRegen()
 T CTFWeaponBase::TranslateViewmodelHandActivityInternal(Activity)
 T CTFWeaponBase::UberChargeAmmoPerShot()
 T CTFWeaponBase::UpdateExtraWearables()
 T CTFWeaponBase::UpdateHands()
 T CTFWeaponBase::UpdateHiddenParentBodygroup(bool)
 T CTFWeaponBase::UpdateOnRemove()
 T CTFWeaponBase::UpdateWeaponBodyGroups(CTFPlayer*, bool)
 T CTFWeaponBase::Use(CBaseEntity*, CBaseEntity*, USE_TYPE, float)
 T CTFWeaponBase::UseServerRandomSeed() const
 T CTFWeaponBase::UsesPrimaryAmmo()
 T CTFWeaponBase::VisibleInWeaponSelection()
 T CTFWeaponBase::WeaponIdle()
 T CTFWeaponBase::WeaponRegenerate()
 T CTFWeaponBase::WeaponReset()
 T CTFWeaponBase::WeaponShouldBeLowered()
 T CTFWeaponBase::YouForgotToImplementOrDeclareServerClass()
 T CTFWeaponBase::~CTFWeaponBase()
 T CTFWeaponBaseGrenadeProj::CTFWeaponBaseGrenadeProj()
 T CTFWeaponBaseGrenadeProj::Destroy(bool, bool)
 T CTFWeaponBaseGrenadeProj::Detonate()
 T CTFWeaponBaseGrenadeProj::DetonateThink()
 T CTFWeaponBaseGrenadeProj::Explode(CGameTrace*, int)
 T CTFWeaponBaseGrenadeProj::GetBaseProjectileType() const
 T CTFWeaponBaseGrenadeProj::GetCustomDamageType() const
 T CTFWeaponBaseGrenadeProj::GetCustomParticleIndex()
 T CTFWeaponBaseGrenadeProj::GetDamageCustom()
 T CTFWeaponBaseGrenadeProj::GetDamageRadius()
 T CTFWeaponBaseGrenadeProj::GetDamageType()
 T CTFWeaponBaseGrenadeProj::GetDataDescMap()
 T CTFWeaponBaseGrenadeProj::GetEnemy()
 T CTFWeaponBaseGrenadeProj::GetServerClass()
 T CTFWeaponBaseGrenadeProj::GetShakeAmplitude()
 T CTFWeaponBaseGrenadeProj::GetShakeRadius()
 T CTFWeaponBaseGrenadeProj::GetWeaponID() const
 T CTFWeaponBaseGrenadeProj::IncrementDeflected()
 T CTFWeaponBaseGrenadeProj::InitGrenade(Vector const&, Vector const&, CBaseCombatCharacter*, CTFWeaponInfo const&)
 T CTFWeaponBaseGrenadeProj::InitGrenade(Vector const&, Vector const&, CBaseCombatCharacter*, int, float)
 T CTFWeaponBaseGrenadeProj::IsAllowedToExplode()
 T CTFWeaponBaseGrenadeProj::IsDestroyable()
 T CTFWeaponBaseGrenadeProj::NetworkStateChanged_m_hLauncher()
 T CTFWeaponBaseGrenadeProj::NetworkStateChanged_m_hLauncher(void*)
 T CTFWeaponBaseGrenadeProj::OnTakeDamage(CTakeDamageInfo const&)
 T CTFWeaponBaseGrenadeProj::Precache()
 T CTFWeaponBaseGrenadeProj::ResolveFlyCollisionCustom(CGameTrace&, Vector&)
 T CTFWeaponBaseGrenadeProj::SetDetonateTimerLength(float)
 T CTFWeaponBaseGrenadeProj::SetLauncher(CBaseEntity*)
 T CTFWeaponBaseGrenadeProj::Spawn()
 T CTFWeaponBaseGrenadeProj::VPhysicsUpdate(IPhysicsObject*)
 T CTFWeaponBaseGrenadeProj::YouForgotToImplementOrDeclareServerClass()
 T CTFWeaponBaseGrenadeProj::~CTFWeaponBaseGrenadeProj()
 T CTFWeaponBaseGun::CTFWeaponBaseGun()
 T CTFWeaponBaseGun::CanBeSelected()
 T CTFWeaponBaseGun::CanDeploy()
 T CTFWeaponBaseGun::DoFireEffects()
 T CTFWeaponBaseGun::FireArrow(CTFPlayer*, ProjectileType_t)
 T CTFWeaponBaseGun::FireBullet(CTFPlayer*)
 T CTFWeaponBaseGun::FireEnergyBall(CTFPlayer*, bool)
 T CTFWeaponBaseGun::FireFlameRocket(CTFPlayer*)
 T CTFWeaponBaseGun::FireFlare(CTFPlayer*)
 T CTFWeaponBaseGun::FireJar(CTFPlayer*)
 T CTFWeaponBaseGun::FireNail(CTFPlayer*, int)
 T CTFWeaponBaseGun::FirePipeBomb(CTFPlayer*, int)
 T CTFWeaponBaseGun::FireProjectile(CTFPlayer*)
 T CTFWeaponBaseGun::FireRocket(CTFPlayer*, int)
 T CTFWeaponBaseGun::GetAmmoPerShot()
 T CTFWeaponBaseGun::GetCustomProjectileModel(CAttribute_String*)
 T CTFWeaponBaseGun::GetDataDescMap()
 T CTFWeaponBaseGun::GetProjectileDamage()
 T CTFWeaponBaseGun::GetProjectileGravity()
 T CTFWeaponBaseGun::GetProjectileSpeed()
 T CTFWeaponBaseGun::GetProjectileSpread()
 T CTFWeaponBaseGun::GetServerClass()
 T CTFWeaponBaseGun::GetWeaponProjectileType() const
 T CTFWeaponBaseGun::GetWeaponSpread()
 T CTFWeaponBaseGun::HasLastShotCritical()
 T CTFWeaponBaseGun::HasPrimaryAmmo()
 T CTFWeaponBaseGun::Holster(CBaseCombatWeapon*)
 T CTFWeaponBaseGun::ModifyProjectile(CBaseEntity*)
 T CTFWeaponBaseGun::PlayWeaponShootSound()
 T CTFWeaponBaseGun::PrimaryAttack()
 T CTFWeaponBaseGun::RemoveProjectileAmmo(CTFPlayer*)
 T CTFWeaponBaseGun::SecondaryAttack()
 T CTFWeaponBaseGun::ShouldDoMuzzleFlash()
 T CTFWeaponBaseGun::ShouldPlayFireAnim()
 T CTFWeaponBaseGun::ShouldRemoveDisguiseOnPrimaryAttack() const
 T CTFWeaponBaseGun::ToggleZoom()
 T CTFWeaponBaseGun::YouForgotToImplementOrDeclareServerClass()
 T CTFWeaponBaseGun::ZoomIn()
 T CTFWeaponBaseGun::ZoomOut()
 T CTFWeaponBaseGun::ZoomOutIn()
 T CTFWeaponBaseGun::~CTFWeaponBaseGun()
 T CTFWeaponBaseMelee::CTFWeaponBaseMelee()
 T CTFWeaponBaseMelee::CalcIsAttackCriticalHelper()
 T CTFWeaponBaseMelee::CalcIsAttackCriticalHelperNoCrits()
 T CTFWeaponBaseMelee::CanBeSelected()
 T CTFWeaponBaseMelee::CanHolster() const
 T CTFWeaponBaseMelee::DoMeleeDamage(CBaseEntity*, CGameTrace&)
 T CTFWeaponBaseMelee::DoMeleeDamage(CBaseEntity*, CGameTrace&, float)
 T CTFWeaponBaseMelee::DoSwingTrace(CGameTrace&)
 T CTFWeaponBaseMelee::DoSwingTraceInternal(CGameTrace&, bool, CUtlVector<CGameTrace, CUtlMemory<CGameTrace, int> >*)
 T CTFWeaponBaseMelee::DoViewModelAnimation()
 T CTFWeaponBaseMelee::GetDamageCustom()
 T CTFWeaponBaseMelee::GetDataDescMap()
 T CTFWeaponBaseMelee::GetForceScale()
 T CTFWeaponBaseMelee::GetMeleeDamage(CBaseEntity*, int*, int*)
 T CTFWeaponBaseMelee::GetServerClass()
 T CTFWeaponBaseMelee::GetShootSound(int) const
 T CTFWeaponBaseMelee::GetSwingRange()
 T CTFWeaponBaseMelee::GetWeaponID() const
 T CTFWeaponBaseMelee::HasPrimaryAmmo()
 T CTFWeaponBaseMelee::Holster(CBaseCombatWeapon*)
 T CTFWeaponBaseMelee::ItemPostFrame()
 T CTFWeaponBaseMelee::ItemPreFrame()
 T CTFWeaponBaseMelee::OnEntityHit(CBaseEntity*, CTakeDamageInfo*)
 T CTFWeaponBaseMelee::OnSwingHit(CGameTrace&)
 T CTFWeaponBaseMelee::Precache()
 T CTFWeaponBaseMelee::PrimaryAttack()
 T CTFWeaponBaseMelee::SecondaryAttack()
 T CTFWeaponBaseMelee::SendPlayerAnimEvent(CTFPlayer*)
 T CTFWeaponBaseMelee::Smack()
 T CTFWeaponBaseMelee::Spawn()
 T CTFWeaponBaseMelee::Swing(CTFPlayer*)
 T CTFWeaponBaseMelee::WeaponReset()
 T CTFWeaponBaseMelee::YouForgotToImplementOrDeclareServerClass()
 T CTFWeaponBaseMelee::~CTFWeaponBaseMelee()
 T CTFWeaponBaseMerasmusGrenade::GetCustomParticleIndex()
 T CTFWeaponBaseMerasmusGrenade::GetDamageCustom()
 T CTFWeaponBaseMerasmusGrenade::GetServerClass()
 T CTFWeaponBaseMerasmusGrenade::YouForgotToImplementOrDeclareServerClass()
 T CTFWeaponBaseMerasmusGrenade::~CTFWeaponBaseMerasmusGrenade()
 T CTFWeaponBuilder::AllowsAutoSwitchTo() const
 T CTFWeaponBuilder::CTFWeaponBuilder()
 T CTFWeaponBuilder::CanBuildObjectType(int)
 T CTFWeaponBuilder::CanDeploy()
 T CTFWeaponBuilder::Deploy()
 T CTFWeaponBuilder::GetDrawActivity()
 T CTFWeaponBuilder::GetEffectBarAmmo()
 T CTFWeaponBuilder::GetPosition() const
 T CTFWeaponBuilder::GetPrintName() const
 T CTFWeaponBuilder::GetServerClass()
 T CTFWeaponBuilder::GetSlot() const
 T CTFWeaponBuilder::GetType()
 T CTFWeaponBuilder::GetViewModel(int) const
 T CTFWeaponBuilder::GetWeaponID() const
 T CTFWeaponBuilder::GetWorldModel() const
 T CTFWeaponBuilder::HasAmmo()
 T CTFWeaponBuilder::Holster(CBaseCombatWeapon*)
 T CTFWeaponBuilder::InternalGetEffectBarRechargeTime()
 T CTFWeaponBuilder::IsValidPlacement()
 T CTFWeaponBuilder::IsWheatleySapper()
 T CTFWeaponBuilder::ItemPostFrame()
 T CTFWeaponBuilder::Precache()
 T CTFWeaponBuilder::PrimaryAttack()
 T CTFWeaponBuilder::SecondaryAttack()
 T CTFWeaponBuilder::SetCurrentState(int)
 T CTFWeaponBuilder::SetObjectMode(int)
 T CTFWeaponBuilder::SetObjectTypeAsBuildable(int)
 T CTFWeaponBuilder::SetSubType(int)
 T CTFWeaponBuilder::StartBuilding()
 T CTFWeaponBuilder::StartPlacement()
 T CTFWeaponBuilder::StopPlacement()
 T CTFWeaponBuilder::SwitchOwnersWeaponToLast()
 T CTFWeaponBuilder::TranslateViewmodelHandActivity(Activity)
 T CTFWeaponBuilder::UpdatePlacementState()
 T CTFWeaponBuilder::WeaponIdle()
 T CTFWeaponBuilder::WeaponReset()
 T CTFWeaponBuilder::WheatleyDamage()
 T CTFWeaponBuilder::WheatleyEmitSound(char const*, bool, bool)
 T CTFWeaponBuilder::WheatleyReset(bool)
 T CTFWeaponBuilder::WheatleySapperIdle(CTFPlayer*)
 T CTFWeaponBuilder::YouForgotToImplementOrDeclareServerClass()
 T CTFWeaponBuilder::~CTFWeaponBuilder()
 T CTFWeaponClassRestriction::PassesRestrictions(IGameEvent*) const
 T CTFWeaponClassRestriction::~CTFWeaponClassRestriction()
 T CTFWeaponInfo::Parse(KeyValues*, char const*)
 T CTFWeaponInvis::ActivateInvisibilityWatch()
 T CTFWeaponInvis::AllowsAutoSwitchTo()
 T CTFWeaponInvis::CanBeSelected()
 T CTFWeaponInvis::CanDeploy()
 T CTFWeaponInvis::CleanupInvisibilityWatch()
 T CTFWeaponInvis::Deploy()
 T CTFWeaponInvis::GetControlPanelInfo(int, char const*&)
 T CTFWeaponInvis::GetDataDescMap()
 T CTFWeaponInvis::GetServerClass()
 T CTFWeaponInvis::GetViewModel(int) const
 T CTFWeaponInvis::GetWeaponID() const
 T CTFWeaponInvis::HasFeignDeath()
 T CTFWeaponInvis::HasMotionCloak()
 T CTFWeaponInvis::HasPrimaryAmmo()
 T CTFWeaponInvis::HideThink()
 T CTFWeaponInvis::Holster(CBaseCombatWeapon*)
 T CTFWeaponInvis::ItemBusyFrame()
 T CTFWeaponInvis::OnActiveStateChanged(int)
 T CTFWeaponInvis::PrimaryAttack()
 T CTFWeaponInvis::SecondaryAttack()
 T CTFWeaponInvis::SetCloakRates()
 T CTFWeaponInvis::SetFeignDeathState(bool)
 T CTFWeaponInvis::SetWeaponVisible(bool)
 T CTFWeaponInvis::ShouldDrawCrosshair()
 T CTFWeaponInvis::ShouldShowControlPanels()
 T CTFWeaponInvis::Spawn()
 T CTFWeaponInvis::VisibleInWeaponSelection()
 T CTFWeaponInvis::YouForgotToImplementOrDeclareServerClass()
 T CTFWeaponInvis::~CTFWeaponInvis()
 T CTFWeaponPDA::CanBeSelected()
 T CTFWeaponPDA::GetControlPanelInfo(int, char const*&)
 T CTFWeaponPDA::GetDataDescMap()
 T CTFWeaponPDA::HasPrimaryAmmo()
 T CTFWeaponPDA::Precache()
 T CTFWeaponPDA::PrimaryAttack()
 T CTFWeaponPDA::SecondaryAttack()
 T CTFWeaponPDA::ShouldDrawCrosshair()
 T CTFWeaponPDA::ShouldShowControlPanels()
 T CTFWeaponPDA::Spawn()
 T CTFWeaponPDAExpansion_Dispenser::Equip(CBasePlayer*)
 T CTFWeaponPDAExpansion_Dispenser::GetDataDescMap()
 T CTFWeaponPDAExpansion_Dispenser::GetServerClass()
 T CTFWeaponPDAExpansion_Dispenser::UnEquip(CBasePlayer*)
 T CTFWeaponPDAExpansion_Dispenser::YouForgotToImplementOrDeclareServerClass()
 T CTFWeaponPDAExpansion_Dispenser::~CTFWeaponPDAExpansion_Dispenser()
 T CTFWeaponPDAExpansion_Teleporter::Equip(CBasePlayer*)
 T CTFWeaponPDAExpansion_Teleporter::GetDataDescMap()
 T CTFWeaponPDAExpansion_Teleporter::GetServerClass()
 T CTFWeaponPDAExpansion_Teleporter::UnEquip(CBasePlayer*)
 T CTFWeaponPDAExpansion_Teleporter::YouForgotToImplementOrDeclareServerClass()
 T CTFWeaponPDAExpansion_Teleporter::~CTFWeaponPDAExpansion_Teleporter()
 T CTFWeaponPDA_Engineer_Build::GetPanelName()
 T CTFWeaponPDA_Engineer_Build::GetServerClass()
 T CTFWeaponPDA_Engineer_Build::GetWeaponID() const
 T CTFWeaponPDA_Engineer_Build::YouForgotToImplementOrDeclareServerClass()
 T CTFWeaponPDA_Engineer_Build::~CTFWeaponPDA_Engineer_Build()
 T CTFWeaponPDA_Engineer_Destroy::GetPanelName()
 T CTFWeaponPDA_Engineer_Destroy::GetServerClass()
 T CTFWeaponPDA_Engineer_Destroy::GetWeaponID() const
 T CTFWeaponPDA_Engineer_Destroy::VisibleInWeaponSelection()
 T CTFWeaponPDA_Engineer_Destroy::YouForgotToImplementOrDeclareServerClass()
 T CTFWeaponPDA_Engineer_Destroy::~CTFWeaponPDA_Engineer_Destroy()
 T CTFWeaponPDA_Spy::CanBeSelected()
 T CTFWeaponPDA_Spy::GetPanelName()
 T CTFWeaponPDA_Spy::GetServerClass()
 T CTFWeaponPDA_Spy::GetWeaponID() const
 T CTFWeaponPDA_Spy::ItemBusyFrame()
 T CTFWeaponPDA_Spy::ItemHolsterFrame()
 T CTFWeaponPDA_Spy::ItemPreFrame()
 T CTFWeaponPDA_Spy::VisibleInWeaponSelection()
 T CTFWeaponPDA_Spy::YouForgotToImplementOrDeclareServerClass()
 T CTFWeaponPDA_Spy::~CTFWeaponPDA_Spy()
 T CTFWeaponSapper::CTFWeaponSapper()
 T CTFWeaponSapper::CanCharge()
 T CTFWeaponSapper::GetChargeBeginTime()
 T CTFWeaponSapper::GetChargeMaxTime()
 T CTFWeaponSapper::GetServerClass()
 T CTFWeaponSapper::GetViewModel(int) const
 T CTFWeaponSapper::GetWorldModel() const
 T CTFWeaponSapper::ItemPostFrame()
 T CTFWeaponSapper::TranslateViewmodelHandActivity(Activity)
 T CTFWeaponSapper::YouForgotToImplementOrDeclareServerClass()
 T CTFWeaponSapper::~CTFWeaponSapper()
 T CTFWearable::AddHiddenBodyGroup(char const*)
 T CTFWearable::Break()
 T CTFWearable::CTFWearable()
 T CTFWearable::CalculateVisibleClassFor(CBaseCombatCharacter*)
 T CTFWearable::CanEquip(CBaseEntity*)
 T CTFWearable::Equip(CBasePlayer*)
 T CTFWearable::GetDataDescMap()
 T CTFWearable::GetServerClass()
 T CTFWearable::GetSkin()
 T CTFWearable::InternalSetPlayerDisplayModel()
 T CTFWearable::ReapplyProvision()
 T CTFWearable::ShouldTransmit(CCheckTransmitInfo const*)
 T CTFWearable::UnEquip(CBasePlayer*)
 T CTFWearable::UpdateBodygroups(CBaseCombatCharacter*, int)
 T CTFWearable::UpdateTransmitState()
 T CTFWearable::YouForgotToImplementOrDeclareServerClass()
 T CTFWearable::~CTFWearable()
 T CTFWearableDemoShield::CalculateChargeDamage(float)
 T CTFWearableDemoShield::CanCharge(CTFPlayer*)
 T CTFWearableDemoShield::DoSpecialAction(CTFPlayer*)
 T CTFWearableDemoShield::EndSpecialAction(CTFPlayer*)
 T CTFWearableDemoShield::Equip(CBasePlayer*)
 T CTFWearableDemoShield::GetDataDescMap()
 T CTFWearableDemoShield::GetServerClass()
 T CTFWearableDemoShield::GetShieldDamageForce(float)
 T CTFWearableDemoShield::Precache()
 T CTFWearableDemoShield::ShieldBash(CTFPlayer*, float)
 T CTFWearableDemoShield::UnEquip(CBasePlayer*)
 T CTFWearableDemoShield::YouForgotToImplementOrDeclareServerClass()
 T CTFWearableDemoShield::~CTFWearableDemoShield()
 T CTFWearableLevelableItem::CTFWearableLevelableItem()
 T CTFWearableLevelableItem::GetDataDescMap()
 T CTFWearableLevelableItem::GetServerClass()
 T CTFWearableLevelableItem::IncrementLevel()
 T CTFWearableLevelableItem::ResetLevel()
 T CTFWearableLevelableItem::YouForgotToImplementOrDeclareServerClass()
 T CTFWearableLevelableItem::~CTFWearableLevelableItem()
 T CTFWearableRobotArm::GetServerClass()
 T CTFWearableRobotArm::YouForgotToImplementOrDeclareServerClass()
 T CTFWearableRobotArm::~CTFWearableRobotArm()
 T CTFWearableVM::GetServerClass()
 T CTFWearableVM::IsViewModelWearable()
 T CTFWearableVM::YouForgotToImplementOrDeclareServerClass()
 T CTFWearableVM::~CTFWearableVM()
 T CTFWorkshopMap::CTFWorkshopMap(unsigned long long)
 T CTFWorkshopMap::Downloaded(float*)
 T CTFWorkshopMap::GetLocalFile(CUtlString&)
 T CTFWorkshopMap::Refresh(CTFWorkshopMap::eRefreshType)
 T CTFWorkshopMap::Steam_OnQueryUGCDetails(SteamUGCQueryCompleted_t*, bool)
 T CTFWrench::ApplyBuildingHealthUpgrade()
 T CTFWrench::Detach()
 T CTFWrench::Equip(CBaseCombatCharacter*)
 T CTFWrench::GetConstructionValue()
 T CTFWrench::GetRepairValue()
 T CTFWrench::GetServerClass()
 T CTFWrench::GetWeaponID() const
 T CTFWrench::Holster(CBaseCombatWeapon*)
 T CTFWrench::OnFriendlyBuildingHit(CBaseObject*, CTFPlayer*, Vector)
 T CTFWrench::Smack()
 T CTFWrench::Spawn()
 T CTFWrench::YouForgotToImplementOrDeclareServerClass()
 T CTFWrench::~CTFWrench()
 T CTSList<CryptoPP::AutoSeededX917RNG<CryptoPP::Rijndael> >::Purge()
 T CTSList<CryptoPP::AutoSeededX917RNG<CryptoPP::Rijndael> >::~CTSList()
 T CTSListWithFreeList<CBaseHandle>::Purge()
 T CTSListWithFreeList<CBaseHandle>::PushItem(CBaseHandle const&)
 T CTSListWithFreeList<CBaseHandle>::~CTSListWithFreeList()
 T CTSListWithFreeList<CNavArea::AreaBindInfo>::PopItem(CNavArea::AreaBindInfo*)
 T CTSListWithFreeList<CNavArea::AreaBindInfo>::Purge()
 T CTSListWithFreeList<CNavArea::AreaBindInfo>::PushItem(CNavArea::AreaBindInfo const&)
 T CTSListWithFreeList<CNavArea::AreaBindInfo>::~CTSListWithFreeList()
 T CTSQueue<CFunctor*, false>::CTSQueue()
 T CTSQueue<CFunctor*, false>::Pop()
 T CTSQueue<CFunctor*, false>::Purge()
 T CTSQueue<CFunctor*, false>::Push(CTSQueue<CFunctor*, false>::Node_t*)
 T CTSQueue<CFunctor*, false>::~CTSQueue()
 T CTSQueue<GCSDK::CWorkItem*, false>::CTSQueue()
 T CTSQueue<GCSDK::CWorkItem*, false>::Pop()
 T CTSQueue<GCSDK::CWorkItem*, false>::PopItem(GCSDK::CWorkItem**)
 T CTSQueue<GCSDK::CWorkItem*, false>::Purge()
 T CTSQueue<GCSDK::CWorkItem*, false>::Push(CTSQueue<GCSDK::CWorkItem*, false>::Node_t*)
 T CTSQueue<GCSDK::CWorkItem*, false>::~CTSQueue()
 T CTacticalMissionManager::CTacticalMissionManager()
 T CTacticalMissionManager::FireGameEvent(IGameEvent*)
 T CTacticalMissionManager::ForEachMission(CTacticalMissionManager::IForEachMission&)
 T CTacticalMissionManager::GetMission(char const*)
 T CTacticalMissionManager::OnRoundRestart()
 T CTacticalMissionManager::OnServerActivate()
 T CTacticalMissionManager::Register(CTacticalMission*)
 T CTacticalMissionManager::Unregister(CTacticalMission*)
 T CTacticalMissionManager::~CTacticalMissionManager()
 T CTacticalMissionZone::ForEachArea(IForEachNavArea&) const
 T CTacticalMissionZone::SelectArea(CBasePlayer*) const
 T CTakeDamageInfo::AdjustPlayerDamageInflictedForSkillLevel()
 T CTakeDamageInfo::CTakeDamageInfo()
 T CTakeDamageInfo::CTakeDamageInfo(CBaseEntity*, CBaseEntity*, CBaseEntity*, Vector const&, Vector const&, float, int, int, Vector*)
 T CTakeDamageInfo::CTakeDamageInfo(CBaseEntity*, CBaseEntity*, CBaseEntity*, float, int, int)
 T CTakeDamageInfo::CTakeDamageInfo(CBaseEntity*, CBaseEntity*, Vector const&, Vector const&, float, int, int, Vector*)
 T CTakeDamageInfo::CTakeDamageInfo(CBaseEntity*, CBaseEntity*, float, int, int)
 T CTakeDamageInfo::DebugGetDamageTypeString(unsigned int, char*, int)
 T CTakeDamageInfo::Init(CBaseEntity*, CBaseEntity*, CBaseEntity*, Vector const&, Vector const&, Vector const&, float, int, int)
 T CTakeDamageInfo::Set(CBaseEntity*, CBaseEntity*, Vector const&, Vector const&, float, int, int, Vector*)
 T CTakeDamageInfo::SetCritType(CTakeDamageInfo::ECritType)
 T CTankSpawner::CTankSpawner(IPopulator*)
 T CTankSpawner::GetClassIcon(int)
 T CTankSpawner::GetHealth(int)
 T CTankSpawner::HasEventChangeAttributes(char const*) const
 T CTankSpawner::IsMiniBoss(int)
 T CTankSpawner::IsWhereRequired() const
 T CTankSpawner::Parse(KeyValues*)
 T CTankSpawner::Spawn(Vector const&, CUtlVector<CHandle<CBaseEntity>, CUtlMemory<CHandle<CBaseEntity>, int> >*)
 T CTankSpawner::~CTankSpawner()
 T CTankTargetChange::GetDataDescMap()
 T CTankTargetChange::Precache()
 T CTankTargetChange::Use(CBaseEntity*, CBaseEntity*, USE_TYPE, float)
 T CTankTargetChange::~CTankTargetChange()
 T CTankTrainAI::Activate()
 T CTankTrainAI::GetDataDescMap()
 T CTankTrainAI::InputTargetEntity(inputdata_t&)
 T CTankTrainAI::Precache()
 T CTankTrainAI::SoundEngineStart()
 T CTankTrainAI::Spawn()
 T CTankTrainAI::Think()
 T CTankTrainAI::~CTankTrainAI()
 T CTargetCDAudioRep::GetDataDescMap()
 T CTargetCDAudioRep::InputChangeCDTrack(inputdata_t&)
 T CTargetCDAudioRep::~CTargetCDAudioRep()
 T CTargetChangeGravity::GetDataDescMap()
 T CTargetChangeGravity::InputChangeGrav(inputdata_t&)
 T CTargetChangeGravity::InputResetGrav(inputdata_t&)
 T CTargetChangeGravity::~CTargetChangeGravity()
 T CTargetOnlyFilter::ShouldHitEntity(IHandleEntity*, int)
 T CTeam::AddPlayer(CBasePlayer*)
 T CTeam::AddScore(int)
 T CTeam::AddSpawnpoint(CTeamSpawnPoint*)
 T CTeam::CTeam()
 T CTeam::GetAliveMembers() const
 T CTeam::GetName() const
 T CTeam::GetNumPlayers() const
 T CTeam::GetPlayer(int) const
 T CTeam::GetRoundsWon() const
 T CTeam::GetScore() const
 T CTeam::GetServerClass()
 T CTeam::GetTeamNumber() const
 T CTeam::IncrementRoundsWon()
 T CTeam::Init(char const*, int)
 T CTeam::InitializePlayers()
 T CTeam::InitializeSpawnpoints()
 T CTeam::Precache()
 T CTeam::RemovePlayer(CBasePlayer*)
 T CTeam::RemoveSpawnpoint(CTeamSpawnPoint*)
 T CTeam::ResetScores()
 T CTeam::SetRoundsWon(int)
 T CTeam::SetScore(int)
 T CTeam::ShouldTransmitToPlayer(CBasePlayer*, CBaseEntity*) const
 T CTeam::SpawnPlayer(CBasePlayer*)
 T CTeam::Think()
 T CTeam::UpdateClientData(CBasePlayer*)
 T CTeam::UpdateTransmitState()
 T CTeam::YouForgotToImplementOrDeclareServerClass()
 T CTeam::~CTeam()
 T CTeamAutoBalanceIssue::CanCallVote(int, char const*, vote_create_failed_t&, int&)
 T CTeamAutoBalanceIssue::ExecuteCommand()
 T CTeamAutoBalanceIssue::GetDisplayString()
 T CTeamAutoBalanceIssue::GetQuorumRatio()
 T CTeamAutoBalanceIssue::GetTypeStringLocalized()
 T CTeamAutoBalanceIssue::GetVotePassedString()
 T CTeamAutoBalanceIssue::IsEnabled()
 T CTeamAutoBalanceIssue::ListIssueDetails(CBasePlayer*)
 T CTeamAutoBalanceIssue::~CTeamAutoBalanceIssue()
 T CTeamControlPoint::AnimThink()
 T CTeamControlPoint::CTeamControlPoint()
 T CTeamControlPoint::CaptureBlocked(CBaseMultiplayerPlayer*, CBaseMultiplayerPlayer*)
 T CTeamControlPoint::CaptureEnd()
 T CTeamControlPoint::CaptureInterrupted(bool)
 T CTeamControlPoint::CaptureStart(int, int, int*)
 T CTeamControlPoint::DrawDebugTextOverlays()
 T CTeamControlPoint::ForceOwner(int)
 T CTeamControlPoint::GetCPGroup()
 T CTeamControlPoint::GetControlPointMasterName()
 T CTeamControlPoint::GetDataDescMap()
 T CTeamControlPoint::GetDefaultOwner() const
 T CTeamControlPoint::GetHudIconIndexForTeam(int)
 T CTeamControlPoint::GetHudOverlayIndexForTeam(int)
 T CTeamControlPoint::GetOwner() const
 T CTeamControlPoint::GetPreviousPointForTeam(int, int)
 T CTeamControlPoint::GetTeamCapPercentage(int)
 T CTeamControlPoint::HandleScoring(int)
 T CTeamControlPoint::HasBeenContested() const
 T CTeamControlPoint::InputHideModel(inputdata_t&)
 T CTeamControlPoint::InputRoundActivate(inputdata_t&)
 T CTeamControlPoint::InputSetLocked(inputdata_t&)
 T CTeamControlPoint::InputSetOwner(inputdata_t&)
 T CTeamControlPoint::InputSetUnlockTime(inputdata_t&)
 T CTeamControlPoint::InputShowModel(inputdata_t&)
 T CTeamControlPoint::InternalSetLocked(bool)
 T CTeamControlPoint::InternalSetOwner(int, bool, int, int*)
 T CTeamControlPoint::KeyValue(char const*, char const*)
 T CTeamControlPoint::LastContestedAt()
 T CTeamControlPoint::PlayerBlocked(CBaseMultiplayerPlayer*)
 T CTeamControlPoint::PlayerCapped(CBaseMultiplayerPlayer*)
 T CTeamControlPoint::Precache()
 T CTeamControlPoint::SendCapString(int, int, int*)
 T CTeamControlPoint::SetActive(bool)
 T CTeamControlPoint::SetCappersRequiredForTeam(int, int)
 T CTeamControlPoint::SetLastContestedAt(float)
 T CTeamControlPoint::SetOwner(int, bool, int, int*)
 T CTeamControlPoint::Spawn()
 T CTeamControlPoint::StopLoopingSounds()
 T CTeamControlPoint::UnlockThink()
 T CTeamControlPoint::UpdateCapPercentage()
 T CTeamControlPoint::~CTeamControlPoint()
 T CTeamControlPointMaster* _CreateEntityTemplate<CTeamControlPointMaster>(CTeamControlPointMaster*, char const*)
 T CTeamControlPointMaster::Activate()
 T CTeamControlPointMaster::CPMThink()
 T CTeamControlPointMaster::CalcNumRoundsRemaining(int)
 T CTeamControlPointMaster::CheckWinConditions()
 T CTeamControlPointMaster::FindControlPointRounds()
 T CTeamControlPointMaster::FindControlPoints()
 T CTeamControlPointMaster::FireRoundEndOutput()
 T CTeamControlPointMaster::GetBaseControlPoint(int)
 T CTeamControlPointMaster::GetControlPointName()
 T CTeamControlPointMaster::GetControlPointRoundName()
 T CTeamControlPointMaster::GetControlPointRoundToPlay()
 T CTeamControlPointMaster::GetDataDescMap()
 T CTeamControlPointMaster::GetNumPointsOwnedByTeam(int)
 T CTeamControlPointMaster::GetPartialCapturePointRate()
 T CTeamControlPointMaster::GetRoundByIndex(int) const
 T CTeamControlPointMaster::InputDisable(inputdata_t&)
 T CTeamControlPointMaster::InputEnable(inputdata_t&)
 T CTeamControlPointMaster::InputRoundActivate(inputdata_t&)
 T CTeamControlPointMaster::InputRoundSpawn(inputdata_t&)
 T CTeamControlPointMaster::InputSetCapLayout(inputdata_t&)
 T CTeamControlPointMaster::InputSetCapLayoutCustomPositionX(inputdata_t&)
 T CTeamControlPointMaster::InputSetCapLayoutCustomPositionY(inputdata_t&)
 T CTeamControlPointMaster::InputSetWinner(inputdata_t&)
 T CTeamControlPointMaster::InputSetWinnerAndForceCaps(inputdata_t&)
 T CTeamControlPointMaster::InternalSetWinner(int)
 T CTeamControlPointMaster::IsBaseControlPoint(int)
 T CTeamControlPointMaster::IsInRound(CTeamControlPoint*)
 T CTeamControlPointMaster::KeyValue(char const*, char const*)
 T CTeamControlPointMaster::NumPlayableControlPointRounds()
 T CTeamControlPointMaster::PointLastContestedAt(int)
 T CTeamControlPointMaster::Precache()
 T CTeamControlPointMaster::RegisterRoundBeingPlayed()
 T CTeamControlPointMaster::SelectSpecificRound()
 T CTeamControlPointMaster::SetBaseControlPoints()
 T CTeamControlPointMaster::Spawn()
 T CTeamControlPointMaster::TeamOwnsAllPoints(CTeamControlPoint*, int)
 T CTeamControlPointMaster::UpdateOnRemove()
 T CTeamControlPointMaster::WouldNewCPOwnerWinGame(CTeamControlPoint*, int)
 T CTeamControlPointMaster::~CTeamControlPointMaster()
 T CTeamControlPointRound::Activate()
 T CTeamControlPointRound::CheckWinConditions()
 T CTeamControlPointRound::FindControlPoints()
 T CTeamControlPointRound::FireOnEndOutput()
 T CTeamControlPointRound::FireOnStartOutput()
 T CTeamControlPointRound::GetDataDescMap()
 T CTeamControlPointRound::GetPointOwnedBy(int)
 T CTeamControlPointRound::InputDisable(inputdata_t&)
 T CTeamControlPointRound::InputEnable(inputdata_t&)
 T CTeamControlPointRound::InputRoundSpawn(inputdata_t&)
 T CTeamControlPointRound::IsControlPointInRound(CTeamControlPoint*)
 T CTeamControlPointRound::IsPlayable()
 T CTeamControlPointRound::MakePlayable()
 T CTeamControlPointRound::SelectedToPlay()
 T CTeamControlPointRound::Spawn()
 T CTeamControlPointRound::TeamOwnsAllPoints(CTeamControlPoint*, int) const
 T CTeamControlPointRound::WouldNewCPOwnerWinGame(CTeamControlPoint*, int)
 T CTeamControlPointRound::~CTeamControlPointRound()
 T CTeamRecipientFilter::CTeamRecipientFilter(int, bool)
 T CTeamRecipientFilter::~CTeamRecipientFilter()
 T CTeamRoundTimer::Activate()
 T CTeamRoundTimer::AddTimerSeconds(int, int)
 T CTeamRoundTimer::CTeamRoundTimer()
 T CTeamRoundTimer::GetDataDescMap()
 T CTeamRoundTimer::GetServerClass()
 T CTeamRoundTimer::GetTimeRemaining()
 T CTeamRoundTimer::GetTimerMaxLength()
 T CTeamRoundTimer::InputAddTeamTime(inputdata_t&)
 T CTeamRoundTimer::InputAddTime(inputdata_t&)
 T CTeamRoundTimer::InputAutoCountdown(inputdata_t&)
 T CTeamRoundTimer::InputDisable(inputdata_t&)
 T CTeamRoundTimer::InputEnable(inputdata_t&)
 T CTeamRoundTimer::InputPause(inputdata_t&)
 T CTeamRoundTimer::InputRestart(inputdata_t&)
 T CTeamRoundTimer::InputResume(inputdata_t&)
 T CTeamRoundTimer::InputRoundSpawn(inputdata_t&)
 T CTeamRoundTimer::InputSetMaxTime(inputdata_t&)
 T CTeamRoundTimer::InputSetSetupTime(inputdata_t&)
 T CTeamRoundTimer::InputSetTime(inputdata_t&)
 T CTeamRoundTimer::InputShowInHUD(inputdata_t&)
 T CTeamRoundTimer::PauseTimer()
 T CTeamRoundTimer::Precache()
 T CTeamRoundTimer::ResumeTimer()
 T CTeamRoundTimer::RoundTimerSetupThink()
 T CTeamRoundTimer::RoundTimerThink()
 T CTeamRoundTimer::SetActiveTimer(CTeamRoundTimer*)
 T CTeamRoundTimer::SetAutoCountdown(bool)
 T CTeamRoundTimer::SetCaptureWatchState(bool)
 T CTeamRoundTimer::SetState(int, bool)
 T CTeamRoundTimer::SetStopWatchTimeStamp()
 T CTeamRoundTimer::SetTimeRemaining(int)
 T CTeamRoundTimer::ShowInHud()
 T CTeamRoundTimer::Spawn()
 T CTeamRoundTimer::StartPaused()
 T CTeamRoundTimer::UpdateTransmitState()
 T CTeamRoundTimer::YouForgotToImplementOrDeclareServerClass()
 T CTeamRoundTimer::~CTeamRoundTimer()
 T CTeamTrainWatcher::CTeamTrainWatcher()
 T CTeamTrainWatcher::FindGlowEntity()
 T CTeamTrainWatcher::FireGameEvent(IGameEvent*)
 T CTeamTrainWatcher::GetDataDescMap()
 T CTeamTrainWatcher::GetNextCheckpointPosition() const
 T CTeamTrainWatcher::GetServerClass()
 T CTeamTrainWatcher::GetTrainEntity()
 T CTeamTrainWatcher::HandleSparks(bool)
 T CTeamTrainWatcher::HandleTrainMovement(bool)
 T CTeamTrainWatcher::InputDisable(inputdata_t&)
 T CTeamTrainWatcher::InputEnable(inputdata_t&)
 T CTeamTrainWatcher::InputOnStartOvertime(inputdata_t&)
 T CTeamTrainWatcher::InputRoundActivate(inputdata_t&)
 T CTeamTrainWatcher::InputSetNumTrainCappers(inputdata_t&)
 T CTeamTrainWatcher::InputSetSpeedForwardModifier(inputdata_t&)
 T CTeamTrainWatcher::InputSetTrainCanRecede(inputdata_t&)
 T CTeamTrainWatcher::InputSetTrainRecedeTime(inputdata_t&)
 T CTeamTrainWatcher::InputSetTrainRecedeTimeAndUpdate(inputdata_t&)
 T CTeamTrainWatcher::InternalSetNumTrainCappers(int, CBaseEntity*)
 T CTeamTrainWatcher::IsTrainAtStart() const
 T CTeamTrainWatcher::IsTrainNearCheckpoint() const
 T CTeamTrainWatcher::ProjectPointOntoPath(Vector const&, Vector*, float*) const
 T CTeamTrainWatcher::SetNumTrainCappers(int, CBaseEntity*)
 T CTeamTrainWatcher::StartCaptureAlarm(CTeamControlPoint*)
 T CTeamTrainWatcher::TimerMayExpire()
 T CTeamTrainWatcher::UpdateOnRemove()
 T CTeamTrainWatcher::UpdateTransmitState()
 T CTeamTrainWatcher::WatcherActivate()
 T CTeamTrainWatcher::WatcherAlarmThink()
 T CTeamTrainWatcher::WatcherThink()
 T CTeamTrainWatcher::YouForgotToImplementOrDeclareServerClass()
 T CTeamTrainWatcher::~CTeamTrainWatcher()
 T CTeamplayRoundBasedRules::AddPlayedRound(string_t)
 T CTeamplayRoundBasedRules::AddTeamRespawnWaveTime(int, float)
 T CTeamplayRoundBasedRules::AllowWaitingForPlayers()
 T CTeamplayRoundBasedRules::AreTeamsUnbalanced(int&, int&)
 T CTeamplayRoundBasedRules::BHavePlayers()
 T CTeamplayRoundBasedRules::BalanceTeams(bool)
 T CTeamplayRoundBasedRules::BetweenRounds_End()
 T CTeamplayRoundBasedRules::BetweenRounds_Start()
 T CTeamplayRoundBasedRules::BetweenRounds_Think()
 T CTeamplayRoundBasedRules::BonusStateThink()
 T CTeamplayRoundBasedRules::BroadcastSound(int, char const*, int)
 T CTeamplayRoundBasedRules::CTeamplayRoundBasedRules()
 T CTeamplayRoundBasedRules::CanChangelevelBecauseOfTimeLimit()
 T CTeamplayRoundBasedRules::CanGoToStalemate()
 T CTeamplayRoundBasedRules::CheckChatForReadySignal(CBasePlayer*, char const*)
 T CTeamplayRoundBasedRules::CheckChatText(CBasePlayer*, char*)
 T CTeamplayRoundBasedRules::CheckMaxRounds(bool)
 T CTeamplayRoundBasedRules::CheckNextLevelCvar(bool)
 T CTeamplayRoundBasedRules::CheckReadyRestart()
 T CTeamplayRoundBasedRules::CheckRespawnWaves()
 T CTeamplayRoundBasedRules::CheckRestartRound()
 T CTeamplayRoundBasedRules::CheckTimeLimit(bool)
 T CTeamplayRoundBasedRules::CheckWaitingForPlayers()
 T CTeamplayRoundBasedRules::CheckWinLimit(bool)
 T CTeamplayRoundBasedRules::CleanUpMap()
 T CTeamplayRoundBasedRules::CreateTimeLimitTimer()
 T CTeamplayRoundBasedRules::FillOutTeamplayRoundWinEvent(IGameEvent*)
 T CTeamplayRoundBasedRules::FireGameEvent(IGameEvent*)
 T CTeamplayRoundBasedRules::GetActiveRoundTimer()
 T CTeamplayRoundBasedRules::GetBonusRoundTime(bool)
 T CTeamplayRoundBasedRules::GetLastMajorEventTime()
 T CTeamplayRoundBasedRules::GetLastPlayedRound()
 T CTeamplayRoundBasedRules::GetMinTimeWhenPlayerMaySpawn(CBasePlayer*)
 T CTeamplayRoundBasedRules::GetNextRespawnWave(int, CBasePlayer*)
 T CTeamplayRoundBasedRules::GetPostMatchPeriod()
 T CTeamplayRoundBasedRules::GetRespawnTimeScalar(int)
 T CTeamplayRoundBasedRules::GetRespawnWaveMaxLength(int, bool)
 T CTeamplayRoundBasedRules::GetStalemateSong(int)
 T CTeamplayRoundBasedRules::GetWinningTeam()
 T CTeamplayRoundBasedRules::GoToIntermission()
 T CTeamplayRoundBasedRules::HandleTeamScoreModify(int, int)
 T CTeamplayRoundBasedRules::HandleTimeLimitChange()
 T CTeamplayRoundBasedRules::HasPassedMinRespawnTime(CBasePlayer*)
 T CTeamplayRoundBasedRules::HaveCheatsBeenEnabledDuringLevel()
 T CTeamplayRoundBasedRules::HideActiveTimer()
 T CTeamplayRoundBasedRules::InRoundRestart()
 T CTeamplayRoundBasedRules::InitTeams()
 T CTeamplayRoundBasedRules::InternalHandleTeamWin(int)
 T CTeamplayRoundBasedRules::IsGameUnderTimeLimit()
 T CTeamplayRoundBasedRules::IsInArenaMode() const
 T CTeamplayRoundBasedRules::IsInHighlanderMode()
 T CTeamplayRoundBasedRules::IsInItemTestingMode()
 T CTeamplayRoundBasedRules::IsInKothMode() const
 T CTeamplayRoundBasedRules::IsInTournamentMode()
 T CTeamplayRoundBasedRules::IsInTraining()
 T CTeamplayRoundBasedRules::IsPreviouslyPlayedRound(string_t)
 T CTeamplayRoundBasedRules::IsValveMap()
 T CTeamplayRoundBasedRules::LevelInitPostEntity()
 T CTeamplayRoundBasedRules::LoseSongName(int)
 T CTeamplayRoundBasedRules::PlaySpecialCapSounds(int, CTeamControlPoint*)
 T CTeamplayRoundBasedRules::PlayStalemateSong()
 T CTeamplayRoundBasedRules::PlayStartRoundVoice()
 T CTeamplayRoundBasedRules::PlaySuddenDeathSong()
 T CTeamplayRoundBasedRules::PlayThrottledAlert(int, char const*, float)
 T CTeamplayRoundBasedRules::PlayTrainCaptureAlert(CTeamControlPoint*, bool)
 T CTeamplayRoundBasedRules::PlayWinSong(int)
 T CTeamplayRoundBasedRules::PointsMayBeCaptured()
 T CTeamplayRoundBasedRules::PreRound_End()
 T CTeamplayRoundBasedRules::PreRound_Start()
 T CTeamplayRoundBasedRules::PreviousRoundEnd()
 T CTeamplayRoundBasedRules::RecalculateControlPointState()
 T CTeamplayRoundBasedRules::ResetMapTime()
 T CTeamplayRoundBasedRules::ResetPlayerAndTeamReadyState()
 T CTeamplayRoundBasedRules::ResetScores()
 T CTeamplayRoundBasedRules::ResetTeamsRoundWinTracking()
 T CTeamplayRoundBasedRules::RespawnPlayers(bool, bool, int)
 T CTeamplayRoundBasedRules::RespawnTeam(int)
 T CTeamplayRoundBasedRules::RestartTournament()
 T CTeamplayRoundBasedRules::RestoreActiveTimer()
 T CTeamplayRoundBasedRules::RoundCleanupShouldIgnore(CBaseEntity*)
 T CTeamplayRoundBasedRules::RoundRespawn()
 T CTeamplayRoundBasedRules::SendTeamScoresEvent()
 T CTeamplayRoundBasedRules::SendWinPanelInfo(bool)
 T CTeamplayRoundBasedRules::SetInWaitingForPlayers(bool)
 T CTeamplayRoundBasedRules::SetLastCapPointChanged(int)
 T CTeamplayRoundBasedRules::SetOvertime(bool)
 T CTeamplayRoundBasedRules::SetRoundOverlayDetails()
 T CTeamplayRoundBasedRules::SetSetup(bool)
 T CTeamplayRoundBasedRules::SetStalemate(int, bool, bool)
 T CTeamplayRoundBasedRules::SetTeamRespawnWaveTime(int, float)
 T CTeamplayRoundBasedRules::SetWinningTeam(int, int, bool, bool, bool, bool)
 T CTeamplayRoundBasedRules::SetupOnBonusEnd()
 T CTeamplayRoundBasedRules::SetupOnBonusStart()
 T CTeamplayRoundBasedRules::SetupOnRoundRunning()
 T CTeamplayRoundBasedRules::SetupOnRoundStart()
 T CTeamplayRoundBasedRules::SetupOnStalemateEnd()
 T CTeamplayRoundBasedRules::SetupOnStalemateStart()
 T CTeamplayRoundBasedRules::SetupSpawnPointsForRound()
 T CTeamplayRoundBasedRules::ShouldBalanceTeams()
 T CTeamplayRoundBasedRules::ShouldCreateEntity(char const*)
 T CTeamplayRoundBasedRules::ShouldGoToBonusRound()
 T CTeamplayRoundBasedRules::ShouldRespawnQuickly(CBasePlayer*)
 T CTeamplayRoundBasedRules::ShouldScorePerRound()
 T CTeamplayRoundBasedRules::ShouldSkipAutoScramble()
 T CTeamplayRoundBasedRules::ShouldWaitToStartRecording()
 T CTeamplayRoundBasedRules::State_Enter(gamerules_roundstate_t)
 T CTeamplayRoundBasedRules::State_Enter_BETWEEN_RNDS()
 T CTeamplayRoundBasedRules::State_Enter_BONUS()
 T CTeamplayRoundBasedRules::State_Enter_INIT()
 T CTeamplayRoundBasedRules::State_Enter_PREGAME()
 T CTeamplayRoundBasedRules::State_Enter_PREROUND()
 T CTeamplayRoundBasedRules::State_Enter_RESTART()
 T CTeamplayRoundBasedRules::State_Enter_RND_RUNNING()
 T CTeamplayRoundBasedRules::State_Enter_STALEMATE()
 T CTeamplayRoundBasedRules::State_Enter_STARTGAME()
 T CTeamplayRoundBasedRules::State_Enter_TEAM_WIN()
 T CTeamplayRoundBasedRules::State_Leave_BETWEEN_RNDS()
 T CTeamplayRoundBasedRules::State_Leave_BONUS()
 T CTeamplayRoundBasedRules::State_Leave_PREROUND()
 T CTeamplayRoundBasedRules::State_Leave_STALEMATE()
 T CTeamplayRoundBasedRules::State_Think_BETWEEN_RNDS()
 T CTeamplayRoundBasedRules::State_Think_BONUS()
 T CTeamplayRoundBasedRules::State_Think_INIT()
 T CTeamplayRoundBasedRules::State_Think_PREGAME()
 T CTeamplayRoundBasedRules::State_Think_PREROUND()
 T CTeamplayRoundBasedRules::State_Think_RESTART()
 T CTeamplayRoundBasedRules::State_Think_RND_RUNNING()
 T CTeamplayRoundBasedRules::State_Think_STALEMATE()
 T CTeamplayRoundBasedRules::State_Think_STARTGAME()
 T CTeamplayRoundBasedRules::State_Think_TEAM_WIN()
 T CTeamplayRoundBasedRules::State_Transition(gamerules_roundstate_t)
 T CTeamplayRoundBasedRules::StopWatchModeThink()
 T CTeamplayRoundBasedRules::StopWatchShouldBeTimedWin()
 T CTeamplayRoundBasedRules::Think()
 T CTeamplayRoundBasedRules::TimerMayExpire()
 T CTeamplayRoundBasedRules::TournamentModeCanEndWithTimelimit()
 T CTeamplayRoundBasedRules::WinSongName(int)
 T CTeamplayRoundBasedRules::WouldChangeUnbalanceTeams(int, int)
 T CTeamplayRoundBasedRules::~CTeamplayRoundBasedRules()
 T CTeamplayRoundBasedRulesProxy::InputSetStalemateOnTimelimit(inputdata_t&)
 T CTeamplayRoundWin::GetDataDescMap()
 T CTeamplayRoundWin::InputRoundWin(inputdata_t&)
 T CTeamplayRoundWin::RoundWin()
 T CTeamplayRoundWin::~CTeamplayRoundWin()
 T CTeamplayRules::CTeamplayRules()
 T CTeamplayRules::ChangePlayerTeam(CBasePlayer*, char const*, bool, bool)
 T CTeamplayRules::ClientCommand(CBaseEntity*, CCommand const&)
 T CTeamplayRules::ClientDisconnected(edict_t*)
 T CTeamplayRules::ClientSettingsChanged(CBasePlayer*)
 T CTeamplayRules::DeathNotice(CBasePlayer*, CTakeDamageInfo const&)
 T CTeamplayRules::FPlayerCanTakeDamage(CBasePlayer*, CBaseEntity*, CTakeDamageInfo const&)
 T CTeamplayRules::GetCaptureValueForPlayer(CBasePlayer*)
 T CTeamplayRules::GetGameDescription()
 T CTeamplayRules::GetIndexedTeamName(int)
 T CTeamplayRules::GetTeamID(CBaseEntity*)
 T CTeamplayRules::GetTeamIndex(char const*)
 T CTeamplayRules::HandleScrambleTeams()
 T CTeamplayRules::HandleSwitchTeams()
 T CTeamplayRules::IPointsForKill(CBasePlayer*, CBasePlayer*)
 T CTeamplayRules::InitHUD(CBasePlayer*)
 T CTeamplayRules::IsTeamplay()
 T CTeamplayRules::IsValidTeam(char const*)
 T CTeamplayRules::PlayerCanHearChat(CBasePlayer*, CBasePlayer*)
 T CTeamplayRules::PlayerKilled(CBasePlayer*, CTakeDamageInfo const&)
 T CTeamplayRules::PlayerMayBlockPoint(CBasePlayer*, int, char*, int)
 T CTeamplayRules::PlayerMayCapturePoint(CBasePlayer*, int, char*, int)
 T CTeamplayRules::PlayerRelationship(CBaseEntity*, CBaseEntity*)
 T CTeamplayRules::PointsMayAlwaysBeBlocked()
 T CTeamplayRules::PointsMayBeCaptured()
 T CTeamplayRules::Precache()
 T CTeamplayRules::RecountTeams()
 T CTeamplayRules::SetDefaultPlayerTeam(CBasePlayer*)
 T CTeamplayRules::SetLastCapPointChanged(int)
 T CTeamplayRules::SetScrambleTeams(bool)
 T CTeamplayRules::SetStalemate(int, bool, bool)
 T CTeamplayRules::SetSwitchTeams(bool)
 T CTeamplayRules::SetWinningTeam(int, int, bool, bool, bool, bool)
 T CTeamplayRules::ShouldAutoAim(CBasePlayer*, edict_t*)
 T CTeamplayRules::ShouldScrambleTeams()
 T CTeamplayRules::ShouldSwitchTeams()
 T CTeamplayRules::TeamMayCapturePoint(int, int)
 T CTeamplayRules::Think()
 T CTeamplayRules::TimerMayExpire()
 T CTeamplayRules::~CTeamplayRules()
 T CTeleportVortex::GetDataDescMap()
 T CTeleportVortex::GetServerClass()
 T CTeleportVortex::KeyValue(char const*, char const*)
 T CTeleportVortex::Precache()
 T CTeleportVortex::SetupVortex(bool, bool)
 T CTeleportVortex::Spawn()
 T CTeleportVortex::StartTouch(CBaseEntity*)
 T CTeleportVortex::Touch(CBaseEntity*)
 T CTeleportVortex::UpdateTransmitState()
 T CTeleportVortex::VortexThink()
 T CTeleportVortex::YouForgotToImplementOrDeclareServerClass()
 T CTeleportVortex::~CTeleportVortex()
 T CTempEntTester::Create(Vector const&, QAngle const&, char const*, char const*)
 T CTempEntTester::Spawn()
 T CTempEntTester::Think()
 T CTempEntTester::~CTempEntTester()
 T CTempEntsSystem::ArmorRicochet(IRecipientFilter&, float, Vector const*, Vector const*)
 T CTempEntsSystem::BSPDecal(IRecipientFilter&, float, Vector const*, int, int)
 T CTempEntsSystem::BeamEntPoint(IRecipientFilter&, float, int, Vector const*, int, Vector const*, int, int, int, int, float, float, float, int, float, int, int, int, int, int)
 T CTempEntsSystem::BeamEnts(IRecipientFilter&, float, int, int, int, int, int, int, float, float, float, int, float, int, int, int, int, int)
 T CTempEntsSystem::BeamFollow(IRecipientFilter&, float, int, int, int, float, float, float, float, float, float, float, float)
 T CTempEntsSystem::BeamLaser(IRecipientFilter&, float, int, int, int, int, int, int, float, float, float, int, float, int, int, int, int, int)
 T CTempEntsSystem::BeamPoints(IRecipientFilter&, float, Vector const*, Vector const*, int, int, int, int, float, float, float, int, float, int, int, int, int, int)
 T CTempEntsSystem::BeamRing(IRecipientFilter&, float, int, int, int, int, int, int, float, float, int, float, int, int, int, int, int, int)
 T CTempEntsSystem::BeamRingPoint(IRecipientFilter&, float, Vector const&, float, float, int, int, int, int, float, float, int, float, int, int, int, int, int, int)
 T CTempEntsSystem::BeamSpline(IRecipientFilter&, float, int, Vector*)
 T CTempEntsSystem::BloodSprite(IRecipientFilter&, float, Vector const*, Vector const*, int, int, int, int, int)
 T CTempEntsSystem::BloodStream(IRecipientFilter&, float, Vector const*, Vector const*, int, int, int, int, int)
 T CTempEntsSystem::BreakModel(IRecipientFilter&, float, Vector const&, QAngle const&, Vector const&, Vector const&, int, int, int, float, int)
 T CTempEntsSystem::BubbleTrail(IRecipientFilter&, float, Vector const*, Vector const*, float, int, int, float)
 T CTempEntsSystem::Bubbles(IRecipientFilter&, float, Vector const*, Vector const*, float, int, int, float)
 T CTempEntsSystem::ClientProjectile(IRecipientFilter&, float, Vector const*, Vector const*, int, int, CBaseEntity*)
 T CTempEntsSystem::Decal(IRecipientFilter&, float, Vector const*, Vector const*, int, int, int)
 T CTempEntsSystem::DispatchEffect(IRecipientFilter&, float, Vector const&, char const*, CEffectData const&)
 T CTempEntsSystem::Dust(IRecipientFilter&, float, Vector const&, Vector const&, float, float)
 T CTempEntsSystem::DynamicLight(IRecipientFilter&, float, Vector const*, int, int, int, int, float, float, float)
 T CTempEntsSystem::EnergySplash(IRecipientFilter&, float, Vector const*, Vector const*, bool)
 T CTempEntsSystem::Explosion(IRecipientFilter&, float, Vector const*, int, float, int, int, int, int, Vector const*, unsigned char)
 T CTempEntsSystem::Fizz(IRecipientFilter&, float, CBaseEntity const*, int, int, int)
 T CTempEntsSystem::FootprintDecal(IRecipientFilter&, float, Vector const*, Vector const*, int, int, unsigned char)
 T CTempEntsSystem::GaussExplosion(IRecipientFilter&, float, Vector const&, Vector const&, int)
 T CTempEntsSystem::GlowSprite(IRecipientFilter&, float, Vector const*, int, float, float, int)
 T CTempEntsSystem::KillPlayerAttachments(IRecipientFilter&, float, int)
 T CTempEntsSystem::LargeFunnel(IRecipientFilter&, float, Vector const*, int, int)
 T CTempEntsSystem::MetalSparks(IRecipientFilter&, float, Vector const*, Vector const*)
 T CTempEntsSystem::MuzzleFlash(IRecipientFilter&, float, Vector const&, QAngle const&, float, int)
 T CTempEntsSystem::PhysicsProp(IRecipientFilter&, float, int, int, Vector const&, QAngle const&, Vector const&, int, int)
 T CTempEntsSystem::PlayerDecal(IRecipientFilter&, float, Vector const*, int, int)
 T CTempEntsSystem::ProjectDecal(IRecipientFilter&, float, Vector const*, QAngle const*, float, int)
 T CTempEntsSystem::ShatterSurface(IRecipientFilter&, float, Vector const*, QAngle const*, Vector const*, Vector const*, float, float, float, ShatterSurface_t, int, int, int, int, int, int)
 T CTempEntsSystem::ShowLine(IRecipientFilter&, float, Vector const*, Vector const*)
 T CTempEntsSystem::Smoke(IRecipientFilter&, float, Vector const*, int, float, int)
 T CTempEntsSystem::Sparks(IRecipientFilter&, float, Vector const*, int, int, Vector const*)
 T CTempEntsSystem::Sprite(IRecipientFilter&, float, Vector const*, int, float, int)
 T CTempEntsSystem::SpriteSpray(IRecipientFilter&, float, Vector const*, Vector const*, int, int, float, int)
 T CTempEntsSystem::TriggerTempEntity(KeyValues*)
 T CTempEntsSystem::WorldDecal(IRecipientFilter&, float, Vector const*, int)
 T CTempEntsSystem::~CTempEntsSystem()
 T CTemplateNPCMaker* _CreateEntityTemplate<CTemplateNPCMaker>(CTemplateNPCMaker*, char const*)
 T CTemplateNPCMaker::FindSpawnDestination()
 T CTemplateNPCMaker::GetDataDescMap()
 T CTemplateNPCMaker::InputChangeDestinationGroup(inputdata_t&)
 T CTemplateNPCMaker::InputSetMinimumSpawnDistance(inputdata_t&)
 T CTemplateNPCMaker::InputSpawnInLine(inputdata_t&)
 T CTemplateNPCMaker::InputSpawnInRadius(inputdata_t&)
 T CTemplateNPCMaker::InputSpawnMultiple(inputdata_t&)
 T CTemplateNPCMaker::MakeMultipleNPCS(int)
 T CTemplateNPCMaker::MakeNPC()
 T CTemplateNPCMaker::MakeNPCInLine()
 T CTemplateNPCMaker::MakeNPCInRadius()
 T CTemplateNPCMaker::PlaceNPCInLine(CAI_BaseNPC*)
 T CTemplateNPCMaker::Precache()
 T CTemplateNPCMaker::PrecacheTemplateEntity(CBaseEntity*)
 T CTemplateNPCMaker::~CTemplateNPCMaker()
 T CTemplate_SaveRestoreBlockHandler::GetBlockName()
 T CTemplate_SaveRestoreBlockHandler::ReadRestoreHeaders(IRestore*)
 T CTemplate_SaveRestoreBlockHandler::Restore(IRestore*, bool)
 T CTemplate_SaveRestoreBlockHandler::Save(ISave*)
 T CTemplate_SaveRestoreBlockHandler::WriteSaveHeaders(ISave*)
 T CTemplatesHook::LevelShutdownPostEntity()
 T CTemplatesHook::~CTemplatesHook()
 T CTesla::Activate()
 T CTesla::CTesla()
 T CTesla::DoSpark()
 T CTesla::GetDataDescMap()
 T CTesla::GetServerClass()
 T CTesla::InputDoSpark(inputdata_t&)
 T CTesla::InputTurnOff(inputdata_t&)
 T CTesla::InputTurnOn(inputdata_t&)
 T CTesla::Precache()
 T CTesla::ShootArcThink()
 T CTesla::Spawn()
 T CTesla::YouForgotToImplementOrDeclareServerClass()
 T CTesla::~CTesla()
 T CTestAreaAgainstThreats::Inspect(CKnownEntity const&)
 T CTestEffect::Precache()
 T CTestEffect::Spawn()
 T CTestEffect::Think()
 T CTestEffect::Use(CBaseEntity*, CBaseEntity*, USE_TYPE, float)
 T CTestEffect::~CTestEffect()
 T CTestTraceline::GetDataDescMap()
 T CTestTraceline::GetServerClass()
 T CTestTraceline::Spawn()
 T CTestTraceline::Spin()
 T CTestTraceline::UpdateTransmitState()
 T CTestTraceline::YouForgotToImplementOrDeclareServerClass()
 T CTestTraceline::~CTestTraceline()
 T CTest_ProxyToggle_Networkable::GetServerClass()
 T CTest_ProxyToggle_Networkable::UpdateTransmitState()
 T CTest_ProxyToggle_Networkable::YouForgotToImplementOrDeclareServerClass()
 T CTest_ProxyToggle_Networkable::~CTest_ProxyToggle_Networkable()
 T CTextStat::~CTextStat()
 T CTextStatsMgr::GetStatsFilename()
 T CTextStatsMgr::SetStatsFilename(char*)
 T CTextStatsMgr::WriteFile(IFileSystem*, char const*)
 T CTextureToggle::GetDataDescMap()
 T CTextureToggle::InputIncrementBrushTexIndex(inputdata_t&)
 T CTextureToggle::InputSetBrushTexIndex(inputdata_t&)
 T CTextureToggle::~CTextureToggle()
 T CThinkContextsSaveDataOps::IsEmpty(SaveRestoreFieldInfo_t const&)
 T CThinkContextsSaveDataOps::MakeEmpty(SaveRestoreFieldInfo_t const&)
 T CThinkContextsSaveDataOps::Restore(SaveRestoreFieldInfo_t const&, IRestore*)
 T CThinkContextsSaveDataOps::Save(SaveRestoreFieldInfo_t const&, ISave*)
 T CThinkSyncTester::EntityThinking(int, CBaseEntity*, float, int)
 T CThinkSyncTester::Report()
 T CThinkSyncTester::ThinkLessFunc(ThinkSync const&, ThinkSync const&)
 T CThinkSyncTester::~CThinkSyncTester()
 T CThreadLocalPtr<CCoroutineMgr>::~CThreadLocalPtr()
 T CThreadMutex::~CThreadMutex()
 T CThreadSafeMemoryPool::Alloc(unsigned int)
 T CThreadSafeMemoryPool::CThreadSafeMemoryPool(int, int, int)
 T CThreadSafeMemoryPool::ClearNoLock()
 T CThreadSafeMemoryPool::Free(void*, int)
 T CThreadSafeMemoryPool::~CThreadSafeMemoryPool()
 T CThreadSafeMultiMemoryPool::Alloc(unsigned int)
 T CThreadSafeMultiMemoryPool::CThreadSafeMultiMemoryPool(CThreadSafeMultiMemoryPool::MemPoolConfig_t const*, int, int)
 T CThreadSafeMultiMemoryPool::Free(void*)
 T CThreadSafeMultiMemoryPool::~CThreadSafeMultiMemoryPool()
 T CThrustController::Simulate(IPhysicsMotionController*, IPhysicsObject*, float, Vector&, Vector&)
 T CTimedEventMgr::CTimedEventMgr()
 T CTimedEventMgr::FireEvents()
 T CTimedEventMgr::~CTimedEventMgr()
 T CTimerEntity::DrawDebugTextOverlays()
 T CTimerEntity::FireTimer()
 T CTimerEntity::GetDataDescMap()
 T CTimerEntity::InputAddToTimer(inputdata_t&)
 T CTimerEntity::InputDisable(inputdata_t&)
 T CTimerEntity::InputEnable(inputdata_t&)
 T CTimerEntity::InputFireTimer(inputdata_t&)
 T CTimerEntity::InputRefireTime(inputdata_t&)
 T CTimerEntity::InputResetTimer(inputdata_t&)
 T CTimerEntity::InputSubtractFromTimer(inputdata_t&)
 T CTimerEntity::InputToggle(inputdata_t&)
 T CTimerEntity::Spawn()
 T CTimerEntity::Think()
 T CTimerEntity::~CTimerEntity()
 T CToolFrameworkServer::FrameUpdatePostEntityThink()
 T CToolFrameworkServer::FrameUpdatePreEntityThink()
 T CToolFrameworkServer::Init()
 T CToolFrameworkServer::LevelInitPostEntity()
 T CToolFrameworkServer::LevelInitPreEntity()
 T CToolFrameworkServer::LevelShutdownPostEntity()
 T CToolFrameworkServer::LevelShutdownPreEntity()
 T CToolFrameworkServer::PreClientUpdate()
 T CToolFrameworkServer::PreSetupVisibility()
 T CToolFrameworkServer::~CToolFrameworkServer()
 T CTraceFilter::GetTraceType() const
 T CTraceFilterAgainstEntityList::GetTraceType() const
 T CTraceFilterAgainstEntityList::ShouldHitEntity(IHandleEntity*, int)
 T CTraceFilterChain::CTraceFilterChain(ITraceFilter*, ITraceFilter*)
 T CTraceFilterChain::ShouldHitEntity(IHandleEntity*, int)
 T CTraceFilterCollisionArrows::ShouldHitEntity(IHandleEntity*, int)
 T CTraceFilterCollisionGrenades::ShouldHitEntity(IHandleEntity*, int)
 T CTraceFilterDeflection::ShouldHitEntity(IHandleEntity*, int)
 T CTraceFilterDoor::ShouldHitEntity(IHandleEntity*, int)
 T CTraceFilterEntitiesOnly::GetTraceType() const
 T CTraceFilterEntity::ShouldHitEntity(IHandleEntity*, int)
 T CTraceFilterEntityIgnoreOther::ShouldHitEntity(IHandleEntity*, int)
 T CTraceFilterGroundEntities::ShouldHitEntity(IHandleEntity*, int)
 T CTraceFilterIgnoreFriendlyCombatItems::ShouldHitEntity(IHandleEntity*, int)
 T CTraceFilterIgnoreObjects::ShouldHitEntity(IHandleEntity*, int)
 T CTraceFilterIgnorePlayers::ShouldHitEntity(IHandleEntity*, int)
 T CTraceFilterIgnoreTeammates::ShouldHitEntity(IHandleEntity*, int)
 T CTraceFilterIgnoreTeammatesAndTeamObjects::ShouldHitEntity(IHandleEntity*, int)
 T CTraceFilterLOS::CTraceFilterLOS(IHandleEntity*, int, IHandleEntity*)
 T CTraceFilterLOS::ShouldHitEntity(IHandleEntity*, int)
 T CTraceFilterMelee::ShouldHitEntity(IHandleEntity*, int)
 T CTraceFilterNav::CTraceFilterNav(CAI_BaseNPC*, bool, IServerEntity const*, int, bool)
 T CTraceFilterNav::ShouldHitEntity(IHandleEntity*, int)
 T CTraceFilterNoCombatCharacters::ShouldHitEntity(IHandleEntity*, int)
 T CTraceFilterNoNPCsOrPlayer::ShouldHitEntity(IHandleEntity*, int)
 T CTraceFilterObject::ShouldHitEntity(IHandleEntity*, int)
 T CTraceFilterOnlyNPCsAndPlayer::GetTraceType() const
 T CTraceFilterOnlyNPCsAndPlayer::ShouldHitEntity(IHandleEntity*, int)
 T CTraceFilterPlayersNPCs::GetTraceType() const
 T CTraceFilterPlayersNPCs::ShouldHitEntity(IHandleEntity*, int)
 T CTraceFilterPlayersNPCsPhysicsProps::GetTraceType() const
 T CTraceFilterPlayersNPCsPhysicsProps::ShouldHitEntity(IHandleEntity*, int)
 T CTraceFilterPushFinal::ShouldHitEntity(IHandleEntity*, int)
 T CTraceFilterPushMove::ShouldHitEntity(IHandleEntity*, int)
 T CTraceFilterSimple::CTraceFilterSimple(IHandleEntity const*, int, bool (*)(IHandleEntity*, int))
 T CTraceFilterSimple::SetCollisionGroup(int)
 T CTraceFilterSimple::SetPassEntity(IHandleEntity const*)
 T CTraceFilterSimple::ShouldHitEntity(IHandleEntity*, int)
 T CTraceFilterSimpleClassnameList::AddClassnameToIgnore(char const*)
 T CTraceFilterSimpleClassnameList::CTraceFilterSimpleClassnameList(IHandleEntity const*, int)
 T CTraceFilterSimpleClassnameList::ShouldHitEntity(IHandleEntity*, int)
 T CTraceFilterSimpleList::AddEntityToIgnore(IHandleEntity*)
 T CTraceFilterSimpleList::CTraceFilterSimpleList(int)
 T CTraceFilterSimpleList::ShouldHitEntity(IHandleEntity*, int)
 T CTraceFilterSkipClassname::CTraceFilterSkipClassname(IHandleEntity const*, char const*, int)
 T CTraceFilterSkipClassname::ShouldHitEntity(IHandleEntity*, int)
 T CTraceFilterSkipNPCs::ShouldHitEntity(IHandleEntity*, int)
 T CTraceFilterSkipTwoEntities::CTraceFilterSkipTwoEntities(IHandleEntity const*, IHandleEntity const*, int)
 T CTraceFilterSkipTwoEntities::SetPassEntity2(IHandleEntity const*)
 T CTraceFilterSkipTwoEntities::ShouldHitEntity(IHandleEntity*, int)
 T CTraceFilterWalkableEntities::ShouldHitEntity(IHandleEntity*, int)
 T CTraceListData::EnumElement(IHandleEntity*)
 T CTracePassFilter::ShouldHitEntity(IHandleEntity*, int)
 T CTrainingAnnotation::GetDataDescMap()
 T CTrainingAnnotation::InputHide(inputdata_t&)
 T CTrainingAnnotation::InputShow(inputdata_t&)
 T CTrainingAnnotation::Show()
 T CTrainingAnnotation::~CTrainingAnnotation()
 T CTrainingModeLogic::GetDataDescMap()
 T CTrainingModeLogic::GetDesiredClass() const
 T CTrainingModeLogic::InputEndTraining(inputdata_t&)
 T CTrainingModeLogic::InputForcePlayerSpawnAsClassOutput(inputdata_t&)
 T CTrainingModeLogic::InputForcePlayerSwapToWeapon(inputdata_t&)
 T CTrainingModeLogic::InputHideTrainingHUD(inputdata_t&)
 T CTrainingModeLogic::InputKickAllBots(inputdata_t&)
 T CTrainingModeLogic::InputPlaySoundOnPlayer(inputdata_t&)
 T CTrainingModeLogic::InputSetNextMap(inputdata_t&)
 T CTrainingModeLogic::InputShowTrainingHUD(inputdata_t&)
 T CTrainingModeLogic::InputShowTrainingMsg(inputdata_t&)
 T CTrainingModeLogic::InputShowTrainingObjective(inputdata_t&)
 T CTrainingModeLogic::InputWaitForTimerOrKeypress(inputdata_t&)
 T CTrainingModeLogic::OnPlayerBuiltBuilding(CTFPlayer*, CBaseObject*)
 T CTrainingModeLogic::OnPlayerDetonateBuilding(CTFPlayer*, CBaseObject*)
 T CTrainingModeLogic::OnPlayerSpawned(CTFPlayer*)
 T CTrainingModeLogic::OnPlayerSwitchedWeapons(CTFPlayer*)
 T CTrainingModeLogic::OnPlayerUpgradedBuilding(CTFPlayer*, CBaseObject*)
 T CTrainingModeLogic::SetTrainingMsg(char const*)
 T CTrainingModeLogic::SetTrainingObjective(char const*)
 T CTrainingModeLogic::~CTrainingModeLogic()
 T CTriggerAddOrRemoveTFPlayerAttributes::EndTouch(CBaseEntity*)
 T CTriggerAddOrRemoveTFPlayerAttributes::GetDataDescMap()
 T CTriggerAddOrRemoveTFPlayerAttributes::Spawn()
 T CTriggerAddOrRemoveTFPlayerAttributes::StartTouch(CBaseEntity*)
 T CTriggerAddOrRemoveTFPlayerAttributes::~CTriggerAddOrRemoveTFPlayerAttributes()
 T CTriggerAddTFPlayerCondition::EndTouch(CBaseEntity*)
 T CTriggerAddTFPlayerCondition::GetDataDescMap()
 T CTriggerAddTFPlayerCondition::Spawn()
 T CTriggerAddTFPlayerCondition::StartTouch(CBaseEntity*)
 T CTriggerAddTFPlayerCondition::~CTriggerAddTFPlayerCondition()
 T CTriggerApplyImpulse::GetDataDescMap()
 T CTriggerApplyImpulse::InputApplyImpulse(inputdata_t&)
 T CTriggerApplyImpulse::Spawn()
 T CTriggerApplyImpulse::~CTriggerApplyImpulse()
 T CTriggerAreaCapture::AreaTouch(CBaseEntity*)
 T CTriggerAreaCapture::BreakCapture(bool)
 T CTriggerAreaCapture::CTriggerAreaCapture()
 T CTriggerAreaCapture::CaptureModeScalesWithPlayers() const
 T CTriggerAreaCapture::CaptureThink()
 T CTriggerAreaCapture::CheckIfDeathCausesBlock(CBaseMultiplayerPlayer*, CBaseMultiplayerPlayer*)
 T CTriggerAreaCapture::DisplayCapHintTo(CBaseMultiplayerPlayer*)
 T CTriggerAreaCapture::EndCapture(int)
 T CTriggerAreaCapture::EndTouch(CBaseEntity*)
 T CTriggerAreaCapture::ForceOwner(int)
 T CTriggerAreaCapture::GetDataDescMap()
 T CTriggerAreaCapture::GetNumCappingPlayers(int, int&, int*)
 T CTriggerAreaCapture::InputCaptureCurrentCP(inputdata_t&)
 T CTriggerAreaCapture::InputRoundSpawn(inputdata_t&)
 T CTriggerAreaCapture::InputSetControlPoint(inputdata_t&)
 T CTriggerAreaCapture::InputSetTeamCanCap(inputdata_t&)
 T CTriggerAreaCapture::KeyValue(char const*, char const*)
 T CTriggerAreaCapture::OnEndCapture(int)
 T CTriggerAreaCapture::OnStartCapture(int)
 T CTriggerAreaCapture::Precache()
 T CTriggerAreaCapture::SetCapTimeRemaining(float)
 T CTriggerAreaCapture::SetNumCappers(int, bool)
 T CTriggerAreaCapture::SetOwner(int)
 T CTriggerAreaCapture::Spawn()
 T CTriggerAreaCapture::StartCapture(int, int)
 T CTriggerAreaCapture::StartTouch(CBaseEntity*)
 T CTriggerAreaCapture::UpdateBlocked()
 T CTriggerAreaCapture::UpdateNumPlayers(bool)
 T CTriggerAreaCapture::~CTriggerAreaCapture()
 T CTriggerAreaCaptureShim::Touch(CBaseEntity*)
 T CTriggerAreaCaptureShim::~CTriggerAreaCaptureShim()
 T CTriggerBotTag::GetDataDescMap()
 T CTriggerBotTag::Spawn()
 T CTriggerBotTag::Touch(CBaseEntity*)
 T CTriggerBotTag::~CTriggerBotTag()
 T CTriggerBrush::EndTouch(CBaseEntity*)
 T CTriggerBrush::GetDataDescMap()
 T CTriggerBrush::InputDisable(inputdata_t&)
 T CTriggerBrush::InputEnable(inputdata_t&)
 T CTriggerBrush::Spawn()
 T CTriggerBrush::StartTouch(CBaseEntity*)
 T CTriggerBrush::Use(CBaseEntity*, CBaseEntity*, USE_TYPE, float)
 T CTriggerBrush::~CTriggerBrush()
 T CTriggerCDAudio::Spawn()
 T CTriggerCDAudio::Touch(CBaseEntity*)
 T CTriggerCDAudio::Use(CBaseEntity*, CBaseEntity*, USE_TYPE, float)
 T CTriggerCDAudio::~CTriggerCDAudio()
 T CTriggerCamera::Disable()
 T CTriggerCamera::Enable()
 T CTriggerCamera::FollowTarget()
 T CTriggerCamera::GetDataDescMap()
 T CTriggerCamera::InputDisable(inputdata_t&)
 T CTriggerCamera::InputEnable(inputdata_t&)
 T CTriggerCamera::KeyValue(char const*, char const*)
 T CTriggerCamera::Move()
 T CTriggerCamera::Spawn()
 T CTriggerCamera::UpdateTransmitState()
 T CTriggerCamera::Use(CBaseEntity*, CBaseEntity*, USE_TYPE, float)
 T CTriggerCamera::~CTriggerCamera()
 T CTriggerCatapult::CalculateLaunchVector(CBaseEntity*, CBaseEntity*)
 T CTriggerCatapult::CalculateLaunchVectorPreserve(Vector, CBaseEntity*, CBaseEntity*, bool)
 T CTriggerCatapult::DrawDebugGeometryOverlays()
 T CTriggerCatapult::DrawDebugTextOverlays()
 T CTriggerCatapult::EndTouch(CBaseEntity*)
 T CTriggerCatapult::GetDataDescMap()
 T CTriggerCatapult::InputSetExactVelocityChoiceType(inputdata_t&)
 T CTriggerCatapult::InputSetLaunchTarget(inputdata_t&)
 T CTriggerCatapult::InputSetPhysicsSpeed(inputdata_t&)
 T CTriggerCatapult::InputSetPlayerSpeed(inputdata_t&)
 T CTriggerCatapult::LaunchByDirection(CBaseEntity*)
 T CTriggerCatapult::LaunchByTarget(CBaseEntity*, CBaseEntity*)
 T CTriggerCatapult::LaunchThink()
 T CTriggerCatapult::PlayerPassesTriggerFiltersThink()
 T CTriggerCatapult::Spawn()
 T CTriggerCatapult::StartTouch(CBaseEntity*)
 T CTriggerCatapult::~CTriggerCatapult()
 T CTriggerGravity::GetDataDescMap()
 T CTriggerGravity::GravityTouch(CBaseEntity*)
 T CTriggerGravity::Spawn()
 T CTriggerGravity::~CTriggerGravity()
 T CTriggerHurt::CTriggerHurt()
 T CTriggerHurt::EndTouch(CBaseEntity*)
 T CTriggerHurt::GetDataDescMap()
 T CTriggerHurt::HurtAllTouchers(float)
 T CTriggerHurt::HurtEntity(CBaseEntity*, float)
 T CTriggerHurt::HurtThink()
 T CTriggerHurt::RadiationThink()
 T CTriggerHurt::Spawn()
 T CTriggerHurt::Touch(CBaseEntity*)
 T CTriggerHurt::~CTriggerHurt()
 T CTriggerHurtShim::HurtThinkShim()
 T CTriggerHurtShim::RadiationThinkShim()
 T CTriggerHurtShim::~CTriggerHurtShim()
 T CTriggerIgnite::BurnEntities()
 T CTriggerIgnite::BurnThink()
 T CTriggerIgnite::GetDataDescMap()
 T CTriggerIgnite::IgniteEntity(CBaseEntity*)
 T CTriggerIgnite::Precache()
 T CTriggerIgnite::Spawn()
 T CTriggerIgnite::StartTouch(CBaseEntity*)
 T CTriggerIgnite::~CTriggerIgnite()
 T CTriggerIgniteArrows::GetDataDescMap()
 T CTriggerIgniteArrows::Spawn()
 T CTriggerIgniteArrows::Touch(CBaseEntity*)
 T CTriggerIgniteArrows::~CTriggerIgniteArrows()
 T CTriggerImpact::DrawDebugTextOverlays()
 T CTriggerImpact::GetDataDescMap()
 T CTriggerImpact::InputImpact(inputdata_t&)
 T CTriggerImpact::InputSetMagnitude(inputdata_t&)
 T CTriggerImpact::Spawn()
 T CTriggerImpact::StartTouch(CBaseEntity*)
 T CTriggerImpact::~CTriggerImpact()
 T CTriggerLook::DrawDebugTextOverlays()
 T CTriggerLook::EndTouch(CBaseEntity*)
 T CTriggerLook::GetDataDescMap()
 T CTriggerLook::Spawn()
 T CTriggerLook::StartTouch(CBaseEntity*)
 T CTriggerLook::TimeoutThink()
 T CTriggerLook::Touch(CBaseEntity*)
 T CTriggerLook::Trigger(CBaseEntity*, bool)
 T CTriggerLook::~CTriggerLook()
 T CTriggerMultiple::ActivateMultiTrigger(CBaseEntity*)
 T CTriggerMultiple::GetDataDescMap()
 T CTriggerMultiple::MultiTouch(CBaseEntity*)
 T CTriggerMultiple::MultiWaitOver()
 T CTriggerMultiple::Spawn()
 T CTriggerMultiple::~CTriggerMultiple()
 T CTriggerOnce::Spawn()
 T CTriggerOnce::~CTriggerOnce()
 T CTriggerParticle::GetDataDescMap()
 T CTriggerParticle::Precache()
 T CTriggerParticle::Spawn()
 T CTriggerParticle::StartTouch(CBaseEntity*)
 T CTriggerParticle::~CTriggerParticle()
 T CTriggerPasstimeBall::BTouching(CBaseEntity*)
 T CTriggerPasstimeBall::GetDataDescMap()
 T CTriggerPasstimeBall::Spawn()
 T CTriggerPasstimeBall::Update()
 T CTriggerPasstimeBall::~CTriggerPasstimeBall()
 T CTriggerPlayerMovement::EndTouch(CBaseEntity*)
 T CTriggerPlayerMovement::GetDataDescMap()
 T CTriggerPlayerMovement::Spawn()
 T CTriggerPlayerMovement::StartTouch(CBaseEntity*)
 T CTriggerPlayerMovement::~CTriggerPlayerMovement()
 T CTriggerPlayerRespawnOverride::GetDataDescMap()
 T CTriggerPlayerRespawnOverride::InputSetRespawnName(inputdata_t&)
 T CTriggerPlayerRespawnOverride::InputSetRespawnTime(inputdata_t&)
 T CTriggerPlayerRespawnOverride::~CTriggerPlayerRespawnOverride()
 T CTriggerProximity::Activate()
 T CTriggerProximity::EndTouch(CBaseEntity*)
 T CTriggerProximity::GetDataDescMap()
 T CTriggerProximity::MeasureThink()
 T CTriggerProximity::Spawn()
 T CTriggerProximity::StartTouch(CBaseEntity*)
 T CTriggerProximity::~CTriggerProximity()
 T CTriggerPush::Activate()
 T CTriggerPush::GetDataDescMap()
 T CTriggerPush::Spawn()
 T CTriggerPush::Touch(CBaseEntity*)
 T CTriggerPush::~CTriggerPush()
 T CTriggerRemove::GetDataDescMap()
 T CTriggerRemove::Spawn()
 T CTriggerRemove::Touch(CBaseEntity*)
 T CTriggerRemove::~CTriggerRemove()
 T CTriggerRemoveTFPlayerCondition::GetDataDescMap()
 T CTriggerRemoveTFPlayerCondition::Spawn()
 T CTriggerRemoveTFPlayerCondition::StartTouch(CBaseEntity*)
 T CTriggerRemoveTFPlayerCondition::~CTriggerRemoveTFPlayerCondition()
 T CTriggerSave::GetDataDescMap()
 T CTriggerSave::Spawn()
 T CTriggerSave::Touch(CBaseEntity*)
 T CTriggerSave::~CTriggerSave()
 T CTriggerSoundscape::Activate()
 T CTriggerSoundscape::EndTouch(CBaseEntity*)
 T CTriggerSoundscape::GetDataDescMap()
 T CTriggerSoundscape::PlayerUpdateThink()
 T CTriggerSoundscape::Spawn()
 T CTriggerSoundscape::StartTouch(CBaseEntity*)
 T CTriggerSoundscape::~CTriggerSoundscape()
 T CTriggerStun::EndTouch(CBaseEntity*)
 T CTriggerStun::GetDataDescMap()
 T CTriggerStun::Spawn()
 T CTriggerStun::StunEntity(CBaseEntity*)
 T CTriggerStun::StunThink()
 T CTriggerStun::Touch(CBaseEntity*)
 T CTriggerStun::~CTriggerStun()
 T CTriggerTeleport::GetDataDescMap()
 T CTriggerTeleport::Spawn()
 T CTriggerTeleport::Touch(CBaseEntity*)
 T CTriggerTeleport::~CTriggerTeleport()
 T CTriggerTeleportRelative::GetDataDescMap()
 T CTriggerTeleportRelative::Spawn()
 T CTriggerTeleportRelative::Touch(CBaseEntity*)
 T CTriggerTeleportRelative::~CTriggerTeleportRelative()
 T CTriggerTimerDoor::CaptureModeScalesWithPlayers() const
 T CTriggerTimerDoor::GetDataDescMap()
 T CTriggerTimerDoor::OnEndCapture(int)
 T CTriggerTimerDoor::OnStartCapture(int)
 T CTriggerTimerDoor::Spawn()
 T CTriggerTimerDoor::StartTouch(CBaseEntity*)
 T CTriggerTimerDoor::~CTriggerTimerDoor()
 T CTriggerToggleSave::GetDataDescMap()
 T CTriggerToggleSave::InputDisable(inputdata_t&)
 T CTriggerToggleSave::InputEnable(inputdata_t&)
 T CTriggerToggleSave::Spawn()
 T CTriggerToggleSave::Touch(CBaseEntity*)
 T CTriggerToggleSave::~CTriggerToggleSave()
 T CTriggerTraceEnum::EnumEntity(IHandleEntity*)
 T CTriggerVPhysicsMotion* _CreateEntityTemplate<CTriggerVPhysicsMotion>(CTriggerVPhysicsMotion*, char const*)
 T CTriggerVPhysicsMotion::CreateVPhysics()
 T CTriggerVPhysicsMotion::EndTouch(CBaseEntity*)
 T CTriggerVPhysicsMotion::GetDataDescMap()
 T CTriggerVPhysicsMotion::InputSetVelocityLimitTime(inputdata_t&)
 T CTriggerVPhysicsMotion::OnRestore()
 T CTriggerVPhysicsMotion::Precache()
 T CTriggerVPhysicsMotion::Simulate(IPhysicsMotionController*, IPhysicsObject*, float, Vector&, Vector&)
 T CTriggerVPhysicsMotion::Spawn()
 T CTriggerVPhysicsMotion::StartTouch(CBaseEntity*)
 T CTriggerVPhysicsMotion::UpdateOnRemove()
 T CTriggerVPhysicsMotion::~CTriggerVPhysicsMotion()
 T CTriggerVolume::Spawn()
 T CTriggerVolume::~CTriggerVolume()
 T CTriggerWind::CreateVPhysics()
 T CTriggerWind::DrawDebugTextOverlays()
 T CTriggerWind::EndTouch(CBaseEntity*)
 T CTriggerWind::GetDataDescMap()
 T CTriggerWind::InputSetSpeed(inputdata_t&)
 T CTriggerWind::KeyValue(char const*, char const*)
 T CTriggerWind::OnRestore()
 T CTriggerWind::Spawn()
 T CTriggerWind::StartTouch(CBaseEntity*)
 T CTriggerWind::UpdateOnRemove()
 T CTriggerWind::WindThink()
 T CTriggerWind::~CTriggerWind()
 T CUpgrades::ApplyUpgradeToItem(CTFPlayer*, CEconItemView*, int, int, bool, bool)
 T CUpgrades::EndTouch(CBaseEntity*)
 T CUpgrades::FireGameEvent(IGameEvent*)
 T CUpgrades::GetDataDescMap()
 T CUpgrades::GetUpgradeAttributeName(int) const
 T CUpgrades::GrantOrRemoveAllUpgrades(CTFPlayer*, bool, bool)
 T CUpgrades::InputDisable(inputdata_t&)
 T CUpgrades::InputEnable(inputdata_t&)
 T CUpgrades::NotifyItemOnUpgrade(CTFPlayer*, unsigned short, bool)
 T CUpgrades::PlayerPurchasingUpgrade(CTFPlayer*, int, int, bool, bool, bool)
 T CUpgrades::ReportUpgrade(CTFPlayer*, int, int, int, int, bool, bool, bool)
 T CUpgrades::Spawn()
 T CUpgrades::UpgradeTouch(CBaseEntity*)
 T CUpgrades::~CUpgrades()
 T CUsePushFilter::ShouldHitEntity(IHandleEntity*, int)
 T CUsefulHealTargetFilter::IsAllowed(CBaseEntity*) const
 T CUserCmd::~CUserCmd()
 T CUserMessages::GetUserMessageName(int)
 T CUserMessages::GetUserMessageSize(int)
 T CUserMessages::IsValidIndex(int)
 T CUserMessages::LookupUserMessage(char const*)
 T CUserMessages::Register(char const*, int)
 T CUserMessages::~CUserMessages()
 T CUtlBinaryBlock::CUtlBinaryBlock(CUtlBinaryBlock const&)
 T CUtlBinaryBlock::CUtlBinaryBlock(int, int)
 T CUtlBinaryBlock::SetLength(int)
 T CUtlBuffer::AddNullTermination()
 T CUtlBuffer::AssumeMemory(void*, int, int, int)
 T CUtlBuffer::CUtlBuffer(int, int, int)
 T CUtlBuffer::CUtlBuffer(void const*, int, int)
 T CUtlBuffer::CheckArbitraryPeekGet(int, int&)
 T CUtlBuffer::CheckGet(int)
 T CUtlBuffer::CheckPut(int)
 T CUtlBuffer::EatCPPComment()
 T CUtlBuffer::EatWhiteSpace()
 T CUtlBuffer::EnsureCapacity(int)
 T CUtlBuffer::Get(void*, int)
 T CUtlBuffer::GetDelimitedCharInternal(CUtlCharConversion*)
 T CUtlBuffer::GetDelimitedString(CUtlCharConversion*, char*, int)
 T CUtlBuffer::GetLine(char*, int)
 T CUtlBuffer::GetOverflow(int)
 T CUtlBuffer::GetStringInternal(char*, unsigned long)
 T CUtlBuffer::GetToken(char const*)
 T CUtlBuffer::ParseToken(char const*, char const*, char*, int)
 T CUtlBuffer::ParseToken(characterset_t*, char*, int, bool)
 T CUtlBuffer::PeekDelimitedStringLength(CUtlCharConversion*, bool)
 T CUtlBuffer::PeekGet(int, int)
 T CUtlBuffer::PeekLineLength()
 T CUtlBuffer::PeekStringLength()
 T CUtlBuffer::PeekStringMatch(int, char const*, int)
 T CUtlBuffer::PeekWhiteSpace(int)
 T CUtlBuffer::Printf(char const*, ...)
 T CUtlBuffer::Put(void const*, int)
 T CUtlBuffer::PutOverflow(int)
 T CUtlBuffer::PutString(char const*)
 T CUtlBuffer::Scanf(char const*, ...)
 T CUtlBuffer::SeekGet(CUtlBuffer::SeekType_t, int)
 T CUtlBuffer::SeekPut(CUtlBuffer::SeekType_t, int)
 T CUtlBuffer::SetBufferType(bool, bool)
 T CUtlBuffer::SetExternalBuffer(void*, int, int, int)
 T CUtlBuffer::VaScanf(char const*, char*)
 T CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*)
 T CUtlCStringConversion::FindConversion(char const*, int*)
 T CUtlCachedFileData<CModelSoundsCache>::CheckDiskInfo(bool, long)
 T CUtlCachedFileData<CModelSoundsCache>::FileNameHandleLessFunc(CUtlCachedFileData<CModelSoundsCache>::ElementType_t const&, CUtlCachedFileData<CModelSoundsCache>::ElementType_t const&)
 T CUtlCachedFileData<CModelSoundsCache>::Get(char const*)
 T CUtlCachedFileData<CModelSoundsCache>::GetIndex(char const*)
 T CUtlCachedFileData<CModelSoundsCache>::Init()
 T CUtlCachedFileData<CModelSoundsCache>::InitLargeBuffer(void*&, bool&)
 T CUtlCachedFileData<CModelSoundsCache>::InitSmallBuffer(void*&, int, bool&)
 T CUtlCachedFileData<CModelSoundsCache>::Save()
 T CUtlCachedFileData<CModelSoundsCache>::SaveManifest()
 T CUtlCachedFileData<CModelSoundsCache>::Shutdown()
 T CUtlCachedFileData<CModelSoundsCache>::~CUtlCachedFileData()
 T CUtlCharConversion::FindConversion(char const*, int*)
 T CUtlDict<AchievementAward_t*, int>::~CUtlDict()
 T CUtlDict<CActivityRemapCache, int>::~CUtlDict()
 T CUtlDict<CDecalEmitterSystem::DecalEntry, int>::~CUtlDict()
 T CUtlDict<CNavArea*, int>::~CUtlDict()
 T CUtlDict<CResponseSystem::Enumeration, short>::~CUtlDict()
 T CUtlDict<CUserMessage*, int>::~CUtlDict()
 T CUtlDict<CUtlConstStringBase<char>, int>::~CUtlDict()
 T CUtlDict<CUtlVector<CItemLevelingDefinition, CUtlMemory<CItemLevelingDefinition, int> >*, int>::PurgeAndDeleteElements()
 T CUtlDict<CUtlVector<CItemLevelingDefinition, CUtlMemory<CItemLevelingDefinition, int> >*, int>::~CUtlDict()
 T CUtlDict<CUtlVector<schema_string_table_entry_t, CUtlMemory<schema_string_table_entry_t, int> >*, int>::PurgeAndDeleteElements()
 T CUtlDict<CUtlVector<schema_string_table_entry_t, CUtlMemory<schema_string_table_entry_t, int> >*, int>::~CUtlDict()
 T CUtlDict<ConceptHistory_t, int>::~CUtlDict()
 T CUtlDict<Criteria, short>::~CUtlDict()
 T CUtlDict<EEquipType_t, int>::~CUtlDict()
 T CUtlDict<EventGroup, int>::~CUtlDict()
 T CUtlDict<FilePlayerClassInfo_t*, unsigned short>::PurgeAndDeleteElements()
 T CUtlDict<FilePlayerClassInfo_t*, unsigned short>::~CUtlDict()
 T CUtlDict<FileWeaponInfo_t*, unsigned short>::~CUtlDict()
 T CUtlDict<ResponseGroup, short>::~CUtlDict()
 T CUtlDict<Rule, short>::~CUtlDict()
 T CUtlDict<TF_Gamestats_LevelStats_t, unsigned short>::~CUtlDict()
 T CUtlDict<bool, int>::~CUtlDict()
 T CUtlDict<float, int>::~CUtlDict()
 T CUtlDict<int, int>::~CUtlDict()
 T CUtlFixedLinkedList<CInfoCameraLink*>::~CUtlFixedLinkedList()
 T CUtlHash<CEntityDataInstantiator<CWatcherList>::HashEntry, bool (*)(CEntityDataInstantiator<CWatcherList>::HashEntry const&, CEntityDataInstantiator<CWatcherList>::HashEntry const&), unsigned int (*)(CEntityDataInstantiator<CWatcherList>::HashEntry const&)>::Insert(CEntityDataInstantiator<CWatcherList>::HashEntry const&)
 T CUtlHash<CEntityDataInstantiator<CWatcherList>::HashEntry, bool (*)(CEntityDataInstantiator<CWatcherList>::HashEntry const&, CEntityDataInstantiator<CWatcherList>::HashEntry const&), unsigned int (*)(CEntityDataInstantiator<CWatcherList>::HashEntry const&)>::~CUtlHash()
 T CUtlHash<CEntityDataInstantiator<ModelScale>::HashEntry, bool (*)(CEntityDataInstantiator<ModelScale>::HashEntry const&, CEntityDataInstantiator<ModelScale>::HashEntry const&), unsigned int (*)(CEntityDataInstantiator<ModelScale>::HashEntry const&)>::Insert(CEntityDataInstantiator<ModelScale>::HashEntry const&)
 T CUtlHash<CEntityDataInstantiator<ModelScale>::HashEntry, bool (*)(CEntityDataInstantiator<ModelScale>::HashEntry const&, CEntityDataInstantiator<ModelScale>::HashEntry const&), unsigned int (*)(CEntityDataInstantiator<ModelScale>::HashEntry const&)>::~CUtlHash()
 T CUtlHash<CEntityDataInstantiator<StepSimulationData>::HashEntry, bool (*)(CEntityDataInstantiator<StepSimulationData>::HashEntry const&, CEntityDataInstantiator<StepSimulationData>::HashEntry const&), unsigned int (*)(CEntityDataInstantiator<StepSimulationData>::HashEntry const&)>::Insert(CEntityDataInstantiator<StepSimulationData>::HashEntry const&)
 T CUtlHash<CEntityDataInstantiator<StepSimulationData>::HashEntry, bool (*)(CEntityDataInstantiator<StepSimulationData>::HashEntry const&, CEntityDataInstantiator<StepSimulationData>::HashEntry const&), unsigned int (*)(CEntityDataInstantiator<StepSimulationData>::HashEntry const&)>::~CUtlHash()
 T CUtlHash<CEntityDataInstantiator<groundlink_t>::HashEntry, bool (*)(CEntityDataInstantiator<groundlink_t>::HashEntry const&, CEntityDataInstantiator<groundlink_t>::HashEntry const&), unsigned int (*)(CEntityDataInstantiator<groundlink_t>::HashEntry const&)>::Insert(CEntityDataInstantiator<groundlink_t>::HashEntry const&)
 T CUtlHash<CEntityDataInstantiator<groundlink_t>::HashEntry, bool (*)(CEntityDataInstantiator<groundlink_t>::HashEntry const&, CEntityDataInstantiator<groundlink_t>::HashEntry const&), unsigned int (*)(CEntityDataInstantiator<groundlink_t>::HashEntry const&)>::~CUtlHash()
 T CUtlHash<CEntityDataInstantiator<physicspushlist_t>::HashEntry, bool (*)(CEntityDataInstantiator<physicspushlist_t>::HashEntry const&, CEntityDataInstantiator<physicspushlist_t>::HashEntry const&), unsigned int (*)(CEntityDataInstantiator<physicspushlist_t>::HashEntry const&)>::Insert(CEntityDataInstantiator<physicspushlist_t>::HashEntry const&)
 T CUtlHash<CEntityDataInstantiator<physicspushlist_t>::HashEntry, bool (*)(CEntityDataInstantiator<physicspushlist_t>::HashEntry const&, CEntityDataInstantiator<physicspushlist_t>::HashEntry const&), unsigned int (*)(CEntityDataInstantiator<physicspushlist_t>::HashEntry const&)>::~CUtlHash()
 T CUtlHash<CEntityDataInstantiator<touchlink_t>::HashEntry, bool (*)(CEntityDataInstantiator<touchlink_t>::HashEntry const&, CEntityDataInstantiator<touchlink_t>::HashEntry const&), unsigned int (*)(CEntityDataInstantiator<touchlink_t>::HashEntry const&)>::Insert(CEntityDataInstantiator<touchlink_t>::HashEntry const&)
 T CUtlHash<CEntityDataInstantiator<touchlink_t>::HashEntry, bool (*)(CEntityDataInstantiator<touchlink_t>::HashEntry const&, CEntityDataInstantiator<touchlink_t>::HashEntry const&), unsigned int (*)(CEntityDataInstantiator<touchlink_t>::HashEntry const&)>::~CUtlHash()
 T CUtlHash<CEntityDataInstantiator<vphysicsupdateai_t>::HashEntry, bool (*)(CEntityDataInstantiator<vphysicsupdateai_t>::HashEntry const&, CEntityDataInstantiator<vphysicsupdateai_t>::HashEntry const&), unsigned int (*)(CEntityDataInstantiator<vphysicsupdateai_t>::HashEntry const&)>::Insert(CEntityDataInstantiator<vphysicsupdateai_t>::HashEntry const&)
 T CUtlHash<CEntityDataInstantiator<vphysicsupdateai_t>::HashEntry, bool (*)(CEntityDataInstantiator<vphysicsupdateai_t>::HashEntry const&, CEntityDataInstantiator<vphysicsupdateai_t>::HashEntry const&), unsigned int (*)(CEntityDataInstantiator<vphysicsupdateai_t>::HashEntry const&)>::~CUtlHash()
 T CUtlHash<CGameSaveRestoreInfo::CHashElement, CGameSaveRestoreInfo::CHashFuncs, CGameSaveRestoreInfo::CHashFuncs>::Insert(CGameSaveRestoreInfo::CHashElement const&)
 T CUtlHash<CNavNode*, CNodeHashFuncs, CNodeHashFuncs>::Insert(CNavNode* const&, bool*)
 T CUtlHash<CNavNode*, CNodeHashFuncs, CNodeHashFuncs>::~CUtlHash()
 T CUtlHash<CStudioHdr::CActivityToSequenceMapping::HashValueType, CStudioHdr::CActivityToSequenceMapping::HashValueType::HashFuncs, CStudioHdr::CActivityToSequenceMapping::HashValueType::HashFuncs>::Insert(CStudioHdr::CActivityToSequenceMapping::HashValueType const&)
 T CUtlHash<CStudioHdr::CActivityToSequenceMapping::HashValueType, CStudioHdr::CActivityToSequenceMapping::HashValueType::HashFuncs, CStudioHdr::CActivityToSequenceMapping::HashValueType::HashFuncs>::~CUtlHash()
 T CUtlHash<NavVisPair_t, CVisPairHashFuncs, CVisPairHashFuncs>::Insert(NavVisPair_t const&)
 T CUtlHashMapLarge<int, CEconItemDefinition*, CDefEquals<int>, MurmurHash3Functor<int> >::EnsureCapacity(int)
 T CUtlHashMapLarge<int, CEconItemDefinition*, CDefEquals<int>, MurmurHash3Functor<int> >::Find(int const&) const
 T CUtlHashMapLarge<int, CEconItemDefinition*, CDefEquals<int>, MurmurHash3Functor<int> >::IncrementalRehash()
 T CUtlHashMapLarge<int, CEconItemDefinition*, CDefEquals<int>, MurmurHash3Functor<int> >::InsertInternal(int const&, CEconItemDefinition* const&, CUtlHashMapLarge<int, CEconItemDefinition*, CDefEquals<int>, MurmurHash3Functor<int> >::EInsertPolicy)
 T CUtlHashMapLarge<int, CEconItemDefinition*, CDefEquals<int>, MurmurHash3Functor<int> >::PurgeAndDeleteElements()
 T CUtlHashMapLarge<int, CEconItemDefinition*, CDefEquals<int>, MurmurHash3Functor<int> >::RehashNodesInBucket(int)
 T CUtlHashMapLarge<int, CEconItemDefinition*, CDefEquals<int>, MurmurHash3Functor<int> >::RemoveAt(int)
 T CUtlHashMapLarge<int, CEconItemDefinition*, CDefEquals<int>, MurmurHash3Functor<int> >::~CUtlHashMapLarge()
 T CUtlHashtable<CBaseEntityModelLoadProxy, empty_t, PointerHashFunctor, PointerEqualFunctor, CBaseEntity*>::BumpEntry(unsigned int)
 T CUtlHashtable<CBaseEntityModelLoadProxy, empty_t, PointerHashFunctor, PointerEqualFunctor, CBaseEntity*>::DoInsertUnconstructed(unsigned int, bool)
 T CUtlHashtable<CBaseEntityModelLoadProxy, empty_t, PointerHashFunctor, PointerEqualFunctor, CBaseEntity*>::DoRealloc(int)
 T CUtlHashtable<CBaseEntityModelLoadProxy, empty_t, PointerHashFunctor, PointerEqualFunctor, CBaseEntity*>::RemoveAll()
 T CUtlHashtable<CBaseEntityModelLoadProxy, empty_t, PointerHashFunctor, PointerEqualFunctor, CBaseEntity*>::~CUtlHashtable()
 T CUtlHashtable<CUtlConstStringBase<char>, empty_t, DefaultHashFunctor<CUtlConstStringBase<char> >, DefaultEqualFunctor<CUtlConstStringBase<char> >, char const*>::BumpEntry(unsigned int)
 T CUtlHashtable<CUtlConstStringBase<char>, empty_t, DefaultHashFunctor<CUtlConstStringBase<char> >, DefaultEqualFunctor<CUtlConstStringBase<char> >, char const*>::DoInsertUnconstructed(unsigned int, bool)
 T CUtlHashtable<CUtlConstStringBase<char>, empty_t, DefaultHashFunctor<CUtlConstStringBase<char> >, DefaultEqualFunctor<CUtlConstStringBase<char> >, char const*>::DoRealloc(int)
 T CUtlHashtable<CUtlConstStringBase<char>, empty_t, DefaultHashFunctor<CUtlConstStringBase<char> >, DefaultEqualFunctor<CUtlConstStringBase<char> >, char const*>::Purge()
 T CUtlHashtable<CUtlConstStringBase<char>, empty_t, DefaultHashFunctor<CUtlConstStringBase<char> >, DefaultEqualFunctor<CUtlConstStringBase<char> >, char const*>::~CUtlHashtable()
 T CUtlHashtable<void const*, char const*, DefaultHashFunctor<void const*>, DefaultEqualFunctor<void const*>, undefined_t>::BumpEntry(unsigned int)
 T CUtlHashtable<void const*, char const*, DefaultHashFunctor<void const*>, DefaultEqualFunctor<void const*>, undefined_t>::DoInsertUnconstructed(unsigned int, bool)
 T CUtlHashtable<void const*, char const*, DefaultHashFunctor<void const*>, DefaultEqualFunctor<void const*>, undefined_t>::DoRealloc(int)
 T CUtlLinkedList<AI_Follower_t, int, true, int, CUtlFixedMemory<UtlLinkedListElem_t<AI_Follower_t, int> > >::AllocInternal(bool)
 T CUtlLinkedList<AI_Follower_t, int, true, int, CUtlFixedMemory<UtlLinkedListElem_t<AI_Follower_t, int> > >::RemoveAll()
 T CUtlLinkedList<AI_Follower_t, int, true, int, CUtlFixedMemory<UtlLinkedListElem_t<AI_Follower_t, int> > >::Unlink(int)
 T CUtlLinkedList<CBaseCombatWeapon*, unsigned short, false, unsigned short, CUtlMemory<UtlLinkedListElem_t<CBaseCombatWeapon*, unsigned short>, unsigned short> >::AllocInternal(bool)
 T CUtlLinkedList<CBaseCombatWeapon*, unsigned short, false, unsigned short, CUtlMemory<UtlLinkedListElem_t<CBaseCombatWeapon*, unsigned short>, unsigned short> >::LinkBefore(unsigned short, unsigned short)
 T CUtlLinkedList<CBaseCombatWeapon*, unsigned short, false, unsigned short, CUtlMemory<UtlLinkedListElem_t<CBaseCombatWeapon*, unsigned short>, unsigned short> >::Purge()
 T CUtlLinkedList<CBaseCombatWeapon*, unsigned short, false, unsigned short, CUtlMemory<UtlLinkedListElem_t<CBaseCombatWeapon*, unsigned short>, unsigned short> >::~CUtlLinkedList()
 T CUtlLinkedList<CCoroutine, int, false, int, CUtlMemory<UtlLinkedListElem_t<CCoroutine, int>, int> >::AddToTail()
 T CUtlLinkedList<CCoroutine, int, false, int, CUtlMemory<UtlLinkedListElem_t<CCoroutine, int>, int> >::AllocInternal(bool)
 T CUtlLinkedList<CCoroutine, int, false, int, CUtlMemory<UtlLinkedListElem_t<CCoroutine, int>, int> >::Free(int)
 T CUtlLinkedList<CCoroutine, int, false, int, CUtlMemory<UtlLinkedListElem_t<CCoroutine, int>, int> >::RemoveAll()
 T CUtlLinkedList<CDamageModifier*, int, false, int, CUtlMemory<UtlLinkedListElem_t<CDamageModifier*, int>, int> >::~CUtlLinkedList()
 T CUtlLinkedList<CEnvWindShared::WindAveEvent_t, unsigned short, false, unsigned short, CUtlMemory<UtlLinkedListElem_t<CEnvWindShared::WindAveEvent_t, unsigned short>, unsigned short> >::~CUtlLinkedList()
 T CUtlLinkedList<CEnvWindShared::WindVariationEvent_t, unsigned short, false, unsigned short, CUtlMemory<UtlLinkedListElem_t<CEnvWindShared::WindVariationEvent_t, unsigned short>, unsigned short> >::~CUtlLinkedList()
 T CUtlLinkedList<CFuncAreaPortalBase*, unsigned short, false, unsigned short, CUtlMemory<UtlLinkedListElem_t<CFuncAreaPortalBase*, unsigned short>, unsigned short> >::AllocInternal(bool)
 T CUtlLinkedList<CFuncAreaPortalBase*, unsigned short, false, unsigned short, CUtlMemory<UtlLinkedListElem_t<CFuncAreaPortalBase*, unsigned short>, unsigned short> >::LinkBefore(unsigned short, unsigned short)
 T CUtlLinkedList<CFuncAreaPortalBase*, unsigned short, false, unsigned short, CUtlMemory<UtlLinkedListElem_t<CFuncAreaPortalBase*, unsigned short>, unsigned short> >::~CUtlLinkedList()
 T CUtlLinkedList<CFuncNavBlocker*, unsigned short, false, unsigned short, CUtlMemory<UtlLinkedListElem_t<CFuncNavBlocker*, unsigned short>, unsigned short> >::AllocInternal(bool)
 T CUtlLinkedList<CFuncNavBlocker*, unsigned short, false, unsigned short, CUtlMemory<UtlLinkedListElem_t<CFuncNavBlocker*, unsigned short>, unsigned short> >::LinkBefore(unsigned short, unsigned short)
 T CUtlLinkedList<CFuncNavBlocker*, unsigned short, false, unsigned short, CUtlMemory<UtlLinkedListElem_t<CFuncNavBlocker*, unsigned short>, unsigned short> >::~CUtlLinkedList()
 T CUtlLinkedList<CHandle<CBaseAnimating>, unsigned short, false, unsigned short, CUtlMemory<UtlLinkedListElem_t<CHandle<CBaseAnimating>, unsigned short>, unsigned short> >::AllocInternal(bool)
 T CUtlLinkedList<CHandle<CBaseAnimating>, unsigned short, false, unsigned short, CUtlMemory<UtlLinkedListElem_t<CHandle<CBaseAnimating>, unsigned short>, unsigned short> >::LinkBefore(unsigned short, unsigned short)
 T CUtlLinkedList<CHandle<CBaseAnimating>, unsigned short, false, unsigned short, CUtlMemory<UtlLinkedListElem_t<CHandle<CBaseAnimating>, unsigned short>, unsigned short> >::Purge()
 T CUtlLinkedList<CHandle<CBaseAnimating>, unsigned short, false, unsigned short, CUtlMemory<UtlLinkedListElem_t<CHandle<CBaseAnimating>, unsigned short>, unsigned short> >::~CUtlLinkedList()
 T CUtlLinkedList<CInfoCameraLink*, int, true, int, CUtlFixedMemory<UtlLinkedListElem_t<CInfoCameraLink*, int> > >::AllocInternal(bool)
 T CUtlLinkedList<CInfoCameraLink*, int, true, int, CUtlFixedMemory<UtlLinkedListElem_t<CInfoCameraLink*, int> > >::RemoveAll()
 T CUtlLinkedList<CInfoCameraLink*, int, true, int, CUtlFixedMemory<UtlLinkedListElem_t<CInfoCameraLink*, int> > >::Unlink(int)
 T CUtlLinkedList<CMapEntityRef, unsigned short, false, unsigned short, CUtlMemory<UtlLinkedListElem_t<CMapEntityRef, unsigned short>, unsigned short> >::AllocInternal(bool)
 T CUtlLinkedList<CMapEntityRef, unsigned short, false, unsigned short, CUtlMemory<UtlLinkedListElem_t<CMapEntityRef, unsigned short>, unsigned short> >::LinkBefore(unsigned short, unsigned short)
 T CUtlLinkedList<CMapEntityRef, unsigned short, false, unsigned short, CUtlMemory<UtlLinkedListElem_t<CMapEntityRef, unsigned short>, unsigned short> >::Purge()
 T CUtlLinkedList<CMapEntityRef, unsigned short, false, unsigned short, CUtlMemory<UtlLinkedListElem_t<CMapEntityRef, unsigned short>, unsigned short> >::~CUtlLinkedList()
 T CUtlLinkedList<CPasstimeBall::LagRecord, int, true, int, CUtlFixedMemory<UtlLinkedListElem_t<CPasstimeBall::LagRecord, int> > >::AllocInternal(bool)
 T CUtlLinkedList<CPasstimeBall::LagRecord, int, true, int, CUtlFixedMemory<UtlLinkedListElem_t<CPasstimeBall::LagRecord, int> > >::LinkAfter(int, int)
 T CUtlLinkedList<CPasstimeBall::LagRecord, int, true, int, CUtlFixedMemory<UtlLinkedListElem_t<CPasstimeBall::LagRecord, int> > >::RemoveAll()
 T CUtlLinkedList<CPasstimeBall::LagRecord, int, true, int, CUtlFixedMemory<UtlLinkedListElem_t<CPasstimeBall::LagRecord, int> > >::Unlink(int)
 T CUtlLinkedList<CPlayerCmdInfo, unsigned short, false, unsigned short, CUtlMemory<UtlLinkedListElem_t<CPlayerCmdInfo, unsigned short>, unsigned short> >::AllocInternal(bool)
 T CUtlLinkedList<CPlayerCmdInfo, unsigned short, false, unsigned short, CUtlMemory<UtlLinkedListElem_t<CPlayerCmdInfo, unsigned short>, unsigned short> >::LinkBefore(unsigned short, unsigned short)
 T CUtlLinkedList<CPlayerCmdInfo, unsigned short, false, unsigned short, CUtlMemory<UtlLinkedListElem_t<CPlayerCmdInfo, unsigned short>, unsigned short> >::~CUtlLinkedList()
 T CUtlLinkedList<CPlayerSimInfo, unsigned short, false, unsigned short, CUtlMemory<UtlLinkedListElem_t<CPlayerSimInfo, unsigned short>, unsigned short> >::AllocInternal(bool)
 T CUtlLinkedList<CPlayerSimInfo, unsigned short, false, unsigned short, CUtlMemory<UtlLinkedListElem_t<CPlayerSimInfo, unsigned short>, unsigned short> >::LinkBefore(unsigned short, unsigned short)
 T CUtlLinkedList<CPlayerSimInfo, unsigned short, false, unsigned short, CUtlMemory<UtlLinkedListElem_t<CPlayerSimInfo, unsigned short>, unsigned short> >::~CUtlLinkedList()
 T CUtlLinkedList<CUtlMultiList<CDataManagerBase::resource_lru_element_t, unsigned short>::List_t, unsigned short, false, unsigned short, CUtlMemory<UtlLinkedListElem_t<CUtlMultiList<CDataManagerBase::resource_lru_element_t, unsigned short>::List_t, unsigned short>, unsigned short> >::AllocInternal(bool)
 T CUtlLinkedList<CUtlMultiList<CDataManagerBase::resource_lru_element_t, unsigned short>::List_t, unsigned short, false, unsigned short, CUtlMemory<UtlLinkedListElem_t<CUtlMultiList<CDataManagerBase::resource_lru_element_t, unsigned short>::List_t, unsigned short>, unsigned short> >::LinkBefore(unsigned short, unsigned short)
 T CUtlLinkedList<CUtlMultiList<CDataManagerBase::resource_lru_element_t, unsigned short>::List_t, unsigned short, false, unsigned short, CUtlMemory<UtlLinkedListElem_t<CUtlMultiList<CDataManagerBase::resource_lru_element_t, unsigned short>::List_t, unsigned short>, unsigned short> >::~CUtlLinkedList()
 T CUtlLinkedList<CUtlMultiList<watcher_t, unsigned short>::List_t, unsigned short, false, unsigned short, CUtlMemory<UtlLinkedListElem_t<CUtlMultiList<watcher_t, unsigned short>::List_t, unsigned short>, unsigned short> >::AllocInternal(bool)
 T CUtlLinkedList<CUtlMultiList<watcher_t, unsigned short>::List_t, unsigned short, false, unsigned short, CUtlMemory<UtlLinkedListElem_t<CUtlMultiList<watcher_t, unsigned short>::List_t, unsigned short>, unsigned short> >::LinkBefore(unsigned short, unsigned short)
 T CUtlLinkedList<CUtlMultiList<watcher_t, unsigned short>::List_t, unsigned short, false, unsigned short, CUtlMemory<UtlLinkedListElem_t<CUtlMultiList<watcher_t, unsigned short>::List_t, unsigned short>, unsigned short> >::~CUtlLinkedList()
 T CUtlLinkedList<GCSDK::CJobMgr::JobTimeout_t, int, false, int, CUtlMemory<UtlLinkedListElem_t<GCSDK::CJobMgr::JobTimeout_t, int>, int> >::AllocInternal(bool)
 T CUtlLinkedList<GCSDK::CJobMgr::JobTimeout_t, int, false, int, CUtlMemory<UtlLinkedListElem_t<GCSDK::CJobMgr::JobTimeout_t, int>, int> >::~CUtlLinkedList()
 T CUtlLinkedList<GCSDK::CJobMgr::JobYielding_t, int, false, int, CUtlMemory<UtlLinkedListElem_t<GCSDK::CJobMgr::JobYielding_t, int>, int> >::AllocInternal(bool)
 T CUtlLinkedList<GCSDK::CJobMgr::JobYielding_t, int, false, int, CUtlMemory<UtlLinkedListElem_t<GCSDK::CJobMgr::JobYielding_t, int>, int> >::~CUtlLinkedList()
 T CUtlLinkedList<INextBot*, unsigned short, false, unsigned short, CUtlMemory<UtlLinkedListElem_t<INextBot*, unsigned short>, unsigned short> >::AllocInternal(bool)
 T CUtlLinkedList<INextBot*, unsigned short, false, unsigned short, CUtlMemory<UtlLinkedListElem_t<INextBot*, unsigned short>, unsigned short> >::LinkAfter(unsigned short, unsigned short)
 T CUtlLinkedList<INextBot*, unsigned short, false, unsigned short, CUtlMemory<UtlLinkedListElem_t<INextBot*, unsigned short>, unsigned short> >::LinkBefore(unsigned short, unsigned short)
 T CUtlLinkedList<INextBot*, unsigned short, false, unsigned short, CUtlMemory<UtlLinkedListElem_t<INextBot*, unsigned short>, unsigned short> >::~CUtlLinkedList()
 T CUtlLinkedList<LagRecord, int, true, int, CUtlFixedMemory<UtlLinkedListElem_t<LagRecord, int> > >::AllocInternal(bool)
 T CUtlLinkedList<LagRecord, int, true, int, CUtlFixedMemory<UtlLinkedListElem_t<LagRecord, int> > >::LinkAfter(int, int)
 T CUtlLinkedList<LagRecord, int, true, int, CUtlFixedMemory<UtlLinkedListElem_t<LagRecord, int> > >::RemoveAll()
 T CUtlLinkedList<LagRecord, int, true, int, CUtlFixedMemory<UtlLinkedListElem_t<LagRecord, int> > >::Unlink(int)
 T CUtlLinkedList<char const*, unsigned short, false, unsigned short, CUtlMemory<UtlLinkedListElem_t<char const*, unsigned short>, unsigned short> >::~CUtlLinkedList()
 T CUtlMap<CUtlConstStringBase<char>, int, unsigned short>::Find(CUtlConstStringBase<char> const&) const
 T CUtlMap<CUtlConstStringBase<char>, int, unsigned short>::Insert(CUtlConstStringBase<char> const&, int const&)
 T CUtlMap<CUtlString, float, unsigned short>::Find(CUtlString const&) const
 T CUtlMap<CUtlString, float, unsigned short>::Insert(CUtlString const&, float const&)
 T CUtlMap<EGameCategory, SchemaGameCategory_t*, unsigned short>::PurgeAndDeleteElements()
 T CUtlMap<EMatchmakingGroupType, SchemaMMGroup_t*, unsigned short>::PurgeAndDeleteElements()
 T CUtlMap<char const*, CEconItemSetDefinition*, int>::PurgeAndDeleteElements()
 T CUtlMap<char const*, CEconLootListDefinition*, int>::PurgeAndDeleteElements()
 T CUtlMap<char const*, CQuestThemeDefinition*, int>::PurgeAndDeleteElements()
 T CUtlMap<char const*, CUtlConstStringBase<char>, int>::Insert(char const* const&, CUtlConstStringBase<char> const&)
 T CUtlMap<char const*, ConceptHistory_t, int>::Find(char const* const&) const
 T CUtlMap<char const*, ConceptHistory_t, int>::Insert(char const* const&, ConceptHistory_t const&)
 T CUtlMap<char const*, Criteria, short>::Find(char const* const&) const
 T CUtlMap<char const*, Criteria, short>::Insert(char const* const&, Criteria const&)
 T CUtlMap<char const*, EventGroup, int>::Insert(char const* const&, EventGroup const&)
 T CUtlMap<char const*, QuestConditionEntry_t*, unsigned short>::~CUtlMap()
 T CUtlMap<char const*, RateLimitedSound_t*, unsigned short>::PurgeAndDeleteElements()
 T CUtlMap<char const*, ResponseGroup, short>::Find(char const* const&) const
 T CUtlMap<char const*, ResponseGroup, short>::Insert(char const* const&, ResponseGroup const&)
 T CUtlMap<char const*, Rule, short>::Insert(char const* const&, Rule const&)
 T CUtlMap<int, CAIHintVector, unsigned short>::~CUtlMap()
 T CUtlMap<int, CEconCraftingRecipeDefinition*, int>::PurgeAndDeleteElements()
 T CUtlMap<int, CEconItemAttributeDefinition, int>::Find(int const&) const
 T CUtlMap<int, CEconItemAttributeDefinition, int>::Insert(int const&)
 T CUtlMap<int, CEconItemQualityDefinition, int>::Find(int const&) const
 T CUtlMap<int, CQuestObjectiveDefinition*, int>::PurgeAndDeleteElements()
 T CUtlMap<int, GCSDK::CSharedObject::SharedObjectInfo_t, unsigned short>::Find(int const&) const
 T CUtlMap<int, GCSDK::CSharedObject::SharedObjectInfo_t, unsigned short>::Insert(int const&, GCSDK::CSharedObject::SharedObjectInfo_t const&)
 T CUtlMap<int, GCSDK::CSharedObject::SharedObjectInfo_t, unsigned short>::InsertOrReplace(int const&, GCSDK::CSharedObject::SharedObjectInfo_t const&)
 T CUtlMap<int, GCSDK::CSharedObject::SharedObjectInfo_t, unsigned short>::~CUtlMap()
 T CUtlMap<string_t, CUtlVector<CTFGameRules::TeleportLocation_t, CUtlMemory<CTFGameRules::TeleportLocation_t, int> >*, unsigned short>::PurgeAndDeleteElements()
 T CUtlMap<unsigned char, CWarDefinition*, unsigned short>::PurgeAndDeleteElements()
 T CUtlMap<unsigned int, AchievementAward_t*, unsigned short>::PurgeAndDeleteElements()
 T CUtlMap<unsigned int, CTFQuestObjectiveConditionsDefinition*, unsigned short>::PurgeAndDeleteElements()
 T CUtlMap<unsigned long long, CBaseSOTracker*, unsigned short>::PurgeAndDeleteElements()
 T CUtlMap<unsigned long long, CTFWorkshopMap*, unsigned short>::PurgeAndDeleteElements()
 T CUtlMapDataOps<CUtlMap<string_t, CSimpleSimTimer, char>, 2, 10>::IsEmpty(SaveRestoreFieldInfo_t const&)
 T CUtlMapDataOps<CUtlMap<string_t, CSimpleSimTimer, char>, 2, 10>::MakeEmpty(SaveRestoreFieldInfo_t const&)
 T CUtlMapDataOps<CUtlMap<string_t, CSimpleSimTimer, char>, 2, 10>::Restore(SaveRestoreFieldInfo_t const&, IRestore*)
 T CUtlMapDataOps<CUtlMap<string_t, CSimpleSimTimer, char>, 2, 10>::Save(SaveRestoreFieldInfo_t const&, ISave*)
 T CUtlMemory<CFlexSceneFile*, int>::Grow(int)
 T CUtlMemory<UtlLinkedListElem_t<CBaseCombatWeapon*, unsigned short>, unsigned short>::Grow(int)
 T CUtlMemory<UtlLinkedListElem_t<CFuncAreaPortalBase*, unsigned short>, unsigned short>::Grow(int)
 T CUtlMemory<UtlLinkedListElem_t<CFuncNavBlocker*, unsigned short>, unsigned short>::Grow(int)
 T CUtlMemory<UtlLinkedListElem_t<CHandle<CBaseAnimating>, unsigned short>, unsigned short>::Grow(int)
 T CUtlMemory<UtlLinkedListElem_t<CMapEntityRef, unsigned short>, unsigned short>::Grow(int)
 T CUtlMemory<UtlLinkedListElem_t<CPlayerCmdInfo, unsigned short>, unsigned short>::Grow(int)
 T CUtlMemory<UtlLinkedListElem_t<CPlayerSimInfo, unsigned short>, unsigned short>::Grow(int)
 T CUtlMemory<UtlLinkedListElem_t<CUtlMultiList<CDataManagerBase::resource_lru_element_t, unsigned short>::List_t, unsigned short>, unsigned short>::Grow(int)
 T CUtlMemory<UtlLinkedListElem_t<CUtlMultiList<watcher_t, unsigned short>::List_t, unsigned short>, unsigned short>::Grow(int)
 T CUtlMemory<UtlLinkedListElem_t<INextBot*, unsigned short>, unsigned short>::Grow(int)
 T CUtlMemory<UtlRBTreeNode_t<AI_CriteriaSet::CritEntry_t, short>, short>::Grow(int)
 T CUtlMemory<UtlRBTreeNode_t<CAI_BaseNPC*, unsigned short>, unsigned short>::Grow(int)
 T CUtlMemory<UtlRBTreeNode_t<CBaseEntity*, unsigned short>, unsigned short>::Grow(int)
 T CUtlMemory<UtlRBTreeNode_t<CBaseFlex::FS_LocalToGlobal_t, unsigned short>, unsigned short>::Grow(int)
 T CUtlMemory<UtlRBTreeNode_t<CBreakModelsPrecached::breakable_precache_t, unsigned short>, unsigned short>::Grow(int)
 T CUtlMemory<UtlRBTreeNode_t<CChoreoEvent*, unsigned short>, unsigned short>::Grow(int)
 T CUtlMemory<UtlRBTreeNode_t<CCombatCharVisCache::VisCacheEntry_t, unsigned short>, unsigned short>::Grow(int)
 T CUtlMemory<UtlRBTreeNode_t<CHLTVGameEvent, unsigned short>, unsigned short>::Grow(int)
 T CUtlMemory<UtlRBTreeNode_t<CSceneEntity::SpeakEventSound_t, unsigned short>, unsigned short>::Grow(int)
 T CUtlMemory<UtlRBTreeNode_t<CUtlCachedFileData<CModelSoundsCache>::ElementType_t, unsigned short>, unsigned short>::Grow(int)
 T CUtlMemory<UtlRBTreeNode_t<CUtlMap<CBaseEntity const*, float, unsigned short>::Node_t, unsigned short>, unsigned short>::Grow(int)
 T CUtlMemory<UtlRBTreeNode_t<CUtlMap<CBaseEntity*, AI_EnemyInfo_t*, unsigned char>::Node_t, unsigned char>, unsigned char>::Grow(int)
 T CUtlMemory<UtlRBTreeNode_t<CUtlMap<CBaseEntity*, CPhysSaveRestoreBlockHandler::CEntityRestoreSet*, unsigned short>::Node_t, unsigned short>, unsigned short>::Grow(int)
 T CUtlMemory<UtlRBTreeNode_t<CUtlMap<CBaseEntity*, int, unsigned short>::Node_t, unsigned short>, unsigned short>::Grow(int)
 T CUtlMemory<UtlRBTreeNode_t<CUtlMap<CChoreoActor*, CBaseFlex*, unsigned short>::Node_t, unsigned short>, unsigned short>::Grow(int)
 T CUtlMemory<UtlRBTreeNode_t<CUtlMap<CMsgTFXPSource_XPSourceType, float, unsigned short>::Node_t, unsigned short>, unsigned short>::Grow(int)
 T CUtlMemory<UtlRBTreeNode_t<CUtlMap<CPhysCollide const*, BBox_t, unsigned short>::Node_t, unsigned short>, unsigned short>::Grow(int)
 T CUtlMemory<UtlRBTreeNode_t<CUtlMap<CSteamID, GCSDK::CGCClientSharedObjectCache*, unsigned short>::Node_t, unsigned short>, unsigned short>::Grow(int)
 T CUtlMemory<UtlRBTreeNode_t<CUtlMap<CSteamID, float, unsigned short>::Node_t, unsigned short>, unsigned short>::Grow(int)
 T CUtlMemory<UtlRBTreeNode_t<CUtlMap<CUtlConstStringBase<char>, int, unsigned short>::Node_t, unsigned short>, unsigned short>::Grow(int)
 T CUtlMemory<UtlRBTreeNode_t<CUtlMap<CUtlString, float, unsigned short>::Node_t, unsigned short>, unsigned short>::Grow(int)
 T CUtlMemory<UtlRBTreeNode_t<CUtlMap<EGameCategory, SchemaGameCategory_t*, unsigned short>::Node_t, unsigned short>, unsigned short>::Grow(int)
 T CUtlMemory<UtlRBTreeNode_t<CUtlMap<EMatchmakingGroupType, SchemaMMGroup_t*, unsigned short>::Node_t, unsigned short>, unsigned short>::Grow(int)
 T CUtlMemory<UtlRBTreeNode_t<CUtlMap<IPhysicsObject*, CPhysCollide const*, unsigned short>::Node_t, unsigned short>, unsigned short>::Grow(int)
 T CUtlMemory<UtlRBTreeNode_t<CUtlMap<IPhysicsObject*, int, unsigned short>::Node_t, unsigned short>, unsigned short>::Grow(int)
 T CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, BasicGameStatsRecord_t, unsigned short>::Node_t, unsigned short>, unsigned short>::Grow(int)
 T CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CResponseSystem::Enumeration, short>::Node_t, short>, short>::Grow(int)
 T CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, ConceptInfo_t*, unsigned short>::Node_t, unsigned short>, unsigned short>::Grow(int)
 T CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, Criteria, short>::Node_t, short>, short>::Grow(int)
 T CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, FileWeaponInfo_t*, unsigned short>::Node_t, unsigned short>, unsigned short>::Grow(int)
 T CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, IEntityFactory*, unsigned short>::Node_t, unsigned short>, unsigned short>::Grow(int)
 T CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, QuestConditionEntry_t*, unsigned short>::Node_t, unsigned short>, unsigned short>::Grow(int)
 T CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, RateLimitedSound_t*, unsigned short>::Node_t, unsigned short>, unsigned short>::Grow(int)
 T CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, ResponseGroup, short>::Node_t, short>, short>::Grow(int)
 T CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, Rule, short>::Node_t, short>, short>::Grow(int)
 T CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, TF_Gamestats_LevelStats_t, unsigned short>::Node_t, unsigned short>, unsigned short>::Grow(int)
 T CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, codecontrolledbodygroupdata_t, unsigned short>::Node_t, unsigned short>, unsigned short>::Grow(int)
 T CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, int, unsigned short>::Node_t, unsigned short>, unsigned short>::Grow(int)
 T CUtlMemory<UtlRBTreeNode_t<CUtlMap<int, CAIHintVector, unsigned short>::Node_t, unsigned short>, unsigned short>::Grow(int)
 T CUtlMemory<UtlRBTreeNode_t<CUtlMap<int, CBaseObject::constructor_t, unsigned short>::Node_t, unsigned short>, unsigned short>::Grow(int)
 T CUtlMemory<UtlRBTreeNode_t<CUtlMap<int, CTakeDamageInfo, unsigned short>::Node_t, unsigned short>, unsigned short>::Grow(int)
 T CUtlMemory<UtlRBTreeNode_t<CUtlMap<int, CTeamControlPoint*, unsigned short>::Node_t, unsigned short>, unsigned short>::Grow(int)
 T CUtlMemory<UtlRBTreeNode_t<CUtlMap<int, GCSDK::CSharedObject::SharedObjectInfo_t, unsigned short>::Node_t, unsigned short>, unsigned short>::Grow(int)
 T CUtlMemory<UtlRBTreeNode_t<CUtlMap<int, GCSDK::CSharedObjectTypeCache*, unsigned short>::Node_t, unsigned short>, unsigned short>::Grow(int)
 T CUtlMemory<UtlRBTreeNode_t<CUtlMap<int, attachedparticlesystem_t, unsigned short>::Node_t, unsigned short>, unsigned short>::Grow(int)
 T CUtlMemory<UtlRBTreeNode_t<CUtlMap<int, char const*, unsigned short>::Node_t, unsigned short>, unsigned short>::Grow(int)
 T CUtlMemory<UtlRBTreeNode_t<CUtlMap<int, float, unsigned short>::Node_t, unsigned short>, unsigned short>::Grow(int)
 T CUtlMemory<UtlRBTreeNode_t<CUtlMap<int, int, unsigned short>::Node_t, unsigned short>, unsigned short>::Grow(int)
 T CUtlMemory<UtlRBTreeNode_t<CUtlMap<string_t, CSimpleSimTimer, char>::Node_t, char>, char>::Grow(int)
 T CUtlMemory<UtlRBTreeNode_t<CUtlMap<string_t, CUtlVector<CTFGameRules::TeleportLocation_t, CUtlMemory<CTFGameRules::TeleportLocation_t, int> >*, unsigned short>::Node_t, unsigned short>, unsigned short>::Grow(int)
 T CUtlMemory<UtlRBTreeNode_t<CUtlMap<unsigned char, CWarDefinition*, unsigned short>::Node_t, unsigned short>, unsigned short>::Grow(int)
 T CUtlMemory<UtlRBTreeNode_t<CUtlMap<unsigned char, CWarDefinition::CWarSideDefinition_t, unsigned short>::Node_t, unsigned short>, unsigned short>::Grow(int)
 T CUtlMemory<UtlRBTreeNode_t<CUtlMap<unsigned int, AchievementAward_t*, unsigned short>::Node_t, unsigned short>, unsigned short>::Grow(int)
 T CUtlMemory<UtlRBTreeNode_t<CUtlMap<unsigned int, CTFQuestObjectiveConditionsDefinition*, unsigned short>::Node_t, unsigned short>, unsigned short>::Grow(int)
 T CUtlMemory<UtlRBTreeNode_t<CUtlMap<unsigned int, kill_eater_score_type_t, unsigned short>::Node_t, unsigned short>, unsigned short>::Grow(int)
 T CUtlMemory<UtlRBTreeNode_t<CUtlMap<unsigned int, unsigned int, unsigned short>::Node_t, unsigned short>, unsigned short>::Grow(int)
 T CUtlMemory<UtlRBTreeNode_t<CUtlMap<unsigned long long, CBaseSOTracker*, unsigned short>::Node_t, unsigned short>, unsigned short>::Grow(int)
 T CUtlMemory<UtlRBTreeNode_t<CUtlMap<unsigned long long, CPlayerWaveSpendingStats, unsigned short>::Node_t, unsigned short>, unsigned short>::Grow(int)
 T CUtlMemory<UtlRBTreeNode_t<CUtlMap<unsigned long long, CTFWorkshopMap*, unsigned short>::Node_t, unsigned short>, unsigned short>::Grow(int)
 T CUtlMemory<UtlRBTreeNode_t<CUtlMap<unsigned long long, CommitRecord_t*, unsigned short>::Node_t, unsigned short>, unsigned short>::Grow(int)
 T CUtlMemory<UtlRBTreeNode_t<CUtlMap<unsigned long long, float, unsigned short>::Node_t, unsigned short>, unsigned short>::Grow(int)
 T CUtlMemory<UtlRBTreeNode_t<CUtlMap<unsigned long long, int, unsigned short>::Node_t, unsigned short>, unsigned short>::Grow(int)
 T CUtlMemory<UtlRBTreeNode_t<CUtlMap<unsigned short, unsigned short, unsigned short>::Node_t, unsigned short>, unsigned short>::Grow(int)
 T CUtlMemory<UtlRBTreeNode_t<CUtlString, unsigned short>, unsigned short>::Grow(int)
 T CUtlMemory<UtlRBTreeNode_t<CUtlSymbolTable::CStringPoolIndex, unsigned short>, unsigned short>::Grow(int)
 T CUtlMemory<UtlRBTreeNode_t<GCSDK::JobType_t const*, unsigned short>, unsigned short>::Grow(int)
 T CUtlMemory<UtlRBTreeNode_t<ThinkSync, unsigned short>, unsigned short>::Grow(int)
 T CUtlMemory<UtlRBTreeNode_t<VisibilityCacheEntry_t, unsigned short>, unsigned short>::Grow(int)
 T CUtlMemory<UtlRBTreeNode_t<char const*, unsigned short>, unsigned short>::Grow(int)
 T CUtlMemory<UtlRBTreeNode_t<int, unsigned short>, unsigned short>::Grow(int)
 T CUtlMemoryFixedGrowable<GCSDK::CSharedObject*, 1ul, int>::EnsureCapacity(int)
 T CUtlMemoryPool::AddNewBlob()
 T CUtlMemoryPool::Alloc()
 T CUtlMemoryPool::Alloc(unsigned long)
 T CUtlMemoryPool::CUtlMemoryPool(int, int, int, char const*, int)
 T CUtlMemoryPool::Free(void*)
 T CUtlMemoryPool::~CUtlMemoryPool()
 T CUtlMultiList<CDataManagerBase::resource_lru_element_t, unsigned short>::Alloc()
 T CUtlMultiList<CDataManagerBase::resource_lru_element_t, unsigned short>::LinkBefore(unsigned short, unsigned short, unsigned short)
 T CUtlMultiList<CDataManagerBase::resource_lru_element_t, unsigned short>::~CUtlMultiList()
 T CUtlMultiList<watcher_t, unsigned short>::Alloc()
 T CUtlMultiList<watcher_t, unsigned short>::LinkBefore(unsigned short, unsigned short, unsigned short)
 T CUtlMultiList<watcher_t, unsigned short>::Remove(unsigned short, unsigned short)
 T CUtlMultiList<watcher_t, unsigned short>::~CUtlMultiList()
 T CUtlNoEscConversion::FindConversion(char const*, int*)
 T CUtlPriorityQueue<AI_NearNode_t>::Insert(AI_NearNode_t const&)
 T CUtlPriorityQueue<CEventRegister*>::Insert(CEventRegister* const&)
 T CUtlPriorityQueue<CEventRegister*>::RemoveAt(int)
 T CUtlPriorityQueue<CEventRegister*>::RemoveAtHead()
 T CUtlPriorityQueue<CPhysSaveRestoreBlockHandler::QueuedItem_t>::Insert(CPhysSaveRestoreBlockHandler::QueuedItem_t const&)
 T CUtlPriorityQueue<CPhysSaveRestoreBlockHandler::QueuedItem_t>::RemoveAtHead()
 T CUtlPriorityQueue<GCSDK::CJobMgr::JobSleeping_t>::RemoveAtHead()
 T CUtlPriorityQueue<SoundCommand_t*>::Insert(SoundCommand_t* const&)
 T CUtlPriorityQueue<SoundCommand_t*>::RemoveAt(int)
 T CUtlPriorityQueue<SoundCommand_t*>::RemoveAtHead()
 T CUtlQueue<GCSDK::CGCClientJob*, CUtlMemory<GCSDK::CGCClientJob*, int> >::Insert(GCSDK::CGCClientJob* const&)
 T CUtlQueue<GCSDK::CGCClientJob*, CUtlMemory<GCSDK::CGCClientJob*, int> >::~CUtlQueue()
 T CUtlRBTree<AI_CriteriaSet::CritEntry_t, short, bool (*)(AI_CriteriaSet::CritEntry_t const&, AI_CriteriaSet::CritEntry_t const&), CUtlMemory<UtlRBTreeNode_t<AI_CriteriaSet::CritEntry_t, short>, short> >::CopyFrom(CUtlRBTree<AI_CriteriaSet::CritEntry_t, short, bool (*)(AI_CriteriaSet::CritEntry_t const&, AI_CriteriaSet::CritEntry_t const&), CUtlMemory<UtlRBTreeNode_t<AI_CriteriaSet::CritEntry_t, short>, short> > const&)
 T CUtlRBTree<AI_CriteriaSet::CritEntry_t, short, bool (*)(AI_CriteriaSet::CritEntry_t const&, AI_CriteriaSet::CritEntry_t const&), CUtlMemory<UtlRBTreeNode_t<AI_CriteriaSet::CritEntry_t, short>, short> >::Find(AI_CriteriaSet::CritEntry_t const&) const
 T CUtlRBTree<AI_CriteriaSet::CritEntry_t, short, bool (*)(AI_CriteriaSet::CritEntry_t const&, AI_CriteriaSet::CritEntry_t const&), CUtlMemory<UtlRBTreeNode_t<AI_CriteriaSet::CritEntry_t, short>, short> >::FindInsertionPosition(AI_CriteriaSet::CritEntry_t const&, short&, bool&)
 T CUtlRBTree<AI_CriteriaSet::CritEntry_t, short, bool (*)(AI_CriteriaSet::CritEntry_t const&, AI_CriteriaSet::CritEntry_t const&), CUtlMemory<UtlRBTreeNode_t<AI_CriteriaSet::CritEntry_t, short>, short> >::FirstInorder() const
 T CUtlRBTree<AI_CriteriaSet::CritEntry_t, short, bool (*)(AI_CriteriaSet::CritEntry_t const&, AI_CriteriaSet::CritEntry_t const&), CUtlMemory<UtlRBTreeNode_t<AI_CriteriaSet::CritEntry_t, short>, short> >::Insert(AI_CriteriaSet::CritEntry_t const&)
 T CUtlRBTree<AI_CriteriaSet::CritEntry_t, short, bool (*)(AI_CriteriaSet::CritEntry_t const&, AI_CriteriaSet::CritEntry_t const&), CUtlMemory<UtlRBTreeNode_t<AI_CriteriaSet::CritEntry_t, short>, short> >::InsertRebalance(short)
 T CUtlRBTree<AI_CriteriaSet::CritEntry_t, short, bool (*)(AI_CriteriaSet::CritEntry_t const&, AI_CriteriaSet::CritEntry_t const&), CUtlMemory<UtlRBTreeNode_t<AI_CriteriaSet::CritEntry_t, short>, short> >::IsLeftChild(short) const
 T CUtlRBTree<AI_CriteriaSet::CritEntry_t, short, bool (*)(AI_CriteriaSet::CritEntry_t const&, AI_CriteriaSet::CritEntry_t const&), CUtlMemory<UtlRBTreeNode_t<AI_CriteriaSet::CritEntry_t, short>, short> >::IsRightChild(short) const
 T CUtlRBTree<AI_CriteriaSet::CritEntry_t, short, bool (*)(AI_CriteriaSet::CritEntry_t const&, AI_CriteriaSet::CritEntry_t const&), CUtlMemory<UtlRBTreeNode_t<AI_CriteriaSet::CritEntry_t, short>, short> >::NewNode()
 T CUtlRBTree<AI_CriteriaSet::CritEntry_t, short, bool (*)(AI_CriteriaSet::CritEntry_t const&, AI_CriteriaSet::CritEntry_t const&), CUtlMemory<UtlRBTreeNode_t<AI_CriteriaSet::CritEntry_t, short>, short> >::NextInorder(short) const
 T CUtlRBTree<AI_CriteriaSet::CritEntry_t, short, bool (*)(AI_CriteriaSet::CritEntry_t const&, AI_CriteriaSet::CritEntry_t const&), CUtlMemory<UtlRBTreeNode_t<AI_CriteriaSet::CritEntry_t, short>, short> >::RemoveAll()
 T CUtlRBTree<AI_CriteriaSet::CritEntry_t, short, bool (*)(AI_CriteriaSet::CritEntry_t const&, AI_CriteriaSet::CritEntry_t const&), CUtlMemory<UtlRBTreeNode_t<AI_CriteriaSet::CritEntry_t, short>, short> >::RemoveRebalance(short)
 T CUtlRBTree<AI_CriteriaSet::CritEntry_t, short, bool (*)(AI_CriteriaSet::CritEntry_t const&, AI_CriteriaSet::CritEntry_t const&), CUtlMemory<UtlRBTreeNode_t<AI_CriteriaSet::CritEntry_t, short>, short> >::RotateLeft(short)
 T CUtlRBTree<AI_CriteriaSet::CritEntry_t, short, bool (*)(AI_CriteriaSet::CritEntry_t const&, AI_CriteriaSet::CritEntry_t const&), CUtlMemory<UtlRBTreeNode_t<AI_CriteriaSet::CritEntry_t, short>, short> >::RotateRight(short)
 T CUtlRBTree<AI_CriteriaSet::CritEntry_t, short, bool (*)(AI_CriteriaSet::CritEntry_t const&, AI_CriteriaSet::CritEntry_t const&), CUtlMemory<UtlRBTreeNode_t<AI_CriteriaSet::CritEntry_t, short>, short> >::Unlink(short)
 T CUtlRBTree<AI_CriteriaSet::CritEntry_t, short, bool (*)(AI_CriteriaSet::CritEntry_t const&, AI_CriteriaSet::CritEntry_t const&), CUtlMemory<UtlRBTreeNode_t<AI_CriteriaSet::CritEntry_t, short>, short> >::~CUtlRBTree()
 T CUtlRBTree<CAI_BaseNPC*, unsigned short, bool (*)(CAI_BaseNPC* const&, CAI_BaseNPC* const&), CUtlMemory<UtlRBTreeNode_t<CAI_BaseNPC*, unsigned short>, unsigned short> >::Find(CAI_BaseNPC* const&) const
 T CUtlRBTree<CAI_BaseNPC*, unsigned short, bool (*)(CAI_BaseNPC* const&, CAI_BaseNPC* const&), CUtlMemory<UtlRBTreeNode_t<CAI_BaseNPC*, unsigned short>, unsigned short> >::FindInsertionPosition(CAI_BaseNPC* const&, unsigned short&, bool&)
 T CUtlRBTree<CAI_BaseNPC*, unsigned short, bool (*)(CAI_BaseNPC* const&, CAI_BaseNPC* const&), CUtlMemory<UtlRBTreeNode_t<CAI_BaseNPC*, unsigned short>, unsigned short> >::FirstInorder() const
 T CUtlRBTree<CAI_BaseNPC*, unsigned short, bool (*)(CAI_BaseNPC* const&, CAI_BaseNPC* const&), CUtlMemory<UtlRBTreeNode_t<CAI_BaseNPC*, unsigned short>, unsigned short> >::Insert(CAI_BaseNPC* const&)
 T CUtlRBTree<CAI_BaseNPC*, unsigned short, bool (*)(CAI_BaseNPC* const&, CAI_BaseNPC* const&), CUtlMemory<UtlRBTreeNode_t<CAI_BaseNPC*, unsigned short>, unsigned short> >::InsertRebalance(unsigned short)
 T CUtlRBTree<CAI_BaseNPC*, unsigned short, bool (*)(CAI_BaseNPC* const&, CAI_BaseNPC* const&), CUtlMemory<UtlRBTreeNode_t<CAI_BaseNPC*, unsigned short>, unsigned short> >::IsLeftChild(unsigned short) const
 T CUtlRBTree<CAI_BaseNPC*, unsigned short, bool (*)(CAI_BaseNPC* const&, CAI_BaseNPC* const&), CUtlMemory<UtlRBTreeNode_t<CAI_BaseNPC*, unsigned short>, unsigned short> >::IsRightChild(unsigned short) const
 T CUtlRBTree<CAI_BaseNPC*, unsigned short, bool (*)(CAI_BaseNPC* const&, CAI_BaseNPC* const&), CUtlMemory<UtlRBTreeNode_t<CAI_BaseNPC*, unsigned short>, unsigned short> >::NewNode()
 T CUtlRBTree<CAI_BaseNPC*, unsigned short, bool (*)(CAI_BaseNPC* const&, CAI_BaseNPC* const&), CUtlMemory<UtlRBTreeNode_t<CAI_BaseNPC*, unsigned short>, unsigned short> >::NextInorder(unsigned short) const
 T CUtlRBTree<CAI_BaseNPC*, unsigned short, bool (*)(CAI_BaseNPC* const&, CAI_BaseNPC* const&), CUtlMemory<UtlRBTreeNode_t<CAI_BaseNPC*, unsigned short>, unsigned short> >::RemoveAll()
 T CUtlRBTree<CAI_BaseNPC*, unsigned short, bool (*)(CAI_BaseNPC* const&, CAI_BaseNPC* const&), CUtlMemory<UtlRBTreeNode_t<CAI_BaseNPC*, unsigned short>, unsigned short> >::RemoveRebalance(unsigned short)
 T CUtlRBTree<CAI_BaseNPC*, unsigned short, bool (*)(CAI_BaseNPC* const&, CAI_BaseNPC* const&), CUtlMemory<UtlRBTreeNode_t<CAI_BaseNPC*, unsigned short>, unsigned short> >::RotateLeft(unsigned short)
 T CUtlRBTree<CAI_BaseNPC*, unsigned short, bool (*)(CAI_BaseNPC* const&, CAI_BaseNPC* const&), CUtlMemory<UtlRBTreeNode_t<CAI_BaseNPC*, unsigned short>, unsigned short> >::RotateRight(unsigned short)
 T CUtlRBTree<CAI_BaseNPC*, unsigned short, bool (*)(CAI_BaseNPC* const&, CAI_BaseNPC* const&), CUtlMemory<UtlRBTreeNode_t<CAI_BaseNPC*, unsigned short>, unsigned short> >::Unlink(unsigned short)
 T CUtlRBTree<CAI_BaseNPC*, unsigned short, bool (*)(CAI_BaseNPC* const&, CAI_BaseNPC* const&), CUtlMemory<UtlRBTreeNode_t<CAI_BaseNPC*, unsigned short>, unsigned short> >::~CUtlRBTree()
 T CUtlRBTree<CBaseEntity*, unsigned short, bool (*)(CBaseEntity* const&, CBaseEntity* const&), CUtlMemory<UtlRBTreeNode_t<CBaseEntity*, unsigned short>, unsigned short> >::Find(CBaseEntity* const&) const
 T CUtlRBTree<CBaseEntity*, unsigned short, bool (*)(CBaseEntity* const&, CBaseEntity* const&), CUtlMemory<UtlRBTreeNode_t<CBaseEntity*, unsigned short>, unsigned short> >::FindInsertionPosition(CBaseEntity* const&, unsigned short&, bool&)
 T CUtlRBTree<CBaseEntity*, unsigned short, bool (*)(CBaseEntity* const&, CBaseEntity* const&), CUtlMemory<UtlRBTreeNode_t<CBaseEntity*, unsigned short>, unsigned short> >::Insert(CBaseEntity* const&)
 T CUtlRBTree<CBaseEntity*, unsigned short, bool (*)(CBaseEntity* const&, CBaseEntity* const&), CUtlMemory<UtlRBTreeNode_t<CBaseEntity*, unsigned short>, unsigned short> >::InsertRebalance(unsigned short)
 T CUtlRBTree<CBaseEntity*, unsigned short, bool (*)(CBaseEntity* const&, CBaseEntity* const&), CUtlMemory<UtlRBTreeNode_t<CBaseEntity*, unsigned short>, unsigned short> >::IsLeftChild(unsigned short) const
 T CUtlRBTree<CBaseEntity*, unsigned short, bool (*)(CBaseEntity* const&, CBaseEntity* const&), CUtlMemory<UtlRBTreeNode_t<CBaseEntity*, unsigned short>, unsigned short> >::IsRightChild(unsigned short) const
 T CUtlRBTree<CBaseEntity*, unsigned short, bool (*)(CBaseEntity* const&, CBaseEntity* const&), CUtlMemory<UtlRBTreeNode_t<CBaseEntity*, unsigned short>, unsigned short> >::NewNode()
 T CUtlRBTree<CBaseEntity*, unsigned short, bool (*)(CBaseEntity* const&, CBaseEntity* const&), CUtlMemory<UtlRBTreeNode_t<CBaseEntity*, unsigned short>, unsigned short> >::RemoveAll()
 T CUtlRBTree<CBaseEntity*, unsigned short, bool (*)(CBaseEntity* const&, CBaseEntity* const&), CUtlMemory<UtlRBTreeNode_t<CBaseEntity*, unsigned short>, unsigned short> >::RotateLeft(unsigned short)
 T CUtlRBTree<CBaseEntity*, unsigned short, bool (*)(CBaseEntity* const&, CBaseEntity* const&), CUtlMemory<UtlRBTreeNode_t<CBaseEntity*, unsigned short>, unsigned short> >::RotateRight(unsigned short)
 T CUtlRBTree<CBaseEntity*, unsigned short, bool (*)(CBaseEntity* const&, CBaseEntity* const&), CUtlMemory<UtlRBTreeNode_t<CBaseEntity*, unsigned short>, unsigned short> >::~CUtlRBTree()
 T CUtlRBTree<CBaseFlex::FS_LocalToGlobal_t, unsigned short, bool (*)(CBaseFlex::FS_LocalToGlobal_t const&, CBaseFlex::FS_LocalToGlobal_t const&), CUtlMemory<UtlRBTreeNode_t<CBaseFlex::FS_LocalToGlobal_t, unsigned short>, unsigned short> >::Find(CBaseFlex::FS_LocalToGlobal_t const&) const
 T CUtlRBTree<CBaseFlex::FS_LocalToGlobal_t, unsigned short, bool (*)(CBaseFlex::FS_LocalToGlobal_t const&, CBaseFlex::FS_LocalToGlobal_t const&), CUtlMemory<UtlRBTreeNode_t<CBaseFlex::FS_LocalToGlobal_t, unsigned short>, unsigned short> >::FindInsertionPosition(CBaseFlex::FS_LocalToGlobal_t const&, unsigned short&, bool&)
 T CUtlRBTree<CBaseFlex::FS_LocalToGlobal_t, unsigned short, bool (*)(CBaseFlex::FS_LocalToGlobal_t const&, CBaseFlex::FS_LocalToGlobal_t const&), CUtlMemory<UtlRBTreeNode_t<CBaseFlex::FS_LocalToGlobal_t, unsigned short>, unsigned short> >::Insert(CBaseFlex::FS_LocalToGlobal_t const&)
 T CUtlRBTree<CBaseFlex::FS_LocalToGlobal_t, unsigned short, bool (*)(CBaseFlex::FS_LocalToGlobal_t const&, CBaseFlex::FS_LocalToGlobal_t const&), CUtlMemory<UtlRBTreeNode_t<CBaseFlex::FS_LocalToGlobal_t, unsigned short>, unsigned short> >::InsertRebalance(unsigned short)
 T CUtlRBTree<CBaseFlex::FS_LocalToGlobal_t, unsigned short, bool (*)(CBaseFlex::FS_LocalToGlobal_t const&, CBaseFlex::FS_LocalToGlobal_t const&), CUtlMemory<UtlRBTreeNode_t<CBaseFlex::FS_LocalToGlobal_t, unsigned short>, unsigned short> >::IsLeftChild(unsigned short) const
 T CUtlRBTree<CBaseFlex::FS_LocalToGlobal_t, unsigned short, bool (*)(CBaseFlex::FS_LocalToGlobal_t const&, CBaseFlex::FS_LocalToGlobal_t const&), CUtlMemory<UtlRBTreeNode_t<CBaseFlex::FS_LocalToGlobal_t, unsigned short>, unsigned short> >::IsRightChild(unsigned short) const
 T CUtlRBTree<CBaseFlex::FS_LocalToGlobal_t, unsigned short, bool (*)(CBaseFlex::FS_LocalToGlobal_t const&, CBaseFlex::FS_LocalToGlobal_t const&), CUtlMemory<UtlRBTreeNode_t<CBaseFlex::FS_LocalToGlobal_t, unsigned short>, unsigned short> >::NewNode()
 T CUtlRBTree<CBaseFlex::FS_LocalToGlobal_t, unsigned short, bool (*)(CBaseFlex::FS_LocalToGlobal_t const&, CBaseFlex::FS_LocalToGlobal_t const&), CUtlMemory<UtlRBTreeNode_t<CBaseFlex::FS_LocalToGlobal_t, unsigned short>, unsigned short> >::RemoveAll()
 T CUtlRBTree<CBaseFlex::FS_LocalToGlobal_t, unsigned short, bool (*)(CBaseFlex::FS_LocalToGlobal_t const&, CBaseFlex::FS_LocalToGlobal_t const&), CUtlMemory<UtlRBTreeNode_t<CBaseFlex::FS_LocalToGlobal_t, unsigned short>, unsigned short> >::RotateLeft(unsigned short)
 T CUtlRBTree<CBaseFlex::FS_LocalToGlobal_t, unsigned short, bool (*)(CBaseFlex::FS_LocalToGlobal_t const&, CBaseFlex::FS_LocalToGlobal_t const&), CUtlMemory<UtlRBTreeNode_t<CBaseFlex::FS_LocalToGlobal_t, unsigned short>, unsigned short> >::RotateRight(unsigned short)
 T CUtlRBTree<CBaseFlex::FS_LocalToGlobal_t, unsigned short, bool (*)(CBaseFlex::FS_LocalToGlobal_t const&, CBaseFlex::FS_LocalToGlobal_t const&), CUtlMemory<UtlRBTreeNode_t<CBaseFlex::FS_LocalToGlobal_t, unsigned short>, unsigned short> >::~CUtlRBTree()
 T CUtlRBTree<CBreakModelsPrecached::breakable_precache_t, unsigned short, bool (*)(CBreakModelsPrecached::breakable_precache_t const&, CBreakModelsPrecached::breakable_precache_t const&), CUtlMemory<UtlRBTreeNode_t<CBreakModelsPrecached::breakable_precache_t, unsigned short>, unsigned short> >::Find(CBreakModelsPrecached::breakable_precache_t const&) const
 T CUtlRBTree<CBreakModelsPrecached::breakable_precache_t, unsigned short, bool (*)(CBreakModelsPrecached::breakable_precache_t const&, CBreakModelsPrecached::breakable_precache_t const&), CUtlMemory<UtlRBTreeNode_t<CBreakModelsPrecached::breakable_precache_t, unsigned short>, unsigned short> >::FindInsertionPosition(CBreakModelsPrecached::breakable_precache_t const&, unsigned short&, bool&)
 T CUtlRBTree<CBreakModelsPrecached::breakable_precache_t, unsigned short, bool (*)(CBreakModelsPrecached::breakable_precache_t const&, CBreakModelsPrecached::breakable_precache_t const&), CUtlMemory<UtlRBTreeNode_t<CBreakModelsPrecached::breakable_precache_t, unsigned short>, unsigned short> >::Insert(CBreakModelsPrecached::breakable_precache_t const&)
 T CUtlRBTree<CBreakModelsPrecached::breakable_precache_t, unsigned short, bool (*)(CBreakModelsPrecached::breakable_precache_t const&, CBreakModelsPrecached::breakable_precache_t const&), CUtlMemory<UtlRBTreeNode_t<CBreakModelsPrecached::breakable_precache_t, unsigned short>, unsigned short> >::InsertRebalance(unsigned short)
 T CUtlRBTree<CBreakModelsPrecached::breakable_precache_t, unsigned short, bool (*)(CBreakModelsPrecached::breakable_precache_t const&, CBreakModelsPrecached::breakable_precache_t const&), CUtlMemory<UtlRBTreeNode_t<CBreakModelsPrecached::breakable_precache_t, unsigned short>, unsigned short> >::IsLeftChild(unsigned short) const
 T CUtlRBTree<CBreakModelsPrecached::breakable_precache_t, unsigned short, bool (*)(CBreakModelsPrecached::breakable_precache_t const&, CBreakModelsPrecached::breakable_precache_t const&), CUtlMemory<UtlRBTreeNode_t<CBreakModelsPrecached::breakable_precache_t, unsigned short>, unsigned short> >::IsRightChild(unsigned short) const
 T CUtlRBTree<CBreakModelsPrecached::breakable_precache_t, unsigned short, bool (*)(CBreakModelsPrecached::breakable_precache_t const&, CBreakModelsPrecached::breakable_precache_t const&), CUtlMemory<UtlRBTreeNode_t<CBreakModelsPrecached::breakable_precache_t, unsigned short>, unsigned short> >::NewNode()
 T CUtlRBTree<CBreakModelsPrecached::breakable_precache_t, unsigned short, bool (*)(CBreakModelsPrecached::breakable_precache_t const&, CBreakModelsPrecached::breakable_precache_t const&), CUtlMemory<UtlRBTreeNode_t<CBreakModelsPrecached::breakable_precache_t, unsigned short>, unsigned short> >::RemoveAll()
 T CUtlRBTree<CBreakModelsPrecached::breakable_precache_t, unsigned short, bool (*)(CBreakModelsPrecached::breakable_precache_t const&, CBreakModelsPrecached::breakable_precache_t const&), CUtlMemory<UtlRBTreeNode_t<CBreakModelsPrecached::breakable_precache_t, unsigned short>, unsigned short> >::RotateLeft(unsigned short)
 T CUtlRBTree<CBreakModelsPrecached::breakable_precache_t, unsigned short, bool (*)(CBreakModelsPrecached::breakable_precache_t const&, CBreakModelsPrecached::breakable_precache_t const&), CUtlMemory<UtlRBTreeNode_t<CBreakModelsPrecached::breakable_precache_t, unsigned short>, unsigned short> >::RotateRight(unsigned short)
 T CUtlRBTree<CBreakModelsPrecached::breakable_precache_t, unsigned short, bool (*)(CBreakModelsPrecached::breakable_precache_t const&, CBreakModelsPrecached::breakable_precache_t const&), CUtlMemory<UtlRBTreeNode_t<CBreakModelsPrecached::breakable_precache_t, unsigned short>, unsigned short> >::~CUtlRBTree()
 T CUtlRBTree<CChoreoEvent*, unsigned short, bool (*)(CChoreoEvent* const&, CChoreoEvent* const&), CUtlMemory<UtlRBTreeNode_t<CChoreoEvent*, unsigned short>, unsigned short> >::FindInsertionPosition(CChoreoEvent* const&, unsigned short&, bool&)
 T CUtlRBTree<CChoreoEvent*, unsigned short, bool (*)(CChoreoEvent* const&, CChoreoEvent* const&), CUtlMemory<UtlRBTreeNode_t<CChoreoEvent*, unsigned short>, unsigned short> >::FirstInorder() const
 T CUtlRBTree<CChoreoEvent*, unsigned short, bool (*)(CChoreoEvent* const&, CChoreoEvent* const&), CUtlMemory<UtlRBTreeNode_t<CChoreoEvent*, unsigned short>, unsigned short> >::Insert(CChoreoEvent* const&)
 T CUtlRBTree<CChoreoEvent*, unsigned short, bool (*)(CChoreoEvent* const&, CChoreoEvent* const&), CUtlMemory<UtlRBTreeNode_t<CChoreoEvent*, unsigned short>, unsigned short> >::InsertRebalance(unsigned short)
 T CUtlRBTree<CChoreoEvent*, unsigned short, bool (*)(CChoreoEvent* const&, CChoreoEvent* const&), CUtlMemory<UtlRBTreeNode_t<CChoreoEvent*, unsigned short>, unsigned short> >::IsLeftChild(unsigned short) const
 T CUtlRBTree<CChoreoEvent*, unsigned short, bool (*)(CChoreoEvent* const&, CChoreoEvent* const&), CUtlMemory<UtlRBTreeNode_t<CChoreoEvent*, unsigned short>, unsigned short> >::IsRightChild(unsigned short) const
 T CUtlRBTree<CChoreoEvent*, unsigned short, bool (*)(CChoreoEvent* const&, CChoreoEvent* const&), CUtlMemory<UtlRBTreeNode_t<CChoreoEvent*, unsigned short>, unsigned short> >::NewNode()
 T CUtlRBTree<CChoreoEvent*, unsigned short, bool (*)(CChoreoEvent* const&, CChoreoEvent* const&), CUtlMemory<UtlRBTreeNode_t<CChoreoEvent*, unsigned short>, unsigned short> >::NextInorder(unsigned short) const
 T CUtlRBTree<CChoreoEvent*, unsigned short, bool (*)(CChoreoEvent* const&, CChoreoEvent* const&), CUtlMemory<UtlRBTreeNode_t<CChoreoEvent*, unsigned short>, unsigned short> >::RemoveAll()
 T CUtlRBTree<CChoreoEvent*, unsigned short, bool (*)(CChoreoEvent* const&, CChoreoEvent* const&), CUtlMemory<UtlRBTreeNode_t<CChoreoEvent*, unsigned short>, unsigned short> >::RotateLeft(unsigned short)
 T CUtlRBTree<CChoreoEvent*, unsigned short, bool (*)(CChoreoEvent* const&, CChoreoEvent* const&), CUtlMemory<UtlRBTreeNode_t<CChoreoEvent*, unsigned short>, unsigned short> >::RotateRight(unsigned short)
 T CUtlRBTree<CChoreoEvent*, unsigned short, bool (*)(CChoreoEvent* const&, CChoreoEvent* const&), CUtlMemory<UtlRBTreeNode_t<CChoreoEvent*, unsigned short>, unsigned short> >::~CUtlRBTree()
 T CUtlRBTree<CChoreoScene::ActiveList, int, bool (*)(CChoreoScene::ActiveList const&, CChoreoScene::ActiveList const&), CUtlMemory<UtlRBTreeNode_t<CChoreoScene::ActiveList, int>, int> >::FindInsertionPosition(CChoreoScene::ActiveList const&, int&, bool&)
 T CUtlRBTree<CChoreoScene::ActiveList, int, bool (*)(CChoreoScene::ActiveList const&, CChoreoScene::ActiveList const&), CUtlMemory<UtlRBTreeNode_t<CChoreoScene::ActiveList, int>, int> >::FirstInorder() const
 T CUtlRBTree<CChoreoScene::ActiveList, int, bool (*)(CChoreoScene::ActiveList const&, CChoreoScene::ActiveList const&), CUtlMemory<UtlRBTreeNode_t<CChoreoScene::ActiveList, int>, int> >::Insert(CChoreoScene::ActiveList const&)
 T CUtlRBTree<CChoreoScene::ActiveList, int, bool (*)(CChoreoScene::ActiveList const&, CChoreoScene::ActiveList const&), CUtlMemory<UtlRBTreeNode_t<CChoreoScene::ActiveList, int>, int> >::InsertRebalance(int)
 T CUtlRBTree<CChoreoScene::ActiveList, int, bool (*)(CChoreoScene::ActiveList const&, CChoreoScene::ActiveList const&), CUtlMemory<UtlRBTreeNode_t<CChoreoScene::ActiveList, int>, int> >::IsLeftChild(int) const
 T CUtlRBTree<CChoreoScene::ActiveList, int, bool (*)(CChoreoScene::ActiveList const&, CChoreoScene::ActiveList const&), CUtlMemory<UtlRBTreeNode_t<CChoreoScene::ActiveList, int>, int> >::IsRightChild(int) const
 T CUtlRBTree<CChoreoScene::ActiveList, int, bool (*)(CChoreoScene::ActiveList const&, CChoreoScene::ActiveList const&), CUtlMemory<UtlRBTreeNode_t<CChoreoScene::ActiveList, int>, int> >::NewNode()
 T CUtlRBTree<CChoreoScene::ActiveList, int, bool (*)(CChoreoScene::ActiveList const&, CChoreoScene::ActiveList const&), CUtlMemory<UtlRBTreeNode_t<CChoreoScene::ActiveList, int>, int> >::NextInorder(int) const
 T CUtlRBTree<CChoreoScene::ActiveList, int, bool (*)(CChoreoScene::ActiveList const&, CChoreoScene::ActiveList const&), CUtlMemory<UtlRBTreeNode_t<CChoreoScene::ActiveList, int>, int> >::RemoveAll()
 T CUtlRBTree<CChoreoScene::ActiveList, int, bool (*)(CChoreoScene::ActiveList const&, CChoreoScene::ActiveList const&), CUtlMemory<UtlRBTreeNode_t<CChoreoScene::ActiveList, int>, int> >::RotateLeft(int)
 T CUtlRBTree<CChoreoScene::ActiveList, int, bool (*)(CChoreoScene::ActiveList const&, CChoreoScene::ActiveList const&), CUtlMemory<UtlRBTreeNode_t<CChoreoScene::ActiveList, int>, int> >::RotateRight(int)
 T CUtlRBTree<CChoreoScene::ActiveList, int, bool (*)(CChoreoScene::ActiveList const&, CChoreoScene::ActiveList const&), CUtlMemory<UtlRBTreeNode_t<CChoreoScene::ActiveList, int>, int> >::~CUtlRBTree()
 T CUtlRBTree<CCombatCharVisCache::VisCacheEntry_t, unsigned short, CCombatCharVisCache::CVisCacheEntryLess, CUtlMemory<UtlRBTreeNode_t<CCombatCharVisCache::VisCacheEntry_t, unsigned short>, unsigned short> >::Find(CCombatCharVisCache::VisCacheEntry_t const&) const
 T CUtlRBTree<CCombatCharVisCache::VisCacheEntry_t, unsigned short, CCombatCharVisCache::CVisCacheEntryLess, CUtlMemory<UtlRBTreeNode_t<CCombatCharVisCache::VisCacheEntry_t, unsigned short>, unsigned short> >::FindInsertionPosition(CCombatCharVisCache::VisCacheEntry_t const&, unsigned short&, bool&)
 T CUtlRBTree<CCombatCharVisCache::VisCacheEntry_t, unsigned short, CCombatCharVisCache::CVisCacheEntryLess, CUtlMemory<UtlRBTreeNode_t<CCombatCharVisCache::VisCacheEntry_t, unsigned short>, unsigned short> >::Insert(CCombatCharVisCache::VisCacheEntry_t const&)
 T CUtlRBTree<CCombatCharVisCache::VisCacheEntry_t, unsigned short, CCombatCharVisCache::CVisCacheEntryLess, CUtlMemory<UtlRBTreeNode_t<CCombatCharVisCache::VisCacheEntry_t, unsigned short>, unsigned short> >::InsertRebalance(unsigned short)
 T CUtlRBTree<CCombatCharVisCache::VisCacheEntry_t, unsigned short, CCombatCharVisCache::CVisCacheEntryLess, CUtlMemory<UtlRBTreeNode_t<CCombatCharVisCache::VisCacheEntry_t, unsigned short>, unsigned short> >::IsLeftChild(unsigned short) const
 T CUtlRBTree<CCombatCharVisCache::VisCacheEntry_t, unsigned short, CCombatCharVisCache::CVisCacheEntryLess, CUtlMemory<UtlRBTreeNode_t<CCombatCharVisCache::VisCacheEntry_t, unsigned short>, unsigned short> >::IsRightChild(unsigned short) const
 T CUtlRBTree<CCombatCharVisCache::VisCacheEntry_t, unsigned short, CCombatCharVisCache::CVisCacheEntryLess, CUtlMemory<UtlRBTreeNode_t<CCombatCharVisCache::VisCacheEntry_t, unsigned short>, unsigned short> >::NewNode()
 T CUtlRBTree<CCombatCharVisCache::VisCacheEntry_t, unsigned short, CCombatCharVisCache::CVisCacheEntryLess, CUtlMemory<UtlRBTreeNode_t<CCombatCharVisCache::VisCacheEntry_t, unsigned short>, unsigned short> >::RemoveAll()
 T CUtlRBTree<CCombatCharVisCache::VisCacheEntry_t, unsigned short, CCombatCharVisCache::CVisCacheEntryLess, CUtlMemory<UtlRBTreeNode_t<CCombatCharVisCache::VisCacheEntry_t, unsigned short>, unsigned short> >::RemoveRebalance(unsigned short)
 T CUtlRBTree<CCombatCharVisCache::VisCacheEntry_t, unsigned short, CCombatCharVisCache::CVisCacheEntryLess, CUtlMemory<UtlRBTreeNode_t<CCombatCharVisCache::VisCacheEntry_t, unsigned short>, unsigned short> >::RotateLeft(unsigned short)
 T CUtlRBTree<CCombatCharVisCache::VisCacheEntry_t, unsigned short, CCombatCharVisCache::CVisCacheEntryLess, CUtlMemory<UtlRBTreeNode_t<CCombatCharVisCache::VisCacheEntry_t, unsigned short>, unsigned short> >::RotateRight(unsigned short)
 T CUtlRBTree<CCombatCharVisCache::VisCacheEntry_t, unsigned short, CCombatCharVisCache::CVisCacheEntryLess, CUtlMemory<UtlRBTreeNode_t<CCombatCharVisCache::VisCacheEntry_t, unsigned short>, unsigned short> >::Unlink(unsigned short)
 T CUtlRBTree<CCombatCharVisCache::VisCacheEntry_t, unsigned short, CCombatCharVisCache::CVisCacheEntryLess, CUtlMemory<UtlRBTreeNode_t<CCombatCharVisCache::VisCacheEntry_t, unsigned short>, unsigned short> >::~CUtlRBTree()
 T CUtlRBTree<CHLTVGameEvent, unsigned short, bool (*)(CHLTVGameEvent const&, CHLTVGameEvent const&), CUtlMemory<UtlRBTreeNode_t<CHLTVGameEvent, unsigned short>, unsigned short> >::FindInsertionPosition(CHLTVGameEvent const&, unsigned short&, bool&)
 T CUtlRBTree<CHLTVGameEvent, unsigned short, bool (*)(CHLTVGameEvent const&, CHLTVGameEvent const&), CUtlMemory<UtlRBTreeNode_t<CHLTVGameEvent, unsigned short>, unsigned short> >::FirstInorder() const
 T CUtlRBTree<CHLTVGameEvent, unsigned short, bool (*)(CHLTVGameEvent const&, CHLTVGameEvent const&), CUtlMemory<UtlRBTreeNode_t<CHLTVGameEvent, unsigned short>, unsigned short> >::Insert(CHLTVGameEvent const&)
 T CUtlRBTree<CHLTVGameEvent, unsigned short, bool (*)(CHLTVGameEvent const&, CHLTVGameEvent const&), CUtlMemory<UtlRBTreeNode_t<CHLTVGameEvent, unsigned short>, unsigned short> >::InsertRebalance(unsigned short)
 T CUtlRBTree<CHLTVGameEvent, unsigned short, bool (*)(CHLTVGameEvent const&, CHLTVGameEvent const&), CUtlMemory<UtlRBTreeNode_t<CHLTVGameEvent, unsigned short>, unsigned short> >::IsLeftChild(unsigned short) const
 T CUtlRBTree<CHLTVGameEvent, unsigned short, bool (*)(CHLTVGameEvent const&, CHLTVGameEvent const&), CUtlMemory<UtlRBTreeNode_t<CHLTVGameEvent, unsigned short>, unsigned short> >::IsRightChild(unsigned short) const
 T CUtlRBTree<CHLTVGameEvent, unsigned short, bool (*)(CHLTVGameEvent const&, CHLTVGameEvent const&), CUtlMemory<UtlRBTreeNode_t<CHLTVGameEvent, unsigned short>, unsigned short> >::NewNode()
 T CUtlRBTree<CHLTVGameEvent, unsigned short, bool (*)(CHLTVGameEvent const&, CHLTVGameEvent const&), CUtlMemory<UtlRBTreeNode_t<CHLTVGameEvent, unsigned short>, unsigned short> >::NextInorder(unsigned short) const
 T CUtlRBTree<CHLTVGameEvent, unsigned short, bool (*)(CHLTVGameEvent const&, CHLTVGameEvent const&), CUtlMemory<UtlRBTreeNode_t<CHLTVGameEvent, unsigned short>, unsigned short> >::RemoveAll()
 T CUtlRBTree<CHLTVGameEvent, unsigned short, bool (*)(CHLTVGameEvent const&, CHLTVGameEvent const&), CUtlMemory<UtlRBTreeNode_t<CHLTVGameEvent, unsigned short>, unsigned short> >::RemoveRebalance(unsigned short)
 T CUtlRBTree<CHLTVGameEvent, unsigned short, bool (*)(CHLTVGameEvent const&, CHLTVGameEvent const&), CUtlMemory<UtlRBTreeNode_t<CHLTVGameEvent, unsigned short>, unsigned short> >::RotateLeft(unsigned short)
 T CUtlRBTree<CHLTVGameEvent, unsigned short, bool (*)(CHLTVGameEvent const&, CHLTVGameEvent const&), CUtlMemory<UtlRBTreeNode_t<CHLTVGameEvent, unsigned short>, unsigned short> >::RotateRight(unsigned short)
 T CUtlRBTree<CHLTVGameEvent, unsigned short, bool (*)(CHLTVGameEvent const&, CHLTVGameEvent const&), CUtlMemory<UtlRBTreeNode_t<CHLTVGameEvent, unsigned short>, unsigned short> >::Unlink(unsigned short)
 T CUtlRBTree<CHLTVGameEvent, unsigned short, bool (*)(CHLTVGameEvent const&, CHLTVGameEvent const&), CUtlMemory<UtlRBTreeNode_t<CHLTVGameEvent, unsigned short>, unsigned short> >::~CUtlRBTree()
 T CUtlRBTree<CSceneEntity::SpeakEventSound_t, unsigned short, bool (*)(CSceneEntity::SpeakEventSound_t const&, CSceneEntity::SpeakEventSound_t const&), CUtlMemory<UtlRBTreeNode_t<CSceneEntity::SpeakEventSound_t, unsigned short>, unsigned short> >::FindInsertionPosition(CSceneEntity::SpeakEventSound_t const&, unsigned short&, bool&)
 T CUtlRBTree<CSceneEntity::SpeakEventSound_t, unsigned short, bool (*)(CSceneEntity::SpeakEventSound_t const&, CSceneEntity::SpeakEventSound_t const&), CUtlMemory<UtlRBTreeNode_t<CSceneEntity::SpeakEventSound_t, unsigned short>, unsigned short> >::FirstInorder() const
 T CUtlRBTree<CSceneEntity::SpeakEventSound_t, unsigned short, bool (*)(CSceneEntity::SpeakEventSound_t const&, CSceneEntity::SpeakEventSound_t const&), CUtlMemory<UtlRBTreeNode_t<CSceneEntity::SpeakEventSound_t, unsigned short>, unsigned short> >::Insert(CSceneEntity::SpeakEventSound_t const&)
 T CUtlRBTree<CSceneEntity::SpeakEventSound_t, unsigned short, bool (*)(CSceneEntity::SpeakEventSound_t const&, CSceneEntity::SpeakEventSound_t const&), CUtlMemory<UtlRBTreeNode_t<CSceneEntity::SpeakEventSound_t, unsigned short>, unsigned short> >::InsertRebalance(unsigned short)
 T CUtlRBTree<CSceneEntity::SpeakEventSound_t, unsigned short, bool (*)(CSceneEntity::SpeakEventSound_t const&, CSceneEntity::SpeakEventSound_t const&), CUtlMemory<UtlRBTreeNode_t<CSceneEntity::SpeakEventSound_t, unsigned short>, unsigned short> >::IsLeftChild(unsigned short) const
 T CUtlRBTree<CSceneEntity::SpeakEventSound_t, unsigned short, bool (*)(CSceneEntity::SpeakEventSound_t const&, CSceneEntity::SpeakEventSound_t const&), CUtlMemory<UtlRBTreeNode_t<CSceneEntity::SpeakEventSound_t, unsigned short>, unsigned short> >::IsRightChild(unsigned short) const
 T CUtlRBTree<CSceneEntity::SpeakEventSound_t, unsigned short, bool (*)(CSceneEntity::SpeakEventSound_t const&, CSceneEntity::SpeakEventSound_t const&), CUtlMemory<UtlRBTreeNode_t<CSceneEntity::SpeakEventSound_t, unsigned short>, unsigned short> >::NewNode()
 T CUtlRBTree<CSceneEntity::SpeakEventSound_t, unsigned short, bool (*)(CSceneEntity::SpeakEventSound_t const&, CSceneEntity::SpeakEventSound_t const&), CUtlMemory<UtlRBTreeNode_t<CSceneEntity::SpeakEventSound_t, unsigned short>, unsigned short> >::NextInorder(unsigned short) const
 T CUtlRBTree<CSceneEntity::SpeakEventSound_t, unsigned short, bool (*)(CSceneEntity::SpeakEventSound_t const&, CSceneEntity::SpeakEventSound_t const&), CUtlMemory<UtlRBTreeNode_t<CSceneEntity::SpeakEventSound_t, unsigned short>, unsigned short> >::RemoveAll()
 T CUtlRBTree<CSceneEntity::SpeakEventSound_t, unsigned short, bool (*)(CSceneEntity::SpeakEventSound_t const&, CSceneEntity::SpeakEventSound_t const&), CUtlMemory<UtlRBTreeNode_t<CSceneEntity::SpeakEventSound_t, unsigned short>, unsigned short> >::RotateLeft(unsigned short)
 T CUtlRBTree<CSceneEntity::SpeakEventSound_t, unsigned short, bool (*)(CSceneEntity::SpeakEventSound_t const&, CSceneEntity::SpeakEventSound_t const&), CUtlMemory<UtlRBTreeNode_t<CSceneEntity::SpeakEventSound_t, unsigned short>, unsigned short> >::RotateRight(unsigned short)
 T CUtlRBTree<CSceneEntity::SpeakEventSound_t, unsigned short, bool (*)(CSceneEntity::SpeakEventSound_t const&, CSceneEntity::SpeakEventSound_t const&), CUtlMemory<UtlRBTreeNode_t<CSceneEntity::SpeakEventSound_t, unsigned short>, unsigned short> >::~CUtlRBTree()
 T CUtlRBTree<CUtlCachedFileData<CModelSoundsCache>::ElementType_t, unsigned short, bool (*)(CUtlCachedFileData<CModelSoundsCache>::ElementType_t const&, CUtlCachedFileData<CModelSoundsCache>::ElementType_t const&), CUtlMemory<UtlRBTreeNode_t<CUtlCachedFileData<CModelSoundsCache>::ElementType_t, unsigned short>, unsigned short> >::Find(CUtlCachedFileData<CModelSoundsCache>::ElementType_t const&) const
 T CUtlRBTree<CUtlCachedFileData<CModelSoundsCache>::ElementType_t, unsigned short, bool (*)(CUtlCachedFileData<CModelSoundsCache>::ElementType_t const&, CUtlCachedFileData<CModelSoundsCache>::ElementType_t const&), CUtlMemory<UtlRBTreeNode_t<CUtlCachedFileData<CModelSoundsCache>::ElementType_t, unsigned short>, unsigned short> >::FindInsertionPosition(CUtlCachedFileData<CModelSoundsCache>::ElementType_t const&, unsigned short&, bool&)
 T CUtlRBTree<CUtlCachedFileData<CModelSoundsCache>::ElementType_t, unsigned short, bool (*)(CUtlCachedFileData<CModelSoundsCache>::ElementType_t const&, CUtlCachedFileData<CModelSoundsCache>::ElementType_t const&), CUtlMemory<UtlRBTreeNode_t<CUtlCachedFileData<CModelSoundsCache>::ElementType_t, unsigned short>, unsigned short> >::FirstInorder() const
 T CUtlRBTree<CUtlCachedFileData<CModelSoundsCache>::ElementType_t, unsigned short, bool (*)(CUtlCachedFileData<CModelSoundsCache>::ElementType_t const&, CUtlCachedFileData<CModelSoundsCache>::ElementType_t const&), CUtlMemory<UtlRBTreeNode_t<CUtlCachedFileData<CModelSoundsCache>::ElementType_t, unsigned short>, unsigned short> >::Insert(CUtlCachedFileData<CModelSoundsCache>::ElementType_t const&)
 T CUtlRBTree<CUtlCachedFileData<CModelSoundsCache>::ElementType_t, unsigned short, bool (*)(CUtlCachedFileData<CModelSoundsCache>::ElementType_t const&, CUtlCachedFileData<CModelSoundsCache>::ElementType_t const&), CUtlMemory<UtlRBTreeNode_t<CUtlCachedFileData<CModelSoundsCache>::ElementType_t, unsigned short>, unsigned short> >::InsertRebalance(unsigned short)
 T CUtlRBTree<CUtlCachedFileData<CModelSoundsCache>::ElementType_t, unsigned short, bool (*)(CUtlCachedFileData<CModelSoundsCache>::ElementType_t const&, CUtlCachedFileData<CModelSoundsCache>::ElementType_t const&), CUtlMemory<UtlRBTreeNode_t<CUtlCachedFileData<CModelSoundsCache>::ElementType_t, unsigned short>, unsigned short> >::IsLeftChild(unsigned short) const
 T CUtlRBTree<CUtlCachedFileData<CModelSoundsCache>::ElementType_t, unsigned short, bool (*)(CUtlCachedFileData<CModelSoundsCache>::ElementType_t const&, CUtlCachedFileData<CModelSoundsCache>::ElementType_t const&), CUtlMemory<UtlRBTreeNode_t<CUtlCachedFileData<CModelSoundsCache>::ElementType_t, unsigned short>, unsigned short> >::IsRightChild(unsigned short) const
 T CUtlRBTree<CUtlCachedFileData<CModelSoundsCache>::ElementType_t, unsigned short, bool (*)(CUtlCachedFileData<CModelSoundsCache>::ElementType_t const&, CUtlCachedFileData<CModelSoundsCache>::ElementType_t const&), CUtlMemory<UtlRBTreeNode_t<CUtlCachedFileData<CModelSoundsCache>::ElementType_t, unsigned short>, unsigned short> >::NewNode()
 T CUtlRBTree<CUtlCachedFileData<CModelSoundsCache>::ElementType_t, unsigned short, bool (*)(CUtlCachedFileData<CModelSoundsCache>::ElementType_t const&, CUtlCachedFileData<CModelSoundsCache>::ElementType_t const&), CUtlMemory<UtlRBTreeNode_t<CUtlCachedFileData<CModelSoundsCache>::ElementType_t, unsigned short>, unsigned short> >::NextInorder(unsigned short) const
 T CUtlRBTree<CUtlCachedFileData<CModelSoundsCache>::ElementType_t, unsigned short, bool (*)(CUtlCachedFileData<CModelSoundsCache>::ElementType_t const&, CUtlCachedFileData<CModelSoundsCache>::ElementType_t const&), CUtlMemory<UtlRBTreeNode_t<CUtlCachedFileData<CModelSoundsCache>::ElementType_t, unsigned short>, unsigned short> >::RemoveAll()
 T CUtlRBTree<CUtlCachedFileData<CModelSoundsCache>::ElementType_t, unsigned short, bool (*)(CUtlCachedFileData<CModelSoundsCache>::ElementType_t const&, CUtlCachedFileData<CModelSoundsCache>::ElementType_t const&), CUtlMemory<UtlRBTreeNode_t<CUtlCachedFileData<CModelSoundsCache>::ElementType_t, unsigned short>, unsigned short> >::RotateLeft(unsigned short)
 T CUtlRBTree<CUtlCachedFileData<CModelSoundsCache>::ElementType_t, unsigned short, bool (*)(CUtlCachedFileData<CModelSoundsCache>::ElementType_t const&, CUtlCachedFileData<CModelSoundsCache>::ElementType_t const&), CUtlMemory<UtlRBTreeNode_t<CUtlCachedFileData<CModelSoundsCache>::ElementType_t, unsigned short>, unsigned short> >::RotateRight(unsigned short)
 T CUtlRBTree<CUtlCachedFileData<CModelSoundsCache>::ElementType_t, unsigned short, bool (*)(CUtlCachedFileData<CModelSoundsCache>::ElementType_t const&, CUtlCachedFileData<CModelSoundsCache>::ElementType_t const&), CUtlMemory<UtlRBTreeNode_t<CUtlCachedFileData<CModelSoundsCache>::ElementType_t, unsigned short>, unsigned short> >::~CUtlRBTree()
 T CUtlRBTree<CUtlMap<CBaseEntity const*, float, unsigned short>::Node_t, unsigned short, CUtlMap<CBaseEntity const*, float, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<CBaseEntity const*, float, unsigned short>::Node_t, unsigned short>, unsigned short> >::Find(CUtlMap<CBaseEntity const*, float, unsigned short>::Node_t const&) const
 T CUtlRBTree<CUtlMap<CBaseEntity const*, float, unsigned short>::Node_t, unsigned short, CUtlMap<CBaseEntity const*, float, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<CBaseEntity const*, float, unsigned short>::Node_t, unsigned short>, unsigned short> >::FindInsertionPosition(CUtlMap<CBaseEntity const*, float, unsigned short>::Node_t const&, unsigned short&, bool&)
 T CUtlRBTree<CUtlMap<CBaseEntity const*, float, unsigned short>::Node_t, unsigned short, CUtlMap<CBaseEntity const*, float, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<CBaseEntity const*, float, unsigned short>::Node_t, unsigned short>, unsigned short> >::Insert(CUtlMap<CBaseEntity const*, float, unsigned short>::Node_t const&)
 T CUtlRBTree<CUtlMap<CBaseEntity const*, float, unsigned short>::Node_t, unsigned short, CUtlMap<CBaseEntity const*, float, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<CBaseEntity const*, float, unsigned short>::Node_t, unsigned short>, unsigned short> >::InsertRebalance(unsigned short)
 T CUtlRBTree<CUtlMap<CBaseEntity const*, float, unsigned short>::Node_t, unsigned short, CUtlMap<CBaseEntity const*, float, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<CBaseEntity const*, float, unsigned short>::Node_t, unsigned short>, unsigned short> >::IsLeftChild(unsigned short) const
 T CUtlRBTree<CUtlMap<CBaseEntity const*, float, unsigned short>::Node_t, unsigned short, CUtlMap<CBaseEntity const*, float, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<CBaseEntity const*, float, unsigned short>::Node_t, unsigned short>, unsigned short> >::IsRightChild(unsigned short) const
 T CUtlRBTree<CUtlMap<CBaseEntity const*, float, unsigned short>::Node_t, unsigned short, CUtlMap<CBaseEntity const*, float, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<CBaseEntity const*, float, unsigned short>::Node_t, unsigned short>, unsigned short> >::NewNode()
 T CUtlRBTree<CUtlMap<CBaseEntity const*, float, unsigned short>::Node_t, unsigned short, CUtlMap<CBaseEntity const*, float, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<CBaseEntity const*, float, unsigned short>::Node_t, unsigned short>, unsigned short> >::RemoveAll()
 T CUtlRBTree<CUtlMap<CBaseEntity const*, float, unsigned short>::Node_t, unsigned short, CUtlMap<CBaseEntity const*, float, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<CBaseEntity const*, float, unsigned short>::Node_t, unsigned short>, unsigned short> >::RotateLeft(unsigned short)
 T CUtlRBTree<CUtlMap<CBaseEntity const*, float, unsigned short>::Node_t, unsigned short, CUtlMap<CBaseEntity const*, float, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<CBaseEntity const*, float, unsigned short>::Node_t, unsigned short>, unsigned short> >::RotateRight(unsigned short)
 T CUtlRBTree<CUtlMap<CBaseEntity const*, float, unsigned short>::Node_t, unsigned short, CUtlMap<CBaseEntity const*, float, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<CBaseEntity const*, float, unsigned short>::Node_t, unsigned short>, unsigned short> >::~CUtlRBTree()
 T CUtlRBTree<CUtlMap<CBaseEntity*, AI_EnemyInfo_t*, unsigned char>::Node_t, unsigned char, CUtlMap<CBaseEntity*, AI_EnemyInfo_t*, unsigned char>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<CBaseEntity*, AI_EnemyInfo_t*, unsigned char>::Node_t, unsigned char>, unsigned char> >::Find(CUtlMap<CBaseEntity*, AI_EnemyInfo_t*, unsigned char>::Node_t const&) const
 T CUtlRBTree<CUtlMap<CBaseEntity*, AI_EnemyInfo_t*, unsigned char>::Node_t, unsigned char, CUtlMap<CBaseEntity*, AI_EnemyInfo_t*, unsigned char>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<CBaseEntity*, AI_EnemyInfo_t*, unsigned char>::Node_t, unsigned char>, unsigned char> >::FindInsertionPosition(CUtlMap<CBaseEntity*, AI_EnemyInfo_t*, unsigned char>::Node_t const&, unsigned char&, bool&)
 T CUtlRBTree<CUtlMap<CBaseEntity*, AI_EnemyInfo_t*, unsigned char>::Node_t, unsigned char, CUtlMap<CBaseEntity*, AI_EnemyInfo_t*, unsigned char>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<CBaseEntity*, AI_EnemyInfo_t*, unsigned char>::Node_t, unsigned char>, unsigned char> >::FirstInorder() const
 T CUtlRBTree<CUtlMap<CBaseEntity*, AI_EnemyInfo_t*, unsigned char>::Node_t, unsigned char, CUtlMap<CBaseEntity*, AI_EnemyInfo_t*, unsigned char>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<CBaseEntity*, AI_EnemyInfo_t*, unsigned char>::Node_t, unsigned char>, unsigned char> >::Insert(CUtlMap<CBaseEntity*, AI_EnemyInfo_t*, unsigned char>::Node_t const&)
 T CUtlRBTree<CUtlMap<CBaseEntity*, AI_EnemyInfo_t*, unsigned char>::Node_t, unsigned char, CUtlMap<CBaseEntity*, AI_EnemyInfo_t*, unsigned char>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<CBaseEntity*, AI_EnemyInfo_t*, unsigned char>::Node_t, unsigned char>, unsigned char> >::InsertRebalance(unsigned char)
 T CUtlRBTree<CUtlMap<CBaseEntity*, AI_EnemyInfo_t*, unsigned char>::Node_t, unsigned char, CUtlMap<CBaseEntity*, AI_EnemyInfo_t*, unsigned char>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<CBaseEntity*, AI_EnemyInfo_t*, unsigned char>::Node_t, unsigned char>, unsigned char> >::IsLeftChild(unsigned char) const
 T CUtlRBTree<CUtlMap<CBaseEntity*, AI_EnemyInfo_t*, unsigned char>::Node_t, unsigned char, CUtlMap<CBaseEntity*, AI_EnemyInfo_t*, unsigned char>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<CBaseEntity*, AI_EnemyInfo_t*, unsigned char>::Node_t, unsigned char>, unsigned char> >::IsRightChild(unsigned char) const
 T CUtlRBTree<CUtlMap<CBaseEntity*, AI_EnemyInfo_t*, unsigned char>::Node_t, unsigned char, CUtlMap<CBaseEntity*, AI_EnemyInfo_t*, unsigned char>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<CBaseEntity*, AI_EnemyInfo_t*, unsigned char>::Node_t, unsigned char>, unsigned char> >::NewNode()
 T CUtlRBTree<CUtlMap<CBaseEntity*, AI_EnemyInfo_t*, unsigned char>::Node_t, unsigned char, CUtlMap<CBaseEntity*, AI_EnemyInfo_t*, unsigned char>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<CBaseEntity*, AI_EnemyInfo_t*, unsigned char>::Node_t, unsigned char>, unsigned char> >::NextInorder(unsigned char) const
 T CUtlRBTree<CUtlMap<CBaseEntity*, AI_EnemyInfo_t*, unsigned char>::Node_t, unsigned char, CUtlMap<CBaseEntity*, AI_EnemyInfo_t*, unsigned char>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<CBaseEntity*, AI_EnemyInfo_t*, unsigned char>::Node_t, unsigned char>, unsigned char> >::RemoveAll()
 T CUtlRBTree<CUtlMap<CBaseEntity*, AI_EnemyInfo_t*, unsigned char>::Node_t, unsigned char, CUtlMap<CBaseEntity*, AI_EnemyInfo_t*, unsigned char>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<CBaseEntity*, AI_EnemyInfo_t*, unsigned char>::Node_t, unsigned char>, unsigned char> >::RemoveRebalance(unsigned char)
 T CUtlRBTree<CUtlMap<CBaseEntity*, AI_EnemyInfo_t*, unsigned char>::Node_t, unsigned char, CUtlMap<CBaseEntity*, AI_EnemyInfo_t*, unsigned char>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<CBaseEntity*, AI_EnemyInfo_t*, unsigned char>::Node_t, unsigned char>, unsigned char> >::RotateLeft(unsigned char)
 T CUtlRBTree<CUtlMap<CBaseEntity*, AI_EnemyInfo_t*, unsigned char>::Node_t, unsigned char, CUtlMap<CBaseEntity*, AI_EnemyInfo_t*, unsigned char>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<CBaseEntity*, AI_EnemyInfo_t*, unsigned char>::Node_t, unsigned char>, unsigned char> >::RotateRight(unsigned char)
 T CUtlRBTree<CUtlMap<CBaseEntity*, AI_EnemyInfo_t*, unsigned char>::Node_t, unsigned char, CUtlMap<CBaseEntity*, AI_EnemyInfo_t*, unsigned char>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<CBaseEntity*, AI_EnemyInfo_t*, unsigned char>::Node_t, unsigned char>, unsigned char> >::Unlink(unsigned char)
 T CUtlRBTree<CUtlMap<CBaseEntity*, AI_EnemyInfo_t*, unsigned char>::Node_t, unsigned char, CUtlMap<CBaseEntity*, AI_EnemyInfo_t*, unsigned char>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<CBaseEntity*, AI_EnemyInfo_t*, unsigned char>::Node_t, unsigned char>, unsigned char> >::~CUtlRBTree()
 T CUtlRBTree<CUtlMap<CBaseEntity*, CPhysSaveRestoreBlockHandler::CEntityRestoreSet*, unsigned short>::Node_t, unsigned short, CUtlMap<CBaseEntity*, CPhysSaveRestoreBlockHandler::CEntityRestoreSet*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<CBaseEntity*, CPhysSaveRestoreBlockHandler::CEntityRestoreSet*, unsigned short>::Node_t, unsigned short>, unsigned short> >::Find(CUtlMap<CBaseEntity*, CPhysSaveRestoreBlockHandler::CEntityRestoreSet*, unsigned short>::Node_t const&) const
 T CUtlRBTree<CUtlMap<CBaseEntity*, CPhysSaveRestoreBlockHandler::CEntityRestoreSet*, unsigned short>::Node_t, unsigned short, CUtlMap<CBaseEntity*, CPhysSaveRestoreBlockHandler::CEntityRestoreSet*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<CBaseEntity*, CPhysSaveRestoreBlockHandler::CEntityRestoreSet*, unsigned short>::Node_t, unsigned short>, unsigned short> >::FindInsertionPosition(CUtlMap<CBaseEntity*, CPhysSaveRestoreBlockHandler::CEntityRestoreSet*, unsigned short>::Node_t const&, unsigned short&, bool&)
 T CUtlRBTree<CUtlMap<CBaseEntity*, CPhysSaveRestoreBlockHandler::CEntityRestoreSet*, unsigned short>::Node_t, unsigned short, CUtlMap<CBaseEntity*, CPhysSaveRestoreBlockHandler::CEntityRestoreSet*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<CBaseEntity*, CPhysSaveRestoreBlockHandler::CEntityRestoreSet*, unsigned short>::Node_t, unsigned short>, unsigned short> >::FirstInorder() const
 T CUtlRBTree<CUtlMap<CBaseEntity*, CPhysSaveRestoreBlockHandler::CEntityRestoreSet*, unsigned short>::Node_t, unsigned short, CUtlMap<CBaseEntity*, CPhysSaveRestoreBlockHandler::CEntityRestoreSet*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<CBaseEntity*, CPhysSaveRestoreBlockHandler::CEntityRestoreSet*, unsigned short>::Node_t, unsigned short>, unsigned short> >::Insert(CUtlMap<CBaseEntity*, CPhysSaveRestoreBlockHandler::CEntityRestoreSet*, unsigned short>::Node_t const&)
 T CUtlRBTree<CUtlMap<CBaseEntity*, CPhysSaveRestoreBlockHandler::CEntityRestoreSet*, unsigned short>::Node_t, unsigned short, CUtlMap<CBaseEntity*, CPhysSaveRestoreBlockHandler::CEntityRestoreSet*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<CBaseEntity*, CPhysSaveRestoreBlockHandler::CEntityRestoreSet*, unsigned short>::Node_t, unsigned short>, unsigned short> >::InsertRebalance(unsigned short)
 T CUtlRBTree<CUtlMap<CBaseEntity*, CPhysSaveRestoreBlockHandler::CEntityRestoreSet*, unsigned short>::Node_t, unsigned short, CUtlMap<CBaseEntity*, CPhysSaveRestoreBlockHandler::CEntityRestoreSet*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<CBaseEntity*, CPhysSaveRestoreBlockHandler::CEntityRestoreSet*, unsigned short>::Node_t, unsigned short>, unsigned short> >::IsLeftChild(unsigned short) const
 T CUtlRBTree<CUtlMap<CBaseEntity*, CPhysSaveRestoreBlockHandler::CEntityRestoreSet*, unsigned short>::Node_t, unsigned short, CUtlMap<CBaseEntity*, CPhysSaveRestoreBlockHandler::CEntityRestoreSet*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<CBaseEntity*, CPhysSaveRestoreBlockHandler::CEntityRestoreSet*, unsigned short>::Node_t, unsigned short>, unsigned short> >::IsRightChild(unsigned short) const
 T CUtlRBTree<CUtlMap<CBaseEntity*, CPhysSaveRestoreBlockHandler::CEntityRestoreSet*, unsigned short>::Node_t, unsigned short, CUtlMap<CBaseEntity*, CPhysSaveRestoreBlockHandler::CEntityRestoreSet*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<CBaseEntity*, CPhysSaveRestoreBlockHandler::CEntityRestoreSet*, unsigned short>::Node_t, unsigned short>, unsigned short> >::NewNode()
 T CUtlRBTree<CUtlMap<CBaseEntity*, CPhysSaveRestoreBlockHandler::CEntityRestoreSet*, unsigned short>::Node_t, unsigned short, CUtlMap<CBaseEntity*, CPhysSaveRestoreBlockHandler::CEntityRestoreSet*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<CBaseEntity*, CPhysSaveRestoreBlockHandler::CEntityRestoreSet*, unsigned short>::Node_t, unsigned short>, unsigned short> >::NextInorder(unsigned short) const
 T CUtlRBTree<CUtlMap<CBaseEntity*, CPhysSaveRestoreBlockHandler::CEntityRestoreSet*, unsigned short>::Node_t, unsigned short, CUtlMap<CBaseEntity*, CPhysSaveRestoreBlockHandler::CEntityRestoreSet*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<CBaseEntity*, CPhysSaveRestoreBlockHandler::CEntityRestoreSet*, unsigned short>::Node_t, unsigned short>, unsigned short> >::RemoveAll()
 T CUtlRBTree<CUtlMap<CBaseEntity*, CPhysSaveRestoreBlockHandler::CEntityRestoreSet*, unsigned short>::Node_t, unsigned short, CUtlMap<CBaseEntity*, CPhysSaveRestoreBlockHandler::CEntityRestoreSet*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<CBaseEntity*, CPhysSaveRestoreBlockHandler::CEntityRestoreSet*, unsigned short>::Node_t, unsigned short>, unsigned short> >::RemoveRebalance(unsigned short)
 T CUtlRBTree<CUtlMap<CBaseEntity*, CPhysSaveRestoreBlockHandler::CEntityRestoreSet*, unsigned short>::Node_t, unsigned short, CUtlMap<CBaseEntity*, CPhysSaveRestoreBlockHandler::CEntityRestoreSet*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<CBaseEntity*, CPhysSaveRestoreBlockHandler::CEntityRestoreSet*, unsigned short>::Node_t, unsigned short>, unsigned short> >::RotateLeft(unsigned short)
 T CUtlRBTree<CUtlMap<CBaseEntity*, CPhysSaveRestoreBlockHandler::CEntityRestoreSet*, unsigned short>::Node_t, unsigned short, CUtlMap<CBaseEntity*, CPhysSaveRestoreBlockHandler::CEntityRestoreSet*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<CBaseEntity*, CPhysSaveRestoreBlockHandler::CEntityRestoreSet*, unsigned short>::Node_t, unsigned short>, unsigned short> >::RotateRight(unsigned short)
 T CUtlRBTree<CUtlMap<CBaseEntity*, CPhysSaveRestoreBlockHandler::CEntityRestoreSet*, unsigned short>::Node_t, unsigned short, CUtlMap<CBaseEntity*, CPhysSaveRestoreBlockHandler::CEntityRestoreSet*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<CBaseEntity*, CPhysSaveRestoreBlockHandler::CEntityRestoreSet*, unsigned short>::Node_t, unsigned short>, unsigned short> >::Unlink(unsigned short)
 T CUtlRBTree<CUtlMap<CBaseEntity*, CPhysSaveRestoreBlockHandler::CEntityRestoreSet*, unsigned short>::Node_t, unsigned short, CUtlMap<CBaseEntity*, CPhysSaveRestoreBlockHandler::CEntityRestoreSet*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<CBaseEntity*, CPhysSaveRestoreBlockHandler::CEntityRestoreSet*, unsigned short>::Node_t, unsigned short>, unsigned short> >::~CUtlRBTree()
 T CUtlRBTree<CUtlMap<CBaseEntity*, int, unsigned short>::Node_t, unsigned short, CUtlMap<CBaseEntity*, int, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<CBaseEntity*, int, unsigned short>::Node_t, unsigned short>, unsigned short> >::Find(CUtlMap<CBaseEntity*, int, unsigned short>::Node_t const&) const
 T CUtlRBTree<CUtlMap<CBaseEntity*, int, unsigned short>::Node_t, unsigned short, CUtlMap<CBaseEntity*, int, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<CBaseEntity*, int, unsigned short>::Node_t, unsigned short>, unsigned short> >::FindInsertionPosition(CUtlMap<CBaseEntity*, int, unsigned short>::Node_t const&, unsigned short&, bool&)
 T CUtlRBTree<CUtlMap<CBaseEntity*, int, unsigned short>::Node_t, unsigned short, CUtlMap<CBaseEntity*, int, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<CBaseEntity*, int, unsigned short>::Node_t, unsigned short>, unsigned short> >::Insert(CUtlMap<CBaseEntity*, int, unsigned short>::Node_t const&)
 T CUtlRBTree<CUtlMap<CBaseEntity*, int, unsigned short>::Node_t, unsigned short, CUtlMap<CBaseEntity*, int, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<CBaseEntity*, int, unsigned short>::Node_t, unsigned short>, unsigned short> >::InsertRebalance(unsigned short)
 T CUtlRBTree<CUtlMap<CBaseEntity*, int, unsigned short>::Node_t, unsigned short, CUtlMap<CBaseEntity*, int, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<CBaseEntity*, int, unsigned short>::Node_t, unsigned short>, unsigned short> >::IsLeftChild(unsigned short) const
 T CUtlRBTree<CUtlMap<CBaseEntity*, int, unsigned short>::Node_t, unsigned short, CUtlMap<CBaseEntity*, int, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<CBaseEntity*, int, unsigned short>::Node_t, unsigned short>, unsigned short> >::IsRightChild(unsigned short) const
 T CUtlRBTree<CUtlMap<CBaseEntity*, int, unsigned short>::Node_t, unsigned short, CUtlMap<CBaseEntity*, int, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<CBaseEntity*, int, unsigned short>::Node_t, unsigned short>, unsigned short> >::NewNode()
 T CUtlRBTree<CUtlMap<CBaseEntity*, int, unsigned short>::Node_t, unsigned short, CUtlMap<CBaseEntity*, int, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<CBaseEntity*, int, unsigned short>::Node_t, unsigned short>, unsigned short> >::RemoveAll()
 T CUtlRBTree<CUtlMap<CBaseEntity*, int, unsigned short>::Node_t, unsigned short, CUtlMap<CBaseEntity*, int, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<CBaseEntity*, int, unsigned short>::Node_t, unsigned short>, unsigned short> >::RotateLeft(unsigned short)
 T CUtlRBTree<CUtlMap<CBaseEntity*, int, unsigned short>::Node_t, unsigned short, CUtlMap<CBaseEntity*, int, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<CBaseEntity*, int, unsigned short>::Node_t, unsigned short>, unsigned short> >::RotateRight(unsigned short)
 T CUtlRBTree<CUtlMap<CBaseEntity*, int, unsigned short>::Node_t, unsigned short, CUtlMap<CBaseEntity*, int, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<CBaseEntity*, int, unsigned short>::Node_t, unsigned short>, unsigned short> >::~CUtlRBTree()
 T CUtlRBTree<CUtlMap<CChoreoActor*, CBaseFlex*, unsigned short>::Node_t, unsigned short, CUtlMap<CChoreoActor*, CBaseFlex*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<CChoreoActor*, CBaseFlex*, unsigned short>::Node_t, unsigned short>, unsigned short> >::Find(CUtlMap<CChoreoActor*, CBaseFlex*, unsigned short>::Node_t const&) const
 T CUtlRBTree<CUtlMap<CChoreoActor*, CBaseFlex*, unsigned short>::Node_t, unsigned short, CUtlMap<CChoreoActor*, CBaseFlex*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<CChoreoActor*, CBaseFlex*, unsigned short>::Node_t, unsigned short>, unsigned short> >::FindInsertionPosition(CUtlMap<CChoreoActor*, CBaseFlex*, unsigned short>::Node_t const&, unsigned short&, bool&)
 T CUtlRBTree<CUtlMap<CChoreoActor*, CBaseFlex*, unsigned short>::Node_t, unsigned short, CUtlMap<CChoreoActor*, CBaseFlex*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<CChoreoActor*, CBaseFlex*, unsigned short>::Node_t, unsigned short>, unsigned short> >::Insert(CUtlMap<CChoreoActor*, CBaseFlex*, unsigned short>::Node_t const&)
 T CUtlRBTree<CUtlMap<CChoreoActor*, CBaseFlex*, unsigned short>::Node_t, unsigned short, CUtlMap<CChoreoActor*, CBaseFlex*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<CChoreoActor*, CBaseFlex*, unsigned short>::Node_t, unsigned short>, unsigned short> >::InsertRebalance(unsigned short)
 T CUtlRBTree<CUtlMap<CChoreoActor*, CBaseFlex*, unsigned short>::Node_t, unsigned short, CUtlMap<CChoreoActor*, CBaseFlex*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<CChoreoActor*, CBaseFlex*, unsigned short>::Node_t, unsigned short>, unsigned short> >::IsLeftChild(unsigned short) const
 T CUtlRBTree<CUtlMap<CChoreoActor*, CBaseFlex*, unsigned short>::Node_t, unsigned short, CUtlMap<CChoreoActor*, CBaseFlex*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<CChoreoActor*, CBaseFlex*, unsigned short>::Node_t, unsigned short>, unsigned short> >::IsRightChild(unsigned short) const
 T CUtlRBTree<CUtlMap<CChoreoActor*, CBaseFlex*, unsigned short>::Node_t, unsigned short, CUtlMap<CChoreoActor*, CBaseFlex*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<CChoreoActor*, CBaseFlex*, unsigned short>::Node_t, unsigned short>, unsigned short> >::NewNode()
 T CUtlRBTree<CUtlMap<CChoreoActor*, CBaseFlex*, unsigned short>::Node_t, unsigned short, CUtlMap<CChoreoActor*, CBaseFlex*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<CChoreoActor*, CBaseFlex*, unsigned short>::Node_t, unsigned short>, unsigned short> >::RemoveAll()
 T CUtlRBTree<CUtlMap<CChoreoActor*, CBaseFlex*, unsigned short>::Node_t, unsigned short, CUtlMap<CChoreoActor*, CBaseFlex*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<CChoreoActor*, CBaseFlex*, unsigned short>::Node_t, unsigned short>, unsigned short> >::RotateLeft(unsigned short)
 T CUtlRBTree<CUtlMap<CChoreoActor*, CBaseFlex*, unsigned short>::Node_t, unsigned short, CUtlMap<CChoreoActor*, CBaseFlex*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<CChoreoActor*, CBaseFlex*, unsigned short>::Node_t, unsigned short>, unsigned short> >::RotateRight(unsigned short)
 T CUtlRBTree<CUtlMap<CChoreoActor*, CBaseFlex*, unsigned short>::Node_t, unsigned short, CUtlMap<CChoreoActor*, CBaseFlex*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<CChoreoActor*, CBaseFlex*, unsigned short>::Node_t, unsigned short>, unsigned short> >::~CUtlRBTree()
 T CUtlRBTree<CUtlMap<CMsgTFXPSource_XPSourceType, float, unsigned short>::Node_t, unsigned short, CUtlMap<CMsgTFXPSource_XPSourceType, float, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<CMsgTFXPSource_XPSourceType, float, unsigned short>::Node_t, unsigned short>, unsigned short> >::Find(CUtlMap<CMsgTFXPSource_XPSourceType, float, unsigned short>::Node_t const&) const
 T CUtlRBTree<CUtlMap<CMsgTFXPSource_XPSourceType, float, unsigned short>::Node_t, unsigned short, CUtlMap<CMsgTFXPSource_XPSourceType, float, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<CMsgTFXPSource_XPSourceType, float, unsigned short>::Node_t, unsigned short>, unsigned short> >::FindInsertionPosition(CUtlMap<CMsgTFXPSource_XPSourceType, float, unsigned short>::Node_t const&, unsigned short&, bool&)
 T CUtlRBTree<CUtlMap<CMsgTFXPSource_XPSourceType, float, unsigned short>::Node_t, unsigned short, CUtlMap<CMsgTFXPSource_XPSourceType, float, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<CMsgTFXPSource_XPSourceType, float, unsigned short>::Node_t, unsigned short>, unsigned short> >::Insert(CUtlMap<CMsgTFXPSource_XPSourceType, float, unsigned short>::Node_t const&)
 T CUtlRBTree<CUtlMap<CMsgTFXPSource_XPSourceType, float, unsigned short>::Node_t, unsigned short, CUtlMap<CMsgTFXPSource_XPSourceType, float, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<CMsgTFXPSource_XPSourceType, float, unsigned short>::Node_t, unsigned short>, unsigned short> >::InsertRebalance(unsigned short)
 T CUtlRBTree<CUtlMap<CMsgTFXPSource_XPSourceType, float, unsigned short>::Node_t, unsigned short, CUtlMap<CMsgTFXPSource_XPSourceType, float, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<CMsgTFXPSource_XPSourceType, float, unsigned short>::Node_t, unsigned short>, unsigned short> >::IsLeftChild(unsigned short) const
 T CUtlRBTree<CUtlMap<CMsgTFXPSource_XPSourceType, float, unsigned short>::Node_t, unsigned short, CUtlMap<CMsgTFXPSource_XPSourceType, float, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<CMsgTFXPSource_XPSourceType, float, unsigned short>::Node_t, unsigned short>, unsigned short> >::IsRightChild(unsigned short) const
 T CUtlRBTree<CUtlMap<CMsgTFXPSource_XPSourceType, float, unsigned short>::Node_t, unsigned short, CUtlMap<CMsgTFXPSource_XPSourceType, float, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<CMsgTFXPSource_XPSourceType, float, unsigned short>::Node_t, unsigned short>, unsigned short> >::NewNode()
 T CUtlRBTree<CUtlMap<CMsgTFXPSource_XPSourceType, float, unsigned short>::Node_t, unsigned short, CUtlMap<CMsgTFXPSource_XPSourceType, float, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<CMsgTFXPSource_XPSourceType, float, unsigned short>::Node_t, unsigned short>, unsigned short> >::RemoveAll()
 T CUtlRBTree<CUtlMap<CMsgTFXPSource_XPSourceType, float, unsigned short>::Node_t, unsigned short, CUtlMap<CMsgTFXPSource_XPSourceType, float, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<CMsgTFXPSource_XPSourceType, float, unsigned short>::Node_t, unsigned short>, unsigned short> >::RotateLeft(unsigned short)
 T CUtlRBTree<CUtlMap<CMsgTFXPSource_XPSourceType, float, unsigned short>::Node_t, unsigned short, CUtlMap<CMsgTFXPSource_XPSourceType, float, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<CMsgTFXPSource_XPSourceType, float, unsigned short>::Node_t, unsigned short>, unsigned short> >::RotateRight(unsigned short)
 T CUtlRBTree<CUtlMap<CMsgTFXPSource_XPSourceType, float, unsigned short>::Node_t, unsigned short, CUtlMap<CMsgTFXPSource_XPSourceType, float, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<CMsgTFXPSource_XPSourceType, float, unsigned short>::Node_t, unsigned short>, unsigned short> >::~CUtlRBTree()
 T CUtlRBTree<CUtlMap<CPhysCollide const*, BBox_t, unsigned short>::Node_t, unsigned short, CUtlMap<CPhysCollide const*, BBox_t, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<CPhysCollide const*, BBox_t, unsigned short>::Node_t, unsigned short>, unsigned short> >::Find(CUtlMap<CPhysCollide const*, BBox_t, unsigned short>::Node_t const&) const
 T CUtlRBTree<CUtlMap<CPhysCollide const*, BBox_t, unsigned short>::Node_t, unsigned short, CUtlMap<CPhysCollide const*, BBox_t, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<CPhysCollide const*, BBox_t, unsigned short>::Node_t, unsigned short>, unsigned short> >::FindInsertionPosition(CUtlMap<CPhysCollide const*, BBox_t, unsigned short>::Node_t const&, unsigned short&, bool&)
 T CUtlRBTree<CUtlMap<CPhysCollide const*, BBox_t, unsigned short>::Node_t, unsigned short, CUtlMap<CPhysCollide const*, BBox_t, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<CPhysCollide const*, BBox_t, unsigned short>::Node_t, unsigned short>, unsigned short> >::Insert(CUtlMap<CPhysCollide const*, BBox_t, unsigned short>::Node_t const&)
 T CUtlRBTree<CUtlMap<CPhysCollide const*, BBox_t, unsigned short>::Node_t, unsigned short, CUtlMap<CPhysCollide const*, BBox_t, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<CPhysCollide const*, BBox_t, unsigned short>::Node_t, unsigned short>, unsigned short> >::InsertRebalance(unsigned short)
 T CUtlRBTree<CUtlMap<CPhysCollide const*, BBox_t, unsigned short>::Node_t, unsigned short, CUtlMap<CPhysCollide const*, BBox_t, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<CPhysCollide const*, BBox_t, unsigned short>::Node_t, unsigned short>, unsigned short> >::IsLeftChild(unsigned short) const
 T CUtlRBTree<CUtlMap<CPhysCollide const*, BBox_t, unsigned short>::Node_t, unsigned short, CUtlMap<CPhysCollide const*, BBox_t, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<CPhysCollide const*, BBox_t, unsigned short>::Node_t, unsigned short>, unsigned short> >::IsRightChild(unsigned short) const
 T CUtlRBTree<CUtlMap<CPhysCollide const*, BBox_t, unsigned short>::Node_t, unsigned short, CUtlMap<CPhysCollide const*, BBox_t, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<CPhysCollide const*, BBox_t, unsigned short>::Node_t, unsigned short>, unsigned short> >::NewNode()
 T CUtlRBTree<CUtlMap<CPhysCollide const*, BBox_t, unsigned short>::Node_t, unsigned short, CUtlMap<CPhysCollide const*, BBox_t, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<CPhysCollide const*, BBox_t, unsigned short>::Node_t, unsigned short>, unsigned short> >::RemoveAll()
 T CUtlRBTree<CUtlMap<CPhysCollide const*, BBox_t, unsigned short>::Node_t, unsigned short, CUtlMap<CPhysCollide const*, BBox_t, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<CPhysCollide const*, BBox_t, unsigned short>::Node_t, unsigned short>, unsigned short> >::RotateLeft(unsigned short)
 T CUtlRBTree<CUtlMap<CPhysCollide const*, BBox_t, unsigned short>::Node_t, unsigned short, CUtlMap<CPhysCollide const*, BBox_t, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<CPhysCollide const*, BBox_t, unsigned short>::Node_t, unsigned short>, unsigned short> >::RotateRight(unsigned short)
 T CUtlRBTree<CUtlMap<CPhysCollide const*, BBox_t, unsigned short>::Node_t, unsigned short, CUtlMap<CPhysCollide const*, BBox_t, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<CPhysCollide const*, BBox_t, unsigned short>::Node_t, unsigned short>, unsigned short> >::~CUtlRBTree()
 T CUtlRBTree<CUtlMap<CSteamID, GCSDK::CGCClientSharedObjectCache*, unsigned short>::Node_t, unsigned short, CUtlMap<CSteamID, GCSDK::CGCClientSharedObjectCache*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<CSteamID, GCSDK::CGCClientSharedObjectCache*, unsigned short>::Node_t, unsigned short>, unsigned short> >::Find(CUtlMap<CSteamID, GCSDK::CGCClientSharedObjectCache*, unsigned short>::Node_t const&) const
 T CUtlRBTree<CUtlMap<CSteamID, GCSDK::CGCClientSharedObjectCache*, unsigned short>::Node_t, unsigned short, CUtlMap<CSteamID, GCSDK::CGCClientSharedObjectCache*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<CSteamID, GCSDK::CGCClientSharedObjectCache*, unsigned short>::Node_t, unsigned short>, unsigned short> >::FindInsertionPosition(CUtlMap<CSteamID, GCSDK::CGCClientSharedObjectCache*, unsigned short>::Node_t const&, unsigned short&, bool&)
 T CUtlRBTree<CUtlMap<CSteamID, GCSDK::CGCClientSharedObjectCache*, unsigned short>::Node_t, unsigned short, CUtlMap<CSteamID, GCSDK::CGCClientSharedObjectCache*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<CSteamID, GCSDK::CGCClientSharedObjectCache*, unsigned short>::Node_t, unsigned short>, unsigned short> >::FirstInorder() const
 T CUtlRBTree<CUtlMap<CSteamID, GCSDK::CGCClientSharedObjectCache*, unsigned short>::Node_t, unsigned short, CUtlMap<CSteamID, GCSDK::CGCClientSharedObjectCache*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<CSteamID, GCSDK::CGCClientSharedObjectCache*, unsigned short>::Node_t, unsigned short>, unsigned short> >::Insert(CUtlMap<CSteamID, GCSDK::CGCClientSharedObjectCache*, unsigned short>::Node_t const&)
 T CUtlRBTree<CUtlMap<CSteamID, GCSDK::CGCClientSharedObjectCache*, unsigned short>::Node_t, unsigned short, CUtlMap<CSteamID, GCSDK::CGCClientSharedObjectCache*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<CSteamID, GCSDK::CGCClientSharedObjectCache*, unsigned short>::Node_t, unsigned short>, unsigned short> >::InsertRebalance(unsigned short)
 T CUtlRBTree<CUtlMap<CSteamID, GCSDK::CGCClientSharedObjectCache*, unsigned short>::Node_t, unsigned short, CUtlMap<CSteamID, GCSDK::CGCClientSharedObjectCache*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<CSteamID, GCSDK::CGCClientSharedObjectCache*, unsigned short>::Node_t, unsigned short>, unsigned short> >::IsLeftChild(unsigned short) const
 T CUtlRBTree<CUtlMap<CSteamID, GCSDK::CGCClientSharedObjectCache*, unsigned short>::Node_t, unsigned short, CUtlMap<CSteamID, GCSDK::CGCClientSharedObjectCache*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<CSteamID, GCSDK::CGCClientSharedObjectCache*, unsigned short>::Node_t, unsigned short>, unsigned short> >::IsRightChild(unsigned short) const
 T CUtlRBTree<CUtlMap<CSteamID, GCSDK::CGCClientSharedObjectCache*, unsigned short>::Node_t, unsigned short, CUtlMap<CSteamID, GCSDK::CGCClientSharedObjectCache*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<CSteamID, GCSDK::CGCClientSharedObjectCache*, unsigned short>::Node_t, unsigned short>, unsigned short> >::NewNode()
 T CUtlRBTree<CUtlMap<CSteamID, GCSDK::CGCClientSharedObjectCache*, unsigned short>::Node_t, unsigned short, CUtlMap<CSteamID, GCSDK::CGCClientSharedObjectCache*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<CSteamID, GCSDK::CGCClientSharedObjectCache*, unsigned short>::Node_t, unsigned short>, unsigned short> >::NextInorder(unsigned short) const
 T CUtlRBTree<CUtlMap<CSteamID, GCSDK::CGCClientSharedObjectCache*, unsigned short>::Node_t, unsigned short, CUtlMap<CSteamID, GCSDK::CGCClientSharedObjectCache*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<CSteamID, GCSDK::CGCClientSharedObjectCache*, unsigned short>::Node_t, unsigned short>, unsigned short> >::RemoveAll()
 T CUtlRBTree<CUtlMap<CSteamID, GCSDK::CGCClientSharedObjectCache*, unsigned short>::Node_t, unsigned short, CUtlMap<CSteamID, GCSDK::CGCClientSharedObjectCache*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<CSteamID, GCSDK::CGCClientSharedObjectCache*, unsigned short>::Node_t, unsigned short>, unsigned short> >::RemoveRebalance(unsigned short)
 T CUtlRBTree<CUtlMap<CSteamID, GCSDK::CGCClientSharedObjectCache*, unsigned short>::Node_t, unsigned short, CUtlMap<CSteamID, GCSDK::CGCClientSharedObjectCache*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<CSteamID, GCSDK::CGCClientSharedObjectCache*, unsigned short>::Node_t, unsigned short>, unsigned short> >::RotateLeft(unsigned short)
 T CUtlRBTree<CUtlMap<CSteamID, GCSDK::CGCClientSharedObjectCache*, unsigned short>::Node_t, unsigned short, CUtlMap<CSteamID, GCSDK::CGCClientSharedObjectCache*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<CSteamID, GCSDK::CGCClientSharedObjectCache*, unsigned short>::Node_t, unsigned short>, unsigned short> >::RotateRight(unsigned short)
 T CUtlRBTree<CUtlMap<CSteamID, GCSDK::CGCClientSharedObjectCache*, unsigned short>::Node_t, unsigned short, CUtlMap<CSteamID, GCSDK::CGCClientSharedObjectCache*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<CSteamID, GCSDK::CGCClientSharedObjectCache*, unsigned short>::Node_t, unsigned short>, unsigned short> >::Unlink(unsigned short)
 T CUtlRBTree<CUtlMap<CSteamID, GCSDK::CGCClientSharedObjectCache*, unsigned short>::Node_t, unsigned short, CUtlMap<CSteamID, GCSDK::CGCClientSharedObjectCache*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<CSteamID, GCSDK::CGCClientSharedObjectCache*, unsigned short>::Node_t, unsigned short>, unsigned short> >::~CUtlRBTree()
 T CUtlRBTree<CUtlMap<CSteamID, float, unsigned short>::Node_t, unsigned short, CUtlMap<CSteamID, float, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<CSteamID, float, unsigned short>::Node_t, unsigned short>, unsigned short> >::Find(CUtlMap<CSteamID, float, unsigned short>::Node_t const&) const
 T CUtlRBTree<CUtlMap<CSteamID, float, unsigned short>::Node_t, unsigned short, CUtlMap<CSteamID, float, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<CSteamID, float, unsigned short>::Node_t, unsigned short>, unsigned short> >::FindInsertionPosition(CUtlMap<CSteamID, float, unsigned short>::Node_t const&, unsigned short&, bool&)
 T CUtlRBTree<CUtlMap<CSteamID, float, unsigned short>::Node_t, unsigned short, CUtlMap<CSteamID, float, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<CSteamID, float, unsigned short>::Node_t, unsigned short>, unsigned short> >::FirstInorder() const
 T CUtlRBTree<CUtlMap<CSteamID, float, unsigned short>::Node_t, unsigned short, CUtlMap<CSteamID, float, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<CSteamID, float, unsigned short>::Node_t, unsigned short>, unsigned short> >::Insert(CUtlMap<CSteamID, float, unsigned short>::Node_t const&)
 T CUtlRBTree<CUtlMap<CSteamID, float, unsigned short>::Node_t, unsigned short, CUtlMap<CSteamID, float, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<CSteamID, float, unsigned short>::Node_t, unsigned short>, unsigned short> >::InsertRebalance(unsigned short)
 T CUtlRBTree<CUtlMap<CSteamID, float, unsigned short>::Node_t, unsigned short, CUtlMap<CSteamID, float, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<CSteamID, float, unsigned short>::Node_t, unsigned short>, unsigned short> >::IsLeftChild(unsigned short) const
 T CUtlRBTree<CUtlMap<CSteamID, float, unsigned short>::Node_t, unsigned short, CUtlMap<CSteamID, float, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<CSteamID, float, unsigned short>::Node_t, unsigned short>, unsigned short> >::IsRightChild(unsigned short) const
 T CUtlRBTree<CUtlMap<CSteamID, float, unsigned short>::Node_t, unsigned short, CUtlMap<CSteamID, float, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<CSteamID, float, unsigned short>::Node_t, unsigned short>, unsigned short> >::NewNode()
 T CUtlRBTree<CUtlMap<CSteamID, float, unsigned short>::Node_t, unsigned short, CUtlMap<CSteamID, float, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<CSteamID, float, unsigned short>::Node_t, unsigned short>, unsigned short> >::NextInorder(unsigned short) const
 T CUtlRBTree<CUtlMap<CSteamID, float, unsigned short>::Node_t, unsigned short, CUtlMap<CSteamID, float, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<CSteamID, float, unsigned short>::Node_t, unsigned short>, unsigned short> >::RemoveAll()
 T CUtlRBTree<CUtlMap<CSteamID, float, unsigned short>::Node_t, unsigned short, CUtlMap<CSteamID, float, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<CSteamID, float, unsigned short>::Node_t, unsigned short>, unsigned short> >::RemoveRebalance(unsigned short)
 T CUtlRBTree<CUtlMap<CSteamID, float, unsigned short>::Node_t, unsigned short, CUtlMap<CSteamID, float, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<CSteamID, float, unsigned short>::Node_t, unsigned short>, unsigned short> >::RotateLeft(unsigned short)
 T CUtlRBTree<CUtlMap<CSteamID, float, unsigned short>::Node_t, unsigned short, CUtlMap<CSteamID, float, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<CSteamID, float, unsigned short>::Node_t, unsigned short>, unsigned short> >::RotateRight(unsigned short)
 T CUtlRBTree<CUtlMap<CSteamID, float, unsigned short>::Node_t, unsigned short, CUtlMap<CSteamID, float, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<CSteamID, float, unsigned short>::Node_t, unsigned short>, unsigned short> >::Unlink(unsigned short)
 T CUtlRBTree<CUtlMap<CSteamID, float, unsigned short>::Node_t, unsigned short, CUtlMap<CSteamID, float, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<CSteamID, float, unsigned short>::Node_t, unsigned short>, unsigned short> >::~CUtlRBTree()
 T CUtlRBTree<CUtlMap<CUtlConstStringBase<char>, int, unsigned short>::Node_t, unsigned short, CUtlMap<CUtlConstStringBase<char>, int, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<CUtlConstStringBase<char>, int, unsigned short>::Node_t, unsigned short>, unsigned short> >::Find(CUtlMap<CUtlConstStringBase<char>, int, unsigned short>::Node_t const&) const
 T CUtlRBTree<CUtlMap<CUtlConstStringBase<char>, int, unsigned short>::Node_t, unsigned short, CUtlMap<CUtlConstStringBase<char>, int, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<CUtlConstStringBase<char>, int, unsigned short>::Node_t, unsigned short>, unsigned short> >::FindInsertionPosition(CUtlMap<CUtlConstStringBase<char>, int, unsigned short>::Node_t const&, unsigned short&, bool&)
 T CUtlRBTree<CUtlMap<CUtlConstStringBase<char>, int, unsigned short>::Node_t, unsigned short, CUtlMap<CUtlConstStringBase<char>, int, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<CUtlConstStringBase<char>, int, unsigned short>::Node_t, unsigned short>, unsigned short> >::Insert(CUtlMap<CUtlConstStringBase<char>, int, unsigned short>::Node_t const&)
 T CUtlRBTree<CUtlMap<CUtlConstStringBase<char>, int, unsigned short>::Node_t, unsigned short, CUtlMap<CUtlConstStringBase<char>, int, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<CUtlConstStringBase<char>, int, unsigned short>::Node_t, unsigned short>, unsigned short> >::InsertRebalance(unsigned short)
 T CUtlRBTree<CUtlMap<CUtlConstStringBase<char>, int, unsigned short>::Node_t, unsigned short, CUtlMap<CUtlConstStringBase<char>, int, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<CUtlConstStringBase<char>, int, unsigned short>::Node_t, unsigned short>, unsigned short> >::IsLeftChild(unsigned short) const
 T CUtlRBTree<CUtlMap<CUtlConstStringBase<char>, int, unsigned short>::Node_t, unsigned short, CUtlMap<CUtlConstStringBase<char>, int, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<CUtlConstStringBase<char>, int, unsigned short>::Node_t, unsigned short>, unsigned short> >::IsRightChild(unsigned short) const
 T CUtlRBTree<CUtlMap<CUtlConstStringBase<char>, int, unsigned short>::Node_t, unsigned short, CUtlMap<CUtlConstStringBase<char>, int, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<CUtlConstStringBase<char>, int, unsigned short>::Node_t, unsigned short>, unsigned short> >::NewNode()
 T CUtlRBTree<CUtlMap<CUtlConstStringBase<char>, int, unsigned short>::Node_t, unsigned short, CUtlMap<CUtlConstStringBase<char>, int, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<CUtlConstStringBase<char>, int, unsigned short>::Node_t, unsigned short>, unsigned short> >::RemoveAll()
 T CUtlRBTree<CUtlMap<CUtlConstStringBase<char>, int, unsigned short>::Node_t, unsigned short, CUtlMap<CUtlConstStringBase<char>, int, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<CUtlConstStringBase<char>, int, unsigned short>::Node_t, unsigned short>, unsigned short> >::RotateLeft(unsigned short)
 T CUtlRBTree<CUtlMap<CUtlConstStringBase<char>, int, unsigned short>::Node_t, unsigned short, CUtlMap<CUtlConstStringBase<char>, int, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<CUtlConstStringBase<char>, int, unsigned short>::Node_t, unsigned short>, unsigned short> >::RotateRight(unsigned short)
 T CUtlRBTree<CUtlMap<CUtlConstStringBase<char>, int, unsigned short>::Node_t, unsigned short, CUtlMap<CUtlConstStringBase<char>, int, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<CUtlConstStringBase<char>, int, unsigned short>::Node_t, unsigned short>, unsigned short> >::~CUtlRBTree()
 T CUtlRBTree<CUtlMap<CUtlString, float, unsigned short>::Node_t, unsigned short, CUtlMap<CUtlString, float, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<CUtlString, float, unsigned short>::Node_t, unsigned short>, unsigned short> >::Find(CUtlMap<CUtlString, float, unsigned short>::Node_t const&) const
 T CUtlRBTree<CUtlMap<CUtlString, float, unsigned short>::Node_t, unsigned short, CUtlMap<CUtlString, float, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<CUtlString, float, unsigned short>::Node_t, unsigned short>, unsigned short> >::FindInsertionPosition(CUtlMap<CUtlString, float, unsigned short>::Node_t const&, unsigned short&, bool&)
 T CUtlRBTree<CUtlMap<CUtlString, float, unsigned short>::Node_t, unsigned short, CUtlMap<CUtlString, float, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<CUtlString, float, unsigned short>::Node_t, unsigned short>, unsigned short> >::Insert(CUtlMap<CUtlString, float, unsigned short>::Node_t const&)
 T CUtlRBTree<CUtlMap<CUtlString, float, unsigned short>::Node_t, unsigned short, CUtlMap<CUtlString, float, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<CUtlString, float, unsigned short>::Node_t, unsigned short>, unsigned short> >::InsertRebalance(unsigned short)
 T CUtlRBTree<CUtlMap<CUtlString, float, unsigned short>::Node_t, unsigned short, CUtlMap<CUtlString, float, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<CUtlString, float, unsigned short>::Node_t, unsigned short>, unsigned short> >::IsLeftChild(unsigned short) const
 T CUtlRBTree<CUtlMap<CUtlString, float, unsigned short>::Node_t, unsigned short, CUtlMap<CUtlString, float, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<CUtlString, float, unsigned short>::Node_t, unsigned short>, unsigned short> >::IsRightChild(unsigned short) const
 T CUtlRBTree<CUtlMap<CUtlString, float, unsigned short>::Node_t, unsigned short, CUtlMap<CUtlString, float, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<CUtlString, float, unsigned short>::Node_t, unsigned short>, unsigned short> >::NewNode()
 T CUtlRBTree<CUtlMap<CUtlString, float, unsigned short>::Node_t, unsigned short, CUtlMap<CUtlString, float, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<CUtlString, float, unsigned short>::Node_t, unsigned short>, unsigned short> >::RemoveAll()
 T CUtlRBTree<CUtlMap<CUtlString, float, unsigned short>::Node_t, unsigned short, CUtlMap<CUtlString, float, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<CUtlString, float, unsigned short>::Node_t, unsigned short>, unsigned short> >::RemoveRebalance(unsigned short)
 T CUtlRBTree<CUtlMap<CUtlString, float, unsigned short>::Node_t, unsigned short, CUtlMap<CUtlString, float, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<CUtlString, float, unsigned short>::Node_t, unsigned short>, unsigned short> >::RotateLeft(unsigned short)
 T CUtlRBTree<CUtlMap<CUtlString, float, unsigned short>::Node_t, unsigned short, CUtlMap<CUtlString, float, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<CUtlString, float, unsigned short>::Node_t, unsigned short>, unsigned short> >::RotateRight(unsigned short)
 T CUtlRBTree<CUtlMap<CUtlString, float, unsigned short>::Node_t, unsigned short, CUtlMap<CUtlString, float, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<CUtlString, float, unsigned short>::Node_t, unsigned short>, unsigned short> >::Unlink(unsigned short)
 T CUtlRBTree<CUtlMap<CUtlString, float, unsigned short>::Node_t, unsigned short, CUtlMap<CUtlString, float, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<CUtlString, float, unsigned short>::Node_t, unsigned short>, unsigned short> >::~CUtlRBTree()
 T CUtlRBTree<CUtlMap<EGameCategory, SchemaGameCategory_t*, unsigned short>::Node_t, unsigned short, CUtlMap<EGameCategory, SchemaGameCategory_t*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<EGameCategory, SchemaGameCategory_t*, unsigned short>::Node_t, unsigned short>, unsigned short> >::Find(CUtlMap<EGameCategory, SchemaGameCategory_t*, unsigned short>::Node_t const&) const
 T CUtlRBTree<CUtlMap<EGameCategory, SchemaGameCategory_t*, unsigned short>::Node_t, unsigned short, CUtlMap<EGameCategory, SchemaGameCategory_t*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<EGameCategory, SchemaGameCategory_t*, unsigned short>::Node_t, unsigned short>, unsigned short> >::FindInsertionPosition(CUtlMap<EGameCategory, SchemaGameCategory_t*, unsigned short>::Node_t const&, unsigned short&, bool&)
 T CUtlRBTree<CUtlMap<EGameCategory, SchemaGameCategory_t*, unsigned short>::Node_t, unsigned short, CUtlMap<EGameCategory, SchemaGameCategory_t*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<EGameCategory, SchemaGameCategory_t*, unsigned short>::Node_t, unsigned short>, unsigned short> >::Insert(CUtlMap<EGameCategory, SchemaGameCategory_t*, unsigned short>::Node_t const&)
 T CUtlRBTree<CUtlMap<EGameCategory, SchemaGameCategory_t*, unsigned short>::Node_t, unsigned short, CUtlMap<EGameCategory, SchemaGameCategory_t*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<EGameCategory, SchemaGameCategory_t*, unsigned short>::Node_t, unsigned short>, unsigned short> >::InsertRebalance(unsigned short)
 T CUtlRBTree<CUtlMap<EGameCategory, SchemaGameCategory_t*, unsigned short>::Node_t, unsigned short, CUtlMap<EGameCategory, SchemaGameCategory_t*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<EGameCategory, SchemaGameCategory_t*, unsigned short>::Node_t, unsigned short>, unsigned short> >::IsLeftChild(unsigned short) const
 T CUtlRBTree<CUtlMap<EGameCategory, SchemaGameCategory_t*, unsigned short>::Node_t, unsigned short, CUtlMap<EGameCategory, SchemaGameCategory_t*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<EGameCategory, SchemaGameCategory_t*, unsigned short>::Node_t, unsigned short>, unsigned short> >::IsRightChild(unsigned short) const
 T CUtlRBTree<CUtlMap<EGameCategory, SchemaGameCategory_t*, unsigned short>::Node_t, unsigned short, CUtlMap<EGameCategory, SchemaGameCategory_t*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<EGameCategory, SchemaGameCategory_t*, unsigned short>::Node_t, unsigned short>, unsigned short> >::NewNode()
 T CUtlRBTree<CUtlMap<EGameCategory, SchemaGameCategory_t*, unsigned short>::Node_t, unsigned short, CUtlMap<EGameCategory, SchemaGameCategory_t*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<EGameCategory, SchemaGameCategory_t*, unsigned short>::Node_t, unsigned short>, unsigned short> >::RemoveAll()
 T CUtlRBTree<CUtlMap<EGameCategory, SchemaGameCategory_t*, unsigned short>::Node_t, unsigned short, CUtlMap<EGameCategory, SchemaGameCategory_t*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<EGameCategory, SchemaGameCategory_t*, unsigned short>::Node_t, unsigned short>, unsigned short> >::RotateLeft(unsigned short)
 T CUtlRBTree<CUtlMap<EGameCategory, SchemaGameCategory_t*, unsigned short>::Node_t, unsigned short, CUtlMap<EGameCategory, SchemaGameCategory_t*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<EGameCategory, SchemaGameCategory_t*, unsigned short>::Node_t, unsigned short>, unsigned short> >::RotateRight(unsigned short)
 T CUtlRBTree<CUtlMap<EGameCategory, SchemaGameCategory_t*, unsigned short>::Node_t, unsigned short, CUtlMap<EGameCategory, SchemaGameCategory_t*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<EGameCategory, SchemaGameCategory_t*, unsigned short>::Node_t, unsigned short>, unsigned short> >::~CUtlRBTree()
 T CUtlRBTree<CUtlMap<EMatchmakingGroupType, SchemaMMGroup_t*, unsigned short>::Node_t, unsigned short, CUtlMap<EMatchmakingGroupType, SchemaMMGroup_t*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<EMatchmakingGroupType, SchemaMMGroup_t*, unsigned short>::Node_t, unsigned short>, unsigned short> >::Find(CUtlMap<EMatchmakingGroupType, SchemaMMGroup_t*, unsigned short>::Node_t const&) const
 T CUtlRBTree<CUtlMap<EMatchmakingGroupType, SchemaMMGroup_t*, unsigned short>::Node_t, unsigned short, CUtlMap<EMatchmakingGroupType, SchemaMMGroup_t*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<EMatchmakingGroupType, SchemaMMGroup_t*, unsigned short>::Node_t, unsigned short>, unsigned short> >::FindInsertionPosition(CUtlMap<EMatchmakingGroupType, SchemaMMGroup_t*, unsigned short>::Node_t const&, unsigned short&, bool&)
 T CUtlRBTree<CUtlMap<EMatchmakingGroupType, SchemaMMGroup_t*, unsigned short>::Node_t, unsigned short, CUtlMap<EMatchmakingGroupType, SchemaMMGroup_t*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<EMatchmakingGroupType, SchemaMMGroup_t*, unsigned short>::Node_t, unsigned short>, unsigned short> >::Insert(CUtlMap<EMatchmakingGroupType, SchemaMMGroup_t*, unsigned short>::Node_t const&)
 T CUtlRBTree<CUtlMap<EMatchmakingGroupType, SchemaMMGroup_t*, unsigned short>::Node_t, unsigned short, CUtlMap<EMatchmakingGroupType, SchemaMMGroup_t*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<EMatchmakingGroupType, SchemaMMGroup_t*, unsigned short>::Node_t, unsigned short>, unsigned short> >::InsertRebalance(unsigned short)
 T CUtlRBTree<CUtlMap<EMatchmakingGroupType, SchemaMMGroup_t*, unsigned short>::Node_t, unsigned short, CUtlMap<EMatchmakingGroupType, SchemaMMGroup_t*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<EMatchmakingGroupType, SchemaMMGroup_t*, unsigned short>::Node_t, unsigned short>, unsigned short> >::IsLeftChild(unsigned short) const
 T CUtlRBTree<CUtlMap<EMatchmakingGroupType, SchemaMMGroup_t*, unsigned short>::Node_t, unsigned short, CUtlMap<EMatchmakingGroupType, SchemaMMGroup_t*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<EMatchmakingGroupType, SchemaMMGroup_t*, unsigned short>::Node_t, unsigned short>, unsigned short> >::IsRightChild(unsigned short) const
 T CUtlRBTree<CUtlMap<EMatchmakingGroupType, SchemaMMGroup_t*, unsigned short>::Node_t, unsigned short, CUtlMap<EMatchmakingGroupType, SchemaMMGroup_t*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<EMatchmakingGroupType, SchemaMMGroup_t*, unsigned short>::Node_t, unsigned short>, unsigned short> >::NewNode()
 T CUtlRBTree<CUtlMap<EMatchmakingGroupType, SchemaMMGroup_t*, unsigned short>::Node_t, unsigned short, CUtlMap<EMatchmakingGroupType, SchemaMMGroup_t*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<EMatchmakingGroupType, SchemaMMGroup_t*, unsigned short>::Node_t, unsigned short>, unsigned short> >::RemoveAll()
 T CUtlRBTree<CUtlMap<EMatchmakingGroupType, SchemaMMGroup_t*, unsigned short>::Node_t, unsigned short, CUtlMap<EMatchmakingGroupType, SchemaMMGroup_t*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<EMatchmakingGroupType, SchemaMMGroup_t*, unsigned short>::Node_t, unsigned short>, unsigned short> >::RotateLeft(unsigned short)
 T CUtlRBTree<CUtlMap<EMatchmakingGroupType, SchemaMMGroup_t*, unsigned short>::Node_t, unsigned short, CUtlMap<EMatchmakingGroupType, SchemaMMGroup_t*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<EMatchmakingGroupType, SchemaMMGroup_t*, unsigned short>::Node_t, unsigned short>, unsigned short> >::RotateRight(unsigned short)
 T CUtlRBTree<CUtlMap<EMatchmakingGroupType, SchemaMMGroup_t*, unsigned short>::Node_t, unsigned short, CUtlMap<EMatchmakingGroupType, SchemaMMGroup_t*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<EMatchmakingGroupType, SchemaMMGroup_t*, unsigned short>::Node_t, unsigned short>, unsigned short> >::~CUtlRBTree()
 T CUtlRBTree<CUtlMap<IPhysicsObject*, CPhysCollide const*, unsigned short>::Node_t, unsigned short, CUtlMap<IPhysicsObject*, CPhysCollide const*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<IPhysicsObject*, CPhysCollide const*, unsigned short>::Node_t, unsigned short>, unsigned short> >::Find(CUtlMap<IPhysicsObject*, CPhysCollide const*, unsigned short>::Node_t const&) const
 T CUtlRBTree<CUtlMap<IPhysicsObject*, CPhysCollide const*, unsigned short>::Node_t, unsigned short, CUtlMap<IPhysicsObject*, CPhysCollide const*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<IPhysicsObject*, CPhysCollide const*, unsigned short>::Node_t, unsigned short>, unsigned short> >::FindInsertionPosition(CUtlMap<IPhysicsObject*, CPhysCollide const*, unsigned short>::Node_t const&, unsigned short&, bool&)
 T CUtlRBTree<CUtlMap<IPhysicsObject*, CPhysCollide const*, unsigned short>::Node_t, unsigned short, CUtlMap<IPhysicsObject*, CPhysCollide const*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<IPhysicsObject*, CPhysCollide const*, unsigned short>::Node_t, unsigned short>, unsigned short> >::Insert(CUtlMap<IPhysicsObject*, CPhysCollide const*, unsigned short>::Node_t const&)
 T CUtlRBTree<CUtlMap<IPhysicsObject*, CPhysCollide const*, unsigned short>::Node_t, unsigned short, CUtlMap<IPhysicsObject*, CPhysCollide const*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<IPhysicsObject*, CPhysCollide const*, unsigned short>::Node_t, unsigned short>, unsigned short> >::InsertRebalance(unsigned short)
 T CUtlRBTree<CUtlMap<IPhysicsObject*, CPhysCollide const*, unsigned short>::Node_t, unsigned short, CUtlMap<IPhysicsObject*, CPhysCollide const*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<IPhysicsObject*, CPhysCollide const*, unsigned short>::Node_t, unsigned short>, unsigned short> >::IsLeftChild(unsigned short) const
 T CUtlRBTree<CUtlMap<IPhysicsObject*, CPhysCollide const*, unsigned short>::Node_t, unsigned short, CUtlMap<IPhysicsObject*, CPhysCollide const*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<IPhysicsObject*, CPhysCollide const*, unsigned short>::Node_t, unsigned short>, unsigned short> >::IsRightChild(unsigned short) const
 T CUtlRBTree<CUtlMap<IPhysicsObject*, CPhysCollide const*, unsigned short>::Node_t, unsigned short, CUtlMap<IPhysicsObject*, CPhysCollide const*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<IPhysicsObject*, CPhysCollide const*, unsigned short>::Node_t, unsigned short>, unsigned short> >::NewNode()
 T CUtlRBTree<CUtlMap<IPhysicsObject*, CPhysCollide const*, unsigned short>::Node_t, unsigned short, CUtlMap<IPhysicsObject*, CPhysCollide const*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<IPhysicsObject*, CPhysCollide const*, unsigned short>::Node_t, unsigned short>, unsigned short> >::RemoveAll()
 T CUtlRBTree<CUtlMap<IPhysicsObject*, CPhysCollide const*, unsigned short>::Node_t, unsigned short, CUtlMap<IPhysicsObject*, CPhysCollide const*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<IPhysicsObject*, CPhysCollide const*, unsigned short>::Node_t, unsigned short>, unsigned short> >::RemoveRebalance(unsigned short)
 T CUtlRBTree<CUtlMap<IPhysicsObject*, CPhysCollide const*, unsigned short>::Node_t, unsigned short, CUtlMap<IPhysicsObject*, CPhysCollide const*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<IPhysicsObject*, CPhysCollide const*, unsigned short>::Node_t, unsigned short>, unsigned short> >::RotateLeft(unsigned short)
 T CUtlRBTree<CUtlMap<IPhysicsObject*, CPhysCollide const*, unsigned short>::Node_t, unsigned short, CUtlMap<IPhysicsObject*, CPhysCollide const*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<IPhysicsObject*, CPhysCollide const*, unsigned short>::Node_t, unsigned short>, unsigned short> >::RotateRight(unsigned short)
 T CUtlRBTree<CUtlMap<IPhysicsObject*, CPhysCollide const*, unsigned short>::Node_t, unsigned short, CUtlMap<IPhysicsObject*, CPhysCollide const*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<IPhysicsObject*, CPhysCollide const*, unsigned short>::Node_t, unsigned short>, unsigned short> >::Unlink(unsigned short)
 T CUtlRBTree<CUtlMap<IPhysicsObject*, CPhysCollide const*, unsigned short>::Node_t, unsigned short, CUtlMap<IPhysicsObject*, CPhysCollide const*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<IPhysicsObject*, CPhysCollide const*, unsigned short>::Node_t, unsigned short>, unsigned short> >::~CUtlRBTree()
 T CUtlRBTree<CUtlMap<IPhysicsObject*, int, unsigned short>::Node_t, unsigned short, CUtlMap<IPhysicsObject*, int, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<IPhysicsObject*, int, unsigned short>::Node_t, unsigned short>, unsigned short> >::Find(CUtlMap<IPhysicsObject*, int, unsigned short>::Node_t const&) const
 T CUtlRBTree<CUtlMap<IPhysicsObject*, int, unsigned short>::Node_t, unsigned short, CUtlMap<IPhysicsObject*, int, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<IPhysicsObject*, int, unsigned short>::Node_t, unsigned short>, unsigned short> >::FindInsertionPosition(CUtlMap<IPhysicsObject*, int, unsigned short>::Node_t const&, unsigned short&, bool&)
 T CUtlRBTree<CUtlMap<IPhysicsObject*, int, unsigned short>::Node_t, unsigned short, CUtlMap<IPhysicsObject*, int, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<IPhysicsObject*, int, unsigned short>::Node_t, unsigned short>, unsigned short> >::Insert(CUtlMap<IPhysicsObject*, int, unsigned short>::Node_t const&)
 T CUtlRBTree<CUtlMap<IPhysicsObject*, int, unsigned short>::Node_t, unsigned short, CUtlMap<IPhysicsObject*, int, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<IPhysicsObject*, int, unsigned short>::Node_t, unsigned short>, unsigned short> >::InsertRebalance(unsigned short)
 T CUtlRBTree<CUtlMap<IPhysicsObject*, int, unsigned short>::Node_t, unsigned short, CUtlMap<IPhysicsObject*, int, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<IPhysicsObject*, int, unsigned short>::Node_t, unsigned short>, unsigned short> >::IsLeftChild(unsigned short) const
 T CUtlRBTree<CUtlMap<IPhysicsObject*, int, unsigned short>::Node_t, unsigned short, CUtlMap<IPhysicsObject*, int, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<IPhysicsObject*, int, unsigned short>::Node_t, unsigned short>, unsigned short> >::IsRightChild(unsigned short) const
 T CUtlRBTree<CUtlMap<IPhysicsObject*, int, unsigned short>::Node_t, unsigned short, CUtlMap<IPhysicsObject*, int, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<IPhysicsObject*, int, unsigned short>::Node_t, unsigned short>, unsigned short> >::NewNode()
 T CUtlRBTree<CUtlMap<IPhysicsObject*, int, unsigned short>::Node_t, unsigned short, CUtlMap<IPhysicsObject*, int, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<IPhysicsObject*, int, unsigned short>::Node_t, unsigned short>, unsigned short> >::RemoveAll()
 T CUtlRBTree<CUtlMap<IPhysicsObject*, int, unsigned short>::Node_t, unsigned short, CUtlMap<IPhysicsObject*, int, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<IPhysicsObject*, int, unsigned short>::Node_t, unsigned short>, unsigned short> >::RemoveRebalance(unsigned short)
 T CUtlRBTree<CUtlMap<IPhysicsObject*, int, unsigned short>::Node_t, unsigned short, CUtlMap<IPhysicsObject*, int, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<IPhysicsObject*, int, unsigned short>::Node_t, unsigned short>, unsigned short> >::RotateLeft(unsigned short)
 T CUtlRBTree<CUtlMap<IPhysicsObject*, int, unsigned short>::Node_t, unsigned short, CUtlMap<IPhysicsObject*, int, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<IPhysicsObject*, int, unsigned short>::Node_t, unsigned short>, unsigned short> >::RotateRight(unsigned short)
 T CUtlRBTree<CUtlMap<IPhysicsObject*, int, unsigned short>::Node_t, unsigned short, CUtlMap<IPhysicsObject*, int, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<IPhysicsObject*, int, unsigned short>::Node_t, unsigned short>, unsigned short> >::Unlink(unsigned short)
 T CUtlRBTree<CUtlMap<IPhysicsObject*, int, unsigned short>::Node_t, unsigned short, CUtlMap<IPhysicsObject*, int, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<IPhysicsObject*, int, unsigned short>::Node_t, unsigned short>, unsigned short> >::~CUtlRBTree()
 T CUtlRBTree<CUtlMap<char const*, AchievementAward_t*, int>::Node_t, int, CUtlMap<char const*, AchievementAward_t*, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, AchievementAward_t*, int>::Node_t, int>, int> >::FindInsertionPosition(CUtlMap<char const*, AchievementAward_t*, int>::Node_t const&, int&, bool&)
 T CUtlRBTree<CUtlMap<char const*, AchievementAward_t*, int>::Node_t, int, CUtlMap<char const*, AchievementAward_t*, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, AchievementAward_t*, int>::Node_t, int>, int> >::FirstInorder() const
 T CUtlRBTree<CUtlMap<char const*, AchievementAward_t*, int>::Node_t, int, CUtlMap<char const*, AchievementAward_t*, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, AchievementAward_t*, int>::Node_t, int>, int> >::Insert(CUtlMap<char const*, AchievementAward_t*, int>::Node_t const&)
 T CUtlRBTree<CUtlMap<char const*, AchievementAward_t*, int>::Node_t, int, CUtlMap<char const*, AchievementAward_t*, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, AchievementAward_t*, int>::Node_t, int>, int> >::InsertRebalance(int)
 T CUtlRBTree<CUtlMap<char const*, AchievementAward_t*, int>::Node_t, int, CUtlMap<char const*, AchievementAward_t*, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, AchievementAward_t*, int>::Node_t, int>, int> >::IsLeftChild(int) const
 T CUtlRBTree<CUtlMap<char const*, AchievementAward_t*, int>::Node_t, int, CUtlMap<char const*, AchievementAward_t*, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, AchievementAward_t*, int>::Node_t, int>, int> >::IsRightChild(int) const
 T CUtlRBTree<CUtlMap<char const*, AchievementAward_t*, int>::Node_t, int, CUtlMap<char const*, AchievementAward_t*, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, AchievementAward_t*, int>::Node_t, int>, int> >::NewNode()
 T CUtlRBTree<CUtlMap<char const*, AchievementAward_t*, int>::Node_t, int, CUtlMap<char const*, AchievementAward_t*, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, AchievementAward_t*, int>::Node_t, int>, int> >::NextInorder(int) const
 T CUtlRBTree<CUtlMap<char const*, AchievementAward_t*, int>::Node_t, int, CUtlMap<char const*, AchievementAward_t*, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, AchievementAward_t*, int>::Node_t, int>, int> >::RemoveAll()
 T CUtlRBTree<CUtlMap<char const*, AchievementAward_t*, int>::Node_t, int, CUtlMap<char const*, AchievementAward_t*, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, AchievementAward_t*, int>::Node_t, int>, int> >::RotateLeft(int)
 T CUtlRBTree<CUtlMap<char const*, AchievementAward_t*, int>::Node_t, int, CUtlMap<char const*, AchievementAward_t*, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, AchievementAward_t*, int>::Node_t, int>, int> >::RotateRight(int)
 T CUtlRBTree<CUtlMap<char const*, AchievementAward_t*, int>::Node_t, int, CUtlMap<char const*, AchievementAward_t*, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, AchievementAward_t*, int>::Node_t, int>, int> >::~CUtlRBTree()
 T CUtlRBTree<CUtlMap<char const*, BasicGameStatsRecord_t, unsigned short>::Node_t, unsigned short, CUtlMap<char const*, BasicGameStatsRecord_t, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, BasicGameStatsRecord_t, unsigned short>::Node_t, unsigned short>, unsigned short> >::Find(CUtlMap<char const*, BasicGameStatsRecord_t, unsigned short>::Node_t const&) const
 T CUtlRBTree<CUtlMap<char const*, BasicGameStatsRecord_t, unsigned short>::Node_t, unsigned short, CUtlMap<char const*, BasicGameStatsRecord_t, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, BasicGameStatsRecord_t, unsigned short>::Node_t, unsigned short>, unsigned short> >::FindInsertionPosition(CUtlMap<char const*, BasicGameStatsRecord_t, unsigned short>::Node_t const&, unsigned short&, bool&)
 T CUtlRBTree<CUtlMap<char const*, BasicGameStatsRecord_t, unsigned short>::Node_t, unsigned short, CUtlMap<char const*, BasicGameStatsRecord_t, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, BasicGameStatsRecord_t, unsigned short>::Node_t, unsigned short>, unsigned short> >::FirstInorder() const
 T CUtlRBTree<CUtlMap<char const*, BasicGameStatsRecord_t, unsigned short>::Node_t, unsigned short, CUtlMap<char const*, BasicGameStatsRecord_t, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, BasicGameStatsRecord_t, unsigned short>::Node_t, unsigned short>, unsigned short> >::Insert(CUtlMap<char const*, BasicGameStatsRecord_t, unsigned short>::Node_t const&)
 T CUtlRBTree<CUtlMap<char const*, BasicGameStatsRecord_t, unsigned short>::Node_t, unsigned short, CUtlMap<char const*, BasicGameStatsRecord_t, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, BasicGameStatsRecord_t, unsigned short>::Node_t, unsigned short>, unsigned short> >::InsertRebalance(unsigned short)
 T CUtlRBTree<CUtlMap<char const*, BasicGameStatsRecord_t, unsigned short>::Node_t, unsigned short, CUtlMap<char const*, BasicGameStatsRecord_t, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, BasicGameStatsRecord_t, unsigned short>::Node_t, unsigned short>, unsigned short> >::IsLeftChild(unsigned short) const
 T CUtlRBTree<CUtlMap<char const*, BasicGameStatsRecord_t, unsigned short>::Node_t, unsigned short, CUtlMap<char const*, BasicGameStatsRecord_t, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, BasicGameStatsRecord_t, unsigned short>::Node_t, unsigned short>, unsigned short> >::IsRightChild(unsigned short) const
 T CUtlRBTree<CUtlMap<char const*, BasicGameStatsRecord_t, unsigned short>::Node_t, unsigned short, CUtlMap<char const*, BasicGameStatsRecord_t, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, BasicGameStatsRecord_t, unsigned short>::Node_t, unsigned short>, unsigned short> >::NewNode()
 T CUtlRBTree<CUtlMap<char const*, BasicGameStatsRecord_t, unsigned short>::Node_t, unsigned short, CUtlMap<char const*, BasicGameStatsRecord_t, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, BasicGameStatsRecord_t, unsigned short>::Node_t, unsigned short>, unsigned short> >::NextInorder(unsigned short) const
 T CUtlRBTree<CUtlMap<char const*, BasicGameStatsRecord_t, unsigned short>::Node_t, unsigned short, CUtlMap<char const*, BasicGameStatsRecord_t, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, BasicGameStatsRecord_t, unsigned short>::Node_t, unsigned short>, unsigned short> >::RemoveAll()
 T CUtlRBTree<CUtlMap<char const*, BasicGameStatsRecord_t, unsigned short>::Node_t, unsigned short, CUtlMap<char const*, BasicGameStatsRecord_t, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, BasicGameStatsRecord_t, unsigned short>::Node_t, unsigned short>, unsigned short> >::RotateLeft(unsigned short)
 T CUtlRBTree<CUtlMap<char const*, BasicGameStatsRecord_t, unsigned short>::Node_t, unsigned short, CUtlMap<char const*, BasicGameStatsRecord_t, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, BasicGameStatsRecord_t, unsigned short>::Node_t, unsigned short>, unsigned short> >::RotateRight(unsigned short)
 T CUtlRBTree<CUtlMap<char const*, BasicGameStatsRecord_t, unsigned short>::Node_t, unsigned short, CUtlMap<char const*, BasicGameStatsRecord_t, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, BasicGameStatsRecord_t, unsigned short>::Node_t, unsigned short>, unsigned short> >::~CUtlRBTree()
 T CUtlRBTree<CUtlMap<char const*, CActivityRemapCache, int>::Node_t, int, CUtlMap<char const*, CActivityRemapCache, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CActivityRemapCache, int>::Node_t, int>, int> >::FirstInorder() const
 T CUtlRBTree<CUtlMap<char const*, CActivityRemapCache, int>::Node_t, int, CUtlMap<char const*, CActivityRemapCache, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CActivityRemapCache, int>::Node_t, int>, int> >::IsRightChild(int) const
 T CUtlRBTree<CUtlMap<char const*, CActivityRemapCache, int>::Node_t, int, CUtlMap<char const*, CActivityRemapCache, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CActivityRemapCache, int>::Node_t, int>, int> >::NextInorder(int) const
 T CUtlRBTree<CUtlMap<char const*, CActivityRemapCache, int>::Node_t, int, CUtlMap<char const*, CActivityRemapCache, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CActivityRemapCache, int>::Node_t, int>, int> >::RemoveAll()
 T CUtlRBTree<CUtlMap<char const*, CActivityRemapCache, int>::Node_t, int, CUtlMap<char const*, CActivityRemapCache, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CActivityRemapCache, int>::Node_t, int>, int> >::~CUtlRBTree()
 T CUtlRBTree<CUtlMap<char const*, CDecalEmitterSystem::DecalEntry, int>::Node_t, int, CUtlMap<char const*, CDecalEmitterSystem::DecalEntry, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CDecalEmitterSystem::DecalEntry, int>::Node_t, int>, int> >::Find(CUtlMap<char const*, CDecalEmitterSystem::DecalEntry, int>::Node_t const&) const
 T CUtlRBTree<CUtlMap<char const*, CDecalEmitterSystem::DecalEntry, int>::Node_t, int, CUtlMap<char const*, CDecalEmitterSystem::DecalEntry, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CDecalEmitterSystem::DecalEntry, int>::Node_t, int>, int> >::FindInsertionPosition(CUtlMap<char const*, CDecalEmitterSystem::DecalEntry, int>::Node_t const&, int&, bool&)
 T CUtlRBTree<CUtlMap<char const*, CDecalEmitterSystem::DecalEntry, int>::Node_t, int, CUtlMap<char const*, CDecalEmitterSystem::DecalEntry, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CDecalEmitterSystem::DecalEntry, int>::Node_t, int>, int> >::FirstInorder() const
 T CUtlRBTree<CUtlMap<char const*, CDecalEmitterSystem::DecalEntry, int>::Node_t, int, CUtlMap<char const*, CDecalEmitterSystem::DecalEntry, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CDecalEmitterSystem::DecalEntry, int>::Node_t, int>, int> >::Insert(CUtlMap<char const*, CDecalEmitterSystem::DecalEntry, int>::Node_t const&)
 T CUtlRBTree<CUtlMap<char const*, CDecalEmitterSystem::DecalEntry, int>::Node_t, int, CUtlMap<char const*, CDecalEmitterSystem::DecalEntry, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CDecalEmitterSystem::DecalEntry, int>::Node_t, int>, int> >::InsertRebalance(int)
 T CUtlRBTree<CUtlMap<char const*, CDecalEmitterSystem::DecalEntry, int>::Node_t, int, CUtlMap<char const*, CDecalEmitterSystem::DecalEntry, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CDecalEmitterSystem::DecalEntry, int>::Node_t, int>, int> >::IsLeftChild(int) const
 T CUtlRBTree<CUtlMap<char const*, CDecalEmitterSystem::DecalEntry, int>::Node_t, int, CUtlMap<char const*, CDecalEmitterSystem::DecalEntry, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CDecalEmitterSystem::DecalEntry, int>::Node_t, int>, int> >::IsRightChild(int) const
 T CUtlRBTree<CUtlMap<char const*, CDecalEmitterSystem::DecalEntry, int>::Node_t, int, CUtlMap<char const*, CDecalEmitterSystem::DecalEntry, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CDecalEmitterSystem::DecalEntry, int>::Node_t, int>, int> >::NewNode()
 T CUtlRBTree<CUtlMap<char const*, CDecalEmitterSystem::DecalEntry, int>::Node_t, int, CUtlMap<char const*, CDecalEmitterSystem::DecalEntry, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CDecalEmitterSystem::DecalEntry, int>::Node_t, int>, int> >::NextInorder(int) const
 T CUtlRBTree<CUtlMap<char const*, CDecalEmitterSystem::DecalEntry, int>::Node_t, int, CUtlMap<char const*, CDecalEmitterSystem::DecalEntry, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CDecalEmitterSystem::DecalEntry, int>::Node_t, int>, int> >::RemoveAll()
 T CUtlRBTree<CUtlMap<char const*, CDecalEmitterSystem::DecalEntry, int>::Node_t, int, CUtlMap<char const*, CDecalEmitterSystem::DecalEntry, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CDecalEmitterSystem::DecalEntry, int>::Node_t, int>, int> >::RotateLeft(int)
 T CUtlRBTree<CUtlMap<char const*, CDecalEmitterSystem::DecalEntry, int>::Node_t, int, CUtlMap<char const*, CDecalEmitterSystem::DecalEntry, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CDecalEmitterSystem::DecalEntry, int>::Node_t, int>, int> >::RotateRight(int)
 T CUtlRBTree<CUtlMap<char const*, CDecalEmitterSystem::DecalEntry, int>::Node_t, int, CUtlMap<char const*, CDecalEmitterSystem::DecalEntry, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CDecalEmitterSystem::DecalEntry, int>::Node_t, int>, int> >::~CUtlRBTree()
 T CUtlRBTree<CUtlMap<char const*, CEconItemCollectionDefinition*, int>::Node_t, int, CUtlMap<char const*, CEconItemCollectionDefinition*, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CEconItemCollectionDefinition*, int>::Node_t, int>, int> >::Find(CUtlMap<char const*, CEconItemCollectionDefinition*, int>::Node_t const&) const
 T CUtlRBTree<CUtlMap<char const*, CEconItemCollectionDefinition*, int>::Node_t, int, CUtlMap<char const*, CEconItemCollectionDefinition*, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CEconItemCollectionDefinition*, int>::Node_t, int>, int> >::FindInsertionPosition(CUtlMap<char const*, CEconItemCollectionDefinition*, int>::Node_t const&, int&, bool&)
 T CUtlRBTree<CUtlMap<char const*, CEconItemCollectionDefinition*, int>::Node_t, int, CUtlMap<char const*, CEconItemCollectionDefinition*, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CEconItemCollectionDefinition*, int>::Node_t, int>, int> >::Insert(CUtlMap<char const*, CEconItemCollectionDefinition*, int>::Node_t const&)
 T CUtlRBTree<CUtlMap<char const*, CEconItemCollectionDefinition*, int>::Node_t, int, CUtlMap<char const*, CEconItemCollectionDefinition*, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CEconItemCollectionDefinition*, int>::Node_t, int>, int> >::InsertRebalance(int)
 T CUtlRBTree<CUtlMap<char const*, CEconItemCollectionDefinition*, int>::Node_t, int, CUtlMap<char const*, CEconItemCollectionDefinition*, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CEconItemCollectionDefinition*, int>::Node_t, int>, int> >::IsLeftChild(int) const
 T CUtlRBTree<CUtlMap<char const*, CEconItemCollectionDefinition*, int>::Node_t, int, CUtlMap<char const*, CEconItemCollectionDefinition*, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CEconItemCollectionDefinition*, int>::Node_t, int>, int> >::IsRightChild(int) const
 T CUtlRBTree<CUtlMap<char const*, CEconItemCollectionDefinition*, int>::Node_t, int, CUtlMap<char const*, CEconItemCollectionDefinition*, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CEconItemCollectionDefinition*, int>::Node_t, int>, int> >::NewNode()
 T CUtlRBTree<CUtlMap<char const*, CEconItemCollectionDefinition*, int>::Node_t, int, CUtlMap<char const*, CEconItemCollectionDefinition*, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CEconItemCollectionDefinition*, int>::Node_t, int>, int> >::RemoveAll()
 T CUtlRBTree<CUtlMap<char const*, CEconItemCollectionDefinition*, int>::Node_t, int, CUtlMap<char const*, CEconItemCollectionDefinition*, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CEconItemCollectionDefinition*, int>::Node_t, int>, int> >::RotateLeft(int)
 T CUtlRBTree<CUtlMap<char const*, CEconItemCollectionDefinition*, int>::Node_t, int, CUtlMap<char const*, CEconItemCollectionDefinition*, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CEconItemCollectionDefinition*, int>::Node_t, int>, int> >::RotateRight(int)
 T CUtlRBTree<CUtlMap<char const*, CEconItemCollectionDefinition*, int>::Node_t, int, CUtlMap<char const*, CEconItemCollectionDefinition*, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CEconItemCollectionDefinition*, int>::Node_t, int>, int> >::~CUtlRBTree()
 T CUtlRBTree<CUtlMap<char const*, CEconItemPaintKitDefinition*, int>::Node_t, int, CUtlMap<char const*, CEconItemPaintKitDefinition*, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CEconItemPaintKitDefinition*, int>::Node_t, int>, int> >::Find(CUtlMap<char const*, CEconItemPaintKitDefinition*, int>::Node_t const&) const
 T CUtlRBTree<CUtlMap<char const*, CEconItemPaintKitDefinition*, int>::Node_t, int, CUtlMap<char const*, CEconItemPaintKitDefinition*, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CEconItemPaintKitDefinition*, int>::Node_t, int>, int> >::FindInsertionPosition(CUtlMap<char const*, CEconItemPaintKitDefinition*, int>::Node_t const&, int&, bool&)
 T CUtlRBTree<CUtlMap<char const*, CEconItemPaintKitDefinition*, int>::Node_t, int, CUtlMap<char const*, CEconItemPaintKitDefinition*, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CEconItemPaintKitDefinition*, int>::Node_t, int>, int> >::Insert(CUtlMap<char const*, CEconItemPaintKitDefinition*, int>::Node_t const&)
 T CUtlRBTree<CUtlMap<char const*, CEconItemPaintKitDefinition*, int>::Node_t, int, CUtlMap<char const*, CEconItemPaintKitDefinition*, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CEconItemPaintKitDefinition*, int>::Node_t, int>, int> >::InsertRebalance(int)
 T CUtlRBTree<CUtlMap<char const*, CEconItemPaintKitDefinition*, int>::Node_t, int, CUtlMap<char const*, CEconItemPaintKitDefinition*, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CEconItemPaintKitDefinition*, int>::Node_t, int>, int> >::IsLeftChild(int) const
 T CUtlRBTree<CUtlMap<char const*, CEconItemPaintKitDefinition*, int>::Node_t, int, CUtlMap<char const*, CEconItemPaintKitDefinition*, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CEconItemPaintKitDefinition*, int>::Node_t, int>, int> >::IsRightChild(int) const
 T CUtlRBTree<CUtlMap<char const*, CEconItemPaintKitDefinition*, int>::Node_t, int, CUtlMap<char const*, CEconItemPaintKitDefinition*, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CEconItemPaintKitDefinition*, int>::Node_t, int>, int> >::NewNode()
 T CUtlRBTree<CUtlMap<char const*, CEconItemPaintKitDefinition*, int>::Node_t, int, CUtlMap<char const*, CEconItemPaintKitDefinition*, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CEconItemPaintKitDefinition*, int>::Node_t, int>, int> >::RemoveAll()
 T CUtlRBTree<CUtlMap<char const*, CEconItemPaintKitDefinition*, int>::Node_t, int, CUtlMap<char const*, CEconItemPaintKitDefinition*, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CEconItemPaintKitDefinition*, int>::Node_t, int>, int> >::RotateLeft(int)
 T CUtlRBTree<CUtlMap<char const*, CEconItemPaintKitDefinition*, int>::Node_t, int, CUtlMap<char const*, CEconItemPaintKitDefinition*, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CEconItemPaintKitDefinition*, int>::Node_t, int>, int> >::RotateRight(int)
 T CUtlRBTree<CUtlMap<char const*, CEconItemPaintKitDefinition*, int>::Node_t, int, CUtlMap<char const*, CEconItemPaintKitDefinition*, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CEconItemPaintKitDefinition*, int>::Node_t, int>, int> >::~CUtlRBTree()
 T CUtlRBTree<CUtlMap<char const*, CEconItemSetDefinition*, int>::Node_t, int, CUtlMap<char const*, CEconItemSetDefinition*, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CEconItemSetDefinition*, int>::Node_t, int>, int> >::Find(CUtlMap<char const*, CEconItemSetDefinition*, int>::Node_t const&) const
 T CUtlRBTree<CUtlMap<char const*, CEconItemSetDefinition*, int>::Node_t, int, CUtlMap<char const*, CEconItemSetDefinition*, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CEconItemSetDefinition*, int>::Node_t, int>, int> >::FindInsertionPosition(CUtlMap<char const*, CEconItemSetDefinition*, int>::Node_t const&, int&, bool&)
 T CUtlRBTree<CUtlMap<char const*, CEconItemSetDefinition*, int>::Node_t, int, CUtlMap<char const*, CEconItemSetDefinition*, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CEconItemSetDefinition*, int>::Node_t, int>, int> >::Insert(CUtlMap<char const*, CEconItemSetDefinition*, int>::Node_t const&)
 T CUtlRBTree<CUtlMap<char const*, CEconItemSetDefinition*, int>::Node_t, int, CUtlMap<char const*, CEconItemSetDefinition*, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CEconItemSetDefinition*, int>::Node_t, int>, int> >::InsertRebalance(int)
 T CUtlRBTree<CUtlMap<char const*, CEconItemSetDefinition*, int>::Node_t, int, CUtlMap<char const*, CEconItemSetDefinition*, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CEconItemSetDefinition*, int>::Node_t, int>, int> >::IsLeftChild(int) const
 T CUtlRBTree<CUtlMap<char const*, CEconItemSetDefinition*, int>::Node_t, int, CUtlMap<char const*, CEconItemSetDefinition*, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CEconItemSetDefinition*, int>::Node_t, int>, int> >::IsRightChild(int) const
 T CUtlRBTree<CUtlMap<char const*, CEconItemSetDefinition*, int>::Node_t, int, CUtlMap<char const*, CEconItemSetDefinition*, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CEconItemSetDefinition*, int>::Node_t, int>, int> >::NewNode()
 T CUtlRBTree<CUtlMap<char const*, CEconItemSetDefinition*, int>::Node_t, int, CUtlMap<char const*, CEconItemSetDefinition*, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CEconItemSetDefinition*, int>::Node_t, int>, int> >::RemoveAll()
 T CUtlRBTree<CUtlMap<char const*, CEconItemSetDefinition*, int>::Node_t, int, CUtlMap<char const*, CEconItemSetDefinition*, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CEconItemSetDefinition*, int>::Node_t, int>, int> >::RotateLeft(int)
 T CUtlRBTree<CUtlMap<char const*, CEconItemSetDefinition*, int>::Node_t, int, CUtlMap<char const*, CEconItemSetDefinition*, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CEconItemSetDefinition*, int>::Node_t, int>, int> >::RotateRight(int)
 T CUtlRBTree<CUtlMap<char const*, CEconItemSetDefinition*, int>::Node_t, int, CUtlMap<char const*, CEconItemSetDefinition*, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CEconItemSetDefinition*, int>::Node_t, int>, int> >::~CUtlRBTree()
 T CUtlRBTree<CUtlMap<char const*, CEconLootListDefinition*, int>::Node_t, int, CUtlMap<char const*, CEconLootListDefinition*, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CEconLootListDefinition*, int>::Node_t, int>, int> >::Find(CUtlMap<char const*, CEconLootListDefinition*, int>::Node_t const&) const
 T CUtlRBTree<CUtlMap<char const*, CEconLootListDefinition*, int>::Node_t, int, CUtlMap<char const*, CEconLootListDefinition*, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CEconLootListDefinition*, int>::Node_t, int>, int> >::FindInsertionPosition(CUtlMap<char const*, CEconLootListDefinition*, int>::Node_t const&, int&, bool&)
 T CUtlRBTree<CUtlMap<char const*, CEconLootListDefinition*, int>::Node_t, int, CUtlMap<char const*, CEconLootListDefinition*, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CEconLootListDefinition*, int>::Node_t, int>, int> >::Insert(CUtlMap<char const*, CEconLootListDefinition*, int>::Node_t const&)
 T CUtlRBTree<CUtlMap<char const*, CEconLootListDefinition*, int>::Node_t, int, CUtlMap<char const*, CEconLootListDefinition*, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CEconLootListDefinition*, int>::Node_t, int>, int> >::InsertRebalance(int)
 T CUtlRBTree<CUtlMap<char const*, CEconLootListDefinition*, int>::Node_t, int, CUtlMap<char const*, CEconLootListDefinition*, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CEconLootListDefinition*, int>::Node_t, int>, int> >::IsLeftChild(int) const
 T CUtlRBTree<CUtlMap<char const*, CEconLootListDefinition*, int>::Node_t, int, CUtlMap<char const*, CEconLootListDefinition*, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CEconLootListDefinition*, int>::Node_t, int>, int> >::IsRightChild(int) const
 T CUtlRBTree<CUtlMap<char const*, CEconLootListDefinition*, int>::Node_t, int, CUtlMap<char const*, CEconLootListDefinition*, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CEconLootListDefinition*, int>::Node_t, int>, int> >::NewNode()
 T CUtlRBTree<CUtlMap<char const*, CEconLootListDefinition*, int>::Node_t, int, CUtlMap<char const*, CEconLootListDefinition*, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CEconLootListDefinition*, int>::Node_t, int>, int> >::RemoveAll()
 T CUtlRBTree<CUtlMap<char const*, CEconLootListDefinition*, int>::Node_t, int, CUtlMap<char const*, CEconLootListDefinition*, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CEconLootListDefinition*, int>::Node_t, int>, int> >::RotateLeft(int)
 T CUtlRBTree<CUtlMap<char const*, CEconLootListDefinition*, int>::Node_t, int, CUtlMap<char const*, CEconLootListDefinition*, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CEconLootListDefinition*, int>::Node_t, int>, int> >::RotateRight(int)
 T CUtlRBTree<CUtlMap<char const*, CEconLootListDefinition*, int>::Node_t, int, CUtlMap<char const*, CEconLootListDefinition*, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CEconLootListDefinition*, int>::Node_t, int>, int> >::~CUtlRBTree()
 T CUtlRBTree<CUtlMap<char const*, CEconOperationDefinition*, int>::Node_t, int, CUtlMap<char const*, CEconOperationDefinition*, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CEconOperationDefinition*, int>::Node_t, int>, int> >::Find(CUtlMap<char const*, CEconOperationDefinition*, int>::Node_t const&) const
 T CUtlRBTree<CUtlMap<char const*, CEconOperationDefinition*, int>::Node_t, int, CUtlMap<char const*, CEconOperationDefinition*, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CEconOperationDefinition*, int>::Node_t, int>, int> >::FindInsertionPosition(CUtlMap<char const*, CEconOperationDefinition*, int>::Node_t const&, int&, bool&)
 T CUtlRBTree<CUtlMap<char const*, CEconOperationDefinition*, int>::Node_t, int, CUtlMap<char const*, CEconOperationDefinition*, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CEconOperationDefinition*, int>::Node_t, int>, int> >::Insert(CUtlMap<char const*, CEconOperationDefinition*, int>::Node_t const&)
 T CUtlRBTree<CUtlMap<char const*, CEconOperationDefinition*, int>::Node_t, int, CUtlMap<char const*, CEconOperationDefinition*, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CEconOperationDefinition*, int>::Node_t, int>, int> >::InsertRebalance(int)
 T CUtlRBTree<CUtlMap<char const*, CEconOperationDefinition*, int>::Node_t, int, CUtlMap<char const*, CEconOperationDefinition*, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CEconOperationDefinition*, int>::Node_t, int>, int> >::IsLeftChild(int) const
 T CUtlRBTree<CUtlMap<char const*, CEconOperationDefinition*, int>::Node_t, int, CUtlMap<char const*, CEconOperationDefinition*, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CEconOperationDefinition*, int>::Node_t, int>, int> >::IsRightChild(int) const
 T CUtlRBTree<CUtlMap<char const*, CEconOperationDefinition*, int>::Node_t, int, CUtlMap<char const*, CEconOperationDefinition*, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CEconOperationDefinition*, int>::Node_t, int>, int> >::NewNode()
 T CUtlRBTree<CUtlMap<char const*, CEconOperationDefinition*, int>::Node_t, int, CUtlMap<char const*, CEconOperationDefinition*, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CEconOperationDefinition*, int>::Node_t, int>, int> >::RemoveAll()
 T CUtlRBTree<CUtlMap<char const*, CEconOperationDefinition*, int>::Node_t, int, CUtlMap<char const*, CEconOperationDefinition*, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CEconOperationDefinition*, int>::Node_t, int>, int> >::RotateLeft(int)
 T CUtlRBTree<CUtlMap<char const*, CEconOperationDefinition*, int>::Node_t, int, CUtlMap<char const*, CEconOperationDefinition*, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CEconOperationDefinition*, int>::Node_t, int>, int> >::RotateRight(int)
 T CUtlRBTree<CUtlMap<char const*, CEconOperationDefinition*, int>::Node_t, int, CUtlMap<char const*, CEconOperationDefinition*, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CEconOperationDefinition*, int>::Node_t, int>, int> >::~CUtlRBTree()
 T CUtlRBTree<CUtlMap<char const*, CInstancedResponseSystem*, int>::Node_t, int, CUtlMap<char const*, CInstancedResponseSystem*, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CInstancedResponseSystem*, int>::Node_t, int>, int> >::FindInsertionPosition(CUtlMap<char const*, CInstancedResponseSystem*, int>::Node_t const&, int&, bool&)
 T CUtlRBTree<CUtlMap<char const*, CInstancedResponseSystem*, int>::Node_t, int, CUtlMap<char const*, CInstancedResponseSystem*, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CInstancedResponseSystem*, int>::Node_t, int>, int> >::FirstInorder() const
 T CUtlRBTree<CUtlMap<char const*, CInstancedResponseSystem*, int>::Node_t, int, CUtlMap<char const*, CInstancedResponseSystem*, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CInstancedResponseSystem*, int>::Node_t, int>, int> >::Insert(CUtlMap<char const*, CInstancedResponseSystem*, int>::Node_t const&)
 T CUtlRBTree<CUtlMap<char const*, CInstancedResponseSystem*, int>::Node_t, int, CUtlMap<char const*, CInstancedResponseSystem*, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CInstancedResponseSystem*, int>::Node_t, int>, int> >::InsertRebalance(int)
 T CUtlRBTree<CUtlMap<char const*, CInstancedResponseSystem*, int>::Node_t, int, CUtlMap<char const*, CInstancedResponseSystem*, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CInstancedResponseSystem*, int>::Node_t, int>, int> >::IsLeftChild(int) const
 T CUtlRBTree<CUtlMap<char const*, CInstancedResponseSystem*, int>::Node_t, int, CUtlMap<char const*, CInstancedResponseSystem*, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CInstancedResponseSystem*, int>::Node_t, int>, int> >::IsRightChild(int) const
 T CUtlRBTree<CUtlMap<char const*, CInstancedResponseSystem*, int>::Node_t, int, CUtlMap<char const*, CInstancedResponseSystem*, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CInstancedResponseSystem*, int>::Node_t, int>, int> >::NewNode()
 T CUtlRBTree<CUtlMap<char const*, CInstancedResponseSystem*, int>::Node_t, int, CUtlMap<char const*, CInstancedResponseSystem*, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CInstancedResponseSystem*, int>::Node_t, int>, int> >::NextInorder(int) const
 T CUtlRBTree<CUtlMap<char const*, CInstancedResponseSystem*, int>::Node_t, int, CUtlMap<char const*, CInstancedResponseSystem*, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CInstancedResponseSystem*, int>::Node_t, int>, int> >::RemoveAll()
 T CUtlRBTree<CUtlMap<char const*, CInstancedResponseSystem*, int>::Node_t, int, CUtlMap<char const*, CInstancedResponseSystem*, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CInstancedResponseSystem*, int>::Node_t, int>, int> >::RemoveRebalance(int)
 T CUtlRBTree<CUtlMap<char const*, CInstancedResponseSystem*, int>::Node_t, int, CUtlMap<char const*, CInstancedResponseSystem*, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CInstancedResponseSystem*, int>::Node_t, int>, int> >::RotateLeft(int)
 T CUtlRBTree<CUtlMap<char const*, CInstancedResponseSystem*, int>::Node_t, int, CUtlMap<char const*, CInstancedResponseSystem*, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CInstancedResponseSystem*, int>::Node_t, int>, int> >::RotateRight(int)
 T CUtlRBTree<CUtlMap<char const*, CInstancedResponseSystem*, int>::Node_t, int, CUtlMap<char const*, CInstancedResponseSystem*, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CInstancedResponseSystem*, int>::Node_t, int>, int> >::Unlink(int)
 T CUtlRBTree<CUtlMap<char const*, CInstancedResponseSystem*, int>::Node_t, int, CUtlMap<char const*, CInstancedResponseSystem*, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CInstancedResponseSystem*, int>::Node_t, int>, int> >::~CUtlRBTree()
 T CUtlRBTree<CUtlMap<char const*, CNavArea*, int>::Node_t, int, CUtlMap<char const*, CNavArea*, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CNavArea*, int>::Node_t, int>, int> >::Find(CUtlMap<char const*, CNavArea*, int>::Node_t const&) const
 T CUtlRBTree<CUtlMap<char const*, CNavArea*, int>::Node_t, int, CUtlMap<char const*, CNavArea*, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CNavArea*, int>::Node_t, int>, int> >::FindInsertionPosition(CUtlMap<char const*, CNavArea*, int>::Node_t const&, int&, bool&)
 T CUtlRBTree<CUtlMap<char const*, CNavArea*, int>::Node_t, int, CUtlMap<char const*, CNavArea*, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CNavArea*, int>::Node_t, int>, int> >::FirstInorder() const
 T CUtlRBTree<CUtlMap<char const*, CNavArea*, int>::Node_t, int, CUtlMap<char const*, CNavArea*, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CNavArea*, int>::Node_t, int>, int> >::Insert(CUtlMap<char const*, CNavArea*, int>::Node_t const&)
 T CUtlRBTree<CUtlMap<char const*, CNavArea*, int>::Node_t, int, CUtlMap<char const*, CNavArea*, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CNavArea*, int>::Node_t, int>, int> >::InsertRebalance(int)
 T CUtlRBTree<CUtlMap<char const*, CNavArea*, int>::Node_t, int, CUtlMap<char const*, CNavArea*, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CNavArea*, int>::Node_t, int>, int> >::IsLeftChild(int) const
 T CUtlRBTree<CUtlMap<char const*, CNavArea*, int>::Node_t, int, CUtlMap<char const*, CNavArea*, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CNavArea*, int>::Node_t, int>, int> >::IsRightChild(int) const
 T CUtlRBTree<CUtlMap<char const*, CNavArea*, int>::Node_t, int, CUtlMap<char const*, CNavArea*, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CNavArea*, int>::Node_t, int>, int> >::NewNode()
 T CUtlRBTree<CUtlMap<char const*, CNavArea*, int>::Node_t, int, CUtlMap<char const*, CNavArea*, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CNavArea*, int>::Node_t, int>, int> >::NextInorder(int) const
 T CUtlRBTree<CUtlMap<char const*, CNavArea*, int>::Node_t, int, CUtlMap<char const*, CNavArea*, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CNavArea*, int>::Node_t, int>, int> >::RemoveAll()
 T CUtlRBTree<CUtlMap<char const*, CNavArea*, int>::Node_t, int, CUtlMap<char const*, CNavArea*, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CNavArea*, int>::Node_t, int>, int> >::RotateLeft(int)
 T CUtlRBTree<CUtlMap<char const*, CNavArea*, int>::Node_t, int, CUtlMap<char const*, CNavArea*, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CNavArea*, int>::Node_t, int>, int> >::RotateRight(int)
 T CUtlRBTree<CUtlMap<char const*, CNavArea*, int>::Node_t, int, CUtlMap<char const*, CNavArea*, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CNavArea*, int>::Node_t, int>, int> >::~CUtlRBTree()
 T CUtlRBTree<CUtlMap<char const*, CQuestThemeDefinition*, int>::Node_t, int, CUtlMap<char const*, CQuestThemeDefinition*, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CQuestThemeDefinition*, int>::Node_t, int>, int> >::FindInsertionPosition(CUtlMap<char const*, CQuestThemeDefinition*, int>::Node_t const&, int&, bool&)
 T CUtlRBTree<CUtlMap<char const*, CQuestThemeDefinition*, int>::Node_t, int, CUtlMap<char const*, CQuestThemeDefinition*, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CQuestThemeDefinition*, int>::Node_t, int>, int> >::Insert(CUtlMap<char const*, CQuestThemeDefinition*, int>::Node_t const&)
 T CUtlRBTree<CUtlMap<char const*, CQuestThemeDefinition*, int>::Node_t, int, CUtlMap<char const*, CQuestThemeDefinition*, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CQuestThemeDefinition*, int>::Node_t, int>, int> >::InsertRebalance(int)
 T CUtlRBTree<CUtlMap<char const*, CQuestThemeDefinition*, int>::Node_t, int, CUtlMap<char const*, CQuestThemeDefinition*, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CQuestThemeDefinition*, int>::Node_t, int>, int> >::IsLeftChild(int) const
 T CUtlRBTree<CUtlMap<char const*, CQuestThemeDefinition*, int>::Node_t, int, CUtlMap<char const*, CQuestThemeDefinition*, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CQuestThemeDefinition*, int>::Node_t, int>, int> >::IsRightChild(int) const
 T CUtlRBTree<CUtlMap<char const*, CQuestThemeDefinition*, int>::Node_t, int, CUtlMap<char const*, CQuestThemeDefinition*, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CQuestThemeDefinition*, int>::Node_t, int>, int> >::NewNode()
 T CUtlRBTree<CUtlMap<char const*, CQuestThemeDefinition*, int>::Node_t, int, CUtlMap<char const*, CQuestThemeDefinition*, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CQuestThemeDefinition*, int>::Node_t, int>, int> >::RemoveAll()
 T CUtlRBTree<CUtlMap<char const*, CQuestThemeDefinition*, int>::Node_t, int, CUtlMap<char const*, CQuestThemeDefinition*, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CQuestThemeDefinition*, int>::Node_t, int>, int> >::RotateLeft(int)
 T CUtlRBTree<CUtlMap<char const*, CQuestThemeDefinition*, int>::Node_t, int, CUtlMap<char const*, CQuestThemeDefinition*, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CQuestThemeDefinition*, int>::Node_t, int>, int> >::RotateRight(int)
 T CUtlRBTree<CUtlMap<char const*, CQuestThemeDefinition*, int>::Node_t, int, CUtlMap<char const*, CQuestThemeDefinition*, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CQuestThemeDefinition*, int>::Node_t, int>, int> >::~CUtlRBTree()
 T CUtlRBTree<CUtlMap<char const*, CResponseSystem::Enumeration, short>::Node_t, short, CUtlMap<char const*, CResponseSystem::Enumeration, short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CResponseSystem::Enumeration, short>::Node_t, short>, short> >::Find(CUtlMap<char const*, CResponseSystem::Enumeration, short>::Node_t const&) const
 T CUtlRBTree<CUtlMap<char const*, CResponseSystem::Enumeration, short>::Node_t, short, CUtlMap<char const*, CResponseSystem::Enumeration, short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CResponseSystem::Enumeration, short>::Node_t, short>, short> >::FindInsertionPosition(CUtlMap<char const*, CResponseSystem::Enumeration, short>::Node_t const&, short&, bool&)
 T CUtlRBTree<CUtlMap<char const*, CResponseSystem::Enumeration, short>::Node_t, short, CUtlMap<char const*, CResponseSystem::Enumeration, short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CResponseSystem::Enumeration, short>::Node_t, short>, short> >::FirstInorder() const
 T CUtlRBTree<CUtlMap<char const*, CResponseSystem::Enumeration, short>::Node_t, short, CUtlMap<char const*, CResponseSystem::Enumeration, short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CResponseSystem::Enumeration, short>::Node_t, short>, short> >::Insert(CUtlMap<char const*, CResponseSystem::Enumeration, short>::Node_t const&)
 T CUtlRBTree<CUtlMap<char const*, CResponseSystem::Enumeration, short>::Node_t, short, CUtlMap<char const*, CResponseSystem::Enumeration, short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CResponseSystem::Enumeration, short>::Node_t, short>, short> >::InsertRebalance(short)
 T CUtlRBTree<CUtlMap<char const*, CResponseSystem::Enumeration, short>::Node_t, short, CUtlMap<char const*, CResponseSystem::Enumeration, short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CResponseSystem::Enumeration, short>::Node_t, short>, short> >::IsLeftChild(short) const
 T CUtlRBTree<CUtlMap<char const*, CResponseSystem::Enumeration, short>::Node_t, short, CUtlMap<char const*, CResponseSystem::Enumeration, short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CResponseSystem::Enumeration, short>::Node_t, short>, short> >::IsRightChild(short) const
 T CUtlRBTree<CUtlMap<char const*, CResponseSystem::Enumeration, short>::Node_t, short, CUtlMap<char const*, CResponseSystem::Enumeration, short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CResponseSystem::Enumeration, short>::Node_t, short>, short> >::NewNode()
 T CUtlRBTree<CUtlMap<char const*, CResponseSystem::Enumeration, short>::Node_t, short, CUtlMap<char const*, CResponseSystem::Enumeration, short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CResponseSystem::Enumeration, short>::Node_t, short>, short> >::NextInorder(short) const
 T CUtlRBTree<CUtlMap<char const*, CResponseSystem::Enumeration, short>::Node_t, short, CUtlMap<char const*, CResponseSystem::Enumeration, short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CResponseSystem::Enumeration, short>::Node_t, short>, short> >::RemoveAll()
 T CUtlRBTree<CUtlMap<char const*, CResponseSystem::Enumeration, short>::Node_t, short, CUtlMap<char const*, CResponseSystem::Enumeration, short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CResponseSystem::Enumeration, short>::Node_t, short>, short> >::RotateLeft(short)
 T CUtlRBTree<CUtlMap<char const*, CResponseSystem::Enumeration, short>::Node_t, short, CUtlMap<char const*, CResponseSystem::Enumeration, short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CResponseSystem::Enumeration, short>::Node_t, short>, short> >::RotateRight(short)
 T CUtlRBTree<CUtlMap<char const*, CResponseSystem::Enumeration, short>::Node_t, short, CUtlMap<char const*, CResponseSystem::Enumeration, short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CResponseSystem::Enumeration, short>::Node_t, short>, short> >::~CUtlRBTree()
 T CUtlRBTree<CUtlMap<char const*, CUserMessage*, int>::Node_t, int, CUtlMap<char const*, CUserMessage*, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CUserMessage*, int>::Node_t, int>, int> >::Find(CUtlMap<char const*, CUserMessage*, int>::Node_t const&) const
 T CUtlRBTree<CUtlMap<char const*, CUserMessage*, int>::Node_t, int, CUtlMap<char const*, CUserMessage*, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CUserMessage*, int>::Node_t, int>, int> >::FindInsertionPosition(CUtlMap<char const*, CUserMessage*, int>::Node_t const&, int&, bool&)
 T CUtlRBTree<CUtlMap<char const*, CUserMessage*, int>::Node_t, int, CUtlMap<char const*, CUserMessage*, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CUserMessage*, int>::Node_t, int>, int> >::FirstInorder() const
 T CUtlRBTree<CUtlMap<char const*, CUserMessage*, int>::Node_t, int, CUtlMap<char const*, CUserMessage*, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CUserMessage*, int>::Node_t, int>, int> >::Insert(CUtlMap<char const*, CUserMessage*, int>::Node_t const&)
 T CUtlRBTree<CUtlMap<char const*, CUserMessage*, int>::Node_t, int, CUtlMap<char const*, CUserMessage*, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CUserMessage*, int>::Node_t, int>, int> >::InsertRebalance(int)
 T CUtlRBTree<CUtlMap<char const*, CUserMessage*, int>::Node_t, int, CUtlMap<char const*, CUserMessage*, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CUserMessage*, int>::Node_t, int>, int> >::IsLeftChild(int) const
 T CUtlRBTree<CUtlMap<char const*, CUserMessage*, int>::Node_t, int, CUtlMap<char const*, CUserMessage*, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CUserMessage*, int>::Node_t, int>, int> >::IsRightChild(int) const
 T CUtlRBTree<CUtlMap<char const*, CUserMessage*, int>::Node_t, int, CUtlMap<char const*, CUserMessage*, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CUserMessage*, int>::Node_t, int>, int> >::NewNode()
 T CUtlRBTree<CUtlMap<char const*, CUserMessage*, int>::Node_t, int, CUtlMap<char const*, CUserMessage*, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CUserMessage*, int>::Node_t, int>, int> >::NextInorder(int) const
 T CUtlRBTree<CUtlMap<char const*, CUserMessage*, int>::Node_t, int, CUtlMap<char const*, CUserMessage*, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CUserMessage*, int>::Node_t, int>, int> >::RemoveAll()
 T CUtlRBTree<CUtlMap<char const*, CUserMessage*, int>::Node_t, int, CUtlMap<char const*, CUserMessage*, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CUserMessage*, int>::Node_t, int>, int> >::RotateLeft(int)
 T CUtlRBTree<CUtlMap<char const*, CUserMessage*, int>::Node_t, int, CUtlMap<char const*, CUserMessage*, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CUserMessage*, int>::Node_t, int>, int> >::RotateRight(int)
 T CUtlRBTree<CUtlMap<char const*, CUserMessage*, int>::Node_t, int, CUtlMap<char const*, CUserMessage*, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CUserMessage*, int>::Node_t, int>, int> >::~CUtlRBTree()
 T CUtlRBTree<CUtlMap<char const*, CUtlConstStringBase<char>, int>::Node_t, int, CUtlMap<char const*, CUtlConstStringBase<char>, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CUtlConstStringBase<char>, int>::Node_t, int>, int> >::FindInsertionPosition(CUtlMap<char const*, CUtlConstStringBase<char>, int>::Node_t const&, int&, bool&)
 T CUtlRBTree<CUtlMap<char const*, CUtlConstStringBase<char>, int>::Node_t, int, CUtlMap<char const*, CUtlConstStringBase<char>, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CUtlConstStringBase<char>, int>::Node_t, int>, int> >::FirstInorder() const
 T CUtlRBTree<CUtlMap<char const*, CUtlConstStringBase<char>, int>::Node_t, int, CUtlMap<char const*, CUtlConstStringBase<char>, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CUtlConstStringBase<char>, int>::Node_t, int>, int> >::Insert(CUtlMap<char const*, CUtlConstStringBase<char>, int>::Node_t const&)
 T CUtlRBTree<CUtlMap<char const*, CUtlConstStringBase<char>, int>::Node_t, int, CUtlMap<char const*, CUtlConstStringBase<char>, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CUtlConstStringBase<char>, int>::Node_t, int>, int> >::InsertRebalance(int)
 T CUtlRBTree<CUtlMap<char const*, CUtlConstStringBase<char>, int>::Node_t, int, CUtlMap<char const*, CUtlConstStringBase<char>, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CUtlConstStringBase<char>, int>::Node_t, int>, int> >::IsLeftChild(int) const
 T CUtlRBTree<CUtlMap<char const*, CUtlConstStringBase<char>, int>::Node_t, int, CUtlMap<char const*, CUtlConstStringBase<char>, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CUtlConstStringBase<char>, int>::Node_t, int>, int> >::IsRightChild(int) const
 T CUtlRBTree<CUtlMap<char const*, CUtlConstStringBase<char>, int>::Node_t, int, CUtlMap<char const*, CUtlConstStringBase<char>, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CUtlConstStringBase<char>, int>::Node_t, int>, int> >::NewNode()
 T CUtlRBTree<CUtlMap<char const*, CUtlConstStringBase<char>, int>::Node_t, int, CUtlMap<char const*, CUtlConstStringBase<char>, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CUtlConstStringBase<char>, int>::Node_t, int>, int> >::NextInorder(int) const
 T CUtlRBTree<CUtlMap<char const*, CUtlConstStringBase<char>, int>::Node_t, int, CUtlMap<char const*, CUtlConstStringBase<char>, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CUtlConstStringBase<char>, int>::Node_t, int>, int> >::RemoveAll()
 T CUtlRBTree<CUtlMap<char const*, CUtlConstStringBase<char>, int>::Node_t, int, CUtlMap<char const*, CUtlConstStringBase<char>, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CUtlConstStringBase<char>, int>::Node_t, int>, int> >::RotateLeft(int)
 T CUtlRBTree<CUtlMap<char const*, CUtlConstStringBase<char>, int>::Node_t, int, CUtlMap<char const*, CUtlConstStringBase<char>, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CUtlConstStringBase<char>, int>::Node_t, int>, int> >::RotateRight(int)
 T CUtlRBTree<CUtlMap<char const*, CUtlConstStringBase<char>, int>::Node_t, int, CUtlMap<char const*, CUtlConstStringBase<char>, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CUtlConstStringBase<char>, int>::Node_t, int>, int> >::~CUtlRBTree()
 T CUtlRBTree<CUtlMap<char const*, CUtlVector<CItemLevelingDefinition, CUtlMemory<CItemLevelingDefinition, int> >*, int>::Node_t, int, CUtlMap<char const*, CUtlVector<CItemLevelingDefinition, CUtlMemory<CItemLevelingDefinition, int> >*, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CUtlVector<CItemLevelingDefinition, CUtlMemory<CItemLevelingDefinition, int> >*, int>::Node_t, int>, int> >::Find(CUtlMap<char const*, CUtlVector<CItemLevelingDefinition, CUtlMemory<CItemLevelingDefinition, int> >*, int>::Node_t const&) const
 T CUtlRBTree<CUtlMap<char const*, CUtlVector<CItemLevelingDefinition, CUtlMemory<CItemLevelingDefinition, int> >*, int>::Node_t, int, CUtlMap<char const*, CUtlVector<CItemLevelingDefinition, CUtlMemory<CItemLevelingDefinition, int> >*, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CUtlVector<CItemLevelingDefinition, CUtlMemory<CItemLevelingDefinition, int> >*, int>::Node_t, int>, int> >::FindInsertionPosition(CUtlMap<char const*, CUtlVector<CItemLevelingDefinition, CUtlMemory<CItemLevelingDefinition, int> >*, int>::Node_t const&, int&, bool&)
 T CUtlRBTree<CUtlMap<char const*, CUtlVector<CItemLevelingDefinition, CUtlMemory<CItemLevelingDefinition, int> >*, int>::Node_t, int, CUtlMap<char const*, CUtlVector<CItemLevelingDefinition, CUtlMemory<CItemLevelingDefinition, int> >*, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CUtlVector<CItemLevelingDefinition, CUtlMemory<CItemLevelingDefinition, int> >*, int>::Node_t, int>, int> >::FirstInorder() const
 T CUtlRBTree<CUtlMap<char const*, CUtlVector<CItemLevelingDefinition, CUtlMemory<CItemLevelingDefinition, int> >*, int>::Node_t, int, CUtlMap<char const*, CUtlVector<CItemLevelingDefinition, CUtlMemory<CItemLevelingDefinition, int> >*, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CUtlVector<CItemLevelingDefinition, CUtlMemory<CItemLevelingDefinition, int> >*, int>::Node_t, int>, int> >::Insert(CUtlMap<char const*, CUtlVector<CItemLevelingDefinition, CUtlMemory<CItemLevelingDefinition, int> >*, int>::Node_t const&)
 T CUtlRBTree<CUtlMap<char const*, CUtlVector<CItemLevelingDefinition, CUtlMemory<CItemLevelingDefinition, int> >*, int>::Node_t, int, CUtlMap<char const*, CUtlVector<CItemLevelingDefinition, CUtlMemory<CItemLevelingDefinition, int> >*, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CUtlVector<CItemLevelingDefinition, CUtlMemory<CItemLevelingDefinition, int> >*, int>::Node_t, int>, int> >::InsertRebalance(int)
 T CUtlRBTree<CUtlMap<char const*, CUtlVector<CItemLevelingDefinition, CUtlMemory<CItemLevelingDefinition, int> >*, int>::Node_t, int, CUtlMap<char const*, CUtlVector<CItemLevelingDefinition, CUtlMemory<CItemLevelingDefinition, int> >*, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CUtlVector<CItemLevelingDefinition, CUtlMemory<CItemLevelingDefinition, int> >*, int>::Node_t, int>, int> >::IsLeftChild(int) const
 T CUtlRBTree<CUtlMap<char const*, CUtlVector<CItemLevelingDefinition, CUtlMemory<CItemLevelingDefinition, int> >*, int>::Node_t, int, CUtlMap<char const*, CUtlVector<CItemLevelingDefinition, CUtlMemory<CItemLevelingDefinition, int> >*, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CUtlVector<CItemLevelingDefinition, CUtlMemory<CItemLevelingDefinition, int> >*, int>::Node_t, int>, int> >::IsRightChild(int) const
 T CUtlRBTree<CUtlMap<char const*, CUtlVector<CItemLevelingDefinition, CUtlMemory<CItemLevelingDefinition, int> >*, int>::Node_t, int, CUtlMap<char const*, CUtlVector<CItemLevelingDefinition, CUtlMemory<CItemLevelingDefinition, int> >*, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CUtlVector<CItemLevelingDefinition, CUtlMemory<CItemLevelingDefinition, int> >*, int>::Node_t, int>, int> >::NewNode()
 T CUtlRBTree<CUtlMap<char const*, CUtlVector<CItemLevelingDefinition, CUtlMemory<CItemLevelingDefinition, int> >*, int>::Node_t, int, CUtlMap<char const*, CUtlVector<CItemLevelingDefinition, CUtlMemory<CItemLevelingDefinition, int> >*, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CUtlVector<CItemLevelingDefinition, CUtlMemory<CItemLevelingDefinition, int> >*, int>::Node_t, int>, int> >::NextInorder(int) const
 T CUtlRBTree<CUtlMap<char const*, CUtlVector<CItemLevelingDefinition, CUtlMemory<CItemLevelingDefinition, int> >*, int>::Node_t, int, CUtlMap<char const*, CUtlVector<CItemLevelingDefinition, CUtlMemory<CItemLevelingDefinition, int> >*, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CUtlVector<CItemLevelingDefinition, CUtlMemory<CItemLevelingDefinition, int> >*, int>::Node_t, int>, int> >::RemoveAll()
 T CUtlRBTree<CUtlMap<char const*, CUtlVector<CItemLevelingDefinition, CUtlMemory<CItemLevelingDefinition, int> >*, int>::Node_t, int, CUtlMap<char const*, CUtlVector<CItemLevelingDefinition, CUtlMemory<CItemLevelingDefinition, int> >*, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CUtlVector<CItemLevelingDefinition, CUtlMemory<CItemLevelingDefinition, int> >*, int>::Node_t, int>, int> >::RotateLeft(int)
 T CUtlRBTree<CUtlMap<char const*, CUtlVector<CItemLevelingDefinition, CUtlMemory<CItemLevelingDefinition, int> >*, int>::Node_t, int, CUtlMap<char const*, CUtlVector<CItemLevelingDefinition, CUtlMemory<CItemLevelingDefinition, int> >*, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CUtlVector<CItemLevelingDefinition, CUtlMemory<CItemLevelingDefinition, int> >*, int>::Node_t, int>, int> >::RotateRight(int)
 T CUtlRBTree<CUtlMap<char const*, CUtlVector<CItemLevelingDefinition, CUtlMemory<CItemLevelingDefinition, int> >*, int>::Node_t, int, CUtlMap<char const*, CUtlVector<CItemLevelingDefinition, CUtlMemory<CItemLevelingDefinition, int> >*, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CUtlVector<CItemLevelingDefinition, CUtlMemory<CItemLevelingDefinition, int> >*, int>::Node_t, int>, int> >::~CUtlRBTree()
 T CUtlRBTree<CUtlMap<char const*, CUtlVector<schema_string_table_entry_t, CUtlMemory<schema_string_table_entry_t, int> >*, int>::Node_t, int, CUtlMap<char const*, CUtlVector<schema_string_table_entry_t, CUtlMemory<schema_string_table_entry_t, int> >*, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CUtlVector<schema_string_table_entry_t, CUtlMemory<schema_string_table_entry_t, int> >*, int>::Node_t, int>, int> >::Find(CUtlMap<char const*, CUtlVector<schema_string_table_entry_t, CUtlMemory<schema_string_table_entry_t, int> >*, int>::Node_t const&) const
 T CUtlRBTree<CUtlMap<char const*, CUtlVector<schema_string_table_entry_t, CUtlMemory<schema_string_table_entry_t, int> >*, int>::Node_t, int, CUtlMap<char const*, CUtlVector<schema_string_table_entry_t, CUtlMemory<schema_string_table_entry_t, int> >*, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CUtlVector<schema_string_table_entry_t, CUtlMemory<schema_string_table_entry_t, int> >*, int>::Node_t, int>, int> >::FindInsertionPosition(CUtlMap<char const*, CUtlVector<schema_string_table_entry_t, CUtlMemory<schema_string_table_entry_t, int> >*, int>::Node_t const&, int&, bool&)
 T CUtlRBTree<CUtlMap<char const*, CUtlVector<schema_string_table_entry_t, CUtlMemory<schema_string_table_entry_t, int> >*, int>::Node_t, int, CUtlMap<char const*, CUtlVector<schema_string_table_entry_t, CUtlMemory<schema_string_table_entry_t, int> >*, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CUtlVector<schema_string_table_entry_t, CUtlMemory<schema_string_table_entry_t, int> >*, int>::Node_t, int>, int> >::FirstInorder() const
 T CUtlRBTree<CUtlMap<char const*, CUtlVector<schema_string_table_entry_t, CUtlMemory<schema_string_table_entry_t, int> >*, int>::Node_t, int, CUtlMap<char const*, CUtlVector<schema_string_table_entry_t, CUtlMemory<schema_string_table_entry_t, int> >*, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CUtlVector<schema_string_table_entry_t, CUtlMemory<schema_string_table_entry_t, int> >*, int>::Node_t, int>, int> >::Insert(CUtlMap<char const*, CUtlVector<schema_string_table_entry_t, CUtlMemory<schema_string_table_entry_t, int> >*, int>::Node_t const&)
 T CUtlRBTree<CUtlMap<char const*, CUtlVector<schema_string_table_entry_t, CUtlMemory<schema_string_table_entry_t, int> >*, int>::Node_t, int, CUtlMap<char const*, CUtlVector<schema_string_table_entry_t, CUtlMemory<schema_string_table_entry_t, int> >*, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CUtlVector<schema_string_table_entry_t, CUtlMemory<schema_string_table_entry_t, int> >*, int>::Node_t, int>, int> >::InsertRebalance(int)
 T CUtlRBTree<CUtlMap<char const*, CUtlVector<schema_string_table_entry_t, CUtlMemory<schema_string_table_entry_t, int> >*, int>::Node_t, int, CUtlMap<char const*, CUtlVector<schema_string_table_entry_t, CUtlMemory<schema_string_table_entry_t, int> >*, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CUtlVector<schema_string_table_entry_t, CUtlMemory<schema_string_table_entry_t, int> >*, int>::Node_t, int>, int> >::IsLeftChild(int) const
 T CUtlRBTree<CUtlMap<char const*, CUtlVector<schema_string_table_entry_t, CUtlMemory<schema_string_table_entry_t, int> >*, int>::Node_t, int, CUtlMap<char const*, CUtlVector<schema_string_table_entry_t, CUtlMemory<schema_string_table_entry_t, int> >*, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CUtlVector<schema_string_table_entry_t, CUtlMemory<schema_string_table_entry_t, int> >*, int>::Node_t, int>, int> >::IsRightChild(int) const
 T CUtlRBTree<CUtlMap<char const*, CUtlVector<schema_string_table_entry_t, CUtlMemory<schema_string_table_entry_t, int> >*, int>::Node_t, int, CUtlMap<char const*, CUtlVector<schema_string_table_entry_t, CUtlMemory<schema_string_table_entry_t, int> >*, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CUtlVector<schema_string_table_entry_t, CUtlMemory<schema_string_table_entry_t, int> >*, int>::Node_t, int>, int> >::NewNode()
 T CUtlRBTree<CUtlMap<char const*, CUtlVector<schema_string_table_entry_t, CUtlMemory<schema_string_table_entry_t, int> >*, int>::Node_t, int, CUtlMap<char const*, CUtlVector<schema_string_table_entry_t, CUtlMemory<schema_string_table_entry_t, int> >*, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CUtlVector<schema_string_table_entry_t, CUtlMemory<schema_string_table_entry_t, int> >*, int>::Node_t, int>, int> >::NextInorder(int) const
 T CUtlRBTree<CUtlMap<char const*, CUtlVector<schema_string_table_entry_t, CUtlMemory<schema_string_table_entry_t, int> >*, int>::Node_t, int, CUtlMap<char const*, CUtlVector<schema_string_table_entry_t, CUtlMemory<schema_string_table_entry_t, int> >*, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CUtlVector<schema_string_table_entry_t, CUtlMemory<schema_string_table_entry_t, int> >*, int>::Node_t, int>, int> >::RemoveAll()
 T CUtlRBTree<CUtlMap<char const*, CUtlVector<schema_string_table_entry_t, CUtlMemory<schema_string_table_entry_t, int> >*, int>::Node_t, int, CUtlMap<char const*, CUtlVector<schema_string_table_entry_t, CUtlMemory<schema_string_table_entry_t, int> >*, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CUtlVector<schema_string_table_entry_t, CUtlMemory<schema_string_table_entry_t, int> >*, int>::Node_t, int>, int> >::RotateLeft(int)
 T CUtlRBTree<CUtlMap<char const*, CUtlVector<schema_string_table_entry_t, CUtlMemory<schema_string_table_entry_t, int> >*, int>::Node_t, int, CUtlMap<char const*, CUtlVector<schema_string_table_entry_t, CUtlMemory<schema_string_table_entry_t, int> >*, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CUtlVector<schema_string_table_entry_t, CUtlMemory<schema_string_table_entry_t, int> >*, int>::Node_t, int>, int> >::RotateRight(int)
 T CUtlRBTree<CUtlMap<char const*, CUtlVector<schema_string_table_entry_t, CUtlMemory<schema_string_table_entry_t, int> >*, int>::Node_t, int, CUtlMap<char const*, CUtlVector<schema_string_table_entry_t, CUtlMemory<schema_string_table_entry_t, int> >*, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, CUtlVector<schema_string_table_entry_t, CUtlMemory<schema_string_table_entry_t, int> >*, int>::Node_t, int>, int> >::~CUtlRBTree()
 T CUtlRBTree<CUtlMap<char const*, ConceptHistory_t, int>::Node_t, int, CUtlMap<char const*, ConceptHistory_t, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, ConceptHistory_t, int>::Node_t, int>, int> >::Find(CUtlMap<char const*, ConceptHistory_t, int>::Node_t const&) const
 T CUtlRBTree<CUtlMap<char const*, ConceptHistory_t, int>::Node_t, int, CUtlMap<char const*, ConceptHistory_t, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, ConceptHistory_t, int>::Node_t, int>, int> >::FindInsertionPosition(CUtlMap<char const*, ConceptHistory_t, int>::Node_t const&, int&, bool&)
 T CUtlRBTree<CUtlMap<char const*, ConceptHistory_t, int>::Node_t, int, CUtlMap<char const*, ConceptHistory_t, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, ConceptHistory_t, int>::Node_t, int>, int> >::FirstInorder() const
 T CUtlRBTree<CUtlMap<char const*, ConceptHistory_t, int>::Node_t, int, CUtlMap<char const*, ConceptHistory_t, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, ConceptHistory_t, int>::Node_t, int>, int> >::Insert(CUtlMap<char const*, ConceptHistory_t, int>::Node_t const&)
 T CUtlRBTree<CUtlMap<char const*, ConceptHistory_t, int>::Node_t, int, CUtlMap<char const*, ConceptHistory_t, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, ConceptHistory_t, int>::Node_t, int>, int> >::InsertRebalance(int)
 T CUtlRBTree<CUtlMap<char const*, ConceptHistory_t, int>::Node_t, int, CUtlMap<char const*, ConceptHistory_t, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, ConceptHistory_t, int>::Node_t, int>, int> >::IsLeftChild(int) const
 T CUtlRBTree<CUtlMap<char const*, ConceptHistory_t, int>::Node_t, int, CUtlMap<char const*, ConceptHistory_t, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, ConceptHistory_t, int>::Node_t, int>, int> >::IsRightChild(int) const
 T CUtlRBTree<CUtlMap<char const*, ConceptHistory_t, int>::Node_t, int, CUtlMap<char const*, ConceptHistory_t, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, ConceptHistory_t, int>::Node_t, int>, int> >::NewNode()
 T CUtlRBTree<CUtlMap<char const*, ConceptHistory_t, int>::Node_t, int, CUtlMap<char const*, ConceptHistory_t, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, ConceptHistory_t, int>::Node_t, int>, int> >::NextInorder(int) const
 T CUtlRBTree<CUtlMap<char const*, ConceptHistory_t, int>::Node_t, int, CUtlMap<char const*, ConceptHistory_t, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, ConceptHistory_t, int>::Node_t, int>, int> >::RemoveAll()
 T CUtlRBTree<CUtlMap<char const*, ConceptHistory_t, int>::Node_t, int, CUtlMap<char const*, ConceptHistory_t, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, ConceptHistory_t, int>::Node_t, int>, int> >::RotateLeft(int)
 T CUtlRBTree<CUtlMap<char const*, ConceptHistory_t, int>::Node_t, int, CUtlMap<char const*, ConceptHistory_t, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, ConceptHistory_t, int>::Node_t, int>, int> >::RotateRight(int)
 T CUtlRBTree<CUtlMap<char const*, ConceptHistory_t, int>::Node_t, int, CUtlMap<char const*, ConceptHistory_t, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, ConceptHistory_t, int>::Node_t, int>, int> >::~CUtlRBTree()
 T CUtlRBTree<CUtlMap<char const*, ConceptInfo_t*, unsigned short>::Node_t, unsigned short, CUtlMap<char const*, ConceptInfo_t*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, ConceptInfo_t*, unsigned short>::Node_t, unsigned short>, unsigned short> >::Find(CUtlMap<char const*, ConceptInfo_t*, unsigned short>::Node_t const&) const
 T CUtlRBTree<CUtlMap<char const*, ConceptInfo_t*, unsigned short>::Node_t, unsigned short, CUtlMap<char const*, ConceptInfo_t*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, ConceptInfo_t*, unsigned short>::Node_t, unsigned short>, unsigned short> >::FindInsertionPosition(CUtlMap<char const*, ConceptInfo_t*, unsigned short>::Node_t const&, unsigned short&, bool&)
 T CUtlRBTree<CUtlMap<char const*, ConceptInfo_t*, unsigned short>::Node_t, unsigned short, CUtlMap<char const*, ConceptInfo_t*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, ConceptInfo_t*, unsigned short>::Node_t, unsigned short>, unsigned short> >::Insert(CUtlMap<char const*, ConceptInfo_t*, unsigned short>::Node_t const&)
 T CUtlRBTree<CUtlMap<char const*, ConceptInfo_t*, unsigned short>::Node_t, unsigned short, CUtlMap<char const*, ConceptInfo_t*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, ConceptInfo_t*, unsigned short>::Node_t, unsigned short>, unsigned short> >::InsertRebalance(unsigned short)
 T CUtlRBTree<CUtlMap<char const*, ConceptInfo_t*, unsigned short>::Node_t, unsigned short, CUtlMap<char const*, ConceptInfo_t*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, ConceptInfo_t*, unsigned short>::Node_t, unsigned short>, unsigned short> >::IsLeftChild(unsigned short) const
 T CUtlRBTree<CUtlMap<char const*, ConceptInfo_t*, unsigned short>::Node_t, unsigned short, CUtlMap<char const*, ConceptInfo_t*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, ConceptInfo_t*, unsigned short>::Node_t, unsigned short>, unsigned short> >::IsRightChild(unsigned short) const
 T CUtlRBTree<CUtlMap<char const*, ConceptInfo_t*, unsigned short>::Node_t, unsigned short, CUtlMap<char const*, ConceptInfo_t*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, ConceptInfo_t*, unsigned short>::Node_t, unsigned short>, unsigned short> >::NewNode()
 T CUtlRBTree<CUtlMap<char const*, ConceptInfo_t*, unsigned short>::Node_t, unsigned short, CUtlMap<char const*, ConceptInfo_t*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, ConceptInfo_t*, unsigned short>::Node_t, unsigned short>, unsigned short> >::RemoveAll()
 T CUtlRBTree<CUtlMap<char const*, ConceptInfo_t*, unsigned short>::Node_t, unsigned short, CUtlMap<char const*, ConceptInfo_t*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, ConceptInfo_t*, unsigned short>::Node_t, unsigned short>, unsigned short> >::RotateLeft(unsigned short)
 T CUtlRBTree<CUtlMap<char const*, ConceptInfo_t*, unsigned short>::Node_t, unsigned short, CUtlMap<char const*, ConceptInfo_t*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, ConceptInfo_t*, unsigned short>::Node_t, unsigned short>, unsigned short> >::RotateRight(unsigned short)
 T CUtlRBTree<CUtlMap<char const*, ConceptInfo_t*, unsigned short>::Node_t, unsigned short, CUtlMap<char const*, ConceptInfo_t*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, ConceptInfo_t*, unsigned short>::Node_t, unsigned short>, unsigned short> >::~CUtlRBTree()
 T CUtlRBTree<CUtlMap<char const*, Criteria, short>::Node_t, short, CUtlMap<char const*, Criteria, short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, Criteria, short>::Node_t, short>, short> >::Find(CUtlMap<char const*, Criteria, short>::Node_t const&) const
 T CUtlRBTree<CUtlMap<char const*, Criteria, short>::Node_t, short, CUtlMap<char const*, Criteria, short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, Criteria, short>::Node_t, short>, short> >::FindInsertionPosition(CUtlMap<char const*, Criteria, short>::Node_t const&, short&, bool&)
 T CUtlRBTree<CUtlMap<char const*, Criteria, short>::Node_t, short, CUtlMap<char const*, Criteria, short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, Criteria, short>::Node_t, short>, short> >::FirstInorder() const
 T CUtlRBTree<CUtlMap<char const*, Criteria, short>::Node_t, short, CUtlMap<char const*, Criteria, short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, Criteria, short>::Node_t, short>, short> >::Insert(CUtlMap<char const*, Criteria, short>::Node_t const&)
 T CUtlRBTree<CUtlMap<char const*, Criteria, short>::Node_t, short, CUtlMap<char const*, Criteria, short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, Criteria, short>::Node_t, short>, short> >::InsertRebalance(short)
 T CUtlRBTree<CUtlMap<char const*, Criteria, short>::Node_t, short, CUtlMap<char const*, Criteria, short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, Criteria, short>::Node_t, short>, short> >::IsLeftChild(short) const
 T CUtlRBTree<CUtlMap<char const*, Criteria, short>::Node_t, short, CUtlMap<char const*, Criteria, short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, Criteria, short>::Node_t, short>, short> >::IsRightChild(short) const
 T CUtlRBTree<CUtlMap<char const*, Criteria, short>::Node_t, short, CUtlMap<char const*, Criteria, short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, Criteria, short>::Node_t, short>, short> >::NewNode()
 T CUtlRBTree<CUtlMap<char const*, Criteria, short>::Node_t, short, CUtlMap<char const*, Criteria, short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, Criteria, short>::Node_t, short>, short> >::NextInorder(short) const
 T CUtlRBTree<CUtlMap<char const*, Criteria, short>::Node_t, short, CUtlMap<char const*, Criteria, short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, Criteria, short>::Node_t, short>, short> >::RemoveAll()
 T CUtlRBTree<CUtlMap<char const*, Criteria, short>::Node_t, short, CUtlMap<char const*, Criteria, short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, Criteria, short>::Node_t, short>, short> >::RotateLeft(short)
 T CUtlRBTree<CUtlMap<char const*, Criteria, short>::Node_t, short, CUtlMap<char const*, Criteria, short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, Criteria, short>::Node_t, short>, short> >::RotateRight(short)
 T CUtlRBTree<CUtlMap<char const*, Criteria, short>::Node_t, short, CUtlMap<char const*, Criteria, short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, Criteria, short>::Node_t, short>, short> >::~CUtlRBTree()
 T CUtlRBTree<CUtlMap<char const*, EEquipType_t, int>::Node_t, int, CUtlMap<char const*, EEquipType_t, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, EEquipType_t, int>::Node_t, int>, int> >::Find(CUtlMap<char const*, EEquipType_t, int>::Node_t const&) const
 T CUtlRBTree<CUtlMap<char const*, EEquipType_t, int>::Node_t, int, CUtlMap<char const*, EEquipType_t, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, EEquipType_t, int>::Node_t, int>, int> >::FindInsertionPosition(CUtlMap<char const*, EEquipType_t, int>::Node_t const&, int&, bool&)
 T CUtlRBTree<CUtlMap<char const*, EEquipType_t, int>::Node_t, int, CUtlMap<char const*, EEquipType_t, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, EEquipType_t, int>::Node_t, int>, int> >::FirstInorder() const
 T CUtlRBTree<CUtlMap<char const*, EEquipType_t, int>::Node_t, int, CUtlMap<char const*, EEquipType_t, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, EEquipType_t, int>::Node_t, int>, int> >::Insert(CUtlMap<char const*, EEquipType_t, int>::Node_t const&)
 T CUtlRBTree<CUtlMap<char const*, EEquipType_t, int>::Node_t, int, CUtlMap<char const*, EEquipType_t, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, EEquipType_t, int>::Node_t, int>, int> >::InsertRebalance(int)
 T CUtlRBTree<CUtlMap<char const*, EEquipType_t, int>::Node_t, int, CUtlMap<char const*, EEquipType_t, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, EEquipType_t, int>::Node_t, int>, int> >::IsLeftChild(int) const
 T CUtlRBTree<CUtlMap<char const*, EEquipType_t, int>::Node_t, int, CUtlMap<char const*, EEquipType_t, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, EEquipType_t, int>::Node_t, int>, int> >::IsRightChild(int) const
 T CUtlRBTree<CUtlMap<char const*, EEquipType_t, int>::Node_t, int, CUtlMap<char const*, EEquipType_t, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, EEquipType_t, int>::Node_t, int>, int> >::NewNode()
 T CUtlRBTree<CUtlMap<char const*, EEquipType_t, int>::Node_t, int, CUtlMap<char const*, EEquipType_t, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, EEquipType_t, int>::Node_t, int>, int> >::NextInorder(int) const
 T CUtlRBTree<CUtlMap<char const*, EEquipType_t, int>::Node_t, int, CUtlMap<char const*, EEquipType_t, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, EEquipType_t, int>::Node_t, int>, int> >::RemoveAll()
 T CUtlRBTree<CUtlMap<char const*, EEquipType_t, int>::Node_t, int, CUtlMap<char const*, EEquipType_t, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, EEquipType_t, int>::Node_t, int>, int> >::RotateLeft(int)
 T CUtlRBTree<CUtlMap<char const*, EEquipType_t, int>::Node_t, int, CUtlMap<char const*, EEquipType_t, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, EEquipType_t, int>::Node_t, int>, int> >::RotateRight(int)
 T CUtlRBTree<CUtlMap<char const*, EEquipType_t, int>::Node_t, int, CUtlMap<char const*, EEquipType_t, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, EEquipType_t, int>::Node_t, int>, int> >::~CUtlRBTree()
 T CUtlRBTree<CUtlMap<char const*, EventGroup, int>::Node_t, int, CUtlMap<char const*, EventGroup, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, EventGroup, int>::Node_t, int>, int> >::Find(CUtlMap<char const*, EventGroup, int>::Node_t const&) const
 T CUtlRBTree<CUtlMap<char const*, EventGroup, int>::Node_t, int, CUtlMap<char const*, EventGroup, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, EventGroup, int>::Node_t, int>, int> >::FindInsertionPosition(CUtlMap<char const*, EventGroup, int>::Node_t const&, int&, bool&)
 T CUtlRBTree<CUtlMap<char const*, EventGroup, int>::Node_t, int, CUtlMap<char const*, EventGroup, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, EventGroup, int>::Node_t, int>, int> >::FirstInorder() const
 T CUtlRBTree<CUtlMap<char const*, EventGroup, int>::Node_t, int, CUtlMap<char const*, EventGroup, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, EventGroup, int>::Node_t, int>, int> >::Insert(CUtlMap<char const*, EventGroup, int>::Node_t const&)
 T CUtlRBTree<CUtlMap<char const*, EventGroup, int>::Node_t, int, CUtlMap<char const*, EventGroup, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, EventGroup, int>::Node_t, int>, int> >::InsertRebalance(int)
 T CUtlRBTree<CUtlMap<char const*, EventGroup, int>::Node_t, int, CUtlMap<char const*, EventGroup, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, EventGroup, int>::Node_t, int>, int> >::IsLeftChild(int) const
 T CUtlRBTree<CUtlMap<char const*, EventGroup, int>::Node_t, int, CUtlMap<char const*, EventGroup, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, EventGroup, int>::Node_t, int>, int> >::IsRightChild(int) const
 T CUtlRBTree<CUtlMap<char const*, EventGroup, int>::Node_t, int, CUtlMap<char const*, EventGroup, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, EventGroup, int>::Node_t, int>, int> >::NewNode()
 T CUtlRBTree<CUtlMap<char const*, EventGroup, int>::Node_t, int, CUtlMap<char const*, EventGroup, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, EventGroup, int>::Node_t, int>, int> >::NextInorder(int) const
 T CUtlRBTree<CUtlMap<char const*, EventGroup, int>::Node_t, int, CUtlMap<char const*, EventGroup, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, EventGroup, int>::Node_t, int>, int> >::RemoveAll()
 T CUtlRBTree<CUtlMap<char const*, EventGroup, int>::Node_t, int, CUtlMap<char const*, EventGroup, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, EventGroup, int>::Node_t, int>, int> >::RotateLeft(int)
 T CUtlRBTree<CUtlMap<char const*, EventGroup, int>::Node_t, int, CUtlMap<char const*, EventGroup, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, EventGroup, int>::Node_t, int>, int> >::RotateRight(int)
 T CUtlRBTree<CUtlMap<char const*, EventGroup, int>::Node_t, int, CUtlMap<char const*, EventGroup, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, EventGroup, int>::Node_t, int>, int> >::~CUtlRBTree()
 T CUtlRBTree<CUtlMap<char const*, FilePlayerClassInfo_t*, unsigned short>::Node_t, unsigned short, CUtlMap<char const*, FilePlayerClassInfo_t*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, FilePlayerClassInfo_t*, unsigned short>::Node_t, unsigned short>, unsigned short> >::FirstInorder() const
 T CUtlRBTree<CUtlMap<char const*, FilePlayerClassInfo_t*, unsigned short>::Node_t, unsigned short, CUtlMap<char const*, FilePlayerClassInfo_t*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, FilePlayerClassInfo_t*, unsigned short>::Node_t, unsigned short>, unsigned short> >::IsRightChild(unsigned short) const
 T CUtlRBTree<CUtlMap<char const*, FilePlayerClassInfo_t*, unsigned short>::Node_t, unsigned short, CUtlMap<char const*, FilePlayerClassInfo_t*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, FilePlayerClassInfo_t*, unsigned short>::Node_t, unsigned short>, unsigned short> >::NextInorder(unsigned short) const
 T CUtlRBTree<CUtlMap<char const*, FilePlayerClassInfo_t*, unsigned short>::Node_t, unsigned short, CUtlMap<char const*, FilePlayerClassInfo_t*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, FilePlayerClassInfo_t*, unsigned short>::Node_t, unsigned short>, unsigned short> >::RemoveAll()
 T CUtlRBTree<CUtlMap<char const*, FilePlayerClassInfo_t*, unsigned short>::Node_t, unsigned short, CUtlMap<char const*, FilePlayerClassInfo_t*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, FilePlayerClassInfo_t*, unsigned short>::Node_t, unsigned short>, unsigned short> >::~CUtlRBTree()
 T CUtlRBTree<CUtlMap<char const*, FileWeaponInfo_t*, unsigned short>::Node_t, unsigned short, CUtlMap<char const*, FileWeaponInfo_t*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, FileWeaponInfo_t*, unsigned short>::Node_t, unsigned short>, unsigned short> >::Find(CUtlMap<char const*, FileWeaponInfo_t*, unsigned short>::Node_t const&) const
 T CUtlRBTree<CUtlMap<char const*, FileWeaponInfo_t*, unsigned short>::Node_t, unsigned short, CUtlMap<char const*, FileWeaponInfo_t*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, FileWeaponInfo_t*, unsigned short>::Node_t, unsigned short>, unsigned short> >::FindInsertionPosition(CUtlMap<char const*, FileWeaponInfo_t*, unsigned short>::Node_t const&, unsigned short&, bool&)
 T CUtlRBTree<CUtlMap<char const*, FileWeaponInfo_t*, unsigned short>::Node_t, unsigned short, CUtlMap<char const*, FileWeaponInfo_t*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, FileWeaponInfo_t*, unsigned short>::Node_t, unsigned short>, unsigned short> >::FirstInorder() const
 T CUtlRBTree<CUtlMap<char const*, FileWeaponInfo_t*, unsigned short>::Node_t, unsigned short, CUtlMap<char const*, FileWeaponInfo_t*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, FileWeaponInfo_t*, unsigned short>::Node_t, unsigned short>, unsigned short> >::Insert(CUtlMap<char const*, FileWeaponInfo_t*, unsigned short>::Node_t const&)
 T CUtlRBTree<CUtlMap<char const*, FileWeaponInfo_t*, unsigned short>::Node_t, unsigned short, CUtlMap<char const*, FileWeaponInfo_t*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, FileWeaponInfo_t*, unsigned short>::Node_t, unsigned short>, unsigned short> >::InsertRebalance(unsigned short)
 T CUtlRBTree<CUtlMap<char const*, FileWeaponInfo_t*, unsigned short>::Node_t, unsigned short, CUtlMap<char const*, FileWeaponInfo_t*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, FileWeaponInfo_t*, unsigned short>::Node_t, unsigned short>, unsigned short> >::IsLeftChild(unsigned short) const
 T CUtlRBTree<CUtlMap<char const*, FileWeaponInfo_t*, unsigned short>::Node_t, unsigned short, CUtlMap<char const*, FileWeaponInfo_t*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, FileWeaponInfo_t*, unsigned short>::Node_t, unsigned short>, unsigned short> >::IsRightChild(unsigned short) const
 T CUtlRBTree<CUtlMap<char const*, FileWeaponInfo_t*, unsigned short>::Node_t, unsigned short, CUtlMap<char const*, FileWeaponInfo_t*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, FileWeaponInfo_t*, unsigned short>::Node_t, unsigned short>, unsigned short> >::NewNode()
 T CUtlRBTree<CUtlMap<char const*, FileWeaponInfo_t*, unsigned short>::Node_t, unsigned short, CUtlMap<char const*, FileWeaponInfo_t*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, FileWeaponInfo_t*, unsigned short>::Node_t, unsigned short>, unsigned short> >::NextInorder(unsigned short) const
 T CUtlRBTree<CUtlMap<char const*, FileWeaponInfo_t*, unsigned short>::Node_t, unsigned short, CUtlMap<char const*, FileWeaponInfo_t*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, FileWeaponInfo_t*, unsigned short>::Node_t, unsigned short>, unsigned short> >::RemoveAll()
 T CUtlRBTree<CUtlMap<char const*, FileWeaponInfo_t*, unsigned short>::Node_t, unsigned short, CUtlMap<char const*, FileWeaponInfo_t*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, FileWeaponInfo_t*, unsigned short>::Node_t, unsigned short>, unsigned short> >::RotateLeft(unsigned short)
 T CUtlRBTree<CUtlMap<char const*, FileWeaponInfo_t*, unsigned short>::Node_t, unsigned short, CUtlMap<char const*, FileWeaponInfo_t*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, FileWeaponInfo_t*, unsigned short>::Node_t, unsigned short>, unsigned short> >::RotateRight(unsigned short)
 T CUtlRBTree<CUtlMap<char const*, FileWeaponInfo_t*, unsigned short>::Node_t, unsigned short, CUtlMap<char const*, FileWeaponInfo_t*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, FileWeaponInfo_t*, unsigned short>::Node_t, unsigned short>, unsigned short> >::~CUtlRBTree()
 T CUtlRBTree<CUtlMap<char const*, IEntityFactory*, unsigned short>::Node_t, unsigned short, CUtlMap<char const*, IEntityFactory*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, IEntityFactory*, unsigned short>::Node_t, unsigned short>, unsigned short> >::Find(CUtlMap<char const*, IEntityFactory*, unsigned short>::Node_t const&) const
 T CUtlRBTree<CUtlMap<char const*, IEntityFactory*, unsigned short>::Node_t, unsigned short, CUtlMap<char const*, IEntityFactory*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, IEntityFactory*, unsigned short>::Node_t, unsigned short>, unsigned short> >::FindInsertionPosition(CUtlMap<char const*, IEntityFactory*, unsigned short>::Node_t const&, unsigned short&, bool&)
 T CUtlRBTree<CUtlMap<char const*, IEntityFactory*, unsigned short>::Node_t, unsigned short, CUtlMap<char const*, IEntityFactory*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, IEntityFactory*, unsigned short>::Node_t, unsigned short>, unsigned short> >::FirstInorder() const
 T CUtlRBTree<CUtlMap<char const*, IEntityFactory*, unsigned short>::Node_t, unsigned short, CUtlMap<char const*, IEntityFactory*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, IEntityFactory*, unsigned short>::Node_t, unsigned short>, unsigned short> >::Insert(CUtlMap<char const*, IEntityFactory*, unsigned short>::Node_t const&)
 T CUtlRBTree<CUtlMap<char const*, IEntityFactory*, unsigned short>::Node_t, unsigned short, CUtlMap<char const*, IEntityFactory*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, IEntityFactory*, unsigned short>::Node_t, unsigned short>, unsigned short> >::InsertRebalance(unsigned short)
 T CUtlRBTree<CUtlMap<char const*, IEntityFactory*, unsigned short>::Node_t, unsigned short, CUtlMap<char const*, IEntityFactory*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, IEntityFactory*, unsigned short>::Node_t, unsigned short>, unsigned short> >::IsLeftChild(unsigned short) const
 T CUtlRBTree<CUtlMap<char const*, IEntityFactory*, unsigned short>::Node_t, unsigned short, CUtlMap<char const*, IEntityFactory*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, IEntityFactory*, unsigned short>::Node_t, unsigned short>, unsigned short> >::IsRightChild(unsigned short) const
 T CUtlRBTree<CUtlMap<char const*, IEntityFactory*, unsigned short>::Node_t, unsigned short, CUtlMap<char const*, IEntityFactory*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, IEntityFactory*, unsigned short>::Node_t, unsigned short>, unsigned short> >::NewNode()
 T CUtlRBTree<CUtlMap<char const*, IEntityFactory*, unsigned short>::Node_t, unsigned short, CUtlMap<char const*, IEntityFactory*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, IEntityFactory*, unsigned short>::Node_t, unsigned short>, unsigned short> >::NextInorder(unsigned short) const
 T CUtlRBTree<CUtlMap<char const*, IEntityFactory*, unsigned short>::Node_t, unsigned short, CUtlMap<char const*, IEntityFactory*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, IEntityFactory*, unsigned short>::Node_t, unsigned short>, unsigned short> >::RemoveAll()
 T CUtlRBTree<CUtlMap<char const*, IEntityFactory*, unsigned short>::Node_t, unsigned short, CUtlMap<char const*, IEntityFactory*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, IEntityFactory*, unsigned short>::Node_t, unsigned short>, unsigned short> >::RotateLeft(unsigned short)
 T CUtlRBTree<CUtlMap<char const*, IEntityFactory*, unsigned short>::Node_t, unsigned short, CUtlMap<char const*, IEntityFactory*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, IEntityFactory*, unsigned short>::Node_t, unsigned short>, unsigned short> >::RotateRight(unsigned short)
 T CUtlRBTree<CUtlMap<char const*, IEntityFactory*, unsigned short>::Node_t, unsigned short, CUtlMap<char const*, IEntityFactory*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, IEntityFactory*, unsigned short>::Node_t, unsigned short>, unsigned short> >::~CUtlRBTree()
 T CUtlRBTree<CUtlMap<char const*, KeyValues*, int>::Node_t, int, CUtlMap<char const*, KeyValues*, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, KeyValues*, int>::Node_t, int>, int> >::Find(CUtlMap<char const*, KeyValues*, int>::Node_t const&) const
 T CUtlRBTree<CUtlMap<char const*, KeyValues*, int>::Node_t, int, CUtlMap<char const*, KeyValues*, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, KeyValues*, int>::Node_t, int>, int> >::FindInsertionPosition(CUtlMap<char const*, KeyValues*, int>::Node_t const&, int&, bool&)
 T CUtlRBTree<CUtlMap<char const*, KeyValues*, int>::Node_t, int, CUtlMap<char const*, KeyValues*, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, KeyValues*, int>::Node_t, int>, int> >::Insert(CUtlMap<char const*, KeyValues*, int>::Node_t const&)
 T CUtlRBTree<CUtlMap<char const*, KeyValues*, int>::Node_t, int, CUtlMap<char const*, KeyValues*, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, KeyValues*, int>::Node_t, int>, int> >::InsertRebalance(int)
 T CUtlRBTree<CUtlMap<char const*, KeyValues*, int>::Node_t, int, CUtlMap<char const*, KeyValues*, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, KeyValues*, int>::Node_t, int>, int> >::IsLeftChild(int) const
 T CUtlRBTree<CUtlMap<char const*, KeyValues*, int>::Node_t, int, CUtlMap<char const*, KeyValues*, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, KeyValues*, int>::Node_t, int>, int> >::IsRightChild(int) const
 T CUtlRBTree<CUtlMap<char const*, KeyValues*, int>::Node_t, int, CUtlMap<char const*, KeyValues*, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, KeyValues*, int>::Node_t, int>, int> >::NewNode()
 T CUtlRBTree<CUtlMap<char const*, KeyValues*, int>::Node_t, int, CUtlMap<char const*, KeyValues*, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, KeyValues*, int>::Node_t, int>, int> >::RemoveAll()
 T CUtlRBTree<CUtlMap<char const*, KeyValues*, int>::Node_t, int, CUtlMap<char const*, KeyValues*, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, KeyValues*, int>::Node_t, int>, int> >::RotateLeft(int)
 T CUtlRBTree<CUtlMap<char const*, KeyValues*, int>::Node_t, int, CUtlMap<char const*, KeyValues*, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, KeyValues*, int>::Node_t, int>, int> >::RotateRight(int)
 T CUtlRBTree<CUtlMap<char const*, KeyValues*, int>::Node_t, int, CUtlMap<char const*, KeyValues*, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, KeyValues*, int>::Node_t, int>, int> >::~CUtlRBTree()
 T CUtlRBTree<CUtlMap<char const*, QuestConditionEntry_t*, unsigned short>::Node_t, unsigned short, CUtlMap<char const*, QuestConditionEntry_t*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, QuestConditionEntry_t*, unsigned short>::Node_t, unsigned short>, unsigned short> >::Find(CUtlMap<char const*, QuestConditionEntry_t*, unsigned short>::Node_t const&) const
 T CUtlRBTree<CUtlMap<char const*, QuestConditionEntry_t*, unsigned short>::Node_t, unsigned short, CUtlMap<char const*, QuestConditionEntry_t*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, QuestConditionEntry_t*, unsigned short>::Node_t, unsigned short>, unsigned short> >::FindInsertionPosition(CUtlMap<char const*, QuestConditionEntry_t*, unsigned short>::Node_t const&, unsigned short&, bool&)
 T CUtlRBTree<CUtlMap<char const*, QuestConditionEntry_t*, unsigned short>::Node_t, unsigned short, CUtlMap<char const*, QuestConditionEntry_t*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, QuestConditionEntry_t*, unsigned short>::Node_t, unsigned short>, unsigned short> >::FirstInorder() const
 T CUtlRBTree<CUtlMap<char const*, QuestConditionEntry_t*, unsigned short>::Node_t, unsigned short, CUtlMap<char const*, QuestConditionEntry_t*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, QuestConditionEntry_t*, unsigned short>::Node_t, unsigned short>, unsigned short> >::Insert(CUtlMap<char const*, QuestConditionEntry_t*, unsigned short>::Node_t const&)
 T CUtlRBTree<CUtlMap<char const*, QuestConditionEntry_t*, unsigned short>::Node_t, unsigned short, CUtlMap<char const*, QuestConditionEntry_t*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, QuestConditionEntry_t*, unsigned short>::Node_t, unsigned short>, unsigned short> >::InsertRebalance(unsigned short)
 T CUtlRBTree<CUtlMap<char const*, QuestConditionEntry_t*, unsigned short>::Node_t, unsigned short, CUtlMap<char const*, QuestConditionEntry_t*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, QuestConditionEntry_t*, unsigned short>::Node_t, unsigned short>, unsigned short> >::IsLeftChild(unsigned short) const
 T CUtlRBTree<CUtlMap<char const*, QuestConditionEntry_t*, unsigned short>::Node_t, unsigned short, CUtlMap<char const*, QuestConditionEntry_t*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, QuestConditionEntry_t*, unsigned short>::Node_t, unsigned short>, unsigned short> >::IsRightChild(unsigned short) const
 T CUtlRBTree<CUtlMap<char const*, QuestConditionEntry_t*, unsigned short>::Node_t, unsigned short, CUtlMap<char const*, QuestConditionEntry_t*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, QuestConditionEntry_t*, unsigned short>::Node_t, unsigned short>, unsigned short> >::NewNode()
 T CUtlRBTree<CUtlMap<char const*, QuestConditionEntry_t*, unsigned short>::Node_t, unsigned short, CUtlMap<char const*, QuestConditionEntry_t*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, QuestConditionEntry_t*, unsigned short>::Node_t, unsigned short>, unsigned short> >::NextInorder(unsigned short) const
 T CUtlRBTree<CUtlMap<char const*, QuestConditionEntry_t*, unsigned short>::Node_t, unsigned short, CUtlMap<char const*, QuestConditionEntry_t*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, QuestConditionEntry_t*, unsigned short>::Node_t, unsigned short>, unsigned short> >::RemoveAll()
 T CUtlRBTree<CUtlMap<char const*, QuestConditionEntry_t*, unsigned short>::Node_t, unsigned short, CUtlMap<char const*, QuestConditionEntry_t*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, QuestConditionEntry_t*, unsigned short>::Node_t, unsigned short>, unsigned short> >::RotateLeft(unsigned short)
 T CUtlRBTree<CUtlMap<char const*, QuestConditionEntry_t*, unsigned short>::Node_t, unsigned short, CUtlMap<char const*, QuestConditionEntry_t*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, QuestConditionEntry_t*, unsigned short>::Node_t, unsigned short>, unsigned short> >::RotateRight(unsigned short)
 T CUtlRBTree<CUtlMap<char const*, QuestConditionEntry_t*, unsigned short>::Node_t, unsigned short, CUtlMap<char const*, QuestConditionEntry_t*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, QuestConditionEntry_t*, unsigned short>::Node_t, unsigned short>, unsigned short> >::~CUtlRBTree()
 T CUtlRBTree<CUtlMap<char const*, RateLimitedSound_t*, unsigned short>::Node_t, unsigned short, CUtlMap<char const*, RateLimitedSound_t*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, RateLimitedSound_t*, unsigned short>::Node_t, unsigned short>, unsigned short> >::Find(CUtlMap<char const*, RateLimitedSound_t*, unsigned short>::Node_t const&) const
 T CUtlRBTree<CUtlMap<char const*, RateLimitedSound_t*, unsigned short>::Node_t, unsigned short, CUtlMap<char const*, RateLimitedSound_t*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, RateLimitedSound_t*, unsigned short>::Node_t, unsigned short>, unsigned short> >::FindInsertionPosition(CUtlMap<char const*, RateLimitedSound_t*, unsigned short>::Node_t const&, unsigned short&, bool&)
 T CUtlRBTree<CUtlMap<char const*, RateLimitedSound_t*, unsigned short>::Node_t, unsigned short, CUtlMap<char const*, RateLimitedSound_t*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, RateLimitedSound_t*, unsigned short>::Node_t, unsigned short>, unsigned short> >::Insert(CUtlMap<char const*, RateLimitedSound_t*, unsigned short>::Node_t const&)
 T CUtlRBTree<CUtlMap<char const*, RateLimitedSound_t*, unsigned short>::Node_t, unsigned short, CUtlMap<char const*, RateLimitedSound_t*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, RateLimitedSound_t*, unsigned short>::Node_t, unsigned short>, unsigned short> >::InsertRebalance(unsigned short)
 T CUtlRBTree<CUtlMap<char const*, RateLimitedSound_t*, unsigned short>::Node_t, unsigned short, CUtlMap<char const*, RateLimitedSound_t*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, RateLimitedSound_t*, unsigned short>::Node_t, unsigned short>, unsigned short> >::IsLeftChild(unsigned short) const
 T CUtlRBTree<CUtlMap<char const*, RateLimitedSound_t*, unsigned short>::Node_t, unsigned short, CUtlMap<char const*, RateLimitedSound_t*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, RateLimitedSound_t*, unsigned short>::Node_t, unsigned short>, unsigned short> >::IsRightChild(unsigned short) const
 T CUtlRBTree<CUtlMap<char const*, RateLimitedSound_t*, unsigned short>::Node_t, unsigned short, CUtlMap<char const*, RateLimitedSound_t*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, RateLimitedSound_t*, unsigned short>::Node_t, unsigned short>, unsigned short> >::NewNode()
 T CUtlRBTree<CUtlMap<char const*, RateLimitedSound_t*, unsigned short>::Node_t, unsigned short, CUtlMap<char const*, RateLimitedSound_t*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, RateLimitedSound_t*, unsigned short>::Node_t, unsigned short>, unsigned short> >::RemoveAll()
 T CUtlRBTree<CUtlMap<char const*, RateLimitedSound_t*, unsigned short>::Node_t, unsigned short, CUtlMap<char const*, RateLimitedSound_t*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, RateLimitedSound_t*, unsigned short>::Node_t, unsigned short>, unsigned short> >::RotateLeft(unsigned short)
 T CUtlRBTree<CUtlMap<char const*, RateLimitedSound_t*, unsigned short>::Node_t, unsigned short, CUtlMap<char const*, RateLimitedSound_t*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, RateLimitedSound_t*, unsigned short>::Node_t, unsigned short>, unsigned short> >::RotateRight(unsigned short)
 T CUtlRBTree<CUtlMap<char const*, RateLimitedSound_t*, unsigned short>::Node_t, unsigned short, CUtlMap<char const*, RateLimitedSound_t*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, RateLimitedSound_t*, unsigned short>::Node_t, unsigned short>, unsigned short> >::~CUtlRBTree()
 T CUtlRBTree<CUtlMap<char const*, ResponseGroup, short>::Node_t, short, CUtlMap<char const*, ResponseGroup, short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, ResponseGroup, short>::Node_t, short>, short> >::Find(CUtlMap<char const*, ResponseGroup, short>::Node_t const&) const
 T CUtlRBTree<CUtlMap<char const*, ResponseGroup, short>::Node_t, short, CUtlMap<char const*, ResponseGroup, short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, ResponseGroup, short>::Node_t, short>, short> >::FindInsertionPosition(CUtlMap<char const*, ResponseGroup, short>::Node_t const&, short&, bool&)
 T CUtlRBTree<CUtlMap<char const*, ResponseGroup, short>::Node_t, short, CUtlMap<char const*, ResponseGroup, short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, ResponseGroup, short>::Node_t, short>, short> >::FirstInorder() const
 T CUtlRBTree<CUtlMap<char const*, ResponseGroup, short>::Node_t, short, CUtlMap<char const*, ResponseGroup, short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, ResponseGroup, short>::Node_t, short>, short> >::Insert(CUtlMap<char const*, ResponseGroup, short>::Node_t const&)
 T CUtlRBTree<CUtlMap<char const*, ResponseGroup, short>::Node_t, short, CUtlMap<char const*, ResponseGroup, short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, ResponseGroup, short>::Node_t, short>, short> >::InsertRebalance(short)
 T CUtlRBTree<CUtlMap<char const*, ResponseGroup, short>::Node_t, short, CUtlMap<char const*, ResponseGroup, short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, ResponseGroup, short>::Node_t, short>, short> >::IsLeftChild(short) const
 T CUtlRBTree<CUtlMap<char const*, ResponseGroup, short>::Node_t, short, CUtlMap<char const*, ResponseGroup, short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, ResponseGroup, short>::Node_t, short>, short> >::IsRightChild(short) const
 T CUtlRBTree<CUtlMap<char const*, ResponseGroup, short>::Node_t, short, CUtlMap<char const*, ResponseGroup, short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, ResponseGroup, short>::Node_t, short>, short> >::NewNode()
 T CUtlRBTree<CUtlMap<char const*, ResponseGroup, short>::Node_t, short, CUtlMap<char const*, ResponseGroup, short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, ResponseGroup, short>::Node_t, short>, short> >::NextInorder(short) const
 T CUtlRBTree<CUtlMap<char const*, ResponseGroup, short>::Node_t, short, CUtlMap<char const*, ResponseGroup, short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, ResponseGroup, short>::Node_t, short>, short> >::RemoveAll()
 T CUtlRBTree<CUtlMap<char const*, ResponseGroup, short>::Node_t, short, CUtlMap<char const*, ResponseGroup, short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, ResponseGroup, short>::Node_t, short>, short> >::RotateLeft(short)
 T CUtlRBTree<CUtlMap<char const*, ResponseGroup, short>::Node_t, short, CUtlMap<char const*, ResponseGroup, short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, ResponseGroup, short>::Node_t, short>, short> >::RotateRight(short)
 T CUtlRBTree<CUtlMap<char const*, ResponseGroup, short>::Node_t, short, CUtlMap<char const*, ResponseGroup, short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, ResponseGroup, short>::Node_t, short>, short> >::~CUtlRBTree()
 T CUtlRBTree<CUtlMap<char const*, Rule, short>::Node_t, short, CUtlMap<char const*, Rule, short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, Rule, short>::Node_t, short>, short> >::FindInsertionPosition(CUtlMap<char const*, Rule, short>::Node_t const&, short&, bool&)
 T CUtlRBTree<CUtlMap<char const*, Rule, short>::Node_t, short, CUtlMap<char const*, Rule, short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, Rule, short>::Node_t, short>, short> >::FirstInorder() const
 T CUtlRBTree<CUtlMap<char const*, Rule, short>::Node_t, short, CUtlMap<char const*, Rule, short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, Rule, short>::Node_t, short>, short> >::Insert(CUtlMap<char const*, Rule, short>::Node_t const&)
 T CUtlRBTree<CUtlMap<char const*, Rule, short>::Node_t, short, CUtlMap<char const*, Rule, short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, Rule, short>::Node_t, short>, short> >::InsertRebalance(short)
 T CUtlRBTree<CUtlMap<char const*, Rule, short>::Node_t, short, CUtlMap<char const*, Rule, short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, Rule, short>::Node_t, short>, short> >::IsLeftChild(short) const
 T CUtlRBTree<CUtlMap<char const*, Rule, short>::Node_t, short, CUtlMap<char const*, Rule, short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, Rule, short>::Node_t, short>, short> >::IsRightChild(short) const
 T CUtlRBTree<CUtlMap<char const*, Rule, short>::Node_t, short, CUtlMap<char const*, Rule, short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, Rule, short>::Node_t, short>, short> >::NewNode()
 T CUtlRBTree<CUtlMap<char const*, Rule, short>::Node_t, short, CUtlMap<char const*, Rule, short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, Rule, short>::Node_t, short>, short> >::NextInorder(short) const
 T CUtlRBTree<CUtlMap<char const*, Rule, short>::Node_t, short, CUtlMap<char const*, Rule, short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, Rule, short>::Node_t, short>, short> >::RemoveAll()
 T CUtlRBTree<CUtlMap<char const*, Rule, short>::Node_t, short, CUtlMap<char const*, Rule, short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, Rule, short>::Node_t, short>, short> >::RotateLeft(short)
 T CUtlRBTree<CUtlMap<char const*, Rule, short>::Node_t, short, CUtlMap<char const*, Rule, short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, Rule, short>::Node_t, short>, short> >::RotateRight(short)
 T CUtlRBTree<CUtlMap<char const*, Rule, short>::Node_t, short, CUtlMap<char const*, Rule, short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, Rule, short>::Node_t, short>, short> >::~CUtlRBTree()
 T CUtlRBTree<CUtlMap<char const*, TF_Gamestats_LevelStats_t, unsigned short>::Node_t, unsigned short, CUtlMap<char const*, TF_Gamestats_LevelStats_t, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, TF_Gamestats_LevelStats_t, unsigned short>::Node_t, unsigned short>, unsigned short> >::Find(CUtlMap<char const*, TF_Gamestats_LevelStats_t, unsigned short>::Node_t const&) const
 T CUtlRBTree<CUtlMap<char const*, TF_Gamestats_LevelStats_t, unsigned short>::Node_t, unsigned short, CUtlMap<char const*, TF_Gamestats_LevelStats_t, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, TF_Gamestats_LevelStats_t, unsigned short>::Node_t, unsigned short>, unsigned short> >::FindInsertionPosition(CUtlMap<char const*, TF_Gamestats_LevelStats_t, unsigned short>::Node_t const&, unsigned short&, bool&)
 T CUtlRBTree<CUtlMap<char const*, TF_Gamestats_LevelStats_t, unsigned short>::Node_t, unsigned short, CUtlMap<char const*, TF_Gamestats_LevelStats_t, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, TF_Gamestats_LevelStats_t, unsigned short>::Node_t, unsigned short>, unsigned short> >::FirstInorder() const
 T CUtlRBTree<CUtlMap<char const*, TF_Gamestats_LevelStats_t, unsigned short>::Node_t, unsigned short, CUtlMap<char const*, TF_Gamestats_LevelStats_t, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, TF_Gamestats_LevelStats_t, unsigned short>::Node_t, unsigned short>, unsigned short> >::Insert(CUtlMap<char const*, TF_Gamestats_LevelStats_t, unsigned short>::Node_t const&)
 T CUtlRBTree<CUtlMap<char const*, TF_Gamestats_LevelStats_t, unsigned short>::Node_t, unsigned short, CUtlMap<char const*, TF_Gamestats_LevelStats_t, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, TF_Gamestats_LevelStats_t, unsigned short>::Node_t, unsigned short>, unsigned short> >::InsertRebalance(unsigned short)
 T CUtlRBTree<CUtlMap<char const*, TF_Gamestats_LevelStats_t, unsigned short>::Node_t, unsigned short, CUtlMap<char const*, TF_Gamestats_LevelStats_t, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, TF_Gamestats_LevelStats_t, unsigned short>::Node_t, unsigned short>, unsigned short> >::IsLeftChild(unsigned short) const
 T CUtlRBTree<CUtlMap<char const*, TF_Gamestats_LevelStats_t, unsigned short>::Node_t, unsigned short, CUtlMap<char const*, TF_Gamestats_LevelStats_t, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, TF_Gamestats_LevelStats_t, unsigned short>::Node_t, unsigned short>, unsigned short> >::IsRightChild(unsigned short) const
 T CUtlRBTree<CUtlMap<char const*, TF_Gamestats_LevelStats_t, unsigned short>::Node_t, unsigned short, CUtlMap<char const*, TF_Gamestats_LevelStats_t, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, TF_Gamestats_LevelStats_t, unsigned short>::Node_t, unsigned short>, unsigned short> >::NewNode()
 T CUtlRBTree<CUtlMap<char const*, TF_Gamestats_LevelStats_t, unsigned short>::Node_t, unsigned short, CUtlMap<char const*, TF_Gamestats_LevelStats_t, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, TF_Gamestats_LevelStats_t, unsigned short>::Node_t, unsigned short>, unsigned short> >::NextInorder(unsigned short) const
 T CUtlRBTree<CUtlMap<char const*, TF_Gamestats_LevelStats_t, unsigned short>::Node_t, unsigned short, CUtlMap<char const*, TF_Gamestats_LevelStats_t, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, TF_Gamestats_LevelStats_t, unsigned short>::Node_t, unsigned short>, unsigned short> >::RemoveAll()
 T CUtlRBTree<CUtlMap<char const*, TF_Gamestats_LevelStats_t, unsigned short>::Node_t, unsigned short, CUtlMap<char const*, TF_Gamestats_LevelStats_t, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, TF_Gamestats_LevelStats_t, unsigned short>::Node_t, unsigned short>, unsigned short> >::RotateLeft(unsigned short)
 T CUtlRBTree<CUtlMap<char const*, TF_Gamestats_LevelStats_t, unsigned short>::Node_t, unsigned short, CUtlMap<char const*, TF_Gamestats_LevelStats_t, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, TF_Gamestats_LevelStats_t, unsigned short>::Node_t, unsigned short>, unsigned short> >::RotateRight(unsigned short)
 T CUtlRBTree<CUtlMap<char const*, TF_Gamestats_LevelStats_t, unsigned short>::Node_t, unsigned short, CUtlMap<char const*, TF_Gamestats_LevelStats_t, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, TF_Gamestats_LevelStats_t, unsigned short>::Node_t, unsigned short>, unsigned short> >::~CUtlRBTree()
 T CUtlRBTree<CUtlMap<char const*, bool, int>::Node_t, int, CUtlMap<char const*, bool, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, bool, int>::Node_t, int>, int> >::Find(CUtlMap<char const*, bool, int>::Node_t const&) const
 T CUtlRBTree<CUtlMap<char const*, bool, int>::Node_t, int, CUtlMap<char const*, bool, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, bool, int>::Node_t, int>, int> >::FindInsertionPosition(CUtlMap<char const*, bool, int>::Node_t const&, int&, bool&)
 T CUtlRBTree<CUtlMap<char const*, bool, int>::Node_t, int, CUtlMap<char const*, bool, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, bool, int>::Node_t, int>, int> >::FirstInorder() const
 T CUtlRBTree<CUtlMap<char const*, bool, int>::Node_t, int, CUtlMap<char const*, bool, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, bool, int>::Node_t, int>, int> >::Insert(CUtlMap<char const*, bool, int>::Node_t const&)
 T CUtlRBTree<CUtlMap<char const*, bool, int>::Node_t, int, CUtlMap<char const*, bool, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, bool, int>::Node_t, int>, int> >::InsertRebalance(int)
 T CUtlRBTree<CUtlMap<char const*, bool, int>::Node_t, int, CUtlMap<char const*, bool, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, bool, int>::Node_t, int>, int> >::IsLeftChild(int) const
 T CUtlRBTree<CUtlMap<char const*, bool, int>::Node_t, int, CUtlMap<char const*, bool, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, bool, int>::Node_t, int>, int> >::IsRightChild(int) const
 T CUtlRBTree<CUtlMap<char const*, bool, int>::Node_t, int, CUtlMap<char const*, bool, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, bool, int>::Node_t, int>, int> >::NewNode()
 T CUtlRBTree<CUtlMap<char const*, bool, int>::Node_t, int, CUtlMap<char const*, bool, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, bool, int>::Node_t, int>, int> >::NextInorder(int) const
 T CUtlRBTree<CUtlMap<char const*, bool, int>::Node_t, int, CUtlMap<char const*, bool, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, bool, int>::Node_t, int>, int> >::RemoveAll()
 T CUtlRBTree<CUtlMap<char const*, bool, int>::Node_t, int, CUtlMap<char const*, bool, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, bool, int>::Node_t, int>, int> >::RotateLeft(int)
 T CUtlRBTree<CUtlMap<char const*, bool, int>::Node_t, int, CUtlMap<char const*, bool, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, bool, int>::Node_t, int>, int> >::RotateRight(int)
 T CUtlRBTree<CUtlMap<char const*, bool, int>::Node_t, int, CUtlMap<char const*, bool, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, bool, int>::Node_t, int>, int> >::~CUtlRBTree()
 T CUtlRBTree<CUtlMap<char const*, codecontrolledbodygroupdata_t, unsigned short>::Node_t, unsigned short, CUtlMap<char const*, codecontrolledbodygroupdata_t, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, codecontrolledbodygroupdata_t, unsigned short>::Node_t, unsigned short>, unsigned short> >::FindInsertionPosition(CUtlMap<char const*, codecontrolledbodygroupdata_t, unsigned short>::Node_t const&, unsigned short&, bool&)
 T CUtlRBTree<CUtlMap<char const*, codecontrolledbodygroupdata_t, unsigned short>::Node_t, unsigned short, CUtlMap<char const*, codecontrolledbodygroupdata_t, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, codecontrolledbodygroupdata_t, unsigned short>::Node_t, unsigned short>, unsigned short> >::Insert(CUtlMap<char const*, codecontrolledbodygroupdata_t, unsigned short>::Node_t const&)
 T CUtlRBTree<CUtlMap<char const*, codecontrolledbodygroupdata_t, unsigned short>::Node_t, unsigned short, CUtlMap<char const*, codecontrolledbodygroupdata_t, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, codecontrolledbodygroupdata_t, unsigned short>::Node_t, unsigned short>, unsigned short> >::InsertRebalance(unsigned short)
 T CUtlRBTree<CUtlMap<char const*, codecontrolledbodygroupdata_t, unsigned short>::Node_t, unsigned short, CUtlMap<char const*, codecontrolledbodygroupdata_t, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, codecontrolledbodygroupdata_t, unsigned short>::Node_t, unsigned short>, unsigned short> >::IsLeftChild(unsigned short) const
 T CUtlRBTree<CUtlMap<char const*, codecontrolledbodygroupdata_t, unsigned short>::Node_t, unsigned short, CUtlMap<char const*, codecontrolledbodygroupdata_t, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, codecontrolledbodygroupdata_t, unsigned short>::Node_t, unsigned short>, unsigned short> >::IsRightChild(unsigned short) const
 T CUtlRBTree<CUtlMap<char const*, codecontrolledbodygroupdata_t, unsigned short>::Node_t, unsigned short, CUtlMap<char const*, codecontrolledbodygroupdata_t, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, codecontrolledbodygroupdata_t, unsigned short>::Node_t, unsigned short>, unsigned short> >::NewNode()
 T CUtlRBTree<CUtlMap<char const*, codecontrolledbodygroupdata_t, unsigned short>::Node_t, unsigned short, CUtlMap<char const*, codecontrolledbodygroupdata_t, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, codecontrolledbodygroupdata_t, unsigned short>::Node_t, unsigned short>, unsigned short> >::RemoveAll()
 T CUtlRBTree<CUtlMap<char const*, codecontrolledbodygroupdata_t, unsigned short>::Node_t, unsigned short, CUtlMap<char const*, codecontrolledbodygroupdata_t, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, codecontrolledbodygroupdata_t, unsigned short>::Node_t, unsigned short>, unsigned short> >::RotateLeft(unsigned short)
 T CUtlRBTree<CUtlMap<char const*, codecontrolledbodygroupdata_t, unsigned short>::Node_t, unsigned short, CUtlMap<char const*, codecontrolledbodygroupdata_t, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, codecontrolledbodygroupdata_t, unsigned short>::Node_t, unsigned short>, unsigned short> >::RotateRight(unsigned short)
 T CUtlRBTree<CUtlMap<char const*, codecontrolledbodygroupdata_t, unsigned short>::Node_t, unsigned short, CUtlMap<char const*, codecontrolledbodygroupdata_t, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, codecontrolledbodygroupdata_t, unsigned short>::Node_t, unsigned short>, unsigned short> >::~CUtlRBTree()
 T CUtlRBTree<CUtlMap<char const*, float, int>::Node_t, int, CUtlMap<char const*, float, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, float, int>::Node_t, int>, int> >::Find(CUtlMap<char const*, float, int>::Node_t const&) const
 T CUtlRBTree<CUtlMap<char const*, float, int>::Node_t, int, CUtlMap<char const*, float, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, float, int>::Node_t, int>, int> >::FindInsertionPosition(CUtlMap<char const*, float, int>::Node_t const&, int&, bool&)
 T CUtlRBTree<CUtlMap<char const*, float, int>::Node_t, int, CUtlMap<char const*, float, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, float, int>::Node_t, int>, int> >::FirstInorder() const
 T CUtlRBTree<CUtlMap<char const*, float, int>::Node_t, int, CUtlMap<char const*, float, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, float, int>::Node_t, int>, int> >::Insert(CUtlMap<char const*, float, int>::Node_t const&)
 T CUtlRBTree<CUtlMap<char const*, float, int>::Node_t, int, CUtlMap<char const*, float, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, float, int>::Node_t, int>, int> >::InsertRebalance(int)
 T CUtlRBTree<CUtlMap<char const*, float, int>::Node_t, int, CUtlMap<char const*, float, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, float, int>::Node_t, int>, int> >::IsLeftChild(int) const
 T CUtlRBTree<CUtlMap<char const*, float, int>::Node_t, int, CUtlMap<char const*, float, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, float, int>::Node_t, int>, int> >::IsRightChild(int) const
 T CUtlRBTree<CUtlMap<char const*, float, int>::Node_t, int, CUtlMap<char const*, float, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, float, int>::Node_t, int>, int> >::NewNode()
 T CUtlRBTree<CUtlMap<char const*, float, int>::Node_t, int, CUtlMap<char const*, float, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, float, int>::Node_t, int>, int> >::NextInorder(int) const
 T CUtlRBTree<CUtlMap<char const*, float, int>::Node_t, int, CUtlMap<char const*, float, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, float, int>::Node_t, int>, int> >::RemoveAll()
 T CUtlRBTree<CUtlMap<char const*, float, int>::Node_t, int, CUtlMap<char const*, float, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, float, int>::Node_t, int>, int> >::RotateLeft(int)
 T CUtlRBTree<CUtlMap<char const*, float, int>::Node_t, int, CUtlMap<char const*, float, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, float, int>::Node_t, int>, int> >::RotateRight(int)
 T CUtlRBTree<CUtlMap<char const*, float, int>::Node_t, int, CUtlMap<char const*, float, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, float, int>::Node_t, int>, int> >::~CUtlRBTree()
 T CUtlRBTree<CUtlMap<char const*, int, int>::Node_t, int, CUtlMap<char const*, int, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, int, int>::Node_t, int>, int> >::Find(CUtlMap<char const*, int, int>::Node_t const&) const
 T CUtlRBTree<CUtlMap<char const*, int, int>::Node_t, int, CUtlMap<char const*, int, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, int, int>::Node_t, int>, int> >::FindInsertionPosition(CUtlMap<char const*, int, int>::Node_t const&, int&, bool&)
 T CUtlRBTree<CUtlMap<char const*, int, int>::Node_t, int, CUtlMap<char const*, int, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, int, int>::Node_t, int>, int> >::FirstInorder() const
 T CUtlRBTree<CUtlMap<char const*, int, int>::Node_t, int, CUtlMap<char const*, int, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, int, int>::Node_t, int>, int> >::Insert(CUtlMap<char const*, int, int>::Node_t const&)
 T CUtlRBTree<CUtlMap<char const*, int, int>::Node_t, int, CUtlMap<char const*, int, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, int, int>::Node_t, int>, int> >::InsertRebalance(int)
 T CUtlRBTree<CUtlMap<char const*, int, int>::Node_t, int, CUtlMap<char const*, int, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, int, int>::Node_t, int>, int> >::IsLeftChild(int) const
 T CUtlRBTree<CUtlMap<char const*, int, int>::Node_t, int, CUtlMap<char const*, int, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, int, int>::Node_t, int>, int> >::IsRightChild(int) const
 T CUtlRBTree<CUtlMap<char const*, int, int>::Node_t, int, CUtlMap<char const*, int, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, int, int>::Node_t, int>, int> >::NewNode()
 T CUtlRBTree<CUtlMap<char const*, int, int>::Node_t, int, CUtlMap<char const*, int, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, int, int>::Node_t, int>, int> >::NextInorder(int) const
 T CUtlRBTree<CUtlMap<char const*, int, int>::Node_t, int, CUtlMap<char const*, int, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, int, int>::Node_t, int>, int> >::RemoveAll()
 T CUtlRBTree<CUtlMap<char const*, int, int>::Node_t, int, CUtlMap<char const*, int, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, int, int>::Node_t, int>, int> >::RotateLeft(int)
 T CUtlRBTree<CUtlMap<char const*, int, int>::Node_t, int, CUtlMap<char const*, int, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, int, int>::Node_t, int>, int> >::RotateRight(int)
 T CUtlRBTree<CUtlMap<char const*, int, int>::Node_t, int, CUtlMap<char const*, int, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, int, int>::Node_t, int>, int> >::~CUtlRBTree()
 T CUtlRBTree<CUtlMap<char const*, int, unsigned short>::Node_t, unsigned short, CUtlMap<char const*, int, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, int, unsigned short>::Node_t, unsigned short>, unsigned short> >::Find(CUtlMap<char const*, int, unsigned short>::Node_t const&) const
 T CUtlRBTree<CUtlMap<char const*, int, unsigned short>::Node_t, unsigned short, CUtlMap<char const*, int, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, int, unsigned short>::Node_t, unsigned short>, unsigned short> >::FindInsertionPosition(CUtlMap<char const*, int, unsigned short>::Node_t const&, unsigned short&, bool&)
 T CUtlRBTree<CUtlMap<char const*, int, unsigned short>::Node_t, unsigned short, CUtlMap<char const*, int, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, int, unsigned short>::Node_t, unsigned short>, unsigned short> >::FirstInorder() const
 T CUtlRBTree<CUtlMap<char const*, int, unsigned short>::Node_t, unsigned short, CUtlMap<char const*, int, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, int, unsigned short>::Node_t, unsigned short>, unsigned short> >::Insert(CUtlMap<char const*, int, unsigned short>::Node_t const&)
 T CUtlRBTree<CUtlMap<char const*, int, unsigned short>::Node_t, unsigned short, CUtlMap<char const*, int, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, int, unsigned short>::Node_t, unsigned short>, unsigned short> >::InsertRebalance(unsigned short)
 T CUtlRBTree<CUtlMap<char const*, int, unsigned short>::Node_t, unsigned short, CUtlMap<char const*, int, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, int, unsigned short>::Node_t, unsigned short>, unsigned short> >::IsLeftChild(unsigned short) const
 T CUtlRBTree<CUtlMap<char const*, int, unsigned short>::Node_t, unsigned short, CUtlMap<char const*, int, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, int, unsigned short>::Node_t, unsigned short>, unsigned short> >::IsRightChild(unsigned short) const
 T CUtlRBTree<CUtlMap<char const*, int, unsigned short>::Node_t, unsigned short, CUtlMap<char const*, int, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, int, unsigned short>::Node_t, unsigned short>, unsigned short> >::NewNode()
 T CUtlRBTree<CUtlMap<char const*, int, unsigned short>::Node_t, unsigned short, CUtlMap<char const*, int, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, int, unsigned short>::Node_t, unsigned short>, unsigned short> >::NextInorder(unsigned short) const
 T CUtlRBTree<CUtlMap<char const*, int, unsigned short>::Node_t, unsigned short, CUtlMap<char const*, int, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, int, unsigned short>::Node_t, unsigned short>, unsigned short> >::RemoveAll()
 T CUtlRBTree<CUtlMap<char const*, int, unsigned short>::Node_t, unsigned short, CUtlMap<char const*, int, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, int, unsigned short>::Node_t, unsigned short>, unsigned short> >::RotateLeft(unsigned short)
 T CUtlRBTree<CUtlMap<char const*, int, unsigned short>::Node_t, unsigned short, CUtlMap<char const*, int, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, int, unsigned short>::Node_t, unsigned short>, unsigned short> >::RotateRight(unsigned short)
 T CUtlRBTree<CUtlMap<char const*, int, unsigned short>::Node_t, unsigned short, CUtlMap<char const*, int, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<char const*, int, unsigned short>::Node_t, unsigned short>, unsigned short> >::~CUtlRBTree()
 T CUtlRBTree<CUtlMap<int, CAIHintVector, unsigned short>::Node_t, unsigned short, CUtlMap<int, CAIHintVector, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<int, CAIHintVector, unsigned short>::Node_t, unsigned short>, unsigned short> >::Find(CUtlMap<int, CAIHintVector, unsigned short>::Node_t const&) const
 T CUtlRBTree<CUtlMap<int, CAIHintVector, unsigned short>::Node_t, unsigned short, CUtlMap<int, CAIHintVector, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<int, CAIHintVector, unsigned short>::Node_t, unsigned short>, unsigned short> >::FindInsertionPosition(CUtlMap<int, CAIHintVector, unsigned short>::Node_t const&, unsigned short&, bool&)
 T CUtlRBTree<CUtlMap<int, CAIHintVector, unsigned short>::Node_t, unsigned short, CUtlMap<int, CAIHintVector, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<int, CAIHintVector, unsigned short>::Node_t, unsigned short>, unsigned short> >::Insert(CUtlMap<int, CAIHintVector, unsigned short>::Node_t const&)
 T CUtlRBTree<CUtlMap<int, CAIHintVector, unsigned short>::Node_t, unsigned short, CUtlMap<int, CAIHintVector, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<int, CAIHintVector, unsigned short>::Node_t, unsigned short>, unsigned short> >::InsertRebalance(unsigned short)
 T CUtlRBTree<CUtlMap<int, CAIHintVector, unsigned short>::Node_t, unsigned short, CUtlMap<int, CAIHintVector, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<int, CAIHintVector, unsigned short>::Node_t, unsigned short>, unsigned short> >::IsLeftChild(unsigned short) const
 T CUtlRBTree<CUtlMap<int, CAIHintVector, unsigned short>::Node_t, unsigned short, CUtlMap<int, CAIHintVector, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<int, CAIHintVector, unsigned short>::Node_t, unsigned short>, unsigned short> >::IsRightChild(unsigned short) const
 T CUtlRBTree<CUtlMap<int, CAIHintVector, unsigned short>::Node_t, unsigned short, CUtlMap<int, CAIHintVector, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<int, CAIHintVector, unsigned short>::Node_t, unsigned short>, unsigned short> >::NewNode()
 T CUtlRBTree<CUtlMap<int, CAIHintVector, unsigned short>::Node_t, unsigned short, CUtlMap<int, CAIHintVector, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<int, CAIHintVector, unsigned short>::Node_t, unsigned short>, unsigned short> >::RemoveAll()
 T CUtlRBTree<CUtlMap<int, CAIHintVector, unsigned short>::Node_t, unsigned short, CUtlMap<int, CAIHintVector, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<int, CAIHintVector, unsigned short>::Node_t, unsigned short>, unsigned short> >::RotateLeft(unsigned short)
 T CUtlRBTree<CUtlMap<int, CAIHintVector, unsigned short>::Node_t, unsigned short, CUtlMap<int, CAIHintVector, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<int, CAIHintVector, unsigned short>::Node_t, unsigned short>, unsigned short> >::RotateRight(unsigned short)
 T CUtlRBTree<CUtlMap<int, CAIHintVector, unsigned short>::Node_t, unsigned short, CUtlMap<int, CAIHintVector, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<int, CAIHintVector, unsigned short>::Node_t, unsigned short>, unsigned short> >::~CUtlRBTree()
 T CUtlRBTree<CUtlMap<int, CBaseAchievement*, unsigned short>::Node_t, unsigned short, CUtlMap<int, CBaseAchievement*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<int, CBaseAchievement*, unsigned short>::Node_t, unsigned short>, unsigned short> >::FirstInorder() const
 T CUtlRBTree<CUtlMap<int, CBaseAchievement*, unsigned short>::Node_t, unsigned short, CUtlMap<int, CBaseAchievement*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<int, CBaseAchievement*, unsigned short>::Node_t, unsigned short>, unsigned short> >::IsRightChild(unsigned short) const
 T CUtlRBTree<CUtlMap<int, CBaseAchievement*, unsigned short>::Node_t, unsigned short, CUtlMap<int, CBaseAchievement*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<int, CBaseAchievement*, unsigned short>::Node_t, unsigned short>, unsigned short> >::NextInorder(unsigned short) const
 T CUtlRBTree<CUtlMap<int, CBaseObject::constructor_t, unsigned short>::Node_t, unsigned short, CUtlMap<int, CBaseObject::constructor_t, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<int, CBaseObject::constructor_t, unsigned short>::Node_t, unsigned short>, unsigned short> >::Find(CUtlMap<int, CBaseObject::constructor_t, unsigned short>::Node_t const&) const
 T CUtlRBTree<CUtlMap<int, CBaseObject::constructor_t, unsigned short>::Node_t, unsigned short, CUtlMap<int, CBaseObject::constructor_t, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<int, CBaseObject::constructor_t, unsigned short>::Node_t, unsigned short>, unsigned short> >::FindInsertionPosition(CUtlMap<int, CBaseObject::constructor_t, unsigned short>::Node_t const&, unsigned short&, bool&)
 T CUtlRBTree<CUtlMap<int, CBaseObject::constructor_t, unsigned short>::Node_t, unsigned short, CUtlMap<int, CBaseObject::constructor_t, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<int, CBaseObject::constructor_t, unsigned short>::Node_t, unsigned short>, unsigned short> >::Insert(CUtlMap<int, CBaseObject::constructor_t, unsigned short>::Node_t const&)
 T CUtlRBTree<CUtlMap<int, CBaseObject::constructor_t, unsigned short>::Node_t, unsigned short, CUtlMap<int, CBaseObject::constructor_t, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<int, CBaseObject::constructor_t, unsigned short>::Node_t, unsigned short>, unsigned short> >::InsertRebalance(unsigned short)
 T CUtlRBTree<CUtlMap<int, CBaseObject::constructor_t, unsigned short>::Node_t, unsigned short, CUtlMap<int, CBaseObject::constructor_t, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<int, CBaseObject::constructor_t, unsigned short>::Node_t, unsigned short>, unsigned short> >::IsLeftChild(unsigned short) const
 T CUtlRBTree<CUtlMap<int, CBaseObject::constructor_t, unsigned short>::Node_t, unsigned short, CUtlMap<int, CBaseObject::constructor_t, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<int, CBaseObject::constructor_t, unsigned short>::Node_t, unsigned short>, unsigned short> >::IsRightChild(unsigned short) const
 T CUtlRBTree<CUtlMap<int, CBaseObject::constructor_t, unsigned short>::Node_t, unsigned short, CUtlMap<int, CBaseObject::constructor_t, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<int, CBaseObject::constructor_t, unsigned short>::Node_t, unsigned short>, unsigned short> >::LastInorder() const
 T CUtlRBTree<CUtlMap<int, CBaseObject::constructor_t, unsigned short>::Node_t, unsigned short, CUtlMap<int, CBaseObject::constructor_t, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<int, CBaseObject::constructor_t, unsigned short>::Node_t, unsigned short>, unsigned short> >::NewNode()
 T CUtlRBTree<CUtlMap<int, CBaseObject::constructor_t, unsigned short>::Node_t, unsigned short, CUtlMap<int, CBaseObject::constructor_t, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<int, CBaseObject::constructor_t, unsigned short>::Node_t, unsigned short>, unsigned short> >::PrevInorder(unsigned short) const
 T CUtlRBTree<CUtlMap<int, CBaseObject::constructor_t, unsigned short>::Node_t, unsigned short, CUtlMap<int, CBaseObject::constructor_t, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<int, CBaseObject::constructor_t, unsigned short>::Node_t, unsigned short>, unsigned short> >::RemoveAll()
 T CUtlRBTree<CUtlMap<int, CBaseObject::constructor_t, unsigned short>::Node_t, unsigned short, CUtlMap<int, CBaseObject::constructor_t, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<int, CBaseObject::constructor_t, unsigned short>::Node_t, unsigned short>, unsigned short> >::RemoveRebalance(unsigned short)
 T CUtlRBTree<CUtlMap<int, CBaseObject::constructor_t, unsigned short>::Node_t, unsigned short, CUtlMap<int, CBaseObject::constructor_t, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<int, CBaseObject::constructor_t, unsigned short>::Node_t, unsigned short>, unsigned short> >::RotateLeft(unsigned short)
 T CUtlRBTree<CUtlMap<int, CBaseObject::constructor_t, unsigned short>::Node_t, unsigned short, CUtlMap<int, CBaseObject::constructor_t, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<int, CBaseObject::constructor_t, unsigned short>::Node_t, unsigned short>, unsigned short> >::RotateRight(unsigned short)
 T CUtlRBTree<CUtlMap<int, CBaseObject::constructor_t, unsigned short>::Node_t, unsigned short, CUtlMap<int, CBaseObject::constructor_t, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<int, CBaseObject::constructor_t, unsigned short>::Node_t, unsigned short>, unsigned short> >::Unlink(unsigned short)
 T CUtlRBTree<CUtlMap<int, CBaseObject::constructor_t, unsigned short>::Node_t, unsigned short, CUtlMap<int, CBaseObject::constructor_t, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<int, CBaseObject::constructor_t, unsigned short>::Node_t, unsigned short>, unsigned short> >::~CUtlRBTree()
 T CUtlRBTree<CUtlMap<int, CEconCraftingRecipeDefinition*, int>::Node_t, int, CUtlMap<int, CEconCraftingRecipeDefinition*, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<int, CEconCraftingRecipeDefinition*, int>::Node_t, int>, int> >::Find(CUtlMap<int, CEconCraftingRecipeDefinition*, int>::Node_t const&) const
 T CUtlRBTree<CUtlMap<int, CEconCraftingRecipeDefinition*, int>::Node_t, int, CUtlMap<int, CEconCraftingRecipeDefinition*, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<int, CEconCraftingRecipeDefinition*, int>::Node_t, int>, int> >::FindInsertionPosition(CUtlMap<int, CEconCraftingRecipeDefinition*, int>::Node_t const&, int&, bool&)
 T CUtlRBTree<CUtlMap<int, CEconCraftingRecipeDefinition*, int>::Node_t, int, CUtlMap<int, CEconCraftingRecipeDefinition*, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<int, CEconCraftingRecipeDefinition*, int>::Node_t, int>, int> >::Insert(CUtlMap<int, CEconCraftingRecipeDefinition*, int>::Node_t const&)
 T CUtlRBTree<CUtlMap<int, CEconCraftingRecipeDefinition*, int>::Node_t, int, CUtlMap<int, CEconCraftingRecipeDefinition*, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<int, CEconCraftingRecipeDefinition*, int>::Node_t, int>, int> >::InsertRebalance(int)
 T CUtlRBTree<CUtlMap<int, CEconCraftingRecipeDefinition*, int>::Node_t, int, CUtlMap<int, CEconCraftingRecipeDefinition*, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<int, CEconCraftingRecipeDefinition*, int>::Node_t, int>, int> >::IsLeftChild(int) const
 T CUtlRBTree<CUtlMap<int, CEconCraftingRecipeDefinition*, int>::Node_t, int, CUtlMap<int, CEconCraftingRecipeDefinition*, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<int, CEconCraftingRecipeDefinition*, int>::Node_t, int>, int> >::IsRightChild(int) const
 T CUtlRBTree<CUtlMap<int, CEconCraftingRecipeDefinition*, int>::Node_t, int, CUtlMap<int, CEconCraftingRecipeDefinition*, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<int, CEconCraftingRecipeDefinition*, int>::Node_t, int>, int> >::NewNode()
 T CUtlRBTree<CUtlMap<int, CEconCraftingRecipeDefinition*, int>::Node_t, int, CUtlMap<int, CEconCraftingRecipeDefinition*, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<int, CEconCraftingRecipeDefinition*, int>::Node_t, int>, int> >::RemoveAll()
 T CUtlRBTree<CUtlMap<int, CEconCraftingRecipeDefinition*, int>::Node_t, int, CUtlMap<int, CEconCraftingRecipeDefinition*, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<int, CEconCraftingRecipeDefinition*, int>::Node_t, int>, int> >::RotateLeft(int)
 T CUtlRBTree<CUtlMap<int, CEconCraftingRecipeDefinition*, int>::Node_t, int, CUtlMap<int, CEconCraftingRecipeDefinition*, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<int, CEconCraftingRecipeDefinition*, int>::Node_t, int>, int> >::RotateRight(int)
 T CUtlRBTree<CUtlMap<int, CEconCraftingRecipeDefinition*, int>::Node_t, int, CUtlMap<int, CEconCraftingRecipeDefinition*, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<int, CEconCraftingRecipeDefinition*, int>::Node_t, int>, int> >::~CUtlRBTree()
 T CUtlRBTree<CUtlMap<int, CEconItemAttributeDefinition, int>::Node_t, int, CUtlMap<int, CEconItemAttributeDefinition, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<int, CEconItemAttributeDefinition, int>::Node_t, int>, int> >::Find(CUtlMap<int, CEconItemAttributeDefinition, int>::Node_t const&) const
 T CUtlRBTree<CUtlMap<int, CEconItemAttributeDefinition, int>::Node_t, int, CUtlMap<int, CEconItemAttributeDefinition, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<int, CEconItemAttributeDefinition, int>::Node_t, int>, int> >::FindInsertionPosition(CUtlMap<int, CEconItemAttributeDefinition, int>::Node_t const&, int&, bool&)
 T CUtlRBTree<CUtlMap<int, CEconItemAttributeDefinition, int>::Node_t, int, CUtlMap<int, CEconItemAttributeDefinition, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<int, CEconItemAttributeDefinition, int>::Node_t, int>, int> >::Insert(CUtlMap<int, CEconItemAttributeDefinition, int>::Node_t const&)
 T CUtlRBTree<CUtlMap<int, CEconItemAttributeDefinition, int>::Node_t, int, CUtlMap<int, CEconItemAttributeDefinition, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<int, CEconItemAttributeDefinition, int>::Node_t, int>, int> >::InsertRebalance(int)
 T CUtlRBTree<CUtlMap<int, CEconItemAttributeDefinition, int>::Node_t, int, CUtlMap<int, CEconItemAttributeDefinition, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<int, CEconItemAttributeDefinition, int>::Node_t, int>, int> >::IsLeftChild(int) const
 T CUtlRBTree<CUtlMap<int, CEconItemAttributeDefinition, int>::Node_t, int, CUtlMap<int, CEconItemAttributeDefinition, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<int, CEconItemAttributeDefinition, int>::Node_t, int>, int> >::IsRightChild(int) const
 T CUtlRBTree<CUtlMap<int, CEconItemAttributeDefinition, int>::Node_t, int, CUtlMap<int, CEconItemAttributeDefinition, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<int, CEconItemAttributeDefinition, int>::Node_t, int>, int> >::NewNode()
 T CUtlRBTree<CUtlMap<int, CEconItemAttributeDefinition, int>::Node_t, int, CUtlMap<int, CEconItemAttributeDefinition, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<int, CEconItemAttributeDefinition, int>::Node_t, int>, int> >::RemoveAll()
 T CUtlRBTree<CUtlMap<int, CEconItemAttributeDefinition, int>::Node_t, int, CUtlMap<int, CEconItemAttributeDefinition, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<int, CEconItemAttributeDefinition, int>::Node_t, int>, int> >::RotateLeft(int)
 T CUtlRBTree<CUtlMap<int, CEconItemAttributeDefinition, int>::Node_t, int, CUtlMap<int, CEconItemAttributeDefinition, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<int, CEconItemAttributeDefinition, int>::Node_t, int>, int> >::RotateRight(int)
 T CUtlRBTree<CUtlMap<int, CEconItemAttributeDefinition, int>::Node_t, int, CUtlMap<int, CEconItemAttributeDefinition, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<int, CEconItemAttributeDefinition, int>::Node_t, int>, int> >::~CUtlRBTree()
 T CUtlRBTree<CUtlMap<int, CEconItemDefinition*, int>::Node_t, int, CUtlMap<int, CEconItemDefinition*, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<int, CEconItemDefinition*, int>::Node_t, int>, int> >::Find(CUtlMap<int, CEconItemDefinition*, int>::Node_t const&) const
 T CUtlRBTree<CUtlMap<int, CEconItemDefinition*, int>::Node_t, int, CUtlMap<int, CEconItemDefinition*, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<int, CEconItemDefinition*, int>::Node_t, int>, int> >::FindInsertionPosition(CUtlMap<int, CEconItemDefinition*, int>::Node_t const&, int&, bool&)
 T CUtlRBTree<CUtlMap<int, CEconItemDefinition*, int>::Node_t, int, CUtlMap<int, CEconItemDefinition*, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<int, CEconItemDefinition*, int>::Node_t, int>, int> >::FirstInorder() const
 T CUtlRBTree<CUtlMap<int, CEconItemDefinition*, int>::Node_t, int, CUtlMap<int, CEconItemDefinition*, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<int, CEconItemDefinition*, int>::Node_t, int>, int> >::Insert(CUtlMap<int, CEconItemDefinition*, int>::Node_t const&)
 T CUtlRBTree<CUtlMap<int, CEconItemDefinition*, int>::Node_t, int, CUtlMap<int, CEconItemDefinition*, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<int, CEconItemDefinition*, int>::Node_t, int>, int> >::InsertRebalance(int)
 T CUtlRBTree<CUtlMap<int, CEconItemDefinition*, int>::Node_t, int, CUtlMap<int, CEconItemDefinition*, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<int, CEconItemDefinition*, int>::Node_t, int>, int> >::IsLeftChild(int) const
 T CUtlRBTree<CUtlMap<int, CEconItemDefinition*, int>::Node_t, int, CUtlMap<int, CEconItemDefinition*, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<int, CEconItemDefinition*, int>::Node_t, int>, int> >::IsRightChild(int) const
 T CUtlRBTree<CUtlMap<int, CEconItemDefinition*, int>::Node_t, int, CUtlMap<int, CEconItemDefinition*, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<int, CEconItemDefinition*, int>::Node_t, int>, int> >::NewNode()
 T CUtlRBTree<CUtlMap<int, CEconItemDefinition*, int>::Node_t, int, CUtlMap<int, CEconItemDefinition*, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<int, CEconItemDefinition*, int>::Node_t, int>, int> >::NextInorder(int) const
 T CUtlRBTree<CUtlMap<int, CEconItemDefinition*, int>::Node_t, int, CUtlMap<int, CEconItemDefinition*, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<int, CEconItemDefinition*, int>::Node_t, int>, int> >::RemoveAll()
 T CUtlRBTree<CUtlMap<int, CEconItemDefinition*, int>::Node_t, int, CUtlMap<int, CEconItemDefinition*, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<int, CEconItemDefinition*, int>::Node_t, int>, int> >::RemoveRebalance(int)
 T CUtlRBTree<CUtlMap<int, CEconItemDefinition*, int>::Node_t, int, CUtlMap<int, CEconItemDefinition*, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<int, CEconItemDefinition*, int>::Node_t, int>, int> >::RotateLeft(int)
 T CUtlRBTree<CUtlMap<int, CEconItemDefinition*, int>::Node_t, int, CUtlMap<int, CEconItemDefinition*, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<int, CEconItemDefinition*, int>::Node_t, int>, int> >::RotateRight(int)
 T CUtlRBTree<CUtlMap<int, CEconItemDefinition*, int>::Node_t, int, CUtlMap<int, CEconItemDefinition*, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<int, CEconItemDefinition*, int>::Node_t, int>, int> >::Unlink(int)
 T CUtlRBTree<CUtlMap<int, CEconItemDefinition*, int>::Node_t, int, CUtlMap<int, CEconItemDefinition*, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<int, CEconItemDefinition*, int>::Node_t, int>, int> >::~CUtlRBTree()
 T CUtlRBTree<CUtlMap<int, CEconItemQualityDefinition, int>::Node_t, int, CUtlMap<int, CEconItemQualityDefinition, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<int, CEconItemQualityDefinition, int>::Node_t, int>, int> >::Find(CUtlMap<int, CEconItemQualityDefinition, int>::Node_t const&) const
 T CUtlRBTree<CUtlMap<int, CEconItemQualityDefinition, int>::Node_t, int, CUtlMap<int, CEconItemQualityDefinition, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<int, CEconItemQualityDefinition, int>::Node_t, int>, int> >::FindInsertionPosition(CUtlMap<int, CEconItemQualityDefinition, int>::Node_t const&, int&, bool&)
 T CUtlRBTree<CUtlMap<int, CEconItemQualityDefinition, int>::Node_t, int, CUtlMap<int, CEconItemQualityDefinition, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<int, CEconItemQualityDefinition, int>::Node_t, int>, int> >::Insert(CUtlMap<int, CEconItemQualityDefinition, int>::Node_t const&)
 T CUtlRBTree<CUtlMap<int, CEconItemQualityDefinition, int>::Node_t, int, CUtlMap<int, CEconItemQualityDefinition, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<int, CEconItemQualityDefinition, int>::Node_t, int>, int> >::InsertRebalance(int)
 T CUtlRBTree<CUtlMap<int, CEconItemQualityDefinition, int>::Node_t, int, CUtlMap<int, CEconItemQualityDefinition, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<int, CEconItemQualityDefinition, int>::Node_t, int>, int> >::IsLeftChild(int) const
 T CUtlRBTree<CUtlMap<int, CEconItemQualityDefinition, int>::Node_t, int, CUtlMap<int, CEconItemQualityDefinition, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<int, CEconItemQualityDefinition, int>::Node_t, int>, int> >::IsRightChild(int) const
 T CUtlRBTree<CUtlMap<int, CEconItemQualityDefinition, int>::Node_t, int, CUtlMap<int, CEconItemQualityDefinition, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<int, CEconItemQualityDefinition, int>::Node_t, int>, int> >::NewNode()
 T CUtlRBTree<CUtlMap<int, CEconItemQualityDefinition, int>::Node_t, int, CUtlMap<int, CEconItemQualityDefinition, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<int, CEconItemQualityDefinition, int>::Node_t, int>, int> >::RemoveAll()
 T CUtlRBTree<CUtlMap<int, CEconItemQualityDefinition, int>::Node_t, int, CUtlMap<int, CEconItemQualityDefinition, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<int, CEconItemQualityDefinition, int>::Node_t, int>, int> >::RotateLeft(int)
 T CUtlRBTree<CUtlMap<int, CEconItemQualityDefinition, int>::Node_t, int, CUtlMap<int, CEconItemQualityDefinition, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<int, CEconItemQualityDefinition, int>::Node_t, int>, int> >::RotateRight(int)
 T CUtlRBTree<CUtlMap<int, CEconItemQualityDefinition, int>::Node_t, int, CUtlMap<int, CEconItemQualityDefinition, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<int, CEconItemQualityDefinition, int>::Node_t, int>, int> >::~CUtlRBTree()
 T CUtlRBTree<CUtlMap<int, CEconItemRarityDefinition, int>::Node_t, int, CUtlMap<int, CEconItemRarityDefinition, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<int, CEconItemRarityDefinition, int>::Node_t, int>, int> >::Find(CUtlMap<int, CEconItemRarityDefinition, int>::Node_t const&) const
 T CUtlRBTree<CUtlMap<int, CEconItemRarityDefinition, int>::Node_t, int, CUtlMap<int, CEconItemRarityDefinition, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<int, CEconItemRarityDefinition, int>::Node_t, int>, int> >::FindInsertionPosition(CUtlMap<int, CEconItemRarityDefinition, int>::Node_t const&, int&, bool&)
 T CUtlRBTree<CUtlMap<int, CEconItemRarityDefinition, int>::Node_t, int, CUtlMap<int, CEconItemRarityDefinition, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<int, CEconItemRarityDefinition, int>::Node_t, int>, int> >::Insert(CUtlMap<int, CEconItemRarityDefinition, int>::Node_t const&)
 T CUtlRBTree<CUtlMap<int, CEconItemRarityDefinition, int>::Node_t, int, CUtlMap<int, CEconItemRarityDefinition, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<int, CEconItemRarityDefinition, int>::Node_t, int>, int> >::InsertRebalance(int)
 T CUtlRBTree<CUtlMap<int, CEconItemRarityDefinition, int>::Node_t, int, CUtlMap<int, CEconItemRarityDefinition, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<int, CEconItemRarityDefinition, int>::Node_t, int>, int> >::IsLeftChild(int) const
 T CUtlRBTree<CUtlMap<int, CEconItemRarityDefinition, int>::Node_t, int, CUtlMap<int, CEconItemRarityDefinition, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<int, CEconItemRarityDefinition, int>::Node_t, int>, int> >::IsRightChild(int) const
 T CUtlRBTree<CUtlMap<int, CEconItemRarityDefinition, int>::Node_t, int, CUtlMap<int, CEconItemRarityDefinition, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<int, CEconItemRarityDefinition, int>::Node_t, int>, int> >::NewNode()
 T CUtlRBTree<CUtlMap<int, CEconItemRarityDefinition, int>::Node_t, int, CUtlMap<int, CEconItemRarityDefinition, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<int, CEconItemRarityDefinition, int>::Node_t, int>, int> >::RemoveAll()
 T CUtlRBTree<CUtlMap<int, CEconItemRarityDefinition, int>::Node_t, int, CUtlMap<int, CEconItemRarityDefinition, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<int, CEconItemRarityDefinition, int>::Node_t, int>, int> >::RotateLeft(int)
 T CUtlRBTree<CUtlMap<int, CEconItemRarityDefinition, int>::Node_t, int, CUtlMap<int, CEconItemRarityDefinition, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<int, CEconItemRarityDefinition, int>::Node_t, int>, int> >::RotateRight(int)
 T CUtlRBTree<CUtlMap<int, CEconItemRarityDefinition, int>::Node_t, int, CUtlMap<int, CEconItemRarityDefinition, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<int, CEconItemRarityDefinition, int>::Node_t, int>, int> >::~CUtlRBTree()
 T CUtlRBTree<CUtlMap<int, CEconItemSeriesDefinition, int>::Node_t, int, CUtlMap<int, CEconItemSeriesDefinition, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<int, CEconItemSeriesDefinition, int>::Node_t, int>, int> >::Find(CUtlMap<int, CEconItemSeriesDefinition, int>::Node_t const&) const
 T CUtlRBTree<CUtlMap<int, CEconItemSeriesDefinition, int>::Node_t, int, CUtlMap<int, CEconItemSeriesDefinition, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<int, CEconItemSeriesDefinition, int>::Node_t, int>, int> >::FindInsertionPosition(CUtlMap<int, CEconItemSeriesDefinition, int>::Node_t const&, int&, bool&)
 T CUtlRBTree<CUtlMap<int, CEconItemSeriesDefinition, int>::Node_t, int, CUtlMap<int, CEconItemSeriesDefinition, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<int, CEconItemSeriesDefinition, int>::Node_t, int>, int> >::Insert(CUtlMap<int, CEconItemSeriesDefinition, int>::Node_t const&)
 T CUtlRBTree<CUtlMap<int, CEconItemSeriesDefinition, int>::Node_t, int, CUtlMap<int, CEconItemSeriesDefinition, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<int, CEconItemSeriesDefinition, int>::Node_t, int>, int> >::InsertRebalance(int)
 T CUtlRBTree<CUtlMap<int, CEconItemSeriesDefinition, int>::Node_t, int, CUtlMap<int, CEconItemSeriesDefinition, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<int, CEconItemSeriesDefinition, int>::Node_t, int>, int> >::IsLeftChild(int) const
 T CUtlRBTree<CUtlMap<int, CEconItemSeriesDefinition, int>::Node_t, int, CUtlMap<int, CEconItemSeriesDefinition, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<int, CEconItemSeriesDefinition, int>::Node_t, int>, int> >::IsRightChild(int) const
 T CUtlRBTree<CUtlMap<int, CEconItemSeriesDefinition, int>::Node_t, int, CUtlMap<int, CEconItemSeriesDefinition, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<int, CEconItemSeriesDefinition, int>::Node_t, int>, int> >::NewNode()
 T CUtlRBTree<CUtlMap<int, CEconItemSeriesDefinition, int>::Node_t, int, CUtlMap<int, CEconItemSeriesDefinition, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<int, CEconItemSeriesDefinition, int>::Node_t, int>, int> >::RemoveAll()
 T CUtlRBTree<CUtlMap<int, CEconItemSeriesDefinition, int>::Node_t, int, CUtlMap<int, CEconItemSeriesDefinition, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<int, CEconItemSeriesDefinition, int>::Node_t, int>, int> >::RotateLeft(int)
 T CUtlRBTree<CUtlMap<int, CEconItemSeriesDefinition, int>::Node_t, int, CUtlMap<int, CEconItemSeriesDefinition, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<int, CEconItemSeriesDefinition, int>::Node_t, int>, int> >::RotateRight(int)
 T CUtlRBTree<CUtlMap<int, CEconItemSeriesDefinition, int>::Node_t, int, CUtlMap<int, CEconItemSeriesDefinition, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<int, CEconItemSeriesDefinition, int>::Node_t, int>, int> >::~CUtlRBTree()
 T CUtlRBTree<CUtlMap<int, CQuestObjectiveDefinition*, int>::Node_t, int, CUtlMap<int, CQuestObjectiveDefinition*, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<int, CQuestObjectiveDefinition*, int>::Node_t, int>, int> >::Find(CUtlMap<int, CQuestObjectiveDefinition*, int>::Node_t const&) const
 T CUtlRBTree<CUtlMap<int, CQuestObjectiveDefinition*, int>::Node_t, int, CUtlMap<int, CQuestObjectiveDefinition*, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<int, CQuestObjectiveDefinition*, int>::Node_t, int>, int> >::FindInsertionPosition(CUtlMap<int, CQuestObjectiveDefinition*, int>::Node_t const&, int&, bool&)
 T CUtlRBTree<CUtlMap<int, CQuestObjectiveDefinition*, int>::Node_t, int, CUtlMap<int, CQuestObjectiveDefinition*, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<int, CQuestObjectiveDefinition*, int>::Node_t, int>, int> >::Insert(CUtlMap<int, CQuestObjectiveDefinition*, int>::Node_t const&)
 T CUtlRBTree<CUtlMap<int, CQuestObjectiveDefinition*, int>::Node_t, int, CUtlMap<int, CQuestObjectiveDefinition*, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<int, CQuestObjectiveDefinition*, int>::Node_t, int>, int> >::InsertRebalance(int)
 T CUtlRBTree<CUtlMap<int, CQuestObjectiveDefinition*, int>::Node_t, int, CUtlMap<int, CQuestObjectiveDefinition*, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<int, CQuestObjectiveDefinition*, int>::Node_t, int>, int> >::IsLeftChild(int) const
 T CUtlRBTree<CUtlMap<int, CQuestObjectiveDefinition*, int>::Node_t, int, CUtlMap<int, CQuestObjectiveDefinition*, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<int, CQuestObjectiveDefinition*, int>::Node_t, int>, int> >::IsRightChild(int) const
 T CUtlRBTree<CUtlMap<int, CQuestObjectiveDefinition*, int>::Node_t, int, CUtlMap<int, CQuestObjectiveDefinition*, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<int, CQuestObjectiveDefinition*, int>::Node_t, int>, int> >::NewNode()
 T CUtlRBTree<CUtlMap<int, CQuestObjectiveDefinition*, int>::Node_t, int, CUtlMap<int, CQuestObjectiveDefinition*, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<int, CQuestObjectiveDefinition*, int>::Node_t, int>, int> >::RemoveAll()
 T CUtlRBTree<CUtlMap<int, CQuestObjectiveDefinition*, int>::Node_t, int, CUtlMap<int, CQuestObjectiveDefinition*, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<int, CQuestObjectiveDefinition*, int>::Node_t, int>, int> >::RotateLeft(int)
 T CUtlRBTree<CUtlMap<int, CQuestObjectiveDefinition*, int>::Node_t, int, CUtlMap<int, CQuestObjectiveDefinition*, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<int, CQuestObjectiveDefinition*, int>::Node_t, int>, int> >::RotateRight(int)
 T CUtlRBTree<CUtlMap<int, CQuestObjectiveDefinition*, int>::Node_t, int, CUtlMap<int, CQuestObjectiveDefinition*, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<int, CQuestObjectiveDefinition*, int>::Node_t, int>, int> >::~CUtlRBTree()
 T CUtlRBTree<CUtlMap<int, CTakeDamageInfo, unsigned short>::Node_t, unsigned short, CUtlMap<int, CTakeDamageInfo, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<int, CTakeDamageInfo, unsigned short>::Node_t, unsigned short>, unsigned short> >::Find(CUtlMap<int, CTakeDamageInfo, unsigned short>::Node_t const&) const
 T CUtlRBTree<CUtlMap<int, CTakeDamageInfo, unsigned short>::Node_t, unsigned short, CUtlMap<int, CTakeDamageInfo, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<int, CTakeDamageInfo, unsigned short>::Node_t, unsigned short>, unsigned short> >::FindInsertionPosition(CUtlMap<int, CTakeDamageInfo, unsigned short>::Node_t const&, unsigned short&, bool&)
 T CUtlRBTree<CUtlMap<int, CTakeDamageInfo, unsigned short>::Node_t, unsigned short, CUtlMap<int, CTakeDamageInfo, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<int, CTakeDamageInfo, unsigned short>::Node_t, unsigned short>, unsigned short> >::FirstInorder() const
 T CUtlRBTree<CUtlMap<int, CTakeDamageInfo, unsigned short>::Node_t, unsigned short, CUtlMap<int, CTakeDamageInfo, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<int, CTakeDamageInfo, unsigned short>::Node_t, unsigned short>, unsigned short> >::Insert(CUtlMap<int, CTakeDamageInfo, unsigned short>::Node_t const&)
 T CUtlRBTree<CUtlMap<int, CTakeDamageInfo, unsigned short>::Node_t, unsigned short, CUtlMap<int, CTakeDamageInfo, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<int, CTakeDamageInfo, unsigned short>::Node_t, unsigned short>, unsigned short> >::InsertRebalance(unsigned short)
 T CUtlRBTree<CUtlMap<int, CTakeDamageInfo, unsigned short>::Node_t, unsigned short, CUtlMap<int, CTakeDamageInfo, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<int, CTakeDamageInfo, unsigned short>::Node_t, unsigned short>, unsigned short> >::IsLeftChild(unsigned short) const
 T CUtlRBTree<CUtlMap<int, CTakeDamageInfo, unsigned short>::Node_t, unsigned short, CUtlMap<int, CTakeDamageInfo, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<int, CTakeDamageInfo, unsigned short>::Node_t, unsigned short>, unsigned short> >::IsRightChild(unsigned short) const
 T CUtlRBTree<CUtlMap<int, CTakeDamageInfo, unsigned short>::Node_t, unsigned short, CUtlMap<int, CTakeDamageInfo, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<int, CTakeDamageInfo, unsigned short>::Node_t, unsigned short>, unsigned short> >::NewNode()
 T CUtlRBTree<CUtlMap<int, CTakeDamageInfo, unsigned short>::Node_t, unsigned short, CUtlMap<int, CTakeDamageInfo, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<int, CTakeDamageInfo, unsigned short>::Node_t, unsigned short>, unsigned short> >::NextInorder(unsigned short) const
 T CUtlRBTree<CUtlMap<int, CTakeDamageInfo, unsigned short>::Node_t, unsigned short, CUtlMap<int, CTakeDamageInfo, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<int, CTakeDamageInfo, unsigned short>::Node_t, unsigned short>, unsigned short> >::RemoveAll()
 T CUtlRBTree<CUtlMap<int, CTakeDamageInfo, unsigned short>::Node_t, unsigned short, CUtlMap<int, CTakeDamageInfo, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<int, CTakeDamageInfo, unsigned short>::Node_t, unsigned short>, unsigned short> >::RotateLeft(unsigned short)
 T CUtlRBTree<CUtlMap<int, CTakeDamageInfo, unsigned short>::Node_t, unsigned short, CUtlMap<int, CTakeDamageInfo, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<int, CTakeDamageInfo, unsigned short>::Node_t, unsigned short>, unsigned short> >::RotateRight(unsigned short)
 T CUtlRBTree<CUtlMap<int, CTakeDamageInfo, unsigned short>::Node_t, unsigned short, CUtlMap<int, CTakeDamageInfo, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<int, CTakeDamageInfo, unsigned short>::Node_t, unsigned short>, unsigned short> >::~CUtlRBTree()
 T CUtlRBTree<CUtlMap<int, CTeamControlPoint*, unsigned short>::Node_t, unsigned short, CUtlMap<int, CTeamControlPoint*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<int, CTeamControlPoint*, unsigned short>::Node_t, unsigned short>, unsigned short> >::Find(CUtlMap<int, CTeamControlPoint*, unsigned short>::Node_t const&) const
 T CUtlRBTree<CUtlMap<int, CTeamControlPoint*, unsigned short>::Node_t, unsigned short, CUtlMap<int, CTeamControlPoint*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<int, CTeamControlPoint*, unsigned short>::Node_t, unsigned short>, unsigned short> >::FindInsertionPosition(CUtlMap<int, CTeamControlPoint*, unsigned short>::Node_t const&, unsigned short&, bool&)
 T CUtlRBTree<CUtlMap<int, CTeamControlPoint*, unsigned short>::Node_t, unsigned short, CUtlMap<int, CTeamControlPoint*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<int, CTeamControlPoint*, unsigned short>::Node_t, unsigned short>, unsigned short> >::Insert(CUtlMap<int, CTeamControlPoint*, unsigned short>::Node_t const&)
 T CUtlRBTree<CUtlMap<int, CTeamControlPoint*, unsigned short>::Node_t, unsigned short, CUtlMap<int, CTeamControlPoint*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<int, CTeamControlPoint*, unsigned short>::Node_t, unsigned short>, unsigned short> >::InsertRebalance(unsigned short)
 T CUtlRBTree<CUtlMap<int, CTeamControlPoint*, unsigned short>::Node_t, unsigned short, CUtlMap<int, CTeamControlPoint*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<int, CTeamControlPoint*, unsigned short>::Node_t, unsigned short>, unsigned short> >::IsLeftChild(unsigned short) const
 T CUtlRBTree<CUtlMap<int, CTeamControlPoint*, unsigned short>::Node_t, unsigned short, CUtlMap<int, CTeamControlPoint*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<int, CTeamControlPoint*, unsigned short>::Node_t, unsigned short>, unsigned short> >::IsRightChild(unsigned short) const
 T CUtlRBTree<CUtlMap<int, CTeamControlPoint*, unsigned short>::Node_t, unsigned short, CUtlMap<int, CTeamControlPoint*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<int, CTeamControlPoint*, unsigned short>::Node_t, unsigned short>, unsigned short> >::NewNode()
 T CUtlRBTree<CUtlMap<int, CTeamControlPoint*, unsigned short>::Node_t, unsigned short, CUtlMap<int, CTeamControlPoint*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<int, CTeamControlPoint*, unsigned short>::Node_t, unsigned short>, unsigned short> >::RemoveAll()
 T CUtlRBTree<CUtlMap<int, CTeamControlPoint*, unsigned short>::Node_t, unsigned short, CUtlMap<int, CTeamControlPoint*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<int, CTeamControlPoint*, unsigned short>::Node_t, unsigned short>, unsigned short> >::RotateLeft(unsigned short)
 T CUtlRBTree<CUtlMap<int, CTeamControlPoint*, unsigned short>::Node_t, unsigned short, CUtlMap<int, CTeamControlPoint*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<int, CTeamControlPoint*, unsigned short>::Node_t, unsigned short>, unsigned short> >::RotateRight(unsigned short)
 T CUtlRBTree<CUtlMap<int, CTeamControlPoint*, unsigned short>::Node_t, unsigned short, CUtlMap<int, CTeamControlPoint*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<int, CTeamControlPoint*, unsigned short>::Node_t, unsigned short>, unsigned short> >::~CUtlRBTree()
 T CUtlRBTree<CUtlMap<int, GCSDK::CSharedObject::SharedObjectInfo_t, unsigned short>::Node_t, unsigned short, CUtlMap<int, GCSDK::CSharedObject::SharedObjectInfo_t, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<int, GCSDK::CSharedObject::SharedObjectInfo_t, unsigned short>::Node_t, unsigned short>, unsigned short> >::Find(CUtlMap<int, GCSDK::CSharedObject::SharedObjectInfo_t, unsigned short>::Node_t const&) const
 T CUtlRBTree<CUtlMap<int, GCSDK::CSharedObject::SharedObjectInfo_t, unsigned short>::Node_t, unsigned short, CUtlMap<int, GCSDK::CSharedObject::SharedObjectInfo_t, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<int, GCSDK::CSharedObject::SharedObjectInfo_t, unsigned short>::Node_t, unsigned short>, unsigned short> >::FindInsertionPosition(CUtlMap<int, GCSDK::CSharedObject::SharedObjectInfo_t, unsigned short>::Node_t const&, unsigned short&, bool&)
 T CUtlRBTree<CUtlMap<int, GCSDK::CSharedObject::SharedObjectInfo_t, unsigned short>::Node_t, unsigned short, CUtlMap<int, GCSDK::CSharedObject::SharedObjectInfo_t, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<int, GCSDK::CSharedObject::SharedObjectInfo_t, unsigned short>::Node_t, unsigned short>, unsigned short> >::Insert(CUtlMap<int, GCSDK::CSharedObject::SharedObjectInfo_t, unsigned short>::Node_t const&)
 T CUtlRBTree<CUtlMap<int, GCSDK::CSharedObject::SharedObjectInfo_t, unsigned short>::Node_t, unsigned short, CUtlMap<int, GCSDK::CSharedObject::SharedObjectInfo_t, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<int, GCSDK::CSharedObject::SharedObjectInfo_t, unsigned short>::Node_t, unsigned short>, unsigned short> >::InsertRebalance(unsigned short)
 T CUtlRBTree<CUtlMap<int, GCSDK::CSharedObject::SharedObjectInfo_t, unsigned short>::Node_t, unsigned short, CUtlMap<int, GCSDK::CSharedObject::SharedObjectInfo_t, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<int, GCSDK::CSharedObject::SharedObjectInfo_t, unsigned short>::Node_t, unsigned short>, unsigned short> >::IsLeftChild(unsigned short) const
 T CUtlRBTree<CUtlMap<int, GCSDK::CSharedObject::SharedObjectInfo_t, unsigned short>::Node_t, unsigned short, CUtlMap<int, GCSDK::CSharedObject::SharedObjectInfo_t, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<int, GCSDK::CSharedObject::SharedObjectInfo_t, unsigned short>::Node_t, unsigned short>, unsigned short> >::IsRightChild(unsigned short) const
 T CUtlRBTree<CUtlMap<int, GCSDK::CSharedObject::SharedObjectInfo_t, unsigned short>::Node_t, unsigned short, CUtlMap<int, GCSDK::CSharedObject::SharedObjectInfo_t, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<int, GCSDK::CSharedObject::SharedObjectInfo_t, unsigned short>::Node_t, unsigned short>, unsigned short> >::NewNode()
 T CUtlRBTree<CUtlMap<int, GCSDK::CSharedObject::SharedObjectInfo_t, unsigned short>::Node_t, unsigned short, CUtlMap<int, GCSDK::CSharedObject::SharedObjectInfo_t, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<int, GCSDK::CSharedObject::SharedObjectInfo_t, unsigned short>::Node_t, unsigned short>, unsigned short> >::RemoveAll()
 T CUtlRBTree<CUtlMap<int, GCSDK::CSharedObject::SharedObjectInfo_t, unsigned short>::Node_t, unsigned short, CUtlMap<int, GCSDK::CSharedObject::SharedObjectInfo_t, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<int, GCSDK::CSharedObject::SharedObjectInfo_t, unsigned short>::Node_t, unsigned short>, unsigned short> >::RotateLeft(unsigned short)
 T CUtlRBTree<CUtlMap<int, GCSDK::CSharedObject::SharedObjectInfo_t, unsigned short>::Node_t, unsigned short, CUtlMap<int, GCSDK::CSharedObject::SharedObjectInfo_t, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<int, GCSDK::CSharedObject::SharedObjectInfo_t, unsigned short>::Node_t, unsigned short>, unsigned short> >::RotateRight(unsigned short)
 T CUtlRBTree<CUtlMap<int, GCSDK::CSharedObject::SharedObjectInfo_t, unsigned short>::Node_t, unsigned short, CUtlMap<int, GCSDK::CSharedObject::SharedObjectInfo_t, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<int, GCSDK::CSharedObject::SharedObjectInfo_t, unsigned short>::Node_t, unsigned short>, unsigned short> >::~CUtlRBTree()
 T CUtlRBTree<CUtlMap<int, GCSDK::CSharedObjectTypeCache*, unsigned short>::Node_t, unsigned short, CUtlMap<int, GCSDK::CSharedObjectTypeCache*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<int, GCSDK::CSharedObjectTypeCache*, unsigned short>::Node_t, unsigned short>, unsigned short> >::Find(CUtlMap<int, GCSDK::CSharedObjectTypeCache*, unsigned short>::Node_t const&) const
 T CUtlRBTree<CUtlMap<int, GCSDK::CSharedObjectTypeCache*, unsigned short>::Node_t, unsigned short, CUtlMap<int, GCSDK::CSharedObjectTypeCache*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<int, GCSDK::CSharedObjectTypeCache*, unsigned short>::Node_t, unsigned short>, unsigned short> >::FindInsertionPosition(CUtlMap<int, GCSDK::CSharedObjectTypeCache*, unsigned short>::Node_t const&, unsigned short&, bool&)
 T CUtlRBTree<CUtlMap<int, GCSDK::CSharedObjectTypeCache*, unsigned short>::Node_t, unsigned short, CUtlMap<int, GCSDK::CSharedObjectTypeCache*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<int, GCSDK::CSharedObjectTypeCache*, unsigned short>::Node_t, unsigned short>, unsigned short> >::FirstInorder() const
 T CUtlRBTree<CUtlMap<int, GCSDK::CSharedObjectTypeCache*, unsigned short>::Node_t, unsigned short, CUtlMap<int, GCSDK::CSharedObjectTypeCache*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<int, GCSDK::CSharedObjectTypeCache*, unsigned short>::Node_t, unsigned short>, unsigned short> >::Insert(CUtlMap<int, GCSDK::CSharedObjectTypeCache*, unsigned short>::Node_t const&)
 T CUtlRBTree<CUtlMap<int, GCSDK::CSharedObjectTypeCache*, unsigned short>::Node_t, unsigned short, CUtlMap<int, GCSDK::CSharedObjectTypeCache*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<int, GCSDK::CSharedObjectTypeCache*, unsigned short>::Node_t, unsigned short>, unsigned short> >::InsertRebalance(unsigned short)
 T CUtlRBTree<CUtlMap<int, GCSDK::CSharedObjectTypeCache*, unsigned short>::Node_t, unsigned short, CUtlMap<int, GCSDK::CSharedObjectTypeCache*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<int, GCSDK::CSharedObjectTypeCache*, unsigned short>::Node_t, unsigned short>, unsigned short> >::IsLeftChild(unsigned short) const
 T CUtlRBTree<CUtlMap<int, GCSDK::CSharedObjectTypeCache*, unsigned short>::Node_t, unsigned short, CUtlMap<int, GCSDK::CSharedObjectTypeCache*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<int, GCSDK::CSharedObjectTypeCache*, unsigned short>::Node_t, unsigned short>, unsigned short> >::IsRightChild(unsigned short) const
 T CUtlRBTree<CUtlMap<int, GCSDK::CSharedObjectTypeCache*, unsigned short>::Node_t, unsigned short, CUtlMap<int, GCSDK::CSharedObjectTypeCache*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<int, GCSDK::CSharedObjectTypeCache*, unsigned short>::Node_t, unsigned short>, unsigned short> >::NewNode()
 T CUtlRBTree<CUtlMap<int, GCSDK::CSharedObjectTypeCache*, unsigned short>::Node_t, unsigned short, CUtlMap<int, GCSDK::CSharedObjectTypeCache*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<int, GCSDK::CSharedObjectTypeCache*, unsigned short>::Node_t, unsigned short>, unsigned short> >::NextInorder(unsigned short) const
 T CUtlRBTree<CUtlMap<int, GCSDK::CSharedObjectTypeCache*, unsigned short>::Node_t, unsigned short, CUtlMap<int, GCSDK::CSharedObjectTypeCache*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<int, GCSDK::CSharedObjectTypeCache*, unsigned short>::Node_t, unsigned short>, unsigned short> >::RemoveAll()
 T CUtlRBTree<CUtlMap<int, GCSDK::CSharedObjectTypeCache*, unsigned short>::Node_t, unsigned short, CUtlMap<int, GCSDK::CSharedObjectTypeCache*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<int, GCSDK::CSharedObjectTypeCache*, unsigned short>::Node_t, unsigned short>, unsigned short> >::RotateLeft(unsigned short)
 T CUtlRBTree<CUtlMap<int, GCSDK::CSharedObjectTypeCache*, unsigned short>::Node_t, unsigned short, CUtlMap<int, GCSDK::CSharedObjectTypeCache*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<int, GCSDK::CSharedObjectTypeCache*, unsigned short>::Node_t, unsigned short>, unsigned short> >::RotateRight(unsigned short)
 T CUtlRBTree<CUtlMap<int, GCSDK::CSharedObjectTypeCache*, unsigned short>::Node_t, unsigned short, CUtlMap<int, GCSDK::CSharedObjectTypeCache*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<int, GCSDK::CSharedObjectTypeCache*, unsigned short>::Node_t, unsigned short>, unsigned short> >::~CUtlRBTree()
 T CUtlRBTree<CUtlMap<int, attachedparticlesystem_t, unsigned short>::Node_t, unsigned short, CUtlMap<int, attachedparticlesystem_t, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<int, attachedparticlesystem_t, unsigned short>::Node_t, unsigned short>, unsigned short> >::Find(CUtlMap<int, attachedparticlesystem_t, unsigned short>::Node_t const&) const
 T CUtlRBTree<CUtlMap<int, attachedparticlesystem_t, unsigned short>::Node_t, unsigned short, CUtlMap<int, attachedparticlesystem_t, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<int, attachedparticlesystem_t, unsigned short>::Node_t, unsigned short>, unsigned short> >::FindInsertionPosition(CUtlMap<int, attachedparticlesystem_t, unsigned short>::Node_t const&, unsigned short&, bool&)
 T CUtlRBTree<CUtlMap<int, attachedparticlesystem_t, unsigned short>::Node_t, unsigned short, CUtlMap<int, attachedparticlesystem_t, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<int, attachedparticlesystem_t, unsigned short>::Node_t, unsigned short>, unsigned short> >::Insert(CUtlMap<int, attachedparticlesystem_t, unsigned short>::Node_t const&)
 T CUtlRBTree<CUtlMap<int, attachedparticlesystem_t, unsigned short>::Node_t, unsigned short, CUtlMap<int, attachedparticlesystem_t, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<int, attachedparticlesystem_t, unsigned short>::Node_t, unsigned short>, unsigned short> >::InsertRebalance(unsigned short)
 T CUtlRBTree<CUtlMap<int, attachedparticlesystem_t, unsigned short>::Node_t, unsigned short, CUtlMap<int, attachedparticlesystem_t, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<int, attachedparticlesystem_t, unsigned short>::Node_t, unsigned short>, unsigned short> >::IsLeftChild(unsigned short) const
 T CUtlRBTree<CUtlMap<int, attachedparticlesystem_t, unsigned short>::Node_t, unsigned short, CUtlMap<int, attachedparticlesystem_t, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<int, attachedparticlesystem_t, unsigned short>::Node_t, unsigned short>, unsigned short> >::IsRightChild(unsigned short) const
 T CUtlRBTree<CUtlMap<int, attachedparticlesystem_t, unsigned short>::Node_t, unsigned short, CUtlMap<int, attachedparticlesystem_t, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<int, attachedparticlesystem_t, unsigned short>::Node_t, unsigned short>, unsigned short> >::NewNode()
 T CUtlRBTree<CUtlMap<int, attachedparticlesystem_t, unsigned short>::Node_t, unsigned short, CUtlMap<int, attachedparticlesystem_t, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<int, attachedparticlesystem_t, unsigned short>::Node_t, unsigned short>, unsigned short> >::RemoveAll()
 T CUtlRBTree<CUtlMap<int, attachedparticlesystem_t, unsigned short>::Node_t, unsigned short, CUtlMap<int, attachedparticlesystem_t, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<int, attachedparticlesystem_t, unsigned short>::Node_t, unsigned short>, unsigned short> >::RotateLeft(unsigned short)
 T CUtlRBTree<CUtlMap<int, attachedparticlesystem_t, unsigned short>::Node_t, unsigned short, CUtlMap<int, attachedparticlesystem_t, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<int, attachedparticlesystem_t, unsigned short>::Node_t, unsigned short>, unsigned short> >::RotateRight(unsigned short)
 T CUtlRBTree<CUtlMap<int, attachedparticlesystem_t, unsigned short>::Node_t, unsigned short, CUtlMap<int, attachedparticlesystem_t, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<int, attachedparticlesystem_t, unsigned short>::Node_t, unsigned short>, unsigned short> >::~CUtlRBTree()
 T CUtlRBTree<CUtlMap<int, char const*, unsigned short>::Node_t, unsigned short, CUtlMap<int, char const*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<int, char const*, unsigned short>::Node_t, unsigned short>, unsigned short> >::Find(CUtlMap<int, char const*, unsigned short>::Node_t const&) const
 T CUtlRBTree<CUtlMap<int, char const*, unsigned short>::Node_t, unsigned short, CUtlMap<int, char const*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<int, char const*, unsigned short>::Node_t, unsigned short>, unsigned short> >::FindInsertionPosition(CUtlMap<int, char const*, unsigned short>::Node_t const&, unsigned short&, bool&)
 T CUtlRBTree<CUtlMap<int, char const*, unsigned short>::Node_t, unsigned short, CUtlMap<int, char const*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<int, char const*, unsigned short>::Node_t, unsigned short>, unsigned short> >::Insert(CUtlMap<int, char const*, unsigned short>::Node_t const&)
 T CUtlRBTree<CUtlMap<int, char const*, unsigned short>::Node_t, unsigned short, CUtlMap<int, char const*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<int, char const*, unsigned short>::Node_t, unsigned short>, unsigned short> >::InsertRebalance(unsigned short)
 T CUtlRBTree<CUtlMap<int, char const*, unsigned short>::Node_t, unsigned short, CUtlMap<int, char const*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<int, char const*, unsigned short>::Node_t, unsigned short>, unsigned short> >::IsLeftChild(unsigned short) const
 T CUtlRBTree<CUtlMap<int, char const*, unsigned short>::Node_t, unsigned short, CUtlMap<int, char const*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<int, char const*, unsigned short>::Node_t, unsigned short>, unsigned short> >::IsRightChild(unsigned short) const
 T CUtlRBTree<CUtlMap<int, char const*, unsigned short>::Node_t, unsigned short, CUtlMap<int, char const*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<int, char const*, unsigned short>::Node_t, unsigned short>, unsigned short> >::NewNode()
 T CUtlRBTree<CUtlMap<int, char const*, unsigned short>::Node_t, unsigned short, CUtlMap<int, char const*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<int, char const*, unsigned short>::Node_t, unsigned short>, unsigned short> >::RemoveAll()
 T CUtlRBTree<CUtlMap<int, char const*, unsigned short>::Node_t, unsigned short, CUtlMap<int, char const*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<int, char const*, unsigned short>::Node_t, unsigned short>, unsigned short> >::RotateLeft(unsigned short)
 T CUtlRBTree<CUtlMap<int, char const*, unsigned short>::Node_t, unsigned short, CUtlMap<int, char const*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<int, char const*, unsigned short>::Node_t, unsigned short>, unsigned short> >::RotateRight(unsigned short)
 T CUtlRBTree<CUtlMap<int, char const*, unsigned short>::Node_t, unsigned short, CUtlMap<int, char const*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<int, char const*, unsigned short>::Node_t, unsigned short>, unsigned short> >::~CUtlRBTree()
 T CUtlRBTree<CUtlMap<int, float, unsigned short>::Node_t, unsigned short, CUtlMap<int, float, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<int, float, unsigned short>::Node_t, unsigned short>, unsigned short> >::Find(CUtlMap<int, float, unsigned short>::Node_t const&) const
 T CUtlRBTree<CUtlMap<int, float, unsigned short>::Node_t, unsigned short, CUtlMap<int, float, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<int, float, unsigned short>::Node_t, unsigned short>, unsigned short> >::FindInsertionPosition(CUtlMap<int, float, unsigned short>::Node_t const&, unsigned short&, bool&)
 T CUtlRBTree<CUtlMap<int, float, unsigned short>::Node_t, unsigned short, CUtlMap<int, float, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<int, float, unsigned short>::Node_t, unsigned short>, unsigned short> >::Insert(CUtlMap<int, float, unsigned short>::Node_t const&)
 T CUtlRBTree<CUtlMap<int, float, unsigned short>::Node_t, unsigned short, CUtlMap<int, float, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<int, float, unsigned short>::Node_t, unsigned short>, unsigned short> >::InsertRebalance(unsigned short)
 T CUtlRBTree<CUtlMap<int, float, unsigned short>::Node_t, unsigned short, CUtlMap<int, float, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<int, float, unsigned short>::Node_t, unsigned short>, unsigned short> >::IsLeftChild(unsigned short) const
 T CUtlRBTree<CUtlMap<int, float, unsigned short>::Node_t, unsigned short, CUtlMap<int, float, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<int, float, unsigned short>::Node_t, unsigned short>, unsigned short> >::IsRightChild(unsigned short) const
 T CUtlRBTree<CUtlMap<int, float, unsigned short>::Node_t, unsigned short, CUtlMap<int, float, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<int, float, unsigned short>::Node_t, unsigned short>, unsigned short> >::NewNode()
 T CUtlRBTree<CUtlMap<int, float, unsigned short>::Node_t, unsigned short, CUtlMap<int, float, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<int, float, unsigned short>::Node_t, unsigned short>, unsigned short> >::RemoveAll()
 T CUtlRBTree<CUtlMap<int, float, unsigned short>::Node_t, unsigned short, CUtlMap<int, float, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<int, float, unsigned short>::Node_t, unsigned short>, unsigned short> >::RemoveRebalance(unsigned short)
 T CUtlRBTree<CUtlMap<int, float, unsigned short>::Node_t, unsigned short, CUtlMap<int, float, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<int, float, unsigned short>::Node_t, unsigned short>, unsigned short> >::RotateLeft(unsigned short)
 T CUtlRBTree<CUtlMap<int, float, unsigned short>::Node_t, unsigned short, CUtlMap<int, float, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<int, float, unsigned short>::Node_t, unsigned short>, unsigned short> >::RotateRight(unsigned short)
 T CUtlRBTree<CUtlMap<int, float, unsigned short>::Node_t, unsigned short, CUtlMap<int, float, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<int, float, unsigned short>::Node_t, unsigned short>, unsigned short> >::Unlink(unsigned short)
 T CUtlRBTree<CUtlMap<int, float, unsigned short>::Node_t, unsigned short, CUtlMap<int, float, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<int, float, unsigned short>::Node_t, unsigned short>, unsigned short> >::~CUtlRBTree()
 T CUtlRBTree<CUtlMap<int, int, unsigned short>::Node_t, unsigned short, CUtlMap<int, int, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<int, int, unsigned short>::Node_t, unsigned short>, unsigned short> >::Find(CUtlMap<int, int, unsigned short>::Node_t const&) const
 T CUtlRBTree<CUtlMap<int, int, unsigned short>::Node_t, unsigned short, CUtlMap<int, int, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<int, int, unsigned short>::Node_t, unsigned short>, unsigned short> >::FindInsertionPosition(CUtlMap<int, int, unsigned short>::Node_t const&, unsigned short&, bool&)
 T CUtlRBTree<CUtlMap<int, int, unsigned short>::Node_t, unsigned short, CUtlMap<int, int, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<int, int, unsigned short>::Node_t, unsigned short>, unsigned short> >::FirstInorder() const
 T CUtlRBTree<CUtlMap<int, int, unsigned short>::Node_t, unsigned short, CUtlMap<int, int, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<int, int, unsigned short>::Node_t, unsigned short>, unsigned short> >::Insert(CUtlMap<int, int, unsigned short>::Node_t const&)
 T CUtlRBTree<CUtlMap<int, int, unsigned short>::Node_t, unsigned short, CUtlMap<int, int, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<int, int, unsigned short>::Node_t, unsigned short>, unsigned short> >::InsertRebalance(unsigned short)
 T CUtlRBTree<CUtlMap<int, int, unsigned short>::Node_t, unsigned short, CUtlMap<int, int, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<int, int, unsigned short>::Node_t, unsigned short>, unsigned short> >::IsLeftChild(unsigned short) const
 T CUtlRBTree<CUtlMap<int, int, unsigned short>::Node_t, unsigned short, CUtlMap<int, int, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<int, int, unsigned short>::Node_t, unsigned short>, unsigned short> >::IsRightChild(unsigned short) const
 T CUtlRBTree<CUtlMap<int, int, unsigned short>::Node_t, unsigned short, CUtlMap<int, int, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<int, int, unsigned short>::Node_t, unsigned short>, unsigned short> >::NewNode()
 T CUtlRBTree<CUtlMap<int, int, unsigned short>::Node_t, unsigned short, CUtlMap<int, int, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<int, int, unsigned short>::Node_t, unsigned short>, unsigned short> >::NextInorder(unsigned short) const
 T CUtlRBTree<CUtlMap<int, int, unsigned short>::Node_t, unsigned short, CUtlMap<int, int, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<int, int, unsigned short>::Node_t, unsigned short>, unsigned short> >::RemoveAll()
 T CUtlRBTree<CUtlMap<int, int, unsigned short>::Node_t, unsigned short, CUtlMap<int, int, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<int, int, unsigned short>::Node_t, unsigned short>, unsigned short> >::RotateLeft(unsigned short)
 T CUtlRBTree<CUtlMap<int, int, unsigned short>::Node_t, unsigned short, CUtlMap<int, int, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<int, int, unsigned short>::Node_t, unsigned short>, unsigned short> >::RotateRight(unsigned short)
 T CUtlRBTree<CUtlMap<int, int, unsigned short>::Node_t, unsigned short, CUtlMap<int, int, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<int, int, unsigned short>::Node_t, unsigned short>, unsigned short> >::~CUtlRBTree()
 T CUtlRBTree<CUtlMap<string_t, CSimpleSimTimer, char>::Node_t, char, CUtlMap<string_t, CSimpleSimTimer, char>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<string_t, CSimpleSimTimer, char>::Node_t, char>, char> >::Find(CUtlMap<string_t, CSimpleSimTimer, char>::Node_t const&) const
 T CUtlRBTree<CUtlMap<string_t, CSimpleSimTimer, char>::Node_t, char, CUtlMap<string_t, CSimpleSimTimer, char>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<string_t, CSimpleSimTimer, char>::Node_t, char>, char> >::FindInsertionPosition(CUtlMap<string_t, CSimpleSimTimer, char>::Node_t const&, char&, bool&)
 T CUtlRBTree<CUtlMap<string_t, CSimpleSimTimer, char>::Node_t, char, CUtlMap<string_t, CSimpleSimTimer, char>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<string_t, CSimpleSimTimer, char>::Node_t, char>, char> >::FirstInorder() const
 T CUtlRBTree<CUtlMap<string_t, CSimpleSimTimer, char>::Node_t, char, CUtlMap<string_t, CSimpleSimTimer, char>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<string_t, CSimpleSimTimer, char>::Node_t, char>, char> >::Insert(CUtlMap<string_t, CSimpleSimTimer, char>::Node_t const&)
 T CUtlRBTree<CUtlMap<string_t, CSimpleSimTimer, char>::Node_t, char, CUtlMap<string_t, CSimpleSimTimer, char>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<string_t, CSimpleSimTimer, char>::Node_t, char>, char> >::InsertRebalance(char)
 T CUtlRBTree<CUtlMap<string_t, CSimpleSimTimer, char>::Node_t, char, CUtlMap<string_t, CSimpleSimTimer, char>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<string_t, CSimpleSimTimer, char>::Node_t, char>, char> >::IsLeftChild(char) const
 T CUtlRBTree<CUtlMap<string_t, CSimpleSimTimer, char>::Node_t, char, CUtlMap<string_t, CSimpleSimTimer, char>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<string_t, CSimpleSimTimer, char>::Node_t, char>, char> >::IsRightChild(char) const
 T CUtlRBTree<CUtlMap<string_t, CSimpleSimTimer, char>::Node_t, char, CUtlMap<string_t, CSimpleSimTimer, char>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<string_t, CSimpleSimTimer, char>::Node_t, char>, char> >::NewNode()
 T CUtlRBTree<CUtlMap<string_t, CSimpleSimTimer, char>::Node_t, char, CUtlMap<string_t, CSimpleSimTimer, char>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<string_t, CSimpleSimTimer, char>::Node_t, char>, char> >::NextInorder(char) const
 T CUtlRBTree<CUtlMap<string_t, CSimpleSimTimer, char>::Node_t, char, CUtlMap<string_t, CSimpleSimTimer, char>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<string_t, CSimpleSimTimer, char>::Node_t, char>, char> >::RemoveAll()
 T CUtlRBTree<CUtlMap<string_t, CSimpleSimTimer, char>::Node_t, char, CUtlMap<string_t, CSimpleSimTimer, char>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<string_t, CSimpleSimTimer, char>::Node_t, char>, char> >::RotateLeft(char)
 T CUtlRBTree<CUtlMap<string_t, CSimpleSimTimer, char>::Node_t, char, CUtlMap<string_t, CSimpleSimTimer, char>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<string_t, CSimpleSimTimer, char>::Node_t, char>, char> >::RotateRight(char)
 T CUtlRBTree<CUtlMap<string_t, CSimpleSimTimer, char>::Node_t, char, CUtlMap<string_t, CSimpleSimTimer, char>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<string_t, CSimpleSimTimer, char>::Node_t, char>, char> >::~CUtlRBTree()
 T CUtlRBTree<CUtlMap<string_t, CUtlVector<CTFGameRules::TeleportLocation_t, CUtlMemory<CTFGameRules::TeleportLocation_t, int> >*, unsigned short>::Node_t, unsigned short, CUtlMap<string_t, CUtlVector<CTFGameRules::TeleportLocation_t, CUtlMemory<CTFGameRules::TeleportLocation_t, int> >*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<string_t, CUtlVector<CTFGameRules::TeleportLocation_t, CUtlMemory<CTFGameRules::TeleportLocation_t, int> >*, unsigned short>::Node_t, unsigned short>, unsigned short> >::Find(CUtlMap<string_t, CUtlVector<CTFGameRules::TeleportLocation_t, CUtlMemory<CTFGameRules::TeleportLocation_t, int> >*, unsigned short>::Node_t const&) const
 T CUtlRBTree<CUtlMap<string_t, CUtlVector<CTFGameRules::TeleportLocation_t, CUtlMemory<CTFGameRules::TeleportLocation_t, int> >*, unsigned short>::Node_t, unsigned short, CUtlMap<string_t, CUtlVector<CTFGameRules::TeleportLocation_t, CUtlMemory<CTFGameRules::TeleportLocation_t, int> >*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<string_t, CUtlVector<CTFGameRules::TeleportLocation_t, CUtlMemory<CTFGameRules::TeleportLocation_t, int> >*, unsigned short>::Node_t, unsigned short>, unsigned short> >::FindInsertionPosition(CUtlMap<string_t, CUtlVector<CTFGameRules::TeleportLocation_t, CUtlMemory<CTFGameRules::TeleportLocation_t, int> >*, unsigned short>::Node_t const&, unsigned short&, bool&)
 T CUtlRBTree<CUtlMap<string_t, CUtlVector<CTFGameRules::TeleportLocation_t, CUtlMemory<CTFGameRules::TeleportLocation_t, int> >*, unsigned short>::Node_t, unsigned short, CUtlMap<string_t, CUtlVector<CTFGameRules::TeleportLocation_t, CUtlMemory<CTFGameRules::TeleportLocation_t, int> >*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<string_t, CUtlVector<CTFGameRules::TeleportLocation_t, CUtlMemory<CTFGameRules::TeleportLocation_t, int> >*, unsigned short>::Node_t, unsigned short>, unsigned short> >::Insert(CUtlMap<string_t, CUtlVector<CTFGameRules::TeleportLocation_t, CUtlMemory<CTFGameRules::TeleportLocation_t, int> >*, unsigned short>::Node_t const&)
 T CUtlRBTree<CUtlMap<string_t, CUtlVector<CTFGameRules::TeleportLocation_t, CUtlMemory<CTFGameRules::TeleportLocation_t, int> >*, unsigned short>::Node_t, unsigned short, CUtlMap<string_t, CUtlVector<CTFGameRules::TeleportLocation_t, CUtlMemory<CTFGameRules::TeleportLocation_t, int> >*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<string_t, CUtlVector<CTFGameRules::TeleportLocation_t, CUtlMemory<CTFGameRules::TeleportLocation_t, int> >*, unsigned short>::Node_t, unsigned short>, unsigned short> >::InsertRebalance(unsigned short)
 T CUtlRBTree<CUtlMap<string_t, CUtlVector<CTFGameRules::TeleportLocation_t, CUtlMemory<CTFGameRules::TeleportLocation_t, int> >*, unsigned short>::Node_t, unsigned short, CUtlMap<string_t, CUtlVector<CTFGameRules::TeleportLocation_t, CUtlMemory<CTFGameRules::TeleportLocation_t, int> >*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<string_t, CUtlVector<CTFGameRules::TeleportLocation_t, CUtlMemory<CTFGameRules::TeleportLocation_t, int> >*, unsigned short>::Node_t, unsigned short>, unsigned short> >::IsLeftChild(unsigned short) const
 T CUtlRBTree<CUtlMap<string_t, CUtlVector<CTFGameRules::TeleportLocation_t, CUtlMemory<CTFGameRules::TeleportLocation_t, int> >*, unsigned short>::Node_t, unsigned short, CUtlMap<string_t, CUtlVector<CTFGameRules::TeleportLocation_t, CUtlMemory<CTFGameRules::TeleportLocation_t, int> >*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<string_t, CUtlVector<CTFGameRules::TeleportLocation_t, CUtlMemory<CTFGameRules::TeleportLocation_t, int> >*, unsigned short>::Node_t, unsigned short>, unsigned short> >::IsRightChild(unsigned short) const
 T CUtlRBTree<CUtlMap<string_t, CUtlVector<CTFGameRules::TeleportLocation_t, CUtlMemory<CTFGameRules::TeleportLocation_t, int> >*, unsigned short>::Node_t, unsigned short, CUtlMap<string_t, CUtlVector<CTFGameRules::TeleportLocation_t, CUtlMemory<CTFGameRules::TeleportLocation_t, int> >*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<string_t, CUtlVector<CTFGameRules::TeleportLocation_t, CUtlMemory<CTFGameRules::TeleportLocation_t, int> >*, unsigned short>::Node_t, unsigned short>, unsigned short> >::NewNode()
 T CUtlRBTree<CUtlMap<string_t, CUtlVector<CTFGameRules::TeleportLocation_t, CUtlMemory<CTFGameRules::TeleportLocation_t, int> >*, unsigned short>::Node_t, unsigned short, CUtlMap<string_t, CUtlVector<CTFGameRules::TeleportLocation_t, CUtlMemory<CTFGameRules::TeleportLocation_t, int> >*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<string_t, CUtlVector<CTFGameRules::TeleportLocation_t, CUtlMemory<CTFGameRules::TeleportLocation_t, int> >*, unsigned short>::Node_t, unsigned short>, unsigned short> >::RemoveAll()
 T CUtlRBTree<CUtlMap<string_t, CUtlVector<CTFGameRules::TeleportLocation_t, CUtlMemory<CTFGameRules::TeleportLocation_t, int> >*, unsigned short>::Node_t, unsigned short, CUtlMap<string_t, CUtlVector<CTFGameRules::TeleportLocation_t, CUtlMemory<CTFGameRules::TeleportLocation_t, int> >*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<string_t, CUtlVector<CTFGameRules::TeleportLocation_t, CUtlMemory<CTFGameRules::TeleportLocation_t, int> >*, unsigned short>::Node_t, unsigned short>, unsigned short> >::RotateLeft(unsigned short)
 T CUtlRBTree<CUtlMap<string_t, CUtlVector<CTFGameRules::TeleportLocation_t, CUtlMemory<CTFGameRules::TeleportLocation_t, int> >*, unsigned short>::Node_t, unsigned short, CUtlMap<string_t, CUtlVector<CTFGameRules::TeleportLocation_t, CUtlMemory<CTFGameRules::TeleportLocation_t, int> >*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<string_t, CUtlVector<CTFGameRules::TeleportLocation_t, CUtlMemory<CTFGameRules::TeleportLocation_t, int> >*, unsigned short>::Node_t, unsigned short>, unsigned short> >::RotateRight(unsigned short)
 T CUtlRBTree<CUtlMap<string_t, CUtlVector<CTFGameRules::TeleportLocation_t, CUtlMemory<CTFGameRules::TeleportLocation_t, int> >*, unsigned short>::Node_t, unsigned short, CUtlMap<string_t, CUtlVector<CTFGameRules::TeleportLocation_t, CUtlMemory<CTFGameRules::TeleportLocation_t, int> >*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<string_t, CUtlVector<CTFGameRules::TeleportLocation_t, CUtlMemory<CTFGameRules::TeleportLocation_t, int> >*, unsigned short>::Node_t, unsigned short>, unsigned short> >::~CUtlRBTree()
 T CUtlRBTree<CUtlMap<unsigned char, CWarDefinition*, unsigned short>::Node_t, unsigned short, CUtlMap<unsigned char, CWarDefinition*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<unsigned char, CWarDefinition*, unsigned short>::Node_t, unsigned short>, unsigned short> >::Find(CUtlMap<unsigned char, CWarDefinition*, unsigned short>::Node_t const&) const
 T CUtlRBTree<CUtlMap<unsigned char, CWarDefinition*, unsigned short>::Node_t, unsigned short, CUtlMap<unsigned char, CWarDefinition*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<unsigned char, CWarDefinition*, unsigned short>::Node_t, unsigned short>, unsigned short> >::FindInsertionPosition(CUtlMap<unsigned char, CWarDefinition*, unsigned short>::Node_t const&, unsigned short&, bool&)
 T CUtlRBTree<CUtlMap<unsigned char, CWarDefinition*, unsigned short>::Node_t, unsigned short, CUtlMap<unsigned char, CWarDefinition*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<unsigned char, CWarDefinition*, unsigned short>::Node_t, unsigned short>, unsigned short> >::Insert(CUtlMap<unsigned char, CWarDefinition*, unsigned short>::Node_t const&)
 T CUtlRBTree<CUtlMap<unsigned char, CWarDefinition*, unsigned short>::Node_t, unsigned short, CUtlMap<unsigned char, CWarDefinition*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<unsigned char, CWarDefinition*, unsigned short>::Node_t, unsigned short>, unsigned short> >::InsertRebalance(unsigned short)
 T CUtlRBTree<CUtlMap<unsigned char, CWarDefinition*, unsigned short>::Node_t, unsigned short, CUtlMap<unsigned char, CWarDefinition*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<unsigned char, CWarDefinition*, unsigned short>::Node_t, unsigned short>, unsigned short> >::IsLeftChild(unsigned short) const
 T CUtlRBTree<CUtlMap<unsigned char, CWarDefinition*, unsigned short>::Node_t, unsigned short, CUtlMap<unsigned char, CWarDefinition*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<unsigned char, CWarDefinition*, unsigned short>::Node_t, unsigned short>, unsigned short> >::IsRightChild(unsigned short) const
 T CUtlRBTree<CUtlMap<unsigned char, CWarDefinition*, unsigned short>::Node_t, unsigned short, CUtlMap<unsigned char, CWarDefinition*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<unsigned char, CWarDefinition*, unsigned short>::Node_t, unsigned short>, unsigned short> >::NewNode()
 T CUtlRBTree<CUtlMap<unsigned char, CWarDefinition*, unsigned short>::Node_t, unsigned short, CUtlMap<unsigned char, CWarDefinition*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<unsigned char, CWarDefinition*, unsigned short>::Node_t, unsigned short>, unsigned short> >::RemoveAll()
 T CUtlRBTree<CUtlMap<unsigned char, CWarDefinition*, unsigned short>::Node_t, unsigned short, CUtlMap<unsigned char, CWarDefinition*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<unsigned char, CWarDefinition*, unsigned short>::Node_t, unsigned short>, unsigned short> >::RotateLeft(unsigned short)
 T CUtlRBTree<CUtlMap<unsigned char, CWarDefinition*, unsigned short>::Node_t, unsigned short, CUtlMap<unsigned char, CWarDefinition*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<unsigned char, CWarDefinition*, unsigned short>::Node_t, unsigned short>, unsigned short> >::RotateRight(unsigned short)
 T CUtlRBTree<CUtlMap<unsigned char, CWarDefinition*, unsigned short>::Node_t, unsigned short, CUtlMap<unsigned char, CWarDefinition*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<unsigned char, CWarDefinition*, unsigned short>::Node_t, unsigned short>, unsigned short> >::~CUtlRBTree()
 T CUtlRBTree<CUtlMap<unsigned char, CWarDefinition::CWarSideDefinition_t, unsigned short>::Node_t, unsigned short, CUtlMap<unsigned char, CWarDefinition::CWarSideDefinition_t, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<unsigned char, CWarDefinition::CWarSideDefinition_t, unsigned short>::Node_t, unsigned short>, unsigned short> >::Find(CUtlMap<unsigned char, CWarDefinition::CWarSideDefinition_t, unsigned short>::Node_t const&) const
 T CUtlRBTree<CUtlMap<unsigned char, CWarDefinition::CWarSideDefinition_t, unsigned short>::Node_t, unsigned short, CUtlMap<unsigned char, CWarDefinition::CWarSideDefinition_t, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<unsigned char, CWarDefinition::CWarSideDefinition_t, unsigned short>::Node_t, unsigned short>, unsigned short> >::FindInsertionPosition(CUtlMap<unsigned char, CWarDefinition::CWarSideDefinition_t, unsigned short>::Node_t const&, unsigned short&, bool&)
 T CUtlRBTree<CUtlMap<unsigned char, CWarDefinition::CWarSideDefinition_t, unsigned short>::Node_t, unsigned short, CUtlMap<unsigned char, CWarDefinition::CWarSideDefinition_t, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<unsigned char, CWarDefinition::CWarSideDefinition_t, unsigned short>::Node_t, unsigned short>, unsigned short> >::Insert(CUtlMap<unsigned char, CWarDefinition::CWarSideDefinition_t, unsigned short>::Node_t const&)
 T CUtlRBTree<CUtlMap<unsigned char, CWarDefinition::CWarSideDefinition_t, unsigned short>::Node_t, unsigned short, CUtlMap<unsigned char, CWarDefinition::CWarSideDefinition_t, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<unsigned char, CWarDefinition::CWarSideDefinition_t, unsigned short>::Node_t, unsigned short>, unsigned short> >::InsertRebalance(unsigned short)
 T CUtlRBTree<CUtlMap<unsigned char, CWarDefinition::CWarSideDefinition_t, unsigned short>::Node_t, unsigned short, CUtlMap<unsigned char, CWarDefinition::CWarSideDefinition_t, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<unsigned char, CWarDefinition::CWarSideDefinition_t, unsigned short>::Node_t, unsigned short>, unsigned short> >::IsLeftChild(unsigned short) const
 T CUtlRBTree<CUtlMap<unsigned char, CWarDefinition::CWarSideDefinition_t, unsigned short>::Node_t, unsigned short, CUtlMap<unsigned char, CWarDefinition::CWarSideDefinition_t, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<unsigned char, CWarDefinition::CWarSideDefinition_t, unsigned short>::Node_t, unsigned short>, unsigned short> >::IsRightChild(unsigned short) const
 T CUtlRBTree<CUtlMap<unsigned char, CWarDefinition::CWarSideDefinition_t, unsigned short>::Node_t, unsigned short, CUtlMap<unsigned char, CWarDefinition::CWarSideDefinition_t, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<unsigned char, CWarDefinition::CWarSideDefinition_t, unsigned short>::Node_t, unsigned short>, unsigned short> >::NewNode()
 T CUtlRBTree<CUtlMap<unsigned char, CWarDefinition::CWarSideDefinition_t, unsigned short>::Node_t, unsigned short, CUtlMap<unsigned char, CWarDefinition::CWarSideDefinition_t, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<unsigned char, CWarDefinition::CWarSideDefinition_t, unsigned short>::Node_t, unsigned short>, unsigned short> >::RemoveAll()
 T CUtlRBTree<CUtlMap<unsigned char, CWarDefinition::CWarSideDefinition_t, unsigned short>::Node_t, unsigned short, CUtlMap<unsigned char, CWarDefinition::CWarSideDefinition_t, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<unsigned char, CWarDefinition::CWarSideDefinition_t, unsigned short>::Node_t, unsigned short>, unsigned short> >::RotateLeft(unsigned short)
 T CUtlRBTree<CUtlMap<unsigned char, CWarDefinition::CWarSideDefinition_t, unsigned short>::Node_t, unsigned short, CUtlMap<unsigned char, CWarDefinition::CWarSideDefinition_t, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<unsigned char, CWarDefinition::CWarSideDefinition_t, unsigned short>::Node_t, unsigned short>, unsigned short> >::RotateRight(unsigned short)
 T CUtlRBTree<CUtlMap<unsigned char, CWarDefinition::CWarSideDefinition_t, unsigned short>::Node_t, unsigned short, CUtlMap<unsigned char, CWarDefinition::CWarSideDefinition_t, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<unsigned char, CWarDefinition::CWarSideDefinition_t, unsigned short>::Node_t, unsigned short>, unsigned short> >::~CUtlRBTree()
 T CUtlRBTree<CUtlMap<unsigned int, AchievementAward_t*, unsigned short>::Node_t, unsigned short, CUtlMap<unsigned int, AchievementAward_t*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<unsigned int, AchievementAward_t*, unsigned short>::Node_t, unsigned short>, unsigned short> >::FindInsertionPosition(CUtlMap<unsigned int, AchievementAward_t*, unsigned short>::Node_t const&, unsigned short&, bool&)
 T CUtlRBTree<CUtlMap<unsigned int, AchievementAward_t*, unsigned short>::Node_t, unsigned short, CUtlMap<unsigned int, AchievementAward_t*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<unsigned int, AchievementAward_t*, unsigned short>::Node_t, unsigned short>, unsigned short> >::Insert(CUtlMap<unsigned int, AchievementAward_t*, unsigned short>::Node_t const&)
 T CUtlRBTree<CUtlMap<unsigned int, AchievementAward_t*, unsigned short>::Node_t, unsigned short, CUtlMap<unsigned int, AchievementAward_t*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<unsigned int, AchievementAward_t*, unsigned short>::Node_t, unsigned short>, unsigned short> >::InsertRebalance(unsigned short)
 T CUtlRBTree<CUtlMap<unsigned int, AchievementAward_t*, unsigned short>::Node_t, unsigned short, CUtlMap<unsigned int, AchievementAward_t*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<unsigned int, AchievementAward_t*, unsigned short>::Node_t, unsigned short>, unsigned short> >::IsLeftChild(unsigned short) const
 T CUtlRBTree<CUtlMap<unsigned int, AchievementAward_t*, unsigned short>::Node_t, unsigned short, CUtlMap<unsigned int, AchievementAward_t*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<unsigned int, AchievementAward_t*, unsigned short>::Node_t, unsigned short>, unsigned short> >::IsRightChild(unsigned short) const
 T CUtlRBTree<CUtlMap<unsigned int, AchievementAward_t*, unsigned short>::Node_t, unsigned short, CUtlMap<unsigned int, AchievementAward_t*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<unsigned int, AchievementAward_t*, unsigned short>::Node_t, unsigned short>, unsigned short> >::NewNode()
 T CUtlRBTree<CUtlMap<unsigned int, AchievementAward_t*, unsigned short>::Node_t, unsigned short, CUtlMap<unsigned int, AchievementAward_t*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<unsigned int, AchievementAward_t*, unsigned short>::Node_t, unsigned short>, unsigned short> >::RemoveAll()
 T CUtlRBTree<CUtlMap<unsigned int, AchievementAward_t*, unsigned short>::Node_t, unsigned short, CUtlMap<unsigned int, AchievementAward_t*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<unsigned int, AchievementAward_t*, unsigned short>::Node_t, unsigned short>, unsigned short> >::RotateLeft(unsigned short)
 T CUtlRBTree<CUtlMap<unsigned int, AchievementAward_t*, unsigned short>::Node_t, unsigned short, CUtlMap<unsigned int, AchievementAward_t*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<unsigned int, AchievementAward_t*, unsigned short>::Node_t, unsigned short>, unsigned short> >::RotateRight(unsigned short)
 T CUtlRBTree<CUtlMap<unsigned int, AchievementAward_t*, unsigned short>::Node_t, unsigned short, CUtlMap<unsigned int, AchievementAward_t*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<unsigned int, AchievementAward_t*, unsigned short>::Node_t, unsigned short>, unsigned short> >::~CUtlRBTree()
 T CUtlRBTree<CUtlMap<unsigned int, CTFQuestObjectiveConditionsDefinition*, unsigned short>::Node_t, unsigned short, CUtlMap<unsigned int, CTFQuestObjectiveConditionsDefinition*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<unsigned int, CTFQuestObjectiveConditionsDefinition*, unsigned short>::Node_t, unsigned short>, unsigned short> >::Find(CUtlMap<unsigned int, CTFQuestObjectiveConditionsDefinition*, unsigned short>::Node_t const&) const
 T CUtlRBTree<CUtlMap<unsigned int, CTFQuestObjectiveConditionsDefinition*, unsigned short>::Node_t, unsigned short, CUtlMap<unsigned int, CTFQuestObjectiveConditionsDefinition*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<unsigned int, CTFQuestObjectiveConditionsDefinition*, unsigned short>::Node_t, unsigned short>, unsigned short> >::FindInsertionPosition(CUtlMap<unsigned int, CTFQuestObjectiveConditionsDefinition*, unsigned short>::Node_t const&, unsigned short&, bool&)
 T CUtlRBTree<CUtlMap<unsigned int, CTFQuestObjectiveConditionsDefinition*, unsigned short>::Node_t, unsigned short, CUtlMap<unsigned int, CTFQuestObjectiveConditionsDefinition*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<unsigned int, CTFQuestObjectiveConditionsDefinition*, unsigned short>::Node_t, unsigned short>, unsigned short> >::Insert(CUtlMap<unsigned int, CTFQuestObjectiveConditionsDefinition*, unsigned short>::Node_t const&)
 T CUtlRBTree<CUtlMap<unsigned int, CTFQuestObjectiveConditionsDefinition*, unsigned short>::Node_t, unsigned short, CUtlMap<unsigned int, CTFQuestObjectiveConditionsDefinition*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<unsigned int, CTFQuestObjectiveConditionsDefinition*, unsigned short>::Node_t, unsigned short>, unsigned short> >::InsertRebalance(unsigned short)
 T CUtlRBTree<CUtlMap<unsigned int, CTFQuestObjectiveConditionsDefinition*, unsigned short>::Node_t, unsigned short, CUtlMap<unsigned int, CTFQuestObjectiveConditionsDefinition*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<unsigned int, CTFQuestObjectiveConditionsDefinition*, unsigned short>::Node_t, unsigned short>, unsigned short> >::IsLeftChild(unsigned short) const
 T CUtlRBTree<CUtlMap<unsigned int, CTFQuestObjectiveConditionsDefinition*, unsigned short>::Node_t, unsigned short, CUtlMap<unsigned int, CTFQuestObjectiveConditionsDefinition*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<unsigned int, CTFQuestObjectiveConditionsDefinition*, unsigned short>::Node_t, unsigned short>, unsigned short> >::IsRightChild(unsigned short) const
 T CUtlRBTree<CUtlMap<unsigned int, CTFQuestObjectiveConditionsDefinition*, unsigned short>::Node_t, unsigned short, CUtlMap<unsigned int, CTFQuestObjectiveConditionsDefinition*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<unsigned int, CTFQuestObjectiveConditionsDefinition*, unsigned short>::Node_t, unsigned short>, unsigned short> >::NewNode()
 T CUtlRBTree<CUtlMap<unsigned int, CTFQuestObjectiveConditionsDefinition*, unsigned short>::Node_t, unsigned short, CUtlMap<unsigned int, CTFQuestObjectiveConditionsDefinition*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<unsigned int, CTFQuestObjectiveConditionsDefinition*, unsigned short>::Node_t, unsigned short>, unsigned short> >::RemoveAll()
 T CUtlRBTree<CUtlMap<unsigned int, CTFQuestObjectiveConditionsDefinition*, unsigned short>::Node_t, unsigned short, CUtlMap<unsigned int, CTFQuestObjectiveConditionsDefinition*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<unsigned int, CTFQuestObjectiveConditionsDefinition*, unsigned short>::Node_t, unsigned short>, unsigned short> >::RotateLeft(unsigned short)
 T CUtlRBTree<CUtlMap<unsigned int, CTFQuestObjectiveConditionsDefinition*, unsigned short>::Node_t, unsigned short, CUtlMap<unsigned int, CTFQuestObjectiveConditionsDefinition*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<unsigned int, CTFQuestObjectiveConditionsDefinition*, unsigned short>::Node_t, unsigned short>, unsigned short> >::RotateRight(unsigned short)
 T CUtlRBTree<CUtlMap<unsigned int, CTFQuestObjectiveConditionsDefinition*, unsigned short>::Node_t, unsigned short, CUtlMap<unsigned int, CTFQuestObjectiveConditionsDefinition*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<unsigned int, CTFQuestObjectiveConditionsDefinition*, unsigned short>::Node_t, unsigned short>, unsigned short> >::~CUtlRBTree()
 T CUtlRBTree<CUtlMap<unsigned int, GCSDK::JobStatsBucket_t, int>::Node_t, int, CUtlMap<unsigned int, GCSDK::JobStatsBucket_t, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<unsigned int, GCSDK::JobStatsBucket_t, int>::Node_t, int>, int> >::Find(CUtlMap<unsigned int, GCSDK::JobStatsBucket_t, int>::Node_t const&) const
 T CUtlRBTree<CUtlMap<unsigned int, GCSDK::JobStatsBucket_t, int>::Node_t, int, CUtlMap<unsigned int, GCSDK::JobStatsBucket_t, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<unsigned int, GCSDK::JobStatsBucket_t, int>::Node_t, int>, int> >::FindInsertionPosition(CUtlMap<unsigned int, GCSDK::JobStatsBucket_t, int>::Node_t const&, int&, bool&)
 T CUtlRBTree<CUtlMap<unsigned int, GCSDK::JobStatsBucket_t, int>::Node_t, int, CUtlMap<unsigned int, GCSDK::JobStatsBucket_t, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<unsigned int, GCSDK::JobStatsBucket_t, int>::Node_t, int>, int> >::Insert(CUtlMap<unsigned int, GCSDK::JobStatsBucket_t, int>::Node_t const&)
 T CUtlRBTree<CUtlMap<unsigned int, GCSDK::JobStatsBucket_t, int>::Node_t, int, CUtlMap<unsigned int, GCSDK::JobStatsBucket_t, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<unsigned int, GCSDK::JobStatsBucket_t, int>::Node_t, int>, int> >::InsertRebalance(int)
 T CUtlRBTree<CUtlMap<unsigned int, GCSDK::JobStatsBucket_t, int>::Node_t, int, CUtlMap<unsigned int, GCSDK::JobStatsBucket_t, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<unsigned int, GCSDK::JobStatsBucket_t, int>::Node_t, int>, int> >::IsLeftChild(int) const
 T CUtlRBTree<CUtlMap<unsigned int, GCSDK::JobStatsBucket_t, int>::Node_t, int, CUtlMap<unsigned int, GCSDK::JobStatsBucket_t, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<unsigned int, GCSDK::JobStatsBucket_t, int>::Node_t, int>, int> >::IsRightChild(int) const
 T CUtlRBTree<CUtlMap<unsigned int, GCSDK::JobStatsBucket_t, int>::Node_t, int, CUtlMap<unsigned int, GCSDK::JobStatsBucket_t, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<unsigned int, GCSDK::JobStatsBucket_t, int>::Node_t, int>, int> >::NewNode()
 T CUtlRBTree<CUtlMap<unsigned int, GCSDK::JobStatsBucket_t, int>::Node_t, int, CUtlMap<unsigned int, GCSDK::JobStatsBucket_t, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<unsigned int, GCSDK::JobStatsBucket_t, int>::Node_t, int>, int> >::RemoveAll()
 T CUtlRBTree<CUtlMap<unsigned int, GCSDK::JobStatsBucket_t, int>::Node_t, int, CUtlMap<unsigned int, GCSDK::JobStatsBucket_t, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<unsigned int, GCSDK::JobStatsBucket_t, int>::Node_t, int>, int> >::RotateLeft(int)
 T CUtlRBTree<CUtlMap<unsigned int, GCSDK::JobStatsBucket_t, int>::Node_t, int, CUtlMap<unsigned int, GCSDK::JobStatsBucket_t, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<unsigned int, GCSDK::JobStatsBucket_t, int>::Node_t, int>, int> >::RotateRight(int)
 T CUtlRBTree<CUtlMap<unsigned int, GCSDK::JobStatsBucket_t, int>::Node_t, int, CUtlMap<unsigned int, GCSDK::JobStatsBucket_t, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<unsigned int, GCSDK::JobStatsBucket_t, int>::Node_t, int>, int> >::~CUtlRBTree()
 T CUtlRBTree<CUtlMap<unsigned int, int, int>::Node_t, int, CUtlMap<unsigned int, int, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<unsigned int, int, int>::Node_t, int>, int> >::Find(CUtlMap<unsigned int, int, int>::Node_t const&) const
 T CUtlRBTree<CUtlMap<unsigned int, int, int>::Node_t, int, CUtlMap<unsigned int, int, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<unsigned int, int, int>::Node_t, int>, int> >::FindInsertionPosition(CUtlMap<unsigned int, int, int>::Node_t const&, int&, bool&)
 T CUtlRBTree<CUtlMap<unsigned int, int, int>::Node_t, int, CUtlMap<unsigned int, int, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<unsigned int, int, int>::Node_t, int>, int> >::Insert(CUtlMap<unsigned int, int, int>::Node_t const&)
 T CUtlRBTree<CUtlMap<unsigned int, int, int>::Node_t, int, CUtlMap<unsigned int, int, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<unsigned int, int, int>::Node_t, int>, int> >::InsertRebalance(int)
 T CUtlRBTree<CUtlMap<unsigned int, int, int>::Node_t, int, CUtlMap<unsigned int, int, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<unsigned int, int, int>::Node_t, int>, int> >::IsLeftChild(int) const
 T CUtlRBTree<CUtlMap<unsigned int, int, int>::Node_t, int, CUtlMap<unsigned int, int, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<unsigned int, int, int>::Node_t, int>, int> >::IsRightChild(int) const
 T CUtlRBTree<CUtlMap<unsigned int, int, int>::Node_t, int, CUtlMap<unsigned int, int, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<unsigned int, int, int>::Node_t, int>, int> >::NewNode()
 T CUtlRBTree<CUtlMap<unsigned int, int, int>::Node_t, int, CUtlMap<unsigned int, int, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<unsigned int, int, int>::Node_t, int>, int> >::RemoveAll()
 T CUtlRBTree<CUtlMap<unsigned int, int, int>::Node_t, int, CUtlMap<unsigned int, int, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<unsigned int, int, int>::Node_t, int>, int> >::RotateLeft(int)
 T CUtlRBTree<CUtlMap<unsigned int, int, int>::Node_t, int, CUtlMap<unsigned int, int, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<unsigned int, int, int>::Node_t, int>, int> >::RotateRight(int)
 T CUtlRBTree<CUtlMap<unsigned int, int, int>::Node_t, int, CUtlMap<unsigned int, int, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<unsigned int, int, int>::Node_t, int>, int> >::~CUtlRBTree()
 T CUtlRBTree<CUtlMap<unsigned int, kill_eater_score_type_t, unsigned short>::Node_t, unsigned short, CUtlMap<unsigned int, kill_eater_score_type_t, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<unsigned int, kill_eater_score_type_t, unsigned short>::Node_t, unsigned short>, unsigned short> >::Find(CUtlMap<unsigned int, kill_eater_score_type_t, unsigned short>::Node_t const&) const
 T CUtlRBTree<CUtlMap<unsigned int, kill_eater_score_type_t, unsigned short>::Node_t, unsigned short, CUtlMap<unsigned int, kill_eater_score_type_t, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<unsigned int, kill_eater_score_type_t, unsigned short>::Node_t, unsigned short>, unsigned short> >::FindInsertionPosition(CUtlMap<unsigned int, kill_eater_score_type_t, unsigned short>::Node_t const&, unsigned short&, bool&)
 T CUtlRBTree<CUtlMap<unsigned int, kill_eater_score_type_t, unsigned short>::Node_t, unsigned short, CUtlMap<unsigned int, kill_eater_score_type_t, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<unsigned int, kill_eater_score_type_t, unsigned short>::Node_t, unsigned short>, unsigned short> >::Insert(CUtlMap<unsigned int, kill_eater_score_type_t, unsigned short>::Node_t const&)
 T CUtlRBTree<CUtlMap<unsigned int, kill_eater_score_type_t, unsigned short>::Node_t, unsigned short, CUtlMap<unsigned int, kill_eater_score_type_t, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<unsigned int, kill_eater_score_type_t, unsigned short>::Node_t, unsigned short>, unsigned short> >::InsertRebalance(unsigned short)
 T CUtlRBTree<CUtlMap<unsigned int, kill_eater_score_type_t, unsigned short>::Node_t, unsigned short, CUtlMap<unsigned int, kill_eater_score_type_t, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<unsigned int, kill_eater_score_type_t, unsigned short>::Node_t, unsigned short>, unsigned short> >::IsLeftChild(unsigned short) const
 T CUtlRBTree<CUtlMap<unsigned int, kill_eater_score_type_t, unsigned short>::Node_t, unsigned short, CUtlMap<unsigned int, kill_eater_score_type_t, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<unsigned int, kill_eater_score_type_t, unsigned short>::Node_t, unsigned short>, unsigned short> >::IsRightChild(unsigned short) const
 T CUtlRBTree<CUtlMap<unsigned int, kill_eater_score_type_t, unsigned short>::Node_t, unsigned short, CUtlMap<unsigned int, kill_eater_score_type_t, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<unsigned int, kill_eater_score_type_t, unsigned short>::Node_t, unsigned short>, unsigned short> >::NewNode()
 T CUtlRBTree<CUtlMap<unsigned int, kill_eater_score_type_t, unsigned short>::Node_t, unsigned short, CUtlMap<unsigned int, kill_eater_score_type_t, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<unsigned int, kill_eater_score_type_t, unsigned short>::Node_t, unsigned short>, unsigned short> >::RemoveAll()
 T CUtlRBTree<CUtlMap<unsigned int, kill_eater_score_type_t, unsigned short>::Node_t, unsigned short, CUtlMap<unsigned int, kill_eater_score_type_t, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<unsigned int, kill_eater_score_type_t, unsigned short>::Node_t, unsigned short>, unsigned short> >::RotateLeft(unsigned short)
 T CUtlRBTree<CUtlMap<unsigned int, kill_eater_score_type_t, unsigned short>::Node_t, unsigned short, CUtlMap<unsigned int, kill_eater_score_type_t, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<unsigned int, kill_eater_score_type_t, unsigned short>::Node_t, unsigned short>, unsigned short> >::RotateRight(unsigned short)
 T CUtlRBTree<CUtlMap<unsigned int, kill_eater_score_type_t, unsigned short>::Node_t, unsigned short, CUtlMap<unsigned int, kill_eater_score_type_t, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<unsigned int, kill_eater_score_type_t, unsigned short>::Node_t, unsigned short>, unsigned short> >::~CUtlRBTree()
 T CUtlRBTree<CUtlMap<unsigned int, unsigned int, unsigned short>::Node_t, unsigned short, CUtlMap<unsigned int, unsigned int, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<unsigned int, unsigned int, unsigned short>::Node_t, unsigned short>, unsigned short> >::Find(CUtlMap<unsigned int, unsigned int, unsigned short>::Node_t const&) const
 T CUtlRBTree<CUtlMap<unsigned int, unsigned int, unsigned short>::Node_t, unsigned short, CUtlMap<unsigned int, unsigned int, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<unsigned int, unsigned int, unsigned short>::Node_t, unsigned short>, unsigned short> >::FindInsertionPosition(CUtlMap<unsigned int, unsigned int, unsigned short>::Node_t const&, unsigned short&, bool&)
 T CUtlRBTree<CUtlMap<unsigned int, unsigned int, unsigned short>::Node_t, unsigned short, CUtlMap<unsigned int, unsigned int, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<unsigned int, unsigned int, unsigned short>::Node_t, unsigned short>, unsigned short> >::Insert(CUtlMap<unsigned int, unsigned int, unsigned short>::Node_t const&)
 T CUtlRBTree<CUtlMap<unsigned int, unsigned int, unsigned short>::Node_t, unsigned short, CUtlMap<unsigned int, unsigned int, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<unsigned int, unsigned int, unsigned short>::Node_t, unsigned short>, unsigned short> >::InsertRebalance(unsigned short)
 T CUtlRBTree<CUtlMap<unsigned int, unsigned int, unsigned short>::Node_t, unsigned short, CUtlMap<unsigned int, unsigned int, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<unsigned int, unsigned int, unsigned short>::Node_t, unsigned short>, unsigned short> >::IsLeftChild(unsigned short) const
 T CUtlRBTree<CUtlMap<unsigned int, unsigned int, unsigned short>::Node_t, unsigned short, CUtlMap<unsigned int, unsigned int, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<unsigned int, unsigned int, unsigned short>::Node_t, unsigned short>, unsigned short> >::IsRightChild(unsigned short) const
 T CUtlRBTree<CUtlMap<unsigned int, unsigned int, unsigned short>::Node_t, unsigned short, CUtlMap<unsigned int, unsigned int, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<unsigned int, unsigned int, unsigned short>::Node_t, unsigned short>, unsigned short> >::NewNode()
 T CUtlRBTree<CUtlMap<unsigned int, unsigned int, unsigned short>::Node_t, unsigned short, CUtlMap<unsigned int, unsigned int, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<unsigned int, unsigned int, unsigned short>::Node_t, unsigned short>, unsigned short> >::RemoveAll()
 T CUtlRBTree<CUtlMap<unsigned int, unsigned int, unsigned short>::Node_t, unsigned short, CUtlMap<unsigned int, unsigned int, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<unsigned int, unsigned int, unsigned short>::Node_t, unsigned short>, unsigned short> >::RemoveRebalance(unsigned short)
 T CUtlRBTree<CUtlMap<unsigned int, unsigned int, unsigned short>::Node_t, unsigned short, CUtlMap<unsigned int, unsigned int, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<unsigned int, unsigned int, unsigned short>::Node_t, unsigned short>, unsigned short> >::RotateLeft(unsigned short)
 T CUtlRBTree<CUtlMap<unsigned int, unsigned int, unsigned short>::Node_t, unsigned short, CUtlMap<unsigned int, unsigned int, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<unsigned int, unsigned int, unsigned short>::Node_t, unsigned short>, unsigned short> >::RotateRight(unsigned short)
 T CUtlRBTree<CUtlMap<unsigned int, unsigned int, unsigned short>::Node_t, unsigned short, CUtlMap<unsigned int, unsigned int, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<unsigned int, unsigned int, unsigned short>::Node_t, unsigned short>, unsigned short> >::Unlink(unsigned short)
 T CUtlRBTree<CUtlMap<unsigned int, unsigned int, unsigned short>::Node_t, unsigned short, CUtlMap<unsigned int, unsigned int, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<unsigned int, unsigned int, unsigned short>::Node_t, unsigned short>, unsigned short> >::~CUtlRBTree()
 T CUtlRBTree<CUtlMap<unsigned long long, CBaseSOTracker*, unsigned short>::Node_t, unsigned short, CUtlMap<unsigned long long, CBaseSOTracker*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<unsigned long long, CBaseSOTracker*, unsigned short>::Node_t, unsigned short>, unsigned short> >::Find(CUtlMap<unsigned long long, CBaseSOTracker*, unsigned short>::Node_t const&) const
 T CUtlRBTree<CUtlMap<unsigned long long, CBaseSOTracker*, unsigned short>::Node_t, unsigned short, CUtlMap<unsigned long long, CBaseSOTracker*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<unsigned long long, CBaseSOTracker*, unsigned short>::Node_t, unsigned short>, unsigned short> >::FindInsertionPosition(CUtlMap<unsigned long long, CBaseSOTracker*, unsigned short>::Node_t const&, unsigned short&, bool&)
 T CUtlRBTree<CUtlMap<unsigned long long, CBaseSOTracker*, unsigned short>::Node_t, unsigned short, CUtlMap<unsigned long long, CBaseSOTracker*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<unsigned long long, CBaseSOTracker*, unsigned short>::Node_t, unsigned short>, unsigned short> >::FirstInorder() const
 T CUtlRBTree<CUtlMap<unsigned long long, CBaseSOTracker*, unsigned short>::Node_t, unsigned short, CUtlMap<unsigned long long, CBaseSOTracker*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<unsigned long long, CBaseSOTracker*, unsigned short>::Node_t, unsigned short>, unsigned short> >::Insert(CUtlMap<unsigned long long, CBaseSOTracker*, unsigned short>::Node_t const&)
 T CUtlRBTree<CUtlMap<unsigned long long, CBaseSOTracker*, unsigned short>::Node_t, unsigned short, CUtlMap<unsigned long long, CBaseSOTracker*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<unsigned long long, CBaseSOTracker*, unsigned short>::Node_t, unsigned short>, unsigned short> >::InsertRebalance(unsigned short)
 T CUtlRBTree<CUtlMap<unsigned long long, CBaseSOTracker*, unsigned short>::Node_t, unsigned short, CUtlMap<unsigned long long, CBaseSOTracker*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<unsigned long long, CBaseSOTracker*, unsigned short>::Node_t, unsigned short>, unsigned short> >::IsLeftChild(unsigned short) const
 T CUtlRBTree<CUtlMap<unsigned long long, CBaseSOTracker*, unsigned short>::Node_t, unsigned short, CUtlMap<unsigned long long, CBaseSOTracker*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<unsigned long long, CBaseSOTracker*, unsigned short>::Node_t, unsigned short>, unsigned short> >::IsRightChild(unsigned short) const
 T CUtlRBTree<CUtlMap<unsigned long long, CBaseSOTracker*, unsigned short>::Node_t, unsigned short, CUtlMap<unsigned long long, CBaseSOTracker*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<unsigned long long, CBaseSOTracker*, unsigned short>::Node_t, unsigned short>, unsigned short> >::NewNode()
 T CUtlRBTree<CUtlMap<unsigned long long, CBaseSOTracker*, unsigned short>::Node_t, unsigned short, CUtlMap<unsigned long long, CBaseSOTracker*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<unsigned long long, CBaseSOTracker*, unsigned short>::Node_t, unsigned short>, unsigned short> >::NextInorder(unsigned short) const
 T CUtlRBTree<CUtlMap<unsigned long long, CBaseSOTracker*, unsigned short>::Node_t, unsigned short, CUtlMap<unsigned long long, CBaseSOTracker*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<unsigned long long, CBaseSOTracker*, unsigned short>::Node_t, unsigned short>, unsigned short> >::RemoveAll()
 T CUtlRBTree<CUtlMap<unsigned long long, CBaseSOTracker*, unsigned short>::Node_t, unsigned short, CUtlMap<unsigned long long, CBaseSOTracker*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<unsigned long long, CBaseSOTracker*, unsigned short>::Node_t, unsigned short>, unsigned short> >::RemoveRebalance(unsigned short)
 T CUtlRBTree<CUtlMap<unsigned long long, CBaseSOTracker*, unsigned short>::Node_t, unsigned short, CUtlMap<unsigned long long, CBaseSOTracker*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<unsigned long long, CBaseSOTracker*, unsigned short>::Node_t, unsigned short>, unsigned short> >::RotateLeft(unsigned short)
 T CUtlRBTree<CUtlMap<unsigned long long, CBaseSOTracker*, unsigned short>::Node_t, unsigned short, CUtlMap<unsigned long long, CBaseSOTracker*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<unsigned long long, CBaseSOTracker*, unsigned short>::Node_t, unsigned short>, unsigned short> >::RotateRight(unsigned short)
 T CUtlRBTree<CUtlMap<unsigned long long, CBaseSOTracker*, unsigned short>::Node_t, unsigned short, CUtlMap<unsigned long long, CBaseSOTracker*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<unsigned long long, CBaseSOTracker*, unsigned short>::Node_t, unsigned short>, unsigned short> >::Unlink(unsigned short)
 T CUtlRBTree<CUtlMap<unsigned long long, CBaseSOTracker*, unsigned short>::Node_t, unsigned short, CUtlMap<unsigned long long, CBaseSOTracker*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<unsigned long long, CBaseSOTracker*, unsigned short>::Node_t, unsigned short>, unsigned short> >::~CUtlRBTree()
 T CUtlRBTree<CUtlMap<unsigned long long, CPlayerWaveSpendingStats, unsigned short>::Node_t, unsigned short, CUtlMap<unsigned long long, CPlayerWaveSpendingStats, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<unsigned long long, CPlayerWaveSpendingStats, unsigned short>::Node_t, unsigned short>, unsigned short> >::Find(CUtlMap<unsigned long long, CPlayerWaveSpendingStats, unsigned short>::Node_t const&) const
 T CUtlRBTree<CUtlMap<unsigned long long, CPlayerWaveSpendingStats, unsigned short>::Node_t, unsigned short, CUtlMap<unsigned long long, CPlayerWaveSpendingStats, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<unsigned long long, CPlayerWaveSpendingStats, unsigned short>::Node_t, unsigned short>, unsigned short> >::FindInsertionPosition(CUtlMap<unsigned long long, CPlayerWaveSpendingStats, unsigned short>::Node_t const&, unsigned short&, bool&)
 T CUtlRBTree<CUtlMap<unsigned long long, CPlayerWaveSpendingStats, unsigned short>::Node_t, unsigned short, CUtlMap<unsigned long long, CPlayerWaveSpendingStats, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<unsigned long long, CPlayerWaveSpendingStats, unsigned short>::Node_t, unsigned short>, unsigned short> >::Insert(CUtlMap<unsigned long long, CPlayerWaveSpendingStats, unsigned short>::Node_t const&)
 T CUtlRBTree<CUtlMap<unsigned long long, CPlayerWaveSpendingStats, unsigned short>::Node_t, unsigned short, CUtlMap<unsigned long long, CPlayerWaveSpendingStats, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<unsigned long long, CPlayerWaveSpendingStats, unsigned short>::Node_t, unsigned short>, unsigned short> >::InsertRebalance(unsigned short)
 T CUtlRBTree<CUtlMap<unsigned long long, CPlayerWaveSpendingStats, unsigned short>::Node_t, unsigned short, CUtlMap<unsigned long long, CPlayerWaveSpendingStats, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<unsigned long long, CPlayerWaveSpendingStats, unsigned short>::Node_t, unsigned short>, unsigned short> >::IsLeftChild(unsigned short) const
 T CUtlRBTree<CUtlMap<unsigned long long, CPlayerWaveSpendingStats, unsigned short>::Node_t, unsigned short, CUtlMap<unsigned long long, CPlayerWaveSpendingStats, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<unsigned long long, CPlayerWaveSpendingStats, unsigned short>::Node_t, unsigned short>, unsigned short> >::IsRightChild(unsigned short) const
 T CUtlRBTree<CUtlMap<unsigned long long, CPlayerWaveSpendingStats, unsigned short>::Node_t, unsigned short, CUtlMap<unsigned long long, CPlayerWaveSpendingStats, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<unsigned long long, CPlayerWaveSpendingStats, unsigned short>::Node_t, unsigned short>, unsigned short> >::NewNode()
 T CUtlRBTree<CUtlMap<unsigned long long, CPlayerWaveSpendingStats, unsigned short>::Node_t, unsigned short, CUtlMap<unsigned long long, CPlayerWaveSpendingStats, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<unsigned long long, CPlayerWaveSpendingStats, unsigned short>::Node_t, unsigned short>, unsigned short> >::RemoveAll()
 T CUtlRBTree<CUtlMap<unsigned long long, CPlayerWaveSpendingStats, unsigned short>::Node_t, unsigned short, CUtlMap<unsigned long long, CPlayerWaveSpendingStats, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<unsigned long long, CPlayerWaveSpendingStats, unsigned short>::Node_t, unsigned short>, unsigned short> >::RotateLeft(unsigned short)
 T CUtlRBTree<CUtlMap<unsigned long long, CPlayerWaveSpendingStats, unsigned short>::Node_t, unsigned short, CUtlMap<unsigned long long, CPlayerWaveSpendingStats, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<unsigned long long, CPlayerWaveSpendingStats, unsigned short>::Node_t, unsigned short>, unsigned short> >::RotateRight(unsigned short)
 T CUtlRBTree<CUtlMap<unsigned long long, CPlayerWaveSpendingStats, unsigned short>::Node_t, unsigned short, CUtlMap<unsigned long long, CPlayerWaveSpendingStats, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<unsigned long long, CPlayerWaveSpendingStats, unsigned short>::Node_t, unsigned short>, unsigned short> >::~CUtlRBTree()
 T CUtlRBTree<CUtlMap<unsigned long long, CTFWorkshopMap*, unsigned short>::Node_t, unsigned short, CUtlMap<unsigned long long, CTFWorkshopMap*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<unsigned long long, CTFWorkshopMap*, unsigned short>::Node_t, unsigned short>, unsigned short> >::Find(CUtlMap<unsigned long long, CTFWorkshopMap*, unsigned short>::Node_t const&) const
 T CUtlRBTree<CUtlMap<unsigned long long, CTFWorkshopMap*, unsigned short>::Node_t, unsigned short, CUtlMap<unsigned long long, CTFWorkshopMap*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<unsigned long long, CTFWorkshopMap*, unsigned short>::Node_t, unsigned short>, unsigned short> >::FindInsertionPosition(CUtlMap<unsigned long long, CTFWorkshopMap*, unsigned short>::Node_t const&, unsigned short&, bool&)
 T CUtlRBTree<CUtlMap<unsigned long long, CTFWorkshopMap*, unsigned short>::Node_t, unsigned short, CUtlMap<unsigned long long, CTFWorkshopMap*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<unsigned long long, CTFWorkshopMap*, unsigned short>::Node_t, unsigned short>, unsigned short> >::FirstInorder() const
 T CUtlRBTree<CUtlMap<unsigned long long, CTFWorkshopMap*, unsigned short>::Node_t, unsigned short, CUtlMap<unsigned long long, CTFWorkshopMap*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<unsigned long long, CTFWorkshopMap*, unsigned short>::Node_t, unsigned short>, unsigned short> >::Insert(CUtlMap<unsigned long long, CTFWorkshopMap*, unsigned short>::Node_t const&)
 T CUtlRBTree<CUtlMap<unsigned long long, CTFWorkshopMap*, unsigned short>::Node_t, unsigned short, CUtlMap<unsigned long long, CTFWorkshopMap*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<unsigned long long, CTFWorkshopMap*, unsigned short>::Node_t, unsigned short>, unsigned short> >::InsertRebalance(unsigned short)
 T CUtlRBTree<CUtlMap<unsigned long long, CTFWorkshopMap*, unsigned short>::Node_t, unsigned short, CUtlMap<unsigned long long, CTFWorkshopMap*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<unsigned long long, CTFWorkshopMap*, unsigned short>::Node_t, unsigned short>, unsigned short> >::IsLeftChild(unsigned short) const
 T CUtlRBTree<CUtlMap<unsigned long long, CTFWorkshopMap*, unsigned short>::Node_t, unsigned short, CUtlMap<unsigned long long, CTFWorkshopMap*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<unsigned long long, CTFWorkshopMap*, unsigned short>::Node_t, unsigned short>, unsigned short> >::IsRightChild(unsigned short) const
 T CUtlRBTree<CUtlMap<unsigned long long, CTFWorkshopMap*, unsigned short>::Node_t, unsigned short, CUtlMap<unsigned long long, CTFWorkshopMap*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<unsigned long long, CTFWorkshopMap*, unsigned short>::Node_t, unsigned short>, unsigned short> >::NewNode()
 T CUtlRBTree<CUtlMap<unsigned long long, CTFWorkshopMap*, unsigned short>::Node_t, unsigned short, CUtlMap<unsigned long long, CTFWorkshopMap*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<unsigned long long, CTFWorkshopMap*, unsigned short>::Node_t, unsigned short>, unsigned short> >::NextInorder(unsigned short) const
 T CUtlRBTree<CUtlMap<unsigned long long, CTFWorkshopMap*, unsigned short>::Node_t, unsigned short, CUtlMap<unsigned long long, CTFWorkshopMap*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<unsigned long long, CTFWorkshopMap*, unsigned short>::Node_t, unsigned short>, unsigned short> >::RemoveAll()
 T CUtlRBTree<CUtlMap<unsigned long long, CTFWorkshopMap*, unsigned short>::Node_t, unsigned short, CUtlMap<unsigned long long, CTFWorkshopMap*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<unsigned long long, CTFWorkshopMap*, unsigned short>::Node_t, unsigned short>, unsigned short> >::RotateLeft(unsigned short)
 T CUtlRBTree<CUtlMap<unsigned long long, CTFWorkshopMap*, unsigned short>::Node_t, unsigned short, CUtlMap<unsigned long long, CTFWorkshopMap*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<unsigned long long, CTFWorkshopMap*, unsigned short>::Node_t, unsigned short>, unsigned short> >::RotateRight(unsigned short)
 T CUtlRBTree<CUtlMap<unsigned long long, CTFWorkshopMap*, unsigned short>::Node_t, unsigned short, CUtlMap<unsigned long long, CTFWorkshopMap*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<unsigned long long, CTFWorkshopMap*, unsigned short>::Node_t, unsigned short>, unsigned short> >::~CUtlRBTree()
 T CUtlRBTree<CUtlMap<unsigned long long, CommitRecord_t*, unsigned short>::Node_t, unsigned short, CUtlMap<unsigned long long, CommitRecord_t*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<unsigned long long, CommitRecord_t*, unsigned short>::Node_t, unsigned short>, unsigned short> >::Find(CUtlMap<unsigned long long, CommitRecord_t*, unsigned short>::Node_t const&) const
 T CUtlRBTree<CUtlMap<unsigned long long, CommitRecord_t*, unsigned short>::Node_t, unsigned short, CUtlMap<unsigned long long, CommitRecord_t*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<unsigned long long, CommitRecord_t*, unsigned short>::Node_t, unsigned short>, unsigned short> >::FindInsertionPosition(CUtlMap<unsigned long long, CommitRecord_t*, unsigned short>::Node_t const&, unsigned short&, bool&)
 T CUtlRBTree<CUtlMap<unsigned long long, CommitRecord_t*, unsigned short>::Node_t, unsigned short, CUtlMap<unsigned long long, CommitRecord_t*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<unsigned long long, CommitRecord_t*, unsigned short>::Node_t, unsigned short>, unsigned short> >::FirstInorder() const
 T CUtlRBTree<CUtlMap<unsigned long long, CommitRecord_t*, unsigned short>::Node_t, unsigned short, CUtlMap<unsigned long long, CommitRecord_t*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<unsigned long long, CommitRecord_t*, unsigned short>::Node_t, unsigned short>, unsigned short> >::Insert(CUtlMap<unsigned long long, CommitRecord_t*, unsigned short>::Node_t const&)
 T CUtlRBTree<CUtlMap<unsigned long long, CommitRecord_t*, unsigned short>::Node_t, unsigned short, CUtlMap<unsigned long long, CommitRecord_t*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<unsigned long long, CommitRecord_t*, unsigned short>::Node_t, unsigned short>, unsigned short> >::InsertRebalance(unsigned short)
 T CUtlRBTree<CUtlMap<unsigned long long, CommitRecord_t*, unsigned short>::Node_t, unsigned short, CUtlMap<unsigned long long, CommitRecord_t*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<unsigned long long, CommitRecord_t*, unsigned short>::Node_t, unsigned short>, unsigned short> >::IsLeftChild(unsigned short) const
 T CUtlRBTree<CUtlMap<unsigned long long, CommitRecord_t*, unsigned short>::Node_t, unsigned short, CUtlMap<unsigned long long, CommitRecord_t*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<unsigned long long, CommitRecord_t*, unsigned short>::Node_t, unsigned short>, unsigned short> >::IsRightChild(unsigned short) const
 T CUtlRBTree<CUtlMap<unsigned long long, CommitRecord_t*, unsigned short>::Node_t, unsigned short, CUtlMap<unsigned long long, CommitRecord_t*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<unsigned long long, CommitRecord_t*, unsigned short>::Node_t, unsigned short>, unsigned short> >::NewNode()
 T CUtlRBTree<CUtlMap<unsigned long long, CommitRecord_t*, unsigned short>::Node_t, unsigned short, CUtlMap<unsigned long long, CommitRecord_t*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<unsigned long long, CommitRecord_t*, unsigned short>::Node_t, unsigned short>, unsigned short> >::NextInorder(unsigned short) const
 T CUtlRBTree<CUtlMap<unsigned long long, CommitRecord_t*, unsigned short>::Node_t, unsigned short, CUtlMap<unsigned long long, CommitRecord_t*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<unsigned long long, CommitRecord_t*, unsigned short>::Node_t, unsigned short>, unsigned short> >::RemoveAll()
 T CUtlRBTree<CUtlMap<unsigned long long, CommitRecord_t*, unsigned short>::Node_t, unsigned short, CUtlMap<unsigned long long, CommitRecord_t*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<unsigned long long, CommitRecord_t*, unsigned short>::Node_t, unsigned short>, unsigned short> >::RemoveRebalance(unsigned short)
 T CUtlRBTree<CUtlMap<unsigned long long, CommitRecord_t*, unsigned short>::Node_t, unsigned short, CUtlMap<unsigned long long, CommitRecord_t*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<unsigned long long, CommitRecord_t*, unsigned short>::Node_t, unsigned short>, unsigned short> >::RotateLeft(unsigned short)
 T CUtlRBTree<CUtlMap<unsigned long long, CommitRecord_t*, unsigned short>::Node_t, unsigned short, CUtlMap<unsigned long long, CommitRecord_t*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<unsigned long long, CommitRecord_t*, unsigned short>::Node_t, unsigned short>, unsigned short> >::RotateRight(unsigned short)
 T CUtlRBTree<CUtlMap<unsigned long long, CommitRecord_t*, unsigned short>::Node_t, unsigned short, CUtlMap<unsigned long long, CommitRecord_t*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<unsigned long long, CommitRecord_t*, unsigned short>::Node_t, unsigned short>, unsigned short> >::Unlink(unsigned short)
 T CUtlRBTree<CUtlMap<unsigned long long, CommitRecord_t*, unsigned short>::Node_t, unsigned short, CUtlMap<unsigned long long, CommitRecord_t*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<unsigned long long, CommitRecord_t*, unsigned short>::Node_t, unsigned short>, unsigned short> >::~CUtlRBTree()
 T CUtlRBTree<CUtlMap<unsigned long long, GCSDK::CJob*, int>::Node_t, int, CUtlMap<unsigned long long, GCSDK::CJob*, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<unsigned long long, GCSDK::CJob*, int>::Node_t, int>, int> >::Find(CUtlMap<unsigned long long, GCSDK::CJob*, int>::Node_t const&) const
 T CUtlRBTree<CUtlMap<unsigned long long, GCSDK::CJob*, int>::Node_t, int, CUtlMap<unsigned long long, GCSDK::CJob*, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<unsigned long long, GCSDK::CJob*, int>::Node_t, int>, int> >::FindInsertionPosition(CUtlMap<unsigned long long, GCSDK::CJob*, int>::Node_t const&, int&, bool&)
 T CUtlRBTree<CUtlMap<unsigned long long, GCSDK::CJob*, int>::Node_t, int, CUtlMap<unsigned long long, GCSDK::CJob*, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<unsigned long long, GCSDK::CJob*, int>::Node_t, int>, int> >::Insert(CUtlMap<unsigned long long, GCSDK::CJob*, int>::Node_t const&)
 T CUtlRBTree<CUtlMap<unsigned long long, GCSDK::CJob*, int>::Node_t, int, CUtlMap<unsigned long long, GCSDK::CJob*, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<unsigned long long, GCSDK::CJob*, int>::Node_t, int>, int> >::InsertRebalance(int)
 T CUtlRBTree<CUtlMap<unsigned long long, GCSDK::CJob*, int>::Node_t, int, CUtlMap<unsigned long long, GCSDK::CJob*, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<unsigned long long, GCSDK::CJob*, int>::Node_t, int>, int> >::IsLeftChild(int) const
 T CUtlRBTree<CUtlMap<unsigned long long, GCSDK::CJob*, int>::Node_t, int, CUtlMap<unsigned long long, GCSDK::CJob*, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<unsigned long long, GCSDK::CJob*, int>::Node_t, int>, int> >::IsRightChild(int) const
 T CUtlRBTree<CUtlMap<unsigned long long, GCSDK::CJob*, int>::Node_t, int, CUtlMap<unsigned long long, GCSDK::CJob*, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<unsigned long long, GCSDK::CJob*, int>::Node_t, int>, int> >::NewNode()
 T CUtlRBTree<CUtlMap<unsigned long long, GCSDK::CJob*, int>::Node_t, int, CUtlMap<unsigned long long, GCSDK::CJob*, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<unsigned long long, GCSDK::CJob*, int>::Node_t, int>, int> >::RemoveAll()
 T CUtlRBTree<CUtlMap<unsigned long long, GCSDK::CJob*, int>::Node_t, int, CUtlMap<unsigned long long, GCSDK::CJob*, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<unsigned long long, GCSDK::CJob*, int>::Node_t, int>, int> >::RemoveRebalance(int)
 T CUtlRBTree<CUtlMap<unsigned long long, GCSDK::CJob*, int>::Node_t, int, CUtlMap<unsigned long long, GCSDK::CJob*, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<unsigned long long, GCSDK::CJob*, int>::Node_t, int>, int> >::RotateLeft(int)
 T CUtlRBTree<CUtlMap<unsigned long long, GCSDK::CJob*, int>::Node_t, int, CUtlMap<unsigned long long, GCSDK::CJob*, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<unsigned long long, GCSDK::CJob*, int>::Node_t, int>, int> >::RotateRight(int)
 T CUtlRBTree<CUtlMap<unsigned long long, GCSDK::CJob*, int>::Node_t, int, CUtlMap<unsigned long long, GCSDK::CJob*, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<unsigned long long, GCSDK::CJob*, int>::Node_t, int>, int> >::Unlink(int)
 T CUtlRBTree<CUtlMap<unsigned long long, GCSDK::CJob*, int>::Node_t, int, CUtlMap<unsigned long long, GCSDK::CJob*, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<unsigned long long, GCSDK::CJob*, int>::Node_t, int>, int> >::~CUtlRBTree()
 T CUtlRBTree<CUtlMap<unsigned long long, float, unsigned short>::Node_t, unsigned short, CUtlMap<unsigned long long, float, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<unsigned long long, float, unsigned short>::Node_t, unsigned short>, unsigned short> >::Find(CUtlMap<unsigned long long, float, unsigned short>::Node_t const&) const
 T CUtlRBTree<CUtlMap<unsigned long long, float, unsigned short>::Node_t, unsigned short, CUtlMap<unsigned long long, float, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<unsigned long long, float, unsigned short>::Node_t, unsigned short>, unsigned short> >::FindInsertionPosition(CUtlMap<unsigned long long, float, unsigned short>::Node_t const&, unsigned short&, bool&)
 T CUtlRBTree<CUtlMap<unsigned long long, float, unsigned short>::Node_t, unsigned short, CUtlMap<unsigned long long, float, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<unsigned long long, float, unsigned short>::Node_t, unsigned short>, unsigned short> >::FirstInorder() const
 T CUtlRBTree<CUtlMap<unsigned long long, float, unsigned short>::Node_t, unsigned short, CUtlMap<unsigned long long, float, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<unsigned long long, float, unsigned short>::Node_t, unsigned short>, unsigned short> >::Insert(CUtlMap<unsigned long long, float, unsigned short>::Node_t const&)
 T CUtlRBTree<CUtlMap<unsigned long long, float, unsigned short>::Node_t, unsigned short, CUtlMap<unsigned long long, float, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<unsigned long long, float, unsigned short>::Node_t, unsigned short>, unsigned short> >::InsertRebalance(unsigned short)
 T CUtlRBTree<CUtlMap<unsigned long long, float, unsigned short>::Node_t, unsigned short, CUtlMap<unsigned long long, float, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<unsigned long long, float, unsigned short>::Node_t, unsigned short>, unsigned short> >::IsLeftChild(unsigned short) const
 T CUtlRBTree<CUtlMap<unsigned long long, float, unsigned short>::Node_t, unsigned short, CUtlMap<unsigned long long, float, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<unsigned long long, float, unsigned short>::Node_t, unsigned short>, unsigned short> >::IsRightChild(unsigned short) const
 T CUtlRBTree<CUtlMap<unsigned long long, float, unsigned short>::Node_t, unsigned short, CUtlMap<unsigned long long, float, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<unsigned long long, float, unsigned short>::Node_t, unsigned short>, unsigned short> >::NewNode()
 T CUtlRBTree<CUtlMap<unsigned long long, float, unsigned short>::Node_t, unsigned short, CUtlMap<unsigned long long, float, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<unsigned long long, float, unsigned short>::Node_t, unsigned short>, unsigned short> >::NextInorder(unsigned short) const
 T CUtlRBTree<CUtlMap<unsigned long long, float, unsigned short>::Node_t, unsigned short, CUtlMap<unsigned long long, float, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<unsigned long long, float, unsigned short>::Node_t, unsigned short>, unsigned short> >::RemoveAll()
 T CUtlRBTree<CUtlMap<unsigned long long, float, unsigned short>::Node_t, unsigned short, CUtlMap<unsigned long long, float, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<unsigned long long, float, unsigned short>::Node_t, unsigned short>, unsigned short> >::RemoveRebalance(unsigned short)
 T CUtlRBTree<CUtlMap<unsigned long long, float, unsigned short>::Node_t, unsigned short, CUtlMap<unsigned long long, float, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<unsigned long long, float, unsigned short>::Node_t, unsigned short>, unsigned short> >::RotateLeft(unsigned short)
 T CUtlRBTree<CUtlMap<unsigned long long, float, unsigned short>::Node_t, unsigned short, CUtlMap<unsigned long long, float, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<unsigned long long, float, unsigned short>::Node_t, unsigned short>, unsigned short> >::RotateRight(unsigned short)
 T CUtlRBTree<CUtlMap<unsigned long long, float, unsigned short>::Node_t, unsigned short, CUtlMap<unsigned long long, float, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<unsigned long long, float, unsigned short>::Node_t, unsigned short>, unsigned short> >::Unlink(unsigned short)
 T CUtlRBTree<CUtlMap<unsigned long long, float, unsigned short>::Node_t, unsigned short, CUtlMap<unsigned long long, float, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<unsigned long long, float, unsigned short>::Node_t, unsigned short>, unsigned short> >::~CUtlRBTree()
 T CUtlRBTree<CUtlMap<unsigned long long, int, int>::Node_t, int, CUtlMap<unsigned long long, int, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<unsigned long long, int, int>::Node_t, int>, int> >::Find(CUtlMap<unsigned long long, int, int>::Node_t const&) const
 T CUtlRBTree<CUtlMap<unsigned long long, int, int>::Node_t, int, CUtlMap<unsigned long long, int, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<unsigned long long, int, int>::Node_t, int>, int> >::FindInsertionPosition(CUtlMap<unsigned long long, int, int>::Node_t const&, int&, bool&)
 T CUtlRBTree<CUtlMap<unsigned long long, int, int>::Node_t, int, CUtlMap<unsigned long long, int, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<unsigned long long, int, int>::Node_t, int>, int> >::Insert(CUtlMap<unsigned long long, int, int>::Node_t const&)
 T CUtlRBTree<CUtlMap<unsigned long long, int, int>::Node_t, int, CUtlMap<unsigned long long, int, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<unsigned long long, int, int>::Node_t, int>, int> >::InsertRebalance(int)
 T CUtlRBTree<CUtlMap<unsigned long long, int, int>::Node_t, int, CUtlMap<unsigned long long, int, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<unsigned long long, int, int>::Node_t, int>, int> >::IsLeftChild(int) const
 T CUtlRBTree<CUtlMap<unsigned long long, int, int>::Node_t, int, CUtlMap<unsigned long long, int, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<unsigned long long, int, int>::Node_t, int>, int> >::IsRightChild(int) const
 T CUtlRBTree<CUtlMap<unsigned long long, int, int>::Node_t, int, CUtlMap<unsigned long long, int, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<unsigned long long, int, int>::Node_t, int>, int> >::NewNode()
 T CUtlRBTree<CUtlMap<unsigned long long, int, int>::Node_t, int, CUtlMap<unsigned long long, int, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<unsigned long long, int, int>::Node_t, int>, int> >::RemoveAll()
 T CUtlRBTree<CUtlMap<unsigned long long, int, int>::Node_t, int, CUtlMap<unsigned long long, int, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<unsigned long long, int, int>::Node_t, int>, int> >::RemoveRebalance(int)
 T CUtlRBTree<CUtlMap<unsigned long long, int, int>::Node_t, int, CUtlMap<unsigned long long, int, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<unsigned long long, int, int>::Node_t, int>, int> >::RotateLeft(int)
 T CUtlRBTree<CUtlMap<unsigned long long, int, int>::Node_t, int, CUtlMap<unsigned long long, int, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<unsigned long long, int, int>::Node_t, int>, int> >::RotateRight(int)
 T CUtlRBTree<CUtlMap<unsigned long long, int, int>::Node_t, int, CUtlMap<unsigned long long, int, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<unsigned long long, int, int>::Node_t, int>, int> >::Unlink(int)
 T CUtlRBTree<CUtlMap<unsigned long long, int, int>::Node_t, int, CUtlMap<unsigned long long, int, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<unsigned long long, int, int>::Node_t, int>, int> >::~CUtlRBTree()
 T CUtlRBTree<CUtlMap<unsigned long long, int, unsigned short>::Node_t, unsigned short, CUtlMap<unsigned long long, int, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<unsigned long long, int, unsigned short>::Node_t, unsigned short>, unsigned short> >::Find(CUtlMap<unsigned long long, int, unsigned short>::Node_t const&) const
 T CUtlRBTree<CUtlMap<unsigned long long, int, unsigned short>::Node_t, unsigned short, CUtlMap<unsigned long long, int, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<unsigned long long, int, unsigned short>::Node_t, unsigned short>, unsigned short> >::FindInsertionPosition(CUtlMap<unsigned long long, int, unsigned short>::Node_t const&, unsigned short&, bool&)
 T CUtlRBTree<CUtlMap<unsigned long long, int, unsigned short>::Node_t, unsigned short, CUtlMap<unsigned long long, int, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<unsigned long long, int, unsigned short>::Node_t, unsigned short>, unsigned short> >::FirstInorder() const
 T CUtlRBTree<CUtlMap<unsigned long long, int, unsigned short>::Node_t, unsigned short, CUtlMap<unsigned long long, int, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<unsigned long long, int, unsigned short>::Node_t, unsigned short>, unsigned short> >::Insert(CUtlMap<unsigned long long, int, unsigned short>::Node_t const&)
 T CUtlRBTree<CUtlMap<unsigned long long, int, unsigned short>::Node_t, unsigned short, CUtlMap<unsigned long long, int, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<unsigned long long, int, unsigned short>::Node_t, unsigned short>, unsigned short> >::InsertRebalance(unsigned short)
 T CUtlRBTree<CUtlMap<unsigned long long, int, unsigned short>::Node_t, unsigned short, CUtlMap<unsigned long long, int, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<unsigned long long, int, unsigned short>::Node_t, unsigned short>, unsigned short> >::IsLeftChild(unsigned short) const
 T CUtlRBTree<CUtlMap<unsigned long long, int, unsigned short>::Node_t, unsigned short, CUtlMap<unsigned long long, int, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<unsigned long long, int, unsigned short>::Node_t, unsigned short>, unsigned short> >::IsRightChild(unsigned short) const
 T CUtlRBTree<CUtlMap<unsigned long long, int, unsigned short>::Node_t, unsigned short, CUtlMap<unsigned long long, int, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<unsigned long long, int, unsigned short>::Node_t, unsigned short>, unsigned short> >::NewNode()
 T CUtlRBTree<CUtlMap<unsigned long long, int, unsigned short>::Node_t, unsigned short, CUtlMap<unsigned long long, int, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<unsigned long long, int, unsigned short>::Node_t, unsigned short>, unsigned short> >::NextInorder(unsigned short) const
 T CUtlRBTree<CUtlMap<unsigned long long, int, unsigned short>::Node_t, unsigned short, CUtlMap<unsigned long long, int, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<unsigned long long, int, unsigned short>::Node_t, unsigned short>, unsigned short> >::RemoveAll()
 T CUtlRBTree<CUtlMap<unsigned long long, int, unsigned short>::Node_t, unsigned short, CUtlMap<unsigned long long, int, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<unsigned long long, int, unsigned short>::Node_t, unsigned short>, unsigned short> >::RotateLeft(unsigned short)
 T CUtlRBTree<CUtlMap<unsigned long long, int, unsigned short>::Node_t, unsigned short, CUtlMap<unsigned long long, int, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<unsigned long long, int, unsigned short>::Node_t, unsigned short>, unsigned short> >::RotateRight(unsigned short)
 T CUtlRBTree<CUtlMap<unsigned long long, int, unsigned short>::Node_t, unsigned short, CUtlMap<unsigned long long, int, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<unsigned long long, int, unsigned short>::Node_t, unsigned short>, unsigned short> >::~CUtlRBTree()
 T CUtlRBTree<CUtlMap<unsigned short, unsigned short, unsigned short>::Node_t, unsigned short, CUtlMap<unsigned short, unsigned short, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<unsigned short, unsigned short, unsigned short>::Node_t, unsigned short>, unsigned short> >::Find(CUtlMap<unsigned short, unsigned short, unsigned short>::Node_t const&) const
 T CUtlRBTree<CUtlMap<unsigned short, unsigned short, unsigned short>::Node_t, unsigned short, CUtlMap<unsigned short, unsigned short, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<unsigned short, unsigned short, unsigned short>::Node_t, unsigned short>, unsigned short> >::FindInsertionPosition(CUtlMap<unsigned short, unsigned short, unsigned short>::Node_t const&, unsigned short&, bool&)
 T CUtlRBTree<CUtlMap<unsigned short, unsigned short, unsigned short>::Node_t, unsigned short, CUtlMap<unsigned short, unsigned short, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<unsigned short, unsigned short, unsigned short>::Node_t, unsigned short>, unsigned short> >::Insert(CUtlMap<unsigned short, unsigned short, unsigned short>::Node_t const&)
 T CUtlRBTree<CUtlMap<unsigned short, unsigned short, unsigned short>::Node_t, unsigned short, CUtlMap<unsigned short, unsigned short, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<unsigned short, unsigned short, unsigned short>::Node_t, unsigned short>, unsigned short> >::InsertRebalance(unsigned short)
 T CUtlRBTree<CUtlMap<unsigned short, unsigned short, unsigned short>::Node_t, unsigned short, CUtlMap<unsigned short, unsigned short, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<unsigned short, unsigned short, unsigned short>::Node_t, unsigned short>, unsigned short> >::IsLeftChild(unsigned short) const
 T CUtlRBTree<CUtlMap<unsigned short, unsigned short, unsigned short>::Node_t, unsigned short, CUtlMap<unsigned short, unsigned short, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<unsigned short, unsigned short, unsigned short>::Node_t, unsigned short>, unsigned short> >::IsRightChild(unsigned short) const
 T CUtlRBTree<CUtlMap<unsigned short, unsigned short, unsigned short>::Node_t, unsigned short, CUtlMap<unsigned short, unsigned short, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<unsigned short, unsigned short, unsigned short>::Node_t, unsigned short>, unsigned short> >::NewNode()
 T CUtlRBTree<CUtlMap<unsigned short, unsigned short, unsigned short>::Node_t, unsigned short, CUtlMap<unsigned short, unsigned short, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<unsigned short, unsigned short, unsigned short>::Node_t, unsigned short>, unsigned short> >::RemoveAll()
 T CUtlRBTree<CUtlMap<unsigned short, unsigned short, unsigned short>::Node_t, unsigned short, CUtlMap<unsigned short, unsigned short, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<unsigned short, unsigned short, unsigned short>::Node_t, unsigned short>, unsigned short> >::RotateLeft(unsigned short)
 T CUtlRBTree<CUtlMap<unsigned short, unsigned short, unsigned short>::Node_t, unsigned short, CUtlMap<unsigned short, unsigned short, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<unsigned short, unsigned short, unsigned short>::Node_t, unsigned short>, unsigned short> >::RotateRight(unsigned short)
 T CUtlRBTree<CUtlMap<unsigned short, unsigned short, unsigned short>::Node_t, unsigned short, CUtlMap<unsigned short, unsigned short, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<unsigned short, unsigned short, unsigned short>::Node_t, unsigned short>, unsigned short> >::~CUtlRBTree()
 T CUtlRBTree<CUtlMap<void*, CThreadSafeMultiMemoryPool::RawAllocation_t, int>::Node_t, int, CUtlMap<void*, CThreadSafeMultiMemoryPool::RawAllocation_t, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<void*, CThreadSafeMultiMemoryPool::RawAllocation_t, int>::Node_t, int>, int> >::Find(CUtlMap<void*, CThreadSafeMultiMemoryPool::RawAllocation_t, int>::Node_t const&) const
 T CUtlRBTree<CUtlMap<void*, CThreadSafeMultiMemoryPool::RawAllocation_t, int>::Node_t, int, CUtlMap<void*, CThreadSafeMultiMemoryPool::RawAllocation_t, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<void*, CThreadSafeMultiMemoryPool::RawAllocation_t, int>::Node_t, int>, int> >::FindInsertionPosition(CUtlMap<void*, CThreadSafeMultiMemoryPool::RawAllocation_t, int>::Node_t const&, int&, bool&)
 T CUtlRBTree<CUtlMap<void*, CThreadSafeMultiMemoryPool::RawAllocation_t, int>::Node_t, int, CUtlMap<void*, CThreadSafeMultiMemoryPool::RawAllocation_t, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<void*, CThreadSafeMultiMemoryPool::RawAllocation_t, int>::Node_t, int>, int> >::Insert(CUtlMap<void*, CThreadSafeMultiMemoryPool::RawAllocation_t, int>::Node_t const&)
 T CUtlRBTree<CUtlMap<void*, CThreadSafeMultiMemoryPool::RawAllocation_t, int>::Node_t, int, CUtlMap<void*, CThreadSafeMultiMemoryPool::RawAllocation_t, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<void*, CThreadSafeMultiMemoryPool::RawAllocation_t, int>::Node_t, int>, int> >::InsertRebalance(int)
 T CUtlRBTree<CUtlMap<void*, CThreadSafeMultiMemoryPool::RawAllocation_t, int>::Node_t, int, CUtlMap<void*, CThreadSafeMultiMemoryPool::RawAllocation_t, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<void*, CThreadSafeMultiMemoryPool::RawAllocation_t, int>::Node_t, int>, int> >::IsLeftChild(int) const
 T CUtlRBTree<CUtlMap<void*, CThreadSafeMultiMemoryPool::RawAllocation_t, int>::Node_t, int, CUtlMap<void*, CThreadSafeMultiMemoryPool::RawAllocation_t, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<void*, CThreadSafeMultiMemoryPool::RawAllocation_t, int>::Node_t, int>, int> >::IsRightChild(int) const
 T CUtlRBTree<CUtlMap<void*, CThreadSafeMultiMemoryPool::RawAllocation_t, int>::Node_t, int, CUtlMap<void*, CThreadSafeMultiMemoryPool::RawAllocation_t, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<void*, CThreadSafeMultiMemoryPool::RawAllocation_t, int>::Node_t, int>, int> >::NewNode()
 T CUtlRBTree<CUtlMap<void*, CThreadSafeMultiMemoryPool::RawAllocation_t, int>::Node_t, int, CUtlMap<void*, CThreadSafeMultiMemoryPool::RawAllocation_t, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<void*, CThreadSafeMultiMemoryPool::RawAllocation_t, int>::Node_t, int>, int> >::RemoveAll()
 T CUtlRBTree<CUtlMap<void*, CThreadSafeMultiMemoryPool::RawAllocation_t, int>::Node_t, int, CUtlMap<void*, CThreadSafeMultiMemoryPool::RawAllocation_t, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<void*, CThreadSafeMultiMemoryPool::RawAllocation_t, int>::Node_t, int>, int> >::RemoveRebalance(int)
 T CUtlRBTree<CUtlMap<void*, CThreadSafeMultiMemoryPool::RawAllocation_t, int>::Node_t, int, CUtlMap<void*, CThreadSafeMultiMemoryPool::RawAllocation_t, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<void*, CThreadSafeMultiMemoryPool::RawAllocation_t, int>::Node_t, int>, int> >::RotateLeft(int)
 T CUtlRBTree<CUtlMap<void*, CThreadSafeMultiMemoryPool::RawAllocation_t, int>::Node_t, int, CUtlMap<void*, CThreadSafeMultiMemoryPool::RawAllocation_t, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<void*, CThreadSafeMultiMemoryPool::RawAllocation_t, int>::Node_t, int>, int> >::RotateRight(int)
 T CUtlRBTree<CUtlMap<void*, CThreadSafeMultiMemoryPool::RawAllocation_t, int>::Node_t, int, CUtlMap<void*, CThreadSafeMultiMemoryPool::RawAllocation_t, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<void*, CThreadSafeMultiMemoryPool::RawAllocation_t, int>::Node_t, int>, int> >::Unlink(int)
 T CUtlRBTree<CUtlMap<void*, CThreadSafeMultiMemoryPool::RawAllocation_t, int>::Node_t, int, CUtlMap<void*, CThreadSafeMultiMemoryPool::RawAllocation_t, int>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<void*, CThreadSafeMultiMemoryPool::RawAllocation_t, int>::Node_t, int>, int> >::~CUtlRBTree()
 T CUtlRBTree<CUtlString, unsigned short, bool (*)(CUtlString const&, CUtlString const&), CUtlMemory<UtlRBTreeNode_t<CUtlString, unsigned short>, unsigned short> >::Find(CUtlString const&) const
 T CUtlRBTree<CUtlString, unsigned short, bool (*)(CUtlString const&, CUtlString const&), CUtlMemory<UtlRBTreeNode_t<CUtlString, unsigned short>, unsigned short> >::FindInsertionPosition(CUtlString const&, unsigned short&, bool&)
 T CUtlRBTree<CUtlString, unsigned short, bool (*)(CUtlString const&, CUtlString const&), CUtlMemory<UtlRBTreeNode_t<CUtlString, unsigned short>, unsigned short> >::FirstInorder() const
 T CUtlRBTree<CUtlString, unsigned short, bool (*)(CUtlString const&, CUtlString const&), CUtlMemory<UtlRBTreeNode_t<CUtlString, unsigned short>, unsigned short> >::Insert(CUtlString const&)
 T CUtlRBTree<CUtlString, unsigned short, bool (*)(CUtlString const&, CUtlString const&), CUtlMemory<UtlRBTreeNode_t<CUtlString, unsigned short>, unsigned short> >::InsertRebalance(unsigned short)
 T CUtlRBTree<CUtlString, unsigned short, bool (*)(CUtlString const&, CUtlString const&), CUtlMemory<UtlRBTreeNode_t<CUtlString, unsigned short>, unsigned short> >::IsLeftChild(unsigned short) const
 T CUtlRBTree<CUtlString, unsigned short, bool (*)(CUtlString const&, CUtlString const&), CUtlMemory<UtlRBTreeNode_t<CUtlString, unsigned short>, unsigned short> >::IsRightChild(unsigned short) const
 T CUtlRBTree<CUtlString, unsigned short, bool (*)(CUtlString const&, CUtlString const&), CUtlMemory<UtlRBTreeNode_t<CUtlString, unsigned short>, unsigned short> >::NewNode()
 T CUtlRBTree<CUtlString, unsigned short, bool (*)(CUtlString const&, CUtlString const&), CUtlMemory<UtlRBTreeNode_t<CUtlString, unsigned short>, unsigned short> >::NextInorder(unsigned short) const
 T CUtlRBTree<CUtlString, unsigned short, bool (*)(CUtlString const&, CUtlString const&), CUtlMemory<UtlRBTreeNode_t<CUtlString, unsigned short>, unsigned short> >::RemoveAll()
 T CUtlRBTree<CUtlString, unsigned short, bool (*)(CUtlString const&, CUtlString const&), CUtlMemory<UtlRBTreeNode_t<CUtlString, unsigned short>, unsigned short> >::RotateLeft(unsigned short)
 T CUtlRBTree<CUtlString, unsigned short, bool (*)(CUtlString const&, CUtlString const&), CUtlMemory<UtlRBTreeNode_t<CUtlString, unsigned short>, unsigned short> >::RotateRight(unsigned short)
 T CUtlRBTree<CUtlString, unsigned short, bool (*)(CUtlString const&, CUtlString const&), CUtlMemory<UtlRBTreeNode_t<CUtlString, unsigned short>, unsigned short> >::~CUtlRBTree()
 T CUtlRBTree<CUtlSymbolTable::CStringPoolIndex, unsigned short, CUtlSymbolTable::CLess, CUtlMemory<UtlRBTreeNode_t<CUtlSymbolTable::CStringPoolIndex, unsigned short>, unsigned short> >::Find(CUtlSymbolTable::CStringPoolIndex const&) const
 T CUtlRBTree<CUtlSymbolTable::CStringPoolIndex, unsigned short, CUtlSymbolTable::CLess, CUtlMemory<UtlRBTreeNode_t<CUtlSymbolTable::CStringPoolIndex, unsigned short>, unsigned short> >::FindInsertionPosition(CUtlSymbolTable::CStringPoolIndex const&, unsigned short&, bool&)
 T CUtlRBTree<CUtlSymbolTable::CStringPoolIndex, unsigned short, CUtlSymbolTable::CLess, CUtlMemory<UtlRBTreeNode_t<CUtlSymbolTable::CStringPoolIndex, unsigned short>, unsigned short> >::Insert(CUtlSymbolTable::CStringPoolIndex const&)
 T CUtlRBTree<CUtlSymbolTable::CStringPoolIndex, unsigned short, CUtlSymbolTable::CLess, CUtlMemory<UtlRBTreeNode_t<CUtlSymbolTable::CStringPoolIndex, unsigned short>, unsigned short> >::InsertRebalance(unsigned short)
 T CUtlRBTree<CUtlSymbolTable::CStringPoolIndex, unsigned short, CUtlSymbolTable::CLess, CUtlMemory<UtlRBTreeNode_t<CUtlSymbolTable::CStringPoolIndex, unsigned short>, unsigned short> >::IsLeftChild(unsigned short) const
 T CUtlRBTree<CUtlSymbolTable::CStringPoolIndex, unsigned short, CUtlSymbolTable::CLess, CUtlMemory<UtlRBTreeNode_t<CUtlSymbolTable::CStringPoolIndex, unsigned short>, unsigned short> >::IsRightChild(unsigned short) const
 T CUtlRBTree<CUtlSymbolTable::CStringPoolIndex, unsigned short, CUtlSymbolTable::CLess, CUtlMemory<UtlRBTreeNode_t<CUtlSymbolTable::CStringPoolIndex, unsigned short>, unsigned short> >::NewNode()
 T CUtlRBTree<CUtlSymbolTable::CStringPoolIndex, unsigned short, CUtlSymbolTable::CLess, CUtlMemory<UtlRBTreeNode_t<CUtlSymbolTable::CStringPoolIndex, unsigned short>, unsigned short> >::RemoveAll()
 T CUtlRBTree<CUtlSymbolTable::CStringPoolIndex, unsigned short, CUtlSymbolTable::CLess, CUtlMemory<UtlRBTreeNode_t<CUtlSymbolTable::CStringPoolIndex, unsigned short>, unsigned short> >::RotateLeft(unsigned short)
 T CUtlRBTree<CUtlSymbolTable::CStringPoolIndex, unsigned short, CUtlSymbolTable::CLess, CUtlMemory<UtlRBTreeNode_t<CUtlSymbolTable::CStringPoolIndex, unsigned short>, unsigned short> >::RotateRight(unsigned short)
 T CUtlRBTree<CUtlSymbolTable::CStringPoolIndex, unsigned short, CUtlSymbolTable::CLess, CUtlMemory<UtlRBTreeNode_t<CUtlSymbolTable::CStringPoolIndex, unsigned short>, unsigned short> >::~CUtlRBTree()
 T CUtlRBTree<GCSDK::JobType_t const*, unsigned short, bool (*)(GCSDK::JobType_t const* const&, GCSDK::JobType_t const* const&), CUtlMemory<UtlRBTreeNode_t<GCSDK::JobType_t const*, unsigned short>, unsigned short> >::Find(GCSDK::JobType_t const* const&) const
 T CUtlRBTree<GCSDK::JobType_t const*, unsigned short, bool (*)(GCSDK::JobType_t const* const&, GCSDK::JobType_t const* const&), CUtlMemory<UtlRBTreeNode_t<GCSDK::JobType_t const*, unsigned short>, unsigned short> >::FindInsertionPosition(GCSDK::JobType_t const* const&, unsigned short&, bool&)
 T CUtlRBTree<GCSDK::JobType_t const*, unsigned short, bool (*)(GCSDK::JobType_t const* const&, GCSDK::JobType_t const* const&), CUtlMemory<UtlRBTreeNode_t<GCSDK::JobType_t const*, unsigned short>, unsigned short> >::Insert(GCSDK::JobType_t const* const&)
 T CUtlRBTree<GCSDK::JobType_t const*, unsigned short, bool (*)(GCSDK::JobType_t const* const&, GCSDK::JobType_t const* const&), CUtlMemory<UtlRBTreeNode_t<GCSDK::JobType_t const*, unsigned short>, unsigned short> >::InsertRebalance(unsigned short)
 T CUtlRBTree<GCSDK::JobType_t const*, unsigned short, bool (*)(GCSDK::JobType_t const* const&, GCSDK::JobType_t const* const&), CUtlMemory<UtlRBTreeNode_t<GCSDK::JobType_t const*, unsigned short>, unsigned short> >::IsLeftChild(unsigned short) const
 T CUtlRBTree<GCSDK::JobType_t const*, unsigned short, bool (*)(GCSDK::JobType_t const* const&, GCSDK::JobType_t const* const&), CUtlMemory<UtlRBTreeNode_t<GCSDK::JobType_t const*, unsigned short>, unsigned short> >::IsRightChild(unsigned short) const
 T CUtlRBTree<GCSDK::JobType_t const*, unsigned short, bool (*)(GCSDK::JobType_t const* const&, GCSDK::JobType_t const* const&), CUtlMemory<UtlRBTreeNode_t<GCSDK::JobType_t const*, unsigned short>, unsigned short> >::NewNode()
 T CUtlRBTree<GCSDK::JobType_t const*, unsigned short, bool (*)(GCSDK::JobType_t const* const&, GCSDK::JobType_t const* const&), CUtlMemory<UtlRBTreeNode_t<GCSDK::JobType_t const*, unsigned short>, unsigned short> >::RemoveAll()
 T CUtlRBTree<GCSDK::JobType_t const*, unsigned short, bool (*)(GCSDK::JobType_t const* const&, GCSDK::JobType_t const* const&), CUtlMemory<UtlRBTreeNode_t<GCSDK::JobType_t const*, unsigned short>, unsigned short> >::RotateLeft(unsigned short)
 T CUtlRBTree<GCSDK::JobType_t const*, unsigned short, bool (*)(GCSDK::JobType_t const* const&, GCSDK::JobType_t const* const&), CUtlMemory<UtlRBTreeNode_t<GCSDK::JobType_t const*, unsigned short>, unsigned short> >::RotateRight(unsigned short)
 T CUtlRBTree<GCSDK::JobType_t const*, unsigned short, bool (*)(GCSDK::JobType_t const* const&, GCSDK::JobType_t const* const&), CUtlMemory<UtlRBTreeNode_t<GCSDK::JobType_t const*, unsigned short>, unsigned short> >::~CUtlRBTree()
 T CUtlRBTree<ThinkSync, unsigned short, bool (*)(ThinkSync const&, ThinkSync const&), CUtlMemory<UtlRBTreeNode_t<ThinkSync, unsigned short>, unsigned short> >::Find(ThinkSync const&) const
 T CUtlRBTree<ThinkSync, unsigned short, bool (*)(ThinkSync const&, ThinkSync const&), CUtlMemory<UtlRBTreeNode_t<ThinkSync, unsigned short>, unsigned short> >::FindInsertionPosition(ThinkSync const&, unsigned short&, bool&)
 T CUtlRBTree<ThinkSync, unsigned short, bool (*)(ThinkSync const&, ThinkSync const&), CUtlMemory<UtlRBTreeNode_t<ThinkSync, unsigned short>, unsigned short> >::FirstInorder() const
 T CUtlRBTree<ThinkSync, unsigned short, bool (*)(ThinkSync const&, ThinkSync const&), CUtlMemory<UtlRBTreeNode_t<ThinkSync, unsigned short>, unsigned short> >::Insert(ThinkSync const&)
 T CUtlRBTree<ThinkSync, unsigned short, bool (*)(ThinkSync const&, ThinkSync const&), CUtlMemory<UtlRBTreeNode_t<ThinkSync, unsigned short>, unsigned short> >::InsertRebalance(unsigned short)
 T CUtlRBTree<ThinkSync, unsigned short, bool (*)(ThinkSync const&, ThinkSync const&), CUtlMemory<UtlRBTreeNode_t<ThinkSync, unsigned short>, unsigned short> >::IsLeftChild(unsigned short) const
 T CUtlRBTree<ThinkSync, unsigned short, bool (*)(ThinkSync const&, ThinkSync const&), CUtlMemory<UtlRBTreeNode_t<ThinkSync, unsigned short>, unsigned short> >::IsRightChild(unsigned short) const
 T CUtlRBTree<ThinkSync, unsigned short, bool (*)(ThinkSync const&, ThinkSync const&), CUtlMemory<UtlRBTreeNode_t<ThinkSync, unsigned short>, unsigned short> >::NewNode()
 T CUtlRBTree<ThinkSync, unsigned short, bool (*)(ThinkSync const&, ThinkSync const&), CUtlMemory<UtlRBTreeNode_t<ThinkSync, unsigned short>, unsigned short> >::NextInorder(unsigned short) const
 T CUtlRBTree<ThinkSync, unsigned short, bool (*)(ThinkSync const&, ThinkSync const&), CUtlMemory<UtlRBTreeNode_t<ThinkSync, unsigned short>, unsigned short> >::RemoveAll()
 T CUtlRBTree<ThinkSync, unsigned short, bool (*)(ThinkSync const&, ThinkSync const&), CUtlMemory<UtlRBTreeNode_t<ThinkSync, unsigned short>, unsigned short> >::RotateLeft(unsigned short)
 T CUtlRBTree<ThinkSync, unsigned short, bool (*)(ThinkSync const&, ThinkSync const&), CUtlMemory<UtlRBTreeNode_t<ThinkSync, unsigned short>, unsigned short> >::RotateRight(unsigned short)
 T CUtlRBTree<ThinkSync, unsigned short, bool (*)(ThinkSync const&, ThinkSync const&), CUtlMemory<UtlRBTreeNode_t<ThinkSync, unsigned short>, unsigned short> >::~CUtlRBTree()
 T CUtlRBTree<VisibilityCacheEntry_t, unsigned short, CVisibilityCacheEntryLess, CUtlMemory<UtlRBTreeNode_t<VisibilityCacheEntry_t, unsigned short>, unsigned short> >::Find(VisibilityCacheEntry_t const&) const
 T CUtlRBTree<VisibilityCacheEntry_t, unsigned short, CVisibilityCacheEntryLess, CUtlMemory<UtlRBTreeNode_t<VisibilityCacheEntry_t, unsigned short>, unsigned short> >::FindInsertionPosition(VisibilityCacheEntry_t const&, unsigned short&, bool&)
 T CUtlRBTree<VisibilityCacheEntry_t, unsigned short, CVisibilityCacheEntryLess, CUtlMemory<UtlRBTreeNode_t<VisibilityCacheEntry_t, unsigned short>, unsigned short> >::FirstInorder() const
 T CUtlRBTree<VisibilityCacheEntry_t, unsigned short, CVisibilityCacheEntryLess, CUtlMemory<UtlRBTreeNode_t<VisibilityCacheEntry_t, unsigned short>, unsigned short> >::Insert(VisibilityCacheEntry_t const&)
 T CUtlRBTree<VisibilityCacheEntry_t, unsigned short, CVisibilityCacheEntryLess, CUtlMemory<UtlRBTreeNode_t<VisibilityCacheEntry_t, unsigned short>, unsigned short> >::InsertRebalance(unsigned short)
 T CUtlRBTree<VisibilityCacheEntry_t, unsigned short, CVisibilityCacheEntryLess, CUtlMemory<UtlRBTreeNode_t<VisibilityCacheEntry_t, unsigned short>, unsigned short> >::IsLeftChild(unsigned short) const
 T CUtlRBTree<VisibilityCacheEntry_t, unsigned short, CVisibilityCacheEntryLess, CUtlMemory<UtlRBTreeNode_t<VisibilityCacheEntry_t, unsigned short>, unsigned short> >::IsRightChild(unsigned short) const
 T CUtlRBTree<VisibilityCacheEntry_t, unsigned short, CVisibilityCacheEntryLess, CUtlMemory<UtlRBTreeNode_t<VisibilityCacheEntry_t, unsigned short>, unsigned short> >::NewNode()
 T CUtlRBTree<VisibilityCacheEntry_t, unsigned short, CVisibilityCacheEntryLess, CUtlMemory<UtlRBTreeNode_t<VisibilityCacheEntry_t, unsigned short>, unsigned short> >::NextInorder(unsigned short) const
 T CUtlRBTree<VisibilityCacheEntry_t, unsigned short, CVisibilityCacheEntryLess, CUtlMemory<UtlRBTreeNode_t<VisibilityCacheEntry_t, unsigned short>, unsigned short> >::RemoveAll()
 T CUtlRBTree<VisibilityCacheEntry_t, unsigned short, CVisibilityCacheEntryLess, CUtlMemory<UtlRBTreeNode_t<VisibilityCacheEntry_t, unsigned short>, unsigned short> >::RemoveRebalance(unsigned short)
 T CUtlRBTree<VisibilityCacheEntry_t, unsigned short, CVisibilityCacheEntryLess, CUtlMemory<UtlRBTreeNode_t<VisibilityCacheEntry_t, unsigned short>, unsigned short> >::RotateLeft(unsigned short)
 T CUtlRBTree<VisibilityCacheEntry_t, unsigned short, CVisibilityCacheEntryLess, CUtlMemory<UtlRBTreeNode_t<VisibilityCacheEntry_t, unsigned short>, unsigned short> >::RotateRight(unsigned short)
 T CUtlRBTree<VisibilityCacheEntry_t, unsigned short, CVisibilityCacheEntryLess, CUtlMemory<UtlRBTreeNode_t<VisibilityCacheEntry_t, unsigned short>, unsigned short> >::Unlink(unsigned short)
 T CUtlRBTree<VisibilityCacheEntry_t, unsigned short, CVisibilityCacheEntryLess, CUtlMemory<UtlRBTreeNode_t<VisibilityCacheEntry_t, unsigned short>, unsigned short> >::~CUtlRBTree()
 T CUtlRBTree<char const*, unsigned short, bool (*)(char const* const&, char const* const&), CUtlMemory<UtlRBTreeNode_t<char const*, unsigned short>, unsigned short> >::Find(char const* const&) const
 T CUtlRBTree<char const*, unsigned short, bool (*)(char const* const&, char const* const&), CUtlMemory<UtlRBTreeNode_t<char const*, unsigned short>, unsigned short> >::FindInsertionPosition(char const* const&, unsigned short&, bool&)
 T CUtlRBTree<char const*, unsigned short, bool (*)(char const* const&, char const* const&), CUtlMemory<UtlRBTreeNode_t<char const*, unsigned short>, unsigned short> >::FirstInorder() const
 T CUtlRBTree<char const*, unsigned short, bool (*)(char const* const&, char const* const&), CUtlMemory<UtlRBTreeNode_t<char const*, unsigned short>, unsigned short> >::Insert(char const* const&)
 T CUtlRBTree<char const*, unsigned short, bool (*)(char const* const&, char const* const&), CUtlMemory<UtlRBTreeNode_t<char const*, unsigned short>, unsigned short> >::InsertRebalance(unsigned short)
 T CUtlRBTree<char const*, unsigned short, bool (*)(char const* const&, char const* const&), CUtlMemory<UtlRBTreeNode_t<char const*, unsigned short>, unsigned short> >::IsLeftChild(unsigned short) const
 T CUtlRBTree<char const*, unsigned short, bool (*)(char const* const&, char const* const&), CUtlMemory<UtlRBTreeNode_t<char const*, unsigned short>, unsigned short> >::IsRightChild(unsigned short) const
 T CUtlRBTree<char const*, unsigned short, bool (*)(char const* const&, char const* const&), CUtlMemory<UtlRBTreeNode_t<char const*, unsigned short>, unsigned short> >::NewNode()
 T CUtlRBTree<char const*, unsigned short, bool (*)(char const* const&, char const* const&), CUtlMemory<UtlRBTreeNode_t<char const*, unsigned short>, unsigned short> >::NextInorder(unsigned short) const
 T CUtlRBTree<char const*, unsigned short, bool (*)(char const* const&, char const* const&), CUtlMemory<UtlRBTreeNode_t<char const*, unsigned short>, unsigned short> >::RemoveAll()
 T CUtlRBTree<char const*, unsigned short, bool (*)(char const* const&, char const* const&), CUtlMemory<UtlRBTreeNode_t<char const*, unsigned short>, unsigned short> >::RotateLeft(unsigned short)
 T CUtlRBTree<char const*, unsigned short, bool (*)(char const* const&, char const* const&), CUtlMemory<UtlRBTreeNode_t<char const*, unsigned short>, unsigned short> >::RotateRight(unsigned short)
 T CUtlRBTree<char const*, unsigned short, bool (*)(char const* const&, char const* const&), CUtlMemory<UtlRBTreeNode_t<char const*, unsigned short>, unsigned short> >::~CUtlRBTree()
 T CUtlRBTree<int, unsigned short, bool (*)(int const&, int const&), CUtlMemory<UtlRBTreeNode_t<int, unsigned short>, unsigned short> >::Find(int const&) const
 T CUtlRBTree<int, unsigned short, bool (*)(int const&, int const&), CUtlMemory<UtlRBTreeNode_t<int, unsigned short>, unsigned short> >::FindInsertionPosition(int const&, unsigned short&, bool&)
 T CUtlRBTree<int, unsigned short, bool (*)(int const&, int const&), CUtlMemory<UtlRBTreeNode_t<int, unsigned short>, unsigned short> >::Insert(int const&)
 T CUtlRBTree<int, unsigned short, bool (*)(int const&, int const&), CUtlMemory<UtlRBTreeNode_t<int, unsigned short>, unsigned short> >::InsertRebalance(unsigned short)
 T CUtlRBTree<int, unsigned short, bool (*)(int const&, int const&), CUtlMemory<UtlRBTreeNode_t<int, unsigned short>, unsigned short> >::IsLeftChild(unsigned short) const
 T CUtlRBTree<int, unsigned short, bool (*)(int const&, int const&), CUtlMemory<UtlRBTreeNode_t<int, unsigned short>, unsigned short> >::IsRightChild(unsigned short) const
 T CUtlRBTree<int, unsigned short, bool (*)(int const&, int const&), CUtlMemory<UtlRBTreeNode_t<int, unsigned short>, unsigned short> >::NewNode()
 T CUtlRBTree<int, unsigned short, bool (*)(int const&, int const&), CUtlMemory<UtlRBTreeNode_t<int, unsigned short>, unsigned short> >::RemoveAll()
 T CUtlRBTree<int, unsigned short, bool (*)(int const&, int const&), CUtlMemory<UtlRBTreeNode_t<int, unsigned short>, unsigned short> >::RotateLeft(unsigned short)
 T CUtlRBTree<int, unsigned short, bool (*)(int const&, int const&), CUtlMemory<UtlRBTreeNode_t<int, unsigned short>, unsigned short> >::RotateRight(unsigned short)
 T CUtlRBTree<int, unsigned short, bool (*)(int const&, int const&), CUtlMemory<UtlRBTreeNode_t<int, unsigned short>, unsigned short> >::~CUtlRBTree()
 T CUtlSortVector<CBaseEntity*, CSortedEntityList::CEntityReportLess, CUtlVector<CBaseEntity*, CUtlMemory<CBaseEntity*, int> > >::Insert(CBaseEntity* const&)
 T CUtlSortVector<CDmxAttribute*, CDmxAttributeLess, CUtlVector<CDmxAttribute*, CUtlMemory<CDmxAttribute*, int> > >::CompareHelper(CDmxAttribute* const*, CDmxAttribute* const*)
 T CUtlSortVector<CDmxAttribute*, CDmxAttributeLess, CUtlVector<CDmxAttribute*, CUtlMemory<CDmxAttribute*, int> > >::InsertNoSort(CDmxAttribute* const&)
 T CUtlSortVector<CEconItemView, CInventoryListLess, CUtlVector<CEconItemView, CUtlMemory<CEconItemView, int> > >::CompareHelper(CEconItemView const*, CEconItemView const*)
 T CUtlSortVector<CEconItemView, CInventoryListLess, CUtlVector<CEconItemView, CUtlMemory<CEconItemView, int> > >::Insert(CEconItemView const&)
 T CUtlSortVector<CSortedCacheFile, CSortedCacheFile, CUtlVector<CSortedCacheFile, CUtlMemory<CSortedCacheFile, int> > >::CompareHelper(CSortedCacheFile const*, CSortedCacheFile const*)
 T CUtlSortVector<CSortedCacheFile, CSortedCacheFile, CUtlVector<CSortedCacheFile, CUtlMemory<CSortedCacheFile, int> > >::InsertNoSort(CSortedCacheFile const&)
 T CUtlSortVector<CTFNavArea*, CTFNavAreaIncursionLess, CUtlVector<CTFNavArea*, CUtlMemory<CTFNavArea*, int> > >::Insert(CTFNavArea* const&)
 T CUtlSortVector<CTFPlayer*, CBonusPlayerListLess, CUtlVector<CTFPlayer*, CUtlMemory<CTFPlayer*, int> > >::CompareHelper(CTFPlayer* const*, CTFPlayer* const*)
 T CUtlSortVector<EntityDamageHistory_t, CEntityDamageHistoryLess, CUtlVector<EntityDamageHistory_t, CUtlMemory<EntityDamageHistory_t, int> > >::Insert(EntityDamageHistory_t const&)
 T CUtlSortVector<EntityHistory_t, CEntityHistoryLess, CUtlVector<EntityHistory_t, CUtlMemory<EntityHistory_t, int> > >::Insert(EntityHistory_t const&)
 T CUtlSortVector<IncursionEntry_t, SpyHideIncursionDistanceLess, CUtlVector<IncursionEntry_t, CUtlMemory<IncursionEntry_t, int> > >::Insert(IncursionEntry_t const&)
 T CUtlSortVector<KeyValues*, CUtlSortVectorKeyValuesByName, CUtlVector<KeyValues*, CUtlMemory<KeyValues*, int> > >::CompareHelper(KeyValues* const*, KeyValues* const*)
 T CUtlSortVector<penetrated_target_list, CBulletPenetrateEnum::PenetratedTargetLess, CUtlVector<penetrated_target_list, CUtlMemory<penetrated_target_list, int> > >::Insert(penetrated_target_list const&)
 T CUtlStack<CHandle<CTFWeaponBase>, CUtlMemory<CHandle<CTFWeaponBase>, int> >::~CUtlStack()
 T CUtlString::Append(char const*)
 T CUtlString::Clear()
 T CUtlString::Format(char const*, ...)
 T CUtlString::FormatV(char const*, char*)
 T CUtlString::Get() const
 T CUtlString::GetExtension() const
 T CUtlString::GetForModify()
 T CUtlString::IsEqual_CaseSensitive(char const*) const
 T CUtlString::Purge()
 T CUtlString::Set(char const*)
 T CUtlString::SetDirect(char const*, int)
 T CUtlString::SetLength(int)
 T CUtlString::Slice(int, int) const
 T CUtlString::StripExtension() const
 T CUtlString::ToLower()
 T CUtlString::operator+=(CUtlString const&)
 T CUtlString::operator+=(char const*)
 T CUtlString::operator+=(char)
 T CUtlString::operator=(CUtlString const&)
 T CUtlString::operator=(char const*)
 T CUtlString::operator==(CUtlString const&) const
 T CUtlString::operator[](int) const
 T CUtlString::~CUtlString()
 T CUtlStringList::CopyAndAddToTail(char const*)
 T CUtlStringList::~CUtlStringList()
 T CUtlStringMap<CSheet*>::PurgeAndDeleteElements()
 T CUtlSymbol::CUtlSymbol(char const*)
 T CUtlSymbol::Initialize()
 T CUtlSymbol::String() const
 T CUtlSymbolDataOps::IsEmpty(SaveRestoreFieldInfo_t const&)
 T CUtlSymbolDataOps::MakeEmpty(SaveRestoreFieldInfo_t const&)
 T CUtlSymbolDataOps::Restore(SaveRestoreFieldInfo_t const&, IRestore*)
 T CUtlSymbolDataOps::Save(SaveRestoreFieldInfo_t const&, ISave*)
 T CUtlSymbolTable::AddString(char const*)
 T CUtlSymbolTable::CLess::operator()(CUtlSymbolTable::CStringPoolIndex const&, CUtlSymbolTable::CStringPoolIndex const&) const
 T CUtlSymbolTable::CUtlSymbolTable(int, int, bool)
 T CUtlSymbolTable::Find(char const*) const
 T CUtlSymbolTable::RemoveAll()
 T CUtlSymbolTable::String(CUtlSymbol) const
 T CUtlSymbolTable::~CUtlSymbolTable()
 T CUtlSymbolTableMT::String(CUtlSymbol) const
 T CUtlSymbolTableMT::~CUtlSymbolTableMT()
 T CUtlVector<AIRebalanceInfo_t, CUtlMemory<AIRebalanceInfo_t, int> >::~CUtlVector()
 T CUtlVector<AISquadEnemyInfo_t, CUtlMemory<AISquadEnemyInfo_t, int> >::GrowVector(int)
 T CUtlVector<AISquadEnemyInfo_t, CUtlMemory<AISquadEnemyInfo_t, int> >::~CUtlVector()
 T CUtlVector<AI_FollowGroup_t*, CUtlMemory<AI_FollowGroup_t*, int> >::~CUtlVector()
 T CUtlVector<AI_MoveSuggestion_t, CUtlMemory<AI_MoveSuggestion_t, int> >::AddVectorToTail(CUtlVector<AI_MoveSuggestion_t, CUtlMemory<AI_MoveSuggestion_t, int> > const&)
 T CUtlVector<AI_MoveSuggestion_t, CUtlMemory<AI_MoveSuggestion_t, int> >::InsertMultipleBefore(int, int)
 T CUtlVector<AI_MoveSuggestion_t, CUtlMemory<AI_MoveSuggestion_t, int> >::~CUtlVector()
 T CUtlVector<AI_NamespaceAddInfo_t, CUtlMemory<AI_NamespaceAddInfo_t, int> >::~CUtlVector()
 T CUtlVector<AI_NearNode_t, CUtlMemory<AI_NearNode_t, int> >::~CUtlVector()
 T CUtlVector<AI_Response*, CUtlMemory<AI_Response*, int> >::~CUtlVector()
 T CUtlVector<AI_Waypoint_t, CUtlMemory<AI_Waypoint_t, int> >::GrowVector(int)
 T CUtlVector<AI_Waypoint_t, CUtlMemory<AI_Waypoint_t, int> >::SetCount(int)
 T CUtlVector<AI_Waypoint_t, CUtlMemory<AI_Waypoint_t, int> >::~CUtlVector()
 T CUtlVector<Action<CBotNPCArcher>*, CUtlMemory<Action<CBotNPCArcher>*, int> >::~CUtlVector()
 T CUtlVector<Action<CBotNPCDecoy>*, CUtlMemory<Action<CBotNPCDecoy>*, int> >::~CUtlVector()
 T CUtlVector<Action<CEyeballBoss>*, CUtlMemory<Action<CEyeballBoss>*, int> >::~CUtlVector()
 T CUtlVector<Action<CGhost>*, CUtlMemory<Action<CGhost>*, int> >::~CUtlVector()
 T CUtlVector<Action<CHeadlessHatman>*, CUtlMemory<Action<CHeadlessHatman>*, int> >::~CUtlVector()
 T CUtlVector<Action<CMerasmus>*, CUtlMemory<Action<CMerasmus>*, int> >::~CUtlVector()
 T CUtlVector<Action<CSimpleBot>*, CUtlMemory<Action<CSimpleBot>*, int> >::~CUtlVector()
 T CUtlVector<Action<CTFBot>*, CUtlMemory<Action<CTFBot>*, int> >::~CUtlVector()
 T CUtlVector<Action<CTFRobotDestruction_Robot>*, CUtlMemory<Action<CTFRobotDestruction_Robot>*, int> >::~CUtlVector()
 T CUtlVector<Action<CZombie>*, CUtlMemory<Action<CZombie>*, int> >::~CUtlVector()
 T CUtlVector<Activity, CUtlMemory<Activity, int> >::~CUtlVector()
 T CUtlVector<AppSystemInfo_t, CUtlMemory<AppSystemInfo_t, int> >::~CUtlVector()
 T CUtlVector<BuildPoint_t, CUtlMemory<BuildPoint_t, int> >::~CUtlVector()
 T CUtlVector<CAIHintVector*, CUtlMemory<CAIHintVector*, int> >::AddToTail(CAIHintVector* const&)
 T CUtlVector<CAIHintVector*, CUtlMemory<CAIHintVector*, int> >::~CUtlVector()
 T CUtlVector<CAI_BaseActor*, CUtlMemory<CAI_BaseActor*, int> >::~CUtlVector()
 T CUtlVector<CAI_BaseNPC*, CUtlMemory<CAI_BaseNPC*, int> >::~CUtlVector()
 T CUtlVector<CAI_BehaviorBase*, CUtlMemory<CAI_BehaviorBase*, int> >::~CUtlVector()
 T CUtlVector<CAI_BlendedMotor::AI_Movementscript_t, CUtlMemory<CAI_BlendedMotor::AI_Movementscript_t, int> >::InsertBefore(int, CAI_BlendedMotor::AI_Movementscript_t const&)
 T CUtlVector<CAI_BlendedMotor::AI_Movementscript_t, CUtlMemory<CAI_BlendedMotor::AI_Movementscript_t, int> >::~CUtlVector()
 T CUtlVector<CAI_Hint*, CUtlMemory<CAI_Hint*, int> >::GrowVector(int)
 T CUtlVector<CAI_Hint*, CUtlMemory<CAI_Hint*, int> >::~CUtlVector()
 T CUtlVector<CAI_InterestTarget_t*, CUtlMemory<CAI_InterestTarget_t*, int> >::AddToTail(CAI_InterestTarget_t* const&)
 T CUtlVector<CAI_InterestTarget_t*, CUtlMemory<CAI_InterestTarget_t*, int> >::~CUtlVector()
 T CUtlVector<CAI_InterestTarget_t, CUtlMemory<CAI_InterestTarget_t, int> >::InsertMultipleBefore(int, int)
 T CUtlVector<CAI_InterestTarget_t, CUtlMemory<CAI_InterestTarget_t, int> >::~CUtlVector()
 T CUtlVector<CAI_Link*, CUtlMemory<CAI_Link*, int> >::~CUtlVector()
 T CUtlVector<CAI_PlaneSolver::CircleObstacles_t, CUtlMemory<CAI_PlaneSolver::CircleObstacles_t, int> >::~CUtlVector()
 T CUtlVector<CAI_ScriptConditionsElement, CUtlMemory<CAI_ScriptConditionsElement, int> >::GrowVector(int)
 T CUtlVector<CAI_ScriptConditionsElement, CUtlMemory<CAI_ScriptConditionsElement, int> >::~CUtlVector()
 T CUtlVector<CActivityRemap, CUtlMemory<CActivityRemap, int> >::~CUtlVector()
 T CUtlVector<CAnimationLayer, CUtlMemory<CAnimationLayer, int> >::GrowVector(int)
 T CUtlVector<CAnimationLayer, CUtlMemory<CAnimationLayer, int> >::~CUtlVector()
 T CUtlVector<CAssaultPoint*, CUtlMemory<CAssaultPoint*, int> >::AddToTail(CAssaultPoint* const&)
 T CUtlVector<CAssaultPoint*, CUtlMemory<CAssaultPoint*, int> >::~CUtlVector()
 T CUtlVector<CAttributeManager::cached_attribute_t, CUtlMemory<CAttributeManager::cached_attribute_t, int> >::AddToTail()
 T CUtlVector<CAttributeManager::cached_attribute_t, CUtlMemory<CAttributeManager::cached_attribute_t, int> >::~CUtlVector()
 T CUtlVector<CBaseCombatCharacter*, CUtlMemory<CBaseCombatCharacter*, int> >::AddToTail(CBaseCombatCharacter* const&)
 T CUtlVector<CBaseCombatCharacter*, CUtlMemory<CBaseCombatCharacter*, int> >::~CUtlVector()
 T CUtlVector<CBaseCombatWeapon*, CUtlMemory<CBaseCombatWeapon*, int> >::~CUtlVector()
 T CUtlVector<CBaseEntity*, CUtlMemory<CBaseEntity*, int> >::AddToTail(CBaseEntity* const&)
 T CUtlVector<CBaseEntity*, CUtlMemory<CBaseEntity*, int> >::GrowVector(int)
 T CUtlVector<CBaseEntity*, CUtlMemory<CBaseEntity*, int> >::~CUtlVector()
 T CUtlVector<CBaseHandle, CUtlMemory<CBaseHandle, int> >::~CUtlVector()
 T CUtlVector<CBaseIssue*, CUtlMemory<CBaseIssue*, int> >::~CUtlVector()
 T CUtlVector<CBaseIssue::FailedVote*, CUtlMemory<CBaseIssue::FailedVote*, int> >::~CUtlVector()
 T CUtlVector<CBaseMultiplayerPlayer*, CUtlMemory<CBaseMultiplayerPlayer*, int> >::~CUtlVector()
 T CUtlVector<CBaseObject*, CUtlMemory<CBaseObject*, int> >::AddToTail(CBaseObject* const&)
 T CUtlVector<CBaseObject*, CUtlMemory<CBaseObject*, int> >::~CUtlVector()
 T CUtlVector<CBasePlayer*, CUtlMemory<CBasePlayer*, int> >::~CUtlVector()
 T CUtlVector<CBaseQuestObjectiveTracker const*, CUtlMemory<CBaseQuestObjectiveTracker const*, int> >::~CUtlVector()
 T CUtlVector<CBaseServerVehicle::entryanim_t, CUtlMemory<CBaseServerVehicle::entryanim_t, int> >::~CUtlVector()
 T CUtlVector<CBaseServerVehicle::exitanim_t, CUtlMemory<CBaseServerVehicle::exitanim_t, int> >::~CUtlVector()
 T CUtlVector<CBaseTrigger*, CUtlMemory<CBaseTrigger*, int> >::~CUtlVector()
 T CUtlVector<CCaptureFlag*, CUtlMemory<CCaptureFlag*, int> >::AddToTail(CCaptureFlag* const&)
 T CUtlVector<CCaptureFlag*, CUtlMemory<CCaptureFlag*, int> >::~CUtlVector()
 T CUtlVector<CChoreoActor*, CUtlMemory<CChoreoActor*, int> >::AddToTail(CChoreoActor* const&)
 T CUtlVector<CChoreoActor*, CUtlMemory<CChoreoActor*, int> >::~CUtlVector()
 T CUtlVector<CChoreoChannel*, CUtlMemory<CChoreoChannel*, int> >::AddToTail(CChoreoChannel* const&)
 T CUtlVector<CChoreoChannel*, CUtlMemory<CChoreoChannel*, int> >::~CUtlVector()
 T CUtlVector<CChoreoEvent*, CUtlMemory<CChoreoEvent*, int> >::AddToTail(CChoreoEvent* const&)
 T CUtlVector<CChoreoEvent*, CUtlMemory<CChoreoEvent*, int> >::~CUtlVector()
 T CUtlVector<CChoreoScene*, CUtlMemory<CChoreoScene*, int> >::~CUtlVector()
 T CUtlVector<CCommandContext, CUtlMemory<CCommandContext, int> >::~CUtlVector()
 T CUtlVector<CConstraintFloodEntry, CUtlMemory<CConstraintFloodEntry, int> >::~CUtlVector()
 T CUtlVector<CCoroutineMgr*, CUtlMemory<CCoroutineMgr*, int> >::~CUtlVector()
 T CUtlVector<CDecalEmitterSystem::DecalListEntry, CUtlMemory<CDecalEmitterSystem::DecalListEntry, int> >::~CUtlVector()
 T CUtlVector<CDmxAttribute*, CUtlMemory<CDmxAttribute*, int> >::~CUtlVector()
 T CUtlVector<CDmxElement*, CUtlMemory<CDmxElement*, int> >::AddToTail(CDmxElement* const&)
 T CUtlVector<CDmxElement*, CUtlMemory<CDmxElement*, int> >::~CUtlVector()
 T CUtlVector<CDmxElementDictionary::AttributeInfo_t, CUtlMemory<CDmxElementDictionary::AttributeInfo_t, int> >::AddToTail()
 T CUtlVector<CDmxElementDictionary::AttributeInfo_t, CUtlMemory<CDmxElementDictionary::AttributeInfo_t, int> >::~CUtlVector()
 T CUtlVector<CDmxElementDictionary::DictInfo_t, CUtlMemory<CDmxElementDictionary::DictInfo_t, int> >::~CUtlVector()
 T CUtlVector<CEconColorDefinition*, CUtlMemory<CEconColorDefinition*, int> >::~CUtlVector()
 T CUtlVector<CEconItem*, CUtlMemory<CEconItem*, int> >::InsertMultipleBefore(int, int)
 T CUtlVector<CEconItem*, CUtlMemory<CEconItem*, int> >::~CUtlVector()
 T CUtlVector<CEconItem::EquippedInstance_t, CUtlMemory<CEconItem::EquippedInstance_t, int> >::GrowVector(int)
 T CUtlVector<CEconItem::EquippedInstance_t, CUtlMemory<CEconItem::EquippedInstance_t, int> >::~CUtlVector()
 T CUtlVector<CEconItem::attribute_t, CUtlMemory<CEconItem::attribute_t, int> >::GrowVector(int)
 T CUtlVector<CEconItem::attribute_t, CUtlMemory<CEconItem::attribute_t, int> >::~CUtlVector()
 T CUtlVector<CEconItemAttribute, CUtlMemory<CEconItemAttribute, int> >::AddMultipleToTail(int)
 T CUtlVector<CEconItemAttribute, CUtlMemory<CEconItemAttribute, int> >::GrowVector(int)
 T CUtlVector<CEconItemAttribute, CUtlMemory<CEconItemAttribute, int> >::~CUtlVector()
 T CUtlVector<CEconItemAttributeDefinition const*, CUtlMemory<CEconItemAttributeDefinition const*, int> >::AddToTail(CEconItemAttributeDefinition const* const&)
 T CUtlVector<CEconItemAttributeDefinition const*, CUtlMemory<CEconItemAttributeDefinition const*, int> >::~CUtlVector()
 T CUtlVector<CEconItemDefinition const*, CUtlMemory<CEconItemDefinition const*, int> >::InsertMultipleBefore(int, int)
 T CUtlVector<CEconItemDefinition const*, CUtlMemory<CEconItemDefinition const*, int> >::~CUtlVector()
 T CUtlVector<CEconItemDefinition*, CUtlMemory<CEconItemDefinition*, int> >::AddToTail(CEconItemDefinition* const&)
 T CUtlVector<CEconItemDefinition*, CUtlMemory<CEconItemDefinition*, int> >::~CUtlVector()
 T CUtlVector<CEconItemSchema::EquipRegion, CUtlMemory<CEconItemSchema::EquipRegion, int> >::InsertBefore(int, CEconItemSchema::EquipRegion const&)
 T CUtlVector<CEconItemSchema::EquipRegion, CUtlMemory<CEconItemSchema::EquipRegion, int> >::~CUtlVector()
 T CUtlVector<CEconItemSetDefinition const*, CUtlMemory<CEconItemSetDefinition const*, int> >::~CUtlVector()
 T CUtlVector<CEconItemSetDefinition::itemset_attrib_t, CUtlMemory<CEconItemSetDefinition::itemset_attrib_t, int> >::GrowVector(int)
 T CUtlVector<CEconItemSetDefinition::itemset_attrib_t, CUtlMemory<CEconItemSetDefinition::itemset_attrib_t, int> >::~CUtlVector()
 T CUtlVector<CEconItemView*, CUtlMemory<CEconItemView*, int> >::AddToTail(CEconItemView* const&)
 T CUtlVector<CEconItemView*, CUtlMemory<CEconItemView*, int> >::~CUtlVector()
 T CUtlVector<CEconItemView, CUtlMemory<CEconItemView, int> >::~CUtlVector()
 T CUtlVector<CEconItemViewHandle*, CUtlMemory<CEconItemViewHandle*, int> >::~CUtlVector()
 T CUtlVector<CEconLootListDefinition::drop_item_t, CUtlMemory<CEconLootListDefinition::drop_item_t, int> >::~CUtlVector()
 T CUtlVector<CEconStyleInfo*, CUtlMemory<CEconStyleInfo*, int> >::GrowVector(int)
 T CUtlVector<CEconStyleInfo*, CUtlMemory<CEconStyleInfo*, int> >::~CUtlVector()
 T CUtlVector<CEconTool_ItemDynamicRecipe::CBaseRecipeComponent*, CUtlMemory<CEconTool_ItemDynamicRecipe::CBaseRecipeComponent*, int> >::AddToTail(CEconTool_ItemDynamicRecipe::CBaseRecipeComponent* const&)
 T CUtlVector<CEconTool_ItemDynamicRecipe::CBaseRecipeComponent*, CUtlMemory<CEconTool_ItemDynamicRecipe::CBaseRecipeComponent*, int> >::Sort(int (*)(CEconTool_ItemDynamicRecipe::CBaseRecipeComponent* const*, CEconTool_ItemDynamicRecipe::CBaseRecipeComponent* const*))
 T CUtlVector<CEconTool_ItemDynamicRecipe::CBaseRecipeComponent*, CUtlMemory<CEconTool_ItemDynamicRecipe::CBaseRecipeComponent*, int> >::~CUtlVector()
 T CUtlVector<CEconTool_ItemDynamicRecipe::CBaseRecipeComponent::CountChance_t, CUtlMemory<CEconTool_ItemDynamicRecipe::CBaseRecipeComponent::CountChance_t, int> >::~CUtlVector()
 T CUtlVector<CEconTool_ItemDynamicRecipe::CBaseRecipeComponent::StringEncodedAttribute_t, CUtlMemory<CEconTool_ItemDynamicRecipe::CBaseRecipeComponent::StringEncodedAttribute_t, int> >::~CUtlVector()
 T CUtlVector<CEconTool_UpgradeCard::upgrade_card_attr_value_t, CUtlMemoryFixedGrowable<CEconTool_UpgradeCard::upgrade_card_attr_value_t, 1ul, int> >::InsertBefore(int, CEconTool_UpgradeCard::upgrade_card_attr_value_t const&)
 T CUtlVector<CEconTool_UpgradeCard::upgrade_card_attr_value_t, CUtlMemoryFixedGrowable<CEconTool_UpgradeCard::upgrade_card_attr_value_t, 1ul, int> >::~CUtlVector()
 T CUtlVector<CEffectScriptElement, CUtlMemory<CEffectScriptElement, int> >::~CUtlVector()
 T CUtlVector<CEntityDataInstantiator<CWatcherList>::HashEntry, CUtlMemory<CEntityDataInstantiator<CWatcherList>::HashEntry, int> >::GrowVector(int)
 T CUtlVector<CEntityDataInstantiator<CWatcherList>::HashEntry, CUtlMemory<CEntityDataInstantiator<CWatcherList>::HashEntry, int> >::~CUtlVector()
 T CUtlVector<CEntityDataInstantiator<ModelScale>::HashEntry, CUtlMemory<CEntityDataInstantiator<ModelScale>::HashEntry, int> >::GrowVector(int)
 T CUtlVector<CEntityDataInstantiator<ModelScale>::HashEntry, CUtlMemory<CEntityDataInstantiator<ModelScale>::HashEntry, int> >::~CUtlVector()
 T CUtlVector<CEntityDataInstantiator<StepSimulationData>::HashEntry, CUtlMemory<CEntityDataInstantiator<StepSimulationData>::HashEntry, int> >::GrowVector(int)
 T CUtlVector<CEntityDataInstantiator<StepSimulationData>::HashEntry, CUtlMemory<CEntityDataInstantiator<StepSimulationData>::HashEntry, int> >::~CUtlVector()
 T CUtlVector<CEntityDataInstantiator<groundlink_t>::HashEntry, CUtlMemory<CEntityDataInstantiator<groundlink_t>::HashEntry, int> >::GrowVector(int)
 T CUtlVector<CEntityDataInstantiator<groundlink_t>::HashEntry, CUtlMemory<CEntityDataInstantiator<groundlink_t>::HashEntry, int> >::~CUtlVector()
 T CUtlVector<CEntityDataInstantiator<physicspushlist_t>::HashEntry, CUtlMemory<CEntityDataInstantiator<physicspushlist_t>::HashEntry, int> >::GrowVector(int)
 T CUtlVector<CEntityDataInstantiator<physicspushlist_t>::HashEntry, CUtlMemory<CEntityDataInstantiator<physicspushlist_t>::HashEntry, int> >::~CUtlVector()
 T CUtlVector<CEntityDataInstantiator<touchlink_t>::HashEntry, CUtlMemory<CEntityDataInstantiator<touchlink_t>::HashEntry, int> >::GrowVector(int)
 T CUtlVector<CEntityDataInstantiator<touchlink_t>::HashEntry, CUtlMemory<CEntityDataInstantiator<touchlink_t>::HashEntry, int> >::~CUtlVector()
 T CUtlVector<CEntityDataInstantiator<vphysicsupdateai_t>::HashEntry, CUtlMemory<CEntityDataInstantiator<vphysicsupdateai_t>::HashEntry, int> >::GrowVector(int)
 T CUtlVector<CEntityDataInstantiator<vphysicsupdateai_t>::HashEntry, CUtlMemory<CEntityDataInstantiator<vphysicsupdateai_t>::HashEntry, int> >::~CUtlVector()
 T CUtlVector<CEnvSoundscape*, CUtlMemory<CEnvSoundscape*, int> >::~CUtlVector()
 T CUtlVector<CEventAbsoluteTag, CUtlMemory<CEventAbsoluteTag, int> >::AddToTail(CEventAbsoluteTag const&)
 T CUtlVector<CEventAbsoluteTag, CUtlMemory<CEventAbsoluteTag, int> >::~CUtlVector()
 T CUtlVector<CEventRegister*, CUtlMemory<CEventRegister*, int> >::~CUtlVector()
 T CUtlVector<CEventRelativeTag, CUtlMemory<CEventRelativeTag, int> >::InsertBefore(int, CEventRelativeTag const&)
 T CUtlVector<CEventRelativeTag, CUtlMemory<CEventRelativeTag, int> >::~CUtlVector()
 T CUtlVector<CExpressionSample, CUtlMemory<CExpressionSample, int> >::AddToTail(CExpressionSample const&)
 T CUtlVector<CExpressionSample, CUtlMemory<CExpressionSample, int> >::~CUtlVector()
 T CUtlVector<CFish*, CUtlMemory<CFish*, int> >::~CUtlVector()
 T CUtlVector<CFlexAnimationTrack*, CUtlMemory<CFlexAnimationTrack*, int> >::AddToTail(CFlexAnimationTrack* const&)
 T CUtlVector<CFlexAnimationTrack*, CUtlMemory<CFlexAnimationTrack*, int> >::~CUtlVector()
 T CUtlVector<CFlexSceneFile*, CUtlMemory<CFlexSceneFile*, int> >::AddToTail(CFlexSceneFile* const&)
 T CUtlVector<CFlexSceneFile*, CUtlMemory<CFlexSceneFile*, int> >::~CUtlVector()
 T CUtlVector<CFlexTimingTag, CUtlMemory<CFlexTimingTag, int> >::InsertBefore(int, CFlexTimingTag const&)
 T CUtlVector<CFlexTimingTag, CUtlMemory<CFlexTimingTag, int> >::~CUtlVector()
 T CUtlVector<CFmtStrN<256, false>, CUtlMemory<CFmtStrN<256, false>, int> >::~CUtlVector()
 T CUtlVector<CFuncLadder*, CUtlMemory<CFuncLadder*, int> >::~CUtlVector()
 T CUtlVector<CFuncPasstimeGoal*, CUtlMemory<CFuncPasstimeGoal*, int> >::~CUtlVector()
 T CUtlVector<CFunctor*, CUtlMemory<CFunctor*, int> >::~CUtlVector()
 T CUtlVector<CGameSaveRestoreInfo::CHashElement, CUtlMemory<CGameSaveRestoreInfo::CHashElement, int> >::GrowVector(int)
 T CUtlVector<CGameSaveRestoreInfo::CHashElement, CUtlMemory<CGameSaveRestoreInfo::CHashElement, int> >::~CUtlVector()
 T CUtlVector<CGameTrace, CUtlMemory<CGameTrace, int> >::~CUtlVector()
 T CUtlVector<CGameWeaponManager*, CUtlMemory<CGameWeaponManager*, int> >::~CUtlVector()
 T CUtlVector<CGhost*, CUtlMemory<CGhost*, int> >::~CUtlVector()
 T CUtlVector<CHalloweenBaseBoss::AttackerInfo, CUtlMemory<CHalloweenBaseBoss::AttackerInfo, int> >::~CUtlVector()
 T CUtlVector<CHalloweenBaseBoss::DamageRateInfo, CUtlMemory<CHalloweenBaseBoss::DamageRateInfo, int> >::~CUtlVector()
 T CUtlVector<CHandle<CAI_BaseNPC>, CUtlMemory<CHandle<CAI_BaseNPC>, int> >::GrowVector(int)
 T CUtlVector<CHandle<CAI_BaseNPC>, CUtlMemory<CHandle<CAI_BaseNPC>, int> >::~CUtlVector()
 T CUtlVector<CHandle<CAI_DynamicLink>, CUtlMemory<CHandle<CAI_DynamicLink>, int> >::~CUtlVector()
 T CUtlVector<CHandle<CBaseCombatCharacter>, CUtlMemory<CHandle<CBaseCombatCharacter>, int> >::AddToTail(CHandle<CBaseCombatCharacter> const&)
 T CUtlVector<CHandle<CBaseCombatCharacter>, CUtlMemory<CHandle<CBaseCombatCharacter>, int> >::~CUtlVector()
 T CUtlVector<CHandle<CBaseEntity>, CUtlMemory<CHandle<CBaseEntity>, int> >::AddToTail(CHandle<CBaseEntity> const&)
 T CUtlVector<CHandle<CBaseEntity>, CUtlMemory<CHandle<CBaseEntity>, int> >::GrowVector(int)
 T CUtlVector<CHandle<CBaseEntity>, CUtlMemory<CHandle<CBaseEntity>, int> >::InsertBefore(int, CHandle<CBaseEntity> const&)
 T CUtlVector<CHandle<CBaseEntity>, CUtlMemory<CHandle<CBaseEntity>, int> >::InsertMultipleBefore(int, int)
 T CUtlVector<CHandle<CBaseEntity>, CUtlMemory<CHandle<CBaseEntity>, int> >::~CUtlVector()
 T CUtlVector<CHandle<CBaseFlex>, CUtlMemory<CHandle<CBaseFlex>, int> >::InsertMultipleBefore(int, int)
 T CUtlVector<CHandle<CBaseFlex>, CUtlMemory<CHandle<CBaseFlex>, int> >::~CUtlVector()
 T CUtlVector<CHandle<CBaseObject>, CUtlMemory<CHandle<CBaseObject>, int> >::~CUtlVector()
 T CUtlVector<CHandle<CBasePlayer>, CUtlMemory<CHandle<CBasePlayer>, int> >::GrowVector(int)
 T CUtlVector<CHandle<CBasePlayer>, CUtlMemory<CHandle<CBasePlayer>, int> >::~CUtlVector()
 T CUtlVector<CHandle<CBasePropDoor>, CUtlMemory<CHandle<CBasePropDoor>, int> >::~CUtlVector()
 T CUtlVector<CHandle<CBaseTFBotHintEntity>, CUtlMemory<CHandle<CBaseTFBotHintEntity>, int> >::AddToTail(CHandle<CBaseTFBotHintEntity> const&)
 T CUtlVector<CHandle<CBaseTFBotHintEntity>, CUtlMemory<CHandle<CBaseTFBotHintEntity>, int> >::~CUtlVector()
 T CUtlVector<CHandle<CCPTimerLogic>, CUtlMemory<CHandle<CCPTimerLogic>, int> >::~CUtlVector()
 T CUtlVector<CHandle<CEconWearable>, CUtlMemory<CHandle<CEconWearable>, int> >::~CUtlVector()
 T CUtlVector<CHandle<CEntitySpawnPoint>, CUtlMemory<CHandle<CEntitySpawnPoint>, int> >::~CUtlVector()
 T CUtlVector<CHandle<CEnvMicrophone>, CUtlMemory<CHandle<CEnvMicrophone>, int> >::~CUtlVector()
 T CUtlVector<CHandle<CEnvPlayerSurfaceTrigger>, CUtlMemory<CHandle<CEnvPlayerSurfaceTrigger>, int> >::AddToTail(CHandle<CEnvPlayerSurfaceTrigger> const&)
 T CUtlVector<CHandle<CEnvPlayerSurfaceTrigger>, CUtlMemory<CHandle<CEnvPlayerSurfaceTrigger>, int> >::~CUtlVector()
 T CUtlVector<CHandle<CEnvSpark>, CUtlMemory<CHandle<CEnvSpark>, int> >::~CUtlVector()
 T CUtlVector<CHandle<CFish>, CUtlMemory<CHandle<CFish>, int> >::GrowVector(int)
 T CUtlVector<CHandle<CFish>, CUtlMemory<CHandle<CFish>, int> >::~CUtlVector()
 T CUtlVector<CHandle<CFuncNavCost>, CUtlMemory<CHandle<CFuncNavCost>, int> >::~CUtlVector()
 T CUtlVector<CHandle<CFuncNavPrerequisite>, CUtlMemory<CHandle<CFuncNavPrerequisite>, int> >::~CUtlVector()
 T CUtlVector<CHandle<CFuncRespawnRoomVisualizer>, CUtlMemory<CHandle<CFuncRespawnRoomVisualizer>, int> >::~CUtlVector()
 T CUtlVector<CHandle<CGhost>, CUtlMemory<CHandle<CGhost>, int> >::AddToTail(CHandle<CGhost> const&)
 T CUtlVector<CHandle<CGhost>, CUtlMemory<CHandle<CGhost>, int> >::~CUtlVector()
 T CUtlVector<CHandle<CHealthKit>, CUtlMemory<CHandle<CHealthKit>, int> >::~CUtlVector()
 T CUtlVector<CHandle<CInfoLadderDismount>, CUtlMemory<CHandle<CInfoLadderDismount>, int> >::~CUtlVector()
 T CUtlVector<CHandle<CMessageEntity>, CUtlMemory<CHandle<CMessageEntity>, int> >::~CUtlVector()
 T CUtlVector<CHandle<CPointTemplate>, CUtlMemory<CHandle<CPointTemplate>, int> >::~CUtlVector()
 T CUtlVector<CHandle<CSceneEntity>, CUtlMemory<CHandle<CSceneEntity>, int> >::GrowVector(int)
 T CUtlVector<CHandle<CSceneEntity>, CUtlMemory<CHandle<CSceneEntity>, int> >::~CUtlVector()
 T CUtlVector<CHandle<CSceneListManager>, CUtlMemory<CHandle<CSceneListManager>, int> >::GrowVector(int)
 T CUtlVector<CHandle<CSceneListManager>, CUtlMemory<CHandle<CSceneListManager>, int> >::~CUtlVector()
 T CUtlVector<CHandle<CTFBot>, CUtlMemory<CHandle<CTFBot>, int> >::~CUtlVector()
 T CUtlVector<CHandle<CTFBotHint>, CUtlMemory<CHandle<CTFBotHint>, int> >::~CUtlVector()
 T CUtlVector<CHandle<CTFGrenadePipebombProjectile>, CUtlMemory<CHandle<CTFGrenadePipebombProjectile>, int> >::AddToTail(CHandle<CTFGrenadePipebombProjectile> const&)
 T CUtlVector<CHandle<CTFGrenadePipebombProjectile>, CUtlMemory<CHandle<CTFGrenadePipebombProjectile>, int> >::~CUtlVector()
 T CUtlVector<CHandle<CTFMerasmusTrickOrTreatProp>, CUtlMemory<CHandle<CTFMerasmusTrickOrTreatProp>, int> >::~CUtlVector()
 T CUtlVector<CHandle<CTFPlayer>, CUtlMemory<CHandle<CTFPlayer>, int> >::InsertBefore(int, CHandle<CTFPlayer> const&)
 T CUtlVector<CHandle<CTFPlayer>, CUtlMemory<CHandle<CTFPlayer>, int> >::~CUtlVector()
 T CUtlVector<CHandle<CTFProjectile_Flare>, CUtlMemory<CHandle<CTFProjectile_Flare>, int> >::~CUtlVector()
 T CUtlVector<CHandle<CTFTeamSpawn>, CUtlMemory<CHandle<CTFTeamSpawn>, int> >::AddToTail(CHandle<CTFTeamSpawn> const&)
 T CUtlVector<CHandle<CTFTeamSpawn>, CUtlMemory<CHandle<CTFTeamSpawn>, int> >::~CUtlVector()
 T CUtlVector<CHandle<CTFWeaponBase>, CUtlMemory<CHandle<CTFWeaponBase>, int> >::~CUtlVector()
 T CUtlVector<CHandle<CTeamControlPoint>, CUtlMemory<CHandle<CTeamControlPoint>, int> >::~CUtlVector()
 T CUtlVector<CHandle<CTeamControlPointMaster>, CUtlMemory<CHandle<CTeamControlPointMaster>, int> >::~CUtlVector()
 T CUtlVector<CHandle<CTriggerMultiple>, CUtlMemory<CHandle<CTriggerMultiple>, int> >::~CUtlVector()
 T CUtlVector<CHandle<CVGuiScreen>, CUtlMemory<CHandle<CVGuiScreen>, int> >::AddToTail()
 T CUtlVector<CHandle<CVGuiScreen>, CUtlMemory<CHandle<CVGuiScreen>, int> >::InsertMultipleBefore(int, int)
 T CUtlVector<CHandle<CVGuiScreen>, CUtlMemory<CHandle<CVGuiScreen>, int> >::~CUtlVector()
 T CUtlVector<CHandle<CZombie>, CUtlMemory<CHandle<CZombie>, int> >::~CUtlVector()
 T CUtlVector<CHintCriteria::hintZone_t, CUtlMemory<CHintCriteria::hintZone_t, int> >::~CUtlVector()
 T CUtlVector<CInventoryManager::inventories_t, CUtlMemory<CInventoryManager::inventories_t, int> >::~CUtlVector()
 T CUtlVector<CInventoryManager::pendingreq_t, CUtlMemory<CInventoryManager::pendingreq_t, int> >::~CUtlVector()
 T CUtlVector<CItemLevelingDefinition, CUtlMemory<CItemLevelingDefinition, int> >::~CUtlVector()
 T CUtlVector<CItemSelectionCriteria, CUtlMemory<CItemSelectionCriteria, int> >::GrowVector(int)
 T CUtlVector<CItemSelectionCriteria, CUtlMemory<CItemSelectionCriteria, int> >::InsertMultipleBefore(int, int)
 T CUtlVector<CItemSelectionCriteria, CUtlMemory<CItemSelectionCriteria, int> >::~CUtlVector()
 T CUtlVector<CItemSelectionCriteria::ICondition*, CUtlMemory<CItemSelectionCriteria::ICondition*, int> >::~CUtlVector()
 T CUtlVector<CKnownEntity const*, CUtlMemory<CKnownEntity const*, int> >::~CUtlVector()
 T CUtlVector<CKnownEntity, CUtlMemory<CKnownEntity, int> >::AddToTail(CKnownEntity const&)
 T CUtlVector<CKnownEntity, CUtlMemory<CKnownEntity, int> >::~CUtlVector()
 T CUtlVector<CLeaderboardInfo*, CUtlMemory<CLeaderboardInfo*, int> >::AddToTail(CLeaderboardInfo* const&)
 T CUtlVector<CLeaderboardInfo*, CUtlMemory<CLeaderboardInfo*, int> >::~CUtlVector()
 T CUtlVector<CMannVsMachineUpgrades, CUtlMemory<CMannVsMachineUpgrades, int> >::~CUtlVector()
 T CUtlVector<CMatchInfo::DailyStatsRankBucket_t, CUtlMemory<CMatchInfo::DailyStatsRankBucket_t, int> >::~CUtlVector()
 T CUtlVector<CMatchInfo::PlayerMatchData_t*, CUtlMemory<CMatchInfo::PlayerMatchData_t*, int> >::PurgeAndDeleteElements()
 T CUtlVector<CMatchInfo::PlayerMatchData_t*, CUtlMemory<CMatchInfo::PlayerMatchData_t*, int> >::~CUtlVector()
 T CUtlVector<CMerasmusAOEAttack::MerasmusGrenadeCreateSpec_t, CUtlMemory<CMerasmusAOEAttack::MerasmusGrenadeCreateSpec_t, int> >::~CUtlVector()
 T CUtlVector<CModelSoundsCache*, CUtlMemory<CModelSoundsCache*, int> >::~CUtlVector()
 T CUtlVector<CMoveHelperServer::touchlist_t, CUtlMemory<CMoveHelperServer::touchlist_t, int> >::~CUtlVector()
 T CUtlVector<CMultiplayRules::ResponseRules_t, CUtlMemory<CMultiplayRules::ResponseRules_t, int> >::InsertMultipleBefore(int, int)
 T CUtlVector<CMultiplayRules::ResponseRules_t, CUtlMemory<CMultiplayRules::ResponseRules_t, int> >::~CUtlVector()
 T CUtlVector<CMvMBotUpgrade, CUtlMemory<CMvMBotUpgrade, int> >::GrowVector(int)
 T CUtlVector<CMvMBotUpgrade, CUtlMemory<CMvMBotUpgrade, int> >::~CUtlVector()
 T CUtlVector<CNavArea*, CUtlMemory<CNavArea*, int> >::AddToTail(CNavArea* const&)
 T CUtlVector<CNavArea*, CUtlMemory<CNavArea*, int> >::~CUtlVector()
 T CUtlVector<CNavLadder*, CUtlMemory<CNavLadder*, int> >::AddToTail(CNavLadder* const&)
 T CUtlVector<CNavLadder*, CUtlMemory<CNavLadder*, int> >::~CUtlVector()
 T CUtlVector<CNavMesh::WalkableSeedSpot, CUtlMemory<CNavMesh::WalkableSeedSpot, int> >::~CUtlVector()
 T CUtlVector<CNavNode*, CUtlMemory<CNavNode*, int> >::AddToTail(CNavNode* const&)
 T CUtlVector<CNavNode*, CUtlMemory<CNavNode*, int> >::GrowVector(int)
 T CUtlVector<CNavNode*, CUtlMemory<CNavNode*, int> >::~CUtlVector()
 T CUtlVector<CObjectSentrygun*, CUtlMemory<CObjectSentrygun*, int> >::~CUtlVector()
 T CUtlVector<CObjectTeleporter*, CUtlMemory<CObjectTeleporter*, int> >::~CUtlVector()
 T CUtlVector<CParticleCollection*, CUtlMemory<CParticleCollection*, int> >::~CUtlVector()
 T CUtlVector<CParticleOperatorInstance*, CUtlMemory<CParticleOperatorInstance*, int> >::~CUtlVector()
 T CUtlVector<CParticleSystemDefinition*, CUtlMemory<CParticleSystemDefinition*, int> >::GrowVector(int)
 T CUtlVector<CParticleSystemDefinition*, CUtlMemory<CParticleSystemDefinition*, int> >::~CUtlVector()
 T CUtlVector<CParticleSystemMgr::RenderCache_t, CUtlMemory<CParticleSystemMgr::RenderCache_t, int> >::~CUtlVector()
 T CUtlVector<CPassengerInfo, CUtlMemory<CPassengerInfo, int> >::GrowVector(int)
 T CUtlVector<CPassengerInfo, CUtlMemory<CPassengerInfo, int> >::~CUtlVector()
 T CUtlVector<CPassengerRole, CUtlMemory<CPassengerRole, int> >::~CUtlVector()
 T CUtlVector<CPassengerSeat, CUtlMemory<CPassengerSeat, int> >::~CUtlVector()
 T CUtlVector<CPassengerSeatTransition, CUtlMemory<CPassengerSeatTransition, int> >::AddToTail()
 T CUtlVector<CPassengerSeatTransition, CUtlMemory<CPassengerSeatTransition, int> >::~CUtlVector()
 T CUtlVector<CPasstimeBallController*, CUtlMemory<CPasstimeBallController*, int> >::~CUtlVector()
 T CUtlVector<CPhysSaveRestoreBlockHandler::QueuedItem_t, CUtlMemory<CPhysSaveRestoreBlockHandler::QueuedItem_t, int> >::AddToTail()
 T CUtlVector<CPhysSaveRestoreBlockHandler::QueuedItem_t, CUtlMemory<CPhysSaveRestoreBlockHandler::QueuedItem_t, int> >::~CUtlVector()
 T CUtlVector<CPhysicsPushedEntities::PhysicsPushedInfo_t, CUtlMemory<CPhysicsPushedEntities::PhysicsPushedInfo_t, int> >::~CUtlVector()
 T CUtlVector<CPhysicsPushedEntities::PhysicsPusherInfo_t, CUtlMemory<CPhysicsPushedEntities::PhysicsPusherInfo_t, int> >::~CUtlVector()
 T CUtlVector<CPointTemplate*, CUtlMemory<CPointTemplate*, int> >::~CUtlVector()
 T CUtlVector<CPopulationManager::CheckpointSnapshotInfo*, CUtlMemory<CPopulationManager::CheckpointSnapshotInfo*, int> >::~CUtlVector()
 T CUtlVector<CPopulationManager::PlayerUpgradeHistory*, CUtlMemory<CPopulationManager::PlayerUpgradeHistory*, int> >::~CUtlVector()
 T CUtlVector<CPropData::propdata_breakablechunk_t, CUtlMemory<CPropData::propdata_breakablechunk_t, int> >::~CUtlVector()
 T CUtlVector<CRallyPoint*, CUtlMemory<CRallyPoint*, int> >::~CUtlVector()
 T CUtlVector<CResponseSystem::ScriptEntry, CUtlMemory<CResponseSystem::ScriptEntry, int> >::~CUtlVector()
 T CUtlVector<CSceneEventInfo, CUtlMemory<CSceneEventInfo, int> >::~CUtlVector()
 T CUtlVector<CSceneManager::CRestoreSceneSound, CUtlMemory<CSceneManager::CRestoreSceneSound, int> >::~CUtlVector()
 T CUtlVector<CSheet*, CUtlMemory<CSheet*, int> >::~CUtlVector()
 T CUtlVector<CSortedCacheFile, CUtlMemory<CSortedCacheFile, int> >::~CUtlVector()
 T CUtlVector<CSoundPatch*, CUtlMemory<CSoundPatch*, int> >::AddToTail(CSoundPatch* const&)
 T CUtlVector<CSoundPatch*, CUtlMemory<CSoundPatch*, int> >::~CUtlVector()
 T CUtlVector<CSteamID, CUtlMemory<CSteamID, int> >::~CUtlVector()
 T CUtlVector<CStressEntityReg*, CUtlMemory<CStressEntityReg*, int> >::~CUtlVector()
 T CUtlVector<CStuckBot*, CUtlMemory<CStuckBot*, int> >::~CUtlVector()
 T CUtlVector<CStuckBotEvent*, CUtlMemory<CStuckBotEvent*, int> >::~CUtlVector()
 T CUtlVector<CStudioHdr::CActivityToSequenceMapping::HashValueType, CUtlMemory<CStudioHdr::CActivityToSequenceMapping::HashValueType, int> >::GrowVector(int)
 T CUtlVector<CStudioHdr::CActivityToSequenceMapping::HashValueType, CUtlMemory<CStudioHdr::CActivityToSequenceMapping::HashValueType, int> >::~CUtlVector()
 T CUtlVector<CTFBot*, CUtlMemory<CTFBot*, int> >::~CUtlVector()
 T CUtlVector<CTFBot::DelayedNoticeInfo, CUtlMemory<CTFBot::DelayedNoticeInfo, int> >::~CUtlVector()
 T CUtlVector<CTFBot::EventChangeAttributes_t const*, CUtlMemory<CTFBot::EventChangeAttributes_t const*, int> >::~CUtlVector()
 T CUtlVector<CTFBot::EventChangeAttributes_t, CUtlMemory<CTFBot::EventChangeAttributes_t, int> >::~CUtlVector()
 T CUtlVector<CTFBot::EventChangeAttributes_t::item_attributes_t, CUtlMemory<CTFBot::EventChangeAttributes_t::item_attributes_t, int> >::GrowVector(int)
 T CUtlVector<CTFBot::EventChangeAttributes_t::item_attributes_t, CUtlMemory<CTFBot::EventChangeAttributes_t::item_attributes_t, int> >::Purge()
 T CUtlVector<CTFBot::EventChangeAttributes_t::item_attributes_t, CUtlMemory<CTFBot::EventChangeAttributes_t::item_attributes_t, int> >::SetCount(int)
 T CUtlVector<CTFBot::EventChangeAttributes_t::item_attributes_t, CUtlMemory<CTFBot::EventChangeAttributes_t::item_attributes_t, int> >::~CUtlVector()
 T CUtlVector<CTFBot::SniperSpotInfo, CUtlMemory<CTFBot::SniperSpotInfo, int> >::~CUtlVector()
 T CUtlVector<CTFBot::SuspectedSpyInfo_t*, CUtlMemory<CTFBot::SuspectedSpyInfo_t*, int> >::~CUtlVector()
 T CUtlVector<CTFBotHint*, CUtlMemory<CTFBotHint*, int> >::AddToTail(CTFBotHint* const&)
 T CUtlVector<CTFBotHint*, CUtlMemory<CTFBotHint*, int> >::~CUtlVector()
 T CUtlVector<CTFBotHintEngineerNest*, CUtlMemory<CTFBotHintEngineerNest*, int> >::AddToTail(CTFBotHintEngineerNest* const&)
 T CUtlVector<CTFBotHintEngineerNest*, CUtlMemory<CTFBotHintEngineerNest*, int> >::~CUtlVector()
 T CUtlVector<CTFBotHintSentrygun*, CUtlMemory<CTFBotHintSentrygun*, int> >::~CUtlVector()
 T CUtlVector<CTFBotManager::ArcherAssignmentInfo, CUtlMemory<CTFBotManager::ArcherAssignmentInfo, int> >::~CUtlVector()
 T CUtlVector<CTFBotPrepareStickybombTrap::BombTargetArea, CUtlMemory<CTFBotPrepareStickybombTrap::BombTargetArea, int> >::~CUtlVector()
 T CUtlVector<CTFCondition*, CUtlMemory<CTFCondition*, int> >::~CUtlVector()
 T CUtlVector<CTFDamageEvent, CUtlMemory<CTFDamageEvent, int> >::AddToTail()
 T CUtlVector<CTFDamageEvent, CUtlMemory<CTFDamageEvent, int> >::~CUtlVector()
 T CUtlVector<CTFGameRules::TeleportLocation_t, CUtlMemory<CTFGameRules::TeleportLocation_t, int> >::~CUtlVector()
 T CUtlVector<CTFGrenadeLauncher::Donks_t, CUtlMemory<CTFGrenadeLauncher::Donks_t, int> >::~CUtlVector()
 T CUtlVector<CTFInfoPowerupSpawn*, CUtlMemory<CTFInfoPowerupSpawn*, int> >::AddToTail(CTFInfoPowerupSpawn* const&)
 T CUtlVector<CTFInfoPowerupSpawn*, CUtlMemory<CTFInfoPowerupSpawn*, int> >::~CUtlVector()
 T CUtlVector<CTFNavArea*, CUtlMemory<CTFNavArea*, int> >::AddToTail(CTFNavArea* const&)
 T CUtlVector<CTFNavArea*, CUtlMemory<CTFNavArea*, int> >::GrowVector(int)
 T CUtlVector<CTFNavArea*, CUtlMemory<CTFNavArea*, int> >::InsertMultipleBefore(int, int)
 T CUtlVector<CTFNavArea*, CUtlMemory<CTFNavArea*, int> >::~CUtlVector()
 T CUtlVector<CTFPlayer const*, CUtlMemory<CTFPlayer const*, int> >::AddToTail(CTFPlayer const* const&)
 T CUtlVector<CTFPlayer const*, CUtlMemory<CTFPlayer const*, int> >::~CUtlVector()
 T CUtlVector<CTFPlayer*, CUtlMemory<CTFPlayer*, int> >::AddToTail(CTFPlayer* const&)
 T CUtlVector<CTFPlayer*, CUtlMemory<CTFPlayer*, int> >::GrowVector(int)
 T CUtlVector<CTFPlayer*, CUtlMemory<CTFPlayer*, int> >::~CUtlVector()
 T CUtlVector<CTFPlayer::itemtest_t, CUtlMemory<CTFPlayer::itemtest_t, int> >::~CUtlVector()
 T CUtlVector<CTFPlayerShared::bleed_struct_t, CUtlMemory<CTFPlayerShared::bleed_struct_t, int> >::~CUtlVector()
 T CUtlVector<CTFPlayerShared::healers_t, CUtlMemory<CTFPlayerShared::healers_t, int> >::~CUtlVector()
 T CUtlVector<CTFPlayerShared::pulledcurrencypacks_t, CUtlMemory<CTFPlayerShared::pulledcurrencypacks_t, int> >::~CUtlVector()
 T CUtlVector<CTFQuestCondition*, CUtlMemory<CTFQuestCondition*, int> >::AddToTail(CTFQuestCondition* const&)
 T CUtlVector<CTFQuestEvaluator*, CUtlMemory<CTFQuestEvaluator*, int> >::AddToTail(CTFQuestEvaluator* const&)
 T CUtlVector<CTFQuestEvaluator*, CUtlMemory<CTFQuestEvaluator*, int> >::~CUtlVector()
 T CUtlVector<CTFQuestObjectiveDefinition const*, CUtlMemory<CTFQuestObjectiveDefinition const*, int> >::AddToTail(CTFQuestObjectiveDefinition const* const&)
 T CUtlVector<CTFQuestObjectiveDefinition const*, CUtlMemory<CTFQuestObjectiveDefinition const*, int> >::AddVectorToTail(CUtlVector<CTFQuestObjectiveDefinition const*, CUtlMemory<CTFQuestObjectiveDefinition const*, int> > const&)
 T CUtlVector<CTFQuestObjectiveDefinition const*, CUtlMemory<CTFQuestObjectiveDefinition const*, int> >::~CUtlVector()
 T CUtlVector<CTFQuestRestriction*, CUtlMemory<CTFQuestRestriction*, int> >::AddToTail(CTFQuestRestriction* const&)
 T CUtlVector<CTFQuestRestriction*, CUtlMemory<CTFQuestRestriction*, int> >::~CUtlVector()
 T CUtlVector<CTFRequiredQuestItemsSet, CUtlMemory<CTFRequiredQuestItemsSet, int> >::AddToTail()
 T CUtlVector<CTFRequiredQuestItemsSet, CUtlMemory<CTFRequiredQuestItemsSet, int> >::~CUtlVector()
 T CUtlVector<CTFRobotDestruction_Robot*, CUtlMemory<CTFRobotDestruction_Robot*, int> >::~CUtlVector()
 T CUtlVector<CTFRobotDestruction_RobotGroup*, CUtlMemory<CTFRobotDestruction_RobotGroup*, int> >::AddToTail(CTFRobotDestruction_RobotGroup* const&)
 T CUtlVector<CTFRobotDestruction_RobotGroup*, CUtlMemory<CTFRobotDestruction_RobotGroup*, int> >::~CUtlVector()
 T CUtlVector<CTFRobotDestruction_RobotSpawn*, CUtlMemory<CTFRobotDestruction_RobotSpawn*, int> >::~CUtlVector()
 T CUtlVector<CTFTauntInfo::TauntInputRemap_t, CUtlMemory<CTFTauntInfo::TauntInputRemap_t, int> >::~CUtlVector()
 T CUtlVector<CTFTeamSpawn*, CUtlMemory<CTFTeamSpawn*, int> >::~CUtlVector()
 T CUtlVector<CTFWeaponBuilder*, CUtlMemory<CTFWeaponBuilder*, int> >::~CUtlVector()
 T CUtlVector<CTacticalMission*, CUtlMemory<CTacticalMission*, int> >::~CUtlVector()
 T CUtlVector<CTeam*, CUtlMemory<CTeam*, int> >::~CUtlVector()
 T CUtlVector<CTeamControlPoint*, CUtlMemory<CTeamControlPoint*, int> >::AddToTail(CTeamControlPoint* const&)
 T CUtlVector<CTeamControlPoint*, CUtlMemory<CTeamControlPoint*, int> >::InsertBefore(int, CTeamControlPoint* const&)
 T CUtlVector<CTeamControlPoint*, CUtlMemory<CTeamControlPoint*, int> >::~CUtlVector()
 T CUtlVector<CTeamControlPoint::perteamdata_t, CUtlMemory<CTeamControlPoint::perteamdata_t, int> >::InsertMultipleBefore(int, int)
 T CUtlVector<CTeamControlPoint::perteamdata_t, CUtlMemory<CTeamControlPoint::perteamdata_t, int> >::~CUtlVector()
 T CUtlVector<CTeamControlPointRound*, CUtlMemory<CTeamControlPointRound*, int> >::~CUtlVector()
 T CUtlVector<CTeamSpawnPoint*, CUtlMemory<CTeamSpawnPoint*, int> >::~CUtlVector()
 T CUtlVector<CThreadSafeMemoryPool::BlockSet_t, CUtlMemory<CThreadSafeMemoryPool::BlockSet_t, int> >::~CUtlVector()
 T CUtlVector<CThreadSafeMultiMemoryPool::MemPoolRecord_t*, CUtlMemory<CThreadSafeMultiMemoryPool::MemPoolRecord_t*, int> >::InsertMultipleBefore(int, int)
 T CUtlVector<CThreadSafeMultiMemoryPool::MemPoolRecord_t*, CUtlMemory<CThreadSafeMultiMemoryPool::MemPoolRecord_t*, int> >::~CUtlVector()
 T CUtlVector<CThreadSafeMultiMemoryPool::MemPoolRecord_t, CUtlMemory<CThreadSafeMultiMemoryPool::MemPoolRecord_t, int> >::~CUtlVector()
 T CUtlVector<CTimedItemRewardDefinition, CUtlMemory<CTimedItemRewardDefinition, int> >::~CUtlVector()
 T CUtlVector<CTriggerAreaCapture::blockers_t, CUtlMemory<CTriggerAreaCapture::blockers_t, int> >::~CUtlVector()
 T CUtlVector<CTriggerAreaCapture::perteamdata_t, CUtlMemory<CTriggerAreaCapture::perteamdata_t, int> >::InsertMultipleBefore(int, int)
 T CUtlVector<CTriggerAreaCapture::perteamdata_t, CUtlMemory<CTriggerAreaCapture::perteamdata_t, int> >::~CUtlVector()
 T CUtlVector<CUpgradeInfo, CUtlMemory<CUpgradeInfo, int> >::AddToTail(CUpgradeInfo const&)
 T CUtlVector<CUpgradeInfo, CUtlMemory<CUpgradeInfo, int> >::~CUtlVector()
 T CUtlVector<CUserCmd, CUtlMemory<CUserCmd, int> >::InsertBefore(int, CUserCmd const&)
 T CUtlVector<CUserCmd, CUtlMemory<CUserCmd, int> >::~CUtlVector()
 T CUtlVector<CUtlBinaryBlock, CUtlMemory<CUtlBinaryBlock, int> >::GrowVector(int)
 T CUtlVector<CUtlBinaryBlock, CUtlMemory<CUtlBinaryBlock, int> >::Purge()
 T CUtlVector<CUtlBinaryBlock, CUtlMemory<CUtlBinaryBlock, int> >::~CUtlVector()
 T CUtlVector<CUtlHashMapLarge<int, CEconItemDefinition*, CDefEquals<int>, MurmurHash3Functor<int> >::HashBucket_t, CUtlMemory<CUtlHashMapLarge<int, CEconItemDefinition*, CDefEquals<int>, MurmurHash3Functor<int> >::HashBucket_t, int> >::InsertMultipleBefore(int, int)
 T CUtlVector<CUtlHashMapLarge<int, CEconItemDefinition*, CDefEquals<int>, MurmurHash3Functor<int> >::HashBucket_t, CUtlMemory<CUtlHashMapLarge<int, CEconItemDefinition*, CDefEquals<int>, MurmurHash3Functor<int> >::HashBucket_t, int> >::~CUtlVector()
 T CUtlVector<CUtlString, CUtlMemory<CUtlString, int> >::GrowVector(int)
 T CUtlVector<CUtlString, CUtlMemory<CUtlString, int> >::InsertBefore(int, CUtlString const&)
 T CUtlVector<CUtlString, CUtlMemory<CUtlString, int> >::~CUtlVector()
 T CUtlVector<CUtlSymbolTable::StringPool_t*, CUtlMemory<CUtlSymbolTable::StringPool_t*, int> >::~CUtlVector()
 T CUtlVector<CUtlVector<CEntityDataInstantiator<CWatcherList>::HashEntry, CUtlMemory<CEntityDataInstantiator<CWatcherList>::HashEntry, int> >, CUtlMemory<CUtlVector<CEntityDataInstantiator<CWatcherList>::HashEntry, CUtlMemory<CEntityDataInstantiator<CWatcherList>::HashEntry, int> >, int> >::InsertMultipleBefore(int, int)
 T CUtlVector<CUtlVector<CEntityDataInstantiator<CWatcherList>::HashEntry, CUtlMemory<CEntityDataInstantiator<CWatcherList>::HashEntry, int> >, CUtlMemory<CUtlVector<CEntityDataInstantiator<CWatcherList>::HashEntry, CUtlMemory<CEntityDataInstantiator<CWatcherList>::HashEntry, int> >, int> >::~CUtlVector()
 T CUtlVector<CUtlVector<CEntityDataInstantiator<ModelScale>::HashEntry, CUtlMemory<CEntityDataInstantiator<ModelScale>::HashEntry, int> >, CUtlMemory<CUtlVector<CEntityDataInstantiator<ModelScale>::HashEntry, CUtlMemory<CEntityDataInstantiator<ModelScale>::HashEntry, int> >, int> >::InsertMultipleBefore(int, int)
 T CUtlVector<CUtlVector<CEntityDataInstantiator<ModelScale>::HashEntry, CUtlMemory<CEntityDataInstantiator<ModelScale>::HashEntry, int> >, CUtlMemory<CUtlVector<CEntityDataInstantiator<ModelScale>::HashEntry, CUtlMemory<CEntityDataInstantiator<ModelScale>::HashEntry, int> >, int> >::~CUtlVector()
 T CUtlVector<CUtlVector<CEntityDataInstantiator<StepSimulationData>::HashEntry, CUtlMemory<CEntityDataInstantiator<StepSimulationData>::HashEntry, int> >, CUtlMemory<CUtlVector<CEntityDataInstantiator<StepSimulationData>::HashEntry, CUtlMemory<CEntityDataInstantiator<StepSimulationData>::HashEntry, int> >, int> >::InsertMultipleBefore(int, int)
 T CUtlVector<CUtlVector<CEntityDataInstantiator<StepSimulationData>::HashEntry, CUtlMemory<CEntityDataInstantiator<StepSimulationData>::HashEntry, int> >, CUtlMemory<CUtlVector<CEntityDataInstantiator<StepSimulationData>::HashEntry, CUtlMemory<CEntityDataInstantiator<StepSimulationData>::HashEntry, int> >, int> >::~CUtlVector()
 T CUtlVector<CUtlVector<CEntityDataInstantiator<groundlink_t>::HashEntry, CUtlMemory<CEntityDataInstantiator<groundlink_t>::HashEntry, int> >, CUtlMemory<CUtlVector<CEntityDataInstantiator<groundlink_t>::HashEntry, CUtlMemory<CEntityDataInstantiator<groundlink_t>::HashEntry, int> >, int> >::InsertMultipleBefore(int, int)
 T CUtlVector<CUtlVector<CEntityDataInstantiator<groundlink_t>::HashEntry, CUtlMemory<CEntityDataInstantiator<groundlink_t>::HashEntry, int> >, CUtlMemory<CUtlVector<CEntityDataInstantiator<groundlink_t>::HashEntry, CUtlMemory<CEntityDataInstantiator<groundlink_t>::HashEntry, int> >, int> >::~CUtlVector()
 T CUtlVector<CUtlVector<CEntityDataInstantiator<physicspushlist_t>::HashEntry, CUtlMemory<CEntityDataInstantiator<physicspushlist_t>::HashEntry, int> >, CUtlMemory<CUtlVector<CEntityDataInstantiator<physicspushlist_t>::HashEntry, CUtlMemory<CEntityDataInstantiator<physicspushlist_t>::HashEntry, int> >, int> >::InsertMultipleBefore(int, int)
 T CUtlVector<CUtlVector<CEntityDataInstantiator<physicspushlist_t>::HashEntry, CUtlMemory<CEntityDataInstantiator<physicspushlist_t>::HashEntry, int> >, CUtlMemory<CUtlVector<CEntityDataInstantiator<physicspushlist_t>::HashEntry, CUtlMemory<CEntityDataInstantiator<physicspushlist_t>::HashEntry, int> >, int> >::~CUtlVector()
 T CUtlVector<CUtlVector<CEntityDataInstantiator<touchlink_t>::HashEntry, CUtlMemory<CEntityDataInstantiator<touchlink_t>::HashEntry, int> >, CUtlMemory<CUtlVector<CEntityDataInstantiator<touchlink_t>::HashEntry, CUtlMemory<CEntityDataInstantiator<touchlink_t>::HashEntry, int> >, int> >::InsertMultipleBefore(int, int)
 T CUtlVector<CUtlVector<CEntityDataInstantiator<touchlink_t>::HashEntry, CUtlMemory<CEntityDataInstantiator<touchlink_t>::HashEntry, int> >, CUtlMemory<CUtlVector<CEntityDataInstantiator<touchlink_t>::HashEntry, CUtlMemory<CEntityDataInstantiator<touchlink_t>::HashEntry, int> >, int> >::~CUtlVector()
 T CUtlVector<CUtlVector<CEntityDataInstantiator<vphysicsupdateai_t>::HashEntry, CUtlMemory<CEntityDataInstantiator<vphysicsupdateai_t>::HashEntry, int> >, CUtlMemory<CUtlVector<CEntityDataInstantiator<vphysicsupdateai_t>::HashEntry, CUtlMemory<CEntityDataInstantiator<vphysicsupdateai_t>::HashEntry, int> >, int> >::InsertMultipleBefore(int, int)
 T CUtlVector<CUtlVector<CEntityDataInstantiator<vphysicsupdateai_t>::HashEntry, CUtlMemory<CEntityDataInstantiator<vphysicsupdateai_t>::HashEntry, int> >, CUtlMemory<CUtlVector<CEntityDataInstantiator<vphysicsupdateai_t>::HashEntry, CUtlMemory<CEntityDataInstantiator<vphysicsupdateai_t>::HashEntry, int> >, int> >::~CUtlVector()
 T CUtlVector<CUtlVector<CGameSaveRestoreInfo::CHashElement, CUtlMemory<CGameSaveRestoreInfo::CHashElement, int> >, CUtlMemory<CUtlVector<CGameSaveRestoreInfo::CHashElement, CUtlMemory<CGameSaveRestoreInfo::CHashElement, int> >, int> >::InsertMultipleBefore(int, int)
 T CUtlVector<CUtlVector<CGameSaveRestoreInfo::CHashElement, CUtlMemory<CGameSaveRestoreInfo::CHashElement, int> >, CUtlMemory<CUtlVector<CGameSaveRestoreInfo::CHashElement, CUtlMemory<CGameSaveRestoreInfo::CHashElement, int> >, int> >::~CUtlVector()
 T CUtlVector<CUtlVector<CNavArea*, CUtlMemory<CNavArea*, int> >, CUtlMemory<CUtlVector<CNavArea*, CUtlMemory<CNavArea*, int> >, int> >::InsertMultipleBefore(int, int)
 T CUtlVector<CUtlVector<CNavArea*, CUtlMemory<CNavArea*, int> >, CUtlMemory<CUtlVector<CNavArea*, CUtlMemory<CNavArea*, int> >, int> >::~CUtlVector()
 T CUtlVector<CUtlVector<CNavNode*, CUtlMemory<CNavNode*, int> >, CUtlMemory<CUtlVector<CNavNode*, CUtlMemory<CNavNode*, int> >, int> >::InsertMultipleBefore(int, int)
 T CUtlVector<CUtlVector<CNavNode*, CUtlMemory<CNavNode*, int> >, CUtlMemory<CUtlVector<CNavNode*, CUtlMemory<CNavNode*, int> >, int> >::~CUtlVector()
 T CUtlVector<CUtlVector<CStudioHdr::CActivityToSequenceMapping::HashValueType, CUtlMemory<CStudioHdr::CActivityToSequenceMapping::HashValueType, int> >, CUtlMemory<CUtlVector<CStudioHdr::CActivityToSequenceMapping::HashValueType, CUtlMemory<CStudioHdr::CActivityToSequenceMapping::HashValueType, int> >, int> >::InsertMultipleBefore(int, int)
 T CUtlVector<CUtlVector<CStudioHdr::CActivityToSequenceMapping::HashValueType, CUtlMemory<CStudioHdr::CActivityToSequenceMapping::HashValueType, int> >, CUtlMemory<CUtlVector<CStudioHdr::CActivityToSequenceMapping::HashValueType, CUtlMemory<CStudioHdr::CActivityToSequenceMapping::HashValueType, int> >, int> >::~CUtlVector()
 T CUtlVector<CUtlVector<CUtlString, CUtlMemory<CUtlString, int> >, CUtlMemory<CUtlVector<CUtlString, CUtlMemory<CUtlString, int> >, int> >::~CUtlVector()
 T CUtlVector<CUtlVector<NavVisPair_t, CUtlMemory<NavVisPair_t, int> >, CUtlMemory<CUtlVector<NavVisPair_t, CUtlMemory<NavVisPair_t, int> >, int> >::InsertMultipleBefore(int, int)
 T CUtlVector<CUtlVector<NavVisPair_t, CUtlMemory<NavVisPair_t, int> >, CUtlMemory<CUtlVector<NavVisPair_t, CUtlMemory<NavVisPair_t, int> >, int> >::~CUtlVector()
 T CUtlVector<CUtlVector<VoiceCommandMenuItem_t, CUtlMemory<VoiceCommandMenuItem_t, int> >, CUtlMemory<CUtlVector<VoiceCommandMenuItem_t, CUtlMemory<VoiceCommandMenuItem_t, int> >, int> >::~CUtlVector()
 T CUtlVector<CUtlVector<ikcontextikrule_t, CUtlMemory<ikcontextikrule_t, int> >, CUtlMemory<CUtlVector<ikcontextikrule_t, CUtlMemory<ikcontextikrule_t, int> >, int> >::InsertMultipleBefore(int, int)
 T CUtlVector<CUtlVector<ikcontextikrule_t, CUtlMemory<ikcontextikrule_t, int> >, CUtlMemory<CUtlVector<ikcontextikrule_t, CUtlMemory<ikcontextikrule_t, int> >, int> >::~CUtlVector()
 T CUtlVector<CVProfNode*, CUtlMemory<CVProfNode*, int> >::~CUtlVector()
 T CUtlVector<CVarBitVec, CUtlMemory<CVarBitVec, int> >::InsertMultipleBefore(int, int)
 T CUtlVector<CVarBitVec, CUtlMemory<CVarBitVec, int> >::Purge()
 T CUtlVector<CVarBitVec, CUtlMemory<CVarBitVec, int> >::~CUtlVector()
 T CUtlVector<CWave*, CUtlMemory<CWave*, int> >::~CUtlVector()
 T CUtlVector<CWaveSpawnPopulator*, CUtlMemory<CWaveSpawnPopulator*, int> >::~CUtlVector()
 T CUtlVector<CWeaponMedigun::targetdetachtimes_t, CUtlMemory<CWeaponMedigun::targetdetachtimes_t, int> >::~CUtlVector()
 T CUtlVector<CWheelOfDoom*, CUtlMemory<CWheelOfDoom*, int> >::~CUtlVector()
 T CUtlVector<CWheelOfDoom::WOD_BaseEffect*, CUtlMemory<CWheelOfDoom::WOD_BaseEffect*, int> >::InsertBefore(int, CWheelOfDoom::WOD_BaseEffect* const&)
 T CUtlVector<CWheelOfDoom::WOD_BaseEffect*, CUtlMemory<CWheelOfDoom::WOD_BaseEffect*, int> >::~CUtlVector()
 T CUtlVector<CWheelOfDoom::WOD_Dance::MerasmusCreateInfo_t, CUtlMemory<CWheelOfDoom::WOD_Dance::MerasmusCreateInfo_t, int> >::AddToTail(CWheelOfDoom::WOD_Dance::MerasmusCreateInfo_t const&)
 T CUtlVector<Color, CUtlMemory<Color, int> >::GrowVector(int)
 T CUtlVector<Color, CUtlMemory<Color, int> >::~CUtlVector()
 T CUtlVector<EGameCategory, CUtlMemory<EGameCategory, int> >::~CUtlVector()
 T CUtlVector<EntityDamageHistory_t, CUtlMemory<EntityDamageHistory_t, int> >::~CUtlVector()
 T CUtlVector<EntityHistory_t, CUtlMemory<EntityHistory_t, int> >::~CUtlVector()
 T CUtlVector<GCSDK::CJobMgr::JobSleeping_t, CUtlMemory<GCSDK::CJobMgr::JobSleeping_t, int> >::InsertBefore(int)
 T CUtlVector<GCSDK::CJobMgr::JobSleeping_t, CUtlMemory<GCSDK::CJobMgr::JobSleeping_t, int> >::~CUtlVector()
 T CUtlVector<GCSDK::CLock*, CUtlMemoryFixedGrowable<GCSDK::CLock*, 2ul, int> >::InsertBefore(int, GCSDK::CLock* const&)
 T CUtlVector<GCSDK::CLock*, CUtlMemoryFixedGrowable<GCSDK::CLock*, 2ul, int> >::~CUtlVector()
 T CUtlVector<GCSDK::CProtoBufMsgMemoryPoolBase*, CUtlMemory<GCSDK::CProtoBufMsgMemoryPoolBase*, int> >::AddToTail(GCSDK::CProtoBufMsgMemoryPoolBase* const&)
 T CUtlVector<GCSDK::CProtoBufMsgMemoryPoolBase*, CUtlMemory<GCSDK::CProtoBufMsgMemoryPoolBase*, int> >::~CUtlVector()
 T CUtlVector<GCSDK::CSharedObject*, CUtlMemory<GCSDK::CSharedObject*, int> >::AddToTail(GCSDK::CSharedObject* const&)
 T CUtlVector<GCSDK::CSharedObject*, CUtlMemory<GCSDK::CSharedObject*, int> >::~CUtlVector()
 T CUtlVector<GCSDK::CSharedObject*, CUtlMemoryFixedGrowable<GCSDK::CSharedObject*, 1ul, int> >::InsertBefore(int, GCSDK::CSharedObject* const&)
 T CUtlVector<GCSDK::CSharedObject*, CUtlMemoryFixedGrowable<GCSDK::CSharedObject*, 1ul, int> >::~CUtlVector()
 T CUtlVector<GCSDK::CWorkItem*, CUtlMemory<GCSDK::CWorkItem*, int> >::~CUtlVector()
 T CUtlVector<GCSDK::CWorkThread*, CUtlMemory<GCSDK::CWorkThread*, int> >::~CUtlVector()
 T CUtlVector<GCSDK::IMsgNetPacket*, CUtlMemoryFixedGrowable<GCSDK::IMsgNetPacket*, 1ul, int> >::InsertBefore(int, GCSDK::IMsgNetPacket* const&)
 T CUtlVector<GCSDK::IMsgNetPacket*, CUtlMemoryFixedGrowable<GCSDK::IMsgNetPacket*, 1ul, int> >::~CUtlVector()
 T CUtlVector<GCSDK::ISharedObjectListener*, CUtlMemory<GCSDK::ISharedObjectListener*, int> >::~CUtlVector()
 T CUtlVector<GCSDK::MsgInfo_t, CUtlMemory<GCSDK::MsgInfo_t, int> >::~CUtlVector()
 T CUtlVector<GestureSlot_t, CUtlMemory<GestureSlot_t, int> >::InsertMultipleBefore(int, int)
 T CUtlVector<GestureSlot_t, CUtlMemory<GestureSlot_t, int> >::~CUtlVector()
 T CUtlVector<IBaseObjectAutoList*, CUtlMemory<IBaseObjectAutoList*, int> >::~CUtlVector()
 T CUtlVector<IBaseProjectileAutoList*, CUtlMemory<IBaseProjectileAutoList*, int> >::~CUtlVector()
 T CUtlVector<IBonusPackAutoList*, CUtlMemory<IBonusPackAutoList*, int> >::~CUtlVector()
 T CUtlVector<ICaptureFlagAutoList*, CUtlMemory<ICaptureFlagAutoList*, int> >::~CUtlVector()
 T CUtlVector<ICaptureZoneAutoList*, CUtlMemory<ICaptureZoneAutoList*, int> >::~CUtlVector()
 T CUtlVector<ICurrencyPackAutoList*, CUtlMemory<ICurrencyPackAutoList*, int> >::~CUtlVector()
 T CUtlVector<IDroppedWeaponAutoList*, CUtlMemory<IDroppedWeaponAutoList*, int> >::~CUtlVector()
 T CUtlVector<IEntityListener*, CUtlMemory<IEntityListener*, int> >::~CUtlVector()
 T CUtlVector<IExtraMapEntityAutoList*, CUtlMemory<IExtraMapEntityAutoList*, int> >::~CUtlVector()
 T CUtlVector<IEyeballBossAutoList*, CUtlMemory<IEyeballBossAutoList*, int> >::~CUtlVector()
 T CUtlVector<IFlagDetectionZoneAutoList*, CUtlMemory<IFlagDetectionZoneAutoList*, int> >::~CUtlVector()
 T CUtlVector<IFuncForceFieldAutoList*, CUtlMemory<IFuncForceFieldAutoList*, int> >::~CUtlVector()
 T CUtlVector<IFuncNavPrerequisiteAutoList*, CUtlMemory<IFuncNavPrerequisiteAutoList*, int> >::~CUtlVector()
 T CUtlVector<IFuncNoBuildAutoList*, CUtlMemory<IFuncNoBuildAutoList*, int> >::~CUtlVector()
 T CUtlVector<IFuncPasstimeGoalieZoneAutoList*, CUtlMemory<IFuncPasstimeGoalieZoneAutoList*, int> >::~CUtlVector()
 T CUtlVector<IFuncPasstimeNoBallZoneAutoList*, CUtlMemory<IFuncPasstimeNoBallZoneAutoList*, int> >::~CUtlVector()
 T CUtlVector<IFuncPowerupVolumeAutoList*, CUtlMemory<IFuncPowerupVolumeAutoList*, int> >::~CUtlVector()
 T CUtlVector<IFuncRespawnRoomAutoList*, CUtlMemory<IFuncRespawnRoomAutoList*, int> >::~CUtlVector()
 T CUtlVector<IFuncRespawnRoomVisualizerAutoList*, CUtlMemory<IFuncRespawnRoomVisualizerAutoList*, int> >::~CUtlVector()
 T CUtlVector<IGameSystem*, CUtlMemory<IGameSystem*, int> >::~CUtlVector()
 T CUtlVector<IGameSystemPerFrame*, CUtlMemory<IGameSystemPerFrame*, int> >::~CUtlVector()
 T CUtlVector<IHalloweenGiftSpawnAutoList*, CUtlMemory<IHalloweenGiftSpawnAutoList*, int> >::~CUtlVector()
 T CUtlVector<IHandleEntity*, CUtlMemory<IHandleEntity*, int> >::InsertMultipleBefore(int, int)
 T CUtlVector<IHandleEntity*, CUtlMemory<IHandleEntity*, int> >::~CUtlVector()
 T CUtlVector<IHealthKitAutoList*, CUtlMemory<IHealthKitAutoList*, int> >::~CUtlVector()
 T CUtlVector<IInfoPowerupSpawnAutoList*, CUtlMemory<IInfoPowerupSpawnAutoList*, int> >::~CUtlVector()
 T CUtlVector<IMerasmusAutoList*, CUtlMemory<IMerasmusAutoList*, int> >::~CUtlVector()
 T CUtlVector<IMinigameAutoList*, CUtlMemory<IMinigameAutoList*, int> >::~CUtlVector()
 T CUtlVector<INavAvoidanceObstacle*, CUtlMemory<INavAvoidanceObstacle*, int> >::~CUtlVector()
 T CUtlVector<INextBot*, CUtlMemory<INextBot*, int> >::~CUtlVector()
 T CUtlVector<INextBot::NextBotDebugLineType*, CUtlMemory<INextBot::NextBotDebugLineType*, int> >::~CUtlVector()
 T CUtlVector<IParticleOperatorDefinition*, CUtlMemory<IParticleOperatorDefinition*, int> >::~CUtlVector()
 T CUtlVector<IPasstimeBallSpawnAutoList*, CUtlMemory<IPasstimeBallSpawnAutoList*, int> >::~CUtlVector()
 T CUtlVector<IPhysicsPropAutoList*, CUtlMemory<IPhysicsPropAutoList*, int> >::~CUtlVector()
 T CUtlVector<IPopulationSpawner*, CUtlMemory<IPopulationSpawner*, int> >::AddToTail(IPopulationSpawner* const&)
 T CUtlVector<IPopulationSpawner*, CUtlMemory<IPopulationSpawner*, int> >::~CUtlVector()
 T CUtlVector<IPopulator*, CUtlMemory<IPopulator*, int> >::AddToTail(IPopulator* const&)
 T CUtlVector<IPopulator*, CUtlMemory<IPopulator*, int> >::~CUtlVector()
 T CUtlVector<IResponseSystem*, CUtlMemory<IResponseSystem*, int> >::InsertMultipleBefore(int, int)
 T CUtlVector<IResponseSystem*, CUtlMemory<IResponseSystem*, int> >::~CUtlVector()
 T CUtlVector<IRobotDestructionGroupAutoList*, CUtlMemory<IRobotDestructionGroupAutoList*, int> >::~CUtlVector()
 T CUtlVector<ISaveRestoreBlockHandler*, CUtlMemory<ISaveRestoreBlockHandler*, int> >::~CUtlVector()
 T CUtlVector<IServerNetworkable*, CUtlMemory<IServerNetworkable*, int> >::~CUtlVector()
 T CUtlVector<ITFBotHintEntityAutoList*, CUtlMemory<ITFBotHintEntityAutoList*, int> >::~CUtlVector()
 T CUtlVector<ITFFlameEntityAutoList*, CUtlMemory<ITFFlameEntityAutoList*, int> >::~CUtlVector()
 T CUtlVector<ITFGenericBomb*, CUtlMemory<ITFGenericBomb*, int> >::~CUtlVector()
 T CUtlVector<ITFMerasmusTrickOrTreatProp*, CUtlMemory<ITFMerasmusTrickOrTreatProp*, int> >::~CUtlVector()
 T CUtlVector<ITFPumpkinBomb*, CUtlMemory<ITFPumpkinBomb*, int> >::~CUtlVector()
 T CUtlVector<ITFTargetDummy*, CUtlMemory<ITFTargetDummy*, int> >::~CUtlVector()
 T CUtlVector<ITFTeamSpawnAutoList*, CUtlMemory<ITFTeamSpawnAutoList*, int> >::~CUtlVector()
 T CUtlVector<ITFTeamTrainWatcher*, CUtlMemory<ITFTeamTrainWatcher*, int> >::~CUtlVector()
 T CUtlVector<ITFTeleportLocationAutoList*, CUtlMemory<ITFTeleportLocationAutoList*, int> >::~CUtlVector()
 T CUtlVector<ITriggerAreaCaptureAutoList*, CUtlMemory<ITriggerAreaCaptureAutoList*, int> >::~CUtlVector()
 T CUtlVector<ITriggerHurtAutoList*, CUtlMemory<ITriggerHurtAutoList*, int> >::~CUtlVector()
 T CUtlVector<ITriggerPlayerRespawnOverride*, CUtlMemory<ITriggerPlayerRespawnOverride*, int> >::~CUtlVector()
 T CUtlVector<IZombieAutoList*, CUtlMemory<IZombieAutoList*, int> >::~CUtlVector()
 T CUtlVector<IncursionEntry_t, CUtlMemory<IncursionEntry_t, int> >::~CUtlVector()
 T CUtlVector<KeyValues*, CUtlMemory<KeyValues*, int> >::GrowVector(int)
 T CUtlVector<KeyValues*, CUtlMemory<KeyValues*, int> >::~CUtlVector()
 T CUtlVector<LeaderboardEntry_t*, CUtlMemory<LeaderboardEntry_t*, int> >::GrowVector(int)
 T CUtlVector<LeaderboardEntry_t*, CUtlMemory<LeaderboardEntry_t*, int> >::~CUtlVector()
 T CUtlVector<LevelInfo_t, CUtlMemory<LevelInfo_t, int> >::GrowVector(int)
 T CUtlVector<LevelInfo_t, CUtlMemory<LevelInfo_t, int> >::~CUtlVector()
 T CUtlVector<MapDef_t const*, CUtlMemory<MapDef_t const*, int> >::AddToTail(MapDef_t const* const&)
 T CUtlVector<MapDef_t const*, CUtlMemory<MapDef_t const*, int> >::~CUtlVector()
 T CUtlVector<MapDef_t*, CUtlMemory<MapDef_t*, int> >::PurgeAndDeleteElements()
 T CUtlVector<MapDef_t*, CUtlMemory<MapDef_t*, int> >::~CUtlVector()
 T CUtlVector<MapNameAndPlaytime_t, CUtlMemory<MapNameAndPlaytime_t, int> >::~CUtlVector()
 T CUtlVector<MvMMap_t, CUtlMemory<MvMMap_t, int> >::Purge()
 T CUtlVector<MvMMap_t, CUtlMemory<MvMMap_t, int> >::~CUtlVector()
 T CUtlVector<MvMMission_t, CUtlMemory<MvMMission_t, int> >::~CUtlVector()
 T CUtlVector<MvMTourMission_t, CUtlMemory<MvMTourMission_t, int> >::GrowVector(int)
 T CUtlVector<MvMTourMission_t, CUtlMemory<MvMTourMission_t, int> >::~CUtlVector()
 T CUtlVector<MvMTour_t, CUtlMemory<MvMTour_t, int> >::~CUtlVector()
 T CUtlVector<NavConnect const*, CUtlMemoryFixedGrowable<NavConnect const*, 64ul, int> >::InsertBefore(int, NavConnect const* const&)
 T CUtlVector<NavConnect const*, CUtlMemoryFixedGrowable<NavConnect const*, 64ul, int> >::~CUtlVector()
 T CUtlVector<NavVisPair_t, CUtlMemory<NavVisPair_t, int> >::~CUtlVector()
 T CUtlVector<NextBotManager::DebugFilter, CUtlMemory<NextBotManager::DebugFilter, int> >::AddToTail(NextBotManager::DebugFilter const&)
 T CUtlVector<NextBotManager::DebugFilter, CUtlMemory<NextBotManager::DebugFilter, int> >::~CUtlVector()
 T CUtlVector<OneWayLink_t, CUtlMemoryFixedGrowable<OneWayLink_t, 512ul, int> >::InsertBefore(int, OneWayLink_t const&)
 T CUtlVector<OneWayLink_t, CUtlMemoryFixedGrowable<OneWayLink_t, 512ul, int> >::~CUtlVector()
 T CUtlVector<ParticleChildrenInfo_t, CUtlMemory<ParticleChildrenInfo_t, int> >::~CUtlVector()
 T CUtlVector<PlayerArenaRoundScore_t, CUtlMemory<PlayerArenaRoundScore_t, int> >::~CUtlVector()
 T CUtlVector<PlayerHistoryInfo_t, CUtlMemory<PlayerHistoryInfo_t, int> >::~CUtlVector()
 T CUtlVector<PlayerRoundScore_t, CUtlMemory<PlayerRoundScore_t, int> >::~CUtlVector()
 T CUtlVector<QAngle, CUtlMemory<QAngle, int> >::GrowVector(int)
 T CUtlVector<QAngle, CUtlMemory<QAngle, int> >::~CUtlVector()
 T CUtlVector<Quaternion, CUtlMemory<Quaternion, int> >::GrowVector(int)
 T CUtlVector<Quaternion, CUtlMemory<Quaternion, int> >::~CUtlVector()
 T CUtlVector<Relationship_t, CUtlMemory<Relationship_t, int> >::GrowVector(int)
 T CUtlVector<Relationship_t, CUtlMemory<Relationship_t, int> >::~CUtlVector()
 T CUtlVector<Response, CUtlMemory<Response, int> >::AddToTail(Response const&)
 T CUtlVector<Response, CUtlMemory<Response, int> >::~CUtlVector()
 T CUtlVector<ResponseContext_t, CUtlMemory<ResponseContext_t, int> >::GrowVector(int)
 T CUtlVector<ResponseContext_t, CUtlMemory<ResponseContext_t, int> >::~CUtlVector()
 T CUtlVector<SaveRestoreBlockHeader_t, CUtlMemory<SaveRestoreBlockHeader_t, int> >::InsertMultipleBefore(int, int)
 T CUtlVector<SaveRestoreBlockHeader_t, CUtlMemory<SaveRestoreBlockHeader_t, int> >::~CUtlVector()
 T CUtlVector<SchemaGameCategory_t const*, CUtlMemory<SchemaGameCategory_t const*, int> >::~CUtlVector()
 T CUtlVector<SchemaMMGameModeRestriction_t, CUtlMemory<SchemaMMGameModeRestriction_t, int> >::~CUtlVector()
 T CUtlVector<ScriptedNPCInteraction_t, CUtlMemory<ScriptedNPCInteraction_t, int> >::GrowVector(int)
 T CUtlVector<ScriptedNPCInteraction_t, CUtlMemory<ScriptedNPCInteraction_t, int> >::InsertBefore(int)
 T CUtlVector<ScriptedNPCInteraction_t, CUtlMemory<ScriptedNPCInteraction_t, int> >::InsertMultipleBefore(int, int)
 T CUtlVector<ScriptedNPCInteraction_t, CUtlMemory<ScriptedNPCInteraction_t, int> >::~CUtlVector()
 T CUtlVector<SlideKeywordList_t*, CUtlMemory<SlideKeywordList_t*, int> >::InsertBefore(int, SlideKeywordList_t* const&)
 T CUtlVector<SlideKeywordList_t*, CUtlMemory<SlideKeywordList_t*, int> >::~CUtlVector()
 T CUtlVector<SoundCommand_t*, CUtlMemory<SoundCommand_t*, int> >::~CUtlVector()
 T CUtlVector<SpotOrder, CUtlMemory<SpotOrder, int> >::~CUtlVector()
 T CUtlVector<TeleportListEntry_t, CUtlMemory<TeleportListEntry_t, int> >::~CUtlVector()
 T CUtlVector<TemplateEntityData_t*, CUtlMemory<TemplateEntityData_t*, int> >::AddToTail(TemplateEntityData_t* const&)
 T CUtlVector<TemplateEntityData_t*, CUtlMemory<TemplateEntityData_t*, int> >::~CUtlVector()
 T CUtlVector<UniqueId_t, CUtlMemory<UniqueId_t, int> >::GrowVector(int)
 T CUtlVector<UniqueId_t, CUtlMemory<UniqueId_t, int> >::~CUtlVector()
 T CUtlVector<UnreachableEnt_t, CUtlMemory<UnreachableEnt_t, int> >::GrowVector(int)
 T CUtlVector<UnreachableEnt_t, CUtlMemory<UnreachableEnt_t, int> >::~CUtlVector()
 T CUtlVector<VMatrix, CUtlMemory<VMatrix, int> >::GrowVector(int)
 T CUtlVector<VMatrix, CUtlMemory<VMatrix, int> >::~CUtlVector()
 T CUtlVector<Vector, CUtlMemory<Vector, int> >::AddToTail(Vector const&)
 T CUtlVector<Vector, CUtlMemory<Vector, int> >::GrowVector(int)
 T CUtlVector<Vector, CUtlMemory<Vector, int> >::~CUtlVector()
 T CUtlVector<Vector2D, CUtlMemory<Vector2D, int> >::GrowVector(int)
 T CUtlVector<Vector2D, CUtlMemory<Vector2D, int> >::~CUtlVector()
 T CUtlVector<Vector4D, CUtlMemory<Vector4D, int> >::GrowVector(int)
 T CUtlVector<Vector4D, CUtlMemory<Vector4D, int> >::~CUtlVector()
 T CUtlVector<VoiceCommandMenuItem_t, CUtlMemory<VoiceCommandMenuItem_t, int> >::~CUtlVector()
 T CUtlVector<WaveClassCount_t, CUtlMemory<WaveClassCount_t, int> >::~CUtlVector()
 T CUtlVector<activity_on_wearable_t, CUtlMemory<activity_on_wearable_t, int> >::GrowVector(int)
 T CUtlVector<activity_on_wearable_t, CUtlMemory<activity_on_wearable_t, int> >::~CUtlVector()
 T CUtlVector<activitylist_t, CUtlMemory<activitylist_t, int> >::~CUtlVector()
 T CUtlVector<animation_on_wearable_t, CUtlMemory<animation_on_wearable_t, int> >::GrowVector(int)
 T CUtlVector<animation_on_wearable_t, CUtlMemory<animation_on_wearable_t, int> >::~CUtlVector()
 T CUtlVector<attachedmodel_t, CUtlMemory<attachedmodel_t, int> >::GrowVector(int)
 T CUtlVector<attachedmodel_t, CUtlMemory<attachedmodel_t, int> >::~CUtlVector()
 T CUtlVector<attachedparticlesystem_t, CUtlMemory<attachedparticlesystem_t, int> >::GrowVector(int)
 T CUtlVector<attachedparticlesystem_t, CUtlMemory<attachedparticlesystem_t, int> >::operator=(CUtlVector<attachedparticlesystem_t, CUtlMemory<attachedparticlesystem_t, int> > const&)
 T CUtlVector<attachedparticlesystem_t, CUtlMemory<attachedparticlesystem_t, int> >::~CUtlVector()
 T CUtlVector<attr_type_t, CUtlMemory<attr_type_t, int> >::InsertBefore(int, attr_type_t const&)
 T CUtlVector<attr_type_t, CUtlMemory<attr_type_t, int> >::~CUtlVector()
 T CUtlVector<bbox_t, CUtlMemory<bbox_t, int> >::InsertMultipleBefore(int, int)
 T CUtlVector<bbox_t, CUtlMemory<bbox_t, int> >::~CUtlVector()
 T CUtlVector<bool (*)(), CUtlMemory<bool (*)(), int> >::~CUtlVector()
 T CUtlVector<bool, CUtlMemory<bool, int> >::GrowVector(int)
 T CUtlVector<bool, CUtlMemory<bool, int> >::InsertMultipleBefore(int, int)
 T CUtlVector<bool, CUtlMemory<bool, int> >::~CUtlVector()
 T CUtlVector<botdata_t::CommandInfo, CUtlMemory<botdata_t::CommandInfo, int> >::AddToTail()
 T CUtlVector<botdata_t::CommandInfo, CUtlMemory<botdata_t::CommandInfo, int> >::~CUtlVector()
 T CUtlVector<breakmodel_t, CUtlMemory<breakmodel_t, int> >::~CUtlVector()
 T CUtlVector<char const*, CUtlMemory<char const*, int> >::AddToTail(char const* const&)
 T CUtlVector<char const*, CUtlMemory<char const*, int> >::GrowVector(int)
 T CUtlVector<char const*, CUtlMemory<char const*, int> >::InsertBefore(int, char const* const&)
 T CUtlVector<char const*, CUtlMemory<char const*, int> >::~CUtlVector()
 T CUtlVector<char*, CUtlMemory<char*, int> >::AddToTail(char* const&)
 T CUtlVector<char*, CUtlMemory<char*, int> >::GrowVector(int)
 T CUtlVector<char*, CUtlMemory<char*, int> >::~CUtlVector()
 T CUtlVector<clusterSoundscapeList_t, CUtlMemory<clusterSoundscapeList_t, int> >::InsertMultipleBefore(int, int)
 T CUtlVector<clusterSoundscapeList_t, CUtlMemory<clusterSoundscapeList_t, int> >::~CUtlVector()
 T CUtlVector<collidelist_t, CUtlMemory<collidelist_t, int> >::AddToTail(collidelist_t const&)
 T CUtlVector<collidelist_t, CUtlMemory<collidelist_t, int> >::~CUtlVector()
 T CUtlVector<condition_source_t, CUtlMemory<condition_source_t, int> >::InsertMultipleBefore(int, int)
 T CUtlVector<condition_source_t, CUtlMemory<condition_source_t, int> >::~CUtlVector()
 T CUtlVector<constraint_anchor_t, CUtlMemory<constraint_anchor_t, int> >::~CUtlVector()
 T CUtlVector<damageevent_t, CUtlMemory<damageevent_t, int> >::~CUtlVector()
 T CUtlVector<duel_minigame_data_t, CUtlMemory<duel_minigame_data_t, int> >::~CUtlVector()
 T CUtlVector<entitynotify_t, CUtlMemory<entitynotify_t, int> >::~CUtlVector()
 T CUtlVector<eventlist_t, CUtlMemory<eventlist_t, int> >::~CUtlVector()
 T CUtlVector<float, CUtlMemory<float, int> >::AddToTail(float const&)
 T CUtlVector<float, CUtlMemory<float, int> >::GrowVector(int)
 T CUtlVector<float, CUtlMemory<float, int> >::InsertMultipleBefore(int, int)
 T CUtlVector<float, CUtlMemory<float, int> >::~CUtlVector()
 T CUtlVector<fluidevent_t, CUtlMemory<fluidevent_t, int> >::~CUtlVector()
 T CUtlVector<globalentity_t, CUtlMemory<globalentity_t, int> >::GrowVector(int)
 T CUtlVector<globalentity_t, CUtlMemory<globalentity_t, int> >::~CUtlVector()
 T CUtlVector<grouptemplate_t, CUtlMemory<grouptemplate_t, int> >::~CUtlVector()
 T CUtlVector<ikcontextikrule_t, CUtlMemory<ikcontextikrule_t, int> >::GrowVector(int)
 T CUtlVector<ikcontextikrule_t, CUtlMemory<ikcontextikrule_t, int> >::~CUtlVector()
 T CUtlVector<inflictorstate_t, CUtlMemory<inflictorstate_t, int> >::~CUtlVector()
 T CUtlVector<int, CUtlMemory<int, int> >::AddToHead(int const&)
 T CUtlVector<int, CUtlMemory<int, int> >::AddToTail(int const&)
 T CUtlVector<int, CUtlMemory<int, int> >::GrowVector(int)
 T CUtlVector<int, CUtlMemory<int, int> >::InsertMultipleBefore(int, int)
 T CUtlVector<int, CUtlMemory<int, int> >::~CUtlVector()
 T CUtlVector<magnetted_objects_t, CUtlMemory<magnetted_objects_t, int> >::GrowVector(int)
 T CUtlVector<magnetted_objects_t, CUtlMemory<magnetted_objects_t, int> >::~CUtlVector()
 T CUtlVector<masscenteroverride_t, CUtlMemory<masscenteroverride_t, int> >::~CUtlVector()
 T CUtlVector<modifiedconvars_t, CUtlMemory<modifiedconvars_t, int> >::GrowVector(int)
 T CUtlVector<modifiedconvars_t, CUtlMemory<modifiedconvars_t, int> >::~CUtlVector()
 T CUtlVector<penetrated_target_list, CUtlMemory<penetrated_target_list, int> >::~CUtlVector()
 T CUtlVector<penetrateevent_t, CUtlMemory<penetrateevent_t, int> >::~CUtlVector()
 T CUtlVector<physfollower_t, CUtlMemory<physfollower_t, int> >::GrowVector(int)
 T CUtlVector<physfollower_t, CUtlMemory<physfollower_t, int> >::~CUtlVector()
 T CUtlVector<physicssound::breaksound_t, CUtlMemory<physicssound::breaksound_t, int> >::~CUtlVector()
 T CUtlVector<physicssound::impactsound_t, CUtlMemory<physicssound::impactsound_t, int> >::~CUtlVector()
 T CUtlVector<schema_string_table_entry_t, CUtlMemory<schema_string_table_entry_t, int> >::~CUtlVector()
 T CUtlVector<short*, CUtlMemory<short*, int> >::~CUtlVector()
 T CUtlVector<short, CUtlMemory<short, int> >::AddToTail(short const&)
 T CUtlVector<short, CUtlMemory<short, int> >::~CUtlVector()
 T CUtlVector<simthinkentry_t, CUtlMemory<simthinkentry_t, int> >::~CUtlVector()
 T CUtlVector<static_attrib_t, CUtlMemory<static_attrib_t, int> >::GrowVector(int)
 T CUtlVector<static_attrib_t, CUtlMemory<static_attrib_t, int> >::~CUtlVector()
 T CUtlVector<std::pair<CTFPlayer*, float>, CUtlMemory<std::pair<CTFPlayer*, float>, int> >::AddToTail(std::pair<CTFPlayer*, float> const&)
 T CUtlVector<std::pair<CTFPlayer*, float>, CUtlMemory<std::pair<CTFPlayer*, float>, int> >::~CUtlVector()
 T CUtlVector<std::pair<char const*, int>, CUtlMemory<std::pair<char const*, int>, int> >::~CUtlVector()
 T CUtlVector<string_t, CUtlMemory<string_t, int> >::~CUtlVector()
 T CUtlVector<studiohdr_t const*, CUtlMemory<studiohdr_t const*, int> >::InsertMultipleBefore(int, int)
 T CUtlVector<studiohdr_t const*, CUtlMemory<studiohdr_t const*, int> >::~CUtlVector()
 T CUtlVector<stun_struct_t, CUtlMemory<stun_struct_t, int> >::AddToTail(stun_struct_t const&)
 T CUtlVector<stun_struct_t, CUtlMemory<stun_struct_t, int> >::~CUtlVector()
 T CUtlVector<template_t, CUtlMemory<template_t, int> >::GrowVector(int)
 T CUtlVector<template_t, CUtlMemory<template_t, int> >::~CUtlVector()
 T CUtlVector<thinkfunc_t, CUtlMemory<thinkfunc_t, int> >::InsertMultipleBefore(int, int)
 T CUtlVector<thinkfunc_t, CUtlMemory<thinkfunc_t, int> >::~CUtlVector()
 T CUtlVector<touchevent_t, CUtlMemory<touchevent_t, int> >::~CUtlVector()
 T CUtlVector<triggerevent_t, CUtlMemory<triggerevent_t, int> >::~CUtlVector()
 T CUtlVector<unsigned int, CUtlMemory<unsigned int, int> >::AddToTail(unsigned int const&)
 T CUtlVector<unsigned int, CUtlMemory<unsigned int, int> >::GrowVector(int)
 T CUtlVector<unsigned int, CUtlMemory<unsigned int, int> >::~CUtlVector()
 T CUtlVector<unsigned long long, CUtlMemory<unsigned long long, int> >::AddToTail(unsigned long long const&)
 T CUtlVector<unsigned long long, CUtlMemory<unsigned long long, int> >::InsertMultipleBefore(int, int)
 T CUtlVector<unsigned long long, CUtlMemory<unsigned long long, int> >::~CUtlVector()
 T CUtlVector<unsigned long, CUtlMemory<unsigned long, int> >::~CUtlVector()
 T CUtlVector<unsigned short, CUtlMemory<unsigned short, int> >::AddToTail(unsigned short const&)
 T CUtlVector<unsigned short, CUtlMemory<unsigned short, int> >::GrowVector(int)
 T CUtlVector<unsigned short, CUtlMemory<unsigned short, int> >::InsertMultipleBefore(int, int)
 T CUtlVector<unsigned short, CUtlMemory<unsigned short, int> >::~CUtlVector()
 T CUtlVector<vehicle_crashsound_t, CUtlMemory<vehicle_crashsound_t, int> >::GrowVector(int)
 T CUtlVector<vehicle_crashsound_t, CUtlMemory<vehicle_crashsound_t, int> >::InsertMultipleBefore(int, int)
 T CUtlVector<vehicle_crashsound_t, CUtlMemory<vehicle_crashsound_t, int> >::~CUtlVector()
 T CUtlVector<vehicle_gear_t, CUtlMemory<vehicle_gear_t, int> >::GrowVector(int)
 T CUtlVector<vehicle_gear_t, CUtlMemory<vehicle_gear_t, int> >::InsertMultipleBefore(int, int)
 T CUtlVector<vehicle_gear_t, CUtlMemory<vehicle_gear_t, int> >::~CUtlVector()
 T CUtlVector<vehiclescript_t, CUtlMemory<vehiclescript_t, int> >::~CUtlVector()
 T CUtlVector<void (*)(bf_read&), CUtlMemory<void (*)(bf_read&), int> >::~CUtlVector()
 T CUtlVector<void*, CUtlMemory<void*, int> >::AddToTail(void* const&)
 T CUtlVector<void*, CUtlMemory<void*, int> >::~CUtlVector()
 T CUtlVectorConservative<CNavArea::AreaBindInfo>::~CUtlVectorConservative()
 T CUtlVectorDataOps<CAI_InterestTarget, 10>::IsEmpty(SaveRestoreFieldInfo_t const&)
 T CUtlVectorDataOps<CAI_InterestTarget, 10>::MakeEmpty(SaveRestoreFieldInfo_t const&)
 T CUtlVectorDataOps<CAI_InterestTarget, 10>::Restore(SaveRestoreFieldInfo_t const&, IRestore*)
 T CUtlVectorDataOps<CAI_InterestTarget, 10>::Save(SaveRestoreFieldInfo_t const&, ISave*)
 T CUtlVectorDataOps<CUtlVector<AISquadEnemyInfo_t, CUtlMemory<AISquadEnemyInfo_t, int> >, 10>::IsEmpty(SaveRestoreFieldInfo_t const&)
 T CUtlVectorDataOps<CUtlVector<AISquadEnemyInfo_t, CUtlMemory<AISquadEnemyInfo_t, int> >, 10>::MakeEmpty(SaveRestoreFieldInfo_t const&)
 T CUtlVectorDataOps<CUtlVector<AISquadEnemyInfo_t, CUtlMemory<AISquadEnemyInfo_t, int> >, 10>::Restore(SaveRestoreFieldInfo_t const&, IRestore*)
 T CUtlVectorDataOps<CUtlVector<AISquadEnemyInfo_t, CUtlMemory<AISquadEnemyInfo_t, int> >, 10>::Save(SaveRestoreFieldInfo_t const&, ISave*)
 T CUtlVectorDataOps<CUtlVector<AI_Waypoint_t, CUtlMemory<AI_Waypoint_t, int> >, 10>::IsEmpty(SaveRestoreFieldInfo_t const&)
 T CUtlVectorDataOps<CUtlVector<AI_Waypoint_t, CUtlMemory<AI_Waypoint_t, int> >, 10>::MakeEmpty(SaveRestoreFieldInfo_t const&)
 T CUtlVectorDataOps<CUtlVector<AI_Waypoint_t, CUtlMemory<AI_Waypoint_t, int> >, 10>::Restore(SaveRestoreFieldInfo_t const&, IRestore*)
 T CUtlVectorDataOps<CUtlVector<AI_Waypoint_t, CUtlMemory<AI_Waypoint_t, int> >, 10>::Save(SaveRestoreFieldInfo_t const&, ISave*)
 T CUtlVectorDataOps<CUtlVector<CAI_ScriptConditionsElement, CUtlMemory<CAI_ScriptConditionsElement, int> >, 10>::IsEmpty(SaveRestoreFieldInfo_t const&)
 T CUtlVectorDataOps<CUtlVector<CAI_ScriptConditionsElement, CUtlMemory<CAI_ScriptConditionsElement, int> >, 10>::MakeEmpty(SaveRestoreFieldInfo_t const&)
 T CUtlVectorDataOps<CUtlVector<CAI_ScriptConditionsElement, CUtlMemory<CAI_ScriptConditionsElement, int> >, 10>::Restore(SaveRestoreFieldInfo_t const&, IRestore*)
 T CUtlVectorDataOps<CUtlVector<CAI_ScriptConditionsElement, CUtlMemory<CAI_ScriptConditionsElement, int> >, 10>::Save(SaveRestoreFieldInfo_t const&, ISave*)
 T CUtlVectorDataOps<CUtlVector<CAnimationLayer, CUtlMemory<CAnimationLayer, int> >, 10>::IsEmpty(SaveRestoreFieldInfo_t const&)
 T CUtlVectorDataOps<CUtlVector<CAnimationLayer, CUtlMemory<CAnimationLayer, int> >, 10>::MakeEmpty(SaveRestoreFieldInfo_t const&)
 T CUtlVectorDataOps<CUtlVector<CAnimationLayer, CUtlMemory<CAnimationLayer, int> >, 10>::Restore(SaveRestoreFieldInfo_t const&, IRestore*)
 T CUtlVectorDataOps<CUtlVector<CAnimationLayer, CUtlMemory<CAnimationLayer, int> >, 10>::Save(SaveRestoreFieldInfo_t const&, ISave*)
 T CUtlVectorDataOps<CUtlVector<CBaseEntity*, CUtlMemory<CBaseEntity*, int> >, 12>::IsEmpty(SaveRestoreFieldInfo_t const&)
 T CUtlVectorDataOps<CUtlVector<CBaseEntity*, CUtlMemory<CBaseEntity*, int> >, 12>::MakeEmpty(SaveRestoreFieldInfo_t const&)
 T CUtlVectorDataOps<CUtlVector<CBaseEntity*, CUtlMemory<CBaseEntity*, int> >, 12>::Restore(SaveRestoreFieldInfo_t const&, IRestore*)
 T CUtlVectorDataOps<CUtlVector<CBaseEntity*, CUtlMemory<CBaseEntity*, int> >, 12>::Save(SaveRestoreFieldInfo_t const&, ISave*)
 T CUtlVectorDataOps<CUtlVector<CHandle<CAI_BaseNPC>, CUtlMemory<CHandle<CAI_BaseNPC>, int> >, 13>::IsEmpty(SaveRestoreFieldInfo_t const&)
 T CUtlVectorDataOps<CUtlVector<CHandle<CAI_BaseNPC>, CUtlMemory<CHandle<CAI_BaseNPC>, int> >, 13>::MakeEmpty(SaveRestoreFieldInfo_t const&)
 T CUtlVectorDataOps<CUtlVector<CHandle<CAI_BaseNPC>, CUtlMemory<CHandle<CAI_BaseNPC>, int> >, 13>::Restore(SaveRestoreFieldInfo_t const&, IRestore*)
 T CUtlVectorDataOps<CUtlVector<CHandle<CAI_BaseNPC>, CUtlMemory<CHandle<CAI_BaseNPC>, int> >, 13>::Save(SaveRestoreFieldInfo_t const&, ISave*)
 T CUtlVectorDataOps<CUtlVector<CHandle<CBaseEntity>, CUtlMemory<CHandle<CBaseEntity>, int> >, 13>::IsEmpty(SaveRestoreFieldInfo_t const&)
 T CUtlVectorDataOps<CUtlVector<CHandle<CBaseEntity>, CUtlMemory<CHandle<CBaseEntity>, int> >, 13>::MakeEmpty(SaveRestoreFieldInfo_t const&)
 T CUtlVectorDataOps<CUtlVector<CHandle<CBaseEntity>, CUtlMemory<CHandle<CBaseEntity>, int> >, 13>::Restore(SaveRestoreFieldInfo_t const&, IRestore*)
 T CUtlVectorDataOps<CUtlVector<CHandle<CBaseEntity>, CUtlMemory<CHandle<CBaseEntity>, int> >, 13>::Save(SaveRestoreFieldInfo_t const&, ISave*)
 T CUtlVectorDataOps<CUtlVector<CHandle<CBaseFlex>, CUtlMemory<CHandle<CBaseFlex>, int> >, 13>::IsEmpty(SaveRestoreFieldInfo_t const&)
 T CUtlVectorDataOps<CUtlVector<CHandle<CBaseFlex>, CUtlMemory<CHandle<CBaseFlex>, int> >, 13>::MakeEmpty(SaveRestoreFieldInfo_t const&)
 T CUtlVectorDataOps<CUtlVector<CHandle<CBaseFlex>, CUtlMemory<CHandle<CBaseFlex>, int> >, 13>::Restore(SaveRestoreFieldInfo_t const&, IRestore*)
 T CUtlVectorDataOps<CUtlVector<CHandle<CBaseFlex>, CUtlMemory<CHandle<CBaseFlex>, int> >, 13>::Save(SaveRestoreFieldInfo_t const&, ISave*)
 T CUtlVectorDataOps<CUtlVector<CHandle<CBasePlayer>, CUtlMemory<CHandle<CBasePlayer>, int> >, 13>::IsEmpty(SaveRestoreFieldInfo_t const&)
 T CUtlVectorDataOps<CUtlVector<CHandle<CBasePlayer>, CUtlMemory<CHandle<CBasePlayer>, int> >, 13>::MakeEmpty(SaveRestoreFieldInfo_t const&)
 T CUtlVectorDataOps<CUtlVector<CHandle<CBasePlayer>, CUtlMemory<CHandle<CBasePlayer>, int> >, 13>::Restore(SaveRestoreFieldInfo_t const&, IRestore*)
 T CUtlVectorDataOps<CUtlVector<CHandle<CBasePlayer>, CUtlMemory<CHandle<CBasePlayer>, int> >, 13>::Save(SaveRestoreFieldInfo_t const&, ISave*)
 T CUtlVectorDataOps<CUtlVector<CHandle<CFish>, CUtlMemory<CHandle<CFish>, int> >, 13>::IsEmpty(SaveRestoreFieldInfo_t const&)
 T CUtlVectorDataOps<CUtlVector<CHandle<CFish>, CUtlMemory<CHandle<CFish>, int> >, 13>::MakeEmpty(SaveRestoreFieldInfo_t const&)
 T CUtlVectorDataOps<CUtlVector<CHandle<CFish>, CUtlMemory<CHandle<CFish>, int> >, 13>::Restore(SaveRestoreFieldInfo_t const&, IRestore*)
 T CUtlVectorDataOps<CUtlVector<CHandle<CFish>, CUtlMemory<CHandle<CFish>, int> >, 13>::Save(SaveRestoreFieldInfo_t const&, ISave*)
 T CUtlVectorDataOps<CUtlVector<CHandle<CSceneEntity>, CUtlMemory<CHandle<CSceneEntity>, int> >, 13>::IsEmpty(SaveRestoreFieldInfo_t const&)
 T CUtlVectorDataOps<CUtlVector<CHandle<CSceneEntity>, CUtlMemory<CHandle<CSceneEntity>, int> >, 13>::MakeEmpty(SaveRestoreFieldInfo_t const&)
 T CUtlVectorDataOps<CUtlVector<CHandle<CSceneEntity>, CUtlMemory<CHandle<CSceneEntity>, int> >, 13>::Restore(SaveRestoreFieldInfo_t const&, IRestore*)
 T CUtlVectorDataOps<CUtlVector<CHandle<CSceneEntity>, CUtlMemory<CHandle<CSceneEntity>, int> >, 13>::Save(SaveRestoreFieldInfo_t const&, ISave*)
 T CUtlVectorDataOps<CUtlVector<CHandle<CSceneListManager>, CUtlMemory<CHandle<CSceneListManager>, int> >, 13>::IsEmpty(SaveRestoreFieldInfo_t const&)
 T CUtlVectorDataOps<CUtlVector<CHandle<CSceneListManager>, CUtlMemory<CHandle<CSceneListManager>, int> >, 13>::MakeEmpty(SaveRestoreFieldInfo_t const&)
 T CUtlVectorDataOps<CUtlVector<CHandle<CSceneListManager>, CUtlMemory<CHandle<CSceneListManager>, int> >, 13>::Restore(SaveRestoreFieldInfo_t const&, IRestore*)
 T CUtlVectorDataOps<CUtlVector<CHandle<CSceneListManager>, CUtlMemory<CHandle<CSceneListManager>, int> >, 13>::Save(SaveRestoreFieldInfo_t const&, ISave*)
 T CUtlVectorDataOps<CUtlVector<CHandle<CVGuiScreen>, CUtlMemory<CHandle<CVGuiScreen>, int> >, 13>::IsEmpty(SaveRestoreFieldInfo_t const&)
 T CUtlVectorDataOps<CUtlVector<CHandle<CVGuiScreen>, CUtlMemory<CHandle<CVGuiScreen>, int> >, 13>::MakeEmpty(SaveRestoreFieldInfo_t const&)
 T CUtlVectorDataOps<CUtlVector<CHandle<CVGuiScreen>, CUtlMemory<CHandle<CVGuiScreen>, int> >, 13>::Restore(SaveRestoreFieldInfo_t const&, IRestore*)
 T CUtlVectorDataOps<CUtlVector<CHandle<CVGuiScreen>, CUtlMemory<CHandle<CVGuiScreen>, int> >, 13>::Save(SaveRestoreFieldInfo_t const&, ISave*)
 T CUtlVectorDataOps<CUtlVector<CPassengerInfo, CUtlMemory<CPassengerInfo, int> >, 10>::IsEmpty(SaveRestoreFieldInfo_t const&)
 T CUtlVectorDataOps<CUtlVector<CPassengerInfo, CUtlMemory<CPassengerInfo, int> >, 10>::MakeEmpty(SaveRestoreFieldInfo_t const&)
 T CUtlVectorDataOps<CUtlVector<CPassengerInfo, CUtlMemory<CPassengerInfo, int> >, 10>::Restore(SaveRestoreFieldInfo_t const&, IRestore*)
 T CUtlVectorDataOps<CUtlVector<CPassengerInfo, CUtlMemory<CPassengerInfo, int> >, 10>::Save(SaveRestoreFieldInfo_t const&, ISave*)
 T CUtlVectorDataOps<CUtlVector<Relationship_t, CUtlMemory<Relationship_t, int> >, 10>::IsEmpty(SaveRestoreFieldInfo_t const&)
 T CUtlVectorDataOps<CUtlVector<Relationship_t, CUtlMemory<Relationship_t, int> >, 10>::MakeEmpty(SaveRestoreFieldInfo_t const&)
 T CUtlVectorDataOps<CUtlVector<Relationship_t, CUtlMemory<Relationship_t, int> >, 10>::Restore(SaveRestoreFieldInfo_t const&, IRestore*)
 T CUtlVectorDataOps<CUtlVector<Relationship_t, CUtlMemory<Relationship_t, int> >, 10>::Save(SaveRestoreFieldInfo_t const&, ISave*)
 T CUtlVectorDataOps<CUtlVector<ResponseContext_t, CUtlMemory<ResponseContext_t, int> >, 10>::IsEmpty(SaveRestoreFieldInfo_t const&)
 T CUtlVectorDataOps<CUtlVector<ResponseContext_t, CUtlMemory<ResponseContext_t, int> >, 10>::MakeEmpty(SaveRestoreFieldInfo_t const&)
 T CUtlVectorDataOps<CUtlVector<ResponseContext_t, CUtlMemory<ResponseContext_t, int> >, 10>::Restore(SaveRestoreFieldInfo_t const&, IRestore*)
 T CUtlVectorDataOps<CUtlVector<ResponseContext_t, CUtlMemory<ResponseContext_t, int> >, 10>::Save(SaveRestoreFieldInfo_t const&, ISave*)
 T CUtlVectorDataOps<CUtlVector<SaveRestoreBlockHeader_t, CUtlMemory<SaveRestoreBlockHeader_t, int> >, 10>::IsEmpty(SaveRestoreFieldInfo_t const&)
 T CUtlVectorDataOps<CUtlVector<SaveRestoreBlockHeader_t, CUtlMemory<SaveRestoreBlockHeader_t, int> >, 10>::MakeEmpty(SaveRestoreFieldInfo_t const&)
 T CUtlVectorDataOps<CUtlVector<SaveRestoreBlockHeader_t, CUtlMemory<SaveRestoreBlockHeader_t, int> >, 10>::Restore(SaveRestoreFieldInfo_t const&, IRestore*)
 T CUtlVectorDataOps<CUtlVector<SaveRestoreBlockHeader_t, CUtlMemory<SaveRestoreBlockHeader_t, int> >, 10>::Save(SaveRestoreFieldInfo_t const&, ISave*)
 T CUtlVectorDataOps<CUtlVector<ScriptedNPCInteraction_t, CUtlMemory<ScriptedNPCInteraction_t, int> >, 10>::IsEmpty(SaveRestoreFieldInfo_t const&)
 T CUtlVectorDataOps<CUtlVector<ScriptedNPCInteraction_t, CUtlMemory<ScriptedNPCInteraction_t, int> >, 10>::MakeEmpty(SaveRestoreFieldInfo_t const&)
 T CUtlVectorDataOps<CUtlVector<ScriptedNPCInteraction_t, CUtlMemory<ScriptedNPCInteraction_t, int> >, 10>::Restore(SaveRestoreFieldInfo_t const&, IRestore*)
 T CUtlVectorDataOps<CUtlVector<ScriptedNPCInteraction_t, CUtlMemory<ScriptedNPCInteraction_t, int> >, 10>::Save(SaveRestoreFieldInfo_t const&, ISave*)
 T CUtlVectorDataOps<CUtlVector<UnreachableEnt_t, CUtlMemory<UnreachableEnt_t, int> >, 10>::IsEmpty(SaveRestoreFieldInfo_t const&)
 T CUtlVectorDataOps<CUtlVector<UnreachableEnt_t, CUtlMemory<UnreachableEnt_t, int> >, 10>::MakeEmpty(SaveRestoreFieldInfo_t const&)
 T CUtlVectorDataOps<CUtlVector<UnreachableEnt_t, CUtlMemory<UnreachableEnt_t, int> >, 10>::Restore(SaveRestoreFieldInfo_t const&, IRestore*)
 T CUtlVectorDataOps<CUtlVector<UnreachableEnt_t, CUtlMemory<UnreachableEnt_t, int> >, 10>::Save(SaveRestoreFieldInfo_t const&, ISave*)
 T CUtlVectorDataOps<CUtlVector<globalentity_t, CUtlMemory<globalentity_t, int> >, 10>::IsEmpty(SaveRestoreFieldInfo_t const&)
 T CUtlVectorDataOps<CUtlVector<globalentity_t, CUtlMemory<globalentity_t, int> >, 10>::MakeEmpty(SaveRestoreFieldInfo_t const&)
 T CUtlVectorDataOps<CUtlVector<globalentity_t, CUtlMemory<globalentity_t, int> >, 10>::Restore(SaveRestoreFieldInfo_t const&, IRestore*)
 T CUtlVectorDataOps<CUtlVector<globalentity_t, CUtlMemory<globalentity_t, int> >, 10>::Save(SaveRestoreFieldInfo_t const&, ISave*)
 T CUtlVectorDataOps<CUtlVector<int, CUtlMemory<int, int> >, 5>::IsEmpty(SaveRestoreFieldInfo_t const&)
 T CUtlVectorDataOps<CUtlVector<int, CUtlMemory<int, int> >, 5>::MakeEmpty(SaveRestoreFieldInfo_t const&)
 T CUtlVectorDataOps<CUtlVector<int, CUtlMemory<int, int> >, 5>::Restore(SaveRestoreFieldInfo_t const&, IRestore*)
 T CUtlVectorDataOps<CUtlVector<int, CUtlMemory<int, int> >, 5>::Save(SaveRestoreFieldInfo_t const&, ISave*)
 T CUtlVectorDataOps<CUtlVector<magnetted_objects_t, CUtlMemory<magnetted_objects_t, int> >, 10>::IsEmpty(SaveRestoreFieldInfo_t const&)
 T CUtlVectorDataOps<CUtlVector<magnetted_objects_t, CUtlMemory<magnetted_objects_t, int> >, 10>::MakeEmpty(SaveRestoreFieldInfo_t const&)
 T CUtlVectorDataOps<CUtlVector<magnetted_objects_t, CUtlMemory<magnetted_objects_t, int> >, 10>::Restore(SaveRestoreFieldInfo_t const&, IRestore*)
 T CUtlVectorDataOps<CUtlVector<magnetted_objects_t, CUtlMemory<magnetted_objects_t, int> >, 10>::Save(SaveRestoreFieldInfo_t const&, ISave*)
 T CUtlVectorDataOps<CUtlVector<modifiedconvars_t, CUtlMemory<modifiedconvars_t, int> >, 10>::IsEmpty(SaveRestoreFieldInfo_t const&)
 T CUtlVectorDataOps<CUtlVector<modifiedconvars_t, CUtlMemory<modifiedconvars_t, int> >, 10>::MakeEmpty(SaveRestoreFieldInfo_t const&)
 T CUtlVectorDataOps<CUtlVector<modifiedconvars_t, CUtlMemory<modifiedconvars_t, int> >, 10>::Restore(SaveRestoreFieldInfo_t const&, IRestore*)
 T CUtlVectorDataOps<CUtlVector<modifiedconvars_t, CUtlMemory<modifiedconvars_t, int> >, 10>::Save(SaveRestoreFieldInfo_t const&, ISave*)
 T CUtlVectorDataOps<CUtlVector<physfollower_t, CUtlMemory<physfollower_t, int> >, 10>::IsEmpty(SaveRestoreFieldInfo_t const&)
 T CUtlVectorDataOps<CUtlVector<physfollower_t, CUtlMemory<physfollower_t, int> >, 10>::MakeEmpty(SaveRestoreFieldInfo_t const&)
 T CUtlVectorDataOps<CUtlVector<physfollower_t, CUtlMemory<physfollower_t, int> >, 10>::Restore(SaveRestoreFieldInfo_t const&, IRestore*)
 T CUtlVectorDataOps<CUtlVector<physfollower_t, CUtlMemory<physfollower_t, int> >, 10>::Save(SaveRestoreFieldInfo_t const&, ISave*)
 T CUtlVectorDataOps<CUtlVector<template_t, CUtlMemory<template_t, int> >, 10>::IsEmpty(SaveRestoreFieldInfo_t const&)
 T CUtlVectorDataOps<CUtlVector<template_t, CUtlMemory<template_t, int> >, 10>::MakeEmpty(SaveRestoreFieldInfo_t const&)
 T CUtlVectorDataOps<CUtlVector<template_t, CUtlMemory<template_t, int> >, 10>::Restore(SaveRestoreFieldInfo_t const&, IRestore*)
 T CUtlVectorDataOps<CUtlVector<template_t, CUtlMemory<template_t, int> >, 10>::Save(SaveRestoreFieldInfo_t const&, ISave*)
 T CUtlVectorDataOps<CUtlVector<thinkfunc_t, CUtlMemory<thinkfunc_t, int> >, 10>::IsEmpty(SaveRestoreFieldInfo_t const&)
 T CUtlVectorDataOps<CUtlVector<thinkfunc_t, CUtlMemory<thinkfunc_t, int> >, 10>::MakeEmpty(SaveRestoreFieldInfo_t const&)
 T CUtlVectorDataOps<CUtlVector<thinkfunc_t, CUtlMemory<thinkfunc_t, int> >, 10>::Restore(SaveRestoreFieldInfo_t const&, IRestore*)
 T CUtlVectorDataOps<CUtlVector<thinkfunc_t, CUtlMemory<thinkfunc_t, int> >, 10>::Save(SaveRestoreFieldInfo_t const&, ISave*)
 T CUtlVectorDataOps<CUtlVector<vehicle_crashsound_t, CUtlMemory<vehicle_crashsound_t, int> >, 10>::IsEmpty(SaveRestoreFieldInfo_t const&)
 T CUtlVectorDataOps<CUtlVector<vehicle_crashsound_t, CUtlMemory<vehicle_crashsound_t, int> >, 10>::MakeEmpty(SaveRestoreFieldInfo_t const&)
 T CUtlVectorDataOps<CUtlVector<vehicle_crashsound_t, CUtlMemory<vehicle_crashsound_t, int> >, 10>::Restore(SaveRestoreFieldInfo_t const&, IRestore*)
 T CUtlVectorDataOps<CUtlVector<vehicle_crashsound_t, CUtlMemory<vehicle_crashsound_t, int> >, 10>::Save(SaveRestoreFieldInfo_t const&, ISave*)
 T CUtlVectorDataOps<CUtlVector<vehicle_gear_t, CUtlMemory<vehicle_gear_t, int> >, 10>::IsEmpty(SaveRestoreFieldInfo_t const&)
 T CUtlVectorDataOps<CUtlVector<vehicle_gear_t, CUtlMemory<vehicle_gear_t, int> >, 10>::MakeEmpty(SaveRestoreFieldInfo_t const&)
 T CUtlVectorDataOps<CUtlVector<vehicle_gear_t, CUtlMemory<vehicle_gear_t, int> >, 10>::Restore(SaveRestoreFieldInfo_t const&, IRestore*)
 T CUtlVectorDataOps<CUtlVector<vehicle_gear_t, CUtlMemory<vehicle_gear_t, int> >, 10>::Save(SaveRestoreFieldInfo_t const&, ISave*)
 T CUtlVectorUltraConservative<HidingSpot*, CUtlVectorUltraConservativeAllocator>::~CUtlVectorUltraConservative()
 T CUtlVectorUltraConservative<NavConnect, CUtlVectorUltraConservativeAllocator>::EnsureCapacity(int)
 T CUtlVectorUltraConservative<NavConnect, CUtlVectorUltraConservativeAllocator>::FindAndRemove(NavConnect const&)
 T CUtlVectorUltraConservative<NavConnect, CUtlVectorUltraConservativeAllocator>::RemoveAll()
 T CVGuiScreen::Activate()
 T CVGuiScreen::CVGuiScreen()
 T CVGuiScreen::GetDataDescMap()
 T CVGuiScreen::GetPanelName() const
 T CVGuiScreen::GetServerClass()
 T CVGuiScreen::InputSetActive(inputdata_t&)
 T CVGuiScreen::InputSetInactive(inputdata_t&)
 T CVGuiScreen::IsVisibleToTeam(int)
 T CVGuiScreen::KeyValue(char const*, char const*)
 T CVGuiScreen::MakeVisibleOnlyToTeammates(bool)
 T CVGuiScreen::OnRestore()
 T CVGuiScreen::Precache()
 T CVGuiScreen::SetActive(bool)
 T CVGuiScreen::SetActualSize(float, float)
 T CVGuiScreen::SetAttachedToViewModel(bool)
 T CVGuiScreen::SetAttachmentIndex(int)
 T CVGuiScreen::SetOverlayMaterial(char const*)
 T CVGuiScreen::SetPanelName(char const*)
 T CVGuiScreen::SetPlayerOwner(CBasePlayer*, bool)
 T CVGuiScreen::SetTransparency(bool)
 T CVGuiScreen::ShouldTransmit(CCheckTransmitInfo const*)
 T CVGuiScreen::Spawn()
 T CVGuiScreen::UpdateTransmitState()
 T CVGuiScreen::YouForgotToImplementOrDeclareServerClass()
 T CVGuiScreen::~CVGuiScreen()
 T CV_GlobalChange_Commentary(IConVar*, char const*, float)
 T CVarBitVecBase<int>::ReallocInts(int)
 T CVarBitVecBase<int>::Resize(int, bool)
 T CVarBitVecBase<unsigned short>::ReallocInts(int)
 T CVarBitVecBase<unsigned short>::Resize(int, bool)
 T CVarBitVecSaveRestoreOps<CBitVec<32> >::IsEmpty(SaveRestoreFieldInfo_t const&)
 T CVarBitVecSaveRestoreOps<CBitVec<32> >::MakeEmpty(SaveRestoreFieldInfo_t const&)
 T CVarBitVecSaveRestoreOps<CBitVec<32> >::Restore(SaveRestoreFieldInfo_t const&, IRestore*)
 T CVarBitVecSaveRestoreOps<CBitVec<32> >::Save(SaveRestoreFieldInfo_t const&, ISave*)
 T CVariantSaveDataOps::IsEmpty(SaveRestoreFieldInfo_t const&)
 T CVariantSaveDataOps::MakeEmpty(SaveRestoreFieldInfo_t const&)
 T CVariantSaveDataOps::Restore(SaveRestoreFieldInfo_t const&, IRestore*)
 T CVariantSaveDataOps::Save(SaveRestoreFieldInfo_t const&, ISave*)
 T CVehicleSoundsParser::CVehicleSoundsParser()
 T CVehicleSoundsParser::ParseKeyValue(void*, char const*, char const*)
 T CVehicleSoundsParser::SetDefaults(void*)
 T CVehicleWaypoint::RecalculateSpline()
 T CVoiceGameMgr::ClientCommand(CBasePlayer*, CCommand const&)
 T CVoiceGameMgr::ClientConnected(edict_t*)
 T CVoiceGameMgr::Init(IVoiceGameMgrHelper*, int)
 T CVoiceGameMgr::IsPlayerIgnoringPlayer(int, int)
 T CVoiceGameMgr::Update(double)
 T CVoiceGameMgr::UpdateMasks()
 T CVoiceGameMgr::~CVoiceGameMgr()
 T CVoiceGameMgrHelper::CanPlayerHearPlayer(CBasePlayer*, CBasePlayer*, bool&)
 T CVoiceGameMgrHelper::~CVoiceGameMgrHelper()
 T CVoteController::AddPlayerToKickWatchList(CSteamID, float)
 T CVoteController::AddPlayerToNameLockedList(CSteamID, float, int)
 T CVoteController::CanEntityCallVote(CBasePlayer*, int&, vote_create_failed_t&)
 T CVoteController::CreateVote(int, char const*, char const*)
 T CVoteController::GCResponseReceived(bool)
 T CVoteController::GetDataDescMap()
 T CVoteController::GetServerClass()
 T CVoteController::IsValidVoter(CBasePlayer*)
 T CVoteController::IsVoteSystemEnabled()
 T CVoteController::RegisterIssue(CBaseIssue*)
 T CVoteController::ResetData()
 T CVoteController::SendVoteCreationFailedMessage(vote_create_failed_t, CBasePlayer*, int)
 T CVoteController::SendVoteFailedToPassMessage(vote_create_failed_t)
 T CVoteController::SetupVote(int)
 T CVoteController::Spawn()
 T CVoteController::TrackVoteCaller(CBasePlayer*)
 T CVoteController::TryCastVote(int, char const*)
 T CVoteController::UpdateTransmitState()
 T CVoteController::VoteChoice_Increment(int)
 T CVoteController::VoteControllerThink()
 T CVoteController::YouForgotToImplementOrDeclareServerClass()
 T CVoteController::~CVoteController()
 T CVoteControllerSystem::AddPlayerToKickWatchList(CSteamID, float)
 T CVoteControllerSystem::AddPlayerToNameLockedList(CSteamID, float)
 T CVoteControllerSystem::FrameUpdatePostEntityThink()
 T CVoteControllerSystem::LevelInitPreEntity()
 T CVoteControllerSystem::~CVoteControllerSystem()
 T CWC_UpdateIgnoreList::GetDataDescMap()
 T CWC_UpdateIgnoreList::~CWC_UpdateIgnoreList()
 T CWarData::CWarData()
 T CWarData::~CWarData()
 T CWarDefinition::BInitFromKV(KeyValues*, CUtlVector<CUtlString, CUtlMemory<CUtlString, int> >*)
 T CWarDefinition::CWarDefinition()
 T CWarDefinition::CWarSideDefinition_t::BInitFromKV(char const*, KeyValues*, CUtlVector<CUtlString, CUtlMemory<CUtlString, int> >*)
 T CWarDefinition::GetSide(unsigned char) const
 T CWarDefinition::IsActive() const
 T CWarDefinition::IsValidSide(unsigned char) const
 T CWatcherList::AddToList(CBaseEntity*)
 T CWatcherList::NotifyPositionChanged(CBaseEntity*)
 T CWatcherList::NotifyVPhysicsStateChanged(IPhysicsObject*, CBaseEntity*, bool)
 T CWatcherList::~CWatcherList()
 T CWaterBullet::BulletThink()
 T CWaterBullet::GetDataDescMap()
 T CWaterBullet::GetServerClass()
 T CWaterBullet::Precache()
 T CWaterBullet::Touch(CBaseEntity*)
 T CWaterBullet::YouForgotToImplementOrDeclareServerClass()
 T CWaterBullet::~CWaterBullet()
 T CWaterLODControl::CWaterLODControl()
 T CWaterLODControl::GetDataDescMap()
 T CWaterLODControl::GetServerClass()
 T CWaterLODControl::KeyValue(char const*, char const*)
 T CWaterLODControl::ObjectCaps()
 T CWaterLODControl::Spawn()
 T CWaterLODControl::UpdateTransmitState()
 T CWaterLODControl::YouForgotToImplementOrDeclareServerClass()
 T CWaterLODControl::~CWaterLODControl()
 T CWave::ActiveWaveUpdate()
 T CWave::AddClassType(string_t, int, unsigned int)
 T CWave::CWave(CPopulationManager*)
 T CWave::ForceFinish()
 T CWave::ForceReset()
 T CWave::HasEventChangeAttributes(char const*) const
 T CWave::OnPlayerKilled(CTFPlayer*)
 T CWave::Parse(KeyValues*)
 T CWave::Update()
 T CWave::WaveCompleteUpdate()
 T CWave::WaveIntermissionUpdate()
 T CWave::~CWave()
 T CWaveSpawnPopulator::CWaveSpawnPopulator(CPopulationManager*)
 T CWaveSpawnPopulator::ForceFinish()
 T CWaveSpawnPopulator::GetCurrencyAmountPerDeath()
 T CWaveSpawnPopulator::OnPlayerKilled(CTFPlayer*)
 T CWaveSpawnPopulator::Parse(KeyValues*)
 T CWaveSpawnPopulator::SetState(CWaveSpawnPopulator::InternalStateType)
 T CWaveSpawnPopulator::Update()
 T CWaveSpawnPopulator::~CWaveSpawnPopulator()
 T CWeaponIFMBase::CWeaponIFMBase()
 T CWeaponIFMBase::GetDataDescMap()
 T CWeaponIFMBase::GetEncryptionKey()
 T CWeaponIFMBase::GetServerClass()
 T CWeaponIFMBase::IsPredicted() const
 T CWeaponIFMBase::Spawn()
 T CWeaponIFMBase::YouForgotToImplementOrDeclareServerClass()
 T CWeaponIFMBase::~CWeaponIFMBase()
 T CWeaponIFMBaseCamera::CWeaponIFMBaseCamera()
 T CWeaponIFMBaseCamera::GetDataDescMap()
 T CWeaponIFMBaseCamera::GetServerClass()
 T CWeaponIFMBaseCamera::SetRenderInfo(float, float, float, Vector const&, QAngle const&)
 T CWeaponIFMBaseCamera::YouForgotToImplementOrDeclareServerClass()
 T CWeaponIFMBaseCamera::~CWeaponIFMBaseCamera()
 T CWeaponIFMSteadyCam::GetDataDescMap()
 T CWeaponIFMSteadyCam::GetServerClass()
 T CWeaponIFMSteadyCam::ItemPostFrame()
 T CWeaponIFMSteadyCam::YouForgotToImplementOrDeclareServerClass()
 T CWeaponIFMSteadyCam::~CWeaponIFMSteadyCam()
 T CWeaponLOSFilter::ShouldHitEntity(IHandleEntity*, int)
 T CWeaponList::LevelShutdownPostEntity()
 T CWeaponList::~CWeaponList()
 T CWeaponMedigun::AddCharge(float)
 T CWeaponMedigun::AllowedToHealTarget(CBaseEntity*)
 T CWeaponMedigun::AppliesModifier()
 T CWeaponMedigun::CWeaponMedigun()
 T CWeaponMedigun::CheckAchievementsOnHealTarget()
 T CWeaponMedigun::CreateMedigunShield()
 T CWeaponMedigun::CycleResistType()
 T CWeaponMedigun::Deploy()
 T CWeaponMedigun::DrainCharge()
 T CWeaponMedigun::FindAndHealTargets()
 T CWeaponMedigun::FindNewTargetForSlot()
 T CWeaponMedigun::GetChargeType() const
 T CWeaponMedigun::GetHealRate()
 T CWeaponMedigun::GetMedigunType() const
 T CWeaponMedigun::GetMinChargeAmount() const
 T CWeaponMedigun::GetResistType() const
 T CWeaponMedigun::GetServerClass()
 T CWeaponMedigun::GetStickRange()
 T CWeaponMedigun::GetTargetRange()
 T CWeaponMedigun::GetWeaponID() const
 T CWeaponMedigun::HealTargetThink()
 T CWeaponMedigun::Holster(CBaseCombatWeapon*)
 T CWeaponMedigun::IsAttachedToBuilding()
 T CWeaponMedigun::IsHolstered()
 T CWeaponMedigun::IsReleasingCharge() const
 T CWeaponMedigun::ItemHolsterFrame()
 T CWeaponMedigun::ItemPostFrame()
 T CWeaponMedigun::Lower()
 T CWeaponMedigun::MaintainTargetInSlot()
 T CWeaponMedigun::OnControlStunned()
 T CWeaponMedigun::Precache()
 T CWeaponMedigun::PrimaryAttack()
 T CWeaponMedigun::RemoveHealingTarget(bool)
 T CWeaponMedigun::SecondaryAttack()
 T CWeaponMedigun::StartHealingTarget(CBaseEntity*)
 T CWeaponMedigun::SubtractCharge(float)
 T CWeaponMedigun::SubtractChargeAndUpdateDeployState(float, bool)
 T CWeaponMedigun::UberchargeChunkDeployed()
 T CWeaponMedigun::UpdateOnRemove()
 T CWeaponMedigun::WeaponIdle()
 T CWeaponMedigun::WeaponReset()
 T CWeaponMedigun::YouForgotToImplementOrDeclareServerClass()
 T CWeaponMedigun::~CWeaponMedigun()
 T CWeightButton::CreateVPhysics()
 T CWeightButton::GetDataDescMap()
 T CWeightButton::Spawn()
 T CWeightButton::TriggerThink()
 T CWeightButton::~CWeightButton()
 T CWheelOfDoom::CWheelOfDoom()
 T CWheelOfDoom::ClearAllEffects(inputdata_t&)
 T CWheelOfDoom::EffectManager::AddEffect(CWheelOfDoom::WOD_BaseEffect*, float)
 T CWheelOfDoom::EffectManager::ApplyAllEffectsToPlayer(CTFPlayer*)
 T CWheelOfDoom::EffectManager::ClearEffects()
 T CWheelOfDoom::EffectManager::UpdateAndClearExpiredEffects()
 T CWheelOfDoom::FireGameEvent(IGameEvent*)
 T CWheelOfDoom::GetDataDescMap()
 T CWheelOfDoom::GetRandomEffectWithFlags()
 T CWheelOfDoom::IdleThink()
 T CWheelOfDoom::IsDoneBoardcastingEffectSound() const
 T CWheelOfDoom::Precache()
 T CWheelOfDoom::SetSkin(int)
 T CWheelOfDoom::Spawn()
 T CWheelOfDoom::SpeakMagicConceptToAllPlayers(char const*)
 T CWheelOfDoom::Spin(inputdata_t&)
 T CWheelOfDoom::SpinThink()
 T CWheelOfDoom::StartSpin()
 T CWheelOfDoom::WOD_BaseEffect::ActivateEffect(CWheelOfDoom::EffectData_t&)
 T CWheelOfDoom::WOD_BaseEffect::DeactivateEffect(CWheelOfDoom::EffectData_t&)
 T CWheelOfDoom::WOD_BaseEffect::InitEffect(float)
 T CWheelOfDoom::WOD_BaseEffect::UpdateEffect(CWheelOfDoom::EffectData_t&)
 T CWheelOfDoom::WOD_BigHeadEffect::ActivateEffect(CWheelOfDoom::EffectData_t&)
 T CWheelOfDoom::WOD_BigHeadEffect::DeactivateEffect(CWheelOfDoom::EffectData_t&)
 T CWheelOfDoom::WOD_Burn::ActivateEffect(CWheelOfDoom::EffectData_t&)
 T CWheelOfDoom::WOD_Burn::InitEffect(float)
 T CWheelOfDoom::WOD_CritsEffect::ActivateEffect(CWheelOfDoom::EffectData_t&)
 T CWheelOfDoom::WOD_Dance::DeactivateEffect(CWheelOfDoom::EffectData_t&)
 T CWheelOfDoom::WOD_Dance::InitEffect(float)
 T CWheelOfDoom::WOD_Dance::UpdateEffect(CWheelOfDoom::EffectData_t&)
 T CWheelOfDoom::WOD_Ghosts::ActivateEffect(CWheelOfDoom::EffectData_t&)
 T CWheelOfDoom::WOD_Ghosts::DeactivateEffect(CWheelOfDoom::EffectData_t&)
 T CWheelOfDoom::WOD_LowGravityEffect::ActivateEffect(CWheelOfDoom::EffectData_t&)
 T CWheelOfDoom::WOD_LowGravityEffect::DeactivateEffect(CWheelOfDoom::EffectData_t&)
 T CWheelOfDoom::WOD_Pee::ActivateEffect(CWheelOfDoom::EffectData_t&)
 T CWheelOfDoom::WOD_Pee::UpdateEffect(CWheelOfDoom::EffectData_t&)
 T CWheelOfDoom::WOD_SmallHeadEffect::ActivateEffect(CWheelOfDoom::EffectData_t&)
 T CWheelOfDoom::WOD_SmallHeadEffect::DeactivateEffect(CWheelOfDoom::EffectData_t&)
 T CWheelOfDoom::WOD_SuperJumpEffect::ActivateEffect(CWheelOfDoom::EffectData_t&)
 T CWheelOfDoom::WOD_SuperJumpEffect::DeactivateEffect(CWheelOfDoom::EffectData_t&)
 T CWheelOfDoom::WOD_SuperSpeedEffect::ActivateEffect(CWheelOfDoom::EffectData_t&)
 T CWheelOfDoom::WOD_SuperSpeedEffect::DeactivateEffect(CWheelOfDoom::EffectData_t&)
 T CWheelOfDoom::WOD_UberEffect::ActivateEffect(CWheelOfDoom::EffectData_t&)
 T CWheelOfDoom::WOD_UberEffect::InitEffect(float)
 T CWheelOfDoom::~CWheelOfDoom()
 T CWheelOfDoomSpiral* _CreateEntityTemplate<CWheelOfDoomSpiral>(CWheelOfDoomSpiral*, char const*)
 T CWheelOfDoomSpiral::GetDataDescMap()
 T CWheelOfDoomSpiral::GrowThink()
 T CWheelOfDoomSpiral::Precache()
 T CWheelOfDoomSpiral::ShrinkThink()
 T CWheelOfDoomSpiral::Spawn()
 T CWheelOfDoomSpiral::~CWheelOfDoomSpiral()
 T CWindowPane::CreateWindowPane(Vector const&, QAngle const&)
 T CWindowPane::Die()
 T CWindowPane::GetDataDescMap()
 T CWindowPane::PaneTouch(CBaseEntity*)
 T CWindowPane::Precache()
 T CWindowPane::Spawn()
 T CWindowPane::~CWindowPane()
 T CWorkerThread::~CWorkerThread()
 T CWorkshop_GetContributors_Request::ByteSize() const
 T CWorkshop_GetContributors_Request::Clear()
 T CWorkshop_GetContributors_Request::GetCachedSize() const
 T CWorkshop_GetContributors_Request::GetMetadata() const
 T CWorkshop_GetContributors_Request::IsInitialized() const
 T CWorkshop_GetContributors_Request::MergeFrom(CWorkshop_GetContributors_Request const&)
 T CWorkshop_GetContributors_Request::New() const
 T CWorkshop_GetContributors_Request::SerializeWithCachedSizesToArray(unsigned char*) const
 T CWorkshop_GetContributors_Request::SetCachedSize(int) const
 T CWorkshop_GetContributors_Request::~CWorkshop_GetContributors_Request()
 T CWorkshop_GetContributors_Response::ByteSize() const
 T CWorkshop_GetContributors_Response::Clear()
 T CWorkshop_GetContributors_Response::GetCachedSize() const
 T CWorkshop_GetContributors_Response::GetMetadata() const
 T CWorkshop_GetContributors_Response::IsInitialized() const
 T CWorkshop_GetContributors_Response::MergeFrom(CWorkshop_GetContributors_Response const&)
 T CWorkshop_GetContributors_Response::New() const
 T CWorkshop_GetContributors_Response::SerializeWithCachedSizesToArray(unsigned char*) const
 T CWorkshop_GetContributors_Response::SetCachedSize(int) const
 T CWorkshop_GetContributors_Response::~CWorkshop_GetContributors_Response()
 T CWorkshop_PopulateItemDescriptions_Request::ByteSize() const
 T CWorkshop_PopulateItemDescriptions_Request::Clear()
 T CWorkshop_PopulateItemDescriptions_Request::GetCachedSize() const
 T CWorkshop_PopulateItemDescriptions_Request::GetMetadata() const
 T CWorkshop_PopulateItemDescriptions_Request::IsInitialized() const
 T CWorkshop_PopulateItemDescriptions_Request::MergeFrom(CWorkshop_PopulateItemDescriptions_Request const&)
 T CWorkshop_PopulateItemDescriptions_Request::New() const
 T CWorkshop_PopulateItemDescriptions_Request::SerializeWithCachedSizesToArray(unsigned char*) const
 T CWorkshop_PopulateItemDescriptions_Request::SetCachedSize(int) const
 T CWorkshop_PopulateItemDescriptions_Request::~CWorkshop_PopulateItemDescriptions_Request()
 T CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock::ByteSize() const
 T CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock::Clear()
 T CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock::GetCachedSize() const
 T CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock::GetMetadata() const
 T CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock::IsInitialized() const
 T CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock::MergeFrom(CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock const&)
 T CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock::New() const
 T CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock::SerializeWithCachedSizesToArray(unsigned char*) const
 T CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock::SetCachedSize(int) const
 T CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock::~CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock()
 T CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription::ByteSize() const
 T CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription::Clear()
 T CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription::GetCachedSize() const
 T CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription::GetMetadata() const
 T CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription::IsInitialized() const
 T CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription::MergeFrom(CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription const&)
 T CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription::New() const
 T CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription::SerializeWithCachedSizesToArray(unsigned char*) const
 T CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription::SetCachedSize(int) const
 T CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription::~CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription()
 T CWorkshop_SetItemPaymentRules_Request::ByteSize() const
 T CWorkshop_SetItemPaymentRules_Request::Clear()
 T CWorkshop_SetItemPaymentRules_Request::GetCachedSize() const
 T CWorkshop_SetItemPaymentRules_Request::GetMetadata() const
 T CWorkshop_SetItemPaymentRules_Request::IsInitialized() const
 T CWorkshop_SetItemPaymentRules_Request::MergeFrom(CWorkshop_SetItemPaymentRules_Request const&)
 T CWorkshop_SetItemPaymentRules_Request::New() const
 T CWorkshop_SetItemPaymentRules_Request::SerializeWithCachedSizesToArray(unsigned char*) const
 T CWorkshop_SetItemPaymentRules_Request::SetCachedSize(int) const
 T CWorkshop_SetItemPaymentRules_Request::~CWorkshop_SetItemPaymentRules_Request()
 T CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule::ByteSize() const
 T CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule::Clear()
 T CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule::GetCachedSize() const
 T CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule::GetMetadata() const
 T CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule::IsInitialized() const
 T CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule::MergeFrom(CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule const&)
 T CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule::New() const
 T CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule::SerializeWithCachedSizesToArray(unsigned char*) const
 T CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule::SetCachedSize(int) const
 T CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule::~CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule()
 T CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule::ByteSize() const
 T CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule::Clear()
 T CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule::GetCachedSize() const
 T CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule::GetMetadata() const
 T CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule::IsInitialized() const
 T CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule::MergeFrom(CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule const&)
 T CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule::New() const
 T CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule::SerializeWithCachedSizesToArray(unsigned char*) const
 T CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule::SetCachedSize(int) const
 T CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule::~CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule()
 T CWorkshop_SetItemPaymentRules_Response::ByteSize() const
 T CWorkshop_SetItemPaymentRules_Response::Clear()
 T CWorkshop_SetItemPaymentRules_Response::GetCachedSize() const
 T CWorkshop_SetItemPaymentRules_Response::GetMetadata() const
 T CWorkshop_SetItemPaymentRules_Response::IsInitialized() const
 T CWorkshop_SetItemPaymentRules_Response::MergeFrom(CWorkshop_SetItemPaymentRules_Response const&)
 T CWorkshop_SetItemPaymentRules_Response::New() const
 T CWorkshop_SetItemPaymentRules_Response::SerializeWithCachedSizesToArray(unsigned char*) const
 T CWorkshop_SetItemPaymentRules_Response::SetCachedSize(int) const
 T CWorkshop_SetItemPaymentRules_Response::~CWorkshop_SetItemPaymentRules_Response()
 T CWorld::CWorld()
 T CWorld::DecalTrace(CGameTrace*, char const*)
 T CWorld::GetDataDescMap()
 T CWorld::GetDisplayTitle() const
 T CWorld::GetServerClass()
 T CWorld::KeyValue(char const*, char const*)
 T CWorld::Precache()
 T CWorld::RequiredEdictIndex()
 T CWorld::SetDisplayTitle(bool)
 T CWorld::Spawn()
 T CWorld::VPhysicsCollision(int, gamevcollisionevent_t*)
 T CWorld::VPhysicsFriction(IPhysicsObject*, float, int, int)
 T CWorld::YouForgotToImplementOrDeclareServerClass()
 T CWorld::~CWorld()
 T CWorldItem::GetDataDescMap()
 T CWorldItem::KeyValue(char const*, char const*)
 T CWorldItem::Spawn()
 T CWorldItem::~CWorldItem()
 T CZombie::AddHat(char const*)
 T CZombie::CZombie()
 T CZombie::Event_Killed(CTakeDamageInfo const&)
 T CZombie::GetBodyInterface() const
 T CZombie::GetIntentionInterface() const
 T CZombie::GetLocomotionInterface() const
 T CZombie::GetServerClass()
 T CZombie::OnTakeDamage_Alive(CTakeDamageInfo const&)
 T CZombie::Precache()
 T CZombie::PrecacheZombie()
 T CZombie::SetSkeletonType(CZombie::SkeletonType_t)
 T CZombie::Spawn()
 T CZombie::SpawnAtPos(Vector const&, float, int, CBaseEntity*, CZombie::SkeletonType_t)
 T CZombie::UpdateOnRemove()
 T CZombie::YouForgotToImplementOrDeclareServerClass()
 T CZombie::~CZombie()
 T CZombieAttack::GetName() const
 T CZombieAttack::IsPotentiallyChaseable(CZombie*, CBaseCombatCharacter*)
 T CZombieAttack::OnContact(CZombie*, CBaseEntity*, CGameTrace*)
 T CZombieAttack::OnOtherKilled(CZombie*, CBaseCombatCharacter*, CTakeDamageInfo const&)
 T CZombieAttack::OnStart(CZombie*, Action<CZombie>*)
 T CZombieAttack::OnStuck(CZombie*)
 T CZombieAttack::SelectVictim(CZombie*)
 T CZombieAttack::Update(CZombie*, float)
 T CZombieAttack::~CZombieAttack()
 T CZombieBehavior::GetName() const
 T CZombieBehavior::InitialContainedAction(CZombie*)
 T CZombieBehavior::OnKilled(CZombie*, CTakeDamageInfo const&)
 T CZombieBehavior::OnStart(CZombie*, Action<CZombie>*)
 T CZombieBehavior::ShouldLaugh(CZombie*)
 T CZombieBehavior::Update(CZombie*, float)
 T CZombieBehavior::~CZombieBehavior()
 T CZombieIntention::CZombieIntention(CZombie*)
 T CZombieIntention::FirstContainedResponder() const
 T CZombieIntention::IsPositionAllowed(INextBot const*, Vector const&) const
 T CZombieIntention::NextContainedResponder(INextBotEventResponder*) const
 T CZombieIntention::Reset()
 T CZombieIntention::Update()
 T CZombieIntention::~CZombieIntention()
 T CZombieLocomotion::GetMaxJumpHeight() const
 T CZombieLocomotion::GetMaxYawRate() const
 T CZombieLocomotion::GetRunSpeed() const
 T CZombieLocomotion::GetStepHeight() const
 T CZombieLocomotion::ShouldCollideWith(CBaseEntity const*) const
 T CZombieLocomotion::~CZombieLocomotion()
 T CZombiePathCost::operator()(CNavArea*, CNavArea*, CNavLadder const*, CFuncElevator const*, float) const
 T CZombieSpawn::GetName() const
 T CZombieSpawn::OnStart(CZombie*, Action<CZombie>*)
 T CZombieSpawn::Update(CZombie*, float)
 T CZombieSpawn::~CZombieSpawn()
 T CZombieSpawner::GetDataDescMap()
 T CZombieSpawner::InputDisable(inputdata_t&)
 T CZombieSpawner::InputEnable(inputdata_t&)
 T CZombieSpawner::InputSetMaxActiveZombies(inputdata_t&)
 T CZombieSpawner::Spawn()
 T CZombieSpawner::Think()
 T CZombieSpawner::~CZombieSpawner()
 T CZombieSpecialAttack::DoSpecialAttack(CZombie*)
 T CZombieSpecialAttack::GetName() const
 T CZombieSpecialAttack::OnStart(CZombie*, Action<CZombie>*)
 T CZombieSpecialAttack::Update(CZombie*, float)
 T CZombieSpecialAttack::~CZombieSpecialAttack()
 T Calc3WayBlendIndices(int, int, float, float, mstudioseqdesc_t const&, int*, float*)
 T CalcBoneAdj(CStudioHdr const*, Vector*, Quaternion*, float const*, int)
 T CalcBoneDerivatives(Vector&, Vector&, matrix3x4_t const&, matrix3x4_t const&, float)
 T CalcBonePosition(int, float, Vector const&, Vector const&, mstudioanim_t const*, Vector&)
 T CalcBoneQuaternion(int, float, Quaternion const&, RadianEuler const&, Vector const&, int, Quaternion const&, mstudioanim_t const*, Quaternion&)
 T CalcClosestPointOnAABB(Vector const&, Vector const&, Vector const&, Vector&)
 T CalcClosestPointOnLine(Vector const&, Vector const&, Vector const&, Vector&, float*)
 T CalcClosestPointOnLineSegment(Vector const&, Vector const&, Vector const&, Vector&, float*)
 T CalcDistanceToLine(Vector const&, Vector const&, Vector const&, float*)
 T CalcDistanceToLine2D(Vector2D const&, Vector2D const&, Vector2D const&, float*)
 T CalcDistanceToLineSegment(Vector const&, Vector const&, Vector const&, float*)
 T CalcPoseSingle(CStudioHdr const*, Vector*, Quaternion*, mstudioseqdesc_t&, int, float, float const*, int, float)
 T CalcSqrDistanceToAABB(Vector const&, Vector const&, Vector const&)
 T CalculateBulletDamageForce(CTakeDamageInfo*, int, Vector const&, Vector const&, float)
 T CalculateDefaultPhysicsDamage(int, gamevcollisionevent_t*, float, bool, int&, string_t, bool)
 T CalculateExplosiveDamageForce(CTakeDamageInfo*, Vector const&, Vector const&, float)
 T CalculateMeleeDamageForce(CTakeDamageInfo*, Vector const&, Vector const&, float)
 T CalculateObjectStress(IPhysicsObject*, CBaseEntity*, vphysics_objectstress_t*)
 T CalculatePhysicsImpactDamage(int, gamevcollisionevent_t*, impactdamagetable_t const&, float, bool, int&, bool)
 T CanOverrideEnvZoomOwner(CBaseEntity*)
 T CanScatterGunKnockBack(CTFWeaponBase*, float, float)
 T CaselessStringLessThan(char const* const&, char const* const&)
 T CastSpell(CBaseCombatCharacter*, char const*, float, float, float, CBaseEntity*)
 T Catmull_Rom_Spline(Vector const&, Vector const&, Vector const&, Vector const&, float, Vector&)
 T Catmull_Rom_Spline_Normalize(Vector const&, Vector const&, Vector const&, Vector const&, float, Vector&)
 T Catmull_Rom_Spline_NormalizeX(Vector const&, Vector const&, Vector const&, Vector const&, float, Vector&)
 T Catmull_Rom_Spline_Tangent(Vector const&, Vector const&, Vector const&, Vector const&, float, Vector&)
 T CharacterSetBuild(characterset_t*, char const*)
 T ChasePath::GetLeadRadius() const
 T ChasePath::GetLifetime() const
 T ChasePath::GetMaxPathLength() const
 T ChasePath::Invalidate()
 T ChasePath::IsRepathNeeded(INextBot*, CBaseEntity*) const
 T ChasePath::PredictSubjectPosition(INextBot*, CBaseEntity*) const
 T ChasePath::RefreshPath(INextBot*, CBaseEntity*, IPathCost const&, Vector*)
 T ChasePath::Update(INextBot*, CBaseEntity*, IPathCost const&, Vector*)
 T ChasePath::~ChasePath()
 T CheckEmitReasonablePhysicsSpew()
 T CheckEntityVelocity(Vector&)
 T CheckForClimbableSurface(Vector const&, Vector const&)
 T CheckValveSignature(void const*, unsigned int, void const*, unsigned int)
 T ClassCanBuild(int, int)
 T ClassifyCorners(Vector*, Vector&, Vector&, Vector&, Vector&)
 T ClassifySniperSpot(HidingSpot*)
 T CleanupDMX(CDmxElement*)
 T ClearModelSoundsCache()
 T ClearMultiDamage()
 T ClientActive(edict_t*, bool)
 T ClientCommand(CBasePlayer*, CCommand const&)
 T ClientData_Update(CBasePlayer*)
 T ClientGamePrecache()
 T ClientPrecache()
 T ClientPrint(CBasePlayer*, int, char const*, char const*, char const*, char const*, char const*)
 T ClientPutInServer(edict_t*, char const*)
 T ClientPutInServerOverride(CBasePlayer* (*)(edict_t*, char const*))
 T Cmd_DamageDump_f()
 T Cmd_ShowtriggersToggle_f(CCommand const&)
 T CollectInvasionAreas::operator()(CNavArea*)
 T CollectSurroundingAreas(CUtlVector<CNavArea*, CUtlMemory<CNavArea*, int> >*, CNavArea*, float, float, float)
 T CollectTargets(CBaseCombatCharacter*, float, int, int, CUtlVector<CHandle<CBaseEntity>, CUtlMemory<CHandle<CBaseEntity>, int> >&)
 T CommandListIssues()
 T CommandNavAddToSelectedSet()
 T CommandNavAnalyze()
 T CommandNavAnalyzeScripted(CCommand const&)
 T CommandNavAvoid()
 T CommandNavBeginArea()
 T CommandNavBeginDeselecting()
 T CommandNavBeginDragDeselecting()
 T CommandNavBeginDragSelecting()
 T CommandNavBeginSelecting()
 T CommandNavBeginShiftXY()
 T CommandNavBuildLadder()
 T CommandNavCenterInWorld()
 T CommandNavCheckFileConsistency()
 T CommandNavClearSelectedSet()
 T CommandNavClearWalkableMarks()
 T CommandNavCompressID()
 T CommandNavConnect()
 T CommandNavCornerSelect()
 T CommandNavCrouch()
 T CommandNavDelete()
 T CommandNavDeleteMarked()
 T CommandNavDisconnect()
 T CommandNavDisconnectOutgoingOneWays()
 T CommandNavDontHide()
 T CommandNavEndArea()
 T CommandNavEndDeselecting()
 T CommandNavEndDragDeselecting()
 T CommandNavEndDragSelecting()
 T CommandNavEndSelecting()
 T CommandNavEndShiftXY()
 T CommandNavGenerate()
 T CommandNavGenerateIncremental()
 T CommandNavJump()
 T CommandNavLadderFlip()
 T CommandNavLoad()
 T CommandNavLowerDragVolumeMax()
 T CommandNavLowerDragVolumeMin()
 T CommandNavMakeSniperSpots()
 T CommandNavMark(CCommand const&)
 T CommandNavMarkUnnamed()
 T CommandNavMarkWalkable()
 T CommandNavMerge()
 T CommandNavNoHostages()
 T CommandNavNoJump()
 T CommandNavPlaceFloodFill()
 T CommandNavPlaceList()
 T CommandNavPlacePick()
 T CommandNavPlaceReplace(CCommand const&)
 T CommandNavPlaceSet()
 T CommandNavPrecise()
 T CommandNavRaiseDragVolumeMax()
 T CommandNavRaiseDragVolumeMin()
 T CommandNavRecallSelectedSet()
 T CommandNavRemoveFromSelectedSet()
 T CommandNavRemoveJumpAreas()
 T CommandNavRun()
 T CommandNavSave()
 T CommandNavSelectInvalidAreas()
 T CommandNavSetPlaceMode(CCommand const&)
 T CommandNavSplice()
 T CommandNavSplit()
 T CommandNavStand()
 T CommandNavStop()
 T CommandNavStoreSelectedSet()
 T CommandNavStrip()
 T CommandNavToggleDeselecting()
 T CommandNavToggleInSelectedSet()
 T CommandNavTogglePlaceMode()
 T CommandNavTogglePlacePainting()
 T CommandNavToggleSelectedSet()
 T CommandNavToggleSelecting()
 T CommandNavTransient()
 T CommandNavUnmark()
 T CommandNavUsePlace(CCommand const&)
 T CommandNavWalk()
 T CommandNavWarpToMark()
 T CommentarySystem_PePlayerRunCommand(CBasePlayer*, CUserCmd*)
 T CompareRangeToPoint(CTFNavArea* const*, CTFNavArea* const*)
 T ComputeRotSpeedToAlignAxes(Vector const&, Vector const&, Vector const&, float, float, float)
 T ComputeSeparatingPlane(Vector const&, QAngle const&, Vector const&, Vector const&, Vector const&, QAngle const&, Vector const&, Vector const&, float, cplane_t*)
 T ConCommand::AutoCompleteSuggest(char const*, CUtlVector<CUtlString, CUtlMemory<CUtlString, int> >&)
 T ConCommand::CanAutoComplete()
 T ConCommand::ConCommand(char const*, ICommandCallback*, char const*, int, ICommandCompletionCallback*)
 T ConCommand::ConCommand(char const*, void (*)(), char const*, int, int (*)(char const*, char (*) [64]))
 T ConCommand::ConCommand(char const*, void (*)(CCommand const&), char const*, int, int (*)(char const*, char (*) [64]))
 T ConCommand::Dispatch(CCommand const&)
 T ConCommand::IsCommand() const
 T ConCommand::~ConCommand()
 T ConCommandBase::AddFlags(int)
 T ConCommandBase::CreateBase(char const*, char const*, int)
 T ConCommandBase::GetDLLIdentifier() const
 T ConCommandBase::GetHelpText() const
 T ConCommandBase::GetName() const
 T ConCommandBase::Init()
 T ConCommandBase::IsFlagSet(int) const
 T ConCommandBase::IsRegistered() const
 T ConVar::AddFlags(int)
 T ConVar::ChangeStringValue(char const*, float)
 T ConVar::ClampValue(float&)
 T ConVar::ConVar(char const*, char const*, int)
 T ConVar::ConVar(char const*, char const*, int, char const*)
 T ConVar::ConVar(char const*, char const*, int, char const*, bool, float, bool, float)
 T ConVar::ConVar(char const*, char const*, int, char const*, bool, float, bool, float, void (*)(IConVar*, char const*, float))
 T ConVar::ConVar(char const*, char const*, int, char const*, void (*)(IConVar*, char const*, float))
 T ConVar::Create(char const*, char const*, int, char const*, bool, float, bool, float, bool, float, bool, float, void (*)(IConVar*, char const*, float))
 T ConVar::GetDefault() const
 T ConVar::GetHelpText() const
 T ConVar::GetName() const
 T ConVar::Init()
 T ConVar::InternalSetFloatValue(float, bool)
 T ConVar::InternalSetIntValue(int)
 T ConVar::InternalSetValue(char const*)
 T ConVar::IsCommand() const
 T ConVar::IsFlagSet(int) const
 T ConVar::IsRegistered() const
 T ConVar::Revert()
 T ConVar::SetValue(char const*)
 T ConVar::SetValue(float)
 T ConVar::SetValue(int)
 T ConVar::~ConVar()
 T ConVarRef::ConVarRef(IConVar*)
 T ConVarRef::ConVarRef(char const*)
 T ConVarRef::IsValid() const
 T ConVar_Register(int, IConCommandBaseAccessor*)
 T ConVar_Unregister()
 T ConcatTransforms(matrix3x4_t const&, matrix3x4_t const&, matrix3x4_t&)
 T ConceptHistory_t::operator=(ConceptHistory_t const&)
 T ConceptStringLessFunc(string_t const&, string_t const&)
 T ConditionExpiresFast(ETFCond)
 T ConnectTier1Libraries(void* (**)(char const*, int*), int)
 T ConnectTier2Libraries(void* (**)(char const*, int*), int)
 T ConnectTier3Libraries(void* (**)(char const*, int*), int)
 T ConsoleFireTargets(CBasePlayer*, char const*)
 T ConsoleKillTarget(CBasePlayer*, char const*)
 T ControlPointRoundSort(CTeamControlPointRound* const*, CTeamControlPointRound* const*)
 T CopySoundNameWithModifierToken(char*, char const*, int, char const*)
 T CopyStringAttributeValueToCharPointerOutput(CAttribute_String const*, char const**)
 T CopyUniqueId(UniqueId_t const&, UniqueId_t*)
 T CoroutineTestFunc(void*)
 T CoroutineTestL1(void*)
 T CoroutineTestL2(void*)
 T Coroutine_Cancel
 T Coroutine_Continue
 T Coroutine_Create
 T Coroutine_DebugAssert
 T Coroutine_DebugBreak
 T Coroutine_Finish()
 T Coroutine_GetCurrentlyActive
 T Coroutine_GetStackDepth
 T Coroutine_IsActive
 T Coroutine_Launch(CCoroutine&)
 T Coroutine_ReleaseThreadMemory
 T Coroutine_Test
 T Coroutine_ValidateGlobals
 T Coroutine_YieldToMain
 T CountdownTimer::Now() const
 T CreateBoneFollowersFromRagdoll(CBaseAnimating*, CBoneFollowerManager*, vcollide_t*)
 T CreateBotName(int, int, CTFBot::DifficultyType, char*, int)
 T CreateEntitiesInTransitionList(CSaveRestoreData*, int)
 T CreateEntityByName(char const*, int)
 T CreateEntityTransitionList(CSaveRestoreData*, int)
 T CreateEvaluatorByName(char const*, CTFQuestCondition*)
 T CreateGameRulesObject(char const*)
 T CreateInfoCameraLink(CBaseEntity*, CPointCamera*)
 T CreateInterface
 T CreateJob_CGCClientJobServerGoodbye(GCSDK::CGCClient*, void*)
 T CreateJob_CGCClientJobServerWelcome(GCSDK::CGCClient*, void*)
 T CreateJob_CGCCoaching_CoachJoining(GCSDK::CGCClient*, void*)
 T CreateJob_CGCCoaching_RemoveCurrentCoach(GCSDK::CGCClient*, void*)
 T CreateJob_CGCCompetitiveDailyStatsRollupJob(GCSDK::CGCClient*, void*)
 T CreateJob_CGCDev_NewItemRequestResponse(GCSDK::CGCClient*, void*)
 T CreateJob_CGCKickPlayerFromLobbyJob(GCSDK::CGCClient*, void*)
 T CreateJob_CGCQuestObjective_PointsChangeResponse(GCSDK::CGCClient*, void*)
 T CreateJob_CGCReplicateConVars(GCSDK::CGCClient*, void*)
 T CreateJob_CGCTFItemAcknowledged(GCSDK::CGCClient*, void*)
 T CreateJob_CGCTFQuickplay_PlayerJoining(GCSDK::CGCClient*, void*)
 T CreateJob_CGCUpdateConVar(GCSDK::CGCClient*, void*)
 T CreateJob_CGCUpdateItemSchema(GCSDK::CGCClient*, void*)
 T CreateJob_CGCUpdateServerModificationItemStateJob(GCSDK::CGCClient*, void*)
 T CreateJob_CGCUseServerModificationItemJob(GCSDK::CGCClient*, void*)
 T CreateJob_CGCVoteSystemVoteKickResponse(GCSDK::CGCClient*, void*)
 T CreateJob_CGC_GameServer_AuthChallenge(GCSDK::CGCClient*, void*)
 T CreateJob_CGC_GameServer_AuthResult(GCSDK::CGCClient*, void*)
 T CreateJob_CGC_GameServer_Duel_Request(GCSDK::CGCClient*, void*)
 T CreateJob_CGC_GameServer_Duel_Response(GCSDK::CGCClient*, void*)
 T CreateJob_CGC_RespawnPostLoadoutChange(GCSDK::CGCClient*, void*)
 T CreateKeepUpright(Vector const&, QAngle const&, CBaseEntity*, float, bool)
 T CreateNetworkStringTables_GameRules()
 T CreatePhysicsProp(char const*, Vector const&, Vector const&, IHandleEntity const*, bool, char const*)
 T CreateRagGib(char const*, Vector const&, QAngle const&, Vector const&, float, bool)
 T CreateRestrictionByName(char const*, CTFQuestCondition*)
 T CreateServerRagdoll(CBaseAnimating*, int, CTakeDamageInfo const&, int, bool)
 T CreateServerRagdollAttached(CBaseAnimating*, Vector const&, int, int, IPhysicsObject*, CBaseAnimating*, int, Vector const&, int, Vector const&)
 T CreateServerRagdollSubmodel(CBaseAnimating*, char const*, Vector const&, QAngle const&, int)
 T CreateSpellSpawnZombie(CBaseCombatCharacter*, Vector const&, int)
 T CreateStuckTable()
 T CreateTFPlayerAnimState(CTFPlayer*)
 T CreateUniqueId(UniqueId_t*)
 T CreateVGuiScreen(char const*, char const*, CBaseEntity*, CBaseEntity*, int)
 T CreateWeaponInfo()
 T Criteria::Criteria(Criteria const&)
 T Criteria::operator=(Criteria const&)
 T CrossProduct(float const*, float const*, float*)
 T CryptoPP::ASN1::pkcs_1()
 T CryptoPP::ASN1CryptoMaterial<CryptoPP::PublicKey>::Load(CryptoPP::BufferedTransformation&)
 T CryptoPP::ASN1CryptoMaterial<CryptoPP::PublicKey>::Save(CryptoPP::BufferedTransformation&) const
 T CryptoPP::ASN1CryptoMaterial<CryptoPP::PublicKey>::~ASN1CryptoMaterial()
 T CryptoPP::ASN1Object::BEREncode(CryptoPP::BufferedTransformation&) const
 T CryptoPP::ASN1Object::~ASN1Object()
 T CryptoPP::AbstractEuclideanDomain<CryptoPP::Integer>::Gcd(CryptoPP::Integer const&, CryptoPP::Integer const&) const
 T CryptoPP::AbstractEuclideanDomain<CryptoPP::Integer>::~AbstractEuclideanDomain()
 T CryptoPP::AbstractGroup<CryptoPP::Integer>::Accumulate(CryptoPP::Integer&, CryptoPP::Integer const&) const
 T CryptoPP::AbstractGroup<CryptoPP::Integer>::CascadeScalarMultiply(CryptoPP::Integer const&, CryptoPP::Integer const&, CryptoPP::Integer const&, CryptoPP::Integer const&) const
 T CryptoPP::AbstractGroup<CryptoPP::Integer>::Double(CryptoPP::Integer const&) const
 T CryptoPP::AbstractGroup<CryptoPP::Integer>::InversionIsFast() const
 T CryptoPP::AbstractGroup<CryptoPP::Integer>::Reduce(CryptoPP::Integer&, CryptoPP::Integer const&) const
 T CryptoPP::AbstractGroup<CryptoPP::Integer>::ScalarMultiply(CryptoPP::Integer const&, CryptoPP::Integer const&) const
 T CryptoPP::AbstractGroup<CryptoPP::Integer>::SimultaneousMultiply(CryptoPP::Integer*, CryptoPP::Integer const&, CryptoPP::Integer const*, unsigned int) const
 T CryptoPP::AbstractGroup<CryptoPP::Integer>::Subtract(CryptoPP::Integer const&, CryptoPP::Integer const&) const
 T CryptoPP::AbstractGroup<CryptoPP::Integer>::~AbstractGroup()
 T CryptoPP::AbstractRing<CryptoPP::Integer>::CascadeExponentiate(CryptoPP::Integer const&, CryptoPP::Integer const&, CryptoPP::Integer const&, CryptoPP::Integer const&) const
 T CryptoPP::AbstractRing<CryptoPP::Integer>::Divide(CryptoPP::Integer const&, CryptoPP::Integer const&) const
 T CryptoPP::AbstractRing<CryptoPP::Integer>::Exponentiate(CryptoPP::Integer const&, CryptoPP::Integer const&) const
 T CryptoPP::AbstractRing<CryptoPP::Integer>::MultiplicativeGroup() const
 T CryptoPP::AbstractRing<CryptoPP::Integer>::MultiplicativeGroupT::Accumulate(CryptoPP::Integer&, CryptoPP::Integer const&) const
 T CryptoPP::AbstractRing<CryptoPP::Integer>::MultiplicativeGroupT::Add(CryptoPP::Integer const&, CryptoPP::Integer const&) const
 T CryptoPP::AbstractRing<CryptoPP::Integer>::MultiplicativeGroupT::CascadeScalarMultiply(CryptoPP::Integer const&, CryptoPP::Integer const&, CryptoPP::Integer const&, CryptoPP::Integer const&) const
 T CryptoPP::AbstractRing<CryptoPP::Integer>::MultiplicativeGroupT::Double(CryptoPP::Integer const&) const
 T CryptoPP::AbstractRing<CryptoPP::Integer>::MultiplicativeGroupT::Equal(CryptoPP::Integer const&, CryptoPP::Integer const&) const
 T CryptoPP::AbstractRing<CryptoPP::Integer>::MultiplicativeGroupT::Identity() const
 T CryptoPP::AbstractRing<CryptoPP::Integer>::MultiplicativeGroupT::Inverse(CryptoPP::Integer const&) const
 T CryptoPP::AbstractRing<CryptoPP::Integer>::MultiplicativeGroupT::Reduce(CryptoPP::Integer&, CryptoPP::Integer const&) const
 T CryptoPP::AbstractRing<CryptoPP::Integer>::MultiplicativeGroupT::ScalarMultiply(CryptoPP::Integer const&, CryptoPP::Integer const&) const
 T CryptoPP::AbstractRing<CryptoPP::Integer>::MultiplicativeGroupT::SimultaneousMultiply(CryptoPP::Integer*, CryptoPP::Integer const&, CryptoPP::Integer const*, unsigned int) const
 T CryptoPP::AbstractRing<CryptoPP::Integer>::MultiplicativeGroupT::Subtract(CryptoPP::Integer const&, CryptoPP::Integer const&) const
 T CryptoPP::AbstractRing<CryptoPP::Integer>::MultiplicativeGroupT::~MultiplicativeGroupT()
 T CryptoPP::AbstractRing<CryptoPP::Integer>::SimultaneousExponentiate(CryptoPP::Integer*, CryptoPP::Integer const&, CryptoPP::Integer const*, unsigned int) const
 T CryptoPP::AbstractRing<CryptoPP::Integer>::Square(CryptoPP::Integer const&) const
 T CryptoPP::AbstractRing<CryptoPP::Integer>::~AbstractRing()
 T CryptoPP::Algorithm::Algorithm(bool)
 T CryptoPP::Algorithm::AlgorithmName() const
 T CryptoPP::Algorithm::~Algorithm()
 T CryptoPP::AlgorithmImpl<CryptoPP::IteratedHash<unsigned int, CryptoPP::EnumToType<CryptoPP::ByteOrder, 1>, 64u, CryptoPP::HashTransformation>, CryptoPP::SHA256>::AlgorithmName() const
 T CryptoPP::AlgorithmImpl<CryptoPP::IteratedHash<unsigned int, CryptoPP::EnumToType<CryptoPP::ByteOrder, 1>, 64u, CryptoPP::HashTransformation>, CryptoPP::SHA256>::~AlgorithmImpl()
 T CryptoPP::AlgorithmImpl<CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher, CryptoPP::Rijndael_Info>, CryptoPP::TwoBases<CryptoPP::BlockCipher, CryptoPP::Rijndael_Info> >, CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher, CryptoPP::Rijndael_Info>, CryptoPP::TwoBases<CryptoPP::BlockCipher, CryptoPP::Rijndael_Info> > >::AlgorithmName() const
 T CryptoPP::AlgorithmImpl<CryptoPP::TF_VerifierBase, CryptoPP::TF_SS<CryptoPP::PKCS1v15, CryptoPP::SHA256, CryptoPP::RSA, int> >::AlgorithmName() const
 T CryptoPP::AlgorithmParameters CryptoPP::MakeParameters<CryptoPP::ConstByteArrayParameter>(char const*, CryptoPP::ConstByteArrayParameter const&, bool)
 T CryptoPP::AlgorithmParameters& CryptoPP::AlgorithmParameters::operator()<CryptoPP::ConstByteArrayParameter>(char const*, CryptoPP::ConstByteArrayParameter const&, bool)
 T CryptoPP::AlgorithmParameters::AlgorithmParameters()
 T CryptoPP::AlgorithmParameters::AlgorithmParameters(CryptoPP::AlgorithmParameters const&)
 T CryptoPP::AlgorithmParameters::GetVoidValue(char const*, std::type_info const&, void*) const
 T CryptoPP::AlgorithmParameters::~AlgorithmParameters()
 T CryptoPP::AlgorithmParametersBase::GetVoidValue(char const*, std::type_info const&, void*) const
 T CryptoPP::AlgorithmParametersBase::ParameterNotUsed::ParameterNotUsed(char const*)
 T CryptoPP::AlgorithmParametersBase::ParameterNotUsed::~ParameterNotUsed()
 T CryptoPP::AlgorithmParametersBase::~AlgorithmParametersBase()
 T CryptoPP::AlgorithmParametersTemplate<CryptoPP::ConstByteArrayParameter>::AssignValue(char const*, std::type_info const&, void*) const
 T CryptoPP::AlgorithmParametersTemplate<CryptoPP::ConstByteArrayParameter>::~AlgorithmParametersTemplate()
 T CryptoPP::AlignedAllocate(unsigned long)
 T CryptoPP::AlignedDeallocate(void*)
 T CryptoPP::AllocatorBase<unsigned int>::CheckSize(unsigned long)
 T CryptoPP::AllocatorWithCleanup<unsigned char, false>::pointer CryptoPP::StandardReallocate<unsigned char, CryptoPP::AllocatorWithCleanup<unsigned char, false> >(CryptoPP::AllocatorWithCleanup<unsigned char, false>&, unsigned char*, CryptoPP::AllocatorWithCleanup<unsigned char, false>::size_type, CryptoPP::AllocatorWithCleanup<unsigned char, false>::size_type, bool)
 T CryptoPP::AllocatorWithCleanup<unsigned int, true>::pointer CryptoPP::StandardReallocate<unsigned int, CryptoPP::AllocatorWithCleanup<unsigned int, true> >(CryptoPP::AllocatorWithCleanup<unsigned int, true>&, unsigned int*, CryptoPP::AllocatorWithCleanup<unsigned int, true>::size_type, CryptoPP::AllocatorWithCleanup<unsigned int, true>::size_type, bool)
 T CryptoPP::AlmostInverse(unsigned int*, unsigned int*, unsigned int const*, unsigned long, unsigned int const*, unsigned long)
 T CryptoPP::ArraySink::CreatePutSpace(unsigned long&)
 T CryptoPP::ArraySink::IsolatedInitialize(CryptoPP::NameValuePairs const&)
 T CryptoPP::ArraySink::Put2(unsigned char const*, unsigned long, int, bool)
 T CryptoPP::ArraySink::~ArraySink()
 T CryptoPP::AssignFromHelperClass<CryptoPP::RSAFunction, CryptoPP::RSAFunction> CryptoPP::AssignFromHelper<CryptoPP::RSAFunction>(CryptoPP::RSAFunction*, CryptoPP::NameValuePairs const&)
 T CryptoPP::AssignFromHelperClass<CryptoPP::RSAFunction, CryptoPP::RSAFunction>& CryptoPP::AssignFromHelperClass<CryptoPP::RSAFunction, CryptoPP::RSAFunction>::operator()<CryptoPP::Integer const&>(char const*, void (CryptoPP::RSAFunction::*)(CryptoPP::Integer const&))
 T CryptoPP::AssignIntToInteger(std::type_info const&, void*, void const*)
 T CryptoPP::AsymmetricMultiply(unsigned int*, unsigned int*, unsigned int const*, unsigned long, unsigned int const*, unsigned long)
 T CryptoPP::AutoSeededX917RNG<CryptoPP::Rijndael>::CanIncorporateEntropy() const
 T CryptoPP::AutoSeededX917RNG<CryptoPP::Rijndael>::GenerateIntoBufferedTransformation(CryptoPP::BufferedTransformation&, std::string const&, unsigned long long)
 T CryptoPP::AutoSeededX917RNG<CryptoPP::Rijndael>::IncorporateEntropy(unsigned char const*, unsigned long)
 T CryptoPP::AutoSeededX917RNG<CryptoPP::Rijndael>::Reseed(bool, unsigned char const*, unsigned long)
 T CryptoPP::AutoSeededX917RNG<CryptoPP::Rijndael>::Reseed(unsigned char const*, unsigned long, unsigned char const*, unsigned char const*)
 T CryptoPP::AutoSeededX917RNG<CryptoPP::Rijndael>::~AutoSeededX917RNG()
 T CryptoPP::AutoSignaling<CryptoPP::BufferedTransformation>::GetAutoSignalPropagation() const
 T CryptoPP::AutoSignaling<CryptoPP::BufferedTransformation>::SetAutoSignalPropagation(int)
 T CryptoPP::AutoSignaling<CryptoPP::BufferedTransformation>::~AutoSignaling()
 T CryptoPP::AutoSignaling<CryptoPP::InputRejecting<CryptoPP::BufferedTransformation> >::GetAutoSignalPropagation() const
 T CryptoPP::AutoSignaling<CryptoPP::InputRejecting<CryptoPP::BufferedTransformation> >::SetAutoSignalPropagation(int)
 T CryptoPP::BERDecodeErr::~BERDecodeErr()
 T CryptoPP::BERDecodeError()
 T CryptoPP::BERDecodeNull(CryptoPP::BufferedTransformation&)
 T CryptoPP::BERGeneralDecoder::BERGeneralDecoder(CryptoPP::BERGeneralDecoder&, unsigned char)
 T CryptoPP::BERGeneralDecoder::BERGeneralDecoder(CryptoPP::BufferedTransformation&, unsigned char)
 T CryptoPP::BERGeneralDecoder::CheckByte(unsigned char)
 T CryptoPP::BERGeneralDecoder::CopyRangeTo2(CryptoPP::BufferedTransformation&, unsigned long long&, unsigned long long, std::string const&, bool) const
 T CryptoPP::BERGeneralDecoder::EndReached() const
 T CryptoPP::BERGeneralDecoder::Init(unsigned char)
 T CryptoPP::BERGeneralDecoder::MessageEnd()
 T CryptoPP::BERGeneralDecoder::ReduceLength(unsigned long long)
 T CryptoPP::BERGeneralDecoder::StoreInitialize(CryptoPP::NameValuePairs const&)
 T CryptoPP::BERGeneralDecoder::TransferTo2(CryptoPP::BufferedTransformation&, unsigned long long&, std::string const&, bool)
 T CryptoPP::BERGeneralDecoder::~BERGeneralDecoder()
 T CryptoPP::BERLengthDecode(CryptoPP::BufferedTransformation&, unsigned long long&, bool&)
 T CryptoPP::BERLengthDecode(CryptoPP::BufferedTransformation&, unsigned long&)
 T CryptoPP::BERSequenceDecoder::~BERSequenceDecoder()
 T CryptoPP::Baseline_Add(unsigned long, unsigned int*, unsigned int const*, unsigned int const*)
 T CryptoPP::Baseline_Multiply16(unsigned int*, unsigned int const*, unsigned int const*)
 T CryptoPP::Baseline_Multiply2(unsigned int*, unsigned int const*, unsigned int const*)
 T CryptoPP::Baseline_Multiply4(unsigned int*, unsigned int const*, unsigned int const*)
 T CryptoPP::Baseline_Multiply8(unsigned int*, unsigned int const*, unsigned int const*)
 T CryptoPP::Baseline_MultiplyBottom16(unsigned int*, unsigned int const*, unsigned int const*)
 T CryptoPP::Baseline_MultiplyBottom2(unsigned int*, unsigned int const*, unsigned int const*)
 T CryptoPP::Baseline_MultiplyBottom4(unsigned int*, unsigned int const*, unsigned int const*)
 T CryptoPP::Baseline_MultiplyBottom8(unsigned int*, unsigned int const*, unsigned int const*)
 T CryptoPP::Baseline_MultiplyTop16(unsigned int*, unsigned int const*, unsigned int const*, unsigned int)
 T CryptoPP::Baseline_MultiplyTop2(unsigned int*, unsigned int const*, unsigned int const*, unsigned int)
 T CryptoPP::Baseline_MultiplyTop4(unsigned int*, unsigned int const*, unsigned int const*, unsigned int)
 T CryptoPP::Baseline_MultiplyTop8(unsigned int*, unsigned int const*, unsigned int const*, unsigned int)
 T CryptoPP::Baseline_Square16(unsigned int*, unsigned int const*)
 T CryptoPP::Baseline_Square2(unsigned int*, unsigned int const*)
 T CryptoPP::Baseline_Square4(unsigned int*, unsigned int const*)
 T CryptoPP::Baseline_Square8(unsigned int*, unsigned int const*)
 T CryptoPP::Baseline_Sub(unsigned long, unsigned int*, unsigned int const*, unsigned int const*)
 T CryptoPP::BitBucket::AlgorithmName() const
 T CryptoPP::BitBucket::IsolatedInitialize(CryptoPP::NameValuePairs const&)
 T CryptoPP::BitBucket::Put2(unsigned char const*, unsigned long, int, bool)
 T CryptoPP::BitBucket::~BitBucket()
 T CryptoPP::BlockCipher::GetAlgorithm() const
 T CryptoPP::BlockCipher::~BlockCipher()
 T CryptoPP::BlockCipherFinal<(CryptoPP::CipherDir)0, CryptoPP::Rijndael::Enc>::IsForwardTransformation() const
 T CryptoPP::BlockCipherFinal<(CryptoPP::CipherDir)0, CryptoPP::Rijndael::Enc>::~BlockCipherFinal()
 T CryptoPP::BlockCipherImpl<CryptoPP::Rijndael_Info, CryptoPP::BlockCipher>::BlockSize() const
 T CryptoPP::BlockTransformation::AdvancedProcessBlocks(unsigned char const*, unsigned char const*, unsigned char*, unsigned long, unsigned int) const
 T CryptoPP::BlockTransformation::IsPermutation() const
 T CryptoPP::BlockTransformation::OptimalDataAlignment() const
 T CryptoPP::BlockTransformation::OptimalNumberOfParallelBlocks() const
 T CryptoPP::BlockingRng::BlockingRng()
 T CryptoPP::BlockingRng::GenerateBlock(unsigned char*, unsigned long)
 T CryptoPP::BlockingRng::~BlockingRng()
 T CryptoPP::BufferedTransformation::AnyMessages() const
 T CryptoPP::BufferedTransformation::AnyRetrievable() const
 T CryptoPP::BufferedTransformation::Attach(CryptoPP::BufferedTransformation*)
 T CryptoPP::BufferedTransformation::Attachable()
 T CryptoPP::BufferedTransformation::AttachedTransformation()
 T CryptoPP::BufferedTransformation::AttachedTransformation() const
 T CryptoPP::BufferedTransformation::BlockingInputOnly::~BlockingInputOnly()
 T CryptoPP::BufferedTransformation::CanModifyInput() const
 T CryptoPP::BufferedTransformation::ChannelCreatePutSpace(std::string const&, unsigned long&)
 T CryptoPP::BufferedTransformation::ChannelFlush(std::string const&, bool, int, bool)
 T CryptoPP::BufferedTransformation::ChannelMessageSeriesEnd(std::string const&, int, bool)
 T CryptoPP::BufferedTransformation::ChannelPut2(std::string const&, unsigned char const*, unsigned long, int, bool)
 T CryptoPP::BufferedTransformation::ChannelPutModifiable2(std::string const&, unsigned char*, unsigned long, int, bool)
 T CryptoPP::BufferedTransformation::CopyMessagesTo(CryptoPP::BufferedTransformation&, unsigned int, std::string const&) const
 T CryptoPP::BufferedTransformation::CreatePutSpace(unsigned long&)
 T CryptoPP::BufferedTransformation::Detach(CryptoPP::BufferedTransformation*)
 T CryptoPP::BufferedTransformation::Flush(bool, int, bool)
 T CryptoPP::BufferedTransformation::Get(unsigned char&)
 T CryptoPP::BufferedTransformation::Get(unsigned char*, unsigned long)
 T CryptoPP::BufferedTransformation::GetAutoSignalPropagation() const
 T CryptoPP::BufferedTransformation::GetMaxWaitObjectCount() const
 T CryptoPP::BufferedTransformation::GetNextMessage()
 T CryptoPP::BufferedTransformation::GetNextMessageSeries()
 T CryptoPP::BufferedTransformation::GetWaitObjects(CryptoPP::WaitObjectContainer&, CryptoPP::CallStack const&)
 T CryptoPP::BufferedTransformation::GetWord16(unsigned short&, CryptoPP::ByteOrder)
 T CryptoPP::BufferedTransformation::Initialize(CryptoPP::NameValuePairs const&, int)
 T CryptoPP::BufferedTransformation::InvalidChannelName::~InvalidChannelName()
 T CryptoPP::BufferedTransformation::IsolatedInitialize(CryptoPP::NameValuePairs const&)
 T CryptoPP::BufferedTransformation::IsolatedMessageSeriesEnd(bool)
 T CryptoPP::BufferedTransformation::MaxRetrievable() const
 T CryptoPP::BufferedTransformation::MessageSeriesEnd(int, bool)
 T CryptoPP::BufferedTransformation::NoChannelSupport::~NoChannelSupport()
 T CryptoPP::BufferedTransformation::NumberOfMessageSeries() const
 T CryptoPP::BufferedTransformation::NumberOfMessages() const
 T CryptoPP::BufferedTransformation::NumberOfMessagesInThisSeries() const
 T CryptoPP::BufferedTransformation::Peek(unsigned char&) const
 T CryptoPP::BufferedTransformation::Peek(unsigned char*, unsigned long) const
 T CryptoPP::BufferedTransformation::PeekWord16(unsigned short&, CryptoPP::ByteOrder) const
 T CryptoPP::BufferedTransformation::PutModifiable2(unsigned char*, unsigned long, int, bool)
 T CryptoPP::BufferedTransformation::SetAutoSignalPropagation(int)
 T CryptoPP::BufferedTransformation::SetRetrievalChannel(std::string const&)
 T CryptoPP::BufferedTransformation::Skip(unsigned long long)
 T CryptoPP::BufferedTransformation::SkipAll()
 T CryptoPP::BufferedTransformation::SkipMessages(unsigned int)
 T CryptoPP::BufferedTransformation::TotalBytesRetrievable() const
 T CryptoPP::BufferedTransformation::TransferAllTo2(CryptoPP::BufferedTransformation&, std::string const&, bool)
 T CryptoPP::BufferedTransformation::TransferMessagesTo2(CryptoPP::BufferedTransformation&, unsigned int&, std::string const&, bool)
 T CryptoPP::BufferedTransformation::~BufferedTransformation()
 T CryptoPP::Bufferless<CryptoPP::BufferedTransformation>::IsolatedFlush(bool, bool)
 T CryptoPP::Bufferless<CryptoPP::BufferedTransformation>::~Bufferless()
 T CryptoPP::Bufferless<CryptoPP::Sink>::IsolatedFlush(bool, bool)
 T CryptoPP::ByteQueue::AnyRetrievable() const
 T CryptoPP::ByteQueue::ByteQueue(unsigned long)
 T CryptoPP::ByteQueue::CleanupUsedNodes()
 T CryptoPP::ByteQueue::Clear()
 T CryptoPP::ByteQueue::CopyRangeTo2(CryptoPP::BufferedTransformation&, unsigned long long&, unsigned long long, std::string const&, bool) const
 T CryptoPP::ByteQueue::CreatePutSpace(unsigned long&)
 T CryptoPP::ByteQueue::CurrentSize() const
 T CryptoPP::ByteQueue::Destroy()
 T CryptoPP::ByteQueue::FinalizeLazyPut()
 T CryptoPP::ByteQueue::Get(unsigned char&)
 T CryptoPP::ByteQueue::Get(unsigned char*, unsigned long)
 T CryptoPP::ByteQueue::IsEmpty() const
 T CryptoPP::ByteQueue::IsolatedInitialize(CryptoPP::NameValuePairs const&)
 T CryptoPP::ByteQueue::MaxRetrievable() const
 T CryptoPP::ByteQueue::Peek(unsigned char&) const
 T CryptoPP::ByteQueue::Peek(unsigned char*, unsigned long) const
 T CryptoPP::ByteQueue::Put2(unsigned char const*, unsigned long, int, bool)
 T CryptoPP::ByteQueue::SetNodeSize(unsigned long)
 T CryptoPP::ByteQueue::TransferTo2(CryptoPP::BufferedTransformation&, unsigned long long&, std::string const&, bool)
 T CryptoPP::ByteQueue::Walker::CopyRangeTo2(CryptoPP::BufferedTransformation&, unsigned long long&, unsigned long long, std::string const&, bool) const
 T CryptoPP::ByteQueue::Walker::Get(unsigned char&)
 T CryptoPP::ByteQueue::Walker::Get(unsigned char*, unsigned long)
 T CryptoPP::ByteQueue::Walker::IsolatedInitialize(CryptoPP::NameValuePairs const&)
 T CryptoPP::ByteQueue::Walker::MaxRetrievable() const
 T CryptoPP::ByteQueue::Walker::Peek(unsigned char&) const
 T CryptoPP::ByteQueue::Walker::Peek(unsigned char*, unsigned long) const
 T CryptoPP::ByteQueue::Walker::TransferTo2(CryptoPP::BufferedTransformation&, unsigned long long&, std::string const&, bool)
 T CryptoPP::ByteQueue::Walker::~Walker()
 T CryptoPP::ByteQueue::~ByteQueue()
 T CryptoPP::CallNewHandler()
 T CryptoPP::CannotFlush::~CannotFlush()
 T CryptoPP::ClassNullRNG::AlgorithmName() const
 T CryptoPP::ClassNullRNG::GenerateBlock(unsigned char*, unsigned long)
 T CryptoPP::ClassNullRNG::~ClassNullRNG()
 T CryptoPP::Clonable::Clone() const
 T CryptoPP::Clonable::~Clonable()
 T CryptoPP::ClonableImpl<CryptoPP::BlockCipherFinal<(CryptoPP::CipherDir)0, CryptoPP::Rijndael::Enc>, CryptoPP::Rijndael::Enc>::Clone() const
 T CryptoPP::ClonableImpl<CryptoPP::SHA256, CryptoPP::AlgorithmImpl<CryptoPP::IteratedHash<unsigned int, CryptoPP::EnumToType<CryptoPP::ByteOrder, 1>, 64u, CryptoPP::HashTransformation>, CryptoPP::SHA256> >::Clone() const
 T CryptoPP::CpuId(unsigned int, unsigned int*)
 T CryptoPP::CryptoMaterial::InvalidMaterial::~InvalidMaterial()
 T CryptoPP::CryptoMaterial::Load(CryptoPP::BufferedTransformation&)
 T CryptoPP::CryptoMaterial::LoadPrecomputation(CryptoPP::BufferedTransformation&)
 T CryptoPP::CryptoMaterial::Precompute(unsigned int)
 T CryptoPP::CryptoMaterial::Save(CryptoPP::BufferedTransformation&) const
 T CryptoPP::CryptoMaterial::SavePrecomputation(CryptoPP::BufferedTransformation&) const
 T CryptoPP::CryptoMaterial::SupportsPrecomputation() const
 T CryptoPP::CryptoMaterial::ThrowIfInvalid(CryptoPP::RandomNumberGenerator&, unsigned int) const
 T CryptoPP::CryptoMaterial::~CryptoMaterial()
 T CryptoPP::DEREncodeNull(CryptoPP::BufferedTransformation&)
 T CryptoPP::DERGeneralEncoder::DERGeneralEncoder(CryptoPP::BufferedTransformation&, unsigned char)
 T CryptoPP::DERGeneralEncoder::DERGeneralEncoder(CryptoPP::DERGeneralEncoder&, unsigned char)
 T CryptoPP::DERGeneralEncoder::MessageEnd()
 T CryptoPP::DERGeneralEncoder::~DERGeneralEncoder()
 T CryptoPP::DERLengthEncode(CryptoPP::BufferedTransformation&, unsigned long long)
 T CryptoPP::DERSequenceEncoder::~DERSequenceEncoder()
 T CryptoPP::DL_BadElement::~DL_BadElement()
 T CryptoPP::DetectX86Features()
 T CryptoPP::Divide(unsigned int*, unsigned int*, unsigned int*, unsigned int const*, unsigned long, unsigned int const*, unsigned long)
 T CryptoPP::DivideByPower2Mod(unsigned int*, unsigned int const*, unsigned long, unsigned int const*, unsigned long)
 T CryptoPP::EuclideanDomainOf<CryptoPP::Integer>::Accumulate(CryptoPP::Integer&, CryptoPP::Integer const&) const
 T CryptoPP::EuclideanDomainOf<CryptoPP::Integer>::Add(CryptoPP::Integer const&, CryptoPP::Integer const&) const
 T CryptoPP::EuclideanDomainOf<CryptoPP::Integer>::Divide(CryptoPP::Integer const&, CryptoPP::Integer const&) const
 T CryptoPP::EuclideanDomainOf<CryptoPP::Integer>::DivisionAlgorithm(CryptoPP::Integer&, CryptoPP::Integer&, CryptoPP::Integer const&, CryptoPP::Integer const&) const
 T CryptoPP::EuclideanDomainOf<CryptoPP::Integer>::Double(CryptoPP::Integer const&) const
 T CryptoPP::EuclideanDomainOf<CryptoPP::Integer>::Equal(CryptoPP::Integer const&, CryptoPP::Integer const&) const
 T CryptoPP::EuclideanDomainOf<CryptoPP::Integer>::Identity() const
 T CryptoPP::EuclideanDomainOf<CryptoPP::Integer>::Inverse(CryptoPP::Integer const&) const
 T CryptoPP::EuclideanDomainOf<CryptoPP::Integer>::IsUnit(CryptoPP::Integer const&) const
 T CryptoPP::EuclideanDomainOf<CryptoPP::Integer>::Mod(CryptoPP::Integer const&, CryptoPP::Integer const&) const
 T CryptoPP::EuclideanDomainOf<CryptoPP::Integer>::MultiplicativeIdentity() const
 T CryptoPP::EuclideanDomainOf<CryptoPP::Integer>::MultiplicativeInverse(CryptoPP::Integer const&) const
 T CryptoPP::EuclideanDomainOf<CryptoPP::Integer>::Multiply(CryptoPP::Integer const&, CryptoPP::Integer const&) const
 T CryptoPP::EuclideanDomainOf<CryptoPP::Integer>::Reduce(CryptoPP::Integer&, CryptoPP::Integer const&) const
 T CryptoPP::EuclideanDomainOf<CryptoPP::Integer>::Square(CryptoPP::Integer const&) const
 T CryptoPP::EuclideanDomainOf<CryptoPP::Integer>::Subtract(CryptoPP::Integer const&, CryptoPP::Integer const&) const
 T CryptoPP::EuclideanDomainOf<CryptoPP::Integer>::~EuclideanDomainOf()
 T CryptoPP::Exception::Exception(CryptoPP::Exception::ErrorType, std::string const&)
 T CryptoPP::Exception::what() const
 T CryptoPP::Exception::~Exception()
 T CryptoPP::FIPS_140_2_ComplianceEnabled()
 T CryptoPP::Filter::Attachable()
 T CryptoPP::Filter::AttachedTransformation()
 T CryptoPP::Filter::AttachedTransformation() const
 T CryptoPP::Filter::CopyRangeTo2(CryptoPP::BufferedTransformation&, unsigned long long&, unsigned long long, std::string const&, bool) const
 T CryptoPP::Filter::Detach(CryptoPP::BufferedTransformation*)
 T CryptoPP::Filter::Filter(CryptoPP::BufferedTransformation*)
 T CryptoPP::Filter::Flush(bool, int, bool)
 T CryptoPP::Filter::Initialize(CryptoPP::NameValuePairs const&, int)
 T CryptoPP::Filter::MessageSeriesEnd(int, bool)
 T CryptoPP::Filter::NewDefaultAttachment() const
 T CryptoPP::Filter::OutputFlush(int, bool, int, bool, std::string const&)
 T CryptoPP::Filter::OutputMessageSeriesEnd(int, int, bool, std::string const&)
 T CryptoPP::Filter::PropagateInitialize(CryptoPP::NameValuePairs const&, int)
 T CryptoPP::Filter::ShouldPropagateMessageEnd() const
 T CryptoPP::Filter::ShouldPropagateMessageSeriesEnd() const
 T CryptoPP::Filter::TransferTo2(CryptoPP::BufferedTransformation&, unsigned long long&, std::string const&, bool)
 T CryptoPP::Filter::~Filter()
 T CryptoPP::GetPowerUpSelfTestStatus()
 T CryptoPP::GetValueHelperClass<CryptoPP::RSAFunction, CryptoPP::RSAFunction> CryptoPP::GetValueHelper<CryptoPP::RSAFunction>(CryptoPP::RSAFunction const*, char const*, std::type_info const&, void*, CryptoPP::NameValuePairs const*)
 T CryptoPP::HashInputTooLong::~HashInputTooLong()
 T CryptoPP::HashTransformation::BlockSize() const
 T CryptoPP::HashTransformation::CalculateDigest(unsigned char*, unsigned char const*, unsigned long)
 T CryptoPP::HashTransformation::CalculateTruncatedDigest(unsigned char*, unsigned long, unsigned char const*, unsigned long)
 T CryptoPP::HashTransformation::CreateUpdateSpace(unsigned long&)
 T CryptoPP::HashTransformation::Final(unsigned char*)
 T CryptoPP::HashTransformation::OptimalBlockSize() const
 T CryptoPP::HashTransformation::OptimalDataAlignment() const
 T CryptoPP::HashTransformation::Restart()
 T CryptoPP::HashTransformation::ThrowIfInvalidTruncatedSize(unsigned long) const
 T CryptoPP::HashTransformation::TruncatedVerify(unsigned char const*, unsigned long)
 T CryptoPP::HashTransformation::Verify(unsigned char const*)
 T CryptoPP::HashTransformation::VerifyDigest(unsigned char const*, unsigned char const*, unsigned long)
 T CryptoPP::HashTransformation::VerifyTruncatedDigest(unsigned char const*, unsigned long, unsigned char const*, unsigned long)
 T CryptoPP::HashVerificationFilter::HashVerificationFailed::~HashVerificationFailed()
 T CryptoPP::InitializeInteger::InitializeInteger()
 T CryptoPP::InputRejecting<CryptoPP::BufferedTransformation>::ChannelMessageSeriesEnd(std::string const&, int, bool)
 T CryptoPP::InputRejecting<CryptoPP::BufferedTransformation>::ChannelPut2(std::string const&, unsigned char const*, unsigned long, int, bool)
 T CryptoPP::InputRejecting<CryptoPP::BufferedTransformation>::InputRejected::~InputRejected()
 T CryptoPP::InputRejecting<CryptoPP::BufferedTransformation>::IsolatedFlush(bool, bool)
 T CryptoPP::InputRejecting<CryptoPP::BufferedTransformation>::IsolatedMessageSeriesEnd(bool)
 T CryptoPP::InputRejecting<CryptoPP::BufferedTransformation>::Put2(unsigned char const*, unsigned long, int, bool)
 T CryptoPP::InputRejecting<CryptoPP::BufferedTransformation>::~InputRejecting()
 T CryptoPP::InputRejecting<CryptoPP::Filter>::ChannelMessageSeriesEnd(std::string const&, int, bool)
 T CryptoPP::InputRejecting<CryptoPP::Filter>::ChannelPut2(std::string const&, unsigned char const*, unsigned long, int, bool)
 T CryptoPP::InputRejecting<CryptoPP::Filter>::InputRejected::InputRejected()
 T CryptoPP::InputRejecting<CryptoPP::Filter>::InputRejected::~InputRejected()
 T CryptoPP::InputRejecting<CryptoPP::Filter>::IsolatedFlush(bool, bool)
 T CryptoPP::InputRejecting<CryptoPP::Filter>::IsolatedMessageSeriesEnd(bool)
 T CryptoPP::InputRejecting<CryptoPP::Filter>::Put2(unsigned char const*, unsigned long, int, bool)
 T CryptoPP::Integer CryptoPP::Hack_DefaultValueFromConstReferenceType<CryptoPP::Integer>(CryptoPP::Integer const&)
 T CryptoPP::Integer::AbsoluteValue() const
 T CryptoPP::Integer::BERDecode(CryptoPP::BufferedTransformation&)
 T CryptoPP::Integer::BitCount() const
 T CryptoPP::Integer::ByteCount() const
 T CryptoPP::Integer::Compare(CryptoPP::Integer const&) const
 T CryptoPP::Integer::DEREncode(CryptoPP::BufferedTransformation&) const
 T CryptoPP::Integer::Decode(CryptoPP::BufferedTransformation&, unsigned long, CryptoPP::Integer::Signedness)
 T CryptoPP::Integer::Decode(unsigned char const*, unsigned long, CryptoPP::Integer::Signedness)
 T CryptoPP::Integer::Divide(CryptoPP::Integer&, CryptoPP::Integer&, CryptoPP::Integer const&, CryptoPP::Integer const&)
 T CryptoPP::Integer::DivideByZero::~DivideByZero()
 T CryptoPP::Integer::DividedBy(CryptoPP::Integer const&) const
 T CryptoPP::Integer::Encode(CryptoPP::BufferedTransformation&, unsigned long, CryptoPP::Integer::Signedness) const
 T CryptoPP::Integer::Encode(unsigned char*, unsigned long, CryptoPP::Integer::Signedness) const
 T CryptoPP::Integer::Gcd(CryptoPP::Integer const&, CryptoPP::Integer const&)
 T CryptoPP::Integer::GetBit(unsigned long) const
 T CryptoPP::Integer::GetByte(unsigned long) const
 T CryptoPP::Integer::Integer()
 T CryptoPP::Integer::Integer(CryptoPP::Integer const&)
 T CryptoPP::Integer::Integer(long)
 T CryptoPP::Integer::Integer(unsigned char const*, unsigned long, CryptoPP::Integer::Signedness)
 T CryptoPP::Integer::Integer(unsigned int, unsigned long)
 T CryptoPP::Integer::InverseMod(CryptoPP::Integer const&) const
 T CryptoPP::Integer::IsUnit() const
 T CryptoPP::Integer::MinEncodedSize(CryptoPP::Integer::Signedness) const
 T CryptoPP::Integer::Minus(CryptoPP::Integer const&) const
 T CryptoPP::Integer::Modulo(CryptoPP::Integer const&) const
 T CryptoPP::Integer::Modulo(unsigned int) const
 T CryptoPP::Integer::MultiplicativeInverse() const
 T CryptoPP::Integer::Negate()
 T CryptoPP::Integer::One()
 T CryptoPP::Integer::OpenPGPDecodeErr::~OpenPGPDecodeErr()
 T CryptoPP::Integer::Plus(CryptoPP::Integer const&) const
 T CryptoPP::Integer::PositiveCompare(CryptoPP::Integer const&) const
 T CryptoPP::Integer::Power2(unsigned long)
 T CryptoPP::Integer::RandomNumberNotFound::~RandomNumberNotFound()
 T CryptoPP::Integer::SetBit(unsigned long, bool)
 T CryptoPP::Integer::Times(CryptoPP::Integer const&) const
 T CryptoPP::Integer::WordCount() const
 T CryptoPP::Integer::Zero()
 T CryptoPP::Integer::operator!() const
 T CryptoPP::Integer::operator+=(CryptoPP::Integer const&)
 T CryptoPP::Integer::operator-() const
 T CryptoPP::Integer::operator--()
 T CryptoPP::Integer::operator-=(CryptoPP::Integer const&)
 T CryptoPP::Integer::operator<<=(unsigned long)
 T CryptoPP::Integer::operator=(CryptoPP::Integer const&)
 T CryptoPP::Integer::operator>>=(unsigned long)
 T CryptoPP::Integer::~Integer()
 T CryptoPP::InvalidArgument::~InvalidArgument()
 T CryptoPP::InvalidCiphertext::~InvalidCiphertext()
 T CryptoPP::InvalidDataFormat::~InvalidDataFormat()
 T CryptoPP::InvalidKeyLength::~InvalidKeyLength()
 T CryptoPP::InvertibleRSAFunction::GetModPrime1PrivateExponent() const
 T CryptoPP::InvertibleRSAFunction::GetModPrime2PrivateExponent() const
 T CryptoPP::InvertibleRSAFunction::GetMultiplicativeInverseOfPrime2ModPrime1() const
 T CryptoPP::InvertibleRSAFunction::GetPrime1() const
 T CryptoPP::InvertibleRSAFunction::GetPrime2() const
 T CryptoPP::InvertibleRSAFunction::GetPrivateExponent() const
 T CryptoPP::InvertibleRSAFunction::SetModPrime1PrivateExponent(CryptoPP::Integer const&)
 T CryptoPP::InvertibleRSAFunction::SetModPrime2PrivateExponent(CryptoPP::Integer const&)
 T CryptoPP::InvertibleRSAFunction::SetMultiplicativeInverseOfPrime2ModPrime1(CryptoPP::Integer const&)
 T CryptoPP::InvertibleRSAFunction::SetPrime1(CryptoPP::Integer const&)
 T CryptoPP::InvertibleRSAFunction::SetPrime2(CryptoPP::Integer const&)
 T CryptoPP::InvertibleRSAFunction::SetPrivateExponent(CryptoPP::Integer const&)
 T CryptoPP::IteratedHash<unsigned int, CryptoPP::EnumToType<CryptoPP::ByteOrder, 1>, 64u, CryptoPP::HashTransformation>::BlockSize() const
 T CryptoPP::IteratedHash<unsigned int, CryptoPP::EnumToType<CryptoPP::ByteOrder, 1>, 64u, CryptoPP::HashTransformation>::DataBuf()
 T CryptoPP::IteratedHash<unsigned int, CryptoPP::EnumToType<CryptoPP::ByteOrder, 1>, 64u, CryptoPP::HashTransformation>::GetByteOrder() const
 T CryptoPP::IteratedHash<unsigned int, CryptoPP::EnumToType<CryptoPP::ByteOrder, 1>, 64u, CryptoPP::HashTransformation>::~IteratedHash()
 T CryptoPP::IteratedHashBase<unsigned int, CryptoPP::HashTransformation>::CreateUpdateSpace(unsigned long&)
 T CryptoPP::IteratedHashBase<unsigned int, CryptoPP::HashTransformation>::HashMultipleBlocks(unsigned int const*, unsigned long)
 T CryptoPP::IteratedHashBase<unsigned int, CryptoPP::HashTransformation>::OptimalBlockSize() const
 T CryptoPP::IteratedHashBase<unsigned int, CryptoPP::HashTransformation>::OptimalDataAlignment() const
 T CryptoPP::IteratedHashBase<unsigned int, CryptoPP::HashTransformation>::PadLastBlock(unsigned int, unsigned char)
 T CryptoPP::IteratedHashBase<unsigned int, CryptoPP::HashTransformation>::Restart()
 T CryptoPP::IteratedHashBase<unsigned int, CryptoPP::HashTransformation>::TruncatedFinal(unsigned char*, unsigned long)
 T CryptoPP::IteratedHashBase<unsigned int, CryptoPP::HashTransformation>::Update(unsigned char const*, unsigned long)
 T CryptoPP::IteratedHashWithStaticTransform<unsigned int, CryptoPP::EnumToType<CryptoPP::ByteOrder, 1>, 64u, 32u, CryptoPP::SHA256, 32u, true>::DigestSize() const
 T CryptoPP::IteratedHashWithStaticTransform<unsigned int, CryptoPP::EnumToType<CryptoPP::ByteOrder, 1>, 64u, 32u, CryptoPP::SHA256, 32u, true>::HashEndianCorrectedBlock(unsigned int const*)
 T CryptoPP::IteratedHashWithStaticTransform<unsigned int, CryptoPP::EnumToType<CryptoPP::ByteOrder, 1>, 64u, 32u, CryptoPP::SHA256, 32u, true>::Init()
 T CryptoPP::IteratedHashWithStaticTransform<unsigned int, CryptoPP::EnumToType<CryptoPP::ByteOrder, 1>, 64u, 32u, CryptoPP::SHA256, 32u, true>::IteratedHashWithStaticTransform()
 T CryptoPP::IteratedHashWithStaticTransform<unsigned int, CryptoPP::EnumToType<CryptoPP::ByteOrder, 1>, 64u, 32u, CryptoPP::SHA256, 32u, true>::StateBuf()
 T CryptoPP::IteratedHashWithStaticTransform<unsigned int, CryptoPP::EnumToType<CryptoPP::ByteOrder, 1>, 64u, 32u, CryptoPP::SHA256, 32u, true>::~IteratedHashWithStaticTransform()
 T CryptoPP::MessageQueue::AnyRetrievable() const
 T CryptoPP::MessageQueue::CopyRangeTo2(CryptoPP::BufferedTransformation&, unsigned long long&, unsigned long long, std::string const&, bool) const
 T CryptoPP::MessageQueue::GetNextMessage()
 T CryptoPP::MessageQueue::IsolatedFlush(bool, bool)
 T CryptoPP::MessageQueue::IsolatedInitialize(CryptoPP::NameValuePairs const&)
 T CryptoPP::MessageQueue::IsolatedMessageSeriesEnd(bool)
 T CryptoPP::MessageQueue::MaxRetrievable() const
 T CryptoPP::MessageQueue::MessageQueue(unsigned int)
 T CryptoPP::MessageQueue::NumberOfMessageSeries() const
 T CryptoPP::MessageQueue::NumberOfMessages() const
 T CryptoPP::MessageQueue::NumberOfMessagesInThisSeries() const
 T CryptoPP::MessageQueue::Put2(unsigned char const*, unsigned long, int, bool)
 T CryptoPP::MessageQueue::TotalBytesRetrievable() const
 T CryptoPP::MessageQueue::TransferTo2(CryptoPP::BufferedTransformation&, unsigned long long&, std::string const&, bool)
 T CryptoPP::MessageQueue::~MessageQueue()
 T CryptoPP::ModularArithmetic::Accumulate(CryptoPP::Integer&, CryptoPP::Integer const&) const
 T CryptoPP::ModularArithmetic::Add(CryptoPP::Integer const&, CryptoPP::Integer const&) const
 T CryptoPP::ModularArithmetic::CascadeExponentiate(CryptoPP::Integer const&, CryptoPP::Integer const&, CryptoPP::Integer const&, CryptoPP::Integer const&) const
 T CryptoPP::ModularArithmetic::Clone() const
 T CryptoPP::ModularArithmetic::ConvertIn(CryptoPP::Integer const&) const
 T CryptoPP::ModularArithmetic::ConvertOut(CryptoPP::Integer const&) const
 T CryptoPP::ModularArithmetic::Divide(CryptoPP::Integer const&, CryptoPP::Integer const&) const
 T CryptoPP::ModularArithmetic::Double(CryptoPP::Integer const&) const
 T CryptoPP::ModularArithmetic::Equal(CryptoPP::Integer const&, CryptoPP::Integer const&) const
 T CryptoPP::ModularArithmetic::Identity() const
 T CryptoPP::ModularArithmetic::Inverse(CryptoPP::Integer const&) const
 T CryptoPP::ModularArithmetic::IsMontgomeryRepresentation() const
 T CryptoPP::ModularArithmetic::IsUnit(CryptoPP::Integer const&) const
 T CryptoPP::ModularArithmetic::MultiplicativeIdentity() const
 T CryptoPP::ModularArithmetic::MultiplicativeInverse(CryptoPP::Integer const&) const
 T CryptoPP::ModularArithmetic::Multiply(CryptoPP::Integer const&, CryptoPP::Integer const&) const
 T CryptoPP::ModularArithmetic::Reduce(CryptoPP::Integer&, CryptoPP::Integer const&) const
 T CryptoPP::ModularArithmetic::SimultaneousExponentiate(CryptoPP::Integer*, CryptoPP::Integer const&, CryptoPP::Integer const*, unsigned int) const
 T CryptoPP::ModularArithmetic::Square(CryptoPP::Integer const&) const
 T CryptoPP::ModularArithmetic::Subtract(CryptoPP::Integer const&, CryptoPP::Integer const&) const
 T CryptoPP::ModularArithmetic::~ModularArithmetic()
 T CryptoPP::MontgomeryReduce(unsigned int*, unsigned int*, unsigned int*, unsigned int const*, unsigned int const*, unsigned long)
 T CryptoPP::MontgomeryRepresentation::CascadeExponentiate(CryptoPP::Integer const&, CryptoPP::Integer const&, CryptoPP::Integer const&, CryptoPP::Integer const&) const
 T CryptoPP::MontgomeryRepresentation::Clone() const
 T CryptoPP::MontgomeryRepresentation::ConvertIn(CryptoPP::Integer const&) const
 T CryptoPP::MontgomeryRepresentation::ConvertOut(CryptoPP::Integer const&) const
 T CryptoPP::MontgomeryRepresentation::IsMontgomeryRepresentation() const
 T CryptoPP::MontgomeryRepresentation::MontgomeryRepresentation(CryptoPP::Integer const&)
 T CryptoPP::MontgomeryRepresentation::MultiplicativeIdentity() const
 T CryptoPP::MontgomeryRepresentation::MultiplicativeInverse(CryptoPP::Integer const&) const
 T CryptoPP::MontgomeryRepresentation::Multiply(CryptoPP::Integer const&, CryptoPP::Integer const&) const
 T CryptoPP::MontgomeryRepresentation::SimultaneousExponentiate(CryptoPP::Integer*, CryptoPP::Integer const&, CryptoPP::Integer const*, unsigned int) const
 T CryptoPP::MontgomeryRepresentation::Square(CryptoPP::Integer const&) const
 T CryptoPP::MontgomeryRepresentation::~MontgomeryRepresentation()
 T CryptoPP::Multiply(CryptoPP::Integer&, CryptoPP::Integer const&, CryptoPP::Integer const&)
 T CryptoPP::MultiplyByPower2Mod(unsigned int*, unsigned int const*, unsigned long, unsigned int const*, unsigned long)
 T CryptoPP::MultiplyTop(unsigned int*, unsigned int*, unsigned int const*, unsigned int const*, unsigned int const*, unsigned long)
 T CryptoPP::NameValuePairs::ThrowIfTypeMismatch(char const*, std::type_info const&, std::type_info const&)
 T CryptoPP::NameValuePairs::ValueTypeMismatch::ValueTypeMismatch(std::string const&, std::type_info const&, std::type_info const&)
 T CryptoPP::NameValuePairs::ValueTypeMismatch::~ValueTypeMismatch()
 T CryptoPP::NameValuePairs::~NameValuePairs()
 T CryptoPP::NonblockingRng::GenerateBlock(unsigned char*, unsigned long)
 T CryptoPP::NonblockingRng::NonblockingRng()
 T CryptoPP::NonblockingRng::~NonblockingRng()
 T CryptoPP::NotImplemented::~NotImplemented()
 T CryptoPP::NullNameValuePairs::GetVoidValue(char const*, std::type_info const&, void*) const
 T CryptoPP::NullNameValuePairs::~NullNameValuePairs()
 T CryptoPP::NullRNG()
 T CryptoPP::OID::BERDecode(CryptoPP::BufferedTransformation&)
 T CryptoPP::OID::BERDecodeAndCheck(CryptoPP::BufferedTransformation&) const
 T CryptoPP::OID::DEREncode(CryptoPP::BufferedTransformation&) const
 T CryptoPP::OID::DecodeValue(CryptoPP::BufferedTransformation&, unsigned int&)
 T CryptoPP::OID::EncodeValue(CryptoPP::BufferedTransformation&, unsigned int)
 T CryptoPP::OS_GenerateRandomBlock(bool, unsigned char*, unsigned long)
 T CryptoPP::OS_RNG_Err::OS_RNG_Err(std::string const&)
 T CryptoPP::OS_RNG_Err::~OS_RNG_Err()
 T CryptoPP::PKCS1v15_SignatureMessageEncodingMethod::ComputeMessageRepresentative(CryptoPP::RandomNumberGenerator&, unsigned char const*, unsigned long, CryptoPP::HashTransformation&, std::pair<unsigned char const*, unsigned long>, bool, unsigned char*, unsigned long) const
 T CryptoPP::PKCS1v15_SignatureMessageEncodingMethod::MinRepresentativeBitLength(unsigned long, unsigned long) const
 T CryptoPP::PKCS1v15_SignatureMessageEncodingMethod::~PKCS1v15_SignatureMessageEncodingMethod()
 T CryptoPP::PK_DeterministicSignatureMessageEncodingMethod::VerifyMessageRepresentative(CryptoPP::HashTransformation&, std::pair<unsigned char const*, unsigned long>, bool, unsigned char*, unsigned long) const
 T CryptoPP::PK_DeterministicSignatureMessageEncodingMethod::~PK_DeterministicSignatureMessageEncodingMethod()
 T CryptoPP::PK_FinalTemplate<CryptoPP::TF_VerifierImpl<CryptoPP::TF_SignatureSchemeOptions<CryptoPP::TF_SS<CryptoPP::PKCS1v15, CryptoPP::SHA256, CryptoPP::RSA, int>, CryptoPP::RSA, CryptoPP::PKCS1v15_SignatureMessageEncodingMethod, CryptoPP::SHA256> > >::~PK_FinalTemplate()
 T CryptoPP::PK_MessageAccumulator::DigestSize() const
 T CryptoPP::PK_MessageAccumulator::TruncatedFinal(unsigned char*, unsigned long)
 T CryptoPP::PK_MessageAccumulatorBase::PK_MessageAccumulatorBase()
 T CryptoPP::PK_MessageAccumulatorBase::Update(unsigned char const*, unsigned long)
 T CryptoPP::PK_MessageAccumulatorBase::~PK_MessageAccumulatorBase()
 T CryptoPP::PK_MessageAccumulatorImpl<CryptoPP::SHA256>::AccessHash()
 T CryptoPP::PK_MessageAccumulatorImpl<CryptoPP::SHA256>::~PK_MessageAccumulatorImpl()
 T CryptoPP::PK_SignatureMessageEncodingMethod::AllowNonrecoverablePart() const
 T CryptoPP::PK_SignatureMessageEncodingMethod::MaxRecoverableLength(unsigned long, unsigned long, unsigned long) const
 T CryptoPP::PK_SignatureMessageEncodingMethod::MinRepresentativeBitLength(unsigned long, unsigned long) const
 T CryptoPP::PK_SignatureMessageEncodingMethod::ProcessRecoverableMessage(CryptoPP::HashTransformation&, unsigned char const*, unsigned long, unsigned char const*, unsigned long, CryptoPP::SecBlock<unsigned char, CryptoPP::AllocatorWithCleanup<unsigned char, false> >&) const
 T CryptoPP::PK_SignatureMessageEncodingMethod::ProcessSemisignature(CryptoPP::HashTransformation&, unsigned char const*, unsigned long) const
 T CryptoPP::PK_SignatureMessageEncodingMethod::RecoverMessageFromRepresentative(CryptoPP::HashTransformation&, std::pair<unsigned char const*, unsigned long>, bool, unsigned char*, unsigned long, unsigned char*) const
 T CryptoPP::PK_SignatureMessageEncodingMethod::RecoverMessageFromSemisignature(CryptoPP::HashTransformation&, std::pair<unsigned char const*, unsigned long>, unsigned char const*, unsigned long, unsigned char const*, unsigned long, unsigned char*) const
 T CryptoPP::PK_SignatureMessageEncodingMethod::RecoverablePartFirst() const
 T CryptoPP::PK_SignatureScheme::InvalidKeyLength::~InvalidKeyLength()
 T CryptoPP::PK_SignatureScheme::KeyTooShort::~KeyTooShort()
 T CryptoPP::PK_SignatureScheme::MaxSignatureLength(unsigned long) const
 T CryptoPP::PK_SignatureScheme::SignatureUpfront() const
 T CryptoPP::PK_SignatureScheme::~PK_SignatureScheme()
 T CryptoPP::PK_Verifier::Recover(unsigned char*, CryptoPP::PK_MessageAccumulator*) const
 T CryptoPP::PK_Verifier::RecoverMessage(unsigned char*, unsigned char const*, unsigned long, unsigned char const*, unsigned long) const
 T CryptoPP::PK_Verifier::Verify(CryptoPP::PK_MessageAccumulator*) const
 T CryptoPP::PK_Verifier::VerifyMessage(unsigned char const*, unsigned long, unsigned char const*, unsigned long) const
 T CryptoPP::PositiveAdd(CryptoPP::Integer&, CryptoPP::Integer const&, CryptoPP::Integer const&)
 T CryptoPP::PositiveDivide(CryptoPP::Integer&, CryptoPP::Integer&, CryptoPP::Integer const&, CryptoPP::Integer const&)
 T CryptoPP::PositiveMultiply(CryptoPP::Integer&, CryptoPP::Integer const&, CryptoPP::Integer const&)
 T CryptoPP::PositiveSubtract(CryptoPP::Integer&, CryptoPP::Integer const&, CryptoPP::Integer const&)
 T CryptoPP::PowerUpSelfTestInProgressOnThisThread()
 T CryptoPP::PublicKey::~PublicKey()
 T CryptoPP::PublicKeyAlgorithm::AccessMaterial()
 T CryptoPP::PublicKeyAlgorithm::GetMaterial() const
 T CryptoPP::RSAFunction::ApplyFunction(CryptoPP::Integer const&) const
 T CryptoPP::RSAFunction::AssignFrom(CryptoPP::NameValuePairs const&)
 T CryptoPP::RSAFunction::BERDecodePublicKey(CryptoPP::BufferedTransformation&, bool, unsigned long)
 T CryptoPP::RSAFunction::DEREncodePublicKey(CryptoPP::BufferedTransformation&) const
 T CryptoPP::RSAFunction::GetAlgorithmID() const
 T CryptoPP::RSAFunction::GetModulus() const
 T CryptoPP::RSAFunction::GetPublicExponent() const
 T CryptoPP::RSAFunction::GetVoidValue(char const*, std::type_info const&, void*) const
 T CryptoPP::RSAFunction::ImageBound() const
 T CryptoPP::RSAFunction::PreimageBound() const
 T CryptoPP::RSAFunction::SetModulus(CryptoPP::Integer const&)
 T CryptoPP::RSAFunction::SetPublicExponent(CryptoPP::Integer const&)
 T CryptoPP::RSAFunction::Validate(CryptoPP::RandomNumberGenerator&, unsigned int) const
 T CryptoPP::RSAFunction::~RSAFunction()
 T CryptoPP::RandomNumberGenerator::CanIncorporateEntropy() const
 T CryptoPP::RandomNumberGenerator::DiscardBytes(unsigned long)
 T CryptoPP::RandomNumberGenerator::GenerateBit()
 T CryptoPP::RandomNumberGenerator::GenerateBlock(unsigned char*, unsigned long)
 T CryptoPP::RandomNumberGenerator::GenerateByte()
 T CryptoPP::RandomNumberGenerator::GenerateIntoBufferedTransformation(CryptoPP::BufferedTransformation&, std::string const&, unsigned long long)
 T CryptoPP::RandomNumberGenerator::GenerateWord32(unsigned int, unsigned int)
 T CryptoPP::RandomNumberGenerator::IncorporateEntropy(unsigned char const*, unsigned long)
 T CryptoPP::RandomizedTrapdoorFunction::IsRandomized() const
 T CryptoPP::RandomizedTrapdoorFunction::~RandomizedTrapdoorFunction()
 T CryptoPP::RecursiveInverseModPower2(unsigned int*, unsigned int*, unsigned int const*, unsigned long)
 T CryptoPP::RecursiveMultiply(unsigned int*, unsigned int*, unsigned int const*, unsigned int const*, unsigned long)
 T CryptoPP::RecursiveMultiplyBottom(unsigned int*, unsigned int*, unsigned int const*, unsigned int const*, unsigned long)
 T CryptoPP::RecursiveSquare(unsigned int*, unsigned int*, unsigned int const*, unsigned long)
 T CryptoPP::Rijndael::Base::FillDecTable()
 T CryptoPP::Rijndael::Base::FillEncTable()
 T CryptoPP::Rijndael::Base::UncheckedSetKey(unsigned char const*, unsigned int, CryptoPP::NameValuePairs const&)
 T CryptoPP::Rijndael::Base::~Base()
 T CryptoPP::Rijndael::Enc::AdvancedProcessBlocks(unsigned char const*, unsigned char const*, unsigned char*, unsigned long, unsigned int) const
 T CryptoPP::Rijndael::Enc::ProcessAndXorBlock(unsigned char const*, unsigned char const*, unsigned char*) const
 T CryptoPP::SHA256::InitState(unsigned int*)
 T CryptoPP::SHA256::Transform(unsigned int*, unsigned int const*)
 T CryptoPP::SHA256::~SHA256()
 T CryptoPP::SelfTestFailure::~SelfTestFailure()
 T CryptoPP::SignatureVerificationFilter::SignatureVerificationFailed::~SignatureVerificationFailed()
 T CryptoPP::SimpleKeyingInterface::GetNextIV(CryptoPP::RandomNumberGenerator&, unsigned char*)
 T CryptoPP::SimpleKeyingInterface::IVSize() const
 T CryptoPP::SimpleKeyingInterface::IsValidKeyLength(unsigned long) const
 T CryptoPP::SimpleKeyingInterface::MaxIVLength() const
 T CryptoPP::SimpleKeyingInterface::MinIVLength() const
 T CryptoPP::SimpleKeyingInterface::Resynchronize(unsigned char const*, int)
 T CryptoPP::SimpleKeyingInterface::SetKey(unsigned char const*, unsigned long, CryptoPP::NameValuePairs const&)
 T CryptoPP::SimpleKeyingInterface::ThrowIfInvalidKeyLength(unsigned long)
 T CryptoPP::SimpleKeyingInterface::~SimpleKeyingInterface()
 T CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher, CryptoPP::Rijndael_Info>, CryptoPP::TwoBases<CryptoPP::BlockCipher, CryptoPP::Rijndael_Info> >::DefaultKeyLength() const
 T CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher, CryptoPP::Rijndael_Info>, CryptoPP::TwoBases<CryptoPP::BlockCipher, CryptoPP::Rijndael_Info> >::GetValidKeyLength(unsigned long) const
 T CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher, CryptoPP::Rijndael_Info>, CryptoPP::TwoBases<CryptoPP::BlockCipher, CryptoPP::Rijndael_Info> >::IVRequirement() const
 T CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher, CryptoPP::Rijndael_Info>, CryptoPP::TwoBases<CryptoPP::BlockCipher, CryptoPP::Rijndael_Info> >::IVSize() const
 T CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher, CryptoPP::Rijndael_Info>, CryptoPP::TwoBases<CryptoPP::BlockCipher, CryptoPP::Rijndael_Info> >::MaxKeyLength() const
 T CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher, CryptoPP::Rijndael_Info>, CryptoPP::TwoBases<CryptoPP::BlockCipher, CryptoPP::Rijndael_Info> >::MinKeyLength() const
 T CryptoPP::Singleton<CryptoPP::Integer, CryptoPP::NewInteger<1l>, 0>::Ref() const
 T CryptoPP::Singleton<CryptoPP::Integer, CryptoPP::NewObject<CryptoPP::Integer>, 0>::Ref() const
 T CryptoPP::Singleton<CryptoPP::PKCS1v15_SignatureMessageEncodingMethod, CryptoPP::NewObject<CryptoPP::PKCS1v15_SignatureMessageEncodingMethod>, 0>::Ref() const
 T CryptoPP::Sink::CopyRangeTo2(CryptoPP::BufferedTransformation&, unsigned long long&, unsigned long long, std::string const&, bool) const
 T CryptoPP::Sink::TransferTo2(CryptoPP::BufferedTransformation&, unsigned long long&, std::string const&, bool)
 T CryptoPP::Sink::~Sink()
 T CryptoPP::Source::PumpAll2(bool)
 T CryptoPP::Source::~Source()
 T CryptoPP::SourceTemplate<CryptoPP::StringStore>::GetAutoSignalPropagation() const
 T CryptoPP::SourceTemplate<CryptoPP::StringStore>::IsolatedInitialize(CryptoPP::NameValuePairs const&)
 T CryptoPP::SourceTemplate<CryptoPP::StringStore>::Pump2(unsigned long long&, bool)
 T CryptoPP::SourceTemplate<CryptoPP::StringStore>::PumpAll2(bool)
 T CryptoPP::SourceTemplate<CryptoPP::StringStore>::PumpMessages2(unsigned int&, bool)
 T CryptoPP::SourceTemplate<CryptoPP::StringStore>::SetAutoSignalPropagation(int)
 T CryptoPP::SourceTemplate<CryptoPP::StringStore>::SourceExhausted() const
 T CryptoPP::SourceTemplate<CryptoPP::StringStore>::SourceTemplate(CryptoPP::BufferedTransformation*)
 T CryptoPP::SourceTemplate<CryptoPP::StringStore>::~SourceTemplate()
 T CryptoPP::Store::GetNextMessage()
 T CryptoPP::Store::IsolatedInitialize(CryptoPP::NameValuePairs const&)
 T CryptoPP::Store::NumberOfMessages() const
 T CryptoPP::StringSource::StringSource(unsigned char const*, unsigned long, bool, CryptoPP::BufferedTransformation*)
 T CryptoPP::StringSource::~StringSource()
 T CryptoPP::StringStore::CopyRangeTo2(CryptoPP::BufferedTransformation&, unsigned long long&, unsigned long long, std::string const&, bool) const
 T CryptoPP::StringStore::StoreInitialize(CryptoPP::NameValuePairs const&)
 T CryptoPP::StringStore::StringStore(char const*)
 T CryptoPP::StringStore::TransferTo2(CryptoPP::BufferedTransformation&, unsigned long long&, std::string const&, bool)
 T CryptoPP::StringStore::~StringStore()
 T CryptoPP::TF_ObjectImpl<CryptoPP::TF_VerifierBase, CryptoPP::TF_SignatureSchemeOptions<CryptoPP::TF_SS<CryptoPP::PKCS1v15, CryptoPP::SHA256, CryptoPP::RSA, int>, CryptoPP::RSA, CryptoPP::PKCS1v15_SignatureMessageEncodingMethod, CryptoPP::SHA256>, CryptoPP::RSAFunction>::AccessKey()
 T CryptoPP::TF_ObjectImpl<CryptoPP::TF_VerifierBase, CryptoPP::TF_SignatureSchemeOptions<CryptoPP::TF_SS<CryptoPP::PKCS1v15, CryptoPP::SHA256, CryptoPP::RSA, int>, CryptoPP::RSA, CryptoPP::PKCS1v15_SignatureMessageEncodingMethod, CryptoPP::SHA256>, CryptoPP::RSAFunction>::GetKey() const
 T CryptoPP::TF_ObjectImpl<CryptoPP::TF_VerifierBase, CryptoPP::TF_SignatureSchemeOptions<CryptoPP::TF_SS<CryptoPP::PKCS1v15, CryptoPP::SHA256, CryptoPP::RSA, int>, CryptoPP::RSA, CryptoPP::PKCS1v15_SignatureMessageEncodingMethod, CryptoPP::SHA256>, CryptoPP::RSAFunction>::~TF_ObjectImpl()
 T CryptoPP::TF_ObjectImplBase<CryptoPP::TF_VerifierBase, CryptoPP::TF_SignatureSchemeOptions<CryptoPP::TF_SS<CryptoPP::PKCS1v15, CryptoPP::SHA256, CryptoPP::RSA, int>, CryptoPP::RSA, CryptoPP::PKCS1v15_SignatureMessageEncodingMethod, CryptoPP::SHA256>, CryptoPP::RSAFunction>::AccessPublicKey()
 T CryptoPP::TF_ObjectImplBase<CryptoPP::TF_VerifierBase, CryptoPP::TF_SignatureSchemeOptions<CryptoPP::TF_SS<CryptoPP::PKCS1v15, CryptoPP::SHA256, CryptoPP::RSA, int>, CryptoPP::RSA, CryptoPP::PKCS1v15_SignatureMessageEncodingMethod, CryptoPP::SHA256>, CryptoPP::RSAFunction>::GetDigestSize() const
 T CryptoPP::TF_ObjectImplBase<CryptoPP::TF_VerifierBase, CryptoPP::TF_SignatureSchemeOptions<CryptoPP::TF_SS<CryptoPP::PKCS1v15, CryptoPP::SHA256, CryptoPP::RSA, int>, CryptoPP::RSA, CryptoPP::PKCS1v15_SignatureMessageEncodingMethod, CryptoPP::SHA256>, CryptoPP::RSAFunction>::GetHashIdentifier() const
 T CryptoPP::TF_ObjectImplBase<CryptoPP::TF_VerifierBase, CryptoPP::TF_SignatureSchemeOptions<CryptoPP::TF_SS<CryptoPP::PKCS1v15, CryptoPP::SHA256, CryptoPP::RSA, int>, CryptoPP::RSA, CryptoPP::PKCS1v15_SignatureMessageEncodingMethod, CryptoPP::SHA256>, CryptoPP::RSAFunction>::GetMessageEncodingInterface() const
 T CryptoPP::TF_ObjectImplBase<CryptoPP::TF_VerifierBase, CryptoPP::TF_SignatureSchemeOptions<CryptoPP::TF_SS<CryptoPP::PKCS1v15, CryptoPP::SHA256, CryptoPP::RSA, int>, CryptoPP::RSA, CryptoPP::PKCS1v15_SignatureMessageEncodingMethod, CryptoPP::SHA256>, CryptoPP::RSAFunction>::GetPublicKey() const
 T CryptoPP::TF_ObjectImplBase<CryptoPP::TF_VerifierBase, CryptoPP::TF_SignatureSchemeOptions<CryptoPP::TF_SS<CryptoPP::PKCS1v15, CryptoPP::SHA256, CryptoPP::RSA, int>, CryptoPP::RSA, CryptoPP::PKCS1v15_SignatureMessageEncodingMethod, CryptoPP::SHA256>, CryptoPP::RSAFunction>::GetTrapdoorFunctionBounds() const
 T CryptoPP::TF_ObjectImplBase<CryptoPP::TF_VerifierBase, CryptoPP::TF_SignatureSchemeOptions<CryptoPP::TF_SS<CryptoPP::PKCS1v15, CryptoPP::SHA256, CryptoPP::RSA, int>, CryptoPP::RSA, CryptoPP::PKCS1v15_SignatureMessageEncodingMethod, CryptoPP::SHA256>, CryptoPP::RSAFunction>::GetTrapdoorFunctionInterface() const
 T CryptoPP::TF_ObjectImplBase<CryptoPP::TF_VerifierBase, CryptoPP::TF_SignatureSchemeOptions<CryptoPP::TF_SS<CryptoPP::PKCS1v15, CryptoPP::SHA256, CryptoPP::RSA, int>, CryptoPP::RSA, CryptoPP::PKCS1v15_SignatureMessageEncodingMethod, CryptoPP::SHA256>, CryptoPP::RSAFunction>::NewVerificationAccumulator() const
 T CryptoPP::TF_SS<CryptoPP::PKCS1v15, CryptoPP::SHA256, CryptoPP::RSA, int>::StaticAlgorithmName()
 T CryptoPP::TF_SignatureSchemeBase<CryptoPP::PK_Verifier, CryptoPP::TF_Base<CryptoPP::TrapdoorFunction, CryptoPP::PK_SignatureMessageEncodingMethod> >::AllowNonrecoverablePart() const
 T CryptoPP::TF_SignatureSchemeBase<CryptoPP::PK_Verifier, CryptoPP::TF_Base<CryptoPP::TrapdoorFunction, CryptoPP::PK_SignatureMessageEncodingMethod> >::IsProbabilistic() const
 T CryptoPP::TF_SignatureSchemeBase<CryptoPP::PK_Verifier, CryptoPP::TF_Base<CryptoPP::TrapdoorFunction, CryptoPP::PK_SignatureMessageEncodingMethod> >::MaxRecoverableLength() const
 T CryptoPP::TF_SignatureSchemeBase<CryptoPP::PK_Verifier, CryptoPP::TF_Base<CryptoPP::TrapdoorFunction, CryptoPP::PK_SignatureMessageEncodingMethod> >::MaxRecoverableLengthFromSignatureLength(unsigned long) const
 T CryptoPP::TF_SignatureSchemeBase<CryptoPP::PK_Verifier, CryptoPP::TF_Base<CryptoPP::TrapdoorFunction, CryptoPP::PK_SignatureMessageEncodingMethod> >::MessageRepresentativeBitLength() const
 T CryptoPP::TF_SignatureSchemeBase<CryptoPP::PK_Verifier, CryptoPP::TF_Base<CryptoPP::TrapdoorFunction, CryptoPP::PK_SignatureMessageEncodingMethod> >::RecoverablePartFirst() const
 T CryptoPP::TF_SignatureSchemeBase<CryptoPP::PK_Verifier, CryptoPP::TF_Base<CryptoPP::TrapdoorFunction, CryptoPP::PK_SignatureMessageEncodingMethod> >::SignatureLength() const
 T CryptoPP::TF_VerifierBase::InputSignature(CryptoPP::PK_MessageAccumulator&, unsigned char const*, unsigned long) const
 T CryptoPP::TF_VerifierBase::RecoverAndRestart(unsigned char*, CryptoPP::PK_MessageAccumulator&) const
 T CryptoPP::TF_VerifierBase::VerifyAndRestart(CryptoPP::PK_MessageAccumulator&) const
 T CryptoPP::TheBitBucket()
 T CryptoPP::TrapdoorFunction::ApplyRandomizedFunction(CryptoPP::RandomNumberGenerator&, CryptoPP::Integer const&) const
 T CryptoPP::TrapdoorFunction::IsRandomized() const
 T CryptoPP::TrapdoorFunction::~TrapdoorFunction()
 T CryptoPP::TrapdoorFunctionBounds::MaxImage() const
 T CryptoPP::TrapdoorFunctionBounds::MaxPreimage() const
 T CryptoPP::UnalignedAllocate(unsigned long)
 T CryptoPP::UnalignedDeallocate(void*)
 T CryptoPP::UnknownOID::~UnknownOID()
 T CryptoPP::VerifyBufsEqual(unsigned char const*, unsigned char const*, unsigned long)
 T CryptoPP::WindowSlider::FindNextWindow()
 T CryptoPP::WindowSlider::~WindowSlider()
 T CryptoPP::X509PublicKey::BERDecode(CryptoPP::BufferedTransformation&)
 T CryptoPP::X509PublicKey::BERDecodeAlgorithmParameters(CryptoPP::BufferedTransformation&)
 T CryptoPP::X509PublicKey::DEREncode(CryptoPP::BufferedTransformation&) const
 T CryptoPP::X509PublicKey::DEREncodeAlgorithmParameters(CryptoPP::BufferedTransformation&) const
 T CryptoPP::X509PublicKey::~X509PublicKey()
 T CryptoPP::X917RNG::GenerateIntoBufferedTransformation(CryptoPP::BufferedTransformation&, std::string const&, unsigned long long)
 T CryptoPP::X917RNG::X917RNG(CryptoPP::BlockTransformation*, unsigned char const*, unsigned char const*)
 T CryptoPP::X917RNG::~X917RNG()
 T CryptoPP::a_exp_b_mod_c(CryptoPP::Integer const&, CryptoPP::Integer const&, CryptoPP::Integer const&)
 T CryptoPP::member_ptr<CryptoPP::AlgorithmParametersBase>::reset(CryptoPP::AlgorithmParametersBase*)
 T CryptoPP::member_ptr<CryptoPP::AlgorithmParametersBase>::~member_ptr()
 T CryptoPP::member_ptr<CryptoPP::BlockTransformation>::~member_ptr()
 T CryptoPP::member_ptr<CryptoPP::BufferedTransformation>::reset(CryptoPP::BufferedTransformation*)
 T CryptoPP::member_ptr<CryptoPP::BufferedTransformation>::~member_ptr()
 T CryptoPP::member_ptr<CryptoPP::RandomNumberGenerator>::reset(CryptoPP::RandomNumberGenerator*)
 T CryptoPP::member_ptr<CryptoPP::RandomNumberGenerator>::~member_ptr()
 T CryptoPP::memcpy_s(void*, unsigned long, void const*, unsigned long)
 T CryptoPP::operator+(CryptoPP::OID const&, unsigned long)
 T CryptoPP::simple_ptr<CryptoPP::PKCS1v15_SignatureMessageEncodingMethod>::~simple_ptr()
 T CryptoPP::xorbuf(unsigned char*, unsigned char const*, unsigned char const*, unsigned long)
 T CryptoPP::xorbuf(unsigned char*, unsigned char const*, unsigned long)
 T Cubic_Spline_NormalizeX(Vector const&, Vector const&, Vector const&, Vector const&, float, Vector&)
 T DMXAlloc(unsigned long)
 T DebugConnectMsg(int, int, char const*, ...)
 T DebugConstraint(CBaseEntity*)
 T DebugDrawContactPoints(IPhysicsObject*)
 T DebugDrawLine(Vector const&, Vector const&, int, int, int, bool, float)
 T DebugParticles(CCommand const&)
 T DecodeAttributeStringIntoAttributes(CAttribute_DynamicRecipeComponent const&, CUtlVector<CEconItem::attribute_t, CUtlMemory<CEconItem::attribute_t, int> >&)
 T DecommitDMXMemory()
 T DefaultCompletionFunc(char const*, char (*) [64])
 T DefinedItemAttribMatch(CAttribute_DynamicRecipeComponent const&, IEconItemInterface const*)
 T DelayedSchemaData_GCDirectData::InitializeSchema(CEconItemSchema*)
 T DelayedSchemaData_GCDirectData::~DelayedSchemaData_GCDirectData()
 T DelayedSchemaData_HTTPResponseData::DelayedSchemaData_HTTPResponseData(ISteamHTTP*, unsigned int, unsigned int, unsigned int, std::string const&)
 T DelayedSchemaData_HTTPResponseData::InitializeSchema(CEconItemSchema*)
 T DelayedSchemaData_HTTPResponseData::~DelayedSchemaData_HTTPResponseData()
 T DeleteAll(AI_Waypoint_t*)
 T DeltaV(float, float, float)
 T DestroyCustomResponseSystems()
 T DestroyVGuiScreen(CVGuiScreen*)
 T DetachAttachedRagdollsForEntity(CBaseEntity*)
 T DevMsg(CAI_BaseNPC*, char const*, ...)
 T DevMsg(CAI_BaseNPC*, unsigned int, char const*, ...)
 T DisconnectTier1Libraries()
 T DisconnectTier2Libraries()
 T DisconnectTier3Libraries()
 T DispatchEffect(char const*, CEffectData const&)
 T DispatchEffect(char const*, CEffectData const&, CRecipientFilter&)
 T DispatchParticleEffect(char const*, ParticleAttachment_t, CBaseEntity*, char const*, Vector, Vector, bool, bool)
 T DispatchParticleEffect(char const*, ParticleAttachment_t, CBaseEntity*, char const*, bool)
 T DispatchParticleEffect(char const*, ParticleAttachment_t, CBaseEntity*, int, bool)
 T DispatchParticleEffect(char const*, Vector, QAngle, CBaseEntity*)
 T DispatchParticleEffect(char const*, Vector, QAngle, Vector, Vector, bool, CBaseEntity*, int)
 T DispatchSpawn(CBaseEntity*)
 T DmxElementUnpackStructure_t* DmxElementUnpackInit<CParticleSystemDefinition>(CParticleSystemDefinition*)
 T DoSpark(CBaseEntity*, Vector const&, int, int, bool, Vector const&)
 T DoTeleporterOverride(CBaseEntity*, Vector&, bool)
 T DrawAllDebugOverlays()
 T DrawIncursionFlow::operator()(CNavArea*)
 T DrawMessageEntities()
 T DropToGround(CBaseEntity*, Vector const&, Vector const&, Vector const&)
 T DuelMiniGame_AssignWinners()
 T DuelMiniGame_GetRequiredPlayerClass(CTFPlayer*)
 T DuelMiniGame_IsInDuel(CTFPlayer*)
 T DuelMiniGame_LevelShutdown()
 T DuelMiniGame_NotifyAssist(CTFPlayer*, CTFPlayer*)
 T DuelMiniGame_NotifyKill(CTFPlayer*, CTFPlayer*)
 T DuelMiniGame_NotifyPlayerChangedTeam(CTFPlayer*, int, bool)
 T DuelMiniGame_NotifyPlayerDisconnect(CTFPlayer*, bool)
 T DumpEntityFactories_f()
 T DustTrail::DustTrail()
 T DustTrail::GetDataDescMap()
 T DustTrail::GetServerClass()
 T DustTrail::KeyValue(char const*, char const*)
 T DustTrail::YouForgotToImplementOrDeclareServerClass()
 T DustTrail::~DustTrail()
 T EGCSystemMsg_descriptor()
 T EconEntity_KillEaterEventPassesRestrictionCheck(IEconItemInterface const*, CEconItemAttributeDefinition const*, CEconItemAttributeDefinition const*, CSteamID)
 T EconEntity_NonEquippedItemKillTracking(CTFPlayer*, CTFPlayer*, int)
 T EconEntity_NonEquippedItemKillTracking(CTFPlayer*, CTFPlayer*, unsigned short, kill_eater_event_t, int)
 T EconEntity_NonEquippedItemKillTracking_NoPartnerBatched(CTFPlayer*, unsigned short, kill_eater_event_t, int)
 T EconEntity_OnOwnerKillEaterEvent(CEconEntity*, CTFPlayer*, CTFPlayer*, kill_eater_event_t, int)
 T EconEntity_OnOwnerKillEaterEventNoPartner(CEconEntity*, CTFPlayer*, kill_eater_event_t, int)
 T EconEntity_OnOwnerKillEaterEvent_Batched(CEconEntity*, CTFPlayer*, CTFPlayer*, kill_eater_event_t, int)
 T EconEntity_OnOwnerUniqueEconEvent(IEconItemInterface*, CTFPlayer*, CTFPlayer*, kill_eater_event_t)
 T EconEntity_ValidateAndSendStrangeMessageToGC(IEconItemInterface*, CTFPlayer*, CTFPlayer*, kill_eater_event_t, int)
 T EconEntity_ValidateAndSendStrangeMessageToGC_Batched(IEconItemInterface*, CTFPlayer*, CTFPlayer*, kill_eater_event_t, int)
 T EconHolidays_GetActiveHolidayString()
 T EconHolidays_GetHolidayForString(char const*)
 T EconHolidays_IsHolidayActive(int, CRTime const&)
 T EconHolidays_TerribleHack_GetHalloweenEndData()
 T EconItemInterface_OnOwnerKillEaterEvent(IEconItemInterface*, CTFPlayer*, CTFPlayer*, kill_eater_event_t, int)
 T EconItemInterface_OnOwnerKillEaterEventNoPartner(IEconItemInterface*, CTFPlayer*, kill_eater_event_t, int)
 T EconItemInterface_OnOwnerKillEaterEvent_Batched(IEconItemInterface*, CTFPlayer*, CTFPlayer*, kill_eater_event_t, int)
 T EconQuality_GetQualityFromString(char const*)
 T Editor_CheckVersion(char const*, int, bool)
 T Editor_CreateNode(char const*, int, float, float, float, bool)
 T Editor_CreateNodeLink(int, int, bool)
 T Editor_DeleteNode(int, bool)
 T Editor_DeleteNodeLink(int, int, bool)
 T Editor_RotateEntity(char const*, float, float, float, QAngle const&, bool)
 T Editor_SetKeyValue(char const*, float, float, float, char const*, char const*, bool)
 T EffectsPrecache(void*)
 T EmitSound_t::EmitSound_t(CSoundParameters const&)
 T EnableNoClip(CBasePlayer*)
 T EndDMXContext(bool)
 T EndRestoreEntities()
 T EntityFactoryDictionary()
 T EntityIsInNoBallZone(CBaseEntity*)
 T EntityMatrix::InitFromEntity(CBaseEntity*, int)
 T EntityMatrix::InitFromEntityLocal(CBaseEntity*)
 T EntityMessageBegin(CBaseEntity*, bool)
 T EntityParticleTrailInfo_t::EntityParticleTrailInfo_t()
 T EntityParticleTrailInfo_t::NetworkStateChanged()
 T EntityParticleTrailInfo_t::NetworkStateChanged(void*)
 T EntityPhysics_CreateSolver(CBaseEntity*, CBaseEntity*, bool, float)
 T EntityTouch_Add(CBaseEntity*)
 T EvaluateConditional(char const*)
 T EventGroup::EventGroup(EventGroup const&)
 T EventList_AddEventEntry(char const*, int, bool, int)
 T EventList_Free()
 T EventList_GetEventType(int)
 T EventList_IndexForName(char const*)
 T EventList_Init()
 T EventList_NameForIndex(int)
 T EventList_RegisterPrivateEvent(char const*)
 T EventList_RegisterSharedEvents()
 T ExplosionCreate(Vector const&, QAngle const&, CBaseEntity*, int, int, bool, float, bool, bool, int)
 T ExplosionCreate(Vector const&, QAngle const&, CBaseEntity*, int, int, int, float, CBaseEntity*, int, CHandle<CBaseEntity> const*, Class_T)
 T ExtinguishPlayer(CEconEntity*, CTFPlayer*, CTFPlayer*, char const*)
 T ExtractAnimValue(int, mstudioanimvalue_t*, float, float&, float&)
 T ExtractBbox(CStudioHdr*, int, Vector&, Vector&)
 T ExtractKeyvalue(void*, typedescription_t*, int, char const*, char*, int)
 T EyeballBossModifyDamage(CTakeDamageInfo const&)
 T FBoxVisible(CBaseEntity*, CBaseEntity*, Vector&, float)
 T FX_FireBullets(CTFWeaponBase*, int, Vector const&, QAngle const&, int, int, int, float, float, bool)
 T FactoryList_Retrieve(factorylist_t&)
 T FactoryList_Store(factorylist_t const&)
 T FilePlayerClassInfo_t::Parse(KeyValues*, char const*)
 T FileWeaponInfo_t::FileWeaponInfo_t()
 T FileWeaponInfo_t::Parse(KeyValues*, char const*)
 T FilterDamageType::GetDataDescMap()
 T FilterDamageType::PassesDamageFilterImpl(CTakeDamageInfo const&)
 T FilterDamageType::PassesFilterImpl(CBaseEntity*, CBaseEntity*)
 T FilterDamageType::~FilterDamageType()
 T FilterDamagedByWeaponInSlot::GetDataDescMap()
 T FilterDamagedByWeaponInSlot::PassesDamageFilterImpl(CTakeDamageInfo const&)
 T FilterDamagedByWeaponInSlot::PassesFilterImpl(CBaseEntity*, CBaseEntity*)
 T FilterDamagedByWeaponInSlot::~FilterDamagedByWeaponInSlot()
 T FilterTeam::GetDataDescMap()
 T FilterTeam::PassesFilterImpl(CBaseEntity*, CBaseEntity*)
 T FilterTeam::~FilterTeam()
 T FindAndSwapPlayersToBalanceTeams(CUtlVector<CTFPlayer*, CUtlMemory<CTFPlayer*, int> >&, int&, CTFPlayerResource*)
 T FindBodygroupByName(CStudioHdr*, char const*)
 T FindEntityForward(CBasePlayer*, bool)
 T FindGrenadeAim(CTFBot*, CBaseEntity*, float*, float*)
 T FindGroundZFromPoint(Vector const&, Vector const&)
 T FindHitboxSetByName(CStudioHdr*, char const*)
 T FindHullIntersection(Vector const&, CGameTrace&, Vector const&, Vector const&, CBaseEntity*)
 T FindInList(char const**, char const*)
 T FindMaxContact(IPhysicsObject*, float, IPhysicsObject**, Vector*, Vector*)
 T FindPhysicsAnchor(string_t, hl_constraint_info_t&, int, CBaseEntity*)
 T FindPhysicsObjectByName(char const*, CBaseEntity*)
 T FindPickerAILink(CBasePlayer*)
 T FindPickerAINode(CBasePlayer*, NodeType_e)
 T FindPickerEntity(CBasePlayer*)
 T FindPooledString(char const*)
 T FindSafeSentryApproachAreaScan::PostSearch()
 T FindSafeSentryApproachAreaScan::ShouldSearch(CNavArea*, CNavArea*, float)
 T FindSafeSentryApproachAreaScan::operator()(CNavArea*, CNavArea*, float)
 T FindSafeSentryApproachAreaScan::~FindSafeSentryApproachAreaScan()
 T FindScoreDifferenceBetweenTeams(CUtlVector<CTFPlayer*, CUtlMemory<CTFPlayer*, int> >&, CTFPlayerResource*, int&, int&)
 T FindStickybombAim(CTFBot*, CBaseEntity*, float*, float*, float*)
 T FindTransitionSequence(CStudioHdr*, int, int, int*)
 T FinishClientPutInServer(CTFPlayer*)
 T FireSystem_AddHeatInRadius(Vector const&, float, float)
 T FireTargets(char const*, CBaseEntity*, CBaseEntity*, USE_TYPE, float)
 T FixPlayerCrouchStuck(CBasePlayer*)
 T FixupAngles(QAngle&)
 T FogSystem()
 T FreeContainingEntity(edict_t*)
 T GCClientSystem()
 T GCSDK::CGCClient::AddSOCacheListener(CSteamID const&, GCSDK::ISharedObjectListener*)
 T GCSDK::CGCClient::BInit(ISteamGameCoordinator*)
 T GCSDK::CGCClient::BMainLoop(unsigned long long, unsigned long long)
 T GCSDK::CGCClient::BSendMessage(GCSDK::CMsgBase_t<GCSDK::GCMsgHdrEx_t> const&)
 T GCSDK::CGCClient::BSendMessage(GCSDK::CProtoBufMsgBase const&)
 T GCSDK::CGCClient::CGCClient(ISteamGameCoordinator*, bool)
 T GCSDK::CGCClient::Dump()
 T GCSDK::CGCClient::FindSOCache(CSteamID const&, bool)
 T GCSDK::CGCClient::NotifySOCacheUnsubscribed(CSteamID const&)
 T GCSDK::CGCClient::OnGCMessageAvailable(GCMessageAvailable_t*)
 T GCSDK::CGCClient::RemoveSOCacheListener(CSteamID const&, GCSDK::ISharedObjectListener*)
 T GCSDK::CGCClient::Test_AddEvent(CTestEvent*)
 T GCSDK::CGCClient::Test_CacheSubscribed(CSteamID const&)
 T GCSDK::CGCClient::Uninit()
 T GCSDK::CGCClient::~CGCClient()
 T GCSDK::CGCClientJob::BYieldingRunGCJob()
 T GCSDK::CGCClientJob::BYieldingRunGCJob(GCSDK::IMsgNetPacket*)
 T GCSDK::CGCClientJob::BYieldingRunJob(void*)
 T GCSDK::CGCClientJob::BYieldingRunJobFromMsg(GCSDK::IMsgNetPacket*)
 T GCSDK::CGCClientJob::CHeartbeatsBeforeTimeout()
 T GCSDK::CGCClientJob::GetServerType()
 T GCSDK::CGCClientSharedObjectCache::AddListener(GCSDK::ISharedObjectListener*)
 T GCSDK::CGCClientSharedObjectCache::AllocateTypeCache(int) const
 T GCSDK::CGCClientSharedObjectCache::BCreateFromMsg(int, void const*, unsigned int)
 T GCSDK::CGCClientSharedObjectCache::BDestroyFromMsg(int, void const*, unsigned int)
 T GCSDK::CGCClientSharedObjectCache::BParseCacheSubscribedMsg(CMsgSOCacheSubscribed const&)
 T GCSDK::CGCClientSharedObjectCache::BUpdateFromMsg(int, void const*, unsigned int)
 T GCSDK::CGCClientSharedObjectCache::CGCClientSharedObjectCache(CSteamID const&)
 T GCSDK::CGCClientSharedObjectCache::GetOwner() const
 T GCSDK::CGCClientSharedObjectCache::NotifyResubscribedUpToDate()
 T GCSDK::CGCClientSharedObjectCache::NotifyUnsubscribe()
 T GCSDK::CGCClientSharedObjectCache::RemoveListener(GCSDK::ISharedObjectListener*)
 T GCSDK::CGCClientSharedObjectCache::~CGCClientSharedObjectCache()
 T GCSDK::CGCClientSharedObjectContext::BAddListener(GCSDK::ISharedObjectListener*)
 T GCSDK::CGCClientSharedObjectContext::PostSOUpdate(GCSDK::ESOCacheEvent) const
 T GCSDK::CGCClientSharedObjectContext::PreSOUpdate(GCSDK::ESOCacheEvent) const
 T GCSDK::CGCClientSharedObjectTypeCache::BCreateFromMsg(void const*, unsigned int, bool*)
 T GCSDK::CGCClientSharedObjectTypeCache::BDestroyFromMsg(void const*, unsigned int)
 T GCSDK::CGCClientSharedObjectTypeCache::BParseCacheSubscribedMsg(CMsgSOCacheSubscribed_SubscribedType const&, CUtlVector<GCSDK::CSharedObject*, CUtlMemory<GCSDK::CSharedObject*, int> >&, CUtlVector<GCSDK::CSharedObject*, CUtlMemory<GCSDK::CSharedObject*, int> >&, CUtlVector<GCSDK::CSharedObject*, CUtlMemory<GCSDK::CSharedObject*, int> >&)
 T GCSDK::CGCClientSharedObjectTypeCache::BUpdateFromMsg(void const*, unsigned int)
 T GCSDK::CGCClientSharedObjectTypeCache::~CGCClientSharedObjectTypeCache()
 T GCSDK::CGCEmitGroup::Internal_Msg(char const*, ...) const
 T GCSDK::CGCEmitGroup::Internal_Warning(char const*, ...) const
 T GCSDK::CGCMsg<MsgGCVerifyCacheSubscription_t>::~CGCMsg()
 T GCSDK::CGCMsg<MsgGC_Duel_Results_t>::~CGCMsg()
 T GCSDK::CGCSOCacheSubscribedJob::BYieldingRunGCJob(GCSDK::IMsgNetPacket*)
 T GCSDK::CGCSOCacheSubscribedJob::~CGCSOCacheSubscribedJob()
 T GCSDK::CGCSOCacheSubscriptionCheck::BYieldingRunGCJob(GCSDK::IMsgNetPacket*)
 T GCSDK::CGCSOCacheSubscriptionCheck::~CGCSOCacheSubscriptionCheck()
 T GCSDK::CGCSOCacheUnsubscribedJob::BYieldingRunGCJob(GCSDK::IMsgNetPacket*)
 T GCSDK::CGCSOCacheUnsubscribedJob::~CGCSOCacheUnsubscribedJob()
 T GCSDK::CGCSOCreateJob::BYieldingRunGCJob(GCSDK::IMsgNetPacket*)
 T GCSDK::CGCSOCreateJob::~CGCSOCreateJob()
 T GCSDK::CGCSODestroyJob::BYieldingRunGCJob(GCSDK::IMsgNetPacket*)
 T GCSDK::CGCSODestroyJob::~CGCSODestroyJob()
 T GCSDK::CGCSOUpdateJob::BYieldingRunGCJob(GCSDK::IMsgNetPacket*)
 T GCSDK::CGCSOUpdateJob::~CGCSOUpdateJob()
 T GCSDK::CGCSOUpdateMultipleJob::BYieldingRunGCJob(GCSDK::IMsgNetPacket*)
 T GCSDK::CGCSOUpdateMultipleJob::~CGCSOUpdateMultipleJob()
 T GCSDK::CJob::AddPacketToList(GCSDK::IMsgNetPacket*, unsigned long long)
 T GCSDK::CJob::BHasFailedToReceivedMsgType(unsigned int) const
 T GCSDK::CJob::BRunProxy(void*)
 T GCSDK::CJob::BYieldingRunJob(void*)
 T GCSDK::CJob::BYieldingRunJobFromMsg(GCSDK::IMsgNetPacket*)
 T GCSDK::CJob::BYieldingWaitForMsg(GCSDK::IMsgNetPacket**)
 T GCSDK::CJob::BYieldingWaitOneFrame()
 T GCSDK::CJob::CHeartbeatsBeforeTimeout()
 T GCSDK::CJob::CJob(GCSDK::CJobMgr&, char const*)
 T GCSDK::CJob::Continue()
 T GCSDK::CJob::EndPause(GCSDK::EJobPauseReason)
 T GCSDK::CJob::GetName() const
 T GCSDK::CJob::GetPauseReasonDescription() const
 T GCSDK::CJob::Heartbeat()
 T GCSDK::CJob::InitCoroutine()
 T GCSDK::CJob::PassLockToJob(GCSDK::CJob*, GCSDK::CLock*)
 T GCSDK::CJob::Pause(GCSDK::EJobPauseReason)
 T GCSDK::CJob::StartJob(void*)
 T GCSDK::CJob::StartJobFromNetworkMsg(GCSDK::IMsgNetPacket*, unsigned long long const&)
 T GCSDK::CJob::UnsetLock(GCSDK::CLock*)
 T GCSDK::CJob::_ReleaseLock(GCSDK::CLock*, bool, char const*, int)
 T GCSDK::CJob::~CJob()
 T GCSDK::CJobMgr::AccumulateStatsofJob(GCSDK::CJob&)
 T GCSDK::CJobMgr::AddToYieldList(GCSDK::CJob&)
 T GCSDK::CJobMgr::BFrameFuncRunSleepingJobs(CLimitTimer&)
 T GCSDK::CJobMgr::BFrameFuncRunYieldingJobs(CLimitTimer&)
 T GCSDK::CJobMgr::BLaunchJobFromNetworkMsg(void*, GCSDK::JobMsgInfo_t const&, GCSDK::IMsgNetPacket*)
 T GCSDK::CJobMgr::BResumeSleepingJobs(CLimitTimer&)
 T GCSDK::CJobMgr::BResumeYieldingJobsFromList(CUtlLinkedList<GCSDK::CJobMgr::JobYielding_t, int, false, int, CUtlMemory<UtlLinkedListElem_t<GCSDK::CJobMgr::JobYielding_t, int>, int> >&, unsigned int, CLimitTimer&)
 T GCSDK::CJobMgr::BRouteMsgToJob(void*, GCSDK::IMsgNetPacket*, GCSDK::JobMsgInfo_t const&)
 T GCSDK::CJobMgr::BYieldingWaitForMsg(GCSDK::CJob&)
 T GCSDK::CJobMgr::BYieldingWaitTime(GCSDK::CJob&, unsigned int)
 T GCSDK::CJobMgr::CJobMgr()
 T GCSDK::CJobMgr::CheckForJobTimeouts(CLimitTimer&)
 T GCSDK::CJobMgr::CheckThreadID()
 T GCSDK::CJobMgr::GetNewJobID()
 T GCSDK::CJobMgr::InsertJob(GCSDK::CJob&)
 T GCSDK::CJobMgr::JobSleepingLessFunc(GCSDK::CJobMgr::JobSleeping_t const&, GCSDK::CJobMgr::JobSleeping_t const&)
 T GCSDK::CJobMgr::PassMsgToJob(GCSDK::CJob&, GCSDK::IMsgNetPacket*, GCSDK::JobMsgInfo_t const&)
 T GCSDK::CJobMgr::PauseJob(GCSDK::CJob&, GCSDK::EJobPauseReason)
 T GCSDK::CJobMgr::RegisterJobType(GCSDK::JobType_t const*)
 T GCSDK::CJobMgr::RemoveJob(GCSDK::CJob&)
 T GCSDK::CJobMgr::SetThreadPoolSize(unsigned int)
 T GCSDK::CJobMgr::TimeoutJob(GCSDK::CJob&)
 T GCSDK::CJobMgr::WakeupLockedJob(GCSDK::CJob&)
 T GCSDK::CJobMgr::~CJobMgr()
 T GCSDK::CJobTime::CJobTime()
 T GCSDK::CJobTime::CServerMicroSecsPassed() const
 T GCSDK::CJobTime::SetFromJobTime(long long)
 T GCSDK::CJobTime::SetToJobTime()
 T GCSDK::CJobTime::UpdateJobTime(int)
 T GCSDK::CMessageList::GetMessage(unsigned int, char const**, int)
 T GCSDK::CMessageList::TallySendMessage(unsigned int, unsigned int, unsigned int)
 T GCSDK::CMessageList::~CMessageList()
 T GCSDK::CMsgBase_t<GCSDK::GCMsgHdrEx_t>::~CMsgBase_t()
 T GCSDK::CNetPacket::AddRef()
 T GCSDK::CNetPacket::CNetPacket()
 T GCSDK::CNetPacket::Init(unsigned int, void const*)
 T GCSDK::CNetPacket::Release()
 T GCSDK::CProtoBufGCClientSendHandler::BAsyncSend(unsigned int, unsigned char const*, unsigned int)
 T GCSDK::CProtoBufMsg<CGCMsgGC_War_IndividualUpdate>::AllocProto()
 T GCSDK::CProtoBufMsg<CGCMsgGC_War_IndividualUpdate>::CProtoBufMsg(unsigned int)
 T GCSDK::CProtoBufMsg<CGCMsgGC_War_IndividualUpdate>::GetGenericBody() const
 T GCSDK::CProtoBufMsg<CGCMsgGC_War_IndividualUpdate>::~CProtoBufMsg()
 T GCSDK::CProtoBufMsg<CMsgConVarValue>::AllocProto()
 T GCSDK::CProtoBufMsg<CMsgConVarValue>::GetGenericBody() const
 T GCSDK::CProtoBufMsg<CMsgConVarValue>::~CProtoBufMsg()
 T GCSDK::CProtoBufMsg<CMsgGCQuestObjective_PointsChange>::AllocProto()
 T GCSDK::CProtoBufMsg<CMsgGCQuestObjective_PointsChange>::CProtoBufMsg(unsigned int)
 T GCSDK::CProtoBufMsg<CMsgGCQuestObjective_PointsChange>::GetGenericBody() const
 T GCSDK::CProtoBufMsg<CMsgGCQuestObjective_PointsChange>::~CProtoBufMsg()
 T GCSDK::CProtoBufMsg<CMsgGCRematchRequest>::AllocProto()
 T GCSDK::CProtoBufMsg<CMsgGCRematchRequest>::CProtoBufMsg(unsigned int)
 T GCSDK::CProtoBufMsg<CMsgGCRematchRequest>::GetGenericBody() const
 T GCSDK::CProtoBufMsg<CMsgGCRematchRequest>::~CProtoBufMsg()
 T GCSDK::CProtoBufMsg<CMsgGCRematchRequestResponse>::AllocProto()
 T GCSDK::CProtoBufMsg<CMsgGCRematchRequestResponse>::GetGenericBody() const
 T GCSDK::CProtoBufMsg<CMsgGCRematchRequestResponse>::~CProtoBufMsg()
 T GCSDK::CProtoBufMsg<CMsgGC_DailyCompetitiveStatsRollup>::AllocProto()
 T GCSDK::CProtoBufMsg<CMsgGC_DailyCompetitiveStatsRollup>::CProtoBufMsg(unsigned int)
 T GCSDK::CProtoBufMsg<CMsgGC_DailyCompetitiveStatsRollup>::GetGenericBody() const
 T GCSDK::CProtoBufMsg<CMsgGC_DailyCompetitiveStatsRollup>::~CProtoBufMsg()
 T GCSDK::CProtoBufMsg<CMsgGC_DailyCompetitiveStatsRollup_Response>::AllocProto()
 T GCSDK::CProtoBufMsg<CMsgGC_DailyCompetitiveStatsRollup_Response>::GetGenericBody() const
 T GCSDK::CProtoBufMsg<CMsgGC_DailyCompetitiveStatsRollup_Response>::~CProtoBufMsg()
 T GCSDK::CProtoBufMsg<CMsgGC_GameServer_AuthChallenge>::AllocProto()
 T GCSDK::CProtoBufMsg<CMsgGC_GameServer_AuthChallenge>::GetGenericBody() const
 T GCSDK::CProtoBufMsg<CMsgGC_GameServer_AuthChallenge>::~CProtoBufMsg()
 T GCSDK::CProtoBufMsg<CMsgGC_GameServer_AuthChallengeResponse>::AllocProto()
 T GCSDK::CProtoBufMsg<CMsgGC_GameServer_AuthChallengeResponse>::CProtoBufMsg(unsigned int)
 T GCSDK::CProtoBufMsg<CMsgGC_GameServer_AuthChallengeResponse>::GetGenericBody() const
 T GCSDK::CProtoBufMsg<CMsgGC_GameServer_AuthChallengeResponse>::~CProtoBufMsg()
 T GCSDK::CProtoBufMsg<CMsgGC_GameServer_AuthResult>::AllocProto()
 T GCSDK::CProtoBufMsg<CMsgGC_GameServer_AuthResult>::GetGenericBody() const
 T GCSDK::CProtoBufMsg<CMsgGC_GameServer_AuthResult>::~CProtoBufMsg()
 T GCSDK::CProtoBufMsg<CMsgGC_GameServer_LevelInfo>::AllocProto()
 T GCSDK::CProtoBufMsg<CMsgGC_GameServer_LevelInfo>::CProtoBufMsg(unsigned int)
 T GCSDK::CProtoBufMsg<CMsgGC_GameServer_LevelInfo>::GetGenericBody() const
 T GCSDK::CProtoBufMsg<CMsgGC_GameServer_LevelInfo>::~CProtoBufMsg()
 T GCSDK::CProtoBufMsg<CMsgGC_GameServer_ServerModificationItem>::AllocProto()
 T GCSDK::CProtoBufMsg<CMsgGC_GameServer_ServerModificationItem>::GetGenericBody() const
 T GCSDK::CProtoBufMsg<CMsgGC_GameServer_ServerModificationItem>::~CProtoBufMsg()
 T GCSDK::CProtoBufMsg<CMsgGC_GameServer_ServerModificationItemExpired>::AllocProto()
 T GCSDK::CProtoBufMsg<CMsgGC_GameServer_ServerModificationItemExpired>::CProtoBufMsg(unsigned int)
 T GCSDK::CProtoBufMsg<CMsgGC_GameServer_ServerModificationItemExpired>::GetGenericBody() const
 T GCSDK::CProtoBufMsg<CMsgGC_GameServer_ServerModificationItemExpired>::~CProtoBufMsg()
 T GCSDK::CProtoBufMsg<CMsgGC_GameServer_UseServerModificationItem>::AllocProto()
 T GCSDK::CProtoBufMsg<CMsgGC_GameServer_UseServerModificationItem>::GetGenericBody() const
 T GCSDK::CProtoBufMsg<CMsgGC_GameServer_UseServerModificationItem>::~CProtoBufMsg()
 T GCSDK::CProtoBufMsg<CMsgGC_GameServer_UseServerModificationItem_Response>::AllocProto()
 T GCSDK::CProtoBufMsg<CMsgGC_GameServer_UseServerModificationItem_Response>::CProtoBufMsg(unsigned int)
 T GCSDK::CProtoBufMsg<CMsgGC_GameServer_UseServerModificationItem_Response>::GetGenericBody() const
 T GCSDK::CProtoBufMsg<CMsgGC_GameServer_UseServerModificationItem_Response>::~CProtoBufMsg()
 T GCSDK::CProtoBufMsg<CMsgGC_KickPlayerFromLobby>::AllocProto()
 T GCSDK::CProtoBufMsg<CMsgGC_KickPlayerFromLobby>::GetGenericBody() const
 T GCSDK::CProtoBufMsg<CMsgGC_KickPlayerFromLobby>::~CProtoBufMsg()
 T GCSDK::CProtoBufMsg<CMsgGC_Match_Result>::AllocProto()
 T GCSDK::CProtoBufMsg<CMsgGC_Match_Result>::CProtoBufMsg(unsigned int)
 T GCSDK::CProtoBufMsg<CMsgGC_Match_Result>::GetGenericBody() const
 T GCSDK::CProtoBufMsg<CMsgGC_Match_Result>::~CProtoBufMsg()
 T GCSDK::CProtoBufMsg<CMsgGC_Match_ResultResponse>::AllocProto()
 T GCSDK::CProtoBufMsg<CMsgGC_Match_ResultResponse>::GetGenericBody() const
 T GCSDK::CProtoBufMsg<CMsgGC_Match_ResultResponse>::~CProtoBufMsg()
 T GCSDK::CProtoBufMsg<CMsgGC_TFVoteKickPlayerRequest>::AllocProto()
 T GCSDK::CProtoBufMsg<CMsgGC_TFVoteKickPlayerRequest>::CProtoBufMsg(unsigned int)
 T GCSDK::CProtoBufMsg<CMsgGC_TFVoteKickPlayerRequest>::GetGenericBody() const
 T GCSDK::CProtoBufMsg<CMsgGC_TFVoteKickPlayerRequest>::~CProtoBufMsg()
 T GCSDK::CProtoBufMsg<CMsgGC_VoteKickPlayerRequestResponse>::AllocProto()
 T GCSDK::CProtoBufMsg<CMsgGC_VoteKickPlayerRequestResponse>::GetGenericBody() const
 T GCSDK::CProtoBufMsg<CMsgGC_VoteKickPlayerRequestResponse>::~CProtoBufMsg()
 T GCSDK::CProtoBufMsg<CMsgGameServerKickingLobby>::AllocProto()
 T GCSDK::CProtoBufMsg<CMsgGameServerKickingLobby>::CProtoBufMsg(unsigned int)
 T GCSDK::CProtoBufMsg<CMsgGameServerKickingLobby>::GetGenericBody() const
 T GCSDK::CProtoBufMsg<CMsgGameServerKickingLobby>::~CProtoBufMsg()
 T GCSDK::CProtoBufMsg<CMsgGameServerKickingLobbyResponse>::AllocProto()
 T GCSDK::CProtoBufMsg<CMsgGameServerKickingLobbyResponse>::GetGenericBody() const
 T GCSDK::CProtoBufMsg<CMsgGameServerKickingLobbyResponse>::~CProtoBufMsg()
 T GCSDK::CProtoBufMsg<CMsgGameServerMatchmakingStatus>::AllocProto()
 T GCSDK::CProtoBufMsg<CMsgGameServerMatchmakingStatus>::CProtoBufMsg(unsigned int)
 T GCSDK::CProtoBufMsg<CMsgGameServerMatchmakingStatus>::GetGenericBody() const
 T GCSDK::CProtoBufMsg<CMsgGameServerMatchmakingStatus>::~CProtoBufMsg()
 T GCSDK::CProtoBufMsg<CMsgHalloween_Merasmus2012>::AllocProto()
 T GCSDK::CProtoBufMsg<CMsgHalloween_Merasmus2012>::CProtoBufMsg(unsigned int)
 T GCSDK::CProtoBufMsg<CMsgHalloween_Merasmus2012>::GetGenericBody() const
 T GCSDK::CProtoBufMsg<CMsgHalloween_Merasmus2012>::~CProtoBufMsg()
 T GCSDK::CProtoBufMsg<CMsgIncrementKillCountAttribute>::AllocProto()
 T GCSDK::CProtoBufMsg<CMsgIncrementKillCountAttribute>::CProtoBufMsg(unsigned int)
 T GCSDK::CProtoBufMsg<CMsgIncrementKillCountAttribute>::GetGenericBody() const
 T GCSDK::CProtoBufMsg<CMsgIncrementKillCountAttribute>::~CProtoBufMsg()
 T GCSDK::CProtoBufMsg<CMsgIncrementKillCountAttribute_Multiple>::AllocProto()
 T GCSDK::CProtoBufMsg<CMsgIncrementKillCountAttribute_Multiple>::CProtoBufMsg(unsigned int)
 T GCSDK::CProtoBufMsg<CMsgIncrementKillCountAttribute_Multiple>::GetGenericBody() const
 T GCSDK::CProtoBufMsg<CMsgIncrementKillCountAttribute_Multiple>::~CProtoBufMsg()
 T GCSDK::CProtoBufMsg<CMsgItemAcknowledged>::AllocProto()
 T GCSDK::CProtoBufMsg<CMsgItemAcknowledged>::GetGenericBody() const
 T GCSDK::CProtoBufMsg<CMsgItemAcknowledged>::~CProtoBufMsg()
 T GCSDK::CProtoBufMsg<CMsgMvMMannUpVictoryReply>::AllocProto()
 T GCSDK::CProtoBufMsg<CMsgMvMMannUpVictoryReply>::GetGenericBody() const
 T GCSDK::CProtoBufMsg<CMsgMvMMannUpVictoryReply>::~CProtoBufMsg()
 T GCSDK::CProtoBufMsg<CMsgMvMVictory>::AllocProto()
 T GCSDK::CProtoBufMsg<CMsgMvMVictory>::CProtoBufMsg(unsigned int)
 T GCSDK::CProtoBufMsg<CMsgMvMVictory>::GetGenericBody() const
 T GCSDK::CProtoBufMsg<CMsgMvMVictory>::~CProtoBufMsg()
 T GCSDK::CProtoBufMsg<CMsgPlayerLeftMatch>::AllocProto()
 T GCSDK::CProtoBufMsg<CMsgPlayerLeftMatch>::CProtoBufMsg(unsigned int)
 T GCSDK::CProtoBufMsg<CMsgPlayerLeftMatch>::GetGenericBody() const
 T GCSDK::CProtoBufMsg<CMsgPlayerLeftMatch>::~CProtoBufMsg()
 T GCSDK::CProtoBufMsg<CMsgPlayerLeftMatchResponse>::AllocProto()
 T GCSDK::CProtoBufMsg<CMsgPlayerLeftMatchResponse>::GetGenericBody() const
 T GCSDK::CProtoBufMsg<CMsgPlayerLeftMatchResponse>::~CProtoBufMsg()
 T GCSDK::CProtoBufMsg<CMsgReplicateConVars>::AllocProto()
 T GCSDK::CProtoBufMsg<CMsgReplicateConVars>::GetGenericBody() const
 T GCSDK::CProtoBufMsg<CMsgReplicateConVars>::~CProtoBufMsg()
 T GCSDK::CProtoBufMsg<CMsgSOCacheSubscribed>::AllocProto()
 T GCSDK::CProtoBufMsg<CMsgSOCacheSubscribed>::GetGenericBody() const
 T GCSDK::CProtoBufMsg<CMsgSOCacheSubscribed>::~CProtoBufMsg()
 T GCSDK::CProtoBufMsg<CMsgSOCacheSubscriptionCheck>::AllocProto()
 T GCSDK::CProtoBufMsg<CMsgSOCacheSubscriptionCheck>::GetGenericBody() const
 T GCSDK::CProtoBufMsg<CMsgSOCacheSubscriptionCheck>::~CProtoBufMsg()
 T GCSDK::CProtoBufMsg<CMsgSOCacheSubscriptionRefresh>::AllocProto()
 T GCSDK::CProtoBufMsg<CMsgSOCacheSubscriptionRefresh>::CProtoBufMsg(unsigned int)
 T GCSDK::CProtoBufMsg<CMsgSOCacheSubscriptionRefresh>::GetGenericBody() const
 T GCSDK::CProtoBufMsg<CMsgSOCacheSubscriptionRefresh>::~CProtoBufMsg()
 T GCSDK::CProtoBufMsg<CMsgSOCacheUnsubscribed>::AllocProto()
 T GCSDK::CProtoBufMsg<CMsgSOCacheUnsubscribed>::GetGenericBody() const
 T GCSDK::CProtoBufMsg<CMsgSOCacheUnsubscribed>::~CProtoBufMsg()
 T GCSDK::CProtoBufMsg<CMsgSOMultipleObjects>::AllocProto()
 T GCSDK::CProtoBufMsg<CMsgSOMultipleObjects>::GetGenericBody() const
 T GCSDK::CProtoBufMsg<CMsgSOMultipleObjects>::~CProtoBufMsg()
 T GCSDK::CProtoBufMsg<CMsgSOSingleObject>::AllocProto()
 T GCSDK::CProtoBufMsg<CMsgSOSingleObject>::GetGenericBody() const
 T GCSDK::CProtoBufMsg<CMsgSOSingleObject>::~CProtoBufMsg()
 T GCSDK::CProtoBufMsg<CMsgServerGoodbye>::AllocProto()
 T GCSDK::CProtoBufMsg<CMsgServerGoodbye>::GetGenericBody() const
 T GCSDK::CProtoBufMsg<CMsgServerGoodbye>::~CProtoBufMsg()
 T GCSDK::CProtoBufMsg<CMsgServerHello>::AllocProto()
 T GCSDK::CProtoBufMsg<CMsgServerHello>::CProtoBufMsg(unsigned int)
 T GCSDK::CProtoBufMsg<CMsgServerHello>::GetGenericBody() const
 T GCSDK::CProtoBufMsg<CMsgServerHello>::~CProtoBufMsg()
 T GCSDK::CProtoBufMsg<CMsgServerWelcome>::AllocProto()
 T GCSDK::CProtoBufMsg<CMsgServerWelcome>::GetGenericBody() const
 T GCSDK::CProtoBufMsg<CMsgServerWelcome>::~CProtoBufMsg()
 T GCSDK::CProtoBufMsg<CMsgTFCoaching_CoachJoined>::AllocProto()
 T GCSDK::CProtoBufMsg<CMsgTFCoaching_CoachJoined>::CProtoBufMsg(unsigned int)
 T GCSDK::CProtoBufMsg<CMsgTFCoaching_CoachJoined>::GetGenericBody() const
 T GCSDK::CProtoBufMsg<CMsgTFCoaching_CoachJoined>::~CProtoBufMsg()
 T GCSDK::CProtoBufMsg<CMsgTFCoaching_CoachJoining>::AllocProto()
 T GCSDK::CProtoBufMsg<CMsgTFCoaching_CoachJoining>::GetGenericBody() const
 T GCSDK::CProtoBufMsg<CMsgTFCoaching_CoachJoining>::~CProtoBufMsg()
 T GCSDK::CProtoBufMsg<CMsgTFCoaching_RemoveCurrentCoach>::AllocProto()
 T GCSDK::CProtoBufMsg<CMsgTFCoaching_RemoveCurrentCoach>::GetGenericBody() const
 T GCSDK::CProtoBufMsg<CMsgTFCoaching_RemoveCurrentCoach>::~CProtoBufMsg()
 T GCSDK::CProtoBufMsg<CMsgTFQuickplay_PlayerJoining>::AllocProto()
 T GCSDK::CProtoBufMsg<CMsgTFQuickplay_PlayerJoining>::GetGenericBody() const
 T GCSDK::CProtoBufMsg<CMsgTFQuickplay_PlayerJoining>::~CProtoBufMsg()
 T GCSDK::CProtoBufMsg<CMsgTFVoteKickBanPlayerResult>::AllocProto()
 T GCSDK::CProtoBufMsg<CMsgTFVoteKickBanPlayerResult>::CProtoBufMsg(unsigned int)
 T GCSDK::CProtoBufMsg<CMsgTFVoteKickBanPlayerResult>::GetGenericBody() const
 T GCSDK::CProtoBufMsg<CMsgTFVoteKickBanPlayerResult>::~CProtoBufMsg()
 T GCSDK::CProtoBufMsg<CMsgTrackUniquePlayerPairEvent>::AllocProto()
 T GCSDK::CProtoBufMsg<CMsgTrackUniquePlayerPairEvent>::CProtoBufMsg(unsigned int)
 T GCSDK::CProtoBufMsg<CMsgTrackUniquePlayerPairEvent>::GetGenericBody() const
 T GCSDK::CProtoBufMsg<CMsgTrackUniquePlayerPairEvent>::~CProtoBufMsg()
 T GCSDK::CProtoBufMsg<CMsgUpdateHalloweenMerasmusLootLevel>::AllocProto()
 T GCSDK::CProtoBufMsg<CMsgUpdateHalloweenMerasmusLootLevel>::CProtoBufMsg(unsigned int)
 T GCSDK::CProtoBufMsg<CMsgUpdateHalloweenMerasmusLootLevel>::GetGenericBody() const
 T GCSDK::CProtoBufMsg<CMsgUpdateHalloweenMerasmusLootLevel>::~CProtoBufMsg()
 T GCSDK::CProtoBufMsg<CMsgUpdateItemSchema>::AllocProto()
 T GCSDK::CProtoBufMsg<CMsgUpdateItemSchema>::GetGenericBody() const
 T GCSDK::CProtoBufMsg<CMsgUpdateItemSchema>::~CProtoBufMsg()
 T GCSDK::CProtoBufMsgBase::BAsyncSend(GCSDK::CProtoBufMsgBase::IProtoBufSendHandler&) const
 T GCSDK::CProtoBufMsgBase::CProtoBufMsgBase()
 T GCSDK::CProtoBufMsgBase::CProtoBufMsgBase(unsigned int)
 T GCSDK::CProtoBufMsgBase::InitFromPacket(GCSDK::IMsgNetPacket*)
 T GCSDK::CProtoBufMsgBase::~CProtoBufMsgBase()
 T GCSDK::CProtoBufMsgMemoryPool<CGCMsgGC_War_IndividualUpdate>::GetName()
 T GCSDK::CProtoBufMsgMemoryPool<CGCMsgGC_War_IndividualUpdate>::InternalAlloc()
 T GCSDK::CProtoBufMsgMemoryPool<CGCMsgGC_War_IndividualUpdate>::~CProtoBufMsgMemoryPool()
 T GCSDK::CProtoBufMsgMemoryPool<CMsgConVarValue>::GetName()
 T GCSDK::CProtoBufMsgMemoryPool<CMsgConVarValue>::InternalAlloc()
 T GCSDK::CProtoBufMsgMemoryPool<CMsgConVarValue>::~CProtoBufMsgMemoryPool()
 T GCSDK::CProtoBufMsgMemoryPool<CMsgGCQuestObjective_PointsChange>::GetName()
 T GCSDK::CProtoBufMsgMemoryPool<CMsgGCQuestObjective_PointsChange>::InternalAlloc()
 T GCSDK::CProtoBufMsgMemoryPool<CMsgGCQuestObjective_PointsChange>::~CProtoBufMsgMemoryPool()
 T GCSDK::CProtoBufMsgMemoryPool<CMsgGCRematchRequest>::GetName()
 T GCSDK::CProtoBufMsgMemoryPool<CMsgGCRematchRequest>::InternalAlloc()
 T GCSDK::CProtoBufMsgMemoryPool<CMsgGCRematchRequest>::~CProtoBufMsgMemoryPool()
 T GCSDK::CProtoBufMsgMemoryPool<CMsgGCRematchRequestResponse>::GetName()
 T GCSDK::CProtoBufMsgMemoryPool<CMsgGCRematchRequestResponse>::InternalAlloc()
 T GCSDK::CProtoBufMsgMemoryPool<CMsgGCRematchRequestResponse>::~CProtoBufMsgMemoryPool()
 T GCSDK::CProtoBufMsgMemoryPool<CMsgGC_DailyCompetitiveStatsRollup>::GetName()
 T GCSDK::CProtoBufMsgMemoryPool<CMsgGC_DailyCompetitiveStatsRollup>::InternalAlloc()
 T GCSDK::CProtoBufMsgMemoryPool<CMsgGC_DailyCompetitiveStatsRollup>::~CProtoBufMsgMemoryPool()
 T GCSDK::CProtoBufMsgMemoryPool<CMsgGC_DailyCompetitiveStatsRollup_Response>::GetName()
 T GCSDK::CProtoBufMsgMemoryPool<CMsgGC_DailyCompetitiveStatsRollup_Response>::InternalAlloc()
 T GCSDK::CProtoBufMsgMemoryPool<CMsgGC_DailyCompetitiveStatsRollup_Response>::~CProtoBufMsgMemoryPool()
 T GCSDK::CProtoBufMsgMemoryPool<CMsgGC_GameServer_AuthChallenge>::GetName()
 T GCSDK::CProtoBufMsgMemoryPool<CMsgGC_GameServer_AuthChallenge>::InternalAlloc()
 T GCSDK::CProtoBufMsgMemoryPool<CMsgGC_GameServer_AuthChallenge>::~CProtoBufMsgMemoryPool()
 T GCSDK::CProtoBufMsgMemoryPool<CMsgGC_GameServer_AuthChallengeResponse>::GetName()
 T GCSDK::CProtoBufMsgMemoryPool<CMsgGC_GameServer_AuthChallengeResponse>::InternalAlloc()
 T GCSDK::CProtoBufMsgMemoryPool<CMsgGC_GameServer_AuthChallengeResponse>::~CProtoBufMsgMemoryPool()
 T GCSDK::CProtoBufMsgMemoryPool<CMsgGC_GameServer_AuthResult>::GetName()
 T GCSDK::CProtoBufMsgMemoryPool<CMsgGC_GameServer_AuthResult>::InternalAlloc()
 T GCSDK::CProtoBufMsgMemoryPool<CMsgGC_GameServer_AuthResult>::~CProtoBufMsgMemoryPool()
 T GCSDK::CProtoBufMsgMemoryPool<CMsgGC_GameServer_LevelInfo>::GetName()
 T GCSDK::CProtoBufMsgMemoryPool<CMsgGC_GameServer_LevelInfo>::InternalAlloc()
 T GCSDK::CProtoBufMsgMemoryPool<CMsgGC_GameServer_LevelInfo>::~CProtoBufMsgMemoryPool()
 T GCSDK::CProtoBufMsgMemoryPool<CMsgGC_GameServer_ServerModificationItem>::GetName()
 T GCSDK::CProtoBufMsgMemoryPool<CMsgGC_GameServer_ServerModificationItem>::InternalAlloc()
 T GCSDK::CProtoBufMsgMemoryPool<CMsgGC_GameServer_ServerModificationItem>::~CProtoBufMsgMemoryPool()
 T GCSDK::CProtoBufMsgMemoryPool<CMsgGC_GameServer_ServerModificationItemExpired>::GetName()
 T GCSDK::CProtoBufMsgMemoryPool<CMsgGC_GameServer_ServerModificationItemExpired>::InternalAlloc()
 T GCSDK::CProtoBufMsgMemoryPool<CMsgGC_GameServer_ServerModificationItemExpired>::~CProtoBufMsgMemoryPool()
 T GCSDK::CProtoBufMsgMemoryPool<CMsgGC_GameServer_UseServerModificationItem>::GetName()
 T GCSDK::CProtoBufMsgMemoryPool<CMsgGC_GameServer_UseServerModificationItem>::InternalAlloc()
 T GCSDK::CProtoBufMsgMemoryPool<CMsgGC_GameServer_UseServerModificationItem>::~CProtoBufMsgMemoryPool()
 T GCSDK::CProtoBufMsgMemoryPool<CMsgGC_GameServer_UseServerModificationItem_Response>::GetName()
 T GCSDK::CProtoBufMsgMemoryPool<CMsgGC_GameServer_UseServerModificationItem_Response>::InternalAlloc()
 T GCSDK::CProtoBufMsgMemoryPool<CMsgGC_GameServer_UseServerModificationItem_Response>::~CProtoBufMsgMemoryPool()
 T GCSDK::CProtoBufMsgMemoryPool<CMsgGC_KickPlayerFromLobby>::GetName()
 T GCSDK::CProtoBufMsgMemoryPool<CMsgGC_KickPlayerFromLobby>::InternalAlloc()
 T GCSDK::CProtoBufMsgMemoryPool<CMsgGC_KickPlayerFromLobby>::~CProtoBufMsgMemoryPool()
 T GCSDK::CProtoBufMsgMemoryPool<CMsgGC_Match_Result>::GetName()
 T GCSDK::CProtoBufMsgMemoryPool<CMsgGC_Match_Result>::InternalAlloc()
 T GCSDK::CProtoBufMsgMemoryPool<CMsgGC_Match_Result>::~CProtoBufMsgMemoryPool()
 T GCSDK::CProtoBufMsgMemoryPool<CMsgGC_Match_ResultResponse>::GetName()
 T GCSDK::CProtoBufMsgMemoryPool<CMsgGC_Match_ResultResponse>::InternalAlloc()
 T GCSDK::CProtoBufMsgMemoryPool<CMsgGC_Match_ResultResponse>::~CProtoBufMsgMemoryPool()
 T GCSDK::CProtoBufMsgMemoryPool<CMsgGC_TFVoteKickPlayerRequest>::GetName()
 T GCSDK::CProtoBufMsgMemoryPool<CMsgGC_TFVoteKickPlayerRequest>::InternalAlloc()
 T GCSDK::CProtoBufMsgMemoryPool<CMsgGC_TFVoteKickPlayerRequest>::~CProtoBufMsgMemoryPool()
 T GCSDK::CProtoBufMsgMemoryPool<CMsgGC_VoteKickPlayerRequestResponse>::GetName()
 T GCSDK::CProtoBufMsgMemoryPool<CMsgGC_VoteKickPlayerRequestResponse>::InternalAlloc()
 T GCSDK::CProtoBufMsgMemoryPool<CMsgGC_VoteKickPlayerRequestResponse>::~CProtoBufMsgMemoryPool()
 T GCSDK::CProtoBufMsgMemoryPool<CMsgGameServerKickingLobby>::GetName()
 T GCSDK::CProtoBufMsgMemoryPool<CMsgGameServerKickingLobby>::InternalAlloc()
 T GCSDK::CProtoBufMsgMemoryPool<CMsgGameServerKickingLobby>::~CProtoBufMsgMemoryPool()
 T GCSDK::CProtoBufMsgMemoryPool<CMsgGameServerKickingLobbyResponse>::GetName()
 T GCSDK::CProtoBufMsgMemoryPool<CMsgGameServerKickingLobbyResponse>::InternalAlloc()
 T GCSDK::CProtoBufMsgMemoryPool<CMsgGameServerKickingLobbyResponse>::~CProtoBufMsgMemoryPool()
 T GCSDK::CProtoBufMsgMemoryPool<CMsgGameServerMatchmakingStatus>::GetName()
 T GCSDK::CProtoBufMsgMemoryPool<CMsgGameServerMatchmakingStatus>::InternalAlloc()
 T GCSDK::CProtoBufMsgMemoryPool<CMsgGameServerMatchmakingStatus>::~CProtoBufMsgMemoryPool()
 T GCSDK::CProtoBufMsgMemoryPool<CMsgHalloween_Merasmus2012>::GetName()
 T GCSDK::CProtoBufMsgMemoryPool<CMsgHalloween_Merasmus2012>::InternalAlloc()
 T GCSDK::CProtoBufMsgMemoryPool<CMsgHalloween_Merasmus2012>::~CProtoBufMsgMemoryPool()
 T GCSDK::CProtoBufMsgMemoryPool<CMsgIncrementKillCountAttribute>::GetName()
 T GCSDK::CProtoBufMsgMemoryPool<CMsgIncrementKillCountAttribute>::InternalAlloc()
 T GCSDK::CProtoBufMsgMemoryPool<CMsgIncrementKillCountAttribute>::~CProtoBufMsgMemoryPool()
 T GCSDK::CProtoBufMsgMemoryPool<CMsgIncrementKillCountAttribute_Multiple>::GetName()
 T GCSDK::CProtoBufMsgMemoryPool<CMsgIncrementKillCountAttribute_Multiple>::InternalAlloc()
 T GCSDK::CProtoBufMsgMemoryPool<CMsgIncrementKillCountAttribute_Multiple>::~CProtoBufMsgMemoryPool()
 T GCSDK::CProtoBufMsgMemoryPool<CMsgItemAcknowledged>::GetName()
 T GCSDK::CProtoBufMsgMemoryPool<CMsgItemAcknowledged>::InternalAlloc()
 T GCSDK::CProtoBufMsgMemoryPool<CMsgItemAcknowledged>::~CProtoBufMsgMemoryPool()
 T GCSDK::CProtoBufMsgMemoryPool<CMsgMvMMannUpVictoryReply>::GetName()
 T GCSDK::CProtoBufMsgMemoryPool<CMsgMvMMannUpVictoryReply>::InternalAlloc()
 T GCSDK::CProtoBufMsgMemoryPool<CMsgMvMMannUpVictoryReply>::~CProtoBufMsgMemoryPool()
 T GCSDK::CProtoBufMsgMemoryPool<CMsgMvMVictory>::GetName()
 T GCSDK::CProtoBufMsgMemoryPool<CMsgMvMVictory>::InternalAlloc()
 T GCSDK::CProtoBufMsgMemoryPool<CMsgMvMVictory>::~CProtoBufMsgMemoryPool()
 T GCSDK::CProtoBufMsgMemoryPool<CMsgPlayerLeftMatch>::GetName()
 T GCSDK::CProtoBufMsgMemoryPool<CMsgPlayerLeftMatch>::InternalAlloc()
 T GCSDK::CProtoBufMsgMemoryPool<CMsgPlayerLeftMatch>::~CProtoBufMsgMemoryPool()
 T GCSDK::CProtoBufMsgMemoryPool<CMsgPlayerLeftMatchResponse>::GetName()
 T GCSDK::CProtoBufMsgMemoryPool<CMsgPlayerLeftMatchResponse>::InternalAlloc()
 T GCSDK::CProtoBufMsgMemoryPool<CMsgPlayerLeftMatchResponse>::~CProtoBufMsgMemoryPool()
 T GCSDK::CProtoBufMsgMemoryPool<CMsgProtoBufHeader>::GetName()
 T GCSDK::CProtoBufMsgMemoryPool<CMsgProtoBufHeader>::InternalAlloc()
 T GCSDK::CProtoBufMsgMemoryPool<CMsgProtoBufHeader>::~CProtoBufMsgMemoryPool()
 T GCSDK::CProtoBufMsgMemoryPool<CMsgReplicateConVars>::GetName()
 T GCSDK::CProtoBufMsgMemoryPool<CMsgReplicateConVars>::InternalAlloc()
 T GCSDK::CProtoBufMsgMemoryPool<CMsgReplicateConVars>::~CProtoBufMsgMemoryPool()
 T GCSDK::CProtoBufMsgMemoryPool<CMsgSOCacheSubscribed>::GetName()
 T GCSDK::CProtoBufMsgMemoryPool<CMsgSOCacheSubscribed>::InternalAlloc()
 T GCSDK::CProtoBufMsgMemoryPool<CMsgSOCacheSubscribed>::~CProtoBufMsgMemoryPool()
 T GCSDK::CProtoBufMsgMemoryPool<CMsgSOCacheSubscriptionCheck>::GetName()
 T GCSDK::CProtoBufMsgMemoryPool<CMsgSOCacheSubscriptionCheck>::InternalAlloc()
 T GCSDK::CProtoBufMsgMemoryPool<CMsgSOCacheSubscriptionCheck>::~CProtoBufMsgMemoryPool()
 T GCSDK::CProtoBufMsgMemoryPool<CMsgSOCacheSubscriptionRefresh>::GetName()
 T GCSDK::CProtoBufMsgMemoryPool<CMsgSOCacheSubscriptionRefresh>::InternalAlloc()
 T GCSDK::CProtoBufMsgMemoryPool<CMsgSOCacheSubscriptionRefresh>::~CProtoBufMsgMemoryPool()
 T GCSDK::CProtoBufMsgMemoryPool<CMsgSOCacheUnsubscribed>::GetName()
 T GCSDK::CProtoBufMsgMemoryPool<CMsgSOCacheUnsubscribed>::InternalAlloc()
 T GCSDK::CProtoBufMsgMemoryPool<CMsgSOCacheUnsubscribed>::~CProtoBufMsgMemoryPool()
 T GCSDK::CProtoBufMsgMemoryPool<CMsgSOMultipleObjects>::GetName()
 T GCSDK::CProtoBufMsgMemoryPool<CMsgSOMultipleObjects>::InternalAlloc()
 T GCSDK::CProtoBufMsgMemoryPool<CMsgSOMultipleObjects>::~CProtoBufMsgMemoryPool()
 T GCSDK::CProtoBufMsgMemoryPool<CMsgSOSingleObject>::GetName()
 T GCSDK::CProtoBufMsgMemoryPool<CMsgSOSingleObject>::InternalAlloc()
 T GCSDK::CProtoBufMsgMemoryPool<CMsgSOSingleObject>::~CProtoBufMsgMemoryPool()
 T GCSDK::CProtoBufMsgMemoryPool<CMsgServerGoodbye>::GetName()
 T GCSDK::CProtoBufMsgMemoryPool<CMsgServerGoodbye>::InternalAlloc()
 T GCSDK::CProtoBufMsgMemoryPool<CMsgServerGoodbye>::~CProtoBufMsgMemoryPool()
 T GCSDK::CProtoBufMsgMemoryPool<CMsgServerHello>::GetName()
 T GCSDK::CProtoBufMsgMemoryPool<CMsgServerHello>::InternalAlloc()
 T GCSDK::CProtoBufMsgMemoryPool<CMsgServerHello>::~CProtoBufMsgMemoryPool()
 T GCSDK::CProtoBufMsgMemoryPool<CMsgServerWelcome>::GetName()
 T GCSDK::CProtoBufMsgMemoryPool<CMsgServerWelcome>::InternalAlloc()
 T GCSDK::CProtoBufMsgMemoryPool<CMsgServerWelcome>::~CProtoBufMsgMemoryPool()
 T GCSDK::CProtoBufMsgMemoryPool<CMsgTFCoaching_CoachJoined>::GetName()
 T GCSDK::CProtoBufMsgMemoryPool<CMsgTFCoaching_CoachJoined>::InternalAlloc()
 T GCSDK::CProtoBufMsgMemoryPool<CMsgTFCoaching_CoachJoined>::~CProtoBufMsgMemoryPool()
 T GCSDK::CProtoBufMsgMemoryPool<CMsgTFCoaching_CoachJoining>::GetName()
 T GCSDK::CProtoBufMsgMemoryPool<CMsgTFCoaching_CoachJoining>::InternalAlloc()
 T GCSDK::CProtoBufMsgMemoryPool<CMsgTFCoaching_CoachJoining>::~CProtoBufMsgMemoryPool()
 T GCSDK::CProtoBufMsgMemoryPool<CMsgTFCoaching_RemoveCurrentCoach>::GetName()
 T GCSDK::CProtoBufMsgMemoryPool<CMsgTFCoaching_RemoveCurrentCoach>::InternalAlloc()
 T GCSDK::CProtoBufMsgMemoryPool<CMsgTFCoaching_RemoveCurrentCoach>::~CProtoBufMsgMemoryPool()
 T GCSDK::CProtoBufMsgMemoryPool<CMsgTFQuickplay_PlayerJoining>::GetName()
 T GCSDK::CProtoBufMsgMemoryPool<CMsgTFQuickplay_PlayerJoining>::InternalAlloc()
 T GCSDK::CProtoBufMsgMemoryPool<CMsgTFQuickplay_PlayerJoining>::~CProtoBufMsgMemoryPool()
 T GCSDK::CProtoBufMsgMemoryPool<CMsgTFVoteKickBanPlayerResult>::GetName()
 T GCSDK::CProtoBufMsgMemoryPool<CMsgTFVoteKickBanPlayerResult>::InternalAlloc()
 T GCSDK::CProtoBufMsgMemoryPool<CMsgTFVoteKickBanPlayerResult>::~CProtoBufMsgMemoryPool()
 T GCSDK::CProtoBufMsgMemoryPool<CMsgTrackUniquePlayerPairEvent>::GetName()
 T GCSDK::CProtoBufMsgMemoryPool<CMsgTrackUniquePlayerPairEvent>::InternalAlloc()
 T GCSDK::CProtoBufMsgMemoryPool<CMsgTrackUniquePlayerPairEvent>::~CProtoBufMsgMemoryPool()
 T GCSDK::CProtoBufMsgMemoryPool<CMsgUpdateHalloweenMerasmusLootLevel>::GetName()
 T GCSDK::CProtoBufMsgMemoryPool<CMsgUpdateHalloweenMerasmusLootLevel>::InternalAlloc()
 T GCSDK::CProtoBufMsgMemoryPool<CMsgUpdateHalloweenMerasmusLootLevel>::~CProtoBufMsgMemoryPool()
 T GCSDK::CProtoBufMsgMemoryPool<CMsgUpdateItemSchema>::GetName()
 T GCSDK::CProtoBufMsgMemoryPool<CMsgUpdateItemSchema>::InternalAlloc()
 T GCSDK::CProtoBufMsgMemoryPool<CMsgUpdateItemSchema>::~CProtoBufMsgMemoryPool()
 T GCSDK::CProtoBufMsgMemoryPoolBase::Alloc()
 T GCSDK::CProtoBufMsgMemoryPoolBase::CProtoBufMsgMemoryPoolBase(unsigned int, unsigned int)
 T GCSDK::CProtoBufMsgMemoryPoolBase::~CProtoBufMsgMemoryPoolBase()
 T GCSDK::CProtoBufMsgMemoryPoolMgr::CProtoBufMsgMemoryPoolMgr()
 T GCSDK::CProtoBufMsgMemoryPoolMgr::RegisterPool(GCSDK::CProtoBufMsgMemoryPoolBase*)
 T GCSDK::CProtoBufMsgMemoryPoolMgr::~CProtoBufMsgMemoryPoolMgr()
 T GCSDK::CProtoBufNetPacket::BHasTargetJobName() const
 T GCSDK::CProtoBufNetPacket::CProtoBufNetPacket(GCSDK::CNetPacket*, GCProtoBufMsgSrc, CSteamID, unsigned int, unsigned int)
 T GCSDK::CProtoBufNetPacket::CubData() const
 T GCSDK::CProtoBufNetPacket::GetCNetPacket() const
 T GCSDK::CProtoBufNetPacket::GetEMsg() const
 T GCSDK::CProtoBufNetPacket::GetEMsgFormatType() const
 T GCSDK::CProtoBufNetPacket::GetSourceAppID() const
 T GCSDK::CProtoBufNetPacket::GetSourceJobID() const
 T GCSDK::CProtoBufNetPacket::GetSteamID() const
 T GCSDK::CProtoBufNetPacket::GetTargetJobID() const
 T GCSDK::CProtoBufNetPacket::GetTargetJobName() const
 T GCSDK::CProtoBufNetPacket::PubData() const
 T GCSDK::CProtoBufNetPacket::SetSourceAppID(unsigned int)
 T GCSDK::CProtoBufNetPacket::SetSteamID(CSteamID)
 T GCSDK::CProtoBufNetPacket::SetTargetJobID(unsigned long long)
 T GCSDK::CProtoBufNetPacket::~CProtoBufNetPacket()
 T GCSDK::CProtoBufSharedObject<CSOEconClaimCode, 3>::GetPObject()
 T GCSDK::CProtoBufSharedObject<CSOEconClaimCode, 3>::GetTypeID() const
 T GCSDK::CProtoBufSharedObject<CSOEconClaimCode, 3>::~CProtoBufSharedObject()
 T GCSDK::CProtoBufSharedObject<CSOEconGameAccountForGameServers, 37>::GetPObject()
 T GCSDK::CProtoBufSharedObject<CSOEconGameAccountForGameServers, 37>::GetTypeID() const
 T GCSDK::CProtoBufSharedObject<CSOEconGameAccountForGameServers, 37>::~CProtoBufSharedObject()
 T GCSDK::CProtoBufSharedObject<CSOTFDuelSummary, 19>::GetPObject()
 T GCSDK::CProtoBufSharedObject<CSOTFDuelSummary, 19>::GetTypeID() const
 T GCSDK::CProtoBufSharedObject<CSOTFDuelSummary, 19>::~CProtoBufSharedObject()
 T GCSDK::CProtoBufSharedObject<CSOTFGameServerLobby, 2004>::GetPObject()
 T GCSDK::CProtoBufSharedObject<CSOTFGameServerLobby, 2004>::GetTypeID() const
 T GCSDK::CProtoBufSharedObject<CSOTFGameServerLobby, 2004>::~CProtoBufSharedObject()
 T GCSDK::CProtoBufSharedObject<CSOTFLadderPlayerStats, 39>::GetPObject()
 T GCSDK::CProtoBufSharedObject<CSOTFLadderPlayerStats, 39>::GetTypeID() const
 T GCSDK::CProtoBufSharedObject<CSOTFLadderPlayerStats, 39>::~CProtoBufSharedObject()
 T GCSDK::CProtoBufSharedObject<CSOTFMapContribution, 28>::GetPObject()
 T GCSDK::CProtoBufSharedObject<CSOTFMapContribution, 28>::GetTypeID() const
 T GCSDK::CProtoBufSharedObject<CSOTFMapContribution, 28>::~CProtoBufSharedObject()
 T GCSDK::CProtoBufSharedObject<CSOTFParty, 2003>::GetPObject()
 T GCSDK::CProtoBufSharedObject<CSOTFParty, 2003>::GetTypeID() const
 T GCSDK::CProtoBufSharedObject<CSOTFParty, 2003>::~CProtoBufSharedObject()
 T GCSDK::CProtoBufSharedObject<CSOTFPlayerInfo, 2>::GetPObject()
 T GCSDK::CProtoBufSharedObject<CSOTFPlayerInfo, 2>::GetTypeID() const
 T GCSDK::CProtoBufSharedObject<CSOTFPlayerInfo, 2>::~CProtoBufSharedObject()
 T GCSDK::CProtoBufSharedObject<CSOWarData, 38>::GetPObject()
 T GCSDK::CProtoBufSharedObject<CSOWarData, 38>::GetTypeID() const
 T GCSDK::CProtoBufSharedObject<CSOWarData, 38>::~CProtoBufSharedObject()
 T GCSDK::CProtoBufSharedObjectBase::BIsKeyLess(GCSDK::CSharedObject const&) const
 T GCSDK::CProtoBufSharedObjectBase::BParseFromMessage(CUtlBuffer const&)
 T GCSDK::CProtoBufSharedObjectBase::BParseFromMessage(std::string const&)
 T GCSDK::CProtoBufSharedObjectBase::BUpdateFromNetwork(GCSDK::CSharedObject const&)
 T GCSDK::CProtoBufSharedObjectBase::Copy(GCSDK::CSharedObject const&)
 T GCSDK::CProtoBufSharedObjectBase::Dump() const
 T GCSDK::CRefCount::DestroyThis()
 T GCSDK::CRefCount::~CRefCount()
 T GCSDK::CSharedObject* GCSDK::CreateSharedObjectSubclass<CEconClaimCode>()
 T GCSDK::CSharedObject* GCSDK::CreateSharedObjectSubclass<CEconGameAccountForGameServers>()
 T GCSDK::CSharedObject* GCSDK::CreateSharedObjectSubclass<CEconItem>()
 T GCSDK::CSharedObject* GCSDK::CreateSharedObjectSubclass<CSOTFLadderData>()
 T GCSDK::CSharedObject* GCSDK::CreateSharedObjectSubclass<CTFDuelSummary>()
 T GCSDK::CSharedObject* GCSDK::CreateSharedObjectSubclass<CTFGSLobby>()
 T GCSDK::CSharedObject* GCSDK::CreateSharedObjectSubclass<CTFMapContribution>()
 T GCSDK::CSharedObject* GCSDK::CreateSharedObjectSubclass<CTFParty>()
 T GCSDK::CSharedObject* GCSDK::CreateSharedObjectSubclass<CTFPlayerInfo>()
 T GCSDK::CSharedObject* GCSDK::CreateSharedObjectSubclass<CWarData>()
 T GCSDK::CSharedObject::BIsKeyEqual(GCSDK::CSharedObject const&) const
 T GCSDK::CSharedObject::BShouldDeleteByCache() const
 T GCSDK::CSharedObject::Create(int)
 T GCSDK::CSharedObject::GetDebugString() const
 T GCSDK::CSharedObject::PchClassName(int)
 T GCSDK::CSharedObject::RegisterFactory(int, GCSDK::CSharedObject* (*)(), unsigned int, char const*)
 T GCSDK::CSharedObjectCache::CSharedObjectCache()
 T GCSDK::CSharedObjectCache::CreateBaseTypeCache(int)
 T GCSDK::CSharedObjectCache::Dump() const
 T GCSDK::CSharedObjectCache::FindBaseTypeCache(int) const
 T GCSDK::CSharedObjectCache::FindSharedObject(GCSDK::CSharedObject const&)
 T GCSDK::CSharedObjectCache::MarkDirty()
 T GCSDK::CSharedObjectCache::~CSharedObjectCache()
 T GCSDK::CSharedObjectTypeCache::AddObject(GCSDK::CSharedObject*)
 T GCSDK::CSharedObjectTypeCache::AddObjectClean(GCSDK::CSharedObject*)
 T GCSDK::CSharedObjectTypeCache::CSharedObjectTypeCache(int)
 T GCSDK::CSharedObjectTypeCache::Dump() const
 T GCSDK::CSharedObjectTypeCache::EnsureCapacity(unsigned int)
 T GCSDK::CSharedObjectTypeCache::FindSharedObject(GCSDK::CSharedObject const&)
 T GCSDK::CSharedObjectTypeCache::RemoveObject(GCSDK::CSharedObject const&)
 T GCSDK::CSharedObjectTypeCache::RemoveObjectByIndex(unsigned int)
 T GCSDK::CSharedObjectTypeCache::~CSharedObjectTypeCache()
 T GCSDK::CStructNetPacket::BHasTargetJobName() const
 T GCSDK::CStructNetPacket::CubData() const
 T GCSDK::CStructNetPacket::GetCNetPacket() const
 T GCSDK::CStructNetPacket::GetEMsg() const
 T GCSDK::CStructNetPacket::GetEMsgFormatType() const
 T GCSDK::CStructNetPacket::GetSourceAppID() const
 T GCSDK::CStructNetPacket::GetSourceJobID() const
 T GCSDK::CStructNetPacket::GetSteamID() const
 T GCSDK::CStructNetPacket::GetTargetJobID() const
 T GCSDK::CStructNetPacket::GetTargetJobName() const
 T GCSDK::CStructNetPacket::PubData() const
 T GCSDK::CStructNetPacket::SetSourceAppID(unsigned int)
 T GCSDK::CStructNetPacket::SetSteamID(CSteamID)
 T GCSDK::CStructNetPacket::SetTargetJobID(unsigned long long)
 T GCSDK::CStructNetPacket::~CStructNetPacket()
 T GCSDK::CWorkThreadPool::BDispatchCompletedWorkItems(CLimitTimer const&, GCSDK::CJobMgr*)
 T GCSDK::CWorkThreadPool::BTryDeleteExitedWorkerThreads()
 T GCSDK::CWorkThreadPool::CWorkThreadPool(char const*)
 T GCSDK::CWorkThreadPool::OnWorkItemCompleted(GCSDK::CWorkItem*)
 T GCSDK::CWorkThreadPool::SetWorkThreadAutoConstruct(int, GCSDK::IWorkThreadFactory*)
 T GCSDK::CWorkThreadPool::StopWorkThreads()
 T GCSDK::CWorkThreadPool::~CWorkThreadPool()
 T GCSDK::CreateJob_CGCSOCacheSubscribedJob(GCSDK::CGCClient*, void*)
 T GCSDK::CreateJob_CGCSOCacheSubscriptionCheck(GCSDK::CGCClient*, void*)
 T GCSDK::CreateJob_CGCSOCacheUnsubscribedJob(GCSDK::CGCClient*, void*)
 T GCSDK::CreateJob_CGCSOCreateJob(GCSDK::CGCClient*, void*)
 T GCSDK::CreateJob_CGCSODestroyJob(GCSDK::CGCClient*, void*)
 T GCSDK::CreateJob_CGCSOUpdateJob(GCSDK::CGCClient*, void*)
 T GCSDK::CreateJob_CGCSOUpdateMultipleJob(GCSDK::CGCClient*, void*)
 T GCSDK::EGInternal_EmitInfo(GCSDK::CGCEmitGroup const&, int, int, char const*, ...)
 T GCSDK::EmitBaseMessageV(char const*, SpewType_t, int, int, char const*, char*)
 T GCSDK::EmitError(GCSDK::CGCEmitGroup const&, char const*, ...)
 T GCSDK::EmitWarning(GCSDK::CGCEmitGroup const&, int, char const*, ...)
 T GCSDK::GProtoBufMsgMemoryPoolMgr()
 T GCSDK::IMsgNetPacketFromCNetPacket(GCSDK::CNetPacket*)
 T GCSDK::JobTypeSortFuncByMsg(GCSDK::JobType_t const* const&, GCSDK::JobType_t const* const&)
 T GCSDK::JobTypeSortFuncByName(GCSDK::JobType_t const* const&, GCSDK::JobType_t const* const&)
 T GCSDK::PchMsgNameFromEMsg(unsigned int)
 T GCoroutineMgr()
 T GEconItemSchema()
 T GTFGCClientSystem()
 T GameCoordinator_GetRegistrationString()
 T GameCoordinator_NotifyGameState()
 T GameCoordinator_NotifyLevelShutdown()
 T GameLogSystem()
 T GameStartFrame()
 T GameStringSystem()
 T Game_SetOneWayTransition()
 T GammaToLinear(float)
 T GetAISaveRestoreBlockHandler()
 T GetAchievementSaveRestoreBlockHandler()
 T GetAllChildren(CBaseEntity*, CUtlVector<CBaseEntity*, CUtlMemory<CBaseEntity*, int> >&)
 T GetAllInHierarchy(CBaseEntity*, CUtlVector<CBaseEntity*, CUtlMemory<CBaseEntity*, int> >&)
 T GetAmmoDef()
 T GetAmmoName(int)
 T GetAnimationEvent(CStudioHdr*, int, animevent_t*, float, float, int)
 T GetAttachmentLocalSpace(CStudioHdr*, int, matrix3x4_t&)
 T GetAttribColorIndexForName(char const*)
 T GetAutoMultiplayerPhysicsMode(Vector, float)
 T GetBodygroupCount(CStudioHdr*, int)
 T GetBombInfo(BombInfo_t*)
 T GetBotEscortCount(int)
 T GetBotsFromCommand(CCommand const&, int, char const*, CUtlVector<CTFPlayer*, CUtlMemory<CTFPlayer*, int> >*)
 T GetBreakableDamage(CTakeDamageInfo const&, IBreakableWithPropData*)
 T GetBuildableId(char const*)
 T GetCStringCharConversion()
 T GetCTFEventName(ETFFlagEventTypes)
 T GetCTFEventTypeFromName(char const*)
 T GetClassIndexFromString(char const*, int)
 T GetColorNameForAttribColor(attrib_colors_t)
 T GetCommentarySaveRestoreBlockHandler()
 T GetConstraintAttachments(CBaseEntity*, CBaseEntity**, IPhysicsObject**)
 T GetCurrentGravity()
 T GetCurrentSkyCamera()
 T GetCustomDamageFromName(char const*)
 T GetCustomDamageName(ETFDmgCustom)
 T GetDeathPoseActivity(CBaseAnimating*, CTakeDamageInfo const&)
 T GetDefaultLightstyleString(int)
 T GetDefaultResponseSystemSaveRestoreBlockHandler()
 T GetEarnedBonusPoints(IEconItemInterface const*)
 T GetEarnedStandardPoints(IEconItemInterface const*)
 T GetEntitySaveRestoreBlockHandler()
 T GetEnumGameTypeName(ETFGameType)
 T GetEventQueueSaveRestoreBlockHandler()
 T GetEyePosition(CStudioHdr*, Vector&)
 T GetFileWeaponInfoFromHandle(unsigned short)
 T GetFloorZ(Vector const&)
 T GetFloorZ(Vector const&, float)
 T GetGameDescription()
 T GetGameTypeFromName(char const*)
 T GetGameTypeID()
 T GetGameTypeName(ETFGameType)
 T GetGlobalTFTeam(int)
 T GetGlobalTeam(int)
 T GetHidingSpotByID(unsigned int)
 T GetHintTypeDescription(CAI_Hint*)
 T GetInvalidWeaponInfoHandle()
 T GetItemSchema()
 T GetKickBanPlayerReason(char const*)
 T GetKillEaterAttrCount()
 T GetKillEaterAttr_IsUserCustomizable(int)
 T GetKillEaterAttr_Restriction(int)
 T GetKillEaterAttr_RestrictionValue(int)
 T GetKillEaterAttr_Score(int)
 T GetKillEaterAttr_Type(int)
 T GetKilleaterWeaponFromDamageInfo(CTakeDamageInfo const*)
 T GetLongFloorZ(Vector const&)
 T GetMPConceptIndexFromString(char const*)
 T GetMassEquivalent(float)
 T GetMatchGroupDescription(EMatchGroup const&)
 T GetMaterialIndex(char const*)
 T GetMaterialNameFromIndex(int)
 T GetMaxCardUpgradesPerItem()
 T GetMvMChallengeDifficultyByInternalName(char const*)
 T GetNextCommandEntity(CBasePlayer*, char const*, CBaseEntity*)
 T GetNoEscCharConversion()
 T GetNumberOfTeams()
 T GetObjectInfo(int)
 T GetOrCreateAnimationActivity(perteamvisuals_t*, char const*)
 T GetParticleManifest(CUtlVector<CUtlString, CUtlMemory<CUtlString, int> >&)
 T GetParticleSystemIndex(char const*)
 T GetPhysObjSaveRestoreOps(PhysInterfaceId_t)
 T GetPhysSaveRestoreBlockHandler()
 T GetPlayerBySteamID(CSteamID const&)
 T GetPlayerClassData(unsigned int)
 T GetPlayerLadderDataBySteamID(CSteamID const&, EMatchGroup)
 T GetPowerupIconName(RuneTypes_t, int)
 T GetQuestEventsKeyValues()
 T GetRandomBotName()
 T GetRecentNPCSpeech(recentNPCSpeech_t*)
 T GetReplayGameStatsHelper()
 T GetSceneDuration(char const*)
 T GetSceneFilename(CBaseEntity*)
 T GetSceneManager()
 T GetSceneSpeechCount(char const*)
 T GetSequenceActivity(CStudioHdr*, int, int*)
 T GetSequenceActivityName(CStudioHdr*, int)
 T GetSequenceFlags(CStudioHdr*, int)
 T GetSequenceLinearMotion(CStudioHdr*, int, float const*, Vector*)
 T GetSequenceName(CStudioHdr*, int)
 T GetSimpleGroundHeightWithFloor(CNavArea*, Vector const&, float*, Vector*)
 T GetSkyCameraList()
 T GetSoundSaveRestoreOps()
 T GetSpringAttachments(CBaseEntity*, CBaseEntity**, IPhysicsObject**)
 T GetSteamUGC()
 T GetSteamWorksSGameStatsUploader()
 T GetTFConditionFromName(char const*)
 T GetTFConditionName(ETFCond)
 T GetTFEncryptionKey()
 T GetTauntAttackByName(char const*)
 T GetTemplateSaveRestoreBlockHandler()
 T GetUniverse()
 T GetUpgradeStepData(CTFPlayer*, int, int, int&, bool&)
 T GetValidParamsKeyFromEvent(char const*, char const*, char const*, KeyValues*)
 T GetVoiceGameMgr()
 T GetWarTrackerManager()
 T GetWeaponFromDamage(CTakeDamageInfo const&)
 T GetWeaponId(char const*)
 T GetWeaponProficiencyName(WeaponProficiency_t)
 T GetWeaponSoundFromString(char const*)
 T GetWorldEntity()
 T GlobalEntity_Add(char const*, char const*, GLOBALESTATE)
 T GlobalEntity_AddToCounter(int, int)
 T GlobalEntity_EnableStateUpdates(bool)
 T GlobalEntity_GetCounter(int)
 T GlobalEntity_GetIndex(char const*)
 T GlobalEntity_GetMap(int)
 T GlobalEntity_GetName(int)
 T GlobalEntity_GetNumGlobals()
 T GlobalEntity_GetState(int)
 T GlobalEntity_SetCounter(int, int)
 T GlobalEntity_SetMap(int, string_t)
 T GlobalEntity_SetState(int, GLOBALESTATE)
 T GotoSequence(CStudioHdr*, int, float, float, int, int&, float&, int&)
 T GroundLocomotionCollisionTraceFilter::ShouldHitEntity(IHandleEntity*, int)
 T GuessDamageForce(CTakeDamageInfo*, Vector const&, Vector const&, float)
 T HLTVDirector()
 T HLTVDirectorSystem()
 T Hack_FixEscapeChars(char*)
 T HandleFlagCapturedInDetectionZone(CBasePlayer*)
 T HandleFlagDroppedInDetectionZone(CBasePlayer*)
 T HandleFlagPickedUpInDetectionZone(CBasePlayer*)
 T HandleRageGain(CTFPlayer*, unsigned int, float, float)
 T HandleRematchVote(CTFGameRules::EUserRematchState, CSteamID)
 T Hash4(void const*)
 T Hash8(void const*)
 T HashInt(int)
 T HatAndMiscEconEntities_OnOwnerKillEaterEvent(CTFPlayer*, CTFPlayer*, kill_eater_event_t, int)
 T HatAndMiscEconEntities_OnOwnerKillEaterEventNoParter(CTFPlayer*, kill_eater_event_t, int)
 T Hermite_Spline(Quaternion const&, Quaternion const&, Quaternion const&, float, Quaternion&)
 T Hermite_Spline(Vector const&, Vector const&, Vector const&, float, Vector&)
 T HidingSpot::HidingSpot()
 T HidingSpot::Load(CUtlBuffer&, unsigned int)
 T HidingSpot::PostLoad()
 T HidingSpot::Save(CUtlBuffer&, unsigned int) const
 T HidingSpot::~HidingSpot()
 T HintClear()
 T Host_Say(edict_t*, CCommand const&, bool)
 T IBaseObjectAutoList::IBaseObjectAutoList(bool)
 T IBaseObjectAutoList::~IBaseObjectAutoList()
 T IBaseProjectileAutoList::IBaseProjectileAutoList(bool)
 T IBaseProjectileAutoList::~IBaseProjectileAutoList()
 T IBody::AimHeadTowards(CBaseEntity*, IBody::LookAtPriorityType, float, INextBotReply*, char const*)
 T IBody::AimHeadTowards(Vector const&, IBody::LookAtPriorityType, float, INextBotReply*, char const*)
 T IBody::ClearPendingAimReply()
 T IBody::GetActivity() const
 T IBody::GetActualPosture() const
 T IBody::GetArousal() const
 T IBody::GetCollisionGroup() const
 T IBody::GetCrouchHullHeight() const
 T IBody::GetDesiredPosture() const
 T IBody::GetEyePosition() const
 T IBody::GetHeadAimSubjectLeadTime() const
 T IBody::GetHeadAimTrackingInterval() const
 T IBody::GetHeadSteadyDuration() const
 T IBody::GetHullHeight() const
 T IBody::GetHullMaxs() const
 T IBody::GetHullMins() const
 T IBody::GetHullWidth() const
 T IBody::GetMaxHeadAngularVelocity() const
 T IBody::GetSolidMask() const
 T IBody::GetStandHullHeight() const
 T IBody::GetViewVector() const
 T IBody::HasActivityType(unsigned int) const
 T IBody::IsActivity(Activity) const
 T IBody::IsActualPosture(IBody::PostureType) const
 T IBody::IsArousal(IBody::ArousalType) const
 T IBody::IsDesiredPosture(IBody::PostureType) const
 T IBody::IsHeadAimingOnTarget() const
 T IBody::IsHeadSteady() const
 T IBody::IsInDesiredPosture() const
 T IBody::IsPostureChanging() const
 T IBody::IsPostureMobile() const
 T IBody::Reset()
 T IBody::SelectAnimationSequence(Activity) const
 T IBody::SetArousal(IBody::ArousalType)
 T IBody::SetDesiredPosture(IBody::PostureType)
 T IBody::SetPosition(Vector const&)
 T IBody::StartActivity(Activity, unsigned int)
 T IBody::Update()
 T IBody::~IBody()
 T IBoneSetup::AccumulatePose(Vector*, Quaternion*, int, float, float, float, CIKContext*)
 T IBoneSetup::CalcAutoplaySequences(Vector*, Quaternion*, float, CIKContext*)
 T IBoneSetup::CalcBoneAdj(Vector*, Quaternion*, float const*)
 T IBoneSetup::IBoneSetup(CStudioHdr const*, int, float const*, IPoseDebugger*)
 T IBoneSetup::InitPose(Vector*, Quaternion*)
 T IBoneSetup::~IBoneSetup()
 T IBonusPackAutoList::IBonusPackAutoList(bool)
 T IBonusPackAutoList::~IBonusPackAutoList()
 T ICaptureFlagAutoList::ICaptureFlagAutoList(bool)
 T ICaptureFlagAutoList::~ICaptureFlagAutoList()
 T ICaptureZoneAutoList::ICaptureZoneAutoList(bool)
 T ICaptureZoneAutoList::~ICaptureZoneAutoList()
 T IContextualQuery::IsHindrance(INextBot const*, CBaseEntity*) const
 T IContextualQuery::IsPositionAllowed(INextBot const*, Vector const&) const
 T IContextualQuery::SelectMoreDangerousThreat(INextBot const*, CBaseCombatCharacter const*, CKnownEntity const*, CKnownEntity const*) const
 T IContextualQuery::SelectTargetPoint(INextBot const*, CBaseCombatCharacter const*) const
 T IContextualQuery::ShouldAttack(INextBot const*, CKnownEntity const*) const
 T IContextualQuery::ShouldHurry(INextBot const*) const
 T IContextualQuery::ShouldPickUp(INextBot const*, CBaseEntity*) const
 T IContextualQuery::ShouldRetreat(INextBot const*) const
 T ICurrencyPackAutoList::ICurrencyPackAutoList(bool)
 T ICurrencyPackAutoList::~ICurrencyPackAutoList()
 T IDelayedSchemaData::InitializeSchemaInternal(CEconItemSchema*, CUtlBuffer&, bool, unsigned int)
 T IDroppedWeaponAutoList::IDroppedWeaponAutoList(bool)
 T IDroppedWeaponAutoList::~IDroppedWeaponAutoList()
 T IEconItemInterface::GetCustomPainkKitDefinition() const
 T IEconItemInterface::GetCustomPaintKitWear(float&) const
 T IEconItemInterface::GetExpirationDate() const
 T IEconItemInterface::GetItemDefIndex() const
 T IEconItemInterface::GetTradableAfterDateTime() const
 T IEconItemInterface::GetUntradabilityFlags() const
 T IEconItemInterface::IsCommodity() const
 T IEconItemInterface::IsMarketable() const
 T IEconItemInterface::IsPermanentlyUntradable() const
 T IEconItemInterface::IsTradable() const
 T IEconItemInterface::IsUsableInCrafting() const
 T IEconItemUntypedAttributeIterator::OnIterateAttributeValue(CEconItemAttributeDefinition const*, CAttribute_DynamicRecipeComponent const&)
 T IEconItemUntypedAttributeIterator::OnIterateAttributeValue(CEconItemAttributeDefinition const*, CAttribute_ItemSlotCriteria const&)
 T IEconItemUntypedAttributeIterator::OnIterateAttributeValue(CEconItemAttributeDefinition const*, CAttribute_String const&)
 T IEconItemUntypedAttributeIterator::OnIterateAttributeValue(CEconItemAttributeDefinition const*, CAttribute_WorldItemPlacement const&)
 T IEconItemUntypedAttributeIterator::OnIterateAttributeValue(CEconItemAttributeDefinition const*, float)
 T IEconItemUntypedAttributeIterator::OnIterateAttributeValue(CEconItemAttributeDefinition const*, unsigned int)
 T IEconItemUntypedAttributeIterator::OnIterateAttributeValue(CEconItemAttributeDefinition const*, unsigned long long const&)
 T IEconTool::BFinishInitialization()
 T IEconTool::CanApplyTo(IEconItemInterface const*, IEconItemInterface const*) const
 T IEconTool::RequiresToolEscrowPeriod() const
 T IEconTool::ShouldDisplayQuantity(IEconItemInterface const*) const
 T IEntityListener::OnEntityCreated(CBaseEntity*)
 T IEntityListener::OnEntityDeleted(CBaseEntity*)
 T IEntityListener::OnEntitySpawned(CBaseEntity*)
 T IExtraMapEntityAutoList::IExtraMapEntityAutoList(bool)
 T IExtraMapEntityAutoList::~IExtraMapEntityAutoList()
 T IEyeballBossAutoList::IEyeballBossAutoList(bool)
 T IEyeballBossAutoList::~IEyeballBossAutoList()
 T IFlagDetectionZoneAutoList::IFlagDetectionZoneAutoList(bool)
 T IFlagDetectionZoneAutoList::~IFlagDetectionZoneAutoList()
 T IForEachNavArea::PostIteration(bool)
 T IFuncForceFieldAutoList::IFuncForceFieldAutoList(bool)
 T IFuncForceFieldAutoList::~IFuncForceFieldAutoList()
 T IFuncNavPrerequisiteAutoList::IFuncNavPrerequisiteAutoList(bool)
 T IFuncNavPrerequisiteAutoList::~IFuncNavPrerequisiteAutoList()
 T IFuncNoBuildAutoList::IFuncNoBuildAutoList(bool)
 T IFuncNoBuildAutoList::~IFuncNoBuildAutoList()
 T IFuncPasstimeGoalieZoneAutoList::IFuncPasstimeGoalieZoneAutoList(bool)
 T IFuncPasstimeGoalieZoneAutoList::~IFuncPasstimeGoalieZoneAutoList()
 T IFuncPasstimeNoBallZoneAutoList::IFuncPasstimeNoBallZoneAutoList(bool)
 T IFuncPasstimeNoBallZoneAutoList::~IFuncPasstimeNoBallZoneAutoList()
 T IFuncPowerupVolumeAutoList::IFuncPowerupVolumeAutoList(bool)
 T IFuncPowerupVolumeAutoList::~IFuncPowerupVolumeAutoList()
 T IFuncRespawnRoomAutoList::IFuncRespawnRoomAutoList(bool)
 T IFuncRespawnRoomAutoList::~IFuncRespawnRoomAutoList()
 T IFuncRespawnRoomVisualizerAutoList::IFuncRespawnRoomVisualizerAutoList(bool)
 T IFuncRespawnRoomVisualizerAutoList::~IFuncRespawnRoomVisualizerAutoList()
 T IGameSystem::Add(IGameSystem*)
 T IGameSystem::FrameUpdatePostEntityThinkAllSystems()
 T IGameSystem::FrameUpdatePreEntityThinkAllSystems()
 T IGameSystem::InitAllSystems()
 T IGameSystem::LevelInitPostEntityAllSystems()
 T IGameSystem::LevelInitPreEntityAllSystems(char const*)
 T IGameSystem::LevelShutdownPostEntityAllSystems()
 T IGameSystem::LevelShutdownPreClearSteamAPIContext()
 T IGameSystem::LevelShutdownPreClearSteamAPIContextAllSystems()
 T IGameSystem::LevelShutdownPreEntityAllSystems()
 T IGameSystem::OnRestoreAllSystems()
 T IGameSystem::OnSaveAllSystems()
 T IGameSystem::PostInitAllSystems()
 T IGameSystem::PreClientUpdateAllSystems()
 T IGameSystem::Remove(IGameSystem*)
 T IGameSystem::ShutdownAllSystems()
 T IGameSystem::~IGameSystem()
 T IGameSystemPerFrame::~IGameSystemPerFrame()
 T IHalloweenGiftSpawnAutoList::IHalloweenGiftSpawnAutoList(bool)
 T IHalloweenGiftSpawnAutoList::~IHalloweenGiftSpawnAutoList()
 T IHealthKitAutoList::IHealthKitAutoList(bool)
 T IHealthKitAutoList::~IHealthKitAutoList()
 T IInfoPowerupSpawnAutoList::IInfoPowerupSpawnAutoList(bool)
 T IInfoPowerupSpawnAutoList::~IInfoPowerupSpawnAutoList()
 T IIntention::IsHindrance(INextBot const*, CBaseEntity*) const
 T IIntention::IsPositionAllowed(INextBot const*, Vector const&) const
 T IIntention::Reset()
 T IIntention::SelectMoreDangerousThreat(INextBot const*, CBaseCombatCharacter const*, CKnownEntity const*, CKnownEntity const*) const
 T IIntention::SelectTargetPoint(INextBot const*, CBaseCombatCharacter const*) const
 T IIntention::ShouldAttack(INextBot const*, CKnownEntity const*) const
 T IIntention::ShouldHurry(INextBot const*) const
 T IIntention::ShouldPickUp(INextBot const*, CBaseEntity*) const
 T IIntention::ShouldRetreat(INextBot const*) const
 T IIntention::Update()
 T IIntention::~IIntention()
 T IInventoryUpdateListener::PostSOUpdate(CSteamID const&, GCSDK::ESOCacheEvent)
 T IInventoryUpdateListener::PreSOUpdate(CSteamID const&, GCSDK::ESOCacheEvent)
 T IInventoryUpdateListener::SOCacheSubscribed(CSteamID const&, GCSDK::ESOCacheEvent)
 T IInventoryUpdateListener::SOCacheUnsubscribed(CSteamID const&, GCSDK::ESOCacheEvent)
 T IInventoryUpdateListener::SOCreated(CSteamID const&, GCSDK::CSharedObject const*, GCSDK::ESOCacheEvent)
 T IInventoryUpdateListener::SODestroyed(CSteamID const&, GCSDK::CSharedObject const*, GCSDK::ESOCacheEvent)
 T IInventoryUpdateListener::SOUpdated(CSteamID const&, GCSDK::CSharedObject const*, GCSDK::ESOCacheEvent)
 T IKeyValuesDumpContextAsText::KvEndKey(KeyValues*, int)
 T IKeyValuesDumpContextAsText::KvWriteIndent(int)
 T IKeyValuesDumpContextAsText::KvWriteValue(KeyValues*, int)
 T ILocalize::ConstructStringVArgsInternal(wchar_t*, int, wchar_t const*, int, char*)
 T ILocalize::ConvertUnicodeToANSI(wchar_t const*, char*, int)
 T ILocomotion::AdjustPosture(Vector const&)
 T ILocomotion::Approach(Vector const&, float)
 T ILocomotion::ClearStuckStatus(char const*)
 T ILocomotion::ClimbLadder(CNavLadder const*, CNavArea const*)
 T ILocomotion::ClimbUpToLedge(Vector const&, Vector const&, CBaseEntity const*)
 T ILocomotion::DescendLadder(CNavLadder const*, CNavArea const*)
 T ILocomotion::DriveTo(Vector const&)
 T ILocomotion::FaceTowards(Vector const&)
 T ILocomotion::GetDeathDropHeight() const
 T ILocomotion::GetDesiredLean() const
 T ILocomotion::GetDesiredSpeed() const
 T ILocomotion::GetFeet() const
 T ILocomotion::GetGround() const
 T ILocomotion::GetGroundMotionVector() const
 T ILocomotion::GetGroundNormal() const
 T ILocomotion::GetGroundSpeed() const
 T ILocomotion::GetMaxAcceleration() const
 T ILocomotion::GetMaxDeceleration() const
 T ILocomotion::GetMaxJumpHeight() const
 T ILocomotion::GetMotionVector() const
 T ILocomotion::GetRunSpeed() const
 T ILocomotion::GetSpeed() const
 T ILocomotion::GetSpeedLimit() const
 T ILocomotion::GetStepHeight() const
 T ILocomotion::GetStuckDuration() const
 T ILocomotion::GetTraversableSlopeLimit() const
 T ILocomotion::GetVelocity() const
 T ILocomotion::GetWalkSpeed() const
 T ILocomotion::HasPotentialGap(Vector const&, Vector const&, float*) const
 T ILocomotion::ILocomotion(INextBot*)
 T ILocomotion::IsAbleToAutoCenterOnLadder() const
 T ILocomotion::IsAbleToClimb() const
 T ILocomotion::IsAbleToJumpAcrossGaps() const
 T ILocomotion::IsAreaTraversable(CNavArea const*) const
 T ILocomotion::IsAscendingOrDescendingLadder() const
 T ILocomotion::IsAttemptingToMove() const
 T ILocomotion::IsClimbingOrJumping() const
 T ILocomotion::IsClimbingUpToLedge() const
 T ILocomotion::IsEntityTraversable(CBaseEntity*, ILocomotion::TraverseWhenType) const
 T ILocomotion::IsGap(Vector const&, Vector const&) const
 T ILocomotion::IsJumpingAcrossGap() const
 T ILocomotion::IsOnGround() const
 T ILocomotion::IsPotentiallyTraversable(Vector const&, Vector const&, ILocomotion::TraverseWhenType, float*) const
 T ILocomotion::IsRunning() const
 T ILocomotion::IsScrambling() const
 T ILocomotion::IsStuck() const
 T ILocomotion::IsUsingLadder() const
 T ILocomotion::Jump()
 T ILocomotion::JumpAcrossGap(Vector const&, Vector const&)
 T ILocomotion::OnLandOnGround(CBaseEntity*)
 T ILocomotion::OnLeaveGround(CBaseEntity*)
 T ILocomotion::Reset()
 T ILocomotion::Run()
 T ILocomotion::SetDesiredLean(QAngle const&)
 T ILocomotion::SetDesiredSpeed(float)
 T ILocomotion::SetSpeedLimit(float)
 T ILocomotion::ShouldCollideWith(CBaseEntity const*) const
 T ILocomotion::Stop()
 T ILocomotion::StuckMonitor()
 T ILocomotion::Update()
 T ILocomotion::Walk()
 T ILocomotion::~ILocomotion()
 T IMatchGroupDescription::InitServerSettingsForMatch(CTFGSLobby const*) const
 T IMerasmusAutoList::IMerasmusAutoList(bool)
 T IMerasmusAutoList::~IMerasmusAutoList()
 T IMinigameAutoList::IMinigameAutoList(bool)
 T IMinigameAutoList::~IMinigameAutoList()
 T INextBot::BeginUpdate()
 T INextBot::ClearImmobileStatus()
 T INextBot::DebugConColorMsg(NextBotDebugType, Color const&, char const*, ...)
 T INextBot::DisplayDebugText(char const*) const
 T INextBot::EndUpdate()
 T INextBot::FirstContainedResponder() const
 T INextBot::GetBodyInterface() const
 T INextBot::GetCurrentPath() const
 T INextBot::GetDebugIdentifier() const
 T INextBot::GetImmobileDuration() const
 T INextBot::GetImmobileSpeedThreshold() const
 T INextBot::GetIntentionInterface() const
 T INextBot::GetLocomotionInterface() const
 T INextBot::GetNextBotCombatCharacter() const
 T INextBot::GetPosition() const
 T INextBot::GetRangeSquaredTo(CBaseEntity*) const
 T INextBot::GetRangeSquaredTo(Vector const&) const
 T INextBot::GetRangeTo(CBaseEntity*) const
 T INextBot::GetRangeTo(Vector const&) const
 T INextBot::GetVisionInterface() const
 T INextBot::INextBot()
 T INextBot::IsAbleToBlockMovementOf(INextBot const*) const
 T INextBot::IsAbleToBreak(CBaseEntity const*) const
 T INextBot::IsAbleToClimbOnto(CBaseEntity const*) const
 T INextBot::IsDebugFilterMatch(char const*) const
 T INextBot::IsDebugging(unsigned int) const
 T INextBot::IsEnemy(CBaseEntity const*) const
 T INextBot::IsFriend(CBaseEntity const*) const
 T INextBot::IsImmobile() const
 T INextBot::IsRangeGreaterThan(CBaseEntity*, float) const
 T INextBot::IsRangeGreaterThan(Vector const&, float) const
 T INextBot::IsRangeLessThan(CBaseEntity*, float) const
 T INextBot::IsRangeLessThan(Vector const&, float) const
 T INextBot::IsRemovedOnReset() const
 T INextBot::IsSelf(CBaseEntity const*) const
 T INextBot::NextContainedResponder(INextBotEventResponder*) const
 T INextBot::NotifyPathDestruction(PathFollower const*)
 T INextBot::RegisterComponent(INextBotComponent*)
 T INextBot::Reset()
 T INextBot::SetCurrentPath(PathFollower const*)
 T INextBot::SetPosition(Vector const&)
 T INextBot::ShouldTouch(CBaseEntity const*) const
 T INextBot::Update()
 T INextBot::UpdateImmobileStatus()
 T INextBot::Upkeep()
 T INextBot::~INextBot()
 T INextBotComponent::GetBot() const
 T INextBotComponent::INextBotComponent(INextBot*)
 T INextBotComponent::Reset()
 T INextBotComponent::Upkeep()
 T INextBotComponent::~INextBotComponent()
 T INextBotEventResponder::FirstContainedResponder() const
 T INextBotEventResponder::NextContainedResponder(INextBotEventResponder*) const
 T INextBotEventResponder::OnActorEmoted(CBaseCombatCharacter*, int)
 T INextBotEventResponder::OnAnimationActivityComplete(int)
 T INextBotEventResponder::OnAnimationActivityInterrupted(int)
 T INextBotEventResponder::OnAnimationEvent(animevent_t*)
 T INextBotEventResponder::OnBlinded(CBaseEntity*)
 T INextBotEventResponder::OnCommandApproach(CBaseEntity*)
 T INextBotEventResponder::OnCommandApproach(Vector const&, float)
 T INextBotEventResponder::OnCommandAttack(CBaseEntity*)
 T INextBotEventResponder::OnCommandPause(float)
 T INextBotEventResponder::OnCommandResume()
 T INextBotEventResponder::OnCommandRetreat(CBaseEntity*, float)
 T INextBotEventResponder::OnCommandString(char const*)
 T INextBotEventResponder::OnContact(CBaseEntity*, CGameTrace*)
 T INextBotEventResponder::OnDrop(CBaseEntity*)
 T INextBotEventResponder::OnIgnite()
 T INextBotEventResponder::OnInjured(CTakeDamageInfo const&)
 T INextBotEventResponder::OnKilled(CTakeDamageInfo const&)
 T INextBotEventResponder::OnLandOnGround(CBaseEntity*)
 T INextBotEventResponder::OnLeaveGround(CBaseEntity*)
 T INextBotEventResponder::OnLose()
 T INextBotEventResponder::OnLostSight(CBaseEntity*)
 T INextBotEventResponder::OnModelChanged()
 T INextBotEventResponder::OnMoveToFailure(Path const*, MoveToFailureType)
 T INextBotEventResponder::OnMoveToSuccess(Path const*)
 T INextBotEventResponder::OnNavAreaChanged(CNavArea*, CNavArea*)
 T INextBotEventResponder::OnOtherKilled(CBaseCombatCharacter*, CTakeDamageInfo const&)
 T INextBotEventResponder::OnPickUp(CBaseEntity*, CBaseCombatCharacter*)
 T INextBotEventResponder::OnPostureChanged()
 T INextBotEventResponder::OnShoved(CBaseEntity*)
 T INextBotEventResponder::OnSight(CBaseEntity*)
 T INextBotEventResponder::OnSound(CBaseEntity*, Vector const&, KeyValues*)
 T INextBotEventResponder::OnSpokeConcept(CBaseCombatCharacter*, char const*, AI_Response*)
 T INextBotEventResponder::OnStuck()
 T INextBotEventResponder::OnTerritoryCaptured(int)
 T INextBotEventResponder::OnTerritoryContested(int)
 T INextBotEventResponder::OnTerritoryLost(int)
 T INextBotEventResponder::OnUnStuck()
 T INextBotEventResponder::OnWeaponFired(CBaseCombatCharacter*, CBaseCombatWeapon*)
 T INextBotEventResponder::OnWin()
 T INextBotReply::OnFail(INextBot*, INextBotReply::FailureReason)
 T IParticleSystemQuery::GetCollisionGroupFromName(char const*)
 T IParticleSystemQuery::GetControllingObjectHitBoxInfo(CParticleCollection*, int, int, ModelHitBoxInfo_t*)
 T IParticleSystemQuery::GetLocalPlayerEyeVectors(Vector*, Vector*, Vector*)
 T IParticleSystemQuery::GetLocalPlayerPos()
 T IParticleSystemQuery::IsPointInControllingObjectHitBox(CParticleCollection*, int, Vector, bool)
 T IParticleSystemQuery::MovePointInsideControllingObject(CParticleCollection*, void*, Vector*)
 T IParticleSystemQuery::SetUpLightingEnvironment(Vector const&)
 T IPasstimeBallSpawnAutoList::IPasstimeBallSpawnAutoList(bool)
 T IPasstimeBallSpawnAutoList::~IPasstimeBallSpawnAutoList()
 T IPhysicsPropAutoList::IPhysicsPropAutoList(bool)
 T IPhysicsPropAutoList::~IPhysicsPropAutoList()
 T IPopulationSpawner::GetClass(int)
 T IPopulationSpawner::GetClassIcon(int)
 T IPopulationSpawner::GetHealth(int)
 T IPopulationSpawner::HasAttribute(CTFBot::AttributeType, int)
 T IPopulationSpawner::IsMiniBoss(int)
 T IPopulationSpawner::IsVarious()
 T IPopulationSpawner::IsWhereRequired() const
 T IPopulationSpawner::ParseSpawner(IPopulator*, KeyValues*)
 T IPopulator::HasEventChangeAttributes(char const*) const
 T IPopulator::OnPlayerKilled(CTFPlayer*)
 T IPopulator::PostInitialize()
 T IPopulator::UnpauseSpawning()
 T IPopulator::Update()
 T IPopulator::~IPopulator()
 T IPredictionSystem::~IPredictionSystem()
 T IProgressionDesc::GetLevelForExperience(unsigned int) const
 T IProgressionDesc::GetLevelForSteamID(CSteamID const&) const
 T IRobotDestructionGroupAutoList::IRobotDestructionGroupAutoList(bool)
 T IRobotDestructionGroupAutoList::~IRobotDestructionGroupAutoList()
 T ISchemaAttributeType::BSupportsGameplayModificationAndNetworking() const
 T ISchemaAttributeTypeBase<CAttribute_DynamicRecipeComponent>::ConvertEconAttributeValueToByteStream(attribute_data_union_t const&, std::string*) const
 T ISchemaAttributeTypeBase<CAttribute_DynamicRecipeComponent>::GetTypeUniqueIdentifier() const
 T ISchemaAttributeTypeBase<CAttribute_DynamicRecipeComponent>::InitializeNewEconAttributeValue(attribute_data_union_t*) const
 T ISchemaAttributeTypeBase<CAttribute_DynamicRecipeComponent>::LoadByteStreamToEconAttributeValue(CEconItem*, CEconItemAttributeDefinition const*, std::string const&) const
 T ISchemaAttributeTypeBase<CAttribute_DynamicRecipeComponent>::LoadEconAttributeValue(CEconItem*, CEconItemAttributeDefinition const*, attribute_data_union_t const&) const
 T ISchemaAttributeTypeBase<CAttribute_DynamicRecipeComponent>::OnIterateAttributeValue(IEconItemAttributeIterator*, CEconItemAttributeDefinition const*, attribute_data_union_t const&) const
 T ISchemaAttributeTypeBase<CAttribute_DynamicRecipeComponent>::UnloadEconAttributeValue(attribute_data_union_t*) const
 T ISchemaAttributeTypeBase<CAttribute_ItemSlotCriteria>::ConvertEconAttributeValueToByteStream(attribute_data_union_t const&, std::string*) const
 T ISchemaAttributeTypeBase<CAttribute_ItemSlotCriteria>::GetTypeUniqueIdentifier() const
 T ISchemaAttributeTypeBase<CAttribute_ItemSlotCriteria>::InitializeNewEconAttributeValue(attribute_data_union_t*) const
 T ISchemaAttributeTypeBase<CAttribute_ItemSlotCriteria>::LoadByteStreamToEconAttributeValue(CEconItem*, CEconItemAttributeDefinition const*, std::string const&) const
 T ISchemaAttributeTypeBase<CAttribute_ItemSlotCriteria>::LoadEconAttributeValue(CEconItem*, CEconItemAttributeDefinition const*, attribute_data_union_t const&) const
 T ISchemaAttributeTypeBase<CAttribute_ItemSlotCriteria>::OnIterateAttributeValue(IEconItemAttributeIterator*, CEconItemAttributeDefinition const*, attribute_data_union_t const&) const
 T ISchemaAttributeTypeBase<CAttribute_ItemSlotCriteria>::UnloadEconAttributeValue(attribute_data_union_t*) const
 T ISchemaAttributeTypeBase<CAttribute_String>::ConvertEconAttributeValueToByteStream(attribute_data_union_t const&, std::string*) const
 T ISchemaAttributeTypeBase<CAttribute_String>::GetTypeUniqueIdentifier() const
 T ISchemaAttributeTypeBase<CAttribute_String>::InitializeNewEconAttributeValue(attribute_data_union_t*) const
 T ISchemaAttributeTypeBase<CAttribute_String>::LoadByteStreamToEconAttributeValue(CEconItem*, CEconItemAttributeDefinition const*, std::string const&) const
 T ISchemaAttributeTypeBase<CAttribute_String>::LoadEconAttributeValue(CEconItem*, CEconItemAttributeDefinition const*, attribute_data_union_t const&) const
 T ISchemaAttributeTypeBase<CAttribute_String>::OnIterateAttributeValue(IEconItemAttributeIterator*, CEconItemAttributeDefinition const*, attribute_data_union_t const&) const
 T ISchemaAttributeTypeBase<CAttribute_String>::UnloadEconAttributeValue(attribute_data_union_t*) const
 T ISchemaAttributeTypeBase<CAttribute_WorldItemPlacement>::ConvertEconAttributeValueToByteStream(attribute_data_union_t const&, std::string*) const
 T ISchemaAttributeTypeBase<CAttribute_WorldItemPlacement>::GetTypeUniqueIdentifier() const
 T ISchemaAttributeTypeBase<CAttribute_WorldItemPlacement>::InitializeNewEconAttributeValue(attribute_data_union_t*) const
 T ISchemaAttributeTypeBase<CAttribute_WorldItemPlacement>::LoadByteStreamToEconAttributeValue(CEconItem*, CEconItemAttributeDefinition const*, std::string const&) const
 T ISchemaAttributeTypeBase<CAttribute_WorldItemPlacement>::LoadEconAttributeValue(CEconItem*, CEconItemAttributeDefinition const*, attribute_data_union_t const&) const
 T ISchemaAttributeTypeBase<CAttribute_WorldItemPlacement>::OnIterateAttributeValue(IEconItemAttributeIterator*, CEconItemAttributeDefinition const*, attribute_data_union_t const&) const
 T ISchemaAttributeTypeBase<CAttribute_WorldItemPlacement>::UnloadEconAttributeValue(attribute_data_union_t*) const
 T ISchemaAttributeTypeBase<float>::ConvertEconAttributeValueToByteStream(attribute_data_union_t const&, std::string*) const
 T ISchemaAttributeTypeBase<float>::GetTypeUniqueIdentifier() const
 T ISchemaAttributeTypeBase<float>::InitializeNewEconAttributeValue(attribute_data_union_t*) const
 T ISchemaAttributeTypeBase<float>::LoadByteStreamToEconAttributeValue(CEconItem*, CEconItemAttributeDefinition const*, std::string const&) const
 T ISchemaAttributeTypeBase<float>::LoadEconAttributeValue(CEconItem*, CEconItemAttributeDefinition const*, attribute_data_union_t const&) const
 T ISchemaAttributeTypeBase<float>::OnIterateAttributeValue(IEconItemAttributeIterator*, CEconItemAttributeDefinition const*, attribute_data_union_t const&) const
 T ISchemaAttributeTypeBase<float>::UnloadEconAttributeValue(attribute_data_union_t*) const
 T ISchemaAttributeTypeBase<unsigned int>::ConvertEconAttributeValueToByteStream(attribute_data_union_t const&, std::string*) const
 T ISchemaAttributeTypeBase<unsigned int>::GetTypeUniqueIdentifier() const
 T ISchemaAttributeTypeBase<unsigned int>::InitializeNewEconAttributeValue(attribute_data_union_t*) const
 T ISchemaAttributeTypeBase<unsigned int>::LoadByteStreamToEconAttributeValue(CEconItem*, CEconItemAttributeDefinition const*, std::string const&) const
 T ISchemaAttributeTypeBase<unsigned int>::LoadEconAttributeValue(CEconItem*, CEconItemAttributeDefinition const*, attribute_data_union_t const&) const
 T ISchemaAttributeTypeBase<unsigned int>::OnIterateAttributeValue(IEconItemAttributeIterator*, CEconItemAttributeDefinition const*, attribute_data_union_t const&) const
 T ISchemaAttributeTypeBase<unsigned int>::UnloadEconAttributeValue(attribute_data_union_t*) const
 T ISchemaAttributeTypeBase<unsigned long long>::ConvertEconAttributeValueToByteStream(attribute_data_union_t const&, std::string*) const
 T ISchemaAttributeTypeBase<unsigned long long>::GetTypeUniqueIdentifier() const
 T ISchemaAttributeTypeBase<unsigned long long>::InitializeNewEconAttributeValue(attribute_data_union_t*) const
 T ISchemaAttributeTypeBase<unsigned long long>::LoadByteStreamToEconAttributeValue(CEconItem*, CEconItemAttributeDefinition const*, std::string const&) const
 T ISchemaAttributeTypeBase<unsigned long long>::LoadEconAttributeValue(CEconItem*, CEconItemAttributeDefinition const*, attribute_data_union_t const&) const
 T ISchemaAttributeTypeBase<unsigned long long>::OnIterateAttributeValue(IEconItemAttributeIterator*, CEconItemAttributeDefinition const*, attribute_data_union_t const&) const
 T ISchemaAttributeTypeBase<unsigned long long>::UnloadEconAttributeValue(attribute_data_union_t*) const
 T ISearchSurroundingAreasFunctor::IterateAdjacentAreas(CNavArea*, CNavArea*, float)
 T ISearchSurroundingAreasFunctor::PostSearch()
 T ISearchSurroundingAreasFunctor::ShouldSearch(CNavArea*, CNavArea*, float)
 T ITFBotHintEntityAutoList::ITFBotHintEntityAutoList(bool)
 T ITFBotHintEntityAutoList::~ITFBotHintEntityAutoList()
 T ITFChargeUpWeapon::GetCurrentCharge()
 T ITFFlameEntityAutoList::ITFFlameEntityAutoList(bool)
 T ITFFlameEntityAutoList::~ITFFlameEntityAutoList()
 T ITFGenericBomb::ITFGenericBomb(bool)
 T ITFGenericBomb::~ITFGenericBomb()
 T ITFMerasmusTrickOrTreatProp::ITFMerasmusTrickOrTreatProp(bool)
 T ITFMerasmusTrickOrTreatProp::~ITFMerasmusTrickOrTreatProp()
 T ITFPumpkinBomb::ITFPumpkinBomb(bool)
 T ITFPumpkinBomb::~ITFPumpkinBomb()
 T ITFTargetDummy::ITFTargetDummy(bool)
 T ITFTargetDummy::~ITFTargetDummy()
 T ITFTeamSpawnAutoList::ITFTeamSpawnAutoList(bool)
 T ITFTeamSpawnAutoList::~ITFTeamSpawnAutoList()
 T ITFTeamTrainWatcher::ITFTeamTrainWatcher(bool)
 T ITFTeamTrainWatcher::~ITFTeamTrainWatcher()
 T ITFTeleportLocationAutoList::ITFTeleportLocationAutoList(bool)
 T ITFTeleportLocationAutoList::~ITFTeleportLocationAutoList()
 T ITriggerAreaCaptureAutoList::ITriggerAreaCaptureAutoList(bool)
 T ITriggerAreaCaptureAutoList::~ITriggerAreaCaptureAutoList()
 T ITriggerHurtAutoList::ITriggerHurtAutoList(bool)
 T ITriggerHurtAutoList::~ITriggerHurtAutoList()
 T ITriggerPlayerRespawnOverride::ITriggerPlayerRespawnOverride(bool)
 T ITriggerPlayerRespawnOverride::~ITriggerPlayerRespawnOverride()
 T IVision::AddKnownEntity(CBaseEntity*)
 T IVision::CollectKnownEntities(CUtlVector<CKnownEntity, CUtlMemory<CKnownEntity, int> >*)
 T IVision::CollectPotentiallyVisibleEntities(CUtlVector<CBaseEntity*, CUtlMemory<CBaseEntity*, int> >*)
 T IVision::ForEachKnownEntity(IVision::IForEachKnownEntity&)
 T IVision::ForgetAllKnownEntities()
 T IVision::ForgetEntity(CBaseEntity*)
 T IVision::GetClosestKnown(INextBotEntityFilter const&) const
 T IVision::GetClosestKnown(int) const
 T IVision::GetDefaultFieldOfView() const
 T IVision::GetFieldOfView() const
 T IVision::GetKnown(CBaseEntity const*) const
 T IVision::GetKnownCount(int, bool, float) const
 T IVision::GetMaxVisionRange() const
 T IVision::GetMinRecognizeTime() const
 T IVision::GetPrimaryKnownThreat(bool) const
 T IVision::GetTimeSinceVisible(int) const
 T IVision::IVision(INextBot*)
 T IVision::IsAbleToSee(CBaseEntity*, IVision::FieldOfViewCheckType, Vector*) const
 T IVision::IsAbleToSee(Vector const&, IVision::FieldOfViewCheckType) const
 T IVision::IsIgnored(CBaseEntity*) const
 T IVision::IsInFieldOfView(CBaseEntity*) const
 T IVision::IsInFieldOfView(Vector const&) const
 T IVision::IsLineOfSightClear(Vector const&) const
 T IVision::IsLineOfSightClearToEntity(CBaseEntity const*, Vector*) const
 T IVision::IsLookingAt(CBaseCombatCharacter const*, float) const
 T IVision::IsLookingAt(Vector const&, float) const
 T IVision::IsVisibleEntityNoticed(CBaseEntity*) const
 T IVision::Reset()
 T IVision::SetFieldOfView(float)
 T IVision::Update()
 T IVision::UpdateKnownEntities()
 T IVision::~IVision()
 T IZombieAutoList::IZombieAutoList(bool)
 T IZombieAutoList::~IZombieAutoList()
 T IceKey::IceKey(int)
 T IceKey::blockSize() const
 T IceKey::decrypt(unsigned char const*, unsigned char*) const
 T IceKey::scheduleBuild(unsigned short*, int, int const*)
 T IceKey::set(unsigned char const*)
 T IceKey::~IceKey()
 T IgnitePlayer()
 T IgnoreActorsTraceFilterFunction(IHandleEntity*, int)
 T InAchievementZone(CBaseEntity*)
 T InNoGrenadeZone(CBaseEntity*)
 T IndexModelSequences(CStudioHdr*)
 T InitBodyQue()
 T InitPose(CStudioHdr const*, Vector*, Quaternion*, int)
 T InitializeCvars()
 T InstallGameRules()
 T InstancedAutoGeneratedSoundScene(CBaseFlex*, char const*, CHandle<CBaseEntity>*)
 T InstancedScriptedScene(CBaseFlex*, char const*, CHandle<CBaseEntity>*, float, bool, AI_Response*, bool, IRecipientFilter*)
 T InterfaceReg::InterfaceReg(void* (*)(), char const*)
 T InternalCalculateObjectCost(int)
 T InternalSendPropArray(int, int, char const*, int (*)(void const*, int))
 T Internal_Coroutine_Continue(int, char const*, char const*)
 T Interpolator_CurveInterpolate(int, Vector const&, Vector const&, Vector const&, Vector const&, float, Vector&)
 T Interpolator_CurveInterpolatorsForType(int, int&, int&)
 T IntersectRayWithBox(Ray_t const&, Vector const&, Vector const&, float, CBaseTrace*, float*)
 T IntersectRayWithBox(Vector const&, Vector const&, Vector const&, Vector const&, float, BoxTraceInfo_t*)
 T IntersectRayWithBox(Vector const&, Vector const&, Vector const&, Vector const&, float, CBaseTrace*, float*)
 T IntersectRayWithOBB(Ray_t const&, matrix3x4_t const&, Vector const&, Vector const&, float, CBaseTrace*)
 T IntersectRayWithOBB(Vector const&, Vector const&, matrix3x4_t const&, Vector const&, Vector const&, float, CBaseTrace*)
 T IntersectRayWithTriangle(Ray_t const&, Vector const&, Vector const&, Vector const&, bool)
 T IntervalTimer::Now() const
 T InvalidateQueryCache()
 T InvalidateUniqueId(UniqueId_t*)
 T InventoryManager()
 T IsBoxIntersectingBox(Vector const&, Vector const&, Vector const&, Vector const&)
 T IsBoxIntersectingRay(Vector const&, Vector const&, Vector const&, Vector const&, float)
 T IsBoxIntersectingSphere(Vector const&, Vector const&, Vector const&, float)
 T IsEntityWalkable(CBaseEntity*, unsigned int)
 T IsExplosionTraceBlocked(CGameTrace*)
 T IsHeightDifferenceValid(float, float, float, float)
 T IsHidingSpotInCover(Vector const&)
 T IsInCommentaryMode()
 T IsListeningToCommentary()
 T IsOBBIntersectingOBB(Vector const&, QAngle const&, Vector const&, Vector const&, Vector const&, QAngle const&, Vector const&, Vector const&, float)
 T IsPointInBox(Vector const&, Vector const&, Vector const&)
 T IsQuestItemReadyToTurnIn(IEconItemInterface const*)
 T IsQuestItemUnidentified(CEconItem const*)
 T IsRayIntersectingSphere(Vector const&, Vector const&, Vector const&, float, float)
 T IsRunningScriptedScene(CBaseFlex*, bool)
 T IsRunningScriptedSceneAndNotPaused(CBaseFlex*, bool)
 T IsRunningScriptedSceneWithSpeechAndNotPaused(CBaseFlex*, bool)
 T IsSpaceToSpawnHere(Vector const&)
 T IsStairs(Vector const&, Vector const&, StairTestType)
 T IsStaticPointEntity(CBaseEntity*)
 T IsTakingTriggerHurtDamageAtPoint(Vector const&)
 T IsUniqueIdEqual(UniqueId_t const&, UniqueId_t const&)
 T IsWalkableTraceLineClear(Vector const&, Vector const&, unsigned int)
 T ItemGeneration()
 T ItemSystem()
 T IterateActivePhysicsEntities(void (*)(CBaseEntity*))
 T JarExplode(int, CTFPlayer*, CBaseEntity*, CBaseEntity*, Vector const&, int, float, ETFCond, float, char const*)
 T JumpConnector::TryToConnect(CNavArea*, CNavArea*, CUtlVectorUltraConservative<NavConnect, CUtlVectorUltraConservativeAllocator> const*, NavDirType)
 T JumpConnector::TryToConnect(CNavArea*, CUtlVectorUltraConservative<NavConnect, CUtlVectorUltraConservativeAllocator> const*, CUtlVectorUltraConservative<NavConnect, CUtlVectorUltraConservativeAllocator> const*, NavDirType)
 T JumpConnector::operator()(CNavArea*)
 T KeyValues::AddSubKey(KeyValues*)
 T KeyValues::Clear()
 T KeyValues::CreateKeyUsingKnownLastChild(char const*, KeyValues*)
 T KeyValues::CreateNewKey()
 T KeyValues::Dump(IKeyValuesDumpContext*, int, bool)
 T KeyValues::FindKey(char const*, bool)
 T KeyValues::GetBool(char const*, bool, bool*)
 T KeyValues::GetColor(char const*)
 T KeyValues::GetDataType(char const*)
 T KeyValues::GetFirstTrueSubKey()
 T KeyValues::GetFirstValue()
 T KeyValues::GetFloat(char const*, float)
 T KeyValues::GetInt(char const*, int)
 T KeyValues::GetName() const
 T KeyValues::GetNextTrueSubKey()
 T KeyValues::GetNextValue()
 T KeyValues::GetString(char const*, char const*)
 T KeyValues::GetStringForSymbolClassic(int)
 T KeyValues::GetSymbolForStringClassic(char const*, bool)
 T KeyValues::GetUint64(char const*, unsigned long long)
 T KeyValues::GetWString(char const*, wchar_t const*)
 T KeyValues::KeyValues(char const*)
 T KeyValues::KeyValues(char const*, char const*, char const*)
 T KeyValues::LoadFromBuffer(char const*, CUtlBuffer&, IBaseFileSystem*, char const*)
 T KeyValues::LoadFromBuffer(char const*, char const*, IBaseFileSystem*, char const*)
 T KeyValues::LoadFromFile(IBaseFileSystem*, char const*, char const*, bool)
 T KeyValues::MakeCopy() const
 T KeyValues::ParseIncludedKeys(char const*, char const*, IBaseFileSystem*, char const*, CUtlVector<KeyValues*, CUtlMemory<KeyValues*, int> >&)
 T KeyValues::ReadAsBinary(CUtlBuffer&, int)
 T KeyValues::ReadToken(CUtlBuffer&, bool&, bool&)
 T KeyValues::RecursiveLoadFromBuffer(char const*, CUtlBuffer&)
 T KeyValues::RecursiveMergeKeyValues(KeyValues*)
 T KeyValues::RecursiveSaveToFile(CUtlBuffer&, int, bool, bool)
 T KeyValues::RecursiveSaveToFile(IBaseFileSystem*, void*, CUtlBuffer*, int, bool, bool)
 T KeyValues::RemoveEverything()
 T KeyValues::RemoveSubKey(KeyValues*)
 T KeyValues::SaveKeyToFile(KeyValues*, IBaseFileSystem*, void*, CUtlBuffer*, int, bool, bool)
 T KeyValues::SaveToFile(IBaseFileSystem*, char const*, char const*, bool, bool, bool)
 T KeyValues::SetColor(char const*, Color)
 T KeyValues::SetFloat(char const*, float)
 T KeyValues::SetInt(char const*, int)
 T KeyValues::SetName(char const*)
 T KeyValues::SetString(char const*, char const*)
 T KeyValues::SetUint64(char const*, unsigned long long)
 T KeyValues::SetWString(char const*, wchar_t const*)
 T KeyValues::WriteConvertedString(IBaseFileSystem*, void*, CUtlBuffer*, char const*)
 T KeyValues::deleteThis()
 T KeyValues::operator delete(void*)
 T KeyValues::operator new(unsigned long)
 T KillTargets(char const*)
 T Kochanek_Bartels_Spline(float, float, float, Vector const&, Vector const&, Vector const&, Vector const&, float, Vector&)
 T Kochanek_Bartels_Spline_NormalizeX(float, float, float, Vector const&, Vector const&, Vector const&, Vector const&, float, Vector&)
 T LadderEndSearch(Vector const*, NavDirType)
 T LinkChild(CBaseEntity*, CBaseEntity*)
 T LoadObjectInfos(IBaseFileSystem*)
 T LookupActivity(CStudioHdr*, char const*)
 T LookupSequence(CStudioHdr*, char const*)
 T LookupWeaponInfoSlot(char const*)
 T MD5Final(unsigned char*, MD5Context_t*)
 T MD5Init(MD5Context_t*)
 T MD5Update(MD5Context_t*, unsigned char const*, unsigned int)
 T MD5_PseudoRandom(unsigned int)
 T MPForceCameraCallback(IConVar*, char const*, float)
 T MPTimeLimitCallback(IConVar*, char const*, float)
 T MVMSkillChangedCallback(IConVar*, char const*, float)
 T MakeSniperSpots(CNavArea*)
 T MannVsMachineStats_GetAcquiredCredits(int, bool)
 T MannVsMachineStats_GetCurrentWave()
 T MannVsMachineStats_GetDroppedCredits(int)
 T MannVsMachineStats_GetInstance()
 T MannVsMachineStats_GetMissedCredits(int)
 T MannVsMachineStats_Init()
 T MannVsMachineStats_PlayerEvent_BoughtInstantRespawn(CTFPlayer*, int)
 T MannVsMachineStats_PlayerEvent_Died(CTFPlayer*)
 T MannVsMachineStats_PlayerEvent_PickedUpCredits(CTFPlayer*, unsigned int, int)
 T MannVsMachineStats_PlayerEvent_PointsChanged(CTFPlayer*, int)
 T MannVsMachineStats_PlayerEvent_Upgraded(CTFPlayer*, unsigned short, unsigned short, unsigned short, short, bool)
 T MannVsMachineStats_ResetPlayerEvents(CTFPlayer*)
 T MannVsMachineStats_RoundEvent_CreditsDropped(unsigned int, int)
 T MannVsMachineStats_SetPopulationFile(char const*)
 T MapCycleFileChangedCallback(IConVar*, char const*, float)
 T MapEntity_GetNumKeysInEntity(char const*)
 T MapEntity_ParseAllEntities(char const*, IMapEntityFilter*, bool)
 T MapEntity_ParseEntity(CBaseEntity*&, char const*, IMapEntityFilter*)
 T MapEntity_ParseToken(char const*, char*)
 T MapEntity_PrecacheEntity(char const*, int&)
 T MapEntity_SkipToNextEntity(char const*, char*)
 T MathLib_Init(float, float, float, int, bool, bool, bool, bool)
 T MatrixAngles(matrix3x4_t const&, Quaternion&, Vector&)
 T MatrixAngles(matrix3x4_t const&, float*)
 T MatrixBuildRotateZ(VMatrix&, float)
 T MatrixBuildRotationAboutAxis(VMatrix&, Vector const&, float)
 T MatrixBuildRotationAboutAxis(Vector const&, float, matrix3x4_t&)
 T MatrixCopy(matrix3x4_t const&, matrix3x4_t&)
 T MatrixFromAngles(QAngle const&, VMatrix&)
 T MatrixGetColumn(matrix3x4_t const&, int, Vector&)
 T MatrixInverseTR(VMatrix const&, VMatrix&)
 T MatrixInvert(matrix3x4_t const&, matrix3x4_t&)
 T MatrixMultiply(VMatrix const&, VMatrix const&, VMatrix&)
 T MatrixSetColumn(Vector const&, int, matrix3x4_t&)
 T MatrixSetIdentity(VMatrix&)
 T MatrixToAngles(VMatrix const&, QAngle&)
 T MerasmusModifyDamage(CTakeDamageInfo const&)
 T MergeDefinitionPrefab(KeyValues*, KeyValues*)
 T MessageEnd()
 T MessageWriteAngles(QAngle const&)
 T MessageWriteBits(void const*, int)
 T MessageWriteBool(bool)
 T MessageWriteByte(int)
 T MessageWriteChar(int)
 T MessageWriteFloat(float)
 T MessageWriteLong(int)
 T MessageWriteShort(int)
 T MessageWriteString(char const*)
 T MessageWriteUBitLong(unsigned int, int)
 T MessageWriteVec3Coord(Vector const&)
 T MessageWriteWord(int)
 T MinibossScaleChangedCallBack(IConVar*, char const*, float)
 T MissingSceneWarning(char const*)
 T ModelSoundsCacheInit()
 T ModelSoundsCacheShutdown()
 T ModelSoundsCache_FinishModel(CStudioHdr*)
 T ModelSoundsCache_LoadModel(char const*)
 T ModelSoundsCache_PrecacheScriptSound(char const*)
 T MoveHelperServer()
 T MovieExplosion::GetServerClass()
 T MovieExplosion::YouForgotToImplementOrDeclareServerClass()
 T MovieExplosion::~MovieExplosion()
 T MvMMissionCycleFileChangedCallback(IConVar*, char const*, float)
 T MvMTour_t::MvMTour_t(MvMTour_t const&)
 T NAI_Hull::Height(int)
 T NAI_Hull::Length(int)
 T NAI_Hull::LookupId(char const*)
 T NAI_Hull::Maxs(int)
 T NAI_Hull::Mins(int)
 T NAI_Hull::Name(int)
 T NAI_Hull::SmallMaxs(int)
 T NAI_Hull::SmallMins(int)
 T NAI_Hull::Width(int)
 T NDebugOverlay::Axis(Vector const&, QAngle const&, float, bool, float)
 T NDebugOverlay::Box(Vector const&, Vector const&, Vector const&, int, int, int, int, float)
 T NDebugOverlay::BoxAngles(Vector const&, Vector const&, Vector const&, QAngle const&, int, int, int, int, float)
 T NDebugOverlay::BoxDirection(Vector const&, Vector const&, Vector const&, Vector const&, int, int, int, int, float)
 T NDebugOverlay::Circle(Vector const&, QAngle const&, float, int, int, int, int, bool, float)
 T NDebugOverlay::Circle(Vector const&, Vector const&, Vector const&, float, int, int, int, int, bool, float)
 T NDebugOverlay::Circle(Vector const&, float, int, int, int, int, bool, float)
 T NDebugOverlay::Cross3D(Vector const&, Vector const&, Vector const&, int, int, int, bool, float)
 T NDebugOverlay::Cross3D(Vector const&, float, int, int, int, bool, float)
 T NDebugOverlay::DrawGroundCrossHairOverlay()
 T NDebugOverlay::DrawTickMarkedLine(Vector const&, Vector const&, float, int, int, int, int, bool, float)
 T NDebugOverlay::EntityBounds(CBaseEntity const*, int, int, int, int, float)
 T NDebugOverlay::EntityText(int, int, char const*, float, int, int, int, int)
 T NDebugOverlay::EntityTextAtPosition(Vector const&, int, char const*, float, int, int, int, int)
 T NDebugOverlay::Grid(Vector const&)
 T NDebugOverlay::HorzArrow(Vector const&, Vector const&, float, int, int, int, int, bool, float)
 T NDebugOverlay::Line(Vector const&, Vector const&, int, int, int, bool, float)
 T NDebugOverlay::ScreenText(float, float, char const*, int, int, int, int, float)
 T NDebugOverlay::Sphere(Vector const&, QAngle const&, float, int, int, int, int, bool, float)
 T NDebugOverlay::Sphere(Vector const&, float, int, int, int, bool, float)
 T NDebugOverlay::SweptBox(Vector const&, Vector const&, Vector const&, Vector const&, QAngle const&, int, int, int, int, float)
 T NDebugOverlay::Text(Vector const&, char const*, bool, float)
 T NDebugOverlay::Triangle(Vector const&, Vector const&, Vector const&, int, int, int, int, bool, float)
 T NDebugOverlay::VertArrow(Vector const&, Vector const&, float, int, int, int, int, bool, float)
 T NDebugOverlay::YawArrow(Vector const&, float, float, float, int, int, int, int, bool, float)
 T NPCPhysics_CreateSolver(CAI_BaseNPC*, CBaseEntity*, bool, float)
 T NPC_CheckBrushExclude(CBaseEntity*, CBaseEntity*)
 T NWCEdit::AirNodePlacementPosition()
 T NWCEdit::CreateAILink(CBasePlayer*)
 T NWCEdit::CreateAINode(CBasePlayer*)
 T NWCEdit::DestroyAILink(CBasePlayer*)
 T NWCEdit::DestroyAINode(CBasePlayer*)
 T NWCEdit::IsWCVersionValid()
 T NWCEdit::RememberEntityPosition(CBaseEntity*)
 T NWCEdit::UndoDestroyAINode()
 T NWCEdit::UpdateEntityPosition(CBaseEntity*)
 T NameToNavAttribute(char const*)
 T NavAreaCollector::operator()(CNavArea*)
 T NavAttributeToggler::operator()(CNavArea*)
 T NavDrawDashedLine(Vector const&, Vector const&, NavEditColor)
 T NavDrawHorizontalArrow(Vector const&, Vector const&, float, NavEditColor)
 T NavDrawLine(Vector const&, Vector const&, NavEditColor)
 T NavDrawTriangle(Vector const&, Vector const&, Vector const&, NavEditColor)
 T NavDrawVolume(Vector const&, Vector const&, int, NavEditColor)
 T NavEditClearAllAttributes()
 T NavEditClearAttribute(CCommand const&)
 T NavEditMarkAttribute(CCommand const&)
 T NavMeshFactory()
 T NavMeshMergeAutocomplete(char const*, char (*) [64])
 T NextBotApproacher::NextBotApproacher()
 T NextBotCombatCharacter::BecomeRagdoll(CTakeDamageInfo const&, Vector const&)
 T NextBotCombatCharacter::DoThink()
 T NextBotCombatCharacter::Event_Killed(CTakeDamageInfo const&)
 T NextBotCombatCharacter::EyePosition()
 T NextBotCombatCharacter::GetDataDescMap()
 T NextBotCombatCharacter::GetEntity() const
 T NextBotCombatCharacter::GetLastAttacker() const
 T NextBotCombatCharacter::GetNextBotCombatCharacter() const
 T NextBotCombatCharacter::GetServerClass()
 T NextBotCombatCharacter::HandleAnimEvent(animevent_t*)
 T NextBotCombatCharacter::Ignite(float, CBaseEntity*)
 T NextBotCombatCharacter::Ignite(float, bool, float, bool)
 T NextBotCombatCharacter::IsAreaTraversable(CNavArea const*) const
 T NextBotCombatCharacter::IsUseableEntity(CBaseEntity*, unsigned int)
 T NextBotCombatCharacter::MyNextBotPointer()
 T NextBotCombatCharacter::NextBotCombatCharacter()
 T NextBotCombatCharacter::OnNavAreaChanged(CNavArea*, CNavArea*)
 T NextBotCombatCharacter::OnTakeDamage_Alive(CTakeDamageInfo const&)
 T NextBotCombatCharacter::OnTakeDamage_Dying(CTakeDamageInfo const&)
 T NextBotCombatCharacter::PerformCustomPhysics(Vector*, Vector*, QAngle*, QAngle*)
 T NextBotCombatCharacter::SetModel(char const*)
 T NextBotCombatCharacter::Spawn()
 T NextBotCombatCharacter::Touch(CBaseEntity*)
 T NextBotCombatCharacter::YouForgotToImplementOrDeclareServerClass()
 T NextBotCombatCharacter::~NextBotCombatCharacter()
 T NextBotDestroyer::operator()(INextBot*)
 T NextBotGroundLocomotion::ApplyAccumulatedApproach()
 T NextBotGroundLocomotion::Approach(Vector const&, float)
 T NextBotGroundLocomotion::ClimbLadder(CNavLadder const*, CNavArea const*)
 T NextBotGroundLocomotion::ClimbUpToLedge(Vector const&, Vector const&, CBaseEntity const*)
 T NextBotGroundLocomotion::DescendLadder(CNavLadder const*, CNavArea const*)
 T NextBotGroundLocomotion::DetectCollision(CGameTrace*, int&, Vector const&, Vector const&, Vector const&, Vector const&)
 T NextBotGroundLocomotion::DriveTo(Vector const&)
 T NextBotGroundLocomotion::FaceTowards(Vector const&)
 T NextBotGroundLocomotion::GetAcceleration() const
 T NextBotGroundLocomotion::GetDeathDropHeight() const
 T NextBotGroundLocomotion::GetDesiredLean() const
 T NextBotGroundLocomotion::GetDesiredSpeed() const
 T NextBotGroundLocomotion::GetFeet() const
 T NextBotGroundLocomotion::GetFrictionForward() const
 T NextBotGroundLocomotion::GetFrictionSideways() const
 T NextBotGroundLocomotion::GetGravity() const
 T NextBotGroundLocomotion::GetGround() const
 T NextBotGroundLocomotion::GetGroundNormal() const
 T NextBotGroundLocomotion::GetMaxAcceleration() const
 T NextBotGroundLocomotion::GetMaxDeceleration() const
 T NextBotGroundLocomotion::GetMaxJumpHeight() const
 T NextBotGroundLocomotion::GetMaxYawRate() const
 T NextBotGroundLocomotion::GetRunSpeed() const
 T NextBotGroundLocomotion::GetSpeedLimit() const
 T NextBotGroundLocomotion::GetStepHeight() const
 T NextBotGroundLocomotion::GetVelocity() const
 T NextBotGroundLocomotion::GetWalkSpeed() const
 T NextBotGroundLocomotion::IsAscendingOrDescendingLadder() const
 T NextBotGroundLocomotion::IsClimbingOrJumping() const
 T NextBotGroundLocomotion::IsClimbingUpToLedge() const
 T NextBotGroundLocomotion::IsJumpingAcrossGap() const
 T NextBotGroundLocomotion::IsOnGround() const
 T NextBotGroundLocomotion::IsRunning() const
 T NextBotGroundLocomotion::IsUsingLadder() const
 T NextBotGroundLocomotion::Jump()
 T NextBotGroundLocomotion::JumpAcrossGap(Vector const&, Vector const&)
 T NextBotGroundLocomotion::NextBotGroundLocomotion(INextBot*)
 T NextBotGroundLocomotion::OnLandOnGround(CBaseEntity*)
 T NextBotGroundLocomotion::OnLeaveGround(CBaseEntity*)
 T NextBotGroundLocomotion::OnMoveToFailure(Path const*, MoveToFailureType)
 T NextBotGroundLocomotion::OnMoveToSuccess(Path const*)
 T NextBotGroundLocomotion::Reset()
 T NextBotGroundLocomotion::ResolveCollision(Vector const&, Vector const&, int)
 T NextBotGroundLocomotion::Run()
 T NextBotGroundLocomotion::SetAcceleration(Vector const&)
 T NextBotGroundLocomotion::SetDesiredLean(QAngle const&)
 T NextBotGroundLocomotion::SetDesiredSpeed(float)
 T NextBotGroundLocomotion::SetVelocity(Vector const&)
 T NextBotGroundLocomotion::Stop()
 T NextBotGroundLocomotion::Update()
 T NextBotGroundLocomotion::UpdateGroundConstraint()
 T NextBotGroundLocomotion::UpdatePosition(Vector const&)
 T NextBotGroundLocomotion::Walk()
 T NextBotGroundLocomotion::~NextBotGroundLocomotion()
 T NextBotManager::CollectAllBots(CUtlVector<INextBot*, CUtlMemory<INextBot*, int> >*)
 T NextBotManager::IsDebugFilterMatch(INextBot const*) const
 T NextBotManager::NextBotManager()
 T NextBotManager::NotifyBeginUpdate(INextBot*)
 T NextBotManager::NotifyEndUpdate(INextBot*)
 T NextBotManager::OnBeginChangeLevel()
 T NextBotManager::OnKilled(CBaseCombatCharacter*, CTakeDamageInfo const&)
 T NextBotManager::OnMapLoaded()
 T NextBotManager::OnRoundRestart()
 T NextBotManager::OnSound(CBaseEntity*, Vector const&, KeyValues*)
 T NextBotManager::OnSpokeConcept(CBaseCombatCharacter*, char const*, AI_Response*)
 T NextBotManager::OnWeaponFired(CBaseCombatCharacter*, CBaseCombatWeapon*)
 T NextBotManager::Register(INextBot*)
 T NextBotManager::ShouldUpdate(INextBot*)
 T NextBotManager::UnRegister(INextBot*)
 T NextBotManager::Update()
 T NextBotManager::~NextBotManager()
 T NextBotPlayer<CTFPlayer>::AvoidPlayers(CUserCmd*)
 T NextBotPlayer<CTFPlayer>::EntSelectSpawnPoint()
 T NextBotPlayer<CTFPlayer>::Event_Killed(CTakeDamageInfo const&)
 T NextBotPlayer<CTFPlayer>::GetEntity() const
 T NextBotPlayer<CTFPlayer>::HandleAnimEvent(animevent_t*)
 T NextBotPlayer<CTFPlayer>::IsBot() const
 T NextBotPlayer<CTFPlayer>::IsDormantWhenDead() const
 T NextBotPlayer<CTFPlayer>::IsFakeClient() const
 T NextBotPlayer<CTFPlayer>::IsNetClient() const
 T NextBotPlayer<CTFPlayer>::IsRemovedOnReset() const
 T NextBotPlayer<CTFPlayer>::MyNextBotPointer()
 T NextBotPlayer<CTFPlayer>::NextBotPlayer()
 T NextBotPlayer<CTFPlayer>::OnMainActivityComplete(Activity, Activity)
 T NextBotPlayer<CTFPlayer>::OnMainActivityInterrupted(Activity, Activity)
 T NextBotPlayer<CTFPlayer>::OnNavAreaChanged(CNavArea*, CNavArea*)
 T NextBotPlayer<CTFPlayer>::OnTakeDamage_Alive(CTakeDamageInfo const&)
 T NextBotPlayer<CTFPlayer>::OnTakeDamage_Dying(CTakeDamageInfo const&)
 T NextBotPlayer<CTFPlayer>::PhysicsSimulate()
 T NextBotPlayer<CTFPlayer>::PressAltFireButton(float)
 T NextBotPlayer<CTFPlayer>::PressBackwardButton(float)
 T NextBotPlayer<CTFPlayer>::PressCrouchButton(float)
 T NextBotPlayer<CTFPlayer>::PressFireButton(float)
 T NextBotPlayer<CTFPlayer>::PressForwardButton(float)
 T NextBotPlayer<CTFPlayer>::PressJumpButton(float)
 T NextBotPlayer<CTFPlayer>::PressLeftButton(float)
 T NextBotPlayer<CTFPlayer>::PressMeleeButton(float)
 T NextBotPlayer<CTFPlayer>::PressReloadButton(float)
 T NextBotPlayer<CTFPlayer>::PressRightButton(float)
 T NextBotPlayer<CTFPlayer>::PressSpecialFireButton(float)
 T NextBotPlayer<CTFPlayer>::PressUseButton(float)
 T NextBotPlayer<CTFPlayer>::PressWalkButton(float)
 T NextBotPlayer<CTFPlayer>::ReleaseAltFireButton()
 T NextBotPlayer<CTFPlayer>::ReleaseBackwardButton()
 T NextBotPlayer<CTFPlayer>::ReleaseCrouchButton()
 T NextBotPlayer<CTFPlayer>::ReleaseFireButton()
 T NextBotPlayer<CTFPlayer>::ReleaseForwardButton()
 T NextBotPlayer<CTFPlayer>::ReleaseJumpButton()
 T NextBotPlayer<CTFPlayer>::ReleaseLeftButton()
 T NextBotPlayer<CTFPlayer>::ReleaseMeleeButton()
 T NextBotPlayer<CTFPlayer>::ReleaseReloadButton()
 T NextBotPlayer<CTFPlayer>::ReleaseRightButton()
 T NextBotPlayer<CTFPlayer>::ReleaseSpecialFireButton()
 T NextBotPlayer<CTFPlayer>::ReleaseUseButton()
 T NextBotPlayer<CTFPlayer>::ReleaseWalkButton()
 T NextBotPlayer<CTFPlayer>::SetButtonScale(float, float)
 T NextBotPlayer<CTFPlayer>::SetSpawnPoint(CBaseEntity*)
 T NextBotPlayer<CTFPlayer>::Spawn()
 T NextBotPlayer<CTFPlayer>::Touch(CBaseEntity*)
 T NextBotPlayer<CTFPlayer>::Update()
 T NextBotPlayer<CTFPlayer>::Weapon_Drop(CBaseCombatWeapon*, Vector const*, Vector const*)
 T NextBotPlayer<CTFPlayer>::Weapon_Equip(CBaseCombatWeapon*)
 T NextBotPlayer<CTFPlayer>::~NextBotPlayer()
 T NextBotTraceFilterOnlyActors::GetTraceType() const
 T NextBotTraceFilterOnlyActors::ShouldHitEntity(IHandleEntity*, int)
 T NextBotTraversableTraceFilter::ShouldHitEntity(IHandleEntity*, int)
 T NotifyObjectBuiltInSuggestedArea(CBaseObject&)
 T NotifyObjectUpgradedInSuggestedArea(CBaseObject&)
 T OnBaseCombatWeaponCreated(CBaseCombatWeapon*)
 T OnBaseCombatWeaponDestroyed(CBaseCombatWeapon*)
 T OnBotTeleported(CTFBot*)
 T OnMMServerModeChanged(IConVar*, char const*, float)
 T OnMMServerModeTrustedChanged(IConVar*, char const*, float)
 T OneWayLink_t::Compare(OneWayLink_t const*, OneWayLink_t const*)
 T ParseKeyvalue(void*, typedescription_t*, int, char const*, char const*)
 T ParseParticleEffects(bool, bool)
 T ParseParticleEffectsMap(char const*, bool, IFileList*)
 T ParticleSmokeGrenade::GetDataDescMap()
 T ParticleSmokeGrenade::GetServerClass()
 T ParticleSmokeGrenade::ParticleSmokeGrenade()
 T ParticleSmokeGrenade::UpdateTransmitState()
 T ParticleSmokeGrenade::YouForgotToImplementOrDeclareServerClass()
 T ParticleSmokeGrenade::~ParticleSmokeGrenade()
 T Particle_Test_Start(CBasePlayer*, char const*, bool)
 T PassServerEntityFilter(IHandleEntity const*, IHandleEntity const*)
 T PasstimeGameEvents::BallBlocked::BallBlocked(int, int)
 T PasstimeGameEvents::BallBlocked::Fire()
 T PasstimeGameEvents::BallFree::BallFree(int)
 T PasstimeGameEvents::BallFree::Fire()
 T PasstimeGameEvents::BallGet::BallGet(int)
 T PasstimeGameEvents::BallGet::Fire()
 T PasstimeGameEvents::BallStolen::BallStolen(int, int)
 T PasstimeGameEvents::BallStolen::Fire()
 T PasstimeGameEvents::PassCaught::Fire()
 T PasstimeGameEvents::PassCaught::PassCaught(int, int, float, float)
 T PasstimeGameEvents::Score::Fire()
 T PasstimeGameEvents::Score::Score(int, int)
 T PasstimeGameEvents::Score::Score(int, int, int)
 T PasstimeStats_t::AddBallFracSample(float)
 T PasstimeStats_t::AddPassTravelDistSample(float)
 T PasstimeStats_t::Clear()
 T Path::AssemblePrecomputedPath(INextBot*, Vector const&, CNavArea*)
 T Path::BuildTrivialPath(INextBot*, Vector const&)
 T Path::CollectAdjacentAreas(CNavArea*)
 T Path::ComputeAreaCrossing(INextBot*, CNavArea const*, Vector const&, CNavArea const*, NavDirType, Vector*) const
 T Path::ComputePathDetails(INextBot*, Vector const&)
 T Path::ComputeWithOpenGoal(INextBot*, IPathCost const&, IPathOpenGoalSelector const&, float)
 T Path::Copy(INextBot*, Path const&)
 T Path::Draw(Path::Segment const*) const
 T Path::DrawInterpolated(float, float)
 T Path::FirstSegment() const
 T Path::GetAge() const
 T Path::GetClosestPosition(Vector const&, Path::Segment const*, float) const
 T Path::GetCurrentGoal() const
 T Path::GetCursorData() const
 T Path::GetCursorPosition() const
 T Path::GetEndPosition() const
 T Path::GetLength() const
 T Path::GetPosition(float, Path::Segment const*) const
 T Path::GetStartPosition() const
 T Path::GetSubject() const
 T Path::InsertSegment(Path::Segment, int)
 T Path::Invalidate()
 T Path::IsValid() const
 T Path::LastSegment() const
 T Path::MoveCursor(float, Path::MoveCursorType)
 T Path::MoveCursorToClosestPosition(Vector const&, Path::SeekType, float) const
 T Path::MoveCursorToEnd()
 T Path::MoveCursorToStart()
 T Path::NextSegment(Path::Segment const*) const
 T Path::OnPathChanged(INextBot*, Path::ResultType)
 T Path::Optimize(INextBot*)
 T Path::Path()
 T Path::PostProcess()
 T Path::PriorSegment(Path::Segment const*) const
 T Path::~Path()
 T PathFindDirection(CPathTrack*, Vector const&, Vector const&)
 T PathFollower::AdjustSpeed(INextBot*)
 T PathFollower::Avoid(INextBot*, Vector const&, Vector const&, Vector const&)
 T PathFollower::CheckProgress(INextBot*)
 T PathFollower::Climbing(INextBot*, Path::Segment const*, Vector const&, Vector const&, float)
 T PathFollower::Draw(Path::Segment const*) const
 T PathFollower::FindBlocker(INextBot*)
 T PathFollower::GetCurrentGoal() const
 T PathFollower::GetHindrance() const
 T PathFollower::Invalidate()
 T PathFollower::IsAtGoal(INextBot*) const
 T PathFollower::IsDiscontinuityAhead(INextBot*, Path::SegmentType, float) const
 T PathFollower::JumpOverGaps(INextBot*, Path::Segment const*, Vector const&, Vector const&, float)
 T PathFollower::LadderUpdate(INextBot*)
 T PathFollower::OnPathChanged(INextBot*, Path::ResultType)
 T PathFollower::PathFollower()
 T PathFollower::SetMinLookAheadDistance(float)
 T PathFollower::Update(INextBot*)
 T PathFollower::~PathFollower()
 T PhysAddShadow(CBaseEntity*)
 T PhysBreakSound(CBaseEntity*, IPhysicsObject*, Vector)
 T PhysCallbackDamage(CBaseEntity*, CTakeDamageInfo const&)
 T PhysCallbackDamage(CBaseEntity*, CTakeDamageInfo const&, gamevcollisionevent_t&, int)
 T PhysCallbackImpulse(IPhysicsObject*, Vector const&, Vector const&)
 T PhysCallbackRemove(IServerNetworkable*)
 T PhysCleanupFrictionSounds(CBaseEntity*)
 T PhysCollisionDust(gamevcollisionevent_t*, surfacedata_t*)
 T PhysCollisionScreenShake(gamevcollisionevent_t*, int)
 T PhysCollisionSound(CBaseEntity*, IPhysicsObject*, int, int, int, float, float)
 T PhysComputeSlideDirection(IPhysicsObject*, Vector const&, Vector const&, Vector*, Vector*, float)
 T PhysCreateBbox(Vector const&, Vector const&)
 T PhysCreateVirtualTerrain(CBaseEntity*, objectparams_t const&)
 T PhysCreateWorld_Shared(CBaseEntity*, vcollide_t*, objectparams_t const&)
 T PhysDestroyObject(IPhysicsObject*, CBaseEntity*)
 T PhysDisableEntityCollisions(CBaseEntity*, CBaseEntity*)
 T PhysDisableEntityCollisions(IPhysicsObject*, IPhysicsObject*)
 T PhysEnableEntityCollisions(CBaseEntity*, CBaseEntity*)
 T PhysEnableEntityCollisions(IPhysicsObject*, IPhysicsObject*)
 T PhysEnableFloating(IPhysicsObject*, bool)
 T PhysEntityCollisionsAreDisabled(CBaseEntity*, CBaseEntity*)
 T PhysFindOrAddVehicleScript(char const*, vehicleparams_t*, vehiclesounds_t*)
 T PhysFlushVehicleScripts()
 T PhysForceClearVelocity(IPhysicsObject*)
 T PhysFrictionEffect(Vector&, Vector, float, int, int)
 T PhysFrictionSound(CBaseEntity*, IPhysicsObject*, char const*, short&, float)
 T PhysFrictionSound(CBaseEntity*, IPhysicsObject*, float, int, int)
 T PhysGetEntityMass(CBaseEntity*)
 T PhysGetListOfPenetratingEntities(CBaseEntity*, CUtlVector<CBaseEntity*, CUtlMemory<CBaseEntity*, int> >&)
 T PhysGetMassCenterOverride(CBaseEntity*, vcollide_t*, solid_t&)
 T PhysGetTriggerEvent(triggerevent_t*, CBaseEntity*)
 T PhysHasContactWithOtherInDirection(IPhysicsObject*, Vector const&)
 T PhysIsFinalTick()
 T PhysIsInCallback()
 T PhysModelCreate(CBaseEntity*, int, Vector const&, QAngle const&, solid_t*)
 T PhysModelCreateBox(CBaseEntity*, Vector const&, Vector const&, Vector const&, bool)
 T PhysModelCreateCustom(CBaseEntity*, CPhysCollide const*, Vector const&, QAngle const&, char const*, bool, solid_t*)
 T PhysModelCreateOBB(CBaseEntity*, Vector const&, Vector const&, Vector const&, QAngle const&, bool)
 T PhysModelCreateUnmoveable(CBaseEntity*, int, Vector const&, QAngle const&)
 T PhysModelParseSolid(solid_t&, CBaseEntity*, int)
 T PhysModelParseSolidByIndex(solid_t&, CBaseEntity*, int, int)
 T PhysModelParseSolidByIndex(solid_t&, CBaseEntity*, vcollide_t*, int)
 T PhysOnCleanupDeleteList()
 T PhysParseSurfaceData(IPhysicsSurfaceProps*, IFileSystem*)
 T PhysRemoveShadow(CBaseEntity*)
 T PhysSetMassCenterOverride(masscenteroverride_t&)
 T PhysSolidOverride(solid_t&, string_t)
 T PhysTeleportConstrainedEntity(CBaseEntity*, IPhysicsObject*, IPhysicsObject*, Vector const&, QAngle const&, bool)
 T PhysicsCommand(CCommand const&, void (*)(CBaseEntity*))
 T PhysicsGameSystem()
 T PhysicsSplash(IPhysicsFluidController*, IPhysicsObject*, CBaseEntity*)
 T Physics_RunThinkFunctions(bool)
 T Physics_SimulateEntity(CBaseEntity*)
 T Pickup_DefaultPhysGunLaunchVelocity(Vector const&, float)
 T Pickup_ForcePlayerToDropThisObject(CBaseEntity*)
 T PlaceDirectory::AddPlace(unsigned int)
 T PlaceDirectory::Load(CUtlBuffer&, int)
 T PlaceDirectory::Save(CUtlBuffer&)
 T PlaceDirectory::~PlaceDirectory()
 T PlaceStickyBombReply::OnFail(INextBot*, INextBotReply::FailureReason)
 T PlaceStickyBombReply::OnSuccess(INextBot*)
 T PlayLockSounds(CBaseEntity*, locksound_t*, int, int)
 T PlayerBody::AimHeadTowards(CBaseEntity*, IBody::LookAtPriorityType, float, INextBotReply*, char const*)
 T PlayerBody::AimHeadTowards(Vector const&, IBody::LookAtPriorityType, float, INextBotReply*, char const*)
 T PlayerBody::ClearPendingAimReply()
 T PlayerBody::GetActivity() const
 T PlayerBody::GetActualPosture() const
 T PlayerBody::GetArousal() const
 T PlayerBody::GetCrouchHullHeight() const
 T PlayerBody::GetDesiredPosture() const
 T PlayerBody::GetEntity()
 T PlayerBody::GetEyePosition() const
 T PlayerBody::GetHeadSteadyDuration() const
 T PlayerBody::GetHullHeight() const
 T PlayerBody::GetHullMaxs() const
 T PlayerBody::GetHullMins() const
 T PlayerBody::GetHullWidth() const
 T PlayerBody::GetMaxHeadAngularVelocity() const
 T PlayerBody::GetSolidMask() const
 T PlayerBody::GetStandHullHeight() const
 T PlayerBody::GetViewVector() const
 T PlayerBody::HasActivityType(unsigned int) const
 T PlayerBody::IsActivity(Activity) const
 T PlayerBody::IsActualPosture(IBody::PostureType) const
 T PlayerBody::IsArousal(IBody::ArousalType) const
 T PlayerBody::IsDesiredPosture(IBody::PostureType) const
 T PlayerBody::IsHeadAimingOnTarget() const
 T PlayerBody::IsHeadSteady() const
 T PlayerBody::IsInDesiredPosture() const
 T PlayerBody::IsPostureChanging() const
 T PlayerBody::IsPostureMobile() const
 T PlayerBody::PlayerBody(INextBot*)
 T PlayerBody::Reset()
 T PlayerBody::SetArousal(IBody::ArousalType)
 T PlayerBody::SetDesiredPosture(IBody::PostureType)
 T PlayerBody::SetPosition(Vector const&)
 T PlayerBody::StartActivity(Activity, unsigned int)
 T PlayerBody::Upkeep()
 T PlayerBody::~PlayerBody()
 T PlayerIndexLessFunc(int const&, int const&)
 T PlayerLocomotion::AdjustPosture(Vector const&)
 T PlayerLocomotion::Approach(Vector const&, float)
 T PlayerLocomotion::ApproachAscendingLadder()
 T PlayerLocomotion::ApproachDescendingLadder()
 T PlayerLocomotion::AscendLadder()
 T PlayerLocomotion::ClimbLadder(CNavLadder const*, CNavArea const*)
 T PlayerLocomotion::ClimbUpToLedge(Vector const&, Vector const&, CBaseEntity const*)
 T PlayerLocomotion::DescendLadder()
 T PlayerLocomotion::DescendLadder(CNavLadder const*, CNavArea const*)
 T PlayerLocomotion::DismountLadderTop()
 T PlayerLocomotion::DriveTo(Vector const&)
 T PlayerLocomotion::FaceTowards(Vector const&)
 T PlayerLocomotion::GetDeathDropHeight() const
 T PlayerLocomotion::GetDesiredLean() const
 T PlayerLocomotion::GetDesiredSpeed() const
 T PlayerLocomotion::GetFeet() const
 T PlayerLocomotion::GetGround() const
 T PlayerLocomotion::GetGroundNormal() const
 T PlayerLocomotion::GetMaxAcceleration() const
 T PlayerLocomotion::GetMaxDeceleration() const
 T PlayerLocomotion::GetMaxJumpHeight() const
 T PlayerLocomotion::GetRunSpeed() const
 T PlayerLocomotion::GetStepHeight() const
 T PlayerLocomotion::GetVelocity() const
 T PlayerLocomotion::GetWalkSpeed() const
 T PlayerLocomotion::IsAbleToAutoCenterOnLadder() const
 T PlayerLocomotion::IsAscendingOrDescendingLadder() const
 T PlayerLocomotion::IsClimbPossible(INextBot*, CBaseEntity const*) const
 T PlayerLocomotion::IsClimbingOrJumping() const
 T PlayerLocomotion::IsClimbingUpToLedge() const
 T PlayerLocomotion::IsJumpingAcrossGap() const
 T PlayerLocomotion::IsOnGround() const
 T PlayerLocomotion::IsRunning() const
 T PlayerLocomotion::IsUsingLadder() const
 T PlayerLocomotion::Jump()
 T PlayerLocomotion::JumpAcrossGap(Vector const&, Vector const&)
 T PlayerLocomotion::PlayerLocomotion(INextBot*)
 T PlayerLocomotion::Reset()
 T PlayerLocomotion::Run()
 T PlayerLocomotion::SetDesiredLean(QAngle const&)
 T PlayerLocomotion::SetDesiredSpeed(float)
 T PlayerLocomotion::SetMaximumSpeedLimit(float)
 T PlayerLocomotion::SetMinimumSpeedLimit(float)
 T PlayerLocomotion::Stop()
 T PlayerLocomotion::TraverseLadder()
 T PlayerLocomotion::Update()
 T PlayerLocomotion::Walk()
 T PlayerLocomotion::~PlayerLocomotion()
 T PlayerMove()
 T PointInNoBuild(Vector const&, CBaseObject const*)
 T PointInRespawnFlagZone(Vector const&)
 T PointInRespawnRoom(CBaseEntity const*, Vector const&, bool)
 T PointOnLineNearestPoint(Vector const&, Vector const&, Vector const&)
 T PointsCrossRespawnRoomVisualizer(Vector const&, Vector const&, int)
 T PostFrameNavigationSystem()
 T PrecacheFileWeaponInfoDatabase(IFileSystem*, unsigned char const*)
 T PrecacheGibsForModel(int)
 T PrecacheInstancedScene(char const*)
 T PrecacheMaterial(char const*)
 T PrecacheParticleSystem(char const*)
 T PrecachePhysicsSounds()
 T PrecachePointTemplates()
 T PrecachePropsForModel(int, char const*)
 T PrecacheRing(void*)
 T PrecacheStandardParticleSystems()
 T PrecacheSyringe(void*)
 T PrecacheVGuiScreen(char const*)
 T PressFireButtonIfValidBuildPositionReply::OnSuccess(INextBot*)
 T ProcessQueryCacheUpdate(QueryCacheUpdateRecord_t&)
 T PropBreakableCapEdictsOnCreateAll(int, IPhysicsObject*, breakablepropparams_t const&, CBaseEntity*, int)
 T PropBreakableCreateAll(int, IPhysicsObject*, Vector const&, QAngle const&, Vector const&, Vector const&, float, float, int, CBaseEntity*, bool)
 T PropBreakableCreateAll(int, IPhysicsObject*, breakablepropparams_t const&, CBaseEntity*, int, bool, bool)
 T PropBreakablePrecacheAll(string_t)
 T PropDynamic_CollidesWithGrenades(CBaseEntity*)
 T PropIsGib(CBaseEntity*)
 T PublishedFileId_t_Less(unsigned long long const&, unsigned long long const&)
 T Q_UTF32ToUTF8(wchar_t const*, char*, int, EStringConvertErrorPolicy)
 T Q_UTF8ToUChar32(char const*, wchar_t&, bool&)
 T Q_UTF8ToUTF32(char const*, wchar_t*, int, EStringConvertErrorPolicy)
 T Q_log2(int)
 T QuaternionAlign(Quaternion const&, Quaternion const&, Quaternion&)
 T QuaternionAngleDiff(Quaternion const&, Quaternion const&)
 T QuaternionAngles(Quaternion const&, QAngle&)
 T QuaternionAngles(Quaternion const&, RadianEuler&)
 T QuaternionBlend(Quaternion const&, Quaternion const&, float, Quaternion&)
 T QuaternionBlendNoAlign(Quaternion const&, Quaternion const&, float, Quaternion&)
 T QuaternionIdentityBlend(Quaternion const&, float, Quaternion&)
 T QuaternionMatrix(Quaternion const&, Vector const&, matrix3x4_t&)
 T QuaternionMatrix(Quaternion const&, matrix3x4_t&)
 T QuaternionMult(Quaternion const&, Quaternion const&, Quaternion&)
 T QuaternionNormalize(Quaternion&)
 T QuaternionScale(Quaternion const&, float, Quaternion&)
 T QuaternionSlerp(Quaternion const&, Quaternion const&, float, Quaternion&)
 T QuaternionSlerpNoAlign(Quaternion const&, Quaternion const&, float, Quaternion&)
 T QueryCacheEntry_t::IssueQuery()
 T QuestObjectiveManager()
 T RadiusDamage(CTakeDamageInfo const&, Vector const&, float, int, CBaseEntity*)
 T RadiusSelect::operator()(CNavArea*)
 T RagdollActivate(ragdoll_t&, vcollide_t*, int, bool)
 T RagdollApplyAnimationAsVelocity(ragdoll_t&, matrix3x4_t const*, matrix3x4_t const*, float)
 T RagdollCreate(ragdoll_t&, ragdollparams_t const&, IPhysicsEnvironment*)
 T RagdollDestroy(ragdoll_t&)
 T RagdollGetBoneMatrix(ragdoll_t const&, CBoneAccessor&, int)
 T RagdollIsAsleep(ragdoll_t const&)
 T RagdollManager_SaveImportant(CAI_BaseNPC*)
 T RagdollSetupCollisions(ragdoll_t&, vcollide_t*, int)
 T RagdollSolveSeparation(ragdoll_t&, CBaseEntity*)
 T Ragdoll_GetAngleOverrideString(char*, int, CBaseEntity*)
 T Ragdoll_GetRagdoll(CBaseEntity*)
 T Ragdoll_IsPropRagdoll(CBaseEntity*)
 T RandomInterval(interval_t const&)
 T RangeCompressor(float, float, float, float)
 T ReadAndAllocStringValue(KeyValues*, char const*, char const*)
 T ReadDMXHeader(CUtlBuffer&, char*, int, int&, char*, int, int&)
 T ReadEncryptedKVFile(IFileSystem*, char const*, unsigned char const*, bool)
 T ReadInterval(char const*)
 T ReadUsercmd(bf_read*, CUserCmd*, CUserCmd*)
 T ReadWeaponDataFromFileForSlot(IFileSystem*, char const*, unsigned short*, unsigned char const*)
 T ReconnectMergedArea(CUtlDict<CNavArea*, int>&, KeyValues*, NavDirType, char const*)
 T RegisterHapticMessages()
 T RegisterUserMessages()
 T ReloadSceneFromDisk(CBaseEntity*)
 T RemapViewAngles(ViewSmoothingData_t*, QAngle&)
 T RematchResponseCallback(GCSDK::CProtoBufMsg<CMsgGCRematchRequestResponse>&)
 T RemoveActorFromScriptedScenes(CBaseFlex*, bool, bool, char const*)
 T RemoveAll2013HalloweenTeleportSpellsInMidFlight()
 T RemoveAllBombHeadFromPlayers()
 T RemoveAllGrenades(CMerasmus*)
 T RemoveAllScenesInvolvingActor(CBaseFlex*)
 T ReportDamage(char const*, char const*, float, int, int)
 T ReportPositionChanged(CBaseEntity*)
 T ReportVPhysicsStateChanged(IPhysicsObject*, CBaseEntity*, bool)
 T ResetActivityIndexes(CStudioHdr*)
 T ResetEventIndexes(CStudioHdr*)
 T ResetFilePlayerClassInfoDatabase()
 T ResetGlobalState()
 T ResetWindspeed()
 T RespawnEntities()
 T ResponseGroup::ResponseGroup(ResponseGroup const&)
 T ResponseGroup::operator=(ResponseGroup const&)
 T RestoreGlobalState(CSaveRestoreData*)
 T RobotData_t::Precache()
 T RobotData_t::RobotData_t(char const*, char const*, char const*, char const*, char const*, char const*, float)
 T RobotDestructionStats_t::Clear()
 T RobotDestructionStats_t::RobotDestructionStats_t()
 T RocketTrail::GetDataDescMap()
 T RocketTrail::GetServerClass()
 T RocketTrail::RocketTrail()
 T RocketTrail::YouForgotToImplementOrDeclareServerClass()
 T RocketTrail::~RocketTrail()
 T RotationDelta(QAngle const&, QAngle const&, QAngle*)
 T RotationDeltaAxisAngle(QAngle const&, QAngle const&, Vector&, float&)
 T Rule::Rule(Rule const&)
 T Rule::operator=(Rule const&)
 T RunMimicCommand(CUserCmd&)
 T SENTENCEG_GetIndex(char const*)
 T SENTENCEG_Init()
 T SENTENCEG_Lookup(char const*)
 T SENTENCEG_PlayRndI(edict_t*, int, float, soundlevel_t, int, int)
 T SENTENCEG_PlayRndSz(edict_t*, char const*, float, soundlevel_t, int, int)
 T SENTENCEG_PlaySequentialSz(edict_t*, char const*, float, soundlevel_t, int, int, int, int)
 T SOTrackerSpew(char const*, int)
 T SOTrackerSpewTypeToggle(CCommand const&)
 T SaveGlobalState(CSaveRestoreData*)
 T SaveInit(int)
 T ScaleBones(CStudioHdr const*, Quaternion*, Vector*, int, float, int)
 T ScanSelectAmbushAreas::operator()(CNavArea*)
 T SceneManager_ClientActive(CBasePlayer*)
 T Scene_Printf(char const*, ...)
 T SchemaGameCategory_t::PassesRestrictions() const
 T ScramblePlayersSort(CTFPlayer* const*, CTFPlayer* const*)
 T SeatPrioritySort(CPassengerSeatTransition const*, CPassengerSeatTransition const*)
 T SeedRandSIMD(unsigned int)
 T SelectClosestSpyToMe(CTFBot*, CKnownEntity const*, CKnownEntity const*)
 T SelectDeathPoseActivityAndFrame(CBaseAnimating*, CTakeDamageInfo const&, int, Activity&, int&)
 T SelectHeaviestSequence(CStudioHdr*, int)
 T SelectOverlappingAreas::operator()(CNavArea*)
 T SelectWeightedSequence(CStudioHdr*, int, int)
 T Selector::operator()(INextBot*)
 T SendPlayerToTheUnderworld(CTFPlayer*, char const*)
 T SendProp::SendProp()
 T SendProp::~SendProp()
 T SendPropAngle(char const*, int, int, int, int, void (*)(SendProp const*, void const*, void const*, DVariant*, int, int))
 T SendPropArray3(char const*, int, int, int, SendProp, void* (*)(SendProp const*, void const*, void const*, CSendProxyRecipients*, int))
 T SendPropBool(char const*, int, int)
 T SendPropDataTable(char const*, int, SendTable*, void* (*)(SendProp const*, void const*, void const*, CSendProxyRecipients*, int))
 T SendPropEHandle(char const*, int, int, int, void (*)(SendProp const*, void const*, void const*, DVariant*, int, int))
 T SendPropExclude(char const*, char const*)
 T SendPropFloat(char const*, int, int, int, int, float, float, void (*)(SendProp const*, void const*, void const*, DVariant*, int, int))
 T SendPropInt(char const*, int, int, int, int, void (*)(SendProp const*, void const*, void const*, DVariant*, int, int))
 T SendPropIntWithMinusOneFlag(char const*, int, int, int, void (*)(SendProp const*, void const*, void const*, DVariant*, int, int))
 T SendPropPredictableId(char const*, int, int)
 T SendPropQAngles(char const*, int, int, int, int, void (*)(SendProp const*, void const*, void const*, DVariant*, int, int))
 T SendPropString(char const*, int, int, int, void (*)(SendProp const*, void const*, void const*, DVariant*, int, int))
 T SendPropStringT(char const*, int, int)
 T SendPropTime(char const*, int, int)
 T SendPropUtlVector(char*, int, int, void (*)(void*, int, int), int, SendProp, void* (*)(SendProp const*, void const*, void const*, CSendProxyRecipients*, int))
 T SendPropVector(char const*, int, int, int, int, float, float, void (*)(SendProp const*, void const*, void const*, DVariant*, int, int))
 T SendPropVectorXY(char const*, int, int, int, int, float, float, void (*)(SendProp const*, void const*, void const*, DVariant*, int, int))
 T SendProxyArrayLength_HealingArray(void const*, int)
 T SendProxyArrayLength_PlayerArray(void const*, int)
 T SendProxyArrayLength_PlayerObjects(void const*, int)
 T SendProxyArrayLength_TeamObjects(void const*, int)
 T SendProxy_AngleToFloat(SendProp const*, void const*, void const*, DVariant*, int, int)
 T SendProxy_Angles(SendProp const*, void const*, void const*, DVariant*, int, int)
 T SendProxy_AnimTime(SendProp const*, void const*, void const*, DVariant*, int, int)
 T SendProxy_ClientSideAnimation(SendProp const*, void const*, void const*, CSendProxyRecipients*, int)
 T SendProxy_Color32ToInt(SendProp const*, void const*, void const*, DVariant*, int, int)
 T SendProxy_CropFlagsToPlayerFlagBitsLength(SendProp const*, void const*, void const*, DVariant*, int, int)
 T SendProxy_DataTablePtrToDataTable(SendProp const*, void const*, void const*, CSendProxyRecipients*, int)
 T SendProxy_DataTableToDataTable(SendProp const*, void const*, void const*, CSendProxyRecipients*, int)
 T SendProxy_EHandleToInt(SendProp const*, void const*, void const*, DVariant*, int, int)
 T SendProxy_FishAngle(SendProp const*, void const*, void const*, DVariant*, int, int)
 T SendProxy_FlexWeights(SendProp const*, void const*, void const*, CSendProxyRecipients*, int)
 T SendProxy_FloatToFloat(SendProp const*, void const*, void const*, DVariant*, int, int)
 T SendProxy_FuncRotatingAngle(SendProp const*, void const*, void const*, DVariant*, int, int)
 T SendProxy_FuncRotatingOrigin(SendProp const*, void const*, void const*, DVariant*, int, int)
 T SendProxy_FuncRotatingSimulationTime(SendProp const*, void const*, void const*, DVariant*, int, int)
 T SendProxy_HealingList(SendProp const*, void const*, void const*, DVariant*, int, int)
 T SendProxy_Int16ToInt32(SendProp const*, void const*, void const*, DVariant*, int, int)
 T SendProxy_Int32ToInt32(SendProp const*, void const*, void const*, DVariant*, int, int)
 T SendProxy_Int8ToInt32(SendProp const*, void const*, void const*, DVariant*, int, int)
 T SendProxy_IntAddOne(SendProp const*, void const*, void const*, DVariant*, int, int)
 T SendProxy_LengthTable(SendProp const*, void const*, void const*, CSendProxyRecipients*, int)
 T SendProxy_OnlyToTeam(SendProp const*, void const*, void const*, CSendProxyRecipients*, int)
 T SendProxy_Origin(SendProp const*, void const*, void const*, DVariant*, int, int)
 T SendProxy_OriginXY(SendProp const*, void const*, void const*, DVariant*, int, int)
 T SendProxy_OriginZ(SendProp const*, void const*, void const*, DVariant*, int, int)
 T SendProxy_PlayerList(SendProp const*, void const*, void const*, DVariant*, int, int)
 T SendProxy_PlayerObjectList(SendProp const*, void const*, void const*, DVariant*, int, int)
 T SendProxy_QAngles(SendProp const*, void const*, void const*, DVariant*, int, int)
 T SendProxy_SendActiveLocalWeaponDataTable(SendProp const*, void const*, void const*, CSendProxyRecipients*, int)
 T SendProxy_SendBaseCombatCharacterLocalDataTable(SendProp const*, void const*, void const*, CSendProxyRecipients*, int)
 T SendProxy_SendHealersDataTable(SendProp const*, void const*, void const*, CSendProxyRecipients*, int)
 T SendProxy_SendLocalDataTable(SendProp const*, void const*, void const*, CSendProxyRecipients*, int)
 T SendProxy_SendLocalFlameThrowerDataTable(SendProp const*, void const*, void const*, CSendProxyRecipients*, int)
 T SendProxy_SendLocalObjectDataTable(SendProp const*, void const*, void const*, CSendProxyRecipients*, int)
 T SendProxy_SendLocalWeaponDataTable(SendProp const*, void const*, void const*, CSendProxyRecipients*, int)
 T SendProxy_SendNonLocalDataTable(SendProp const*, void const*, void const*, CSendProxyRecipients*, int)
 T SendProxy_SendNonLocalWeaponDataTable(SendProp const*, void const*, void const*, CSendProxyRecipients*, int)
 T SendProxy_ShortAddOne(SendProp const*, void const*, void const*, DVariant*, int, int)
 T SendProxy_SimulationTime(SendProp const*, void const*, void const*, DVariant*, int, int)
 T SendProxy_StringT_To_String(SendProp const*, void const*, void const*, DVariant*, int, int)
 T SendProxy_StringToString(SendProp const*, void const*, void const*, DVariant*, int, int)
 T SendProxy_String_tToString(SendProp const*, void const*, void const*, DVariant*, int, int)
 T SendProxy_TFGameRules(SendProp const*, void const*, void const*, CSendProxyRecipients*, int)
 T SendProxy_TeamObjectList(SendProp const*, void const*, void const*, DVariant*, int, int)
 T SendProxy_TeamplayRoundBasedRules(SendProp const*, void const*, void const*, CSendProxyRecipients*, int)
 T SendProxy_TestProxyToggle(SendProp const*, void const*, void const*, CSendProxyRecipients*, int)
 T SendProxy_UInt16ToInt32(SendProp const*, void const*, void const*, DVariant*, int, int)
 T SendProxy_UInt32ToInt32(SendProp const*, void const*, void const*, DVariant*, int, int)
 T SendProxy_UInt8ToInt32(SendProp const*, void const*, void const*, DVariant*, int, int)
 T SendProxy_UtlVectorElement(SendProp const*, void const*, void const*, DVariant*, int, int)
 T SendProxy_UtlVectorElement_DataTable(SendProp const*, void const*, void const*, CSendProxyRecipients*, int)
 T SendProxy_UtlVectorLength(SendProp const*, void const*, void const*, DVariant*, int, int)
 T SendProxy_VectorToVector(SendProp const*, void const*, void const*, DVariant*, int, int)
 T SendTable::Construct(SendProp*, int, char const*)
 T SendTable::SendTable()
 T SendTable::SendTable(SendProp*, int, char const*)
 T SendTable::~SendTable()
 T ServerMatchmakingState_descriptor()
 T ServiceEventQueue()
 T SetActivityForSequence(CStudioHdr*, int)
 T SetBodygroup(CStudioHdr*, int&, int, int)
 T SetDebugBits(CBasePlayer*, char const*, int)
 T SetEventIndexForSequence(mstudioseqdesc_t&)
 T SetGCClientSystem(CGCClientSystem*)
 T SetIdentityMatrix(matrix3x4_t&)
 T SetSerializationDelimiter(CUtlCharConversion*)
 T SetupLightNormalFromProps(QAngle const&, float, float, Vector&)
 T SetupMatrixAngles(QAngle const&)
 T SetupMatrixAxisRot(Vector const&, float)
 T SetupMatrixIdentity()
 T SetupMatrixOrgAngles(Vector const&, QAngle const&)
 T SetupParentsForSpawnList(int, HierarchicalSpawn_t*)
 T SharedRandomInt(char const*, int, int, int)
 T SharedVehicleViewSmoothing(CBasePlayer*, Vector*, QAngle*, bool, bool, Vector const&, ViewSmoothingData_t*, float*)
 T ShiftSet::operator()(CNavArea*)
 T ShouldRemoveThisRagdoll(CBaseAnimating*)
 T ShowViewPortPanelToAll(char const*, bool, KeyValues*)
 T SignbitsForPlane(cplane_t*)
 T SimThink_EntityChanged(CBaseEntity*)
 T SimThink_ListCopy(CBaseEntity**, int)
 T SimThink_ListCount()
 T SinCos(float, float*, float*)
 T SlerpBones(CStudioHdr const*, Quaternion*, Vector*, mstudioseqdesc_t&, int, QuaternionAligned const*, Vector const*, float, int)
 T SmokeTrail::GetDataDescMap()
 T SmokeTrail::GetServerClass()
 T SmokeTrail::KeyValue(char const*, char const*)
 T SmokeTrail::SmokeTrail()
 T SmokeTrail::YouForgotToImplementOrDeclareServerClass()
 T SmokeTrail::~SmokeTrail()
 T SmoothCurve_Tweak(float, float, float)
 T SolveQuadratic(float, float, float, float&, float&)
 T SortPlayerSpectatorQueue(CTFPlayer* const*, CTFPlayer* const*)
 T SoundCommandLessFunc(SoundCommand_t* const&, SoundCommand_t* const&)
 T SoundEmitterSystem()
 T SpawnAllEntities(int, HierarchicalSpawn_t*, bool)
 T SpawnBlood(Vector, Vector const&, int, float)
 T SpawnClientsideFlyingBird(Vector&)
 T SpawnGhost(Vector const&, QAngle const&, float)
 T SpawnHierarchicalList(int, HierarchicalSpawn_t*, bool)
 T SpawnRunes()
 T Spline_Normalize(Vector const&, Vector const&, Vector const&, Vector const&, Vector&, Vector&)
 T SplitContext(char const*, char*, int, char*, int, float*)
 T SporeExplosion::GetDataDescMap()
 T SporeExplosion::GetServerClass()
 T SporeExplosion::InputDisable(inputdata_t&)
 T SporeExplosion::InputEnable(inputdata_t&)
 T SporeExplosion::Spawn()
 T SporeExplosion::SporeExplosion()
 T SporeExplosion::YouForgotToImplementOrDeclareServerClass()
 T SporeExplosion::~SporeExplosion()
 T SporeTrail::GetDataDescMap()
 T SporeTrail::GetServerClass()
 T SporeTrail::SporeTrail()
 T SporeTrail::YouForgotToImplementOrDeclareServerClass()
 T SporeTrail::~SporeTrail()
 T StandardFilterRules(IHandleEntity*, int)
 T StayOnFloor(CGameTrace*, float)
 T StopParticleEffects(CBaseEntity*)
 T StopScriptedScene(CBaseFlex*, CHandle<CBaseEntity>)
 T StrLess(char const* const&, char const* const&)
 T StringAfterPrefix(char const*, char const*)
 T StringFieldToInt(char const*, CUtlVector<char const*, CUtlMemory<char const*, int> > const&, bool)
 T StringFieldToInt(char const*, char const**, int, bool)
 T StringLessThan(char const* const&, char const* const&)
 T StringSort(char const* const*, char const* const*)
 T Studio_AlignIKMatrix(matrix3x4_t&, Vector const&)
 T Studio_AnimMovement(mstudioanimdesc_t*, float, float, Vector&, QAngle&)
 T Studio_AnimPosition(mstudioanimdesc_t*, float, Vector&, QAngle&)
 T Studio_BoneIndexByName(CStudioHdr const*, char const*)
 T Studio_BuildMatrices(CStudioHdr const*, QAngle const&, Vector const&, Vector const*, Quaternion const*, int, float, matrix3x4_t*, int)
 T Studio_CPS(CStudioHdr const*, mstudioseqdesc_t&, int, float const*)
 T Studio_CalcBoneToBoneTransform(CStudioHdr const*, int, int, matrix3x4_t&)
 T Studio_CreateBoneCache(bonecacheparams_t&)
 T Studio_DestroyBoneCache(memhandle_t__*)
 T Studio_Duration(CStudioHdr const*, int, float const*)
 T Studio_FindAnimDistance(mstudioanimdesc_t*, float)
 T Studio_FindAttachment(CStudioHdr const*, char const*)
 T Studio_FindSeqDistance(CStudioHdr const*, int, float const*, float)
 T Studio_GetBoneCache(memhandle_t__*)
 T Studio_GetDefaultSurfaceProps(CStudioHdr*)
 T Studio_GetKeyValueText(CStudioHdr const*, int)
 T Studio_GetMass(CStudioHdr*)
 T Studio_GetPoseParameter(CStudioHdr const*, int, float)
 T Studio_IKAnimationError(CStudioHdr const*, mstudioikrule_t*, mstudioanimdesc_t const*, float, Vector&, Quaternion&, float&)
 T Studio_IKRuleWeight(mstudioikrule_t&, mstudioanimdesc_t const*, float, int&, float&)
 T Studio_IKSequenceError(CStudioHdr const*, mstudioseqdesc_t&, int, float, int, float const*, mstudioanimdesc_t**, float*, ikcontextikrule_t&)
 T Studio_InvalidateBoneCache(memhandle_t__*)
 T Studio_LocalPoseParameter(CStudioHdr const*, float const*, mstudioseqdesc_t&, int, int, float&, int&)
 T Studio_SeqAnims(CStudioHdr const*, mstudioseqdesc_t&, int, float const*, mstudioanimdesc_t**, float*)
 T Studio_SeqMovement(CStudioHdr const*, int, float, float, float const*, Vector&, QAngle&)
 T Studio_SeqVelocity(CStudioHdr const*, int, float, float const*, Vector&)
 T Studio_SetController(CStudioHdr const*, int, float, float&)
 T Studio_SetPoseParameter(CStudioHdr const*, int, float, float&)
 T Studio_SolveIK(int, int, int, Vector&, Vector&, Vector&, matrix3x4_t*)
 T Studio_SolveIK(int, int, int, Vector&, matrix3x4_t*)
 T Studio_SolveIK(mstudioikchain_t*, Vector&, matrix3x4_t*)
 T Subdivider::SubdivideX(CNavArea*, bool, bool, int)
 T Subdivider::SubdivideY(CNavArea*, bool, bool, int)
 T SweepBoxToStudio(IPhysicsSurfaceProps*, Ray_t const&, CStudioHdr*, mstudiohitboxset_t*, matrix3x4_t**, int, CGameTrace&)
 T Sys_LoadLibrary(char const*, Sys_Flags)
 T Sys_LoadModule(char const*, Sys_Flags)
 T TAutoList<CFuncPasstimeGoal>::~TAutoList()
 T TAutoList<CPasstimeBallController>::~TAutoList()
 T TE_ArmorRicochet(IRecipientFilter&, float, Vector const*, Vector const*)
 T TE_BSPDecal(IRecipientFilter&, float, Vector const*, int, int)
 T TE_BeamEntPoint(IRecipientFilter&, float, int, Vector const*, int, Vector const*, int, int, int, int, float, float, float, int, float, int, int, int, int, int)
 T TE_BeamEnts(IRecipientFilter&, float, int, int, int, int, int, int, float, float, float, int, float, int, int, int, int, int)
 T TE_BeamFollow(IRecipientFilter&, float, int, int, int, float, float, float, float, float, float, float, float)
 T TE_BeamLaser(IRecipientFilter&, float, int, int, int, int, int, int, float, float, float, int, float, int, int, int, int, int)
 T TE_BeamPoints(IRecipientFilter&, float, Vector const*, Vector const*, int, int, int, int, float, float, float, int, float, int, int, int, int, int)
 T TE_BeamRing(IRecipientFilter&, float, int, int, int, int, int, int, float, float, int, float, int, int, int, int, int, int)
 T TE_BeamRingPoint(IRecipientFilter&, float, Vector const&, float, float, int, int, int, int, float, float, int, float, int, int, int, int, int, int)
 T TE_BeamSpline(IRecipientFilter&, float, int, Vector*)
 T TE_BloodSprite(IRecipientFilter&, float, Vector const*, Vector const*, int, int, int, int, int)
 T TE_BloodStream(IRecipientFilter&, float, Vector const*, Vector const*, int, int, int, int, int)
 T TE_BreakModel(IRecipientFilter&, float, Vector const&, QAngle const&, Vector const&, Vector const&, int, int, int, float, int)
 T TE_BubbleTrail(IRecipientFilter&, float, Vector const*, Vector const*, float, int, int, float)
 T TE_Bubbles(IRecipientFilter&, float, Vector const*, Vector const*, float, int, int, float)
 T TE_ClientProjectile(IRecipientFilter&, float, Vector const*, Vector const*, int, int, CBaseEntity*)
 T TE_Decal(IRecipientFilter&, float, Vector const*, Vector const*, int, int, int)
 T TE_DispatchEffect(IRecipientFilter&, float, Vector const&, char const*, CEffectData const&)
 T TE_Dust(IRecipientFilter&, float, Vector const&, Vector const&, float, float)
 T TE_DynamicLight(IRecipientFilter&, float, Vector const*, int, int, int, int, float, float, float)
 T TE_EnergySplash(IRecipientFilter&, float, Vector const*, Vector const*, bool)
 T TE_Explosion(IRecipientFilter&, float, Vector const*, int, float, int, int, int, int, Vector const*, unsigned char)
 T TE_FireBullets(int, Vector const&, QAngle const&, int, int, int, float, bool)
 T TE_Fizz(IRecipientFilter&, float, CBaseEntity const*, int, int, int)
 T TE_FootprintDecal(IRecipientFilter&, float, Vector const*, Vector const*, int, int, unsigned char)
 T TE_GlowSprite(IRecipientFilter&, float, Vector const*, int, float, float, int)
 T TE_KillPlayerAttachments(IRecipientFilter&, float, int)
 T TE_LargeFunnel(IRecipientFilter&, float, Vector const*, int, int)
 T TE_MetalSparks(IRecipientFilter&, float, Vector const*, Vector const*)
 T TE_MuzzleFlash(IRecipientFilter&, float, Vector const&, QAngle const&, float, int)
 T TE_PhysicsProp(IRecipientFilter&, float, int, int, Vector const&, QAngle const&, Vector const&, int, int)
 T TE_PlayerAnimEvent(CBasePlayer*, PlayerAnimEvent_t, int)
 T TE_PlayerDecal(IRecipientFilter&, float, Vector const*, int, int)
 T TE_ProjectDecal(IRecipientFilter&, float, Vector const*, QAngle const*, float, int)
 T TE_ShatterSurface(IRecipientFilter&, float, Vector const*, QAngle const*, Vector const*, Vector const*, float, float, float, ShatterSurface_t, int, int, int, int, int, int)
 T TE_ShowLine(IRecipientFilter&, float, Vector const*, Vector const*)
 T TE_Smoke(IRecipientFilter&, float, Vector const*, int, float, int)
 T TE_Sparks(IRecipientFilter&, float, Vector const*, int, int, Vector const*)
 T TE_Sprite(IRecipientFilter&, float, Vector const*, int, float, int)
 T TE_SpriteSpray(IRecipientFilter&, float, Vector const*, Vector const*, int, int, float, int)
 T TE_TFBlood(IRecipientFilter&, float, Vector const&, Vector const&, int)
 T TE_TFExplosion(IRecipientFilter&, float, Vector const&, Vector const&, int, int, int, int, int)
 T TE_TFParticleEffect(IRecipientFilter&, float, char const*, ParticleAttachment_t, CBaseEntity*, char const*, bool)
 T TE_TFParticleEffect(IRecipientFilter&, float, char const*, Vector, QAngle, CBaseEntity*, ParticleAttachment_t)
 T TE_TFParticleEffect(IRecipientFilter&, float, char const*, Vector, Vector, QAngle, CBaseEntity*)
 T TE_TFParticleEffectComplex(IRecipientFilter&, float, char const*, Vector, QAngle, te_tf_particle_effects_colors_t*, te_tf_particle_effects_control_point_t*, CBaseEntity*, ParticleAttachment_t, Vector)
 T TE_WorldDecal(IRecipientFilter&, float, Vector const*, int)
 T TFInventoryManager()
 T TFMapsWorkshop()
 T TFPlayerClassData_t::AddAdditionalPlayerDeathSounds()
 T TFPlayerClassData_t::GetDeathSound(int)
 T TFPlayerClassData_t::GetModelName() const
 T TFPlayerClassData_t::ParseData(KeyValues*)
 T TFReportedStats_t::Clear()
 T TFReportedStats_t::FindOrAddMapStats(char const*)
 T TFReportedStats_t::TFReportedStats_t()
 T TFReportedStats_t::~TFReportedStats_t()
 T TFTeamMgr()
 T TF_EditClearAllAttributes()
 T TF_EditClearAttribute(CCommand const&)
 T TF_EditMarkAttribute(CCommand const&)
 T TF_EditSelectWithAttribute(CCommand const&)
 T TF_Gamestats_KillStats_t::TF_Gamestats_KillStats_t()
 T TF_Gamestats_KillStats_t::~TF_Gamestats_KillStats_t()
 T TF_Gamestats_LevelStats_t::Accumulate(TF_Gamestats_LevelStats_t*)
 T TF_Gamestats_LevelStats_t::Init(char const*, int, int, short, float)
 T TF_Gamestats_LevelStats_t::TF_Gamestats_LevelStats_t()
 T TF_Gamestats_LevelStats_t::~TF_Gamestats_LevelStats_t()
 T TF_Gamestats_RoundStats_t::Reset()
 T TF_Gamestats_RoundStats_t::TF_Gamestats_RoundStats_t()
 T TF_Gamestats_RoundStats_t::~TF_Gamestats_RoundStats_t()
 T TF_IsHolidayActive(int)
 T TaskFailureToString(int)
 T TeleportNearVictim(CTFBot*, CTFPlayer*, int)
 T Templates_Add(CBaseEntity*, char const*, int)
 T Templates_FindByIndex(int)
 T Templates_FindByTargetName(char const*)
 T Templates_GetEntityIOFixedMapData(int)
 T Templates_GetStringSize(int)
 T Templates_IndexRequiresEntityIOFixup(int)
 T Templates_ReconnectIOForGroup(CPointTemplate*)
 T Templates_StartUniqueInstance()
 T TestAndBlockOverlappingAreas(CBaseEntity*)
 T TestForValidCrouchArea(CNavNode*)
 T TestOverlapping::OverlapsExistingArea()
 T TestRR(CCommand const&)
 T TestSpawnPointType(char const*)
 T TestSpawns()
 T TestVCD(CCommand const&)
 T Test_CreateEntity(CCommand const&)
 T Test_InitRandomEntitySpawner(CCommand const&)
 T Test_ProxyToggle_EnableProxy(CCommand const&)
 T Test_ProxyToggle_SetValue(CCommand const&)
 T Test_RandomPlayerPosition()
 T Test_RandomizeInPVS(CCommand const&)
 T Test_RemoveAllRandomEntities()
 T Test_SpawnRandomEntities(CCommand const&)
 T TextToSoundLevel(char const*)
 T TheNextBots()
 T TheTFBots()
 T TheTacticalMissions()
 T ThinkRebalanceCompare(AIRebalanceInfo_t const*, AIRebalanceInfo_t const*)
 T TimedEventMgr_LessFunc(CEventRegister* const&, CEventRegister* const&)
 T TimescaleChanged(IConVar*, char const*, float)
 T TraceAdjacentNode(int, Vector const&, Vector const&, CGameTrace*, float)
 T TracePlayerBBoxForGround(Vector const&, Vector const&, Vector const&, Vector const&, IHandleEntity*, unsigned int, int, CGameTrace&)
 T TraceToStudio(IPhysicsSurfaceProps*, Ray_t const&, CStudioHdr*, mstudiohitboxset_t*, matrix3x4_t**, int, Vector const&, float, CGameTrace&)
 T TrainSpeed(int, int)
 T TransferChildren(CBaseEntity*, CBaseEntity*)
 T TransferPhysicsObject(CBaseEntity*, CBaseEntity*, bool)
 T TransformAABB(matrix3x4_t const&, Vector const&, Vector const&, Vector&, Vector&)
 T TranslateWeaponEntForClass(char const*, int)
 T UTIL_AddDebugLine(Vector const&, Vector const&, bool, bool)
 T UTIL_BloodDecalTrace(CGameTrace*, int)
 T UTIL_BloodDrips(Vector const&, Vector const&, int, int)
 T UTIL_BloodStream(Vector const&, Vector const&, int, int)
 T UTIL_Bubbles(Vector const&, Vector const&, int)
 T UTIL_CalculateHolidays()
 T UTIL_CheckBottom(CBaseEntity*, ITraceFilter*, float)
 T UTIL_ClearTrace(CGameTrace&)
 T UTIL_ClientPVSIsExpanded()
 T UTIL_ClientPrintAll(int, char const*, char const*, char const*, char const*, char const*)
 T UTIL_ClientPrintFilter(IRecipientFilter&, int, char const*, char const*, char const*, char const*, char const*)
 T UTIL_ColorStringToLinearFloatColor(Vector&, char const*)
 T UTIL_CreateScaledPhysObject(CBaseAnimating*, float)
 T UTIL_DecalTrace(CGameTrace*, char const*)
 T UTIL_DecodeICE(unsigned char*, int, unsigned char const*)
 T UTIL_DisableRemoveImmediate()
 T UTIL_DrawOverlayLines()
 T UTIL_DrawPositioningOverlay(float)
 T UTIL_DropToFloor(CBaseEntity*, unsigned int, CBaseEntity*)
 T UTIL_EmitAmbientSound(int, Vector const&, char const*, float, soundlevel_t, int, int, float, float*)
 T UTIL_EmitGroupIDSuit(edict_t*, int)
 T UTIL_EmitGroupnameSuit(edict_t*, char const*)
 T UTIL_EmitSoundSuit(edict_t*, char const*)
 T UTIL_EnableRemoveImmediate()
 T UTIL_EntitiesAlongRay(Ray_t const&, CFlaggedEntitiesEnum*)
 T UTIL_EntitiesInBox(Vector const&, Vector const&, CFlaggedEntitiesEnum*)
 T UTIL_EntitiesInPVS(CBaseEntity*, CBaseEntity*)
 T UTIL_EntitiesInSphere(Vector const&, float, CFlaggedEntitiesEnum*)
 T UTIL_EntityByIndex(int)
 T UTIL_EntityHasMatchingRootParent(CBaseEntity*, CBaseEntity*)
 T UTIL_EntityInSolid(CBaseEntity*)
 T UTIL_FindClientInPVS(Vector const&, Vector const&)
 T UTIL_FindClientInPVS(edict_t*)
 T UTIL_FindClientInVisibilityPVS(edict_t*)
 T UTIL_FreeFile(unsigned char*)
 T UTIL_GetActiveHolidayString()
 T UTIL_GetCommandClient()
 T UTIL_GetCommandClientIndex()
 T UTIL_GetDebugColorForRelationship(int, int&, int&, int&)
 T UTIL_GetHolidayForString(char const*)
 T UTIL_GetListenServerHost()
 T UTIL_GetLocalPlayer()
 T UTIL_GetModDir(char*, unsigned int)
 T UTIL_GetPlayerConnectionInfo(int, int&, int&)
 T UTIL_HudHintText(CBaseEntity*, char const*)
 T UTIL_HudMessage(CBasePlayer*, hudtextparms_s const&, char const*)
 T UTIL_HudMessageAll(hudtextparms_s const&, char const*)
 T UTIL_ImpactTrace(CGameTrace*, int, char const*)
 T UTIL_IsCommandIssuedByServerAdmin()
 T UTIL_IsFacingWithinTolerance(CBaseEntity*, Vector const&, float, float*)
 T UTIL_IsHolidayActive(int)
 T UTIL_IsLowViolence()
 T UTIL_IsMasterTriggered(string_t, CBaseEntity*)
 T UTIL_IsSpaceEmpty(CBaseEntity*, Vector const&, Vector const&)
 T UTIL_ItemCanBeTouchedByPlayer(CBaseEntity*, CBasePlayer*)
 T UTIL_LoadFileForMe(char const*, int*)
 T UTIL_LogPrintf(char const*, ...)
 T UTIL_ParentToWorldSpace(CBaseEntity*, Vector&, QAngle&)
 T UTIL_ParentToWorldSpace(CBaseEntity*, Vector&, Quaternion&)
 T UTIL_PlayerByIndex(int)
 T UTIL_PlayerByName(char const*)
 T UTIL_PlayerBySteamID(CSteamID const&)
 T UTIL_PlayerByUserId(int)
 T UTIL_PlayerDecalTrace(CGameTrace*, int)
 T UTIL_PointAtEntity(CBaseEntity*, CBaseEntity*)
 T UTIL_PointAtNamedEntity(CBaseEntity*, string_t)
 T UTIL_PrecacheDecal(char const*, bool)
 T UTIL_PrecacheOther(char const*, char const*)
 T UTIL_RandomBloodVector()
 T UTIL_Remove(CBaseEntity*)
 T UTIL_Remove(IServerNetworkable*)
 T UTIL_RemoveHierarchy(CBaseEntity*)
 T UTIL_RemoveImmediate(CBaseEntity*)
 T UTIL_RestartAmbientSounds()
 T UTIL_SayText2Filter(IRecipientFilter&, CBasePlayer*, bool, char const*, char const*, char const*, char const*, char const*)
 T UTIL_SayTextFilter(IRecipientFilter&, char const*, CBasePlayer*, bool)
 T UTIL_ScaleForGravity(float)
 T UTIL_ScreenFade(CBaseEntity*, color32_s const&, float, float, int)
 T UTIL_ScreenFadeAll(color32_s const&, float, float, int)
 T UTIL_ScreenFadeWrite(ScreenFade_t const&, CBaseEntity*)
 T UTIL_ScreenShake(Vector const&, float, float, float, float, ShakeCommand_t, bool)
 T UTIL_SetClientVisibilityPVS(edict_t*, unsigned char const*, int)
 T UTIL_SetModel(CBaseEntity*, char const*)
 T UTIL_SetOrigin(CBaseEntity*, Vector const&, bool)
 T UTIL_SetSize(CBaseEntity*, Vector const&, Vector const&)
 T UTIL_ShouldShowBlood(int)
 T UTIL_ShowMessage(char const*, CBasePlayer*)
 T UTIL_ShowMessageAll(char const*)
 T UTIL_Smoke(Vector const&, float, float)
 T UTIL_SnapDirectionToAxis(Vector&, float)
 T UTIL_StringToColor32(color32_s*, char const*)
 T UTIL_StringToFloatArray(float*, int, char const*)
 T UTIL_StringToIntArray(int*, int, char const*)
 T UTIL_StringToVector(float*, char const*)
 T UTIL_StripToken(char const*, char*)
 T UTIL_TraceEntity(CBaseEntity*, Vector const&, Vector const&, unsigned int, CGameTrace*)
 T UTIL_TraceEntity(CBaseEntity*, Vector const&, Vector const&, unsigned int, IHandleEntity const*, int, CGameTrace*)
 T UTIL_TraceEntity(CBaseEntity*, Vector const&, Vector const&, unsigned int, ITraceFilter*, CGameTrace*)
 T UTIL_TraceLineFilterEntity(CBaseEntity*, Vector const&, Vector const&, unsigned int, int, CGameTrace*)
 T UTIL_TraceModel(Vector const&, Vector const&, Vector const&, Vector const&, CBaseEntity*, int, CGameTrace*)
 T UTIL_Tracer(Vector const&, Vector const&, int, int, float, bool, char const*, int)
 T UTIL_TransferPoseParameters(CBaseEntity*, CBaseEntity*)
 T UTIL_ValidateSoundName(string_t&, char const*)
 T UTIL_VarArgs(char const*, ...)
 T UTIL_VecToPitch(Vector const&)
 T UTIL_VecToYaw(Vector const&)
 T UTIL_ViewPunch(Vector const&, QAngle, float, bool)
 T UTIL_WaterLevel(Vector const&, float, float)
 T UTIL_WorldToParentSpace(CBaseEntity*, Vector&, QAngle&)
 T UTIL_WorldToParentSpace(CBaseEntity*, Vector&, Quaternion&)
 T UTIL_YawToVector(float)
 T UniqueIdFromString(UniqueId_t*, char const*, int)
 T UnlinkChild(CBaseEntity*, CBaseEntity*)
 T UnlinkFromParent(CBaseEntity*)
 T Unserialize(CUtlBuffer&, CUtlBinaryBlock&)
 T Unserialize(CUtlBuffer&, CUtlString&)
 T Unserialize(CUtlBuffer&, Color&)
 T Unserialize(CUtlBuffer&, QAngle&)
 T Unserialize(CUtlBuffer&, Quaternion&)
 T Unserialize(CUtlBuffer&, UniqueId_t&)
 T Unserialize(CUtlBuffer&, VMatrix&)
 T Unserialize(CUtlBuffer&, Vector&)
 T Unserialize(CUtlBuffer&, Vector2D&)
 T Unserialize(CUtlBuffer&, Vector4D&)
 T Unserialize(CUtlBuffer&, bool&)
 T Unserialize(CUtlBuffer&, float&)
 T Unserialize(CUtlBuffer&, int&)
 T UnserializeDMX(CUtlBuffer&, CDmxElement**, char const*)
 T UnserializeTextDMX(char const*, CUtlBuffer&, CDmxElement**)
 T UpdateAllClientData()
 T UpdateQueryCache()
 T UserMessageBegin(IRecipientFilter&, char const*)
 T UtlStringCaseInsensitiveLessFunc(CUtlString const&, CUtlString const&)
 T UtlStringLessFunc(CUtlString const&, CUtlString const&)
 T UtlVectorTemplate<CAnimationLayer, CUtlMemory<CAnimationLayer, int> >::EnsureCapacity(void*, int, int)
 T UtlVectorTemplate<CEconItemAttribute, CUtlMemory<CEconItemAttribute, int> >::EnsureCapacity(void*, int, int)
 T UtlVectorTemplate<CHandle<CBaseFlex>, CUtlMemory<CHandle<CBaseFlex>, int> >::EnsureCapacity(void*, int, int)
 T UtlVectorTemplate<CHandle<CEconWearable>, CUtlMemory<CHandle<CEconWearable>, int> >::EnsureCapacity(void*, int, int)
 T UtlVectorTemplate<condition_source_t, CUtlMemory<condition_source_t, int> >::EnsureCapacity(void*, int, int)
 T UtlVectorTemplate<int, CUtlMemory<int, int> >::EnsureCapacity(void*, int, int)
 T VMatrix::InverseTR(VMatrix&) const
 T VMatrix::MatrixMul(VMatrix const&, VMatrix&) const
 T VMatrix::SetupMatrixOrgAngles(Vector const&, QAngle const&)
 T VMatrix::Transpose() const
 T VMatrix::operator=(VMatrix const&)
 T V_DefaultExtension(char*, char const*, int)
 T V_ExtractFileExtension(char const*, char*, int)
 T V_FileBase(char const*, char*, int)
 T V_FixSlashes(char*, char)
 T V_GetFileExtension(char const*)
 T V_IsAbsolutePath(char const*)
 T V_MakeAbsolutePath(char*, int, char const*, char const*)
 T V_RemoveDotSlashes(char*, char, bool)
 T V_SetExtension(char*, char const*, int)
 T V_SplitString(char const*, char const*, CUtlVector<char*, CUtlMemory<char*, int> >&)
 T V_SplitString2(char const*, char const**, int, CUtlVector<char*, CUtlMemory<char*, int> >&)
 T V_StripExtension(char const*, char*, int)
 T V_StripFilename(char*)
 T V_StripLastDir(char*, int)
 T V_StripTrailingSlash(char*)
 T V_atof(char const*)
 T V_atoi(char const*)
 T V_atoi64(char const*)
 T V_atoui64(char const*)
 T V_snprintf(char*, int, char const*, ...)
 T V_stricmp(char const*, char const*)
 T V_stristr(char const*, char const*)
 T V_stristr(char*, char const*)
 T V_strlower(char*)
 T V_strncat(char*, char const*, unsigned long, int)
 T V_strnchr(char const*, char, int)
 T V_strncmp(char const*, char const*, int)
 T V_strncpy(char*, char const*, int)
 T V_strnicmp(char const*, char const*, int)
 T V_strnistr(char const*, char const*, int)
 T V_vsnprintf(char*, int, char const*, char*)
 T V_vsnprintfRet(char*, int, char const*, char*, bool*)
 T V_vsnwprintf(wchar_t*, int, wchar_t const*, char*)
 T V_wcsncpy(wchar_t*, wchar_t const*, int)
 T ValidateCapturesPerRound(IConVar*, char const*, float)
 T VecCheckToss(CBaseEntity*, ITraceFilter*, Vector, Vector, float, float, bool, Vector*, Vector*)
 T VecCheckToss(CBaseEntity*, Vector, Vector, float, float, bool, Vector*, Vector*)
 T Vector const& CNetworkVarBase<Vector, CBaseObject::NetworkVar_m_vecBuildMins>::operator-=<Vector>(Vector const&)
 T VectorAngles(Vector const&, QAngle&)
 T VectorAngles(Vector const&, Vector const&, QAngle&)
 T VectorIRotate(float const*, matrix3x4_t const&, float*)
 T VectorITransform(float const*, matrix3x4_t const&, float*)
 T VectorRotate(float const*, matrix3x4_t const&, float*)
 T VectorTransform(float const*, matrix3x4_t const&, float*)
 T VectorVectors(Vector const&, Vector&, Vector&)
 T VectorYawRotate(Vector const&, float, Vector&)
 T VerifyPaintKitComposite(KeyValues*, char const*, int, CUtlVector<CUtlString, CUtlMemory<CUtlString, int> >*)
 T VerifySequenceIndex(CStudioHdr*)
 T VisionTraceFilterFunction(IHandleEntity*, int)
 T W_Precache()
 T WatchPositionChanges(CBaseEntity*, CBaseEntity*)
 T WaveTrace(char const*, char const*)
 T WeaponID_IsSniperRifle(int)
 T WeaponID_IsSniperRifleOrBow(int)
 T WeaponIdToAlias(int)
 T WeaponManager_AmmoMod(CBaseCombatWeapon*)
 T WinlimitChanged(IConVar*, char const*, float)
 T WorldSpaceSlerp(CStudioHdr const*, Quaternion*, Vector*, mstudioseqdesc_t&, int, Quaternion const*, Vector const*, float, int)
 T _InvRSquared(float const*)
 T _SSE_InvRSquared(float const*)
 T _SSE_RSqrtAccurate(float)
 T _SSE_RSqrtFast(float)
 T _SSE_Sqrt(float)
 T _SSE_VectorNormalizeFast(Vector&)
 T _VectorNormalize(Vector&)
 T _VectorNormalizeFast(Vector&)
 T __CreateGameRules_CMultiplayRules()
 T __CreateGameRules_CTFGameRules()
 T __CreateGameRules_CTeamplayRules()
 T __clang_call_terminate
 T __gnu_cxx::__normal_iterator<unsigned int*, std::vector<unsigned int, std::allocator<unsigned int> > > std::fill_n<__gnu_cxx::__normal_iterator<unsigned int*, std::vector<unsigned int, std::allocator<unsigned int> > >, unsigned long, unsigned int>(__gnu_cxx::__normal_iterator<unsigned int*, std::vector<unsigned int, std::allocator<unsigned int> > >, unsigned long, unsigned int const&)
 T __gnu_cxx::new_allocator<std::pair<std::pair<std::string, int> const, std::pair<void const*, int> > >::construct(std::pair<std::pair<std::string, int> const, std::pair<void const*, int> >*, std::pair<std::pair<std::string, int> const, std::pair<void const*, int> > const&)
 T __gnu_cxx::new_allocator<std::pair<std::string const, std::pair<void const*, int> > >::construct(std::pair<std::string const, std::pair<void const*, int> >*, std::pair<std::string const, std::pair<void const*, int> > const&)
 T __gnu_cxx::new_allocator<std::string>::construct(std::string*, std::string const&)
 T _rsqrtf(float)
 T _sqrtf(float)
 T bf_read::ReadBits(void*, int)
 T bf_read::ReadFloat()
 T bf_read::SetOverflowFlag()
 T bf_write::WriteBitAngles(QAngle const&)
 T bf_write::WriteBitCoord(float)
 T bf_write::WriteBitVec3Coord(Vector const&)
 T bf_write::WriteBits(void const*, int)
 T bf_write::WriteByte(int)
 T bf_write::WriteChar(int)
 T bf_write::WriteFloat(float)
 T bf_write::WriteLong(long)
 T bf_write::WriteShort(int)
 T bf_write::WriteString(char const*)
 T bf_write::WriteWord(int)
 T bool CNavArea::ForAllCompletelyVisibleAreas<CollectInvasionAreas>(CollectInvasionAreas&)
 T bool CNavArea::ForAllCompletelyVisibleAreas<MarkVisibleSet>(MarkVisibleSet&)
 T bool CNavArea::ForAllCompletelyVisibleAreas<NavAreaCollector>(NavAreaCollector&)
 T bool CNavArea::ForAllPotentiallyVisibleAreas<CFindClosestPotentiallyVisibleAreaToPos>(CFindClosestPotentiallyVisibleAreaToPos&)
 T bool CNavArea::ForAllPotentiallyVisibleAreas<CTFAreaCollector>(CTFAreaCollector&)
 T bool CNavArea::ForAllPotentiallyVisibleAreas<NavAreaCollector>(NavAreaCollector&)
 T bool CNavMesh::ForAllAreasInRadius<NavAreaCollector>(NavAreaCollector&, Vector const&, float)
 T bool CNavMesh::ForAllAreasOverlappingExtent<CCollectAndLabelSpawnRoomAreas>(CCollectAndLabelSpawnRoomAreas&, Extent const&)
 T bool CNavMesh::ForAllAreasOverlappingExtent<CFuncNavBlocker>(CFuncNavBlocker&, Extent const&)
 T bool CNavMesh::ForAllAreasOverlappingExtent<CFuncNavObstruction>(CFuncNavObstruction&, Extent const&)
 T bool CNavMesh::ForAllAreasOverlappingExtent<COverlapCheck>(COverlapCheck&, Extent const&)
 T bool CNavMesh::ForAllAreasOverlappingExtent<CRegisterPrerequisite>(CRegisterPrerequisite&, Extent const&)
 T bool CNavMesh::ForAllAreasOverlappingExtent<NavAreaCollector>(NavAreaCollector&, Extent const&)
 T bool CNavMesh::ForAllSelectedAreas<CTFAttributeToggler>(CTFAttributeToggler&)
 T bool CNavMesh::StitchMesh<AreaSet>(AreaSet&)
 T bool CNavMesh::StitchMesh<IncrementallyGeneratedAreas>(IncrementallyGeneratedAreas&)
 T bool CryptoPP::Hack_GetValueIntoConstReference<CryptoPP::Integer>(CryptoPP::NameValuePairs const&, char const*, CryptoPP::Integer const&)
 T bool ForEachPlayer<CCountClassMembers>(CCountClassMembers&)
 T bool ForEachPlayer<DisableAutokick>(DisableAutokick&)
 T bool NavAreaBuildPath<CHeadlessHatmanPathCost>(CNavArea*, CNavArea*, Vector const*, CHeadlessHatmanPathCost&, CNavArea**, float, int, bool)
 T bool NavAreaBuildPath<CMerasmusPathCost>(CNavArea*, CNavArea*, Vector const*, CMerasmusPathCost&, CNavArea**, float, int, bool)
 T bool NavAreaBuildPath<CRobotPathCost>(CNavArea*, CNavArea*, Vector const*, CRobotPathCost&, CNavArea**, float, int, bool)
 T bool NavAreaBuildPath<CSimpleBotPathCost>(CNavArea*, CNavArea*, Vector const*, CSimpleBotPathCost&, CNavArea**, float, int, bool)
 T bool NavAreaBuildPath<CTFBotPathCost>(CNavArea*, CNavArea*, Vector const*, CTFBotPathCost&, CNavArea**, float, int, bool)
 T bool NavAreaBuildPath<CTFPlayertPathCost>(CNavArea*, CNavArea*, Vector const*, CTFPlayertPathCost&, CNavArea**, float, int, bool)
 T bool NavAreaBuildPath<CZombiePathCost>(CNavArea*, CNavArea*, Vector const*, CZombiePathCost&, CNavArea**, float, int, bool)
 T bool NavAreaBuildPath<IPathCost const>(CNavArea*, CNavArea*, Vector const*, IPathCost const&, CNavArea**, float, int, bool)
 T bool NavAreaBuildPath<ShortestPathCost>(CNavArea*, CNavArea*, Vector const*, ShortestPathCost&, CNavArea**, float, int, bool)
 T bool Path::Compute<CHeadlessHatmanPathCost>(INextBot*, CBaseCombatCharacter*, CHeadlessHatmanPathCost&, float, bool)
 T bool Path::Compute<CHeadlessHatmanPathCost>(INextBot*, Vector const&, CHeadlessHatmanPathCost&, float, bool)
 T bool Path::Compute<CMerasmusPathCost>(INextBot*, CBaseCombatCharacter*, CMerasmusPathCost&, float, bool)
 T bool Path::Compute<CMerasmusPathCost>(INextBot*, Vector const&, CMerasmusPathCost&, float, bool)
 T bool Path::Compute<CRobotPathCost>(INextBot*, Vector const&, CRobotPathCost&, float, bool)
 T bool Path::Compute<CSimpleBotPathCost>(INextBot*, Vector const&, CSimpleBotPathCost&, float, bool)
 T bool Path::Compute<CTFBotPathCost>(INextBot*, CBaseCombatCharacter*, CTFBotPathCost&, float, bool)
 T bool Path::Compute<CTFBotPathCost>(INextBot*, Vector const&, CTFBotPathCost&, float, bool)
 T bool Path::Compute<CZombiePathCost>(INextBot*, CBaseCombatCharacter*, CZombiePathCost&, float, bool)
 T bool Path::Compute<IPathCost const>(INextBot*, CBaseCombatCharacter*, IPathCost const&, float, bool)
 T bool Path::Compute<IPathCost const>(INextBot*, Vector const&, IPathCost const&, float, bool)
 T bool Path::Compute<ShortestPathCost>(INextBot*, Vector const&, ShortestPathCost&, float, bool)
 T bool Unserialize<CUtlBinaryBlock>(CUtlBuffer&, CUtlVector<CUtlBinaryBlock, CUtlMemory<CUtlBinaryBlock, int> >&)
 T bool Unserialize<CUtlString>(CUtlBuffer&, CUtlVector<CUtlString, CUtlMemory<CUtlString, int> >&)
 T bool Unserialize<Color>(CUtlBuffer&, CUtlVector<Color, CUtlMemory<Color, int> >&)
 T bool Unserialize<QAngle>(CUtlBuffer&, CUtlVector<QAngle, CUtlMemory<QAngle, int> >&)
 T bool Unserialize<Quaternion>(CUtlBuffer&, CUtlVector<Quaternion, CUtlMemory<Quaternion, int> >&)
 T bool Unserialize<UniqueId_t>(CUtlBuffer&, CUtlVector<UniqueId_t, CUtlMemory<UniqueId_t, int> >&)
 T bool Unserialize<VMatrix>(CUtlBuffer&, CUtlVector<VMatrix, CUtlMemory<VMatrix, int> >&)
 T bool Unserialize<Vector2D>(CUtlBuffer&, CUtlVector<Vector2D, CUtlMemory<Vector2D, int> >&)
 T bool Unserialize<Vector4D>(CUtlBuffer&, CUtlVector<Vector4D, CUtlMemory<Vector4D, int> >&)
 T bool Unserialize<Vector>(CUtlBuffer&, CUtlVector<Vector, CUtlMemory<Vector, int> >&)
 T bool Unserialize<bool>(CUtlBuffer&, CUtlVector<bool, CUtlMemory<bool, int> >&)
 T bool Unserialize<float>(CUtlBuffer&, CUtlVector<float, CUtlMemory<float, int> >&)
 T bool Unserialize<int>(CUtlBuffer&, CUtlVector<int, CUtlMemory<int, int> >&)
 T bool const& CNetworkVarBase<bool, CBaseObject::NetworkVar_m_bCarryDeploy>::operator=<bool>(bool const&)
 T bool const& CNetworkVarBase<bool, CBasePlayer::NetworkVar_m_fOnTarget>::operator=<bool>(bool const&)
 T bool const& CNetworkVarBase<bool, CColorCorrection::NetworkVar_m_bEnabled>::operator=<bool>(bool const&)
 T bool const& CNetworkVarBase<bool, CSceneEntity::NetworkVar_m_bPaused>::operator=<bool>(bool const&)
 T bool const& CNetworkVarBase<bool, CTFKnife::NetworkVar_m_bReadyToBackstab>::operator=<bool>(bool const&)
 T bool const& CNetworkVarBase<bool, CTFPlayer::NetworkVar_m_bIsReadyToHighFive>::operator=<bool>(bool const&)
 T bool const& CNetworkVarBase<bool, CWeaponMedigun::NetworkVar_m_bAttacking>::operator=<bool>(bool const&)
 T bool const& CNetworkVarBase<bool, CWeaponMedigun::NetworkVar_m_bChargeRelease>::operator=<bool>(bool const&)
 T botdata_t::Bot_AliveMovementThink(QAngle*, Vector*)
 T botdata_t::Bot_AliveMovementThink_ExtendFeelers(QAngle*, Vector*, Vector*)
 T botdata_t::Bot_AliveThink(QAngle*, Vector*)
 T botdata_t::Bot_AliveWeaponThink(QAngle*, Vector*)
 T botdata_t::Bot_ItemTestingThink(QAngle*, Vector*)
 T botdata_t::ComputePathPositions()
 T botdata_t::FindEnemyTarget()
 T botdata_t::FindPathTo(Vector)
 T botdata_t::FinishCommand()
 T botdata_t::RunAttackPlan()
 T botdata_t::RunDefendPlan()
 T botdata_t::UpdatePath()
 T botdata_t::UpdatePlanForCommand()
 T botdata_t::ValidTargetPlayer(CTFPlayer*, Vector const&, Vector const&)
 T cc_CreatePredictionError_f()
 T cc_GotoNextMapInCycle()
 T cc_RandomMap(CCommand const&)
 T cc_ScrambleTeams(CCommand const&)
 T cc_ShowRespawnTimes()
 T cc_SkipNextMapInCycle()
 T cc_SwitchTeams(CCommand const&)
 T cc_bot_kill(CCommand const&)
 T cc_bot_sendcommand(CCommand const&)
 T cc_powerup_mode(IConVar*, char const*, float)
 T cc_tf_forced_holiday_changed(IConVar*, char const*, float)
 T cc_tf_medieval_changed(IConVar*, char const*, float)
 T cc_tf_rd_max_points_override(IConVar*, char const*, float)
 T cc_tf_stopwatch_changed(IConVar*, char const*, float)
 T char* std::string::_S_construct<char*>(char*, char*, std::allocator<char> const&, std::forward_iterator_tag)
 T condition_source_t::NetworkStateChanged()
 T condition_source_t::NetworkStateChanged(void*)
 T datamap_t* DataMapInit<AISquadEnemyInfo_t>(AISquadEnemyInfo_t*)
 T datamap_t* DataMapInit<CAI_AllySpeechManager>(CAI_AllySpeechManager*)
 T datamap_t* DataMapInit<CAI_BaseActor>(CAI_BaseActor*)
 T datamap_t* DataMapInit<CAI_BaseNPC>(CAI_BaseNPC*)
 T datamap_t* DataMapInit<CAI_BasePhysicsFlyingBot>(CAI_BasePhysicsFlyingBot*)
 T datamap_t* DataMapInit<CAI_BattleLine>(CAI_BattleLine*)
 T datamap_t* DataMapInit<CAI_FollowBehavior>(CAI_FollowBehavior*)
 T datamap_t* DataMapInit<CAI_GoalEntity>(CAI_GoalEntity*)
 T datamap_t* DataMapInit<CAI_Hint>(CAI_Hint*)
 T datamap_t* DataMapInit<CAI_LeadGoal>(CAI_LeadGoal*)
 T datamap_t* DataMapInit<CAI_Motor>(CAI_Motor*)
 T datamap_t* DataMapInit<CAI_Navigator>(CAI_Navigator*)
 T datamap_t* DataMapInit<CAI_NetworkManager>(CAI_NetworkManager*)
 T datamap_t* DataMapInit<CAI_Path>(CAI_Path*)
 T datamap_t* DataMapInit<CAI_PlayerAlly>(CAI_PlayerAlly*)
 T datamap_t* DataMapInit<CAI_RadialLinkController>(CAI_RadialLinkController*)
 T datamap_t* DataMapInit<CAI_Relationship>(CAI_Relationship*)
 T datamap_t* DataMapInit<CAI_ScriptConditions>(CAI_ScriptConditions*)
 T datamap_t* DataMapInit<CAI_ScriptedSchedule>(CAI_ScriptedSchedule*)
 T datamap_t* DataMapInit<CAI_ScriptedSentence>(CAI_ScriptedSentence*)
 T datamap_t* DataMapInit<CAI_ScriptedSequence>(CAI_ScriptedSequence*)
 T datamap_t* DataMapInit<CAI_Senses>(CAI_Senses*)
 T datamap_t* DataMapInit<CAI_Squad>(CAI_Squad*)
 T datamap_t* DataMapInit<CAmbientGeneric>(CAmbientGeneric*)
 T datamap_t* DataMapInit<CAnimationLayer>(CAnimationLayer*)
 T datamap_t* DataMapInit<CArenaLogic>(CArenaLogic*)
 T datamap_t* DataMapInit<CAssaultPoint>(CAssaultPoint*)
 T datamap_t* DataMapInit<CAttributeManager>(CAttributeManager*)
 T datamap_t* DataMapInit<CBaseAnimating>(CBaseAnimating*)
 T datamap_t* DataMapInit<CBaseAnimatingOverlay>(CBaseAnimatingOverlay*)
 T datamap_t* DataMapInit<CBaseButton>(CBaseButton*)
 T datamap_t* DataMapInit<CBaseCombatCharacter>(CBaseCombatCharacter*)
 T datamap_t* DataMapInit<CBaseCombatWeapon>(CBaseCombatWeapon*)
 T datamap_t* DataMapInit<CBaseDoor>(CBaseDoor*)
 T datamap_t* DataMapInit<CBaseEntity>(CBaseEntity*)
 T datamap_t* DataMapInit<CBaseEntityOutput>(CBaseEntityOutput*)
 T datamap_t* DataMapInit<CBaseFilter>(CBaseFilter*)
 T datamap_t* DataMapInit<CBaseGrenade>(CBaseGrenade*)
 T datamap_t* DataMapInit<CBaseGrenadeConcussion>(CBaseGrenadeConcussion*)
 T datamap_t* DataMapInit<CBaseNPCMaker>(CBaseNPCMaker*)
 T datamap_t* DataMapInit<CBaseObject>(CBaseObject*)
 T datamap_t* DataMapInit<CBasePlatTrain>(CBasePlatTrain*)
 T datamap_t* DataMapInit<CBasePlayer>(CBasePlayer*)
 T datamap_t* DataMapInit<CBasePropDoor>(CBasePropDoor*)
 T datamap_t* DataMapInit<CBaseServerVehicle>(CBaseServerVehicle*)
 T datamap_t* DataMapInit<CBaseTeamObjectiveResource>(CBaseTeamObjectiveResource*)
 T datamap_t* DataMapInit<CBaseTrigger>(CBaseTrigger*)
 T datamap_t* DataMapInit<CBaseViewModel>(CBaseViewModel*)
 T datamap_t* DataMapInit<CBoneFollowerManager>(CBoneFollowerManager*)
 T datamap_t* DataMapInit<CBreakable>(CBreakable*)
 T datamap_t* DataMapInit<CBreakableProp>(CBreakableProp*)
 T datamap_t* DataMapInit<CBreakableSurface>(CBreakableSurface*)
 T datamap_t* DataMapInit<CBubbling>(CBubbling*)
 T datamap_t* DataMapInit<CCPTimerLogic>(CCPTimerLogic*)
 T datamap_t* DataMapInit<CCaptureFlag>(CCaptureFlag*)
 T datamap_t* DataMapInit<CCaptureZone>(CCaptureZone*)
 T datamap_t* DataMapInit<CChangeLevel>(CChangeLevel*)
 T datamap_t* DataMapInit<CColorCorrection>(CColorCorrection*)
 T datamap_t* DataMapInit<CColorCorrectionVolume>(CColorCorrectionVolume*)
 T datamap_t* DataMapInit<CCommentaryAuto>(CCommentaryAuto*)
 T datamap_t* DataMapInit<CCommentarySystem>(CCommentarySystem*)
 T datamap_t* DataMapInit<CCompetitiveLogic>(CCompetitiveLogic*)
 T datamap_t* DataMapInit<CCopyRecipientFilter>(CCopyRecipientFilter*)
 T datamap_t* DataMapInit<CCredits>(CCredits*)
 T datamap_t* DataMapInit<CDecal>(CDecal*)
 T datamap_t* DataMapInit<CDynamicLight>(CDynamicLight*)
 T datamap_t* DataMapInit<CDynamicProp>(CDynamicProp*)
 T datamap_t* DataMapInit<CEmbers>(CEmbers*)
 T datamap_t* DataMapInit<CEntityDissolve>(CEntityDissolve*)
 T datamap_t* DataMapInit<CEntityFlame>(CEntityFlame*)
 T datamap_t* DataMapInit<CEnvBeam>(CEnvBeam*)
 T datamap_t* DataMapInit<CEnvEffectsScript>(CEnvEffectsScript*)
 T datamap_t* DataMapInit<CEnvEntityMaker>(CEnvEntityMaker*)
 T datamap_t* DataMapInit<CEnvExplosion>(CEnvExplosion*)
 T datamap_t* DataMapInit<CEnvFade>(CEnvFade*)
 T datamap_t* DataMapInit<CEnvFireSensor>(CEnvFireSensor*)
 T datamap_t* DataMapInit<CEnvGlobal>(CEnvGlobal*)
 T datamap_t* DataMapInit<CEnvGunfire>(CEnvGunfire*)
 T datamap_t* DataMapInit<CEnvLaser>(CEnvLaser*)
 T datamap_t* DataMapInit<CEnvMicrophone>(CEnvMicrophone*)
 T datamap_t* DataMapInit<CEnvPlayerSurfaceTrigger>(CEnvPlayerSurfaceTrigger*)
 T datamap_t* DataMapInit<CEnvProjectedTexture>(CEnvProjectedTexture*)
 T datamap_t* DataMapInit<CEnvScreenOverlay>(CEnvScreenOverlay*)
 T datamap_t* DataMapInit<CEnvShake>(CEnvShake*)
 T datamap_t* DataMapInit<CEnvSoundscape>(CEnvSoundscape*)
 T datamap_t* DataMapInit<CEnvSpark>(CEnvSpark*)
 T datamap_t* DataMapInit<CEnvTonemapController>(CEnvTonemapController*)
 T datamap_t* DataMapInit<CEnvTracer>(CEnvTracer*)
 T datamap_t* DataMapInit<CEnvWind>(CEnvWind*)
 T datamap_t* DataMapInit<CExtraMapEntity>(CExtraMapEntity*)
 T datamap_t* DataMapInit<CFire>(CFire*)
 T datamap_t* DataMapInit<CFishPool>(CFishPool*)
 T datamap_t* DataMapInit<CFlagDetectionZone>(CFlagDetectionZone*)
 T datamap_t* DataMapInit<CFogController>(CFogController*)
 T datamap_t* DataMapInit<CFuncFlagAlertZone>(CFuncFlagAlertZone*)
 T datamap_t* DataMapInit<CFuncLadder>(CFuncLadder*)
 T datamap_t* DataMapInit<CFuncMoveLinear>(CFuncMoveLinear*)
 T datamap_t* DataMapInit<CFuncNavCost>(CFuncNavCost*)
 T datamap_t* DataMapInit<CFuncPasstimeGoal>(CFuncPasstimeGoal*)
 T datamap_t* DataMapInit<CFuncPlat>(CFuncPlat*)
 T datamap_t* DataMapInit<CFuncRespawnFlagZone>(CFuncRespawnFlagZone*)
 T datamap_t* DataMapInit<CFuncRespawnRoom>(CFuncRespawnRoom*)
 T datamap_t* DataMapInit<CFuncRotating>(CFuncRotating*)
 T datamap_t* DataMapInit<CFuncSuggestedBuild>(CFuncSuggestedBuild*)
 T datamap_t* DataMapInit<CFuncTankTrain>(CFuncTankTrain*)
 T datamap_t* DataMapInit<CFuncTrackChange>(CFuncTrackChange*)
 T datamap_t* DataMapInit<CFuncTrackTrain>(CFuncTrackTrain*)
 T datamap_t* DataMapInit<CFuncTrain>(CFuncTrain*)
 T datamap_t* DataMapInit<CFuncTrainControls>(CFuncTrainControls*)
 T datamap_t* DataMapInit<CGamePlayerZone>(CGamePlayerZone*)
 T datamap_t* DataMapInit<CGameUI>(CGameUI*)
 T datamap_t* DataMapInit<CGameWeaponManager>(CGameWeaponManager*)
 T datamap_t* DataMapInit<CGib>(CGib*)
 T datamap_t* DataMapInit<CGibShooter>(CGibShooter*)
 T datamap_t* DataMapInit<CGlobalState>(CGlobalState*)
 T datamap_t* DataMapInit<CGunTarget>(CGunTarget*)
 T datamap_t* DataMapInit<CHalloweenPickup>(CHalloweenPickup*)
 T datamap_t* DataMapInit<CItem>(CItem*)
 T datamap_t* DataMapInit<CItemSoda>(CItemSoda*)
 T datamap_t* DataMapInit<CKeepUpright>(CKeepUpright*)
 T datamap_t* DataMapInit<CLight>(CLight*)
 T datamap_t* DataMapInit<CLogicActiveAutosave>(CLogicActiveAutosave*)
 T datamap_t* DataMapInit<CLogicAuto>(CLogicAuto*)
 T datamap_t* DataMapInit<CLogicBranch>(CLogicBranch*)
 T datamap_t* DataMapInit<CLogicBranchList>(CLogicBranchList*)
 T datamap_t* DataMapInit<CLogicCase>(CLogicCase*)
 T datamap_t* DataMapInit<CLogicCompare>(CLogicCompare*)
 T datamap_t* DataMapInit<CLogicCompareInteger>(CLogicCompareInteger*)
 T datamap_t* DataMapInit<CLogicLineToEntity>(CLogicLineToEntity*)
 T datamap_t* DataMapInit<CLogicMeasureMovement>(CLogicMeasureMovement*)
 T datamap_t* DataMapInit<CLogicOnHoliday>(CLogicOnHoliday*)
 T datamap_t* DataMapInit<CLogicRelay>(CLogicRelay*)
 T datamap_t* DataMapInit<CMannVsMachineLogic>(CMannVsMachineLogic*)
 T datamap_t* DataMapInit<CMathColorBlend>(CMathColorBlend*)
 T datamap_t* DataMapInit<CMathCounter>(CMathCounter*)
 T datamap_t* DataMapInit<CMathRemap>(CMathRemap*)
 T datamap_t* DataMapInit<CMessage>(CMessage*)
 T datamap_t* DataMapInit<CMomentaryRotButton>(CMomentaryRotButton*)
 T datamap_t* DataMapInit<CMonsterResource>(CMonsterResource*)
 T datamap_t* DataMapInit<CMultiSource>(CMultiSource*)
 T datamap_t* DataMapInit<CNPCSpawnDestination>(CNPCSpawnDestination*)
 T datamap_t* DataMapInit<CObjectDispenser>(CObjectDispenser*)
 T datamap_t* DataMapInit<CObjectSapper>(CObjectSapper*)
 T datamap_t* DataMapInit<CObjectTeleporter>(CObjectTeleporter*)
 T datamap_t* DataMapInit<CParticleSystem>(CParticleSystem*)
 T datamap_t* DataMapInit<CPasstimeBallSpawn>(CPasstimeBallSpawn*)
 T datamap_t* DataMapInit<CPathCorner>(CPathCorner*)
 T datamap_t* DataMapInit<CPathTrack>(CPathTrack*)
 T datamap_t* DataMapInit<CPhysBox>(CPhysBox*)
 T datamap_t* DataMapInit<CPhysConstraint>(CPhysConstraint*)
 T datamap_t* DataMapInit<CPhysConstraintSystem>(CPhysConstraintSystem*)
 T datamap_t* DataMapInit<CPhysConvert>(CPhysConvert*)
 T datamap_t* DataMapInit<CPhysExplosion>(CPhysExplosion*)
 T datamap_t* DataMapInit<CPhysForce>(CPhysForce*)
 T datamap_t* DataMapInit<CPhysImpact>(CPhysImpact*)
 T datamap_t* DataMapInit<CPhysMagnet>(CPhysMagnet*)
 T datamap_t* DataMapInit<CPhysMotor>(CPhysMotor*)
 T datamap_t* DataMapInit<CPhysicsCannister>(CPhysicsCannister*)
 T datamap_t* DataMapInit<CPhysicsNPCSolver>(CPhysicsNPCSolver*)
 T datamap_t* DataMapInit<CPhysicsProp>(CPhysicsProp*)
 T datamap_t* DataMapInit<CPhysicsPropRespawnable>(CPhysicsPropRespawnable*)
 T datamap_t* DataMapInit<CPhysicsSpring>(CPhysicsSpring*)
 T datamap_t* DataMapInit<CPlayerResource>(CPlayerResource*)
 T datamap_t* DataMapInit<CPointAngleSensor>(CPointAngleSensor*)
 T datamap_t* DataMapInit<CPointAngularVelocitySensor>(CPointAngularVelocitySensor*)
 T datamap_t* DataMapInit<CPointCamera>(CPointCamera*)
 T datamap_t* DataMapInit<CPointCommentaryNode>(CPointCommentaryNode*)
 T datamap_t* DataMapInit<CPointDevShotCamera>(CPointDevShotCamera*)
 T datamap_t* DataMapInit<CPointHurt>(CPointHurt*)
 T datamap_t* DataMapInit<CPointPlayerMoveConstraint>(CPointPlayerMoveConstraint*)
 T datamap_t* DataMapInit<CPointProximitySensor>(CPointProximitySensor*)
 T datamap_t* DataMapInit<CPointPush>(CPointPush*)
 T datamap_t* DataMapInit<CPointSpotlight>(CPointSpotlight*)
 T datamap_t* DataMapInit<CPointTemplate>(CPointTemplate*)
 T datamap_t* DataMapInit<CPointVelocitySensor>(CPointVelocitySensor*)
 T datamap_t* DataMapInit<CPopulationManager>(CPopulationManager*)
 T datamap_t* DataMapInit<CPoseController>(CPoseController*)
 T datamap_t* DataMapInit<CProjectedDecal>(CProjectedDecal*)
 T datamap_t* DataMapInit<CPropVehicle>(CPropVehicle*)
 T datamap_t* DataMapInit<CPropVehicleDriveable>(CPropVehicleDriveable*)
 T datamap_t* DataMapInit<CRagdollBoogie>(CRagdollBoogie*)
 T datamap_t* DataMapInit<CRagdollProp>(CRagdollProp*)
 T datamap_t* DataMapInit<CRagdollPropAttached>(CRagdollPropAttached*)
 T datamap_t* DataMapInit<CRallyPoint>(CRallyPoint*)
 T datamap_t* DataMapInit<CRegenerateZone>(CRegenerateZone*)
 T datamap_t* DataMapInit<CRevertSaved>(CRevertSaved*)
 T datamap_t* DataMapInit<CRobotDestructionVaultTrigger>(CRobotDestructionVaultTrigger*)
 T datamap_t* DataMapInit<CRopeAnchor>(CRopeAnchor*)
 T datamap_t* DataMapInit<CSceneEntity>(CSceneEntity*)
 T datamap_t* DataMapInit<CSceneListManager>(CSceneListManager*)
 T datamap_t* DataMapInit<CSceneManager>(CSceneManager*)
 T datamap_t* DataMapInit<CScriptedTarget>(CScriptedTarget*)
 T datamap_t* DataMapInit<CSprite>(CSprite*)
 T datamap_t* DataMapInit<CTFAmmoPack>(CTFAmmoPack*)
 T datamap_t* DataMapInit<CTFBaseBoss>(CTFBaseBoss*)
 T datamap_t* DataMapInit<CTFBaseProjectile>(CTFBaseProjectile*)
 T datamap_t* DataMapInit<CTFBotActionPoint>(CTFBotActionPoint*)
 T datamap_t* DataMapInit<CTFBotController>(CTFBotController*)
 T datamap_t* DataMapInit<CTFBotGenerator>(CTFBotGenerator*)
 T datamap_t* DataMapInit<CTFBotHintSentrygun>(CTFBotHintSentrygun*)
 T datamap_t* DataMapInit<CTFBotProxy>(CTFBotProxy*)
 T datamap_t* DataMapInit<CTFForceRespawn>(CTFForceRespawn*)
 T datamap_t* DataMapInit<CTFGameRulesProxy>(CTFGameRulesProxy*)
 T datamap_t* DataMapInit<CTFGenericBomb>(CTFGenericBomb*)
 T datamap_t* DataMapInit<CTFHalloweenFortuneTeller>(CTFHalloweenFortuneTeller*)
 T datamap_t* DataMapInit<CTFHalloweenMinigame_FallingPlatforms>(CTFHalloweenMinigame_FallingPlatforms*)
 T datamap_t* DataMapInit<CTFMedigunShield>(CTFMedigunShield*)
 T datamap_t* DataMapInit<CTFMiniGame>(CTFMiniGame*)
 T datamap_t* DataMapInit<CTFPasstimeLogic>(CTFPasstimeLogic*)
 T datamap_t* DataMapInit<CTFPlayerDestructionLogic>(CTFPlayerDestructionLogic*)
 T datamap_t* DataMapInit<CTFProjectile_Arrow>(CTFProjectile_Arrow*)
 T datamap_t* DataMapInit<CTFProjectile_Flare>(CTFProjectile_Flare*)
 T datamap_t* DataMapInit<CTFReviveMarker>(CTFReviveMarker*)
 T datamap_t* DataMapInit<CTFRobotDestructionLogic>(CTFRobotDestructionLogic*)
 T datamap_t* DataMapInit<CTFRobotDestruction_RobotGroup>(CTFRobotDestruction_RobotGroup*)
 T datamap_t* DataMapInit<CTFRobotDestruction_RobotSpawn>(CTFRobotDestruction_RobotSpawn*)
 T datamap_t* DataMapInit<CTFSpawner>(CTFSpawner*)
 T datamap_t* DataMapInit<CTFTankBoss>(CTFTankBoss*)
 T datamap_t* DataMapInit<CTFTankDestruction>(CTFTankDestruction*)
 T datamap_t* DataMapInit<CTFWeaponBase>(CTFWeaponBase*)
 T datamap_t* DataMapInit<CTFWeaponBaseGrenadeProj>(CTFWeaponBaseGrenadeProj*)
 T datamap_t* DataMapInit<CTFWeaponBaseGun>(CTFWeaponBaseGun*)
 T datamap_t* DataMapInit<CTFWeaponBaseMelee>(CTFWeaponBaseMelee*)
 T datamap_t* DataMapInit<CTankTrainAI>(CTankTrainAI*)
 T datamap_t* DataMapInit<CTeamControlPoint>(CTeamControlPoint*)
 T datamap_t* DataMapInit<CTeamControlPointMaster>(CTeamControlPointMaster*)
 T datamap_t* DataMapInit<CTeamControlPointRound>(CTeamControlPointRound*)
 T datamap_t* DataMapInit<CTeamRoundTimer>(CTeamRoundTimer*)
 T datamap_t* DataMapInit<CTeamTrainWatcher>(CTeamTrainWatcher*)
 T datamap_t* DataMapInit<CTeamplayRoundWin>(CTeamplayRoundWin*)
 T datamap_t* DataMapInit<CTesla>(CTesla*)
 T datamap_t* DataMapInit<CTestTraceline>(CTestTraceline*)
 T datamap_t* DataMapInit<CTimerEntity>(CTimerEntity*)
 T datamap_t* DataMapInit<CTrainingModeLogic>(CTrainingModeLogic*)
 T datamap_t* DataMapInit<CTriggerAreaCapture>(CTriggerAreaCapture*)
 T datamap_t* DataMapInit<CTriggerBrush>(CTriggerBrush*)
 T datamap_t* DataMapInit<CTriggerCamera>(CTriggerCamera*)
 T datamap_t* DataMapInit<CTriggerCatapult>(CTriggerCatapult*)
 T datamap_t* DataMapInit<CTriggerGravity>(CTriggerGravity*)
 T datamap_t* DataMapInit<CTriggerHurt>(CTriggerHurt*)
 T datamap_t* DataMapInit<CTriggerImpact>(CTriggerImpact*)
 T datamap_t* DataMapInit<CTriggerLook>(CTriggerLook*)
 T datamap_t* DataMapInit<CTriggerMultiple>(CTriggerMultiple*)
 T datamap_t* DataMapInit<CTriggerPasstimeBall>(CTriggerPasstimeBall*)
 T datamap_t* DataMapInit<CTriggerProximity>(CTriggerProximity*)
 T datamap_t* DataMapInit<CTriggerRemove>(CTriggerRemove*)
 T datamap_t* DataMapInit<CTriggerSoundscape>(CTriggerSoundscape*)
 T datamap_t* DataMapInit<CTriggerStun>(CTriggerStun*)
 T datamap_t* DataMapInit<CTriggerVPhysicsMotion>(CTriggerVPhysicsMotion*)
 T datamap_t* DataMapInit<CTriggerWind>(CTriggerWind*)
 T datamap_t* DataMapInit<CUpgrades>(CUpgrades*)
 T datamap_t* DataMapInit<CVoteController>(CVoteController*)
 T datamap_t* DataMapInit<CWaterBullet>(CWaterBullet*)
 T datamap_t* DataMapInit<CWeightButton>(CWeightButton*)
 T datamap_t* DataMapInit<CWheelOfDoom>(CWheelOfDoom*)
 T datamap_t* DataMapInit<CWindowPane>(CWindowPane*)
 T datamap_t* DataMapInit<EventQueuePrioritizedEvent_t>(EventQueuePrioritizedEvent_t*)
 T datamap_t* DataMapInit<NextBotCombatCharacter>(NextBotCombatCharacter*)
 T datamap_t* DataMapInit<magnetted_objects_t>(magnetted_objects_t*)
 T datamap_t* DataMapInit<vehiclesounds_t>(vehiclesounds_t*)
 T dyld_stub_binding_helper
 T findFirstAreaInDirection(Vector const*, NavDirType, float, float, CBaseEntity*, Vector*)
 T float AttributeConvertFromFloat<float>(float)
 T float CAttributeManager::AttribHookValue<float>(float, char const*, CBaseEntity const*, CUtlVector<CBaseEntity*, CUtlMemory<CBaseEntity*, int> >*, bool)
 T float const& CNetworkVarBase<float, CBaseAnimating::NetworkVar_m_flModelScale>::operator=<float>(float const&)
 T float const& CNetworkVarBase<float, CBaseAnimating::NetworkVar_m_flPlaybackRate>::operator=<double>(double const&)
 T float const& CNetworkVarBase<float, CBaseAnimating::NetworkVar_m_flPlaybackRate>::operator=<int>(int const&)
 T float const& CNetworkVarBase<float, CBaseCombatCharacter::NetworkVar_m_flNextAttack>::operator=<float>(float const&)
 T float const& CNetworkVarBase<float, CBaseCombatWeapon::NetworkVar_m_flNextPrimaryAttack>::operator=<float>(float const&)
 T float const& CNetworkVarBase<float, CBaseCombatWeapon::NetworkVar_m_flNextSecondaryAttack>::operator=<float>(float const&)
 T float const& CNetworkVarBase<float, CBaseCombatWeapon::NetworkVar_m_flTimeWeaponIdle>::operator=<double>(double const&)
 T float const& CNetworkVarBase<float, CBaseFire::NetworkVar_m_flScale>::operator=<float>(float const&)
 T float const& CNetworkVarBase<float, CBaseFire::NetworkVar_m_flScaleTime>::operator=<float>(float const&)
 T float const& CNetworkVarBase<float, CCaptureFlag::NetworkVar_m_flTimeToSetPoisonous>::operator=<float>(float const&)
 T float const& CNetworkVarBase<float, CObjectTeleporter::NetworkVar_m_flCurrentRechargeDuration>::operator=<float>(float const&)
 T float const& CNetworkVarBase<float, CTFPipebombLauncher::NetworkVar_m_flChargeBeginTime>::operator=<int>(int const&)
 T float const& CNetworkVarBase<float, CTFSniperRifle::NetworkVar_m_flChargedDamage>::operator=<float>(float const&)
 T float const& CNetworkVarBase<float, CTFWeaponBase::NetworkVar_m_flEnergy>::operator=<float>(float const&)
 T float const& CNetworkVarBase<float, CTFWeaponBase::NetworkVar_m_flInspectAnimTime>::operator=<float>(float const&)
 T float const& CNetworkVarBase<float, CTeamRoundTimer::NetworkVar_m_flTimerEndTime>::operator=<float>(float const&)
 T float16::ConvertFloatTo16bits(float)
 T fogparams_t::NetworkStateChanged()
 T fogparams_t::NetworkStateChanged(void*)
 T int AttributeConvertFromFloat<int>(float)
 T int CAttributeManager::AttribHookValue<int>(int, char const*, CBaseEntity const*, CUtlVector<CBaseEntity*, CUtlMemory<CBaseEntity*, int> >*, bool)
 T int CRestore::ReadSimple<Quaternion>(Quaternion*, int, int)
 T int CRestore::ReadSimple<VMatrix>(VMatrix*, int, int)
 T int CRestore::ReadSimple<Vector>(Vector*, int, int)
 T int CRestore::ReadSimple<bool>(bool*, int, int)
 T int CRestore::ReadSimple<char>(char*, int, int)
 T int CRestore::ReadSimple<float>(float*, int, int)
 T int CRestore::ReadSimple<int>(int*, int, int)
 T int CRestore::ReadSimple<interval_t>(interval_t*, int, int)
 T int CRestore::ReadSimple<short>(short*, int, int)
 T int CUtlHashtable<CBaseEntityModelLoadProxy, empty_t, PointerHashFunctor, PointerEqualFunctor, CBaseEntity*>::DoRemove<CBaseEntity*>(CBaseEntity*, unsigned int)
 T int CUtlSortVector<CBaseEntity*, CSortedEntityList::CEntityReportLess, CUtlVector<CBaseEntity*, CUtlMemory<CBaseEntity*, int> > >::FindLessOrEqual<CBaseEntity*>(CBaseEntity* const&, bool*) const
 T int CUtlSortVector<CDmxAttribute*, CDmxAttributeLess, CUtlVector<CDmxAttribute*, CUtlMemory<CDmxAttribute*, int> > >::Find<CDmxAttribute*>(CDmxAttribute* const&) const
 T int CUtlSortVector<CEconItemView, CInventoryListLess, CUtlVector<CEconItemView, CUtlMemory<CEconItemView, int> > >::FindLessOrEqual<CEconItemView>(CEconItemView const&, bool*) const
 T int CUtlSortVector<CTFNavArea*, CTFNavAreaIncursionLess, CUtlVector<CTFNavArea*, CUtlMemory<CTFNavArea*, int> > >::FindLessOrEqual<CTFNavArea*>(CTFNavArea* const&, bool*) const
 T int CUtlSortVector<EntityDamageHistory_t, CEntityDamageHistoryLess, CUtlVector<EntityDamageHistory_t, CUtlMemory<EntityDamageHistory_t, int> > >::FindLessOrEqual<EntityDamageHistory_t>(EntityDamageHistory_t const&, bool*) const
 T int CUtlSortVector<EntityHistory_t, CEntityHistoryLess, CUtlVector<EntityHistory_t, CUtlMemory<EntityHistory_t, int> > >::FindLessOrEqual<EntityHistory_t>(EntityHistory_t const&, bool*) const
 T int CUtlSortVector<IncursionEntry_t, SpyHideIncursionDistanceLess, CUtlVector<IncursionEntry_t, CUtlMemory<IncursionEntry_t, int> > >::FindLessOrEqual<IncursionEntry_t>(IncursionEntry_t const&, bool*) const
 T int CUtlSortVector<penetrated_target_list, CBulletPenetrateEnum::PenetratedTargetLess, CUtlVector<penetrated_target_list, CUtlMemory<penetrated_target_list, int> > >::FindLessOrEqual<penetrated_target_list>(penetrated_target_list const&, bool*) const
 T int CollectHumanPlayers<CTFPlayer>(CUtlVector<CTFPlayer*, CUtlMemory<CTFPlayer*, int> >*, int, bool, bool)
 T int CollectPlayers<CTFBot>(CUtlVector<CTFBot*, CUtlMemory<CTFBot*, int> >*, int, bool, bool)
 T int CollectPlayers<CTFPlayer const>(CUtlVector<CTFPlayer const*, CUtlMemory<CTFPlayer const*, int> >*, int, bool, bool)
 T int CollectPlayers<CTFPlayer>(CUtlVector<CTFPlayer*, CUtlMemory<CTFPlayer*, int> >*, int, bool, bool)
 T int ServerClassInit<DT_AI_BaseNPC::ignored>(DT_AI_BaseNPC::ignored*)
 T int ServerClassInit<DT_AmmoPack::ignored>(DT_AmmoPack::ignored*)
 T int ServerClassInit<DT_AnimTimeMustBeFirst::ignored>(DT_AnimTimeMustBeFirst::ignored*)
 T int ServerClassInit<DT_Animationlayer::ignored>(DT_Animationlayer::ignored*)
 T int ServerClassInit<DT_AttributeContainer::ignored>(DT_AttributeContainer::ignored*)
 T int ServerClassInit<DT_AttributeContainerPlayer::ignored>(DT_AttributeContainerPlayer::ignored*)
 T int ServerClassInit<DT_AttributeList::ignored>(DT_AttributeList::ignored*)
 T int ServerClassInit<DT_AttributeManager::ignored>(DT_AttributeManager::ignored*)
 T int ServerClassInit<DT_BCCLocalPlayerExclusive::ignored>(DT_BCCLocalPlayerExclusive::ignored*)
 T int ServerClassInit<DT_BaseAnimating::ignored>(DT_BaseAnimating::ignored*)
 T int ServerClassInit<DT_BaseAnimatingOverlay::ignored>(DT_BaseAnimatingOverlay::ignored*)
 T int ServerClassInit<DT_BaseAttributableItem::ignored>(DT_BaseAttributableItem::ignored*)
 T int ServerClassInit<DT_BaseBeam::ignored>(DT_BaseBeam::ignored*)
 T int ServerClassInit<DT_BaseCombatCharacter::ignored>(DT_BaseCombatCharacter::ignored*)
 T int ServerClassInit<DT_BaseCombatWeapon::ignored>(DT_BaseCombatWeapon::ignored*)
 T int ServerClassInit<DT_BaseDoor::ignored>(DT_BaseDoor::ignored*)
 T int ServerClassInit<DT_BaseEntity::ignored>(DT_BaseEntity::ignored*)
 T int ServerClassInit<DT_BaseFlex::ignored>(DT_BaseFlex::ignored*)
 T int ServerClassInit<DT_BaseGrenade::ignored>(DT_BaseGrenade::ignored*)
 T int ServerClassInit<DT_BaseObject::ignored>(DT_BaseObject::ignored*)
 T int ServerClassInit<DT_BaseObjectUpgrade::ignored>(DT_BaseObjectUpgrade::ignored*)
 T int ServerClassInit<DT_BaseParticleEntity::ignored>(DT_BaseParticleEntity::ignored*)
 T int ServerClassInit<DT_BasePlayer::ignored>(DT_BasePlayer::ignored*)
 T int ServerClassInit<DT_BaseProjectile::ignored>(DT_BaseProjectile::ignored*)
 T int ServerClassInit<DT_BasePropDoor::ignored>(DT_BasePropDoor::ignored*)
 T int ServerClassInit<DT_BaseTeamObjectiveResource::ignored>(DT_BaseTeamObjectiveResource::ignored*)
 T int ServerClassInit<DT_BaseTempEntity::ignored>(DT_BaseTempEntity::ignored*)
 T int ServerClassInit<DT_BaseViewModel::ignored>(DT_BaseViewModel::ignored*)
 T int ServerClassInit<DT_Beam::ignored>(DT_Beam::ignored*)
 T int ServerClassInit<DT_BeamPredictableId::ignored>(DT_BeamPredictableId::ignored*)
 T int ServerClassInit<DT_BoneFollower::ignored>(DT_BoneFollower::ignored*)
 T int ServerClassInit<DT_BonusRoundLogic::ignored>(DT_BonusRoundLogic::ignored*)
 T int ServerClassInit<DT_BreakableProp::ignored>(DT_BreakableProp::ignored*)
 T int ServerClassInit<DT_BreakableSurface::ignored>(DT_BreakableSurface::ignored*)
 T int ServerClassInit<DT_BuilderLocalData::ignored>(DT_BuilderLocalData::ignored*)
 T int ServerClassInit<DT_CBonusDuckPickup::ignored>(DT_CBonusDuckPickup::ignored*)
 T int ServerClassInit<DT_CBonusPack::ignored>(DT_CBonusPack::ignored*)
 T int ServerClassInit<DT_CFish::ignored>(DT_CFish::ignored*)
 T int ServerClassInit<DT_CHalloweenGiftPickup::ignored>(DT_CHalloweenGiftPickup::ignored*)
 T int ServerClassInit<DT_CHalloweenPickup::ignored>(DT_CHalloweenPickup::ignored*)
 T int ServerClassInit<DT_CMannVsMachineWaveStats::ignored>(DT_CMannVsMachineWaveStats::ignored*)
 T int ServerClassInit<DT_CaptureFlag::ignored>(DT_CaptureFlag::ignored*)
 T int ServerClassInit<DT_CaptureFlagReturnIcon::ignored>(DT_CaptureFlagReturnIcon::ignored*)
 T int ServerClassInit<DT_CaptureZone::ignored>(DT_CaptureZone::ignored*)
 T int ServerClassInit<DT_CollisionProperty::ignored>(DT_CollisionProperty::ignored*)
 T int ServerClassInit<DT_ColorCorrection::ignored>(DT_ColorCorrection::ignored*)
 T int ServerClassInit<DT_ColorCorrectionVolume::ignored>(DT_ColorCorrectionVolume::ignored*)
 T int ServerClassInit<DT_Crossbow::ignored>(DT_Crossbow::ignored*)
 T int ServerClassInit<DT_CurrencyPack::ignored>(DT_CurrencyPack::ignored*)
 T int ServerClassInit<DT_DetailController::ignored>(DT_DetailController::ignored*)
 T int ServerClassInit<DT_DustTrail::ignored>(DT_DustTrail::ignored*)
 T int ServerClassInit<DT_DynamicLight::ignored>(DT_DynamicLight::ignored*)
 T int ServerClassInit<DT_DynamicProp::ignored>(DT_DynamicProp::ignored*)
 T int ServerClassInit<DT_EconEntity::ignored>(DT_EconEntity::ignored*)
 T int ServerClassInit<DT_EffectData::ignored>(DT_EffectData::ignored*)
 T int ServerClassInit<DT_Embers::ignored>(DT_Embers::ignored*)
 T int ServerClassInit<DT_EntityDissolve::ignored>(DT_EntityDissolve::ignored*)
 T int ServerClassInit<DT_EntityFlame::ignored>(DT_EntityFlame::ignored*)
 T int ServerClassInit<DT_EntityParticleTrail::ignored>(DT_EntityParticleTrail::ignored*)
 T int ServerClassInit<DT_EntityParticleTrailInfo::ignored>(DT_EntityParticleTrailInfo::ignored*)
 T int ServerClassInit<DT_EnvParticleScript::ignored>(DT_EnvParticleScript::ignored*)
 T int ServerClassInit<DT_EnvProjectedTexture::ignored>(DT_EnvProjectedTexture::ignored*)
 T int ServerClassInit<DT_EnvScreenEffect::ignored>(DT_EnvScreenEffect::ignored*)
 T int ServerClassInit<DT_EnvScreenOverlay::ignored>(DT_EnvScreenOverlay::ignored*)
 T int ServerClassInit<DT_EnvTonemapController::ignored>(DT_EnvTonemapController::ignored*)
 T int ServerClassInit<DT_EnvWind::ignored>(DT_EnvWind::ignored*)
 T int ServerClassInit<DT_EnvWindShared::ignored>(DT_EnvWindShared::ignored*)
 T int ServerClassInit<DT_EyeballBoss::ignored>(DT_EyeballBoss::ignored*)
 T int ServerClassInit<DT_FireSmoke::ignored>(DT_FireSmoke::ignored*)
 T int ServerClassInit<DT_FireTrail::ignored>(DT_FireTrail::ignored*)
 T int ServerClassInit<DT_FogController::ignored>(DT_FogController::ignored*)
 T int ServerClassInit<DT_FuncAreaPortalWindow::ignored>(DT_FuncAreaPortalWindow::ignored*)
 T int ServerClassInit<DT_FuncConveyor::ignored>(DT_FuncConveyor::ignored*)
 T int ServerClassInit<DT_FuncForceField::ignored>(DT_FuncForceField::ignored*)
 T int ServerClassInit<DT_FuncLadder::ignored>(DT_FuncLadder::ignored*)
 T int ServerClassInit<DT_FuncMonitor::ignored>(DT_FuncMonitor::ignored*)
 T int ServerClassInit<DT_FuncOccluder::ignored>(DT_FuncOccluder::ignored*)
 T int ServerClassInit<DT_FuncPasstimeGoal::ignored>(DT_FuncPasstimeGoal::ignored*)
 T int ServerClassInit<DT_FuncReflectiveGlass::ignored>(DT_FuncReflectiveGlass::ignored*)
 T int ServerClassInit<DT_FuncRespawnRoom::ignored>(DT_FuncRespawnRoom::ignored*)
 T int ServerClassInit<DT_FuncRespawnRoomVisualizer::ignored>(DT_FuncRespawnRoomVisualizer::ignored*)
 T int ServerClassInit<DT_FuncRotating::ignored>(DT_FuncRotating::ignored*)
 T int ServerClassInit<DT_FuncSmokeVolume::ignored>(DT_FuncSmokeVolume::ignored*)
 T int ServerClassInit<DT_FuncTrackTrain::ignored>(DT_FuncTrackTrain::ignored*)
 T int ServerClassInit<DT_Func_Dust::ignored>(DT_Func_Dust::ignored*)
 T int ServerClassInit<DT_Func_LOD::ignored>(DT_Func_LOD::ignored*)
 T int ServerClassInit<DT_GameRulesProxy::ignored>(DT_GameRulesProxy::ignored*)
 T int ServerClassInit<DT_GrapplingHook::ignored>(DT_GrapplingHook::ignored*)
 T int ServerClassInit<DT_HalloweenSoulPack::ignored>(DT_HalloweenSoulPack::ignored*)
 T int ServerClassInit<DT_HandleTest::ignored>(DT_HandleTest::ignored*)
 T int ServerClassInit<DT_HeadlessHatman::ignored>(DT_HeadlessHatman::ignored*)
 T int ServerClassInit<DT_Hightower_TeleportVortex::ignored>(DT_Hightower_TeleportVortex::ignored*)
 T int ServerClassInit<DT_InfoLadderDismount::ignored>(DT_InfoLadderDismount::ignored*)
 T int ServerClassInit<DT_InfoLightingRelative::ignored>(DT_InfoLightingRelative::ignored*)
 T int ServerClassInit<DT_InfoOverlayAccessor::ignored>(DT_InfoOverlayAccessor::ignored*)
 T int ServerClassInit<DT_LaserDot::ignored>(DT_LaserDot::ignored*)
 T int ServerClassInit<DT_LaserPointerLocalData::ignored>(DT_LaserPointerLocalData::ignored*)
 T int ServerClassInit<DT_LightGlow::ignored>(DT_LightGlow::ignored*)
 T int ServerClassInit<DT_Local::ignored>(DT_Local::ignored*)
 T int ServerClassInit<DT_LocalActiveWeaponData::ignored>(DT_LocalActiveWeaponData::ignored*)
 T int ServerClassInit<DT_LocalFlameThrower::ignored>(DT_LocalFlameThrower::ignored*)
 T int ServerClassInit<DT_LocalPlayerExclusive::ignored>(DT_LocalPlayerExclusive::ignored*)
 T int ServerClassInit<DT_LocalTFWeaponData::ignored>(DT_LocalTFWeaponData::ignored*)
 T int ServerClassInit<DT_LocalTFWeaponMedigunData::ignored>(DT_LocalTFWeaponMedigunData::ignored*)
 T int ServerClassInit<DT_LocalWeaponData::ignored>(DT_LocalWeaponData::ignored*)
 T int ServerClassInit<DT_MannVsMachineStats::ignored>(DT_MannVsMachineStats::ignored*)
 T int ServerClassInit<DT_MaterialModifyControl::ignored>(DT_MaterialModifyControl::ignored*)
 T int ServerClassInit<DT_Merasmus::ignored>(DT_Merasmus::ignored*)
 T int ServerClassInit<DT_MerasmusDancer::ignored>(DT_MerasmusDancer::ignored*)
 T int ServerClassInit<DT_MonsterResource::ignored>(DT_MonsterResource::ignored*)
 T int ServerClassInit<DT_MovieExplosion::ignored>(DT_MovieExplosion::ignored*)
 T int ServerClassInit<DT_NextBot::ignored>(DT_NextBot::ignored*)
 T int ServerClassInit<DT_ObjectCartDispenser::ignored>(DT_ObjectCartDispenser::ignored*)
 T int ServerClassInit<DT_ObjectDispenser::ignored>(DT_ObjectDispenser::ignored*)
 T int ServerClassInit<DT_ObjectSapper::ignored>(DT_ObjectSapper::ignored*)
 T int ServerClassInit<DT_ObjectSentrygun::ignored>(DT_ObjectSentrygun::ignored*)
 T int ServerClassInit<DT_ObjectTeleporter::ignored>(DT_ObjectTeleporter::ignored*)
 T int ServerClassInit<DT_OverlayVars::ignored>(DT_OverlayVars::ignored*)
 T int ServerClassInit<DT_ParticleCannon::ignored>(DT_ParticleCannon::ignored*)
 T int ServerClassInit<DT_ParticleFire::ignored>(DT_ParticleFire::ignored*)
 T int ServerClassInit<DT_ParticlePerformanceMonitor::ignored>(DT_ParticlePerformanceMonitor::ignored*)
 T int ServerClassInit<DT_ParticleSmokeGrenade::ignored>(DT_ParticleSmokeGrenade::ignored*)
 T int ServerClassInit<DT_ParticleSystem::ignored>(DT_ParticleSystem::ignored*)
 T int ServerClassInit<DT_PasstimeBall::ignored>(DT_PasstimeBall::ignored*)
 T int ServerClassInit<DT_PasstimeGun::ignored>(DT_PasstimeGun::ignored*)
 T int ServerClassInit<DT_PhysBox::ignored>(DT_PhysBox::ignored*)
 T int ServerClassInit<DT_PhysBoxMultiplayer::ignored>(DT_PhysBoxMultiplayer::ignored*)
 T int ServerClassInit<DT_PhysMagnet::ignored>(DT_PhysMagnet::ignored*)
 T int ServerClassInit<DT_PhysicsProp::ignored>(DT_PhysicsProp::ignored*)
 T int ServerClassInit<DT_PhysicsPropMultiplayer::ignored>(DT_PhysicsPropMultiplayer::ignored*)
 T int ServerClassInit<DT_PipebombLauncherLocalData::ignored>(DT_PipebombLauncherLocalData::ignored*)
 T int ServerClassInit<DT_Plasma::ignored>(DT_Plasma::ignored*)
 T int ServerClassInit<DT_PlayerDestructionDispenser::ignored>(DT_PlayerDestructionDispenser::ignored*)
 T int ServerClassInit<DT_PlayerResource::ignored>(DT_PlayerResource::ignored*)
 T int ServerClassInit<DT_PlayerState::ignored>(DT_PlayerState::ignored*)
 T int ServerClassInit<DT_PointCamera::ignored>(DT_PointCamera::ignored*)
 T int ServerClassInit<DT_PointCommentaryNode::ignored>(DT_PointCommentaryNode::ignored*)
 T int ServerClassInit<DT_PoseController::ignored>(DT_PoseController::ignored*)
 T int ServerClassInit<DT_Precipitation::ignored>(DT_Precipitation::ignored*)
 T int ServerClassInit<DT_PredictableId::ignored>(DT_PredictableId::ignored*)
 T int ServerClassInit<DT_PropVehicleDriveable::ignored>(DT_PropVehicleDriveable::ignored*)
 T int ServerClassInit<DT_ProxyToggle::ignored>(DT_ProxyToggle::ignored*)
 T int ServerClassInit<DT_ProxyToggle_ProxiedData::ignored>(DT_ProxyToggle_ProxiedData::ignored*)
 T int ServerClassInit<DT_QuadraticBeam::ignored>(DT_QuadraticBeam::ignored*)
 T int ServerClassInit<DT_Ragdoll::ignored>(DT_Ragdoll::ignored*)
 T int ServerClassInit<DT_RagdollManager::ignored>(DT_RagdollManager::ignored*)
 T int ServerClassInit<DT_Ragdoll_Attached::ignored>(DT_Ragdoll_Attached::ignored*)
 T int ServerClassInit<DT_RobotDispenser::ignored>(DT_RobotDispenser::ignored*)
 T int ServerClassInit<DT_RocketTrail::ignored>(DT_RocketTrail::ignored*)
 T int ServerClassInit<DT_RopeKeyframe::ignored>(DT_RopeKeyframe::ignored*)
 T int ServerClassInit<DT_SceneEntity::ignored>(DT_SceneEntity::ignored*)
 T int ServerClassInit<DT_ScriptCreatedAttribute::ignored>(DT_ScriptCreatedAttribute::ignored*)
 T int ServerClassInit<DT_ScriptCreatedItem::ignored>(DT_ScriptCreatedItem::ignored*)
 T int ServerClassInit<DT_SentrygunLocalData::ignored>(DT_SentrygunLocalData::ignored*)
 T int ServerClassInit<DT_ServerAnimationData::ignored>(DT_ServerAnimationData::ignored*)
 T int ServerClassInit<DT_ShadowControl::ignored>(DT_ShadowControl::ignored*)
 T int ServerClassInit<DT_SlideshowDisplay::ignored>(DT_SlideshowDisplay::ignored*)
 T int ServerClassInit<DT_SmokeStack::ignored>(DT_SmokeStack::ignored*)
 T int ServerClassInit<DT_SmokeTrail::ignored>(DT_SmokeTrail::ignored*)
 T int ServerClassInit<DT_SniperDot::ignored>(DT_SniperDot::ignored*)
 T int ServerClassInit<DT_SniperRifleLocalData::ignored>(DT_SniperRifleLocalData::ignored*)
 T int ServerClassInit<DT_SporeExplosion::ignored>(DT_SporeExplosion::ignored*)
 T int ServerClassInit<DT_SporeTrail::ignored>(DT_SporeTrail::ignored*)
 T int ServerClassInit<DT_SpotlightEnd::ignored>(DT_SpotlightEnd::ignored*)
 T int ServerClassInit<DT_Sprite::ignored>(DT_Sprite::ignored*)
 T int ServerClassInit<DT_SpriteOriented::ignored>(DT_SpriteOriented::ignored*)
 T int ServerClassInit<DT_SpriteTrail::ignored>(DT_SpriteTrail::ignored*)
 T int ServerClassInit<DT_SteamJet::ignored>(DT_SteamJet::ignored*)
 T int ServerClassInit<DT_Sun::ignored>(DT_Sun::ignored*)
 T int ServerClassInit<DT_TEArmorRicochet::ignored>(DT_TEArmorRicochet::ignored*)
 T int ServerClassInit<DT_TEBSPDecal::ignored>(DT_TEBSPDecal::ignored*)
 T int ServerClassInit<DT_TEBeamEntPoint::ignored>(DT_TEBeamEntPoint::ignored*)
 T int ServerClassInit<DT_TEBeamEnts::ignored>(DT_TEBeamEnts::ignored*)
 T int ServerClassInit<DT_TEBeamFollow::ignored>(DT_TEBeamFollow::ignored*)
 T int ServerClassInit<DT_TEBeamLaser::ignored>(DT_TEBeamLaser::ignored*)
 T int ServerClassInit<DT_TEBeamPoints::ignored>(DT_TEBeamPoints::ignored*)
 T int ServerClassInit<DT_TEBeamRing::ignored>(DT_TEBeamRing::ignored*)
 T int ServerClassInit<DT_TEBeamRingPoint::ignored>(DT_TEBeamRingPoint::ignored*)
 T int ServerClassInit<DT_TEBeamSpline::ignored>(DT_TEBeamSpline::ignored*)
 T int ServerClassInit<DT_TEBloodSprite::ignored>(DT_TEBloodSprite::ignored*)
 T int ServerClassInit<DT_TEBloodStream::ignored>(DT_TEBloodStream::ignored*)
 T int ServerClassInit<DT_TEBreakModel::ignored>(DT_TEBreakModel::ignored*)
 T int ServerClassInit<DT_TEBubbleTrail::ignored>(DT_TEBubbleTrail::ignored*)
 T int ServerClassInit<DT_TEBubbles::ignored>(DT_TEBubbles::ignored*)
 T int ServerClassInit<DT_TEClientProjectile::ignored>(DT_TEClientProjectile::ignored*)
 T int ServerClassInit<DT_TEDecal::ignored>(DT_TEDecal::ignored*)
 T int ServerClassInit<DT_TEDust::ignored>(DT_TEDust::ignored*)
 T int ServerClassInit<DT_TEDynamicLight::ignored>(DT_TEDynamicLight::ignored*)
 T int ServerClassInit<DT_TEEffectDispatch::ignored>(DT_TEEffectDispatch::ignored*)
 T int ServerClassInit<DT_TEEnergySplash::ignored>(DT_TEEnergySplash::ignored*)
 T int ServerClassInit<DT_TEExplosion::ignored>(DT_TEExplosion::ignored*)
 T int ServerClassInit<DT_TEFireBullets::ignored>(DT_TEFireBullets::ignored*)
 T int ServerClassInit<DT_TEFizz::ignored>(DT_TEFizz::ignored*)
 T int ServerClassInit<DT_TEFootprintDecal::ignored>(DT_TEFootprintDecal::ignored*)
 T int ServerClassInit<DT_TEGaussExplosion::ignored>(DT_TEGaussExplosion::ignored*)
 T int ServerClassInit<DT_TEGlowSprite::ignored>(DT_TEGlowSprite::ignored*)
 T int ServerClassInit<DT_TEImpact::ignored>(DT_TEImpact::ignored*)
 T int ServerClassInit<DT_TEKillPlayerAttachments::ignored>(DT_TEKillPlayerAttachments::ignored*)
 T int ServerClassInit<DT_TELargeFunnel::ignored>(DT_TELargeFunnel::ignored*)
 T int ServerClassInit<DT_TEMetalSparks::ignored>(DT_TEMetalSparks::ignored*)
 T int ServerClassInit<DT_TEMuzzleFlash::ignored>(DT_TEMuzzleFlash::ignored*)
 T int ServerClassInit<DT_TEParticleSystem::ignored>(DT_TEParticleSystem::ignored*)
 T int ServerClassInit<DT_TEPhysicsProp::ignored>(DT_TEPhysicsProp::ignored*)
 T int ServerClassInit<DT_TEPlayerAnimEvent::ignored>(DT_TEPlayerAnimEvent::ignored*)
 T int ServerClassInit<DT_TEPlayerDecal::ignored>(DT_TEPlayerDecal::ignored*)
 T int ServerClassInit<DT_TEProjectedDecal::ignored>(DT_TEProjectedDecal::ignored*)
 T int ServerClassInit<DT_TEShatterSurface::ignored>(DT_TEShatterSurface::ignored*)
 T int ServerClassInit<DT_TEShowLine::ignored>(DT_TEShowLine::ignored*)
 T int ServerClassInit<DT_TESmoke::ignored>(DT_TESmoke::ignored*)
 T int ServerClassInit<DT_TESparks::ignored>(DT_TESparks::ignored*)
 T int ServerClassInit<DT_TESprite::ignored>(DT_TESprite::ignored*)
 T int ServerClassInit<DT_TESpriteSpray::ignored>(DT_TESpriteSpray::ignored*)
 T int ServerClassInit<DT_TETFBlood::ignored>(DT_TETFBlood::ignored*)
 T int ServerClassInit<DT_TETFExplosion::ignored>(DT_TETFExplosion::ignored*)
 T int ServerClassInit<DT_TETFParticleEffect::ignored>(DT_TETFParticleEffect::ignored*)
 T int ServerClassInit<DT_TEWorldDecal::ignored>(DT_TEWorldDecal::ignored*)
 T int ServerClassInit<DT_TFBaseBoss::ignored>(DT_TFBaseBoss::ignored*)
 T int ServerClassInit<DT_TFBaseProjectile::ignored>(DT_TFBaseProjectile::ignored*)
 T int ServerClassInit<DT_TFBaseRocket::ignored>(DT_TFBaseRocket::ignored*)
 T int ServerClassInit<DT_TFBotHintEngineerNest::ignored>(DT_TFBotHintEngineerNest::ignored*)
 T int ServerClassInit<DT_TFCannon::ignored>(DT_TFCannon::ignored*)
 T int ServerClassInit<DT_TFDroppedWeapon::ignored>(DT_TFDroppedWeapon::ignored*)
 T int ServerClassInit<DT_TFFlameRocket::ignored>(DT_TFFlameRocket::ignored*)
 T int ServerClassInit<DT_TFGameRules::ignored>(DT_TFGameRules::ignored*)
 T int ServerClassInit<DT_TFGameRulesProxy::ignored>(DT_TFGameRulesProxy::ignored*)
 T int ServerClassInit<DT_TFGenericBomb::ignored>(DT_TFGenericBomb::ignored*)
 T int ServerClassInit<DT_TFGlow::ignored>(DT_TFGlow::ignored*)
 T int ServerClassInit<DT_TFHalloweenMinigame::ignored>(DT_TFHalloweenMinigame::ignored*)
 T int ServerClassInit<DT_TFHalloweenMinigame_FallingPlatforms::ignored>(DT_TFHalloweenMinigame_FallingPlatforms::ignored*)
 T int ServerClassInit<DT_TFHellZap::ignored>(DT_TFHellZap::ignored*)
 T int ServerClassInit<DT_TFItem::ignored>(DT_TFItem::ignored*)
 T int ServerClassInit<DT_TFLaserPointer::ignored>(DT_TFLaserPointer::ignored*)
 T int ServerClassInit<DT_TFLocalPlayerExclusive::ignored>(DT_TFLocalPlayerExclusive::ignored*)
 T int ServerClassInit<DT_TFLunchBox_Drink::ignored>(DT_TFLunchBox_Drink::ignored*)
 T int ServerClassInit<DT_TFMechanicalArm::ignored>(DT_TFMechanicalArm::ignored*)
 T int ServerClassInit<DT_TFMedigunShield::ignored>(DT_TFMedigunShield::ignored*)
 T int ServerClassInit<DT_TFMinigame::ignored>(DT_TFMinigame::ignored*)
 T int ServerClassInit<DT_TFMinigameLogic::ignored>(DT_TFMinigameLogic::ignored*)
 T int ServerClassInit<DT_TFNonLocalPlayerExclusive::ignored>(DT_TFNonLocalPlayerExclusive::ignored*)
 T int ServerClassInit<DT_TFObjectiveResource::ignored>(DT_TFObjectiveResource::ignored*)
 T int ServerClassInit<DT_TFPEPBrawlerBlaster::ignored>(DT_TFPEPBrawlerBlaster::ignored*)
 T int ServerClassInit<DT_TFParachute::ignored>(DT_TFParachute::ignored*)
 T int ServerClassInit<DT_TFParachute_Primary::ignored>(DT_TFParachute_Primary::ignored*)
 T int ServerClassInit<DT_TFParachute_Secondary::ignored>(DT_TFParachute_Secondary::ignored*)
 T int ServerClassInit<DT_TFPasstimeLogic::ignored>(DT_TFPasstimeLogic::ignored*)
 T int ServerClassInit<DT_TFPlayer::ignored>(DT_TFPlayer::ignored*)
 T int ServerClassInit<DT_TFPlayerClassShared::ignored>(DT_TFPlayerClassShared::ignored*)
 T int ServerClassInit<DT_TFPlayerConditionListExclusive::ignored>(DT_TFPlayerConditionListExclusive::ignored*)
 T int ServerClassInit<DT_TFPlayerConditionSource::ignored>(DT_TFPlayerConditionSource::ignored*)
 T int ServerClassInit<DT_TFPlayerDestructionLogic::ignored>(DT_TFPlayerDestructionLogic::ignored*)
 T int ServerClassInit<DT_TFPlayerResource::ignored>(DT_TFPlayerResource::ignored*)
 T int ServerClassInit<DT_TFPlayerScoringDataExclusive::ignored>(DT_TFPlayerScoringDataExclusive::ignored*)
 T int ServerClassInit<DT_TFPlayerShared::ignored>(DT_TFPlayerShared::ignored*)
 T int ServerClassInit<DT_TFPlayerSharedLocal::ignored>(DT_TFPlayerSharedLocal::ignored*)
 T int ServerClassInit<DT_TFPowerupBottle::ignored>(DT_TFPowerupBottle::ignored*)
 T int ServerClassInit<DT_TFProjectileBall_Ornament::ignored>(DT_TFProjectileBall_Ornament::ignored*)
 T int ServerClassInit<DT_TFProjectile_Arrow::ignored>(DT_TFProjectile_Arrow::ignored*)
 T int ServerClassInit<DT_TFProjectile_Cleaver::ignored>(DT_TFProjectile_Cleaver::ignored*)
 T int ServerClassInit<DT_TFProjectile_EnergyBall::ignored>(DT_TFProjectile_EnergyBall::ignored*)
 T int ServerClassInit<DT_TFProjectile_EnergyRing::ignored>(DT_TFProjectile_EnergyRing::ignored*)
 T int ServerClassInit<DT_TFProjectile_Flare::ignored>(DT_TFProjectile_Flare::ignored*)
 T int ServerClassInit<DT_TFProjectile_GrapplingHook::ignored>(DT_TFProjectile_GrapplingHook::ignored*)
 T int ServerClassInit<DT_TFProjectile_HealingBolt::ignored>(DT_TFProjectile_HealingBolt::ignored*)
 T int ServerClassInit<DT_TFProjectile_Jar::ignored>(DT_TFProjectile_Jar::ignored*)
 T int ServerClassInit<DT_TFProjectile_JarMilk::ignored>(DT_TFProjectile_JarMilk::ignored*)
 T int ServerClassInit<DT_TFProjectile_Pipebomb::ignored>(DT_TFProjectile_Pipebomb::ignored*)
 T int ServerClassInit<DT_TFProjectile_Rocket::ignored>(DT_TFProjectile_Rocket::ignored*)
 T int ServerClassInit<DT_TFProjectile_SentryRocket::ignored>(DT_TFProjectile_SentryRocket::ignored*)
 T int ServerClassInit<DT_TFProjectile_SpellBats::ignored>(DT_TFProjectile_SpellBats::ignored*)
 T int ServerClassInit<DT_TFProjectile_SpellFireball::ignored>(DT_TFProjectile_SpellFireball::ignored*)
 T int ServerClassInit<DT_TFProjectile_SpellKartBats::ignored>(DT_TFProjectile_SpellKartBats::ignored*)
 T int ServerClassInit<DT_TFProjectile_SpellKartOrb::ignored>(DT_TFProjectile_SpellKartOrb::ignored*)
 T int ServerClassInit<DT_TFProjectile_SpellLightningOrb::ignored>(DT_TFProjectile_SpellLightningOrb::ignored*)
 T int ServerClassInit<DT_TFProjectile_SpellMeteorShower::ignored>(DT_TFProjectile_SpellMeteorShower::ignored*)
 T int ServerClassInit<DT_TFProjectile_SpellMirv::ignored>(DT_TFProjectile_SpellMirv::ignored*)
 T int ServerClassInit<DT_TFProjectile_SpellPumpkin::ignored>(DT_TFProjectile_SpellPumpkin::ignored*)
 T int ServerClassInit<DT_TFProjectile_SpellSpawnBoss::ignored>(DT_TFProjectile_SpellSpawnBoss::ignored*)
 T int ServerClassInit<DT_TFProjectile_SpellSpawnHorde::ignored>(DT_TFProjectile_SpellSpawnHorde::ignored*)
 T int ServerClassInit<DT_TFProjectile_SpellSpawnZombie::ignored>(DT_TFProjectile_SpellSpawnZombie::ignored*)
 T int ServerClassInit<DT_TFProjectile_StunBall::ignored>(DT_TFProjectile_StunBall::ignored*)
 T int ServerClassInit<DT_TFProjectile_Throwable::ignored>(DT_TFProjectile_Throwable::ignored*)
 T int ServerClassInit<DT_TFProjectile_ThrowableBreadMonster::ignored>(DT_TFProjectile_ThrowableBreadMonster::ignored*)
 T int ServerClassInit<DT_TFProjectile_ThrowableBrick::ignored>(DT_TFProjectile_ThrowableBrick::ignored*)
 T int ServerClassInit<DT_TFProjectile_ThrowableRepel::ignored>(DT_TFProjectile_ThrowableRepel::ignored*)
 T int ServerClassInit<DT_TFPumpkinBomb::ignored>(DT_TFPumpkinBomb::ignored*)
 T int ServerClassInit<DT_TFRagdoll::ignored>(DT_TFRagdoll::ignored*)
 T int ServerClassInit<DT_TFReviveMarker::ignored>(DT_TFReviveMarker::ignored*)
 T int ServerClassInit<DT_TFRobotDestructionLogic::ignored>(DT_TFRobotDestructionLogic::ignored*)
 T int ServerClassInit<DT_TFRobotDestructionRobotSpawn::ignored>(DT_TFRobotDestructionRobotSpawn::ignored*)
 T int ServerClassInit<DT_TFRobotDestruction_Robot::ignored>(DT_TFRobotDestruction_Robot::ignored*)
 T int ServerClassInit<DT_TFRobotDestruction_RobotGroup::ignored>(DT_TFRobotDestruction_RobotGroup::ignored*)
 T int ServerClassInit<DT_TFSMG::ignored>(DT_TFSMG::ignored*)
 T int ServerClassInit<DT_TFScatterGun::ignored>(DT_TFScatterGun::ignored*)
 T int ServerClassInit<DT_TFSendHealersDataTable::ignored>(DT_TFSendHealersDataTable::ignored*)
 T int ServerClassInit<DT_TFShotgun::ignored>(DT_TFShotgun::ignored*)
 T int ServerClassInit<DT_TFShotgunBuildingRescue::ignored>(DT_TFShotgunBuildingRescue::ignored*)
 T int ServerClassInit<DT_TFShotgun_HWG::ignored>(DT_TFShotgun_HWG::ignored*)
 T int ServerClassInit<DT_TFShotgun_Pyro::ignored>(DT_TFShotgun_Pyro::ignored*)
 T int ServerClassInit<DT_TFShotgun_Revenge::ignored>(DT_TFShotgun_Revenge::ignored*)
 T int ServerClassInit<DT_TFShotgun_Soldier::ignored>(DT_TFShotgun_Soldier::ignored*)
 T int ServerClassInit<DT_TFSniperRifle::ignored>(DT_TFSniperRifle::ignored*)
 T int ServerClassInit<DT_TFSniperRifleClassic::ignored>(DT_TFSniperRifleClassic::ignored*)
 T int ServerClassInit<DT_TFSniperRifleDecap::ignored>(DT_TFSniperRifleDecap::ignored*)
 T int ServerClassInit<DT_TFSodaPopper::ignored>(DT_TFSodaPopper::ignored*)
 T int ServerClassInit<DT_TFTankBoss::ignored>(DT_TFTankBoss::ignored*)
 T int ServerClassInit<DT_TFTauntProp::ignored>(DT_TFTauntProp::ignored*)
 T int ServerClassInit<DT_TFTeam::ignored>(DT_TFTeam::ignored*)
 T int ServerClassInit<DT_TFViewModel::ignored>(DT_TFViewModel::ignored*)
 T int ServerClassInit<DT_TFWeaponBase::ignored>(DT_TFWeaponBase::ignored*)
 T int ServerClassInit<DT_TFWeaponBaseGrenadeProj::ignored>(DT_TFWeaponBaseGrenadeProj::ignored*)
 T int ServerClassInit<DT_TFWeaponBaseGun::ignored>(DT_TFWeaponBaseGun::ignored*)
 T int ServerClassInit<DT_TFWeaponBaseMelee::ignored>(DT_TFWeaponBaseMelee::ignored*)
 T int ServerClassInit<DT_TFWeaponBaseMerasmusGrenade::ignored>(DT_TFWeaponBaseMerasmusGrenade::ignored*)
 T int ServerClassInit<DT_TFWeaponBat::ignored>(DT_TFWeaponBat::ignored*)
 T int ServerClassInit<DT_TFWeaponBat_Fish::ignored>(DT_TFWeaponBat_Fish::ignored*)
 T int ServerClassInit<DT_TFWeaponBat_Giftwrap::ignored>(DT_TFWeaponBat_Giftwrap::ignored*)
 T int ServerClassInit<DT_TFWeaponBat_Wood::ignored>(DT_TFWeaponBat_Wood::ignored*)
 T int ServerClassInit<DT_TFWeaponBonesaw::ignored>(DT_TFWeaponBonesaw::ignored*)
 T int ServerClassInit<DT_TFWeaponBottle::ignored>(DT_TFWeaponBottle::ignored*)
 T int ServerClassInit<DT_TFWeaponBuffItem::ignored>(DT_TFWeaponBuffItem::ignored*)
 T int ServerClassInit<DT_TFWeaponBuilder::ignored>(DT_TFWeaponBuilder::ignored*)
 T int ServerClassInit<DT_TFWeaponCleaver::ignored>(DT_TFWeaponCleaver::ignored*)
 T int ServerClassInit<DT_TFWeaponClub::ignored>(DT_TFWeaponClub::ignored*)
 T int ServerClassInit<DT_TFWeaponDataNonLocal::ignored>(DT_TFWeaponDataNonLocal::ignored*)
 T int ServerClassInit<DT_TFWeaponFireAxe::ignored>(DT_TFWeaponFireAxe::ignored*)
 T int ServerClassInit<DT_TFWeaponFists::ignored>(DT_TFWeaponFists::ignored*)
 T int ServerClassInit<DT_TFWeaponInvis::ignored>(DT_TFWeaponInvis::ignored*)
 T int ServerClassInit<DT_TFWeaponJar::ignored>(DT_TFWeaponJar::ignored*)
 T int ServerClassInit<DT_TFWeaponJarMilk::ignored>(DT_TFWeaponJarMilk::ignored*)
 T int ServerClassInit<DT_TFWeaponKatana::ignored>(DT_TFWeaponKatana::ignored*)
 T int ServerClassInit<DT_TFWeaponKnife::ignored>(DT_TFWeaponKnife::ignored*)
 T int ServerClassInit<DT_TFWeaponMedigunDataNonLocal::ignored>(DT_TFWeaponMedigunDataNonLocal::ignored*)
 T int ServerClassInit<DT_TFWeaponPDA::ignored>(DT_TFWeaponPDA::ignored*)
 T int ServerClassInit<DT_TFWeaponPDAExpansion_Dispenser::ignored>(DT_TFWeaponPDAExpansion_Dispenser::ignored*)
 T int ServerClassInit<DT_TFWeaponPDAExpansion_Teleporter::ignored>(DT_TFWeaponPDAExpansion_Teleporter::ignored*)
 T int ServerClassInit<DT_TFWeaponPDA_Engineer_Build::ignored>(DT_TFWeaponPDA_Engineer_Build::ignored*)
 T int ServerClassInit<DT_TFWeaponPDA_Engineer_Destroy::ignored>(DT_TFWeaponPDA_Engineer_Destroy::ignored*)
 T int ServerClassInit<DT_TFWeaponPDA_Spy::ignored>(DT_TFWeaponPDA_Spy::ignored*)
 T int ServerClassInit<DT_TFWeaponRobotArm::ignored>(DT_TFWeaponRobotArm::ignored*)
 T int ServerClassInit<DT_TFWeaponSapper::ignored>(DT_TFWeaponSapper::ignored*)
 T int ServerClassInit<DT_TFWeaponShovel::ignored>(DT_TFWeaponShovel::ignored*)
 T int ServerClassInit<DT_TFWeaponSpellBook::ignored>(DT_TFWeaponSpellBook::ignored*)
 T int ServerClassInit<DT_TFWeaponStickBomb::ignored>(DT_TFWeaponStickBomb::ignored*)
 T int ServerClassInit<DT_TFWeaponSword::ignored>(DT_TFWeaponSword::ignored*)
 T int ServerClassInit<DT_TFWeaponThrowable::ignored>(DT_TFWeaponThrowable::ignored*)
 T int ServerClassInit<DT_TFWeaponWrench::ignored>(DT_TFWeaponWrench::ignored*)
 T int ServerClassInit<DT_TFWearable::ignored>(DT_TFWearable::ignored*)
 T int ServerClassInit<DT_TFWearableDemoShield::ignored>(DT_TFWearableDemoShield::ignored*)
 T int ServerClassInit<DT_TFWearableItem::ignored>(DT_TFWearableItem::ignored*)
 T int ServerClassInit<DT_TFWearableLevelableItem::ignored>(DT_TFWearableLevelableItem::ignored*)
 T int ServerClassInit<DT_TFWearableRobotArm::ignored>(DT_TFWearableRobotArm::ignored*)
 T int ServerClassInit<DT_TFWearableVM::ignored>(DT_TFWearableVM::ignored*)
 T int ServerClassInit<DT_Team::ignored>(DT_Team::ignored*)
 T int ServerClassInit<DT_TeamRoundTimer::ignored>(DT_TeamRoundTimer::ignored*)
 T int ServerClassInit<DT_TeamTrainWatcher::ignored>(DT_TeamTrainWatcher::ignored*)
 T int ServerClassInit<DT_TeamplayRoundBasedRules::ignored>(DT_TeamplayRoundBasedRules::ignored*)
 T int ServerClassInit<DT_TeamplayRoundBasedRulesProxy::ignored>(DT_TeamplayRoundBasedRulesProxy::ignored*)
 T int ServerClassInit<DT_TeleportVortex::ignored>(DT_TeleportVortex::ignored*)
 T int ServerClassInit<DT_Tesla::ignored>(DT_Tesla::ignored*)
 T int ServerClassInit<DT_TestTraceline::ignored>(DT_TestTraceline::ignored*)
 T int ServerClassInit<DT_VGuiScreen::ignored>(DT_VGuiScreen::ignored*)
 T int ServerClassInit<DT_VoteController::ignored>(DT_VoteController::ignored*)
 T int ServerClassInit<DT_WORLD::ignored>(DT_WORLD::ignored*)
 T int ServerClassInit<DT_WaterBullet::ignored>(DT_WaterBullet::ignored*)
 T int ServerClassInit<DT_WaterLODControl::ignored>(DT_WaterLODControl::ignored*)
 T int ServerClassInit<DT_WeaponChargedSMG::ignored>(DT_WeaponChargedSMG::ignored*)
 T int ServerClassInit<DT_WeaponCompoundBow::ignored>(DT_WeaponCompoundBow::ignored*)
 T int ServerClassInit<DT_WeaponDRGPomson::ignored>(DT_WeaponDRGPomson::ignored*)
 T int ServerClassInit<DT_WeaponFlameThrower::ignored>(DT_WeaponFlameThrower::ignored*)
 T int ServerClassInit<DT_WeaponFlareGun::ignored>(DT_WeaponFlareGun::ignored*)
 T int ServerClassInit<DT_WeaponFlareGun_Revenge::ignored>(DT_WeaponFlareGun_Revenge::ignored*)
 T int ServerClassInit<DT_WeaponGrenadeLauncher::ignored>(DT_WeaponGrenadeLauncher::ignored*)
 T int ServerClassInit<DT_WeaponIFMBase::ignored>(DT_WeaponIFMBase::ignored*)
 T int ServerClassInit<DT_WeaponIFMBaseCamera::ignored>(DT_WeaponIFMBaseCamera::ignored*)
 T int ServerClassInit<DT_WeaponIFMSteadyCam::ignored>(DT_WeaponIFMSteadyCam::ignored*)
 T int ServerClassInit<DT_WeaponLunchBox::ignored>(DT_WeaponLunchBox::ignored*)
 T int ServerClassInit<DT_WeaponMedigun::ignored>(DT_WeaponMedigun::ignored*)
 T int ServerClassInit<DT_WeaponMinigun::ignored>(DT_WeaponMinigun::ignored*)
 T int ServerClassInit<DT_WeaponPipebombLauncher::ignored>(DT_WeaponPipebombLauncher::ignored*)
 T int ServerClassInit<DT_WeaponPistol::ignored>(DT_WeaponPistol::ignored*)
 T int ServerClassInit<DT_WeaponPistol_Scout::ignored>(DT_WeaponPistol_Scout::ignored*)
 T int ServerClassInit<DT_WeaponPistol_ScoutPrimary::ignored>(DT_WeaponPistol_ScoutPrimary::ignored*)
 T int ServerClassInit<DT_WeaponPistol_ScoutSecondary::ignored>(DT_WeaponPistol_ScoutSecondary::ignored*)
 T int ServerClassInit<DT_WeaponRaygun::ignored>(DT_WeaponRaygun::ignored*)
 T int ServerClassInit<DT_WeaponRevolver::ignored>(DT_WeaponRevolver::ignored*)
 T int ServerClassInit<DT_WeaponRocketLauncher::ignored>(DT_WeaponRocketLauncher::ignored*)
 T int ServerClassInit<DT_WeaponRocketLauncher_AirStrike::ignored>(DT_WeaponRocketLauncher_AirStrike::ignored*)
 T int ServerClassInit<DT_WeaponRocketLauncher_DirectHit::ignored>(DT_WeaponRocketLauncher_DirectHit::ignored*)
 T int ServerClassInit<DT_WeaponRocketLauncher_Mortar::ignored>(DT_WeaponRocketLauncher_Mortar::ignored*)
 T int ServerClassInit<DT_WeaponSyringeGun::ignored>(DT_WeaponSyringeGun::ignored*)
 T int ServerClassInit<DT_WearableItem::ignored>(DT_WearableItem::ignored*)
 T int ServerClassInit<DT_Zombie::ignored>(DT_Zombie::ignored*)
 T int ServerClassInit<SpellTransposeTeleport::ignored>(SpellTransposeTeleport::ignored*)
 T int V_sprintf_safe<128ul>(char (&) [128ul], char const*, ...)
 T int V_sprintf_safe<255ul>(char (&) [255ul], char const*, ...)
 T int V_sprintf_safe<25ul>(char (&) [25ul], char const*, ...)
 T int V_sprintf_safe<260ul>(char (&) [260ul], char const*, ...)
 T int V_sprintf_safe<32ul>(char (&) [32ul], char const*, ...)
 T int V_sprintf_safe<64ul>(char (&) [64ul], char const*, ...)
 T int V_swprintf_safe<128ul>(wchar_t (&) [128ul], wchar_t const*, ...)
 T int const& CNetworkVarBase<int, CBaseAnimating::NetworkVar_m_nBody>::operator=<int>(int const&)
 T int const& CNetworkVarBase<int, CBaseAnimating::NetworkVar_m_nSkin>::operator=<int>(int const&)
 T int const& CNetworkVarBase<int, CBaseCombatWeapon::NetworkVar_m_iState>::operator=<int>(int const&)
 T int const& CNetworkVarBase<int, CBaseEntity::NetworkVar_m_spawnflags>::operator|=<int>(int const&)
 T int const& CNetworkVarBase<int, CBaseFire::NetworkVar_m_nFlags>::operator&=<int>(int const&)
 T int const& CNetworkVarBase<int, CBaseFire::NetworkVar_m_nFlags>::operator|=<int>(int const&)
 T int const& CNetworkVarBase<int, CBeam::NetworkVar_m_nNumBeamEnts>::operator=<int>(int const&)
 T int const& CNetworkVarBase<int, CEyeballBoss::NetworkVar_m_attitude>::operator=<int>(int const&)
 T int const& CNetworkVarBase<int, CFunc_Dust::NetworkVar_m_DustFlags>::operator|=<int>(int const&)
 T int const& CNetworkVarBase<int, CMaterialModifyControl::NetworkVar_m_nModifyMode>::operator=<MaterialModifyMode_t>(MaterialModifyMode_t const&)
 T int const& CNetworkVarBase<int, CMonsterResource::NetworkVar_m_iSkillShotCompleteCount>::operator=<int>(int const&)
 T int const& CNetworkVarBase<int, CRopeKeyframe::NetworkVar_m_RopeFlags>::operator|=<int>(int const&)
 T int const& CNetworkVarBase<int, CRopeKeyframe::NetworkVar_m_RopeLength>::operator=<int>(int const&)
 T int const& CNetworkVarBase<int, CRopeKeyframe::NetworkVar_m_iRopeMaterialModelIndex>::operator=<int>(int const&)
 T int const& CNetworkVarBase<int, CRopeKeyframe::NetworkVar_m_nSegments>::operator=<int>(int const&)
 T int const& CNetworkVarBase<int, CSmokeStack::NetworkVar_m_bEmit>::operator=<bool>(bool const&)
 T int const& CNetworkVarBase<int, CSmokeStack::NetworkVar_m_iMaterialModel>::operator=<int>(int const&)
 T int const& CNetworkVarBase<int, CSteamJet::NetworkVar_m_bEmit>::operator=<bool>(bool const&)
 T int const& CNetworkVarBase<int, CTFPlayer::NetworkVar_m_iKartState>::operator|=<CTFPlayerShared::EKartStateFlags>(CTFPlayerShared::EKartStateFlags const&)
 T int const& CNetworkVarBase<int, CTFPlayer::NetworkVar_m_nCurrency>::operator=<int>(int const&)
 T int const& CNetworkVarBase<int, CTFRagdoll::NetworkVar_m_iDamageCustom>::operator=<int>(int const&)
 T int const& CNetworkVarBase<int, CTFSpellBook::NetworkVar_m_iSpellCharges>::operator=<int>(int const&)
 T int const& CNetworkVarBase<int, CTFStickBomb::NetworkVar_m_iDetonated>::operator=<int>(int const&)
 T int const& CNetworkVarBase<int, CTFWeaponBase::NetworkVar_m_nInspectStage>::operator=<CTFWeaponBase::TFWeaponInspectStage>(CTFWeaponBase::TFWeaponInspectStage const&)
 T int const& CNetworkVarBase<int, CTeamTrainWatcher::NetworkVar_m_iTrainSpeedLevel>::operator=<int>(int const&)
 T kill_helper(CCommand const&, bool)
 T killvector_helper(CCommand const&, bool)
 T localplayerscoring_t::NetworkStateChanged()
 T localplayerscoring_t::NetworkStateChanged(void*)
 T localplayerscoring_t::Reset()
 T localplayerscoring_t::UpdateStats(RoundStats_t&, CTFPlayer*, bool)
 T locksound_t::GetDataDescMap()
 T mstudioanimdesc_t::pAnim(int*) const
 T mstudioanimdesc_t::pAnim(int*, float&) const
 T mstudioanimdesc_t::pHierarchy(int) const
 T mstudioanimdesc_t::pIKRule(int) const
 T nexttoken(char*, char const*, char)
 T non-virtual thunk to Action<CBotNPCArcher>::~Action()
 T non-virtual thunk to Action<CBotNPCDecoy>::~Action()
 T non-virtual thunk to Action<CEyeballBoss>::~Action()
 T non-virtual thunk to Action<CGhost>::~Action()
 T non-virtual thunk to Action<CHeadlessHatman>::~Action()
 T non-virtual thunk to Action<CMerasmus>::~Action()
 T non-virtual thunk to Action<CSimpleBot>::~Action()
 T non-virtual thunk to Action<CTFBot>::~Action()
 T non-virtual thunk to Action<CTFRobotDestruction_Robot>::~Action()
 T non-virtual thunk to Action<CZombie>::~Action()
 T non-virtual thunk to Behavior<CBotNPCArcher>::IsHindrance(INextBot const*, CBaseEntity*) const
 T non-virtual thunk to Behavior<CBotNPCArcher>::IsPositionAllowed(INextBot const*, Vector const&) const
 T non-virtual thunk to Behavior<CBotNPCArcher>::SelectMoreDangerousThreat(INextBot const*, CBaseCombatCharacter const*, CKnownEntity const*, CKnownEntity const*) const
 T non-virtual thunk to Behavior<CBotNPCArcher>::SelectTargetPoint(INextBot const*, CBaseCombatCharacter const*) const
 T non-virtual thunk to Behavior<CBotNPCArcher>::ShouldAttack(INextBot const*, CKnownEntity const*) const
 T non-virtual thunk to Behavior<CBotNPCArcher>::ShouldHurry(INextBot const*) const
 T non-virtual thunk to Behavior<CBotNPCArcher>::ShouldPickUp(INextBot const*, CBaseEntity*) const
 T non-virtual thunk to Behavior<CBotNPCArcher>::ShouldRetreat(INextBot const*) const
 T non-virtual thunk to Behavior<CBotNPCArcher>::~Behavior()
 T non-virtual thunk to Behavior<CBotNPCDecoy>::IsHindrance(INextBot const*, CBaseEntity*) const
 T non-virtual thunk to Behavior<CBotNPCDecoy>::IsPositionAllowed(INextBot const*, Vector const&) const
 T non-virtual thunk to Behavior<CBotNPCDecoy>::SelectMoreDangerousThreat(INextBot const*, CBaseCombatCharacter const*, CKnownEntity const*, CKnownEntity const*) const
 T non-virtual thunk to Behavior<CBotNPCDecoy>::SelectTargetPoint(INextBot const*, CBaseCombatCharacter const*) const
 T non-virtual thunk to Behavior<CBotNPCDecoy>::ShouldAttack(INextBot const*, CKnownEntity const*) const
 T non-virtual thunk to Behavior<CBotNPCDecoy>::ShouldHurry(INextBot const*) const
 T non-virtual thunk to Behavior<CBotNPCDecoy>::ShouldPickUp(INextBot const*, CBaseEntity*) const
 T non-virtual thunk to Behavior<CBotNPCDecoy>::ShouldRetreat(INextBot const*) const
 T non-virtual thunk to Behavior<CBotNPCDecoy>::~Behavior()
 T non-virtual thunk to Behavior<CEyeballBoss>::IsHindrance(INextBot const*, CBaseEntity*) const
 T non-virtual thunk to Behavior<CEyeballBoss>::IsPositionAllowed(INextBot const*, Vector const&) const
 T non-virtual thunk to Behavior<CEyeballBoss>::SelectMoreDangerousThreat(INextBot const*, CBaseCombatCharacter const*, CKnownEntity const*, CKnownEntity const*) const
 T non-virtual thunk to Behavior<CEyeballBoss>::SelectTargetPoint(INextBot const*, CBaseCombatCharacter const*) const
 T non-virtual thunk to Behavior<CEyeballBoss>::ShouldAttack(INextBot const*, CKnownEntity const*) const
 T non-virtual thunk to Behavior<CEyeballBoss>::ShouldHurry(INextBot const*) const
 T non-virtual thunk to Behavior<CEyeballBoss>::ShouldPickUp(INextBot const*, CBaseEntity*) const
 T non-virtual thunk to Behavior<CEyeballBoss>::ShouldRetreat(INextBot const*) const
 T non-virtual thunk to Behavior<CEyeballBoss>::~Behavior()
 T non-virtual thunk to Behavior<CGhost>::IsHindrance(INextBot const*, CBaseEntity*) const
 T non-virtual thunk to Behavior<CGhost>::IsPositionAllowed(INextBot const*, Vector const&) const
 T non-virtual thunk to Behavior<CGhost>::SelectMoreDangerousThreat(INextBot const*, CBaseCombatCharacter const*, CKnownEntity const*, CKnownEntity const*) const
 T non-virtual thunk to Behavior<CGhost>::SelectTargetPoint(INextBot const*, CBaseCombatCharacter const*) const
 T non-virtual thunk to Behavior<CGhost>::ShouldAttack(INextBot const*, CKnownEntity const*) const
 T non-virtual thunk to Behavior<CGhost>::ShouldHurry(INextBot const*) const
 T non-virtual thunk to Behavior<CGhost>::ShouldPickUp(INextBot const*, CBaseEntity*) const
 T non-virtual thunk to Behavior<CGhost>::ShouldRetreat(INextBot const*) const
 T non-virtual thunk to Behavior<CGhost>::~Behavior()
 T non-virtual thunk to Behavior<CHeadlessHatman>::IsHindrance(INextBot const*, CBaseEntity*) const
 T non-virtual thunk to Behavior<CHeadlessHatman>::IsPositionAllowed(INextBot const*, Vector const&) const
 T non-virtual thunk to Behavior<CHeadlessHatman>::SelectMoreDangerousThreat(INextBot const*, CBaseCombatCharacter const*, CKnownEntity const*, CKnownEntity const*) const
 T non-virtual thunk to Behavior<CHeadlessHatman>::SelectTargetPoint(INextBot const*, CBaseCombatCharacter const*) const
 T non-virtual thunk to Behavior<CHeadlessHatman>::ShouldAttack(INextBot const*, CKnownEntity const*) const
 T non-virtual thunk to Behavior<CHeadlessHatman>::ShouldHurry(INextBot const*) const
 T non-virtual thunk to Behavior<CHeadlessHatman>::ShouldPickUp(INextBot const*, CBaseEntity*) const
 T non-virtual thunk to Behavior<CHeadlessHatman>::ShouldRetreat(INextBot const*) const
 T non-virtual thunk to Behavior<CHeadlessHatman>::~Behavior()
 T non-virtual thunk to Behavior<CMerasmus>::IsHindrance(INextBot const*, CBaseEntity*) const
 T non-virtual thunk to Behavior<CMerasmus>::IsPositionAllowed(INextBot const*, Vector const&) const
 T non-virtual thunk to Behavior<CMerasmus>::SelectMoreDangerousThreat(INextBot const*, CBaseCombatCharacter const*, CKnownEntity const*, CKnownEntity const*) const
 T non-virtual thunk to Behavior<CMerasmus>::SelectTargetPoint(INextBot const*, CBaseCombatCharacter const*) const
 T non-virtual thunk to Behavior<CMerasmus>::ShouldAttack(INextBot const*, CKnownEntity const*) const
 T non-virtual thunk to Behavior<CMerasmus>::ShouldHurry(INextBot const*) const
 T non-virtual thunk to Behavior<CMerasmus>::ShouldPickUp(INextBot const*, CBaseEntity*) const
 T non-virtual thunk to Behavior<CMerasmus>::ShouldRetreat(INextBot const*) const
 T non-virtual thunk to Behavior<CMerasmus>::~Behavior()
 T non-virtual thunk to Behavior<CSimpleBot>::IsHindrance(INextBot const*, CBaseEntity*) const
 T non-virtual thunk to Behavior<CSimpleBot>::IsPositionAllowed(INextBot const*, Vector const&) const
 T non-virtual thunk to Behavior<CSimpleBot>::SelectMoreDangerousThreat(INextBot const*, CBaseCombatCharacter const*, CKnownEntity const*, CKnownEntity const*) const
 T non-virtual thunk to Behavior<CSimpleBot>::SelectTargetPoint(INextBot const*, CBaseCombatCharacter const*) const
 T non-virtual thunk to Behavior<CSimpleBot>::ShouldAttack(INextBot const*, CKnownEntity const*) const
 T non-virtual thunk to Behavior<CSimpleBot>::ShouldHurry(INextBot const*) const
 T non-virtual thunk to Behavior<CSimpleBot>::ShouldPickUp(INextBot const*, CBaseEntity*) const
 T non-virtual thunk to Behavior<CSimpleBot>::ShouldRetreat(INextBot const*) const
 T non-virtual thunk to Behavior<CSimpleBot>::~Behavior()
 T non-virtual thunk to Behavior<CTFBot>::IsHindrance(INextBot const*, CBaseEntity*) const
 T non-virtual thunk to Behavior<CTFBot>::IsPositionAllowed(INextBot const*, Vector const&) const
 T non-virtual thunk to Behavior<CTFBot>::SelectMoreDangerousThreat(INextBot const*, CBaseCombatCharacter const*, CKnownEntity const*, CKnownEntity const*) const
 T non-virtual thunk to Behavior<CTFBot>::SelectTargetPoint(INextBot const*, CBaseCombatCharacter const*) const
 T non-virtual thunk to Behavior<CTFBot>::ShouldAttack(INextBot const*, CKnownEntity const*) const
 T non-virtual thunk to Behavior<CTFBot>::ShouldHurry(INextBot const*) const
 T non-virtual thunk to Behavior<CTFBot>::ShouldPickUp(INextBot const*, CBaseEntity*) const
 T non-virtual thunk to Behavior<CTFBot>::ShouldRetreat(INextBot const*) const
 T non-virtual thunk to Behavior<CTFBot>::~Behavior()
 T non-virtual thunk to Behavior<CTFRobotDestruction_Robot>::IsHindrance(INextBot const*, CBaseEntity*) const
 T non-virtual thunk to Behavior<CTFRobotDestruction_Robot>::IsPositionAllowed(INextBot const*, Vector const&) const
 T non-virtual thunk to Behavior<CTFRobotDestruction_Robot>::SelectMoreDangerousThreat(INextBot const*, CBaseCombatCharacter const*, CKnownEntity const*, CKnownEntity const*) const
 T non-virtual thunk to Behavior<CTFRobotDestruction_Robot>::SelectTargetPoint(INextBot const*, CBaseCombatCharacter const*) const
 T non-virtual thunk to Behavior<CTFRobotDestruction_Robot>::ShouldAttack(INextBot const*, CKnownEntity const*) const
 T non-virtual thunk to Behavior<CTFRobotDestruction_Robot>::ShouldHurry(INextBot const*) const
 T non-virtual thunk to Behavior<CTFRobotDestruction_Robot>::ShouldPickUp(INextBot const*, CBaseEntity*) const
 T non-virtual thunk to Behavior<CTFRobotDestruction_Robot>::ShouldRetreat(INextBot const*) const
 T non-virtual thunk to Behavior<CTFRobotDestruction_Robot>::~Behavior()
 T non-virtual thunk to Behavior<CZombie>::IsHindrance(INextBot const*, CBaseEntity*) const
 T non-virtual thunk to Behavior<CZombie>::IsPositionAllowed(INextBot const*, Vector const&) const
 T non-virtual thunk to Behavior<CZombie>::SelectMoreDangerousThreat(INextBot const*, CBaseCombatCharacter const*, CKnownEntity const*, CKnownEntity const*) const
 T non-virtual thunk to Behavior<CZombie>::SelectTargetPoint(INextBot const*, CBaseCombatCharacter const*) const
 T non-virtual thunk to Behavior<CZombie>::ShouldAttack(INextBot const*, CKnownEntity const*) const
 T non-virtual thunk to Behavior<CZombie>::ShouldHurry(INextBot const*) const
 T non-virtual thunk to Behavior<CZombie>::ShouldPickUp(INextBot const*, CBaseEntity*) const
 T non-virtual thunk to Behavior<CZombie>::ShouldRetreat(INextBot const*) const
 T non-virtual thunk to Behavior<CZombie>::~Behavior()
 T non-virtual thunk to CAI_BaseActor::UseSemaphore()
 T non-virtual thunk to CAI_BaseHumanoid::OnMoveBlocked(AIMoveResult_t*)
 T non-virtual thunk to CAI_BaseNPC::CalcYawSpeed()
 T non-virtual thunk to CAI_BaseNPC::OnCalcBaseMove(AILocalMoveGoal_t*, float, AIMoveResult_t*)
 T non-virtual thunk to CAI_BaseNPC::OnObstructionPreSteer(AILocalMoveGoal_t*, float, AIMoveResult_t*)
 T non-virtual thunk to CAI_BehaviorHost<CAI_BaseNPC>::BackBridge_BestEnemy()
 T non-virtual thunk to CAI_BehaviorHost<CAI_BaseNPC>::BackBridge_CanFlinch()
 T non-virtual thunk to CAI_BehaviorHost<CAI_BaseNPC>::BackBridge_CanRunAScriptedNPCInteraction(bool)
 T non-virtual thunk to CAI_BehaviorHost<CAI_BaseNPC>::BackBridge_GatherConditions()
 T non-virtual thunk to CAI_BehaviorHost<CAI_BaseNPC>::BackBridge_GetDefaultNavGoalTolerance()
 T non-virtual thunk to CAI_BehaviorHost<CAI_BaseNPC>::BackBridge_GetFlinchActivity(bool, bool)
 T non-virtual thunk to CAI_BehaviorHost<CAI_BaseNPC>::BackBridge_GetMaxTacticalLateralMovement()
 T non-virtual thunk to CAI_BehaviorHost<CAI_BaseNPC>::BackBridge_GetReasonableFacingDist()
 T non-virtual thunk to CAI_BehaviorHost<CAI_BaseNPC>::BackBridge_HandleAnimEvent(animevent_t*)
 T non-virtual thunk to CAI_BehaviorHost<CAI_BaseNPC>::BackBridge_IsCrouchedActivity(Activity)
 T non-virtual thunk to CAI_BehaviorHost<CAI_BaseNPC>::BackBridge_IsCrouching()
 T non-virtual thunk to CAI_BehaviorHost<CAI_BaseNPC>::BackBridge_IsInterruptable()
 T non-virtual thunk to CAI_BehaviorHost<CAI_BaseNPC>::BackBridge_IsNavigationUrgent()
 T non-virtual thunk to CAI_BehaviorHost<CAI_BaseNPC>::BackBridge_IsValidCover(Vector const&, CAI_Hint const*)
 T non-virtual thunk to CAI_BehaviorHost<CAI_BaseNPC>::BackBridge_IsValidEnemy(CBaseEntity*)
 T non-virtual thunk to CAI_BehaviorHost<CAI_BaseNPC>::BackBridge_IsValidShootPosition(Vector const&, CAI_Node*, CAI_Hint const*)
 T non-virtual thunk to CAI_BehaviorHost<CAI_BaseNPC>::BackBridge_ModifyOrAppendCriteria(AI_CriteriaSet&)
 T non-virtual thunk to CAI_BehaviorHost<CAI_BaseNPC>::BackBridge_NPC_TranslateActivity(Activity)
 T non-virtual thunk to CAI_BehaviorHost<CAI_BaseNPC>::BackBridge_OnCalcBaseMove(AILocalMoveGoal_t*, float, AIMoveResult_t*)
 T non-virtual thunk to CAI_BehaviorHost<CAI_BaseNPC>::BackBridge_OnFriendDamaged(CBaseCombatCharacter*, CBaseEntity*)
 T non-virtual thunk to CAI_BehaviorHost<CAI_BaseNPC>::BackBridge_OnSeeEntity(CBaseEntity*)
 T non-virtual thunk to CAI_BehaviorHost<CAI_BaseNPC>::BackBridge_OnTakeDamage_Alive(CTakeDamageInfo const&)
 T non-virtual thunk to CAI_BehaviorHost<CAI_BaseNPC>::BackBridge_QueryHearSound(CSound*)
 T non-virtual thunk to CAI_BehaviorHost<CAI_BaseNPC>::BackBridge_SelectSchedule()
 T non-virtual thunk to CAI_BehaviorHost<CAI_BaseNPC>::BackBridge_ShouldIgnoreSound(CSound*)
 T non-virtual thunk to CAI_BehaviorHost<CAI_BaseNPC>::BackBridge_ShouldPlayerAvoid()
 T non-virtual thunk to CAI_BehaviorHost<CAI_BaseNPC>::BackBridge_Teleport(Vector const*, QAngle const*, Vector const*)
 T non-virtual thunk to CAI_BehaviorHost<CAI_BaseNPC>::BackBridge_TranslateSchedule(int)
 T non-virtual thunk to CAI_BehaviorHost<CAI_BaseNPC>::OnCalcBaseMove(AILocalMoveGoal_t*, float, AIMoveResult_t*)
 T non-virtual thunk to CAI_GoalEntity::OnEntityCreated(CBaseEntity*)
 T non-virtual thunk to CAI_GoalEntity::OnEntityDeleted(CBaseEntity*)
 T non-virtual thunk to CAI_LeadGoal::GetConceptModifiers(char const*)
 T non-virtual thunk to CAI_LeadGoal::OnEvent(int)
 T non-virtual thunk to CAI_LeadGoal_Weapon::GetConceptModifiers(char const*)
 T non-virtual thunk to CAI_Navigator::CalcYawSpeed()
 T non-virtual thunk to CAI_Navigator::OnCalcBaseMove(AILocalMoveGoal_t*, float, AIMoveResult_t*)
 T non-virtual thunk to CAI_Navigator::OnFailedLocalNavigation(AILocalMoveGoal_t*, float, AIMoveResult_t*)
 T non-virtual thunk to CAI_Navigator::OnFailedSteer(AILocalMoveGoal_t*, float, AIMoveResult_t*)
 T non-virtual thunk to CAI_Navigator::OnInsufficientStopDist(AILocalMoveGoal_t*, float, AIMoveResult_t*)
 T non-virtual thunk to CAI_Navigator::OnMoveBlocked(AIMoveResult_t*)
 T non-virtual thunk to CAI_Navigator::OnMoveExecuteFailed(AILocalMoveGoal_t const&, AIMoveTrace_t const&, AIMotorMoveResult_t, AIMoveResult_t*)
 T non-virtual thunk to CAI_Navigator::OnMoveStalled(AILocalMoveGoal_t const&)
 T non-virtual thunk to CAI_Navigator::OnObstructionPreSteer(AILocalMoveGoal_t*, float, AIMoveResult_t*)
 T non-virtual thunk to CAI_Relationship::OnEntityDeleted(CBaseEntity*)
 T non-virtual thunk to CAI_Relationship::OnEntitySpawned(CBaseEntity*)
 T non-virtual thunk to CAI_ScriptConditions::OnEntitySpawned(CBaseEntity*)
 T non-virtual thunk to CAI_SpeechFilter::OnEntityCreated(CBaseEntity*)
 T non-virtual thunk to CAI_SpeechFilter::OnEntityDeleted(CBaseEntity*)
 T non-virtual thunk to CBaseAchievement::GetAchievementID()
 T non-virtual thunk to CBaseAchievement::GetCount()
 T non-virtual thunk to CBaseAchievement::GetFlags()
 T non-virtual thunk to CBaseAchievement::GetGoal()
 T non-virtual thunk to CBaseAchievement::GetName()
 T non-virtual thunk to CBaseAchievement::GetPointValue()
 T non-virtual thunk to CBaseAchievement::IsAchieved()
 T non-virtual thunk to CBaseAchievement::SetShowOnHUD(bool)
 T non-virtual thunk to CBaseAchievement::ShouldHideUntilAchieved()
 T non-virtual thunk to CBaseAchievement::ShouldSaveWithGame()
 T non-virtual thunk to CBaseAchievement::ShouldShowOnHUD()
 T non-virtual thunk to CBaseGrenade::~CBaseGrenade()
 T non-virtual thunk to CBaseGrenadeConcussion::~CBaseGrenadeConcussion()
 T non-virtual thunk to CBaseGrenadeContact::~CBaseGrenadeContact()
 T non-virtual thunk to CBaseGrenadeTimed::~CBaseGrenadeTimed()
 T non-virtual thunk to CBaseObject::CanBuildObjectOnBuildPoint(int, int)
 T non-virtual thunk to CBaseObject::FindObjectOnBuildPoint(CBaseObject*)
 T non-virtual thunk to CBaseObject::GetAssistant()
 T non-virtual thunk to CBaseObject::GetBuildPoint(int, Vector&, QAngle&)
 T non-virtual thunk to CBaseObject::GetBuildPointAttachmentIndex(int) const
 T non-virtual thunk to CBaseObject::GetMaxSnapDistance(int)
 T non-virtual thunk to CBaseObject::GetNumBuildPoints() const
 T non-virtual thunk to CBaseObject::GetNumObjectsOnMe()
 T non-virtual thunk to CBaseObject::GetObjectOfTypeOnMe(int)
 T non-virtual thunk to CBaseObject::GetScorer()
 T non-virtual thunk to CBaseObject::RemoveAllObjects()
 T non-virtual thunk to CBaseObject::SetObjectOnBuildPoint(int, CBaseObject*)
 T non-virtual thunk to CBaseObject::ShouldCheckForMovement()
 T non-virtual thunk to CBaseObject::~CBaseObject()
 T non-virtual thunk to CBaseObjectUpgrade::~CBaseObjectUpgrade()
 T non-virtual thunk to CBaseProjectile::~CBaseProjectile()
 T non-virtual thunk to CBasePropDoor::~CBasePropDoor()
 T non-virtual thunk to CBaseTFBotHintEntity::~CBaseTFBotHintEntity()
 T non-virtual thunk to CBaseViewModel::GetOwnerViaInterface()
 T non-virtual thunk to CBonusPack::~CBonusPack()
 T non-virtual thunk to CBotNPCArcher::CBotNPCArcherIntention::~CBotNPCArcherIntention()
 T non-virtual thunk to CBotNPCArcher::GetBodyInterface() const
 T non-virtual thunk to CBotNPCArcher::GetIntentionInterface() const
 T non-virtual thunk to CBotNPCArcher::GetLocomotionInterface() const
 T non-virtual thunk to CBotNPCArcher::~CBotNPCArcher()
 T non-virtual thunk to CBotNPCArcherBehavior::~CBotNPCArcherBehavior()
 T non-virtual thunk to CBotNPCArcherGuardSpot::~CBotNPCArcherGuardSpot()
 T non-virtual thunk to CBotNPCArcherMoveToMark::~CBotNPCArcherMoveToMark()
 T non-virtual thunk to CBotNPCArcherShootBow::~CBotNPCArcherShootBow()
 T non-virtual thunk to CBotNPCArcherSurrender::~CBotNPCArcherSurrender()
 T non-virtual thunk to CBotNPCDecoy::CBotNPCDecoyIntention::~CBotNPCDecoyIntention()
 T non-virtual thunk to CBotNPCDecoy::GetBodyInterface() const
 T non-virtual thunk to CBotNPCDecoy::GetIntentionInterface() const
 T non-virtual thunk to CBotNPCDecoy::GetLocomotionInterface() const
 T non-virtual thunk to CBotNPCDecoy::~CBotNPCDecoy()
 T non-virtual thunk to CBotNPCDecoyBehavior::~CBotNPCDecoyBehavior()
 T non-virtual thunk to CBreakable::GetBasePropData()
 T non-virtual thunk to CBreakable::GetBreakableCount()
 T non-virtual thunk to CBreakable::GetBreakableModel()
 T non-virtual thunk to CBreakable::GetBreakableSkin()
 T non-virtual thunk to CBreakable::GetDmgModBullet()
 T non-virtual thunk to CBreakable::GetDmgModClub()
 T non-virtual thunk to CBreakable::GetDmgModExplosive()
 T non-virtual thunk to CBreakable::GetExplosiveDamage()
 T non-virtual thunk to CBreakable::GetExplosiveRadius()
 T non-virtual thunk to CBreakable::GetMaxBreakableSize()
 T non-virtual thunk to CBreakable::GetMultiplayerBreakMode() const
 T non-virtual thunk to CBreakable::GetPhysicsDamageTable()
 T non-virtual thunk to CBreakable::GetPhysicsMode()
 T non-virtual thunk to CBreakable::HasInteraction(propdata_interactions_t)
 T non-virtual thunk to CBreakable::OnPhysGunDrop(CBasePlayer*, PhysGunDrop_t)
 T non-virtual thunk to CBreakable::OnPhysGunPickup(CBasePlayer*, PhysGunPickup_t)
 T non-virtual thunk to CBreakable::SetBasePropData(string_t)
 T non-virtual thunk to CBreakable::SetBreakableCount(int)
 T non-virtual thunk to CBreakable::SetBreakableModel(string_t)
 T non-virtual thunk to CBreakable::SetBreakableSkin(int)
 T non-virtual thunk to CBreakable::SetDmgModBullet(float)
 T non-virtual thunk to CBreakable::SetDmgModClub(float)
 T non-virtual thunk to CBreakable::SetDmgModExplosive(float)
 T non-virtual thunk to CBreakable::SetExplosiveDamage(float)
 T non-virtual thunk to CBreakable::SetExplosiveRadius(float)
 T non-virtual thunk to CBreakable::SetInteraction(propdata_interactions_t)
 T non-virtual thunk to CBreakable::SetMaxBreakableSize(int)
 T non-virtual thunk to CBreakable::SetMultiplayerBreakMode(mp_break_t)
 T non-virtual thunk to CBreakable::SetPhysicsDamageTable(string_t)
 T non-virtual thunk to CBreakable::SetPhysicsMode(int)
 T non-virtual thunk to CBreakable::SetPropDataBlocksLOS(bool)
 T non-virtual thunk to CBreakable::SetPropDataIsAIWalkable(bool)
 T non-virtual thunk to CBreakableProp::GetBasePropData()
 T non-virtual thunk to CBreakableProp::GetBreakableCount()
 T non-virtual thunk to CBreakableProp::GetBreakableModel()
 T non-virtual thunk to CBreakableProp::GetBreakableSkin()
 T non-virtual thunk to CBreakableProp::GetDmgModBullet()
 T non-virtual thunk to CBreakableProp::GetDmgModClub()
 T non-virtual thunk to CBreakableProp::GetDmgModExplosive()
 T non-virtual thunk to CBreakableProp::GetExplosiveDamage()
 T non-virtual thunk to CBreakableProp::GetExplosiveRadius()
 T non-virtual thunk to CBreakableProp::GetMaxBreakableSize()
 T non-virtual thunk to CBreakableProp::GetMultiplayerBreakMode() const
 T non-virtual thunk to CBreakableProp::GetPhysicsDamageTable()
 T non-virtual thunk to CBreakableProp::GetPhysicsMode()
 T non-virtual thunk to CBreakableProp::HasInteraction(propdata_interactions_t)
 T non-virtual thunk to CBreakableProp::HasPreferredCarryAnglesForPlayer(CBasePlayer*)
 T non-virtual thunk to CBreakableProp::OnAttemptPhysGunPickup(CBasePlayer*, PhysGunPickup_t)
 T non-virtual thunk to CBreakableProp::OnPhysGunDrop(CBasePlayer*, PhysGunDrop_t)
 T non-virtual thunk to CBreakableProp::OnPhysGunPickup(CBasePlayer*, PhysGunPickup_t)
 T non-virtual thunk to CBreakableProp::PhysGunLaunchAngularImpulse()
 T non-virtual thunk to CBreakableProp::PreferredCarryAngles()
 T non-virtual thunk to CBreakableProp::SetBasePropData(string_t)
 T non-virtual thunk to CBreakableProp::SetBreakableCount(int)
 T non-virtual thunk to CBreakableProp::SetBreakableModel(string_t)
 T non-virtual thunk to CBreakableProp::SetBreakableSkin(int)
 T non-virtual thunk to CBreakableProp::SetDmgModBullet(float)
 T non-virtual thunk to CBreakableProp::SetDmgModClub(float)
 T non-virtual thunk to CBreakableProp::SetDmgModExplosive(float)
 T non-virtual thunk to CBreakableProp::SetExplosiveDamage(float)
 T non-virtual thunk to CBreakableProp::SetExplosiveRadius(float)
 T non-virtual thunk to CBreakableProp::SetInteraction(propdata_interactions_t)
 T non-virtual thunk to CBreakableProp::SetMaxBreakableSize(int)
 T non-virtual thunk to CBreakableProp::SetMultiplayerBreakMode(mp_break_t)
 T non-virtual thunk to CBreakableProp::SetPhysicsDamageTable(string_t)
 T non-virtual thunk to CBreakableProp::SetPhysicsMode(int)
 T non-virtual thunk to CBreakableProp::SetPropDataBlocksLOS(bool)
 T non-virtual thunk to CBreakableProp::SetPropDataIsAIWalkable(bool)
 T non-virtual thunk to CCaptureFlag::~CCaptureFlag()
 T non-virtual thunk to CCaptureZone::~CCaptureZone()
 T non-virtual thunk to CCollisionEvent::AdditionalCollisionChecksThisTick(int)
 T non-virtual thunk to CCollisionEvent::ObjectSleep(IPhysicsObject*)
 T non-virtual thunk to CCollisionEvent::ObjectWake(IPhysicsObject*)
 T non-virtual thunk to CCollisionEvent::ShouldCollide(IPhysicsObject*, IPhysicsObject*, void*, void*)
 T non-virtual thunk to CCollisionEvent::ShouldFreezeContacts(IPhysicsObject**, int)
 T non-virtual thunk to CCollisionEvent::ShouldFreezeObject(IPhysicsObject*)
 T non-virtual thunk to CCollisionEvent::ShouldSolvePenetration(IPhysicsObject*, IPhysicsObject*, void*, void*, float)
 T non-virtual thunk to CCurrencyPack::~CCurrencyPack()
 T non-virtual thunk to CCurrencyPackCustom::~CCurrencyPackCustom()
 T non-virtual thunk to CCurrencyPackMedium::~CCurrencyPackMedium()
 T non-virtual thunk to CCurrencyPackSmall::~CCurrencyPackSmall()
 T non-virtual thunk to CDecalEmitterSystem::Init()
 T non-virtual thunk to CDecalEmitterSystem::LevelInitPreEntity()
 T non-virtual thunk to CDecalEmitterSystem::Shutdown()
 T non-virtual thunk to CDecalEmitterSystem::~CDecalEmitterSystem()
 T non-virtual thunk to CDefaultResponseSystem::Init()
 T non-virtual thunk to CDefaultResponseSystem::LevelInitPostEntity()
 T non-virtual thunk to CDefaultResponseSystem::LevelInitPreEntity()
 T non-virtual thunk to CDefaultResponseSystem::Shutdown()
 T non-virtual thunk to CDefaultResponseSystem::~CDefaultResponseSystem()
 T non-virtual thunk to CDirtySpatialPartitionEntityList::OnPostQuery(int)
 T non-virtual thunk to CDirtySpatialPartitionEntityList::OnPreQuery(int)
 T non-virtual thunk to CDirtySpatialPartitionEntityList::OnPreQuery_V1()
 T non-virtual thunk to CDynamicProp::NotifyPositionChanged(CBaseEntity*)
 T non-virtual thunk to CDynamicProp::~CDynamicProp()
 T non-virtual thunk to CEconEntity::GetAttributeContainer()
 T non-virtual thunk to CEconEntity::GetAttributeList()
 T non-virtual thunk to CEconEntity::GetAttributeManager()
 T non-virtual thunk to CEconEntity::GetAttributeOwner()
 T non-virtual thunk to CEconEntity::ReapplyProvision()
 T non-virtual thunk to CEconItem::GetAccountID() const
 T non-virtual thunk to CEconItem::GetCustomDesc() const
 T non-virtual thunk to CEconItem::GetCustomName() const
 T non-virtual thunk to CEconItem::GetFlags() const
 T non-virtual thunk to CEconItem::GetID() const
 T non-virtual thunk to CEconItem::GetInUse() const
 T non-virtual thunk to CEconItem::GetItemDefinition() const
 T non-virtual thunk to CEconItem::GetItemLevel() const
 T non-virtual thunk to CEconItem::GetOrigin() const
 T non-virtual thunk to CEconItem::GetQuality() const
 T non-virtual thunk to CEconItem::GetQuantity() const
 T non-virtual thunk to CEconItem::GetStyle() const
 T non-virtual thunk to CEconItem::IsCommodity() const
 T non-virtual thunk to CEconItem::IsMarketable() const
 T non-virtual thunk to CEconItem::IsTradable() const
 T non-virtual thunk to CEconItem::IsUsableInCrafting() const
 T non-virtual thunk to CEconItem::IterateAttributes(IEconItemAttributeIterator*) const
 T non-virtual thunk to CEconItem::~CEconItem()
 T non-virtual thunk to CEmptyConVar::GetName() const
 T non-virtual thunk to CEmptyConVar::IsFlagSet(int) const
 T non-virtual thunk to CEmptyConVar::SetValue(char const*)
 T non-virtual thunk to CEmptyConVar::SetValue(float)
 T non-virtual thunk to CEmptyConVar::SetValue(int)
 T non-virtual thunk to CEntFireAutoCompletionFunctor::CommandCompletionCallback(char const*, CUtlVector<CUtlString, CUtlMemory<CUtlString, int> >&)
 T non-virtual thunk to CEntitySpawnPoint::OnEntityDeleted(CBaseEntity*)
 T non-virtual thunk to CEventLog::Init()
 T non-virtual thunk to CEventLog::Shutdown()
 T non-virtual thunk to CEventLog::~CEventLog()
 T non-virtual thunk to CExtraMapEntity_Carrier::~CExtraMapEntity_Carrier()
 T non-virtual thunk to CExtraMapEntity_Rocket::~CExtraMapEntity_Rocket()
 T non-virtual thunk to CExtraMapEntity_Saucer::~CExtraMapEntity_Saucer()
 T non-virtual thunk to CExtraMapEntity_Sign::~CExtraMapEntity_Sign()
 T non-virtual thunk to CEyeballBoss::CEyeballBossIntention::~CEyeballBossIntention()
 T non-virtual thunk to CEyeballBoss::GetBodyInterface() const
 T non-virtual thunk to CEyeballBoss::GetIntentionInterface() const
 T non-virtual thunk to CEyeballBoss::GetLocomotionInterface() const
 T non-virtual thunk to CEyeballBoss::GetVisionInterface() const
 T non-virtual thunk to CEyeballBoss::Update()
 T non-virtual thunk to CEyeballBoss::~CEyeballBoss()
 T non-virtual thunk to CEyeballBossApproachTarget::~CEyeballBossApproachTarget()
 T non-virtual thunk to CEyeballBossBehavior::~CEyeballBossBehavior()
 T non-virtual thunk to CEyeballBossDead::~CEyeballBossDead()
 T non-virtual thunk to CEyeballBossEmerge::~CEyeballBossEmerge()
 T non-virtual thunk to CEyeballBossEmote::~CEyeballBossEmote()
 T non-virtual thunk to CEyeballBossEscape::~CEyeballBossEscape()
 T non-virtual thunk to CEyeballBossIdle::~CEyeballBossIdle()
 T non-virtual thunk to CEyeballBossLaunchRockets::~CEyeballBossLaunchRockets()
 T non-virtual thunk to CEyeballBossNotice::~CEyeballBossNotice()
 T non-virtual thunk to CEyeballBossStunned::~CEyeballBossStunned()
 T non-virtual thunk to CEyeballBossTeleport::~CEyeballBossTeleport()
 T non-virtual thunk to CFishPool::FireGameEvent(IGameEvent*)
 T non-virtual thunk to CFishPool::~CFishPool()
 T non-virtual thunk to CFlagDetectionZone::~CFlagDetectionZone()
 T non-virtual thunk to CFuncForceField::~CFuncForceField()
 T non-virtual thunk to CFuncNavObstruction::CanObstructNavAreas() const
 T non-virtual thunk to CFuncNavObstruction::GetNavObstructionHeight() const
 T non-virtual thunk to CFuncNavObstruction::GetObstructingEntity()
 T non-virtual thunk to CFuncNavObstruction::IsPotentiallyAbleToObstructNavAreas() const
 T non-virtual thunk to CFuncNavObstruction::OnNavMeshLoaded()
 T non-virtual thunk to CFuncNavPrerequisite::~CFuncNavPrerequisite()
 T non-virtual thunk to CFuncNoBuild::~CFuncNoBuild()
 T non-virtual thunk to CFuncPasstimeGoal::~CFuncPasstimeGoal()
 T non-virtual thunk to CFuncPasstimeGoalieZone::~CFuncPasstimeGoalieZone()
 T non-virtual thunk to CFuncPasstimeNoBallZone::~CFuncPasstimeNoBallZone()
 T non-virtual thunk to CFuncRespawnRoom::~CFuncRespawnRoom()
 T non-virtual thunk to CFuncRespawnRoomVisualizer::~CFuncRespawnRoomVisualizer()
 T non-virtual thunk to CFunctor2<void (*)(CFunctor**, unsigned int), CFunctor**, int, CRefCounted1<CFunctor, CRefCountServiceBase<true, CRefMT> > >::~CFunctor2()
 T non-virtual thunk to CFunctor3<void (*)(IPhysicsObject*, Vector const&, Vector const&), IPhysicsObject*, Vector, Vector, CRefCounted1<CFunctor, CRefCountServiceBase<true, CRefMT> > >::~CFunctor3()
 T non-virtual thunk to CFunctor4<CBaseEntity* (*)(CBaseEntity*, CBaseEntity*, bool, float), CBaseEntity*, CBaseEntity*, bool, float, CRefCounted1<CFunctor, CRefCountServiceBase<true, CRefMT> > >::~CFunctor4()
 T non-virtual thunk to CGhost::CGhostIntention::~CGhostIntention()
 T non-virtual thunk to CGhost::GetIntentionInterface() const
 T non-virtual thunk to CGhost::GetLocomotionInterface() const
 T non-virtual thunk to CGhost::~CGhost()
 T non-virtual thunk to CGhostBehavior::~CGhostBehavior()
 T non-virtual thunk to CGib::OnPhysGunDrop(CBasePlayer*, PhysGunDrop_t)
 T non-virtual thunk to CGib::OnPhysGunPickup(CBasePlayer*, PhysGunPickup_t)
 T non-virtual thunk to CHLTVDirector::FrameUpdatePostEntityThink()
 T non-virtual thunk to CHLTVDirector::GetDelay()
 T non-virtual thunk to CHLTVDirector::GetDirectorTick()
 T non-virtual thunk to CHLTVDirector::GetHLTVServer()
 T non-virtual thunk to CHLTVDirector::GetModEvents()
 T non-virtual thunk to CHLTVDirector::GetPVSEntity()
 T non-virtual thunk to CHLTVDirector::GetPVSOrigin()
 T non-virtual thunk to CHLTVDirector::Init()
 T non-virtual thunk to CHLTVDirector::IsActive()
 T non-virtual thunk to CHLTVDirector::LevelInitPostEntity()
 T non-virtual thunk to CHLTVDirector::Name()
 T non-virtual thunk to CHLTVDirector::SetHLTVServer(IHLTVServer*)
 T non-virtual thunk to CHLTVDirector::Shutdown()
 T non-virtual thunk to CHLTVDirector::~CHLTVDirector()
 T non-virtual thunk to CHalloweenBaseBoss::Update()
 T non-virtual thunk to CHalloweenBaseBoss::~CHalloweenBaseBoss()
 T non-virtual thunk to CHalloweenGiftSpawnLocation::~CHalloweenGiftSpawnLocation()
 T non-virtual thunk to CHeadlessHatman::GetBodyInterface() const
 T non-virtual thunk to CHeadlessHatman::GetIntentionInterface() const
 T non-virtual thunk to CHeadlessHatman::GetLocomotionInterface() const
 T non-virtual thunk to CHeadlessHatman::Update()
 T non-virtual thunk to CHeadlessHatman::~CHeadlessHatman()
 T non-virtual thunk to CHeadlessHatmanAttack::~CHeadlessHatmanAttack()
 T non-virtual thunk to CHeadlessHatmanBehavior::~CHeadlessHatmanBehavior()
 T non-virtual thunk to CHeadlessHatmanDying::~CHeadlessHatmanDying()
 T non-virtual thunk to CHeadlessHatmanEmerge::~CHeadlessHatmanEmerge()
 T non-virtual thunk to CHeadlessHatmanIntention::IsPositionAllowed(INextBot const*, Vector const&) const
 T non-virtual thunk to CHeadlessHatmanIntention::~CHeadlessHatmanIntention()
 T non-virtual thunk to CHeadlessHatmanTerrify::~CHeadlessHatmanTerrify()
 T non-virtual thunk to CHealthAmmoKit::~CHealthAmmoKit()
 T non-virtual thunk to CHealthKit::~CHealthKit()
 T non-virtual thunk to CHealthKitMedium::~CHealthKitMedium()
 T non-virtual thunk to CHealthKitSmall::~CHealthKitSmall()
 T non-virtual thunk to CItem::OnPhysGunDrop(CBasePlayer*, PhysGunDrop_t)
 T non-virtual thunk to CItem::OnPhysGunPickup(CBasePlayer*, PhysGunPickup_t)
 T non-virtual thunk to CKeepUpright::Simulate(IPhysicsMotionController*, IPhysicsObject*, float, Vector&, Vector&)
 T non-virtual thunk to CLagCompensationManager::FinishLagCompensation(CBasePlayer*)
 T non-virtual thunk to CLagCompensationManager::IsCurrentlyDoingLagCompensation() const
 T non-virtual thunk to CLagCompensationManager::StartLagCompensation(CBasePlayer*, CUserCmd*)
 T non-virtual thunk to CLogicNavigation::OnEntitySpawned(CBaseEntity*)
 T non-virtual thunk to CMapInfoContainer::FireGameEvent(IGameEvent*)
 T non-virtual thunk to CMapInfoContainer::~CMapInfoContainer()
 T non-virtual thunk to CMemberFunctor0<CParallelProcessor<CNavArea*, CFuncJobItemProcessor<CNavArea*> >*, void (CParallelProcessor<CNavArea*, CFuncJobItemProcessor<CNavArea*> >::*)(), CRefCounted1<CFunctor, CRefCountServiceBase<true, CRefMT> >, CFuncMemPolicyNone>::~CMemberFunctor0()
 T non-virtual thunk to CMemberFunctor0<CParallelProcessor<QueryCacheUpdateRecord_t, CFuncJobItemProcessor<QueryCacheUpdateRecord_t> >*, void (CParallelProcessor<QueryCacheUpdateRecord_t, CFuncJobItemProcessor<QueryCacheUpdateRecord_t> >::*)(), CRefCounted1<CFunctor, CRefCountServiceBase<true, CRefMT> >, CFuncMemPolicyNone>::~CMemberFunctor0()
 T non-virtual thunk to CMemberFunctor1<CAI_Navigator*, bool (CAI_Navigator::*)(Vector const&), Vector, CRefCounted1<CFunctor, CRefCountServiceBase<true, CRefMT> >, CFuncMemPolicyNone>::~CMemberFunctor1()
 T non-virtual thunk to CMemberFunctor1<IPhysicsObject*, void (IPhysicsObject::*)(bool), bool, CRefCounted1<CFunctor, CRefCountServiceBase<true, CRefMT> >, CFuncMemPolicyNone>::~CMemberFunctor1()
 T non-virtual thunk to CMemberFunctor2<CAI_Navigator*, bool (CAI_Navigator::*)(AI_NavGoal_t const&, unsigned int), AI_NavGoal_t, unsigned int, CRefCounted1<CFunctor, CRefCountServiceBase<true, CRefMT> >, CFuncMemPolicyNone>::~CMemberFunctor2()
 T non-virtual thunk to CMemberFunctor3<CBreakableProp*, void (CBreakableProp::*)(Vector const&, Vector const&, QAngle const&), Vector, Vector, QAngle, CRefCounted1<CFunctor, CRefCountServiceBase<true, CRefMT> >, CFuncMemPolicyNone>::~CMemberFunctor3()
 T non-virtual thunk to CMerasmus::FireGameEvent(IGameEvent*)
 T non-virtual thunk to CMerasmus::GetBodyInterface() const
 T non-virtual thunk to CMerasmus::GetIntentionInterface() const
 T non-virtual thunk to CMerasmus::GetLocomotionInterface() const
 T non-virtual thunk to CMerasmus::Update()
 T non-virtual thunk to CMerasmus::~CMerasmus()
 T non-virtual thunk to CMerasmusAOEAttack::~CMerasmusAOEAttack()
 T non-virtual thunk to CMerasmusAttack::~CMerasmusAttack()
 T non-virtual thunk to CMerasmusBehavior::~CMerasmusBehavior()
 T non-virtual thunk to CMerasmusDisguise::~CMerasmusDisguise()
 T non-virtual thunk to CMerasmusDying::~CMerasmusDying()
 T non-virtual thunk to CMerasmusEscape::~CMerasmusEscape()
 T non-virtual thunk to CMerasmusIntention::IsPositionAllowed(INextBot const*, Vector const&) const
 T non-virtual thunk to CMerasmusIntention::~CMerasmusIntention()
 T non-virtual thunk to CMerasmusReveal::~CMerasmusReveal()
 T non-virtual thunk to CMerasmusStaffAttack::~CMerasmusStaffAttack()
 T non-virtual thunk to CMerasmusStunned::~CMerasmusStunned()
 T non-virtual thunk to CMerasmusTeleport::~CMerasmusTeleport()
 T non-virtual thunk to CMerasmusThrowingGrenade::~CMerasmusThrowingGrenade()
 T non-virtual thunk to CMerasmusZap::~CMerasmusZap()
 T non-virtual thunk to CNotifyList::OnEntityCreated(CBaseEntity*)
 T non-virtual thunk to CNotifyList::OnEntityDeleted(CBaseEntity*)
 T non-virtual thunk to CObjectCartDispenser::~CObjectCartDispenser()
 T non-virtual thunk to CObjectDispenser::~CObjectDispenser()
 T non-virtual thunk to CObjectSapper::~CObjectSapper()
 T non-virtual thunk to CObjectSentrygun::~CObjectSentrygun()
 T non-virtual thunk to CObjectTeleporter::~CObjectTeleporter()
 T non-virtual thunk to COrnamentProp::~COrnamentProp()
 T non-virtual thunk to CPasstimeBallSpawn::~CPasstimeBallSpawn()
 T non-virtual thunk to CPasstimeGun::CanCharge()
 T non-virtual thunk to CPasstimeGun::GetChargeBeginTime()
 T non-virtual thunk to CPasstimeGun::GetChargeMaxTime()
 T non-virtual thunk to CPasstimeGun::GetCurrentCharge()
 T non-virtual thunk to CPhysBox::HasPreferredCarryAnglesForPlayer(CBasePlayer*)
 T non-virtual thunk to CPhysBox::OnPhysGunDrop(CBasePlayer*, PhysGunDrop_t)
 T non-virtual thunk to CPhysBox::OnPhysGunPickup(CBasePlayer*, PhysGunPickup_t)
 T non-virtual thunk to CPhysBox::PreferredCarryAngles()
 T non-virtual thunk to CPhysBoxMultiplayer::GetMass()
 T non-virtual thunk to CPhysBoxMultiplayer::GetMultiplayerPhysicsMode()
 T non-virtual thunk to CPhysBoxMultiplayer::IsAsleep()
 T non-virtual thunk to CPhysHinge::NotifyVPhysicsStateChanged(IPhysicsObject*, CBaseEntity*, bool)
 T non-virtual thunk to CPhysHinge::~CPhysHinge()
 T non-virtual thunk to CPhysMagnet::ConstraintBroken(IPhysicsConstraint*)
 T non-virtual thunk to CPhysSaveRestoreBlockHandler::AssociateModel(IPhysicsObject*, CPhysCollide const*)
 T non-virtual thunk to CPhysSaveRestoreBlockHandler::AssociateModel(IPhysicsObject*, int)
 T non-virtual thunk to CPhysSaveRestoreBlockHandler::ForgetAllModels()
 T non-virtual thunk to CPhysSaveRestoreBlockHandler::ForgetModel(IPhysicsObject*)
 T non-virtual thunk to CPhysSaveRestoreBlockHandler::NoteBBox(Vector const&, Vector const&, CPhysCollide*)
 T non-virtual thunk to CPhysSaveRestoreBlockHandler::OnEntityCreated(CBaseEntity*)
 T non-virtual thunk to CPhysSaveRestoreBlockHandler::OnEntityDeleted(CBaseEntity*)
 T non-virtual thunk to CPhysSlideConstraint::NotifyVPhysicsStateChanged(IPhysicsObject*, CBaseEntity*, bool)
 T non-virtual thunk to CPhysSlideConstraint::~CPhysSlideConstraint()
 T non-virtual thunk to CPhysSphere::~CPhysSphere()
 T non-virtual thunk to CPhysicsCannister::HasPreferredCarryAnglesForPlayer(CBasePlayer*)
 T non-virtual thunk to CPhysicsCannister::OnAttemptPhysGunPickup(CBasePlayer*, PhysGunPickup_t)
 T non-virtual thunk to CPhysicsCannister::OnPhysGunDrop(CBasePlayer*, PhysGunDrop_t)
 T non-virtual thunk to CPhysicsCannister::OnPhysGunPickup(CBasePlayer*, PhysGunPickup_t)
 T non-virtual thunk to CPhysicsCannister::PhysGunLaunchAngularImpulse()
 T non-virtual thunk to CPhysicsCannister::PhysGunLaunchVelocity(Vector const&, float)
 T non-virtual thunk to CPhysicsCannister::PreferredCarryAngles()
 T non-virtual thunk to CPhysicsCannister::ShouldPuntUseLaunchForces(PhysGunForce_t)
 T non-virtual thunk to CPhysicsNPCSolver::Simulate(IPhysicsMotionController*, IPhysicsObject*, float, Vector&, Vector&)
 T non-virtual thunk to CPhysicsProp::OnPhysGunDrop(CBasePlayer*, PhysGunDrop_t)
 T non-virtual thunk to CPhysicsProp::OnPhysGunPickup(CBasePlayer*, PhysGunPickup_t)
 T non-virtual thunk to CPhysicsProp::~CPhysicsProp()
 T non-virtual thunk to CPhysicsPropMultiplayer::GetMass()
 T non-virtual thunk to CPhysicsPropMultiplayer::GetMultiplayerPhysicsMode()
 T non-virtual thunk to CPhysicsPropMultiplayer::GetPhysicsMode()
 T non-virtual thunk to CPhysicsPropMultiplayer::IsAsleep()
 T non-virtual thunk to CPhysicsPropMultiplayer::SetPhysicsMode(int)
 T non-virtual thunk to CPhysicsPropMultiplayer::~CPhysicsPropMultiplayer()
 T non-virtual thunk to CPhysicsPropRespawnable::~CPhysicsPropRespawnable()
 T non-virtual thunk to CPlayerDestructionDispenser::~CPlayerDestructionDispenser()
 T non-virtual thunk to CPlayerInfo::ChangeTeam(int)
 T non-virtual thunk to CPlayerInfo::GetAbsAngles()
 T non-virtual thunk to CPlayerInfo::GetAbsOrigin()
 T non-virtual thunk to CPlayerInfo::GetArmorValue()
 T non-virtual thunk to CPlayerInfo::GetDeathCount()
 T non-virtual thunk to CPlayerInfo::GetFragCount()
 T non-virtual thunk to CPlayerInfo::GetHealth()
 T non-virtual thunk to CPlayerInfo::GetLastUserCommand()
 T non-virtual thunk to CPlayerInfo::GetMaxHealth()
 T non-virtual thunk to CPlayerInfo::GetModelName()
 T non-virtual thunk to CPlayerInfo::GetName()
 T non-virtual thunk to CPlayerInfo::GetNetworkIDString()
 T non-virtual thunk to CPlayerInfo::GetPlayerMaxs()
 T non-virtual thunk to CPlayerInfo::GetPlayerMins()
 T non-virtual thunk to CPlayerInfo::GetTeamIndex()
 T non-virtual thunk to CPlayerInfo::GetUserID()
 T non-virtual thunk to CPlayerInfo::GetWeaponName()
 T non-virtual thunk to CPlayerInfo::IsConnected()
 T non-virtual thunk to CPlayerInfo::IsDead()
 T non-virtual thunk to CPlayerInfo::IsFakeClient()
 T non-virtual thunk to CPlayerInfo::IsHLTV()
 T non-virtual thunk to CPlayerInfo::IsInAVehicle()
 T non-virtual thunk to CPlayerInfo::IsObserver()
 T non-virtual thunk to CPlayerInfo::IsPlayer()
 T non-virtual thunk to CPlayerInfo::IsReplay()
 T non-virtual thunk to CPopulationManager::FireGameEvent(IGameEvent*)
 T non-virtual thunk to CPopulationManager::~CPopulationManager()
 T non-virtual thunk to CPowerupVolume::~CPowerupVolume()
 T non-virtual thunk to CPropDoorRotating::~CPropDoorRotating()
 T non-virtual thunk to CPropSoccerBall::~CPropSoccerBall()
 T non-virtual thunk to CPropVehicle::OnPhysGunPickup(CBasePlayer*, PhysGunPickup_t)
 T non-virtual thunk to CPropVehicleDriveable::AllowBlockedExit(CBaseCombatCharacter*, int)
 T non-virtual thunk to CPropVehicleDriveable::AllowMidairExit(CBaseCombatCharacter*, int)
 T non-virtual thunk to CPropVehicleDriveable::CanEnterVehicle(CBaseEntity*)
 T non-virtual thunk to CPropVehicleDriveable::CanExitVehicle(CBaseEntity*)
 T non-virtual thunk to CPropVehicleDriveable::EnterVehicle(CBaseCombatCharacter*)
 T non-virtual thunk to CPropVehicleDriveable::ExitVehicle(int)
 T non-virtual thunk to CPropVehicleDriveable::FinishMove(CBasePlayer*, CUserCmd*, CMoveData*)
 T non-virtual thunk to CPropVehicleDriveable::GetDriver()
 T non-virtual thunk to CPropVehicleDriveable::GetVehicleScriptName()
 T non-virtual thunk to CPropVehicleDriveable::ItemPostFrame(CBasePlayer*)
 T non-virtual thunk to CPropVehicleDriveable::NPC_AddPassenger(CAI_BaseNPC*, string_t, int)
 T non-virtual thunk to CPropVehicleDriveable::NPC_CanEnterVehicle(CAI_BaseNPC*, bool)
 T non-virtual thunk to CPropVehicleDriveable::NPC_CanExitVehicle(CAI_BaseNPC*, bool)
 T non-virtual thunk to CPropVehicleDriveable::NPC_FinishedEnterVehicle(CAI_BaseNPC*, bool)
 T non-virtual thunk to CPropVehicleDriveable::NPC_FinishedExitVehicle(CAI_BaseNPC*, bool)
 T non-virtual thunk to CPropVehicleDriveable::NPC_RemovePassenger(CAI_BaseNPC*)
 T non-virtual thunk to CPropVehicleDriveable::PassengerShouldReceiveDamage(CTakeDamageInfo&)
 T non-virtual thunk to CPropVehicleDriveable::PreExitVehicle(CBaseCombatCharacter*, int)
 T non-virtual thunk to CPropVehicleDriveable::ProcessMovement(CBasePlayer*, CMoveData*)
 T non-virtual thunk to CPropVehicleDriveable::SetVehicleEntryAnim(bool)
 T non-virtual thunk to CPropVehicleDriveable::SetVehicleExitAnim(bool, Vector)
 T non-virtual thunk to CPropVehicleDriveable::SetupMove(CBasePlayer*, CUserCmd*, IMoveHelper*, CMoveData*)
 T non-virtual thunk to CQuestObjectiveManager::~CQuestObjectiveManager()
 T non-virtual thunk to CRagdollProp::OnPhysGunDrop(CBasePlayer*, PhysGunDrop_t)
 T non-virtual thunk to CRagdollProp::OnPhysGunPickup(CBasePlayer*, PhysGunPickup_t)
 T non-virtual thunk to CRagdollProp::PhysGunLaunchAngularImpulse()
 T non-virtual thunk to CRobotBehavior::~CRobotBehavior()
 T non-virtual thunk to CRobotDispenser::~CRobotDispenser()
 T non-virtual thunk to CRobotEnterPanic::~CRobotEnterPanic()
 T non-virtual thunk to CRobotIntention::IsPositionAllowed(INextBot const*, Vector const&) const
 T non-virtual thunk to CRobotIntention::~CRobotIntention()
 T non-virtual thunk to CRobotLeavePanic::~CRobotLeavePanic()
 T non-virtual thunk to CRobotMaterialize::~CRobotMaterialize()
 T non-virtual thunk to CRobotPanic::~CRobotPanic()
 T non-virtual thunk to CRobotPatrol::~CRobotPatrol()
 T non-virtual thunk to CRobotSpawn::~CRobotSpawn()
 T non-virtual thunk to CRopeKeyframe::NotifyPositionChanged(CBaseEntity*)
 T non-virtual thunk to CRopeKeyframe::~CRopeKeyframe()
 T non-virtual thunk to CRotorWashShooter::DoWashPush(float, Vector const&)
 T non-virtual thunk to CSOTrackerManager::FireGameEvent(IGameEvent*)
 T non-virtual thunk to CSOTrackerManager::FrameUpdatePreEntityThink()
 T non-virtual thunk to CSOTrackerManager::Shutdown()
 T non-virtual thunk to CSOTrackerManager::~CSOTrackerManager()
 T non-virtual thunk to CSceneEntity::CheckEvent(float, CChoreoScene*, CChoreoEvent*)
 T non-virtual thunk to CSceneEntity::EndEvent(float, CChoreoScene*, CChoreoEvent*)
 T non-virtual thunk to CSceneEntity::ProcessEvent(float, CChoreoScene*, CChoreoEvent*)
 T non-virtual thunk to CSceneEntity::StartEvent(float, CChoreoScene*, CChoreoEvent*)
 T non-virtual thunk to CServerNetworkProperty::FireEvent()
 T non-virtual thunk to CSimpleBot::CSimpleBotIntention::~CSimpleBotIntention()
 T non-virtual thunk to CSimpleBot::GetIntentionInterface() const
 T non-virtual thunk to CSimpleBot::GetLocomotionInterface() const
 T non-virtual thunk to CSimpleBot::~CSimpleBot()
 T non-virtual thunk to CSimpleBotRoam::~CSimpleBotRoam()
 T non-virtual thunk to CSoundControllerImp::LevelShutdownPreEntity()
 T non-virtual thunk to CSoundControllerImp::OnRestore()
 T non-virtual thunk to CSoundControllerImp::PreClientUpdate()
 T non-virtual thunk to CSoundControllerImp::~CSoundControllerImp()
 T non-virtual thunk to CSteamWorksGameStatsUploader::FireGameEvent(IGameEvent*)
 T non-virtual thunk to CSteamWorksGameStatsUploader::~CSteamWorksGameStatsUploader()
 T non-virtual thunk to CTFBall_Ornament::~CTFBall_Ornament()
 T non-virtual thunk to CTFBaseBoss::GetLocomotionInterface() const
 T non-virtual thunk to CTFBaseBoss::IsRemovedOnReset() const
 T non-virtual thunk to CTFBaseBoss::~CTFBaseBoss()
 T non-virtual thunk to CTFBaseProjectile::GetAssistant()
 T non-virtual thunk to CTFBaseProjectile::GetScorer()
 T non-virtual thunk to CTFBaseProjectile::~CTFBaseProjectile()
 T non-virtual thunk to CTFBaseRocket::~CTFBaseRocket()
 T non-virtual thunk to CTFBot::CTFBotIntention::~CTFBotIntention()
 T non-virtual thunk to CTFBot::FireGameEvent(IGameEvent*)
 T non-virtual thunk to CTFBot::GetBodyInterface() const
 T non-virtual thunk to CTFBot::GetIntentionInterface() const
 T non-virtual thunk to CTFBot::GetLocomotionInterface() const
 T non-virtual thunk to CTFBot::GetVisionInterface() const
 T non-virtual thunk to CTFBot::IsDebugFilterMatch(char const*) const
 T non-virtual thunk to CTFBot::OnWeaponFired(CBaseCombatCharacter*, CBaseCombatWeapon*)
 T non-virtual thunk to CTFBot::PressAltFireButton(float)
 T non-virtual thunk to CTFBot::PressFireButton(float)
 T non-virtual thunk to CTFBot::PressSpecialFireButton(float)
 T non-virtual thunk to CTFBot::~CTFBot()
 T non-virtual thunk to CTFBotAttack::ShouldHurry(INextBot const*) const
 T non-virtual thunk to CTFBotAttack::ShouldRetreat(INextBot const*) const
 T non-virtual thunk to CTFBotAttack::~CTFBotAttack()
 T non-virtual thunk to CTFBotAttackFlagDefenders::~CTFBotAttackFlagDefenders()
 T non-virtual thunk to CTFBotCapturePoint::ShouldHurry(INextBot const*) const
 T non-virtual thunk to CTFBotCapturePoint::ShouldRetreat(INextBot const*) const
 T non-virtual thunk to CTFBotCapturePoint::~CTFBotCapturePoint()
 T non-virtual thunk to CTFBotDead::~CTFBotDead()
 T non-virtual thunk to CTFBotDefendPoint::~CTFBotDefendPoint()
 T non-virtual thunk to CTFBotDefendPointBlockCapture::ShouldHurry(INextBot const*) const
 T non-virtual thunk to CTFBotDefendPointBlockCapture::ShouldRetreat(INextBot const*) const
 T non-virtual thunk to CTFBotDefendPointBlockCapture::~CTFBotDefendPointBlockCapture()
 T non-virtual thunk to CTFBotDeliverFlag::ShouldAttack(INextBot const*, CKnownEntity const*) const
 T non-virtual thunk to CTFBotDeliverFlag::ShouldHurry(INextBot const*) const
 T non-virtual thunk to CTFBotDeliverFlag::ShouldRetreat(INextBot const*) const
 T non-virtual thunk to CTFBotDeliverFlag::~CTFBotDeliverFlag()
 T non-virtual thunk to CTFBotDestroyEnemySentry::ShouldAttack(INextBot const*, CKnownEntity const*) const
 T non-virtual thunk to CTFBotDestroyEnemySentry::ShouldHurry(INextBot const*) const
 T non-virtual thunk to CTFBotDestroyEnemySentry::ShouldRetreat(INextBot const*) const
 T non-virtual thunk to CTFBotDestroyEnemySentry::~CTFBotDestroyEnemySentry()
 T non-virtual thunk to CTFBotEngineerBuild::ShouldAttack(INextBot const*, CKnownEntity const*) const
 T non-virtual thunk to CTFBotEngineerBuild::ShouldHurry(INextBot const*) const
 T non-virtual thunk to CTFBotEngineerBuild::~CTFBotEngineerBuild()
 T non-virtual thunk to CTFBotEngineerBuildDispenser::~CTFBotEngineerBuildDispenser()
 T non-virtual thunk to CTFBotEngineerBuildSentryGun::~CTFBotEngineerBuildSentryGun()
 T non-virtual thunk to CTFBotEngineerBuildTeleportEntrance::~CTFBotEngineerBuildTeleportEntrance()
 T non-virtual thunk to CTFBotEngineerBuildTeleportExit::~CTFBotEngineerBuildTeleportExit()
 T non-virtual thunk to CTFBotEngineerBuilding::~CTFBotEngineerBuilding()
 T non-virtual thunk to CTFBotEngineerMoveToBuild::~CTFBotEngineerMoveToBuild()
 T non-virtual thunk to CTFBotEscortFlagCarrier::~CTFBotEscortFlagCarrier()
 T non-virtual thunk to CTFBotEscortSquadLeader::~CTFBotEscortSquadLeader()
 T non-virtual thunk to CTFBotFetchFlag::ShouldHurry(INextBot const*) const
 T non-virtual thunk to CTFBotFetchFlag::ShouldRetreat(INextBot const*) const
 T non-virtual thunk to CTFBotFetchFlag::~CTFBotFetchFlag()
 T non-virtual thunk to CTFBotGetAmmo::ShouldHurry(INextBot const*) const
 T non-virtual thunk to CTFBotGetAmmo::~CTFBotGetAmmo()
 T non-virtual thunk to CTFBotGetHealth::ShouldHurry(INextBot const*) const
 T non-virtual thunk to CTFBotGetHealth::~CTFBotGetHealth()
 T non-virtual thunk to CTFBotHintEngineerNest::~CTFBotHintEngineerNest()
 T non-virtual thunk to CTFBotHintSentrygun::~CTFBotHintSentrygun()
 T non-virtual thunk to CTFBotHintTeleporterExit::~CTFBotHintTeleporterExit()
 T non-virtual thunk to CTFBotMainAction::IsPositionAllowed(INextBot const*, Vector const&) const
 T non-virtual thunk to CTFBotMainAction::SelectMoreDangerousThreat(INextBot const*, CBaseCombatCharacter const*, CKnownEntity const*, CKnownEntity const*) const
 T non-virtual thunk to CTFBotMainAction::SelectTargetPoint(INextBot const*, CBaseCombatCharacter const*) const
 T non-virtual thunk to CTFBotMainAction::ShouldAttack(INextBot const*, CKnownEntity const*) const
 T non-virtual thunk to CTFBotMainAction::ShouldHurry(INextBot const*) const
 T non-virtual thunk to CTFBotMainAction::ShouldRetreat(INextBot const*) const
 T non-virtual thunk to CTFBotMainAction::~CTFBotMainAction()
 T non-virtual thunk to CTFBotMedicHeal::ShouldAttack(INextBot const*, CKnownEntity const*) const
 T non-virtual thunk to CTFBotMedicHeal::ShouldHurry(INextBot const*) const
 T non-virtual thunk to CTFBotMedicHeal::ShouldRetreat(INextBot const*) const
 T non-virtual thunk to CTFBotMedicHeal::~CTFBotMedicHeal()
 T non-virtual thunk to CTFBotMedicRetreat::ShouldAttack(INextBot const*, CKnownEntity const*) const
 T non-virtual thunk to CTFBotMedicRetreat::~CTFBotMedicRetreat()
 T non-virtual thunk to CTFBotMeleeAttack::~CTFBotMeleeAttack()
 T non-virtual thunk to CTFBotMissionSuicideBomber::ShouldAttack(INextBot const*, CKnownEntity const*) const
 T non-virtual thunk to CTFBotMissionSuicideBomber::~CTFBotMissionSuicideBomber()
 T non-virtual thunk to CTFBotMvMDeployBomb::ShouldAttack(INextBot const*, CKnownEntity const*) const
 T non-virtual thunk to CTFBotMvMDeployBomb::~CTFBotMvMDeployBomb()
 T non-virtual thunk to CTFBotMvMEngineerBuildSentryGun::~CTFBotMvMEngineerBuildSentryGun()
 T non-virtual thunk to CTFBotMvMEngineerBuildTeleportExit::~CTFBotMvMEngineerBuildTeleportExit()
 T non-virtual thunk to CTFBotMvMEngineerIdle::ShouldAttack(INextBot const*, CKnownEntity const*) const
 T non-virtual thunk to CTFBotMvMEngineerIdle::ShouldHurry(INextBot const*) const
 T non-virtual thunk to CTFBotMvMEngineerIdle::ShouldRetreat(INextBot const*) const
 T non-virtual thunk to CTFBotMvMEngineerIdle::~CTFBotMvMEngineerIdle()
 T non-virtual thunk to CTFBotMvMEngineerTeleportSpawn::~CTFBotMvMEngineerTeleportSpawn()
 T non-virtual thunk to CTFBotNavEntMoveTo::~CTFBotNavEntMoveTo()
 T non-virtual thunk to CTFBotNavEntWait::~CTFBotNavEntWait()
 T non-virtual thunk to CTFBotPayloadBlock::ShouldHurry(INextBot const*) const
 T non-virtual thunk to CTFBotPayloadBlock::ShouldRetreat(INextBot const*) const
 T non-virtual thunk to CTFBotPayloadBlock::~CTFBotPayloadBlock()
 T non-virtual thunk to CTFBotPayloadGuard::ShouldHurry(INextBot const*) const
 T non-virtual thunk to CTFBotPayloadGuard::ShouldRetreat(INextBot const*) const
 T non-virtual thunk to CTFBotPayloadGuard::~CTFBotPayloadGuard()
 T non-virtual thunk to CTFBotPayloadPush::ShouldHurry(INextBot const*) const
 T non-virtual thunk to CTFBotPayloadPush::ShouldRetreat(INextBot const*) const
 T non-virtual thunk to CTFBotPayloadPush::~CTFBotPayloadPush()
 T non-virtual thunk to CTFBotPrepareStickybombTrap::ShouldAttack(INextBot const*, CKnownEntity const*) const
 T non-virtual thunk to CTFBotPrepareStickybombTrap::~CTFBotPrepareStickybombTrap()
 T non-virtual thunk to CTFBotPushToCapturePoint::~CTFBotPushToCapturePoint()
 T non-virtual thunk to CTFBotRetreatToCover::ShouldHurry(INextBot const*) const
 T non-virtual thunk to CTFBotRetreatToCover::~CTFBotRetreatToCover()
 T non-virtual thunk to CTFBotScenarioMonitor::~CTFBotScenarioMonitor()
 T non-virtual thunk to CTFBotSeekAndDestroy::ShouldHurry(INextBot const*) const
 T non-virtual thunk to CTFBotSeekAndDestroy::ShouldRetreat(INextBot const*) const
 T non-virtual thunk to CTFBotSeekAndDestroy::~CTFBotSeekAndDestroy()
 T non-virtual thunk to CTFBotSniperLurk::SelectMoreDangerousThreat(INextBot const*, CBaseCombatCharacter const*, CKnownEntity const*, CKnownEntity const*) const
 T non-virtual thunk to CTFBotSniperLurk::ShouldAttack(INextBot const*, CKnownEntity const*) const
 T non-virtual thunk to CTFBotSniperLurk::ShouldRetreat(INextBot const*) const
 T non-virtual thunk to CTFBotSniperLurk::~CTFBotSniperLurk()
 T non-virtual thunk to CTFBotSpyAttack::IsHindrance(INextBot const*, CBaseEntity*) const
 T non-virtual thunk to CTFBotSpyAttack::SelectMoreDangerousThreat(INextBot const*, CBaseCombatCharacter const*, CKnownEntity const*, CKnownEntity const*) const
 T non-virtual thunk to CTFBotSpyAttack::ShouldAttack(INextBot const*, CKnownEntity const*) const
 T non-virtual thunk to CTFBotSpyAttack::ShouldHurry(INextBot const*) const
 T non-virtual thunk to CTFBotSpyAttack::ShouldRetreat(INextBot const*) const
 T non-virtual thunk to CTFBotSpyAttack::~CTFBotSpyAttack()
 T non-virtual thunk to CTFBotSpyHide::ShouldAttack(INextBot const*, CKnownEntity const*) const
 T non-virtual thunk to CTFBotSpyHide::~CTFBotSpyHide()
 T non-virtual thunk to CTFBotSpyInfiltrate::ShouldAttack(INextBot const*, CKnownEntity const*) const
 T non-virtual thunk to CTFBotSpyInfiltrate::~CTFBotSpyInfiltrate()
 T non-virtual thunk to CTFBotSpyLeaveSpawnRoom::ShouldAttack(INextBot const*, CKnownEntity const*) const
 T non-virtual thunk to CTFBotSpyLeaveSpawnRoom::~CTFBotSpyLeaveSpawnRoom()
 T non-virtual thunk to CTFBotSpyLurk::ShouldAttack(INextBot const*, CKnownEntity const*) const
 T non-virtual thunk to CTFBotSpyLurk::~CTFBotSpyLurk()
 T non-virtual thunk to CTFBotSpySap::IsHindrance(INextBot const*, CBaseEntity*) const
 T non-virtual thunk to CTFBotSpySap::ShouldAttack(INextBot const*, CKnownEntity const*) const
 T non-virtual thunk to CTFBotSpySap::ShouldRetreat(INextBot const*) const
 T non-virtual thunk to CTFBotSpySap::~CTFBotSpySap()
 T non-virtual thunk to CTFBotStickybombSentrygun::ShouldAttack(INextBot const*, CKnownEntity const*) const
 T non-virtual thunk to CTFBotStickybombSentrygun::ShouldHurry(INextBot const*) const
 T non-virtual thunk to CTFBotStickybombSentrygun::ShouldRetreat(INextBot const*) const
 T non-virtual thunk to CTFBotStickybombSentrygun::~CTFBotStickybombSentrygun()
 T non-virtual thunk to CTFBotTacticalMonitor::~CTFBotTacticalMonitor()
 T non-virtual thunk to CTFBotTaunt::~CTFBotTaunt()
 T non-virtual thunk to CTFBotUberAttackEnemySentry::ShouldAttack(INextBot const*, CKnownEntity const*) const
 T non-virtual thunk to CTFBotUberAttackEnemySentry::ShouldHurry(INextBot const*) const
 T non-virtual thunk to CTFBotUberAttackEnemySentry::ShouldRetreat(INextBot const*) const
 T non-virtual thunk to CTFBotUberAttackEnemySentry::~CTFBotUberAttackEnemySentry()
 T non-virtual thunk to CTFBotUseItem::~CTFBotUseItem()
 T non-virtual thunk to CTFBotUseTeleporter::~CTFBotUseTeleporter()
 T non-virtual thunk to CTFBotWaitForOutOfPositionSquadMember::~CTFBotWaitForOutOfPositionSquadMember()
 T non-virtual thunk to CTFCompoundBow::GetChargeMaxTime()
 T non-virtual thunk to CTFCompoundBow::GetCurrentCharge()
 T non-virtual thunk to CTFDecapitationMeleeWeaponBase::FireGameEvent(IGameEvent*)
 T non-virtual thunk to CTFDespawn::~CTFDespawn()
 T non-virtual thunk to CTFDroppedWeapon::~CTFDroppedWeapon()
 T non-virtual thunk to CTFEventLog::Init()
 T non-virtual thunk to CTFEventLog::~CTFEventLog()
 T non-virtual thunk to CTFFlameEntity::~CTFFlameEntity()
 T non-virtual thunk to CTFFlameThrower::FireGameEvent(IGameEvent*)
 T non-virtual thunk to CTFFlameThrower::~CTFFlameThrower()
 T non-virtual thunk to CTFGCServerSystem::FireGameEvent(IGameEvent*)
 T non-virtual thunk to CTFGCServerSystem::HasLobby() const
 T non-virtual thunk to CTFGCServerSystem::PostSOUpdate(CSteamID const&, GCSDK::ESOCacheEvent)
 T non-virtual thunk to CTFGCServerSystem::PreSOUpdate(CSteamID const&, GCSDK::ESOCacheEvent)
 T non-virtual thunk to CTFGCServerSystem::SOCacheSubscribed(CSteamID const&, GCSDK::ESOCacheEvent)
 T non-virtual thunk to CTFGCServerSystem::SOCacheUnsubscribed(CSteamID const&, GCSDK::ESOCacheEvent)
 T non-virtual thunk to CTFGCServerSystem::SOCreated(CSteamID const&, GCSDK::CSharedObject const*, GCSDK::ESOCacheEvent)
 T non-virtual thunk to CTFGCServerSystem::SODestroyed(CSteamID const&, GCSDK::CSharedObject const*, GCSDK::ESOCacheEvent)
 T non-virtual thunk to CTFGCServerSystem::SOUpdated(CSteamID const&, GCSDK::CSharedObject const*, GCSDK::ESOCacheEvent)
 T non-virtual thunk to CTFGCServerSystem::ShouldHibernate()
 T non-virtual thunk to CTFGCServerSystem::SteamIDAllowedToConnect(CSteamID const&) const
 T non-virtual thunk to CTFGCServerSystem::UpdateServerDetails()
 T non-virtual thunk to CTFGCServerSystem::~CTFGCServerSystem()
 T non-virtual thunk to CTFGameRules::FireGameEvent(IGameEvent*)
 T non-virtual thunk to CTFGameRules::~CTFGameRules()
 T non-virtual thunk to CTFGameRulesProxy::FireGameEvent(IGameEvent*)
 T non-virtual thunk to CTFGameRulesProxy::~CTFGameRulesProxy()
 T non-virtual thunk to CTFGameStats::FireGameEvent(IGameEvent*)
 T non-virtual thunk to CTFGameStats::Init()
 T non-virtual thunk to CTFGameStats::LevelInitPreEntity()
 T non-virtual thunk to CTFGameStats::LevelShutdownPreClearSteamAPIContext()
 T non-virtual thunk to CTFGameStats::~CTFGameStats()
 T non-virtual thunk to CTFGenericBomb::~CTFGenericBomb()
 T non-virtual thunk to CTFGotoActionPoint::~CTFGotoActionPoint()
 T non-virtual thunk to CTFGrenadeLauncher::CanCharge()
 T non-virtual thunk to CTFGrenadeLauncher::GetChargeBeginTime()
 T non-virtual thunk to CTFGrenadeLauncher::GetChargeMaxTime()
 T non-virtual thunk to CTFGrenadePipebombProjectile::~CTFGrenadePipebombProjectile()
 T non-virtual thunk to CTFHLTVDirector::GetModEvents()
 T non-virtual thunk to CTFHLTVDirector::SetHLTVServer(IHLTVServer*)
 T non-virtual thunk to CTFHLTVDirector::~CTFHLTVDirector()
 T non-virtual thunk to CTFHalloweenFortuneTeller::FireGameEvent(IGameEvent*)
 T non-virtual thunk to CTFHalloweenFortuneTeller::~CTFHalloweenFortuneTeller()
 T non-virtual thunk to CTFHalloweenMinigame::FireGameEvent(IGameEvent*)
 T non-virtual thunk to CTFHalloweenMinigame::~CTFHalloweenMinigame()
 T non-virtual thunk to CTFHalloweenMinigame_FallingPlatforms::FireGameEvent(IGameEvent*)
 T non-virtual thunk to CTFHalloweenMinigame_FallingPlatforms::~CTFHalloweenMinigame_FallingPlatforms()
 T non-virtual thunk to CTFHolidayEntity::FireGameEvent(IGameEvent*)
 T non-virtual thunk to CTFHolidayEntity::~CTFHolidayEntity()
 T non-virtual thunk to CTFInfoPowerupSpawn::~CTFInfoPowerupSpawn()
 T non-virtual thunk to CTFItem::~CTFItem()
 T non-virtual thunk to CTFKatana::~CTFKatana()
 T non-virtual thunk to CTFMerasmusTrickOrTreatProp::~CTFMerasmusTrickOrTreatProp()
 T non-virtual thunk to CTFMiniGame::FireGameEvent(IGameEvent*)
 T non-virtual thunk to CTFMiniGame::~CTFMiniGame()
 T non-virtual thunk to CTFParty::AllowInvites() const
 T non-virtual thunk to CTFParty::Dump() const
 T non-virtual thunk to CTFParty::GetGroupID() const
 T non-virtual thunk to CTFParty::GetLeader() const
 T non-virtual thunk to CTFParty::GetMember(int) const
 T non-virtual thunk to CTFParty::GetMemberIndexBySteamID(CSteamID const&) const
 T non-virtual thunk to CTFParty::GetNumMembers() const
 T non-virtual thunk to CTFParty::GetNumPendingInvites() const
 T non-virtual thunk to CTFParty::GetPendingInvite(int) const
 T non-virtual thunk to CTFParty::GetPendingInviteIndexBySteamID(CSteamID const&) const
 T non-virtual thunk to CTFParty::GetSharedObjectForMember(CSteamID const&)
 T non-virtual thunk to CTFParty::~CTFParty()
 T non-virtual thunk to CTFPasstimeLogic::FireGameEvent(IGameEvent*)
 T non-virtual thunk to CTFPasstimeLogic::~CTFPasstimeLogic()
 T non-virtual thunk to CTFPipebombLauncher::CanCharge()
 T non-virtual thunk to CTFPipebombLauncher::GetChargeBeginTime()
 T non-virtual thunk to CTFPipebombLauncher::GetChargeMaxTime()
 T non-virtual thunk to CTFPlayer::GetAttributeContainer()
 T non-virtual thunk to CTFPlayer::GetAttributeList()
 T non-virtual thunk to CTFPlayer::GetAttributeManager()
 T non-virtual thunk to CTFPlayer::GetAttributeOwner()
 T non-virtual thunk to CTFPlayer::InventoryUpdated(CPlayerInventory*)
 T non-virtual thunk to CTFPlayer::ReapplyProvision()
 T non-virtual thunk to CTFPlayerDestructionLogic::FireGameEvent(IGameEvent*)
 T non-virtual thunk to CTFPlayerDestructionLogic::~CTFPlayerDestructionLogic()
 T non-virtual thunk to CTFPlayerResource::FireGameEvent(IGameEvent*)
 T non-virtual thunk to CTFPlayerResource::~CTFPlayerResource()
 T non-virtual thunk to CTFPowerupBottle::ReapplyProvision()
 T non-virtual thunk to CTFProjectile_Arrow::GetAssistant()
 T non-virtual thunk to CTFProjectile_Arrow::GetScorer()
 T non-virtual thunk to CTFProjectile_Arrow::~CTFProjectile_Arrow()
 T non-virtual thunk to CTFProjectile_Cleaver::~CTFProjectile_Cleaver()
 T non-virtual thunk to CTFProjectile_EnergyBall::~CTFProjectile_EnergyBall()
 T non-virtual thunk to CTFProjectile_EnergyRing::~CTFProjectile_EnergyRing()
 T non-virtual thunk to CTFProjectile_Flare::GetAssistant()
 T non-virtual thunk to CTFProjectile_Flare::GetScorer()
 T non-virtual thunk to CTFProjectile_Flare::~CTFProjectile_Flare()
 T non-virtual thunk to CTFProjectile_GrapplingHook::~CTFProjectile_GrapplingHook()
 T non-virtual thunk to CTFProjectile_HealingBolt::~CTFProjectile_HealingBolt()
 T non-virtual thunk to CTFProjectile_Jar::~CTFProjectile_Jar()
 T non-virtual thunk to CTFProjectile_JarMilk::~CTFProjectile_JarMilk()
 T non-virtual thunk to CTFProjectile_Rocket::GetAssistant()
 T non-virtual thunk to CTFProjectile_Rocket::GetScorer()
 T non-virtual thunk to CTFProjectile_Rocket::~CTFProjectile_Rocket()
 T non-virtual thunk to CTFProjectile_SentryRocket::~CTFProjectile_SentryRocket()
 T non-virtual thunk to CTFProjectile_SpellBats::~CTFProjectile_SpellBats()
 T non-virtual thunk to CTFProjectile_SpellFireball::~CTFProjectile_SpellFireball()
 T non-virtual thunk to CTFProjectile_SpellKartBats::~CTFProjectile_SpellKartBats()
 T non-virtual thunk to CTFProjectile_SpellKartOrb::~CTFProjectile_SpellKartOrb()
 T non-virtual thunk to CTFProjectile_SpellLightningOrb::~CTFProjectile_SpellLightningOrb()
 T non-virtual thunk to CTFProjectile_SpellMeteorShower::~CTFProjectile_SpellMeteorShower()
 T non-virtual thunk to CTFProjectile_SpellMirv::~CTFProjectile_SpellMirv()
 T non-virtual thunk to CTFProjectile_SpellPumpkin::~CTFProjectile_SpellPumpkin()
 T non-virtual thunk to CTFProjectile_SpellSpawnBoss::~CTFProjectile_SpellSpawnBoss()
 T non-virtual thunk to CTFProjectile_SpellSpawnHorde::~CTFProjectile_SpellSpawnHorde()
 T non-virtual thunk to CTFProjectile_SpellSpawnZombie::~CTFProjectile_SpellSpawnZombie()
 T non-virtual thunk to CTFProjectile_SpellTransposeTeleport::~CTFProjectile_SpellTransposeTeleport()
 T non-virtual thunk to CTFProjectile_Syringe::~CTFProjectile_Syringe()
 T non-virtual thunk to CTFProjectile_Throwable::~CTFProjectile_Throwable()
 T non-virtual thunk to CTFProjectile_ThrowableBreadMonster::~CTFProjectile_ThrowableBreadMonster()
 T non-virtual thunk to CTFProjectile_ThrowableBrick::~CTFProjectile_ThrowableBrick()
 T non-virtual thunk to CTFProjectile_ThrowableRepel::~CTFProjectile_ThrowableRepel()
 T non-virtual thunk to CTFPumpkinBomb::~CTFPumpkinBomb()
 T non-virtual thunk to CTFQuestEventListener::FireGameEvent(IGameEvent*)
 T non-virtual thunk to CTFQuestEventListener::~CTFQuestEventListener()
 T non-virtual thunk to CTFRobotDestructionLogic::FireGameEvent(IGameEvent*)
 T non-virtual thunk to CTFRobotDestructionLogic::~CTFRobotDestructionLogic()
 T non-virtual thunk to CTFRobotDestruction_Robot::GetBodyInterface() const
 T non-virtual thunk to CTFRobotDestruction_Robot::GetIntentionInterface() const
 T non-virtual thunk to CTFRobotDestruction_Robot::GetLocomotionInterface() const
 T non-virtual thunk to CTFRobotDestruction_Robot::IsRemovedOnReset() const
 T non-virtual thunk to CTFRobotDestruction_Robot::~CTFRobotDestruction_Robot()
 T non-virtual thunk to CTFRobotDestruction_RobotGroup::~CTFRobotDestruction_RobotGroup()
 T non-virtual thunk to CTFStunBall::~CTFStunBall()
 T non-virtual thunk to CTFSword::~CTFSword()
 T non-virtual thunk to CTFTankBoss::GetBodyInterface() const
 T non-virtual thunk to CTFTankBoss::~CTFTankBoss()
 T non-virtual thunk to CTFTargetDummy::~CTFTargetDummy()
 T non-virtual thunk to CTFTeamSpawn::~CTFTeamSpawn()
 T non-virtual thunk to CTFTeleportLocation::~CTFTeleportLocation()
 T non-virtual thunk to CTFThrowable::CanCharge()
 T non-virtual thunk to CTFThrowable::GetChargeBeginTime()
 T non-virtual thunk to CTFThrowable::GetChargeMaxTime()
 T non-virtual thunk to CTFTrainingAttackSentryActionPoint::~CTFTrainingAttackSentryActionPoint()
 T non-virtual thunk to CTFTrainingDynamicProp::~CTFTrainingDynamicProp()
 T non-virtual thunk to CTFWarTracker::FireGameEvent(IGameEvent*)
 T non-virtual thunk to CTFWarTracker::~CTFWarTracker()
 T non-virtual thunk to CTFWarTrackerManager::~CTFWarTrackerManager()
 T non-virtual thunk to CTFWeaponBase::GetOwnerViaInterface()
 T non-virtual thunk to CTFWeaponBase::ReapplyProvision()
 T non-virtual thunk to CTFWeaponBaseGrenadeProj::~CTFWeaponBaseGrenadeProj()
 T non-virtual thunk to CTFWeaponBaseMerasmusGrenade::~CTFWeaponBaseMerasmusGrenade()
 T non-virtual thunk to CTFWeaponSapper::CanCharge()
 T non-virtual thunk to CTFWeaponSapper::GetChargeBeginTime()
 T non-virtual thunk to CTFWeaponSapper::GetChargeMaxTime()
 T non-virtual thunk to CTFWearable::ReapplyProvision()
 T non-virtual thunk to CTeamTrainWatcher::FireGameEvent(IGameEvent*)
 T non-virtual thunk to CTeamTrainWatcher::~CTeamTrainWatcher()
 T non-virtual thunk to CTeamplayRoundBasedRules::FireGameEvent(IGameEvent*)
 T non-virtual thunk to CTeamplayRoundBasedRules::~CTeamplayRoundBasedRules()
 T non-virtual thunk to CToolFrameworkServer::PreSetupVisibility()
 T non-virtual thunk to CTriggerAreaCapture::~CTriggerAreaCapture()
 T non-virtual thunk to CTriggerHurt::~CTriggerHurt()
 T non-virtual thunk to CTriggerPlayerRespawnOverride::~CTriggerPlayerRespawnOverride()
 T non-virtual thunk to CTriggerTimerDoor::~CTriggerTimerDoor()
 T non-virtual thunk to CTriggerVPhysicsMotion::Simulate(IPhysicsMotionController*, IPhysicsObject*, float, Vector&, Vector&)
 T non-virtual thunk to CUpgrades::FireGameEvent(IGameEvent*)
 T non-virtual thunk to CUpgrades::~CUpgrades()
 T non-virtual thunk to CWheelOfDoom::FireGameEvent(IGameEvent*)
 T non-virtual thunk to CWheelOfDoom::~CWheelOfDoom()
 T non-virtual thunk to CZombie::GetBodyInterface() const
 T non-virtual thunk to CZombie::GetIntentionInterface() const
 T non-virtual thunk to CZombie::GetLocomotionInterface() const
 T non-virtual thunk to CZombie::~CZombie()
 T non-virtual thunk to CZombieAttack::~CZombieAttack()
 T non-virtual thunk to CZombieBehavior::~CZombieBehavior()
 T non-virtual thunk to CZombieIntention::IsPositionAllowed(INextBot const*, Vector const&) const
 T non-virtual thunk to CZombieIntention::~CZombieIntention()
 T non-virtual thunk to CZombieSpawn::~CZombieSpawn()
 T non-virtual thunk to CZombieSpecialAttack::~CZombieSpecialAttack()
 T non-virtual thunk to ConVar::GetName() const
 T non-virtual thunk to ConVar::IsFlagSet(int) const
 T non-virtual thunk to ConVar::SetValue(char const*)
 T non-virtual thunk to ConVar::SetValue(float)
 T non-virtual thunk to ConVar::SetValue(int)
 T non-virtual thunk to CryptoPP::ASN1CryptoMaterial<CryptoPP::PublicKey>::~ASN1CryptoMaterial()
 T non-virtual thunk to CryptoPP::AlgorithmImpl<CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher, CryptoPP::Rijndael_Info>, CryptoPP::TwoBases<CryptoPP::BlockCipher, CryptoPP::Rijndael_Info> >, CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher, CryptoPP::Rijndael_Info>, CryptoPP::TwoBases<CryptoPP::BlockCipher, CryptoPP::Rijndael_Info> > >::AlgorithmName() const
 T non-virtual thunk to CryptoPP::AlgorithmImpl<CryptoPP::TF_VerifierBase, CryptoPP::TF_SS<CryptoPP::PKCS1v15, CryptoPP::SHA256, CryptoPP::RSA, int> >::AlgorithmName() const
 T non-virtual thunk to CryptoPP::ArraySink::~ArraySink()
 T non-virtual thunk to CryptoPP::AutoSignaling<CryptoPP::BufferedTransformation>::~AutoSignaling()
 T non-virtual thunk to CryptoPP::BERGeneralDecoder::~BERGeneralDecoder()
 T non-virtual thunk to CryptoPP::BERSequenceDecoder::~BERSequenceDecoder()
 T non-virtual thunk to CryptoPP::BitBucket::~BitBucket()
 T non-virtual thunk to CryptoPP::BlockCipher::~BlockCipher()
 T non-virtual thunk to CryptoPP::BlockCipherFinal<(CryptoPP::CipherDir)0, CryptoPP::Rijndael::Enc>::IsForwardTransformation() const
 T non-virtual thunk to CryptoPP::BlockCipherFinal<(CryptoPP::CipherDir)0, CryptoPP::Rijndael::Enc>::~BlockCipherFinal()
 T non-virtual thunk to CryptoPP::BlockCipherImpl<CryptoPP::Rijndael_Info, CryptoPP::BlockCipher>::BlockSize() const
 T non-virtual thunk to CryptoPP::BufferedTransformation::GetMaxWaitObjectCount() const
 T non-virtual thunk to CryptoPP::BufferedTransformation::GetWaitObjects(CryptoPP::WaitObjectContainer&, CryptoPP::CallStack const&)
 T non-virtual thunk to CryptoPP::BufferedTransformation::~BufferedTransformation()
 T non-virtual thunk to CryptoPP::Bufferless<CryptoPP::BufferedTransformation>::~Bufferless()
 T non-virtual thunk to CryptoPP::ByteQueue::Walker::~Walker()
 T non-virtual thunk to CryptoPP::ByteQueue::~ByteQueue()
 T non-virtual thunk to CryptoPP::ClonableImpl<CryptoPP::BlockCipherFinal<(CryptoPP::CipherDir)0, CryptoPP::Rijndael::Enc>, CryptoPP::Rijndael::Enc>::Clone() const
 T non-virtual thunk to CryptoPP::DERGeneralEncoder::~DERGeneralEncoder()
 T non-virtual thunk to CryptoPP::DERSequenceEncoder::~DERSequenceEncoder()
 T non-virtual thunk to CryptoPP::Filter::~Filter()
 T non-virtual thunk to CryptoPP::InputRejecting<CryptoPP::BufferedTransformation>::~InputRejecting()
 T non-virtual thunk to CryptoPP::MessageQueue::~MessageQueue()
 T non-virtual thunk to CryptoPP::PK_FinalTemplate<CryptoPP::TF_VerifierImpl<CryptoPP::TF_SignatureSchemeOptions<CryptoPP::TF_SS<CryptoPP::PKCS1v15, CryptoPP::SHA256, CryptoPP::RSA, int>, CryptoPP::RSA, CryptoPP::PKCS1v15_SignatureMessageEncodingMethod, CryptoPP::SHA256> > >::~PK_FinalTemplate()
 T non-virtual thunk to CryptoPP::RSAFunction::BERDecodePublicKey(CryptoPP::BufferedTransformation&, bool, unsigned long)
 T non-virtual thunk to CryptoPP::RSAFunction::DEREncodePublicKey(CryptoPP::BufferedTransformation&) const
 T non-virtual thunk to CryptoPP::RSAFunction::GetAlgorithmID() const
 T non-virtual thunk to CryptoPP::RSAFunction::~RSAFunction()
 T non-virtual thunk to CryptoPP::Rijndael::Base::~Base()
 T non-virtual thunk to CryptoPP::Rijndael::Enc::AdvancedProcessBlocks(unsigned char const*, unsigned char const*, unsigned char*, unsigned long, unsigned int) const
 T non-virtual thunk to CryptoPP::Rijndael::Enc::ProcessAndXorBlock(unsigned char const*, unsigned char const*, unsigned char*) const
 T non-virtual thunk to CryptoPP::Sink::~Sink()
 T non-virtual thunk to CryptoPP::Source::~Source()
 T non-virtual thunk to CryptoPP::SourceTemplate<CryptoPP::StringStore>::~SourceTemplate()
 T non-virtual thunk to CryptoPP::StringSource::~StringSource()
 T non-virtual thunk to CryptoPP::StringStore::~StringStore()
 T non-virtual thunk to CryptoPP::TF_ObjectImpl<CryptoPP::TF_VerifierBase, CryptoPP::TF_SignatureSchemeOptions<CryptoPP::TF_SS<CryptoPP::PKCS1v15, CryptoPP::SHA256, CryptoPP::RSA, int>, CryptoPP::RSA, CryptoPP::PKCS1v15_SignatureMessageEncodingMethod, CryptoPP::SHA256>, CryptoPP::RSAFunction>::~TF_ObjectImpl()
 T non-virtual thunk to CryptoPP::TF_ObjectImplBase<CryptoPP::TF_VerifierBase, CryptoPP::TF_SignatureSchemeOptions<CryptoPP::TF_SS<CryptoPP::PKCS1v15, CryptoPP::SHA256, CryptoPP::RSA, int>, CryptoPP::RSA, CryptoPP::PKCS1v15_SignatureMessageEncodingMethod, CryptoPP::SHA256>, CryptoPP::RSAFunction>::AccessPublicKey()
 T non-virtual thunk to CryptoPP::TF_ObjectImplBase<CryptoPP::TF_VerifierBase, CryptoPP::TF_SignatureSchemeOptions<CryptoPP::TF_SS<CryptoPP::PKCS1v15, CryptoPP::SHA256, CryptoPP::RSA, int>, CryptoPP::RSA, CryptoPP::PKCS1v15_SignatureMessageEncodingMethod, CryptoPP::SHA256>, CryptoPP::RSAFunction>::GetMessageEncodingInterface() const
 T non-virtual thunk to CryptoPP::TF_ObjectImplBase<CryptoPP::TF_VerifierBase, CryptoPP::TF_SignatureSchemeOptions<CryptoPP::TF_SS<CryptoPP::PKCS1v15, CryptoPP::SHA256, CryptoPP::RSA, int>, CryptoPP::RSA, CryptoPP::PKCS1v15_SignatureMessageEncodingMethod, CryptoPP::SHA256>, CryptoPP::RSAFunction>::GetPublicKey() const
 T non-virtual thunk to CryptoPP::TF_ObjectImplBase<CryptoPP::TF_VerifierBase, CryptoPP::TF_SignatureSchemeOptions<CryptoPP::TF_SS<CryptoPP::PKCS1v15, CryptoPP::SHA256, CryptoPP::RSA, int>, CryptoPP::RSA, CryptoPP::PKCS1v15_SignatureMessageEncodingMethod, CryptoPP::SHA256>, CryptoPP::RSAFunction>::GetTrapdoorFunctionBounds() const
 T non-virtual thunk to CryptoPP::TF_ObjectImplBase<CryptoPP::TF_VerifierBase, CryptoPP::TF_SignatureSchemeOptions<CryptoPP::TF_SS<CryptoPP::PKCS1v15, CryptoPP::SHA256, CryptoPP::RSA, int>, CryptoPP::RSA, CryptoPP::PKCS1v15_SignatureMessageEncodingMethod, CryptoPP::SHA256>, CryptoPP::RSAFunction>::GetTrapdoorFunctionInterface() const
 T non-virtual thunk to CryptoPP::X509PublicKey::~X509PublicKey()
 T non-virtual thunk to IIntention::IsHindrance(INextBot const*, CBaseEntity*) const
 T non-virtual thunk to IIntention::IsPositionAllowed(INextBot const*, Vector const&) const
 T non-virtual thunk to IIntention::SelectMoreDangerousThreat(INextBot const*, CBaseCombatCharacter const*, CKnownEntity const*, CKnownEntity const*) const
 T non-virtual thunk to IIntention::SelectTargetPoint(INextBot const*, CBaseCombatCharacter const*) const
 T non-virtual thunk to IIntention::ShouldAttack(INextBot const*, CKnownEntity const*) const
 T non-virtual thunk to IIntention::ShouldHurry(INextBot const*) const
 T non-virtual thunk to IIntention::ShouldPickUp(INextBot const*, CBaseEntity*) const
 T non-virtual thunk to IIntention::ShouldRetreat(INextBot const*) const
 T non-virtual thunk to IIntention::~IIntention()
 T non-virtual thunk to NextBotCombatCharacter::GetEntity() const
 T non-virtual thunk to NextBotCombatCharacter::GetNextBotCombatCharacter() const
 T non-virtual thunk to NextBotCombatCharacter::OnNavAreaChanged(CNavArea*, CNavArea*)
 T non-virtual thunk to NextBotCombatCharacter::~NextBotCombatCharacter()
 T non-virtual thunk to NextBotPlayer<CTFPlayer>::GetEntity() const
 T non-virtual thunk to NextBotPlayer<CTFPlayer>::IsRemovedOnReset() const
 T non-virtual thunk to NextBotPlayer<CTFPlayer>::OnNavAreaChanged(CNavArea*, CNavArea*)
 T non-virtual thunk to NextBotPlayer<CTFPlayer>::PressAltFireButton(float)
 T non-virtual thunk to NextBotPlayer<CTFPlayer>::PressBackwardButton(float)
 T non-virtual thunk to NextBotPlayer<CTFPlayer>::PressCrouchButton(float)
 T non-virtual thunk to NextBotPlayer<CTFPlayer>::PressFireButton(float)
 T non-virtual thunk to NextBotPlayer<CTFPlayer>::PressForwardButton(float)
 T non-virtual thunk to NextBotPlayer<CTFPlayer>::PressJumpButton(float)
 T non-virtual thunk to NextBotPlayer<CTFPlayer>::PressLeftButton(float)
 T non-virtual thunk to NextBotPlayer<CTFPlayer>::PressMeleeButton(float)
 T non-virtual thunk to NextBotPlayer<CTFPlayer>::PressReloadButton(float)
 T non-virtual thunk to NextBotPlayer<CTFPlayer>::PressRightButton(float)
 T non-virtual thunk to NextBotPlayer<CTFPlayer>::PressSpecialFireButton(float)
 T non-virtual thunk to NextBotPlayer<CTFPlayer>::PressUseButton(float)
 T non-virtual thunk to NextBotPlayer<CTFPlayer>::PressWalkButton(float)
 T non-virtual thunk to NextBotPlayer<CTFPlayer>::ReleaseAltFireButton()
 T non-virtual thunk to NextBotPlayer<CTFPlayer>::ReleaseBackwardButton()
 T non-virtual thunk to NextBotPlayer<CTFPlayer>::ReleaseCrouchButton()
 T non-virtual thunk to NextBotPlayer<CTFPlayer>::ReleaseFireButton()
 T non-virtual thunk to NextBotPlayer<CTFPlayer>::ReleaseForwardButton()
 T non-virtual thunk to NextBotPlayer<CTFPlayer>::ReleaseJumpButton()
 T non-virtual thunk to NextBotPlayer<CTFPlayer>::ReleaseLeftButton()
 T non-virtual thunk to NextBotPlayer<CTFPlayer>::ReleaseMeleeButton()
 T non-virtual thunk to NextBotPlayer<CTFPlayer>::ReleaseReloadButton()
 T non-virtual thunk to NextBotPlayer<CTFPlayer>::ReleaseRightButton()
 T non-virtual thunk to NextBotPlayer<CTFPlayer>::ReleaseSpecialFireButton()
 T non-virtual thunk to NextBotPlayer<CTFPlayer>::ReleaseUseButton()
 T non-virtual thunk to NextBotPlayer<CTFPlayer>::ReleaseWalkButton()
 T non-virtual thunk to NextBotPlayer<CTFPlayer>::SetButtonScale(float, float)
 T non-virtual thunk to NextBotPlayer<CTFPlayer>::Update()
 T non-virtual thunk to NextBotPlayer<CTFPlayer>::~NextBotPlayer()
 T operator delete(void*)
 T operator delete[](void*)
 T operator new(unsigned long)
 T operator new[](unsigned long)
 T perteamvisuals_t::operator=(perteamvisuals_t const&)
 T perteamvisuals_t::~perteamvisuals_t()
 T physicssound::AddBreakSound(CUtlVector<physicssound::breaksound_t, CUtlMemory<physicssound::breaksound_t, int> >&, Vector const&, unsigned short)
 T physicssound::AddImpactSound(physicssound::soundlist_t&, void*, int, int, IPhysicsObject*, int, int, float, float)
 T physicssound::PlayBreakSounds(CUtlVector<physicssound::breaksound_t, CUtlMemory<physicssound::breaksound_t, int> >&)
 T physicssound::PlayImpactSounds(physicssound::soundlist_t&)
 T protobuf_AddDesc_base_5fgcmessages_2eproto()
 T protobuf_AddDesc_econ_5fgcmessages_2eproto()
 T protobuf_AddDesc_gcsdk_5fgcmessages_2eproto()
 T protobuf_AddDesc_steammessages_2eproto()
 T protobuf_AddDesc_tf_5fgcmessages_2eproto()
 T protobuf_AssignDesc_base_5fgcmessages_2eproto()
 T protobuf_AssignDesc_econ_5fgcmessages_2eproto()
 T protobuf_AssignDesc_gcsdk_5fgcmessages_2eproto()
 T protobuf_AssignDesc_gcsystemmsgs_2eproto()
 T protobuf_AssignDesc_steammessages_2eproto()
 T protobuf_AssignDesc_tf_5fgcmessages_2eproto()
 T protobuf_ShutdownFile_base_5fgcmessages_2eproto()
 T protobuf_ShutdownFile_econ_5fgcmessages_2eproto()
 T protobuf_ShutdownFile_gcsdk_5fgcmessages_2eproto()
 T protobuf_ShutdownFile_gcsystemmsgs_2eproto()
 T protobuf_ShutdownFile_steammessages_2eproto()
 T protobuf_ShutdownFile_tf_5fgcmessages_2eproto()
 T rand
 T respawn(CBaseEntity*, bool)
 T response_interval_t<float16_with_assign>::ToInterval(interval_t&) const
 T sky3dparams_t::NetworkStateChanged()
 T sky3dparams_t::NetworkStateChanged(void*)
 T sky3dparams_t::NetworkVar_fog::NetworkStateChanged()
 T sky3dparams_t::NetworkVar_fog::NetworkStateChanged(void*)
 T static_attrib_t::BInitFromKV_MultiLine(char const*, KeyValues*, CUtlVector<CUtlString, CUtlMemory<CUtlString, int> >*)
 T static_attrib_t::BInitFromKV_SingleLine(char const*, KeyValues*, CUtlVector<CUtlString, CUtlMemory<CUtlString, int> >*, bool)
 T std::_Deque_base<unsigned int, std::allocator<unsigned int> >::_M_create_nodes(unsigned int**, unsigned int**)
 T std::_Deque_base<unsigned int, std::allocator<unsigned int> >::_M_destroy_nodes(unsigned int**, unsigned int**)
 T std::_Deque_base<unsigned int, std::allocator<unsigned int> >::_M_initialize_map(unsigned long)
 T std::_Deque_base<unsigned int, std::allocator<unsigned int> >::~_Deque_base()
 T std::_Deque_base<unsigned long long, std::allocator<unsigned long long> >::_M_create_nodes(unsigned long long**, unsigned long long**)
 T std::_Deque_base<unsigned long long, std::allocator<unsigned long long> >::_M_destroy_nodes(unsigned long long**, unsigned long long**)
 T std::_Deque_base<unsigned long long, std::allocator<unsigned long long> >::_M_initialize_map(unsigned long)
 T std::_Deque_base<unsigned long long, std::allocator<unsigned long long> >::~_Deque_base()
 T std::_Deque_iterator<unsigned int, unsigned int&, unsigned int*>::difference_type std::operator-<unsigned int, unsigned int&, unsigned int*, unsigned int&, unsigned int*>(std::_Deque_iterator<unsigned int, unsigned int&, unsigned int*> const&, std::_Deque_iterator<unsigned int, unsigned int&, unsigned int*> const&)
 T std::_Deque_iterator<unsigned int, unsigned int&, unsigned int*>::operator+=(int)
 T std::_Deque_iterator<unsigned long long, unsigned long long&, unsigned long long*>::difference_type std::operator-<unsigned long long, unsigned long long&, unsigned long long*, unsigned long long&, unsigned long long*>(std::_Deque_iterator<unsigned long long, unsigned long long&, unsigned long long*> const&, std::_Deque_iterator<unsigned long long, unsigned long long&, unsigned long long*> const&)
 T std::_Deque_iterator<unsigned long long, unsigned long long&, unsigned long long*>::operator+=(int)
 T std::_Rb_tree<std::pair<std::string, int>, std::pair<std::pair<std::string, int> const, std::pair<void const*, int> >, std::_Select1st<std::pair<std::pair<std::string, int> const, std::pair<void const*, int> > >, std::less<std::pair<std::string, int> >, std::allocator<std::pair<std::pair<std::string, int> const, std::pair<void const*, int> > > >::_M_create_node(std::pair<std::pair<std::string, int> const, std::pair<void const*, int> > const&)
 T std::_Rb_tree<std::pair<std::string, int>, std::pair<std::pair<std::string, int> const, std::pair<void const*, int> >, std::_Select1st<std::pair<std::pair<std::string, int> const, std::pair<void const*, int> > >, std::less<std::pair<std::string, int> >, std::allocator<std::pair<std::pair<std::string, int> const, std::pair<void const*, int> > > >::_M_destroy_node(std::_Rb_tree_node<std::pair<std::pair<std::string, int> const, std::pair<void const*, int> > >*)
 T std::_Rb_tree<std::pair<std::string, int>, std::pair<std::pair<std::string, int> const, std::pair<void const*, int> >, std::_Select1st<std::pair<std::pair<std::string, int> const, std::pair<void const*, int> > >, std::less<std::pair<std::string, int> >, std::allocator<std::pair<std::pair<std::string, int> const, std::pair<void const*, int> > > >::_M_erase(std::_Rb_tree_node<std::pair<std::pair<std::string, int> const, std::pair<void const*, int> > >*)
 T std::_Rb_tree<std::pair<std::string, int>, std::pair<std::pair<std::string, int> const, std::pair<void const*, int> >, std::_Select1st<std::pair<std::pair<std::string, int> const, std::pair<void const*, int> > >, std::less<std::pair<std::string, int> >, std::allocator<std::pair<std::pair<std::string, int> const, std::pair<void const*, int> > > >::_M_insert(std::_Rb_tree_node_base*, std::_Rb_tree_node_base*, std::pair<std::pair<std::string, int> const, std::pair<void const*, int> > const&)
 T std::_Rb_tree<std::pair<std::string, int>, std::pair<std::pair<std::string, int> const, std::pair<void const*, int> >, std::_Select1st<std::pair<std::pair<std::string, int> const, std::pair<void const*, int> > >, std::less<std::pair<std::string, int> >, std::allocator<std::pair<std::pair<std::string, int> const, std::pair<void const*, int> > > >::_M_insert_unique(std::pair<std::pair<std::string, int> const, std::pair<void const*, int> > const&)
 T std::_Rb_tree<std::pair<std::string, int>, std::pair<std::pair<std::string, int> const, std::pair<void const*, int> >, std::_Select1st<std::pair<std::pair<std::string, int> const, std::pair<void const*, int> > >, std::less<std::pair<std::string, int> >, std::allocator<std::pair<std::pair<std::string, int> const, std::pair<void const*, int> > > >::find(std::pair<std::string, int> const&) const
 T std::_Rb_tree<std::pair<std::string, int>, std::pair<std::pair<std::string, int> const, std::pair<void const*, int> >, std::_Select1st<std::pair<std::pair<std::string, int> const, std::pair<void const*, int> > >, std::less<std::pair<std::string, int> >, std::allocator<std::pair<std::pair<std::string, int> const, std::pair<void const*, int> > > >::lower_bound(std::pair<std::string, int> const&)
 T std::_Rb_tree<std::pair<std::string, int>, std::pair<std::pair<std::string, int> const, std::pair<void const*, int> >, std::_Select1st<std::pair<std::pair<std::string, int> const, std::pair<void const*, int> > >, std::less<std::pair<std::string, int> >, std::allocator<std::pair<std::pair<std::string, int> const, std::pair<void const*, int> > > >::~_Rb_tree()
 T std::_Rb_tree<std::string, std::pair<std::string const, std::pair<void const*, int> >, std::_Select1st<std::pair<std::string const, std::pair<void const*, int> > >, std::less<std::string>, std::allocator<std::pair<std::string const, std::pair<void const*, int> > > >::_M_create_node(std::pair<std::string const, std::pair<void const*, int> > const&)
 T std::_Rb_tree<std::string, std::pair<std::string const, std::pair<void const*, int> >, std::_Select1st<std::pair<std::string const, std::pair<void const*, int> > >, std::less<std::string>, std::allocator<std::pair<std::string const, std::pair<void const*, int> > > >::_M_destroy_node(std::_Rb_tree_node<std::pair<std::string const, std::pair<void const*, int> > >*)
 T std::_Rb_tree<std::string, std::pair<std::string const, std::pair<void const*, int> >, std::_Select1st<std::pair<std::string const, std::pair<void const*, int> > >, std::less<std::string>, std::allocator<std::pair<std::string const, std::pair<void const*, int> > > >::_M_erase(std::_Rb_tree_node<std::pair<std::string const, std::pair<void const*, int> > >*)
 T std::_Rb_tree<std::string, std::pair<std::string const, std::pair<void const*, int> >, std::_Select1st<std::pair<std::string const, std::pair<void const*, int> > >, std::less<std::string>, std::allocator<std::pair<std::string const, std::pair<void const*, int> > > >::_M_insert(std::_Rb_tree_node_base*, std::_Rb_tree_node_base*, std::pair<std::string const, std::pair<void const*, int> > const&)
 T std::_Rb_tree<std::string, std::pair<std::string const, std::pair<void const*, int> >, std::_Select1st<std::pair<std::string const, std::pair<void const*, int> > >, std::less<std::string>, std::allocator<std::pair<std::string const, std::pair<void const*, int> > > >::_M_insert_unique(std::_Rb_tree_iterator<std::pair<std::string const, std::pair<void const*, int> > >, std::pair<std::string const, std::pair<void const*, int> > const&)
 T std::_Rb_tree<std::string, std::pair<std::string const, std::pair<void const*, int> >, std::_Select1st<std::pair<std::string const, std::pair<void const*, int> > >, std::less<std::string>, std::allocator<std::pair<std::string const, std::pair<void const*, int> > > >::_M_insert_unique(std::pair<std::string const, std::pair<void const*, int> > const&)
 T std::_Rb_tree<std::string, std::pair<std::string const, std::pair<void const*, int> >, std::_Select1st<std::pair<std::string const, std::pair<void const*, int> > >, std::less<std::string>, std::allocator<std::pair<std::string const, std::pair<void const*, int> > > >::find(std::string const&) const
 T std::_Rb_tree<std::string, std::pair<std::string const, std::pair<void const*, int> >, std::_Select1st<std::pair<std::string const, std::pair<void const*, int> > >, std::less<std::string>, std::allocator<std::pair<std::string const, std::pair<void const*, int> > > >::upper_bound(std::string const&)
 T std::_Rb_tree<std::string, std::pair<std::string const, std::pair<void const*, int> >, std::_Select1st<std::pair<std::string const, std::pair<void const*, int> > >, std::less<std::string>, std::allocator<std::pair<std::string const, std::pair<void const*, int> > > >::~_Rb_tree()
 T std::_Rb_tree<std::string, std::string, std::_Identity<std::string>, std::less<std::string>, std::allocator<std::string> >::_M_create_node(std::string const&)
 T std::_Rb_tree<std::string, std::string, std::_Identity<std::string>, std::less<std::string>, std::allocator<std::string> >::_M_destroy_node(std::_Rb_tree_node<std::string>*)
 T std::_Rb_tree<std::string, std::string, std::_Identity<std::string>, std::less<std::string>, std::allocator<std::string> >::_M_erase(std::_Rb_tree_node<std::string>*)
 T std::_Rb_tree<std::string, std::string, std::_Identity<std::string>, std::less<std::string>, std::allocator<std::string> >::_M_insert(std::_Rb_tree_node_base*, std::_Rb_tree_node_base*, std::string const&)
 T std::_Rb_tree<std::string, std::string, std::_Identity<std::string>, std::less<std::string>, std::allocator<std::string> >::_M_insert_unique(std::string const&)
 T std::_Rb_tree<std::string, std::string, std::_Identity<std::string>, std::less<std::string>, std::allocator<std::string> >::~_Rb_tree()
 T std::_Vector_base<char const*, std::allocator<char const*> >::_M_allocate(unsigned long)
 T std::_Vector_base<int, std::allocator<int> >::_M_allocate(unsigned long)
 T std::_Vector_base<std::string*, std::allocator<std::string*> >::_M_allocate(unsigned long)
 T std::_Vector_base<std::string, std::allocator<std::string> >::_M_allocate(unsigned long)
 T std::_Vector_base<void (*)(), std::allocator<void (*)()> >::_M_allocate(unsigned long)
 T std::_Vector_base<void*, std::allocator<void*> >::_M_allocate(unsigned long)
 T std::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(char const*, std::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)
 T std::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(char, std::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)
 T std::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(std::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, char const*)
 T std::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(std::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)
 T std::deque<unsigned int, std::allocator<unsigned int> >::_M_fill_initialize(unsigned int const&)
 T std::deque<unsigned int, std::allocator<unsigned int> >::_M_fill_insert(std::_Deque_iterator<unsigned int, unsigned int&, unsigned int*>, unsigned long, unsigned int const&)
 T std::deque<unsigned int, std::allocator<unsigned int> >::_M_insert_aux(std::_Deque_iterator<unsigned int, unsigned int&, unsigned int*>, unsigned long, unsigned int const&)
 T std::deque<unsigned int, std::allocator<unsigned int> >::_M_new_elements_at_back(unsigned long)
 T std::deque<unsigned int, std::allocator<unsigned int> >::_M_new_elements_at_front(unsigned long)
 T std::deque<unsigned int, std::allocator<unsigned int> >::_M_pop_front_aux()
 T std::deque<unsigned int, std::allocator<unsigned int> >::_M_push_back_aux(unsigned int const&)
 T std::deque<unsigned int, std::allocator<unsigned int> >::_M_reallocate_map(unsigned long, bool)
 T std::deque<unsigned int, std::allocator<unsigned int> >::clear()
 T std::deque<unsigned int, std::allocator<unsigned int> >::erase(std::_Deque_iterator<unsigned int, unsigned int&, unsigned int*>, std::_Deque_iterator<unsigned int, unsigned int&, unsigned int*>)
 T std::deque<unsigned long long, std::allocator<unsigned long long> >::_M_fill_initialize(unsigned long long const&)
 T std::deque<unsigned long long, std::allocator<unsigned long long> >::_M_fill_insert(std::_Deque_iterator<unsigned long long, unsigned long long&, unsigned long long*>, unsigned long, unsigned long long const&)
 T std::deque<unsigned long long, std::allocator<unsigned long long> >::_M_insert_aux(std::_Deque_iterator<unsigned long long, unsigned long long&, unsigned long long*>, unsigned long, unsigned long long const&)
 T std::deque<unsigned long long, std::allocator<unsigned long long> >::_M_new_elements_at_back(unsigned long)
 T std::deque<unsigned long long, std::allocator<unsigned long long> >::_M_new_elements_at_front(unsigned long)
 T std::deque<unsigned long long, std::allocator<unsigned long long> >::_M_pop_front_aux()
 T std::deque<unsigned long long, std::allocator<unsigned long long> >::_M_push_back_aux(unsigned long long const&)
 T std::deque<unsigned long long, std::allocator<unsigned long long> >::_M_reallocate_map(unsigned long, bool)
 T std::deque<unsigned long long, std::allocator<unsigned long long> >::clear()
 T std::deque<unsigned long long, std::allocator<unsigned long long> >::erase(std::_Deque_iterator<unsigned long long, unsigned long long&, unsigned long long*>, std::_Deque_iterator<unsigned long long, unsigned long long&, unsigned long long*>)
 T std::less<std::pair<std::string, int> >::operator()(std::pair<std::string, int> const&, std::pair<std::string, int> const&) const
 T std::string CryptoPP::IntToString<int>(int, unsigned int)
 T std::string CryptoPP::IntToString<unsigned int>(unsigned int, unsigned int)
 T std::string CryptoPP::IntToString<unsigned long>(unsigned long, unsigned int)
 T std::string* std::__copy_backward<false, std::random_access_iterator_tag>::__copy_b<std::string*, std::string*>(std::string*, std::string*, std::string*)
 T std::string* std::__uninitialized_copy_aux<std::string*, std::string*>(std::string*, std::string*, std::string*, std::__false_type)
 T std::vector<CryptoPP::Integer, std::allocator<CryptoPP::Integer> >::_M_fill_insert(__gnu_cxx::__normal_iterator<CryptoPP::Integer*, std::vector<CryptoPP::Integer, std::allocator<CryptoPP::Integer> > >, unsigned long, CryptoPP::Integer const&)
 T std::vector<CryptoPP::Integer, std::allocator<CryptoPP::Integer> >::erase(__gnu_cxx::__normal_iterator<CryptoPP::Integer*, std::vector<CryptoPP::Integer, std::allocator<CryptoPP::Integer> > >, __gnu_cxx::__normal_iterator<CryptoPP::Integer*, std::vector<CryptoPP::Integer, std::allocator<CryptoPP::Integer> > >)
 T std::vector<CryptoPP::WindowSlider, std::allocator<CryptoPP::WindowSlider> >::_M_insert_aux(__gnu_cxx::__normal_iterator<CryptoPP::WindowSlider*, std::vector<CryptoPP::WindowSlider, std::allocator<CryptoPP::WindowSlider> > >, CryptoPP::WindowSlider const&)
 T std::vector<CryptoPP::WindowSlider, std::allocator<CryptoPP::WindowSlider> >::reserve(unsigned long)
 T std::vector<char const*, std::allocator<char const*> >::_M_insert_aux(__gnu_cxx::__normal_iterator<char const**, std::vector<char const*, std::allocator<char const*> > >, char const* const&)
 T std::vector<char const*, std::allocator<char const*> >::push_back(char const* const&)
 T std::vector<int, std::allocator<int> >::_M_insert_aux(__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, int const&)
 T std::vector<int, std::allocator<int> >::push_back(int const&)
 T std::vector<std::string*, std::allocator<std::string*> >::_M_fill_insert(__gnu_cxx::__normal_iterator<std::string**, std::vector<std::string*, std::allocator<std::string*> > >, unsigned long, std::string* const&)
 T std::vector<std::string*, std::allocator<std::string*> >::_M_insert_aux(__gnu_cxx::__normal_iterator<std::string**, std::vector<std::string*, std::allocator<std::string*> > >, std::string* const&)
 T std::vector<std::string*, std::allocator<std::string*> >::push_back(std::string* const&)
 T std::vector<std::string*, std::allocator<std::string*> >::resize(unsigned long, std::string*)
 T std::vector<std::string, std::allocator<std::string> >::_M_insert_aux(__gnu_cxx::__normal_iterator<std::string*, std::vector<std::string, std::allocator<std::string> > >, std::string const&)
 T std::vector<std::string, std::allocator<std::string> >::push_back(std::string const&)
 T std::vector<std::string, std::allocator<std::string> >::~vector()
 T std::vector<unsigned int, std::allocator<unsigned int> >::_M_fill_insert(__gnu_cxx::__normal_iterator<unsigned int*, std::vector<unsigned int, std::allocator<unsigned int> > >, unsigned long, unsigned int const&)
 T std::vector<unsigned int, std::allocator<unsigned int> >::_M_insert_aux(__gnu_cxx::__normal_iterator<unsigned int*, std::vector<unsigned int, std::allocator<unsigned int> > >, unsigned int const&)
 T std::vector<unsigned int, std::allocator<unsigned int> >::erase(__gnu_cxx::__normal_iterator<unsigned int*, std::vector<unsigned int, std::allocator<unsigned int> > >, __gnu_cxx::__normal_iterator<unsigned int*, std::vector<unsigned int, std::allocator<unsigned int> > >)
 T std::vector<unsigned int, std::allocator<unsigned int> >::vector(std::vector<unsigned int, std::allocator<unsigned int> > const&)
 T std::vector<unsigned int, std::allocator<unsigned int> >::~vector()
 T std::vector<void (*)(), std::allocator<void (*)()> >::_M_insert_aux(__gnu_cxx::__normal_iterator<void (**)(), std::vector<void (*)(), std::allocator<void (*)()> > >, void (* const&)())
 T std::vector<void (*)(), std::allocator<void (*)()> >::push_back(void (* const&)())
 T std::vector<void*, std::allocator<void*> >::_M_fill_insert(__gnu_cxx::__normal_iterator<void**, std::vector<void*, std::allocator<void*> > >, unsigned long, void* const&)
 T std::vector<void*, std::allocator<void*> >::_M_insert_aux(__gnu_cxx::__normal_iterator<void**, std::vector<void*, std::allocator<void*> > >, void* const&)
 T std::vector<void*, std::allocator<void*> >::push_back(void* const&)
 T std::vector<void*, std::allocator<void*> >::resize(unsigned long, void*)
 T strange_attr_set_t::strange_attr_set_t(char const*, char const*, char const*, char const*, bool)
 T studiohdr_t::GetAnimBlock(int) const
 T studiohdr_t::GetAutoplayList(unsigned short**) const
 T studiohdr_t::GetVirtualModel() const
 T studiohdr_t::SetActivityListVersion(int) const
 T sv_allow_point_servercommand_changed(IConVar*, char const*, float)
 T testJumpDown(Vector const*, Vector const*)
 T unsigned int CUtlHashtable<CBaseEntityModelLoadProxy, empty_t, PointerHashFunctor, PointerEqualFunctor, CBaseEntity*>::DoInsert<CBaseEntity*>(CBaseEntity*, unsigned int)
 T unsigned int CUtlHashtable<CUtlConstStringBase<char>, empty_t, DefaultHashFunctor<CUtlConstStringBase<char> >, DefaultEqualFunctor<CUtlConstStringBase<char> >, char const*>::DoInsert<char const*>(char const*, unsigned int)
 T unsigned int CUtlHashtable<CUtlConstStringBase<char>, empty_t, DefaultHashFunctor<CUtlConstStringBase<char> >, DefaultEqualFunctor<CUtlConstStringBase<char> >, char const*>::DoLookup<char const*>(char const*, unsigned int, unsigned int*) const
 T unsigned int CUtlHashtable<void const*, char const*, DefaultHashFunctor<void const*>, DefaultEqualFunctor<void const*>, undefined_t>::DoInsert<void const*>(void const*, char const*, unsigned int, bool*)
 T unsigned int CryptoPP::BitPrecision<unsigned int>(unsigned int const&)
 T unsigned int CryptoPP::BitPrecision<unsigned long>(unsigned long const&)
 T unsigned int CryptoPP::BytePrecision<unsigned int>(unsigned int const&)
 T unsigned int CryptoPP::BytePrecision<unsigned long long>(unsigned long long const&)
 T unsigned int CryptoPP::DivideThreeWordsByTwo<unsigned int, CryptoPP::DWord>(unsigned int*, unsigned int, unsigned int, CryptoPP::DWord*)
 T unsigned int* std::fill_n<unsigned int*, unsigned long, unsigned int>(unsigned int*, unsigned long, unsigned int const&)
 T variant_t::Convert(_fieldtypes)
 T variant_t::Set(_fieldtypes, void*)
 T variant_t::SetEntity(CBaseEntity*)
 T variant_t::SetOther(void*)
 T variant_t::ToString() const
 T vehicle_crashsound_t::GetDataDescMap()
 T vehicle_gear_t::GetDataDescMap()
 T vehiclesounds_t::GetDataDescMap()
 T virtual thunk to CryptoPP::ASN1CryptoMaterial<CryptoPP::PublicKey>::Load(CryptoPP::BufferedTransformation&)
 T virtual thunk to CryptoPP::ASN1CryptoMaterial<CryptoPP::PublicKey>::Save(CryptoPP::BufferedTransformation&) const
 T virtual thunk to CryptoPP::RSAFunction::AssignFrom(CryptoPP::NameValuePairs const&)
 T virtual thunk to CryptoPP::RSAFunction::GetVoidValue(char const*, std::type_info const&, void*) const
 T virtual thunk to CryptoPP::RSAFunction::Validate(CryptoPP::RandomNumberGenerator&, unsigned int) const
 T virtualgroup_t::GetStudioHdr() const
 T void CEconItem::SetDynamicAttributeValue<CAttribute_DynamicRecipeComponent>(CEconItemAttributeDefinition const*, CAttribute_DynamicRecipeComponent const&)
 T void CEconItem::SetDynamicAttributeValue<CAttribute_ItemSlotCriteria>(CEconItemAttributeDefinition const*, CAttribute_ItemSlotCriteria const&)
 T void CEconItem::SetDynamicAttributeValue<CAttribute_String>(CEconItemAttributeDefinition const*, CAttribute_String const&)
 T void CEconItem::SetDynamicAttributeValue<CAttribute_WorldItemPlacement>(CEconItemAttributeDefinition const*, CAttribute_WorldItemPlacement const&)
 T void CEconItem::SetDynamicAttributeValue<float>(CEconItemAttributeDefinition const*, float const&)
 T void CEconItem::SetDynamicAttributeValue<unsigned int>(CEconItemAttributeDefinition const*, unsigned int const&)
 T void CEconItem::SetDynamicAttributeValue<unsigned long long>(CEconItemAttributeDefinition const*, unsigned long long const&)
 T void CNavMesh::CollectAreasOverlappingExtent<CNavArea>(Extent const&, CUtlVector<CNavArea*, CUtlMemory<CNavArea*, int> >*)
 T void CNavMesh::CollectAreasOverlappingExtent<CTFNavArea>(Extent const&, CUtlVector<CTFNavArea*, CUtlMemory<CTFNavArea*, int> >*)
 T void CNavMesh::StitchAreaIntoMesh<AreaSet>(CNavArea*, NavDirType, AreaSet&)
 T void CNavMesh::StitchAreaIntoMesh<IncrementallyGeneratedAreas>(CNavArea*, NavDirType, IncrementallyGeneratedAreas&)
 T void ConstructStringVArgsInternal_Impl<wchar_t>(wchar_t*, int, wchar_t const*, int, char*)
 T void CryptoPP::ByteReverse<unsigned int>(unsigned int*, unsigned int const*, unsigned long)
 T void DeepCopyMap<char const*, codecontrolledbodygroupdata_t, unsigned short>(CUtlMap<char const*, codecontrolledbodygroupdata_t, unsigned short> const&, CUtlMap<char const*, codecontrolledbodygroupdata_t, unsigned short>*)
 T void DeepCopyMap<char const*, int, unsigned short>(CUtlMap<char const*, int, unsigned short> const&, CUtlMap<char const*, int, unsigned short>*)
 T void ILocalize::ConstructString<wchar_t>(wchar_t*, int, wchar_t const*, int, ...)
 T void SearchSurroundingAreas<DrawIncursionFlow>(CNavArea*, Vector const&, DrawIncursionFlow&, float, unsigned int, int)
 T void SearchSurroundingAreas<DrawSelectedSet>(CNavArea*, Vector const&, DrawSelectedSet&, float, unsigned int, int)
 T void SearchSurroundingAreas<PlaceFloodFillFunctor>(CNavArea*, Vector const&, PlaceFloodFillFunctor&, float, unsigned int, int)
 T void SearchSurroundingAreas<ScanSelectAmbushAreas>(CNavArea*, Vector const&, ScanSelectAmbushAreas&, float, unsigned int, int)
 T void SearchSurroundingAreas<SelectCollector>(CNavArea*, Vector const&, SelectCollector&, float, unsigned int, int)
 T void SelectSeparatedShuffleSet<CTFNavArea>(int, float, CUtlVector<CTFNavArea*, CUtlMemory<CTFNavArea*, int> > const&, CUtlVector<CTFNavArea*, CUtlMemory<CTFNavArea*, int> >*)
 T void std::_Destroy<CryptoPP::Integer*, std::allocator<CryptoPP::Integer> >(CryptoPP::Integer*, CryptoPP::Integer*, std::allocator<CryptoPP::Integer>)
 T void std::_Destroy<CryptoPP::WindowSlider*, std::allocator<CryptoPP::WindowSlider> >(CryptoPP::WindowSlider*, CryptoPP::WindowSlider*, std::allocator<CryptoPP::WindowSlider>)
 T void std::_Destroy<__gnu_cxx::__normal_iterator<CryptoPP::Integer*, std::vector<CryptoPP::Integer, std::allocator<CryptoPP::Integer> > >, std::allocator<CryptoPP::Integer> >(__gnu_cxx::__normal_iterator<CryptoPP::Integer*, std::vector<CryptoPP::Integer, std::allocator<CryptoPP::Integer> > >, __gnu_cxx::__normal_iterator<CryptoPP::Integer*, std::vector<CryptoPP::Integer, std::allocator<CryptoPP::Integer> > >, std::allocator<CryptoPP::Integer>)
 T void std::_Destroy<__gnu_cxx::__normal_iterator<CryptoPP::WindowSlider*, std::vector<CryptoPP::WindowSlider, std::allocator<CryptoPP::WindowSlider> > >, std::allocator<CryptoPP::WindowSlider> >(__gnu_cxx::__normal_iterator<CryptoPP::WindowSlider*, std::vector<CryptoPP::WindowSlider, std::allocator<CryptoPP::WindowSlider> > >, __gnu_cxx::__normal_iterator<CryptoPP::WindowSlider*, std::vector<CryptoPP::WindowSlider, std::allocator<CryptoPP::WindowSlider> > >, std::allocator<CryptoPP::WindowSlider>)
 T void std::_Destroy<__gnu_cxx::__normal_iterator<unsigned int*, std::vector<unsigned int, std::allocator<unsigned int> > >, std::allocator<unsigned int> >(__gnu_cxx::__normal_iterator<unsigned int*, std::vector<unsigned int, std::allocator<unsigned int> > >, __gnu_cxx::__normal_iterator<unsigned int*, std::vector<unsigned int, std::allocator<unsigned int> > >, std::allocator<unsigned int>)
 T void std::_Destroy<std::_Deque_iterator<unsigned int, unsigned int&, unsigned int*>, std::allocator<unsigned int> >(std::_Deque_iterator<unsigned int, unsigned int&, unsigned int*>, std::_Deque_iterator<unsigned int, unsigned int&, unsigned int*>, std::allocator<unsigned int>)
 T void std::_Destroy<std::_Deque_iterator<unsigned long long, unsigned long long&, unsigned long long*>, std::allocator<unsigned long long> >(std::_Deque_iterator<unsigned long long, unsigned long long&, unsigned long long*>, std::_Deque_iterator<unsigned long long, unsigned long long&, unsigned long long*>, std::allocator<unsigned long long>)
 T void std::_Destroy<std::vector<CryptoPP::Integer, std::allocator<CryptoPP::Integer> >*, std::allocator<std::vector<CryptoPP::Integer, std::allocator<CryptoPP::Integer> > > >(std::vector<CryptoPP::Integer, std::allocator<CryptoPP::Integer> >*, std::vector<CryptoPP::Integer, std::allocator<CryptoPP::Integer> >*, std::allocator<std::vector<CryptoPP::Integer, std::allocator<CryptoPP::Integer> > >)
 T void std::_Destroy<unsigned int*, std::allocator<unsigned int> >(unsigned int*, unsigned int*, std::allocator<unsigned int>)
 T void std::_Destroy<unsigned long long*, std::allocator<unsigned long long> >(unsigned long long*, unsigned long long*, std::allocator<unsigned long long>)
 T void std::__uninitialized_fill_n_a<CryptoPP::Integer*, unsigned long, CryptoPP::Integer, CryptoPP::Integer>(CryptoPP::Integer*, unsigned long, CryptoPP::Integer const&, std::allocator<CryptoPP::Integer>)
 T void std::__uninitialized_fill_n_a<__gnu_cxx::__normal_iterator<CryptoPP::Integer*, std::vector<CryptoPP::Integer, std::allocator<CryptoPP::Integer> > >, unsigned long, CryptoPP::Integer, CryptoPP::Integer>(__gnu_cxx::__normal_iterator<CryptoPP::Integer*, std::vector<CryptoPP::Integer, std::allocator<CryptoPP::Integer> > >, unsigned long, CryptoPP::Integer const&, std::allocator<CryptoPP::Integer>)
 T void std::__uninitialized_fill_n_a<__gnu_cxx::__normal_iterator<unsigned int*, std::vector<unsigned int, std::allocator<unsigned int> > >, unsigned long, unsigned int, unsigned int>(__gnu_cxx::__normal_iterator<unsigned int*, std::vector<unsigned int, std::allocator<unsigned int> > >, unsigned long, unsigned int const&, std::allocator<unsigned int>)
 T void std::__uninitialized_fill_n_a<std::vector<CryptoPP::Integer, std::allocator<CryptoPP::Integer> >*, unsigned long, std::vector<CryptoPP::Integer, std::allocator<CryptoPP::Integer> >, std::vector<CryptoPP::Integer, std::allocator<CryptoPP::Integer> > >(std::vector<CryptoPP::Integer, std::allocator<CryptoPP::Integer> >*, unsigned long, std::vector<CryptoPP::Integer, std::allocator<CryptoPP::Integer> > const&, std::allocator<std::vector<CryptoPP::Integer, std::allocator<CryptoPP::Integer> > >)
 T void std::__uninitialized_fill_n_a<unsigned int*, unsigned long, unsigned int, unsigned int>(unsigned int*, unsigned long, unsigned int const&, std::allocator<unsigned int>)
 T void std::__uninitialized_fill_n_aux<CryptoPP::Integer*, unsigned long, CryptoPP::Integer>(CryptoPP::Integer*, unsigned long, CryptoPP::Integer const&, __false_type)
 T void std::__uninitialized_fill_n_aux<__gnu_cxx::__normal_iterator<CryptoPP::Integer*, std::vector<CryptoPP::Integer, std::allocator<CryptoPP::Integer> > >, unsigned long, CryptoPP::Integer>(__gnu_cxx::__normal_iterator<CryptoPP::Integer*, std::vector<CryptoPP::Integer, std::allocator<CryptoPP::Integer> > >, unsigned long, CryptoPP::Integer const&, __false_type)
 T void std::__uninitialized_fill_n_aux<std::vector<CryptoPP::Integer, std::allocator<CryptoPP::Integer> >*, unsigned long, std::vector<CryptoPP::Integer, std::allocator<CryptoPP::Integer> > >(std::vector<CryptoPP::Integer, std::allocator<CryptoPP::Integer> >*, unsigned long, std::vector<CryptoPP::Integer, std::allocator<CryptoPP::Integer> > const&, __false_type)
 T void std::fill<__gnu_cxx::__normal_iterator<CryptoPP::Integer*, std::vector<CryptoPP::Integer, std::allocator<CryptoPP::Integer> > >, CryptoPP::Integer>(__gnu_cxx::__normal_iterator<CryptoPP::Integer*, std::vector<CryptoPP::Integer, std::allocator<CryptoPP::Integer> > >, __gnu_cxx::__normal_iterator<CryptoPP::Integer*, std::vector<CryptoPP::Integer, std::allocator<CryptoPP::Integer> > >, CryptoPP::Integer const&)
 T void std::fill<__gnu_cxx::__normal_iterator<unsigned int*, std::vector<unsigned int, std::allocator<unsigned int> > >, unsigned int>(__gnu_cxx::__normal_iterator<unsigned int*, std::vector<unsigned int, std::allocator<unsigned int> > >, __gnu_cxx::__normal_iterator<unsigned int*, std::vector<unsigned int, std::allocator<unsigned int> > >, unsigned int const&)
 T void std::fill<std::_Deque_iterator<unsigned int, unsigned int&, unsigned int*>, unsigned int>(std::_Deque_iterator<unsigned int, unsigned int&, unsigned int*>, std::_Deque_iterator<unsigned int, unsigned int&, unsigned int*>, unsigned int const&)
 T void std::fill<std::_Deque_iterator<unsigned long long, unsigned long long&, unsigned long long*>, unsigned long long>(std::_Deque_iterator<unsigned long long, unsigned long long&, unsigned long long*>, std::_Deque_iterator<unsigned long long, unsigned long long&, unsigned long long*>, unsigned long long const&)
 T void std::fill<unsigned int*, unsigned int>(unsigned int*, unsigned int*, unsigned int const&)
 T void std::fill<unsigned long long*, unsigned long long>(unsigned long long*, unsigned long long*, unsigned long long const&)
 ThreadGetCurrentId
 ThreadInterlockedAssignIf
 ThreadInterlockedAssignIf64
 ThreadInterlockedCompareExchangePointer
 ThreadInterlockedDecrement
 ThreadInterlockedExchange
 ThreadInterlockedExchangeAdd
 ThreadInterlockedExchangePointer
 ThreadInterlockedIncrement
 ThreadSleep
 Warning
 _DefaultRuneLocale
 _ExitOnFatalAssert
 _SpewInfo
 _SpewMessage
 _Unwind_Resume
 _Unwind_Resume_or_Rethrow
 __assert_rtn
 __cxa_allocate_exception
 __cxa_atexit
 __cxa_bad_typeid
 __cxa_begin_catch
 __cxa_call_unexpected
 __cxa_end_catch
 __cxa_free_exception
 __cxa_get_exception_ptr
 __cxa_guard_abort
 __cxa_guard_acquire
 __cxa_guard_release
 __cxa_pure_virtual
 __cxa_rethrow
 __cxa_throw
 __divdi3
 __dynamic_cast
 __error
 __fixunssfdi
 __gnu_cxx::__exchange_and_add(int volatile*, int)
 __gxx_personality_v0
 __maskrune
 __moddi3
 __stack_chk_fail
 __stack_chk_guard
 __stderrp
 __tolower
 __udivdi3
 __umoddi3
 abort
 acos
 acosf
 asctime
 asin
 atan
 atan2
 atan2f
 atof
 atoi
 b (anonymous namespace)::CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT_descriptor_
 b (anonymous namespace)::CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT_reflection_
 b (anonymous namespace)::CAttribute_DynamicRecipeComponent_descriptor_
 b (anonymous namespace)::CAttribute_DynamicRecipeComponent_reflection_
 b (anonymous namespace)::CAttribute_ItemSlotCriteria_descriptor_
 b (anonymous namespace)::CAttribute_ItemSlotCriteria_reflection_
 b (anonymous namespace)::CAttribute_String_descriptor_
 b (anonymous namespace)::CAttribute_String_reflection_
 b (anonymous namespace)::CAttribute_WorldItemPlacement_descriptor_
 b (anonymous namespace)::CAttribute_WorldItemPlacement_reflection_
 b (anonymous namespace)::CEconItemPreviewDataBlock_descriptor_
 b (anonymous namespace)::CEconItemPreviewDataBlock_reflection_
 b (anonymous namespace)::CGCMsgGC_PlayerDuckLeaderboard_IndividualUpdate_descriptor_
 b (anonymous namespace)::CGCMsgGC_PlayerDuckLeaderboard_IndividualUpdate_reflection_
 b (anonymous namespace)::CGCMsgGC_War_GlobalStatsResponse_SideScore_descriptor_
 b (anonymous namespace)::CGCMsgGC_War_GlobalStatsResponse_SideScore_reflection_
 b (anonymous namespace)::CGCMsgGC_War_GlobalStatsResponse_descriptor_
 b (anonymous namespace)::CGCMsgGC_War_GlobalStatsResponse_reflection_
 b (anonymous namespace)::CGCMsgGC_War_IndividualUpdate_descriptor_
 b (anonymous namespace)::CGCMsgGC_War_IndividualUpdate_reflection_
 b (anonymous namespace)::CGCMsgGC_War_JoinWar_descriptor_
 b (anonymous namespace)::CGCMsgGC_War_JoinWar_reflection_
 b (anonymous namespace)::CGCMsgGC_War_RequestGlobalStats_descriptor_
 b (anonymous namespace)::CGCMsgGC_War_RequestGlobalStats_reflection_
 b (anonymous namespace)::CGCMsgGetIPLocationResponse_descriptor_
 b (anonymous namespace)::CGCMsgGetIPLocationResponse_reflection_
 b (anonymous namespace)::CGCMsgGetIPLocation_descriptor_
 b (anonymous namespace)::CGCMsgGetIPLocation_reflection_
 b (anonymous namespace)::CGCMsgGetSystemStatsResponse_descriptor_
 b (anonymous namespace)::CGCMsgGetSystemStatsResponse_reflection_
 b (anonymous namespace)::CGCMsgGetSystemStats_descriptor_
 b (anonymous namespace)::CGCMsgGetSystemStats_reflection_
 b (anonymous namespace)::CGCMsgMemCachedDelete_descriptor_
 b (anonymous namespace)::CGCMsgMemCachedDelete_reflection_
 b (anonymous namespace)::CGCMsgMemCachedGetResponse_ValueTag_descriptor_
 b (anonymous namespace)::CGCMsgMemCachedGetResponse_ValueTag_reflection_
 b (anonymous namespace)::CGCMsgMemCachedGetResponse_descriptor_
 b (anonymous namespace)::CGCMsgMemCachedGetResponse_reflection_
 b (anonymous namespace)::CGCMsgMemCachedGet_descriptor_
 b (anonymous namespace)::CGCMsgMemCachedGet_reflection_
 b (anonymous namespace)::CGCMsgMemCachedSet_KeyPair_descriptor_
 b (anonymous namespace)::CGCMsgMemCachedSet_KeyPair_reflection_
 b (anonymous namespace)::CGCMsgMemCachedSet_descriptor_
 b (anonymous namespace)::CGCMsgMemCachedSet_reflection_
 b (anonymous namespace)::CGCMsgMemCachedStatsResponse_descriptor_
 b (anonymous namespace)::CGCMsgMemCachedStatsResponse_reflection_
 b (anonymous namespace)::CGCMsgMemCachedStats_descriptor_
 b (anonymous namespace)::CGCMsgMemCachedStats_reflection_
 b (anonymous namespace)::CGCMsgSQLStatsResponse_descriptor_
 b (anonymous namespace)::CGCMsgSQLStatsResponse_reflection_
 b (anonymous namespace)::CGCMsgSQLStats_descriptor_
 b (anonymous namespace)::CGCMsgSQLStats_reflection_
 b (anonymous namespace)::CGCMsgSystemStatsSchema_descriptor_
 b (anonymous namespace)::CGCMsgSystemStatsSchema_reflection_
 b (anonymous namespace)::CGCMsgTFHelloResponse_descriptor_
 b (anonymous namespace)::CGCMsgTFHelloResponse_reflection_
 b (anonymous namespace)::CGCMsgTFSyncEx_descriptor_
 b (anonymous namespace)::CGCMsgTFSyncEx_reflection_
 b (anonymous namespace)::CGCMsgTFSync_descriptor_
 b (anonymous namespace)::CGCMsgTFSync_reflection_
 b (anonymous namespace)::CGCMsg_WorldItemPlacement_Update_descriptor_
 b (anonymous namespace)::CGCMsg_WorldItemPlacement_Update_reflection_
 b (anonymous namespace)::CGCStorePurchaseInit_LineItem_descriptor_
 b (anonymous namespace)::CGCStorePurchaseInit_LineItem_reflection_
 b (anonymous namespace)::CGCSystemMsg_GetAccountDetails_Response_descriptor_
 b (anonymous namespace)::CGCSystemMsg_GetAccountDetails_Response_reflection_
 b (anonymous namespace)::CGCSystemMsg_GetAccountDetails_descriptor_
 b (anonymous namespace)::CGCSystemMsg_GetAccountDetails_reflection_
 b (anonymous namespace)::CGCSystemMsg_GetPurchaseTrust_Request_descriptor_
 b (anonymous namespace)::CGCSystemMsg_GetPurchaseTrust_Request_reflection_
 b (anonymous namespace)::CGCSystemMsg_GetPurchaseTrust_Response_descriptor_
 b (anonymous namespace)::CGCSystemMsg_GetPurchaseTrust_Response_reflection_
 b (anonymous namespace)::CGCToGCMsgMasterAck_Response_descriptor_
 b (anonymous namespace)::CGCToGCMsgMasterAck_Response_reflection_
 b (anonymous namespace)::CGCToGCMsgMasterAck_descriptor_
 b (anonymous namespace)::CGCToGCMsgMasterAck_reflection_
 b (anonymous namespace)::CGCToGCMsgMasterStartupComplete_GCInfo_descriptor_
 b (anonymous namespace)::CGCToGCMsgMasterStartupComplete_GCInfo_reflection_
 b (anonymous namespace)::CGCToGCMsgMasterStartupComplete_descriptor_
 b (anonymous namespace)::CGCToGCMsgMasterStartupComplete_reflection_
 b (anonymous namespace)::CGCToGCMsgRoutedReply_descriptor_
 b (anonymous namespace)::CGCToGCMsgRoutedReply_reflection_
 b (anonymous namespace)::CGCToGCMsgRouted_descriptor_
 b (anonymous namespace)::CGCToGCMsgRouted_reflection_
 b (anonymous namespace)::CIPLocationInfo_descriptor_
 b (anonymous namespace)::CIPLocationInfo_reflection_
 b (anonymous namespace)::CLobbyPendingPlayerReport_descriptor_
 b (anonymous namespace)::CLobbyPendingPlayerReport_reflection_
 b (anonymous namespace)::CMsgAMAddFreeLicenseResponse_descriptor_
 b (anonymous namespace)::CMsgAMAddFreeLicenseResponse_reflection_
 b (anonymous namespace)::CMsgAMAddFreeLicense_descriptor_
 b (anonymous namespace)::CMsgAMAddFreeLicense_reflection_
 b (anonymous namespace)::CMsgAMFindAccountsResponse_descriptor_
 b (anonymous namespace)::CMsgAMFindAccountsResponse_reflection_
 b (anonymous namespace)::CMsgAMFindAccounts_descriptor_
 b (anonymous namespace)::CMsgAMFindAccounts_reflection_
 b (anonymous namespace)::CMsgAMGetLicensesResponse_descriptor_
 b (anonymous namespace)::CMsgAMGetLicensesResponse_reflection_
 b (anonymous namespace)::CMsgAMGetLicenses_descriptor_
 b (anonymous namespace)::CMsgAMGetLicenses_reflection_
 b (anonymous namespace)::CMsgAMGetUserGameStatsResponse_Achievement_Blocks_descriptor_
 b (anonymous namespace)::CMsgAMGetUserGameStatsResponse_Achievement_Blocks_reflection_
 b (anonymous namespace)::CMsgAMGetUserGameStatsResponse_Stats_descriptor_
 b (anonymous namespace)::CMsgAMGetUserGameStatsResponse_Stats_reflection_
 b (anonymous namespace)::CMsgAMGetUserGameStatsResponse_descriptor_
 b (anonymous namespace)::CMsgAMGetUserGameStatsResponse_reflection_
 b (anonymous namespace)::CMsgAMGetUserGameStats_descriptor_
 b (anonymous namespace)::CMsgAMGetUserGameStats_reflection_
 b (anonymous namespace)::CMsgAMGrantGuestPasses2Response_descriptor_
 b (anonymous namespace)::CMsgAMGrantGuestPasses2Response_reflection_
 b (anonymous namespace)::CMsgAMGrantGuestPasses2_descriptor_
 b (anonymous namespace)::CMsgAMGrantGuestPasses2_reflection_
 b (anonymous namespace)::CMsgAMSendEmailResponse_descriptor_
 b (anonymous namespace)::CMsgAMSendEmailResponse_reflection_
 b (anonymous namespace)::CMsgAMSendEmail_PersonaNameReplacementToken_descriptor_
 b (anonymous namespace)::CMsgAMSendEmail_PersonaNameReplacementToken_reflection_
 b (anonymous namespace)::CMsgAMSendEmail_ReplacementToken_descriptor_
 b (anonymous namespace)::CMsgAMSendEmail_ReplacementToken_reflection_
 b (anonymous namespace)::CMsgAMSendEmail_descriptor_
 b (anonymous namespace)::CMsgAMSendEmail_reflection_
 b (anonymous namespace)::CMsgAcceptInviteResponse_descriptor_
 b (anonymous namespace)::CMsgAcceptInviteResponse_reflection_
 b (anonymous namespace)::CMsgAcceptInvite_descriptor_
 b (anonymous namespace)::CMsgAcceptInvite_reflection_
 b (anonymous namespace)::CMsgAcknowledgeXP_descriptor_
 b (anonymous namespace)::CMsgAcknowledgeXP_reflection_
 b (anonymous namespace)::CMsgAdjustItemEquippedState_descriptor_
 b (anonymous namespace)::CMsgAdjustItemEquippedState_reflection_
 b (anonymous namespace)::CMsgApplyAutograph_descriptor_
 b (anonymous namespace)::CMsgApplyAutograph_reflection_
 b (anonymous namespace)::CMsgApplyStrangeCountTransfer_descriptor_
 b (anonymous namespace)::CMsgApplyStrangeCountTransfer_reflection_
 b (anonymous namespace)::CMsgApplyStrangePart_descriptor_
 b (anonymous namespace)::CMsgApplyStrangePart_reflection_
 b (anonymous namespace)::CMsgApplyStrangeRestriction_descriptor_
 b (anonymous namespace)::CMsgApplyStrangeRestriction_reflection_
 b (anonymous namespace)::CMsgApplyToolToBaseItem_descriptor_
 b (anonymous namespace)::CMsgApplyToolToBaseItem_reflection_
 b (anonymous namespace)::CMsgApplyToolToItem_descriptor_
 b (anonymous namespace)::CMsgApplyToolToItem_reflection_
 b (anonymous namespace)::CMsgApplyUpgradeCard_descriptor_
 b (anonymous namespace)::CMsgApplyUpgradeCard_reflection_
 b (anonymous namespace)::CMsgCasualMatchmakingSearchCriteria_descriptor_
 b (anonymous namespace)::CMsgCasualMatchmakingSearchCriteria_reflection_
 b (anonymous namespace)::CMsgClientGoodbye_descriptor_
 b (anonymous namespace)::CMsgClientGoodbye_reflection_
 b (anonymous namespace)::CMsgClientHello_descriptor_
 b (anonymous namespace)::CMsgClientHello_reflection_
 b (anonymous namespace)::CMsgClientWelcome_descriptor_
 b (anonymous namespace)::CMsgClientWelcome_reflection_
 b (anonymous namespace)::CMsgConVarValue_descriptor_
 b (anonymous namespace)::CMsgConVarValue_reflection_
 b (anonymous namespace)::CMsgConnectionStatus_descriptor_
 b (anonymous namespace)::CMsgConnectionStatus_reflection_
 b (anonymous namespace)::CMsgConsumableExhausted_descriptor_
 b (anonymous namespace)::CMsgConsumableExhausted_reflection_
 b (anonymous namespace)::CMsgCraftCollectionUpgrade_descriptor_
 b (anonymous namespace)::CMsgCraftCollectionUpgrade_reflection_
 b (anonymous namespace)::CMsgCraftCommonStatClock_descriptor_
 b (anonymous namespace)::CMsgCraftCommonStatClock_reflection_
 b (anonymous namespace)::CMsgCraftHalloweenOffering_descriptor_
 b (anonymous namespace)::CMsgCraftHalloweenOffering_reflection_
 b (anonymous namespace)::CMsgCraftingResponse_descriptor_
 b (anonymous namespace)::CMsgCraftingResponse_reflection_
 b (anonymous namespace)::CMsgCreateOrUpdatePartyReply_descriptor_
 b (anonymous namespace)::CMsgCreateOrUpdatePartyReply_reflection_
 b (anonymous namespace)::CMsgCreateOrUpdateParty_descriptor_
 b (anonymous namespace)::CMsgCreateOrUpdateParty_reflection_
 b (anonymous namespace)::CMsgDeliverGiftResponseGiver_descriptor_
 b (anonymous namespace)::CMsgDeliverGiftResponseGiver_reflection_
 b (anonymous namespace)::CMsgDevDebugRollLootRequest_descriptor_
 b (anonymous namespace)::CMsgDevDebugRollLootRequest_reflection_
 b (anonymous namespace)::CMsgDevNewItemRequest_descriptor_
 b (anonymous namespace)::CMsgDevNewItemRequest_reflection_
 b (anonymous namespace)::CMsgEconPlayerStrangeCountAdjustment_CStrangeCountAdjustment_descriptor_
 b (anonymous namespace)::CMsgEconPlayerStrangeCountAdjustment_CStrangeCountAdjustment_reflection_
 b (anonymous namespace)::CMsgEconPlayerStrangeCountAdjustment_descriptor_
 b (anonymous namespace)::CMsgEconPlayerStrangeCountAdjustment_reflection_
 b (anonymous namespace)::CMsgExitMatchmaking_descriptor_
 b (anonymous namespace)::CMsgExitMatchmaking_reflection_
 b (anonymous namespace)::CMsgFulfillDynamicRecipeComponent_descriptor_
 b (anonymous namespace)::CMsgFulfillDynamicRecipeComponent_reflection_
 b (anonymous namespace)::CMsgGCBannedWordListRequest_descriptor_
 b (anonymous namespace)::CMsgGCBannedWordListRequest_reflection_
 b (anonymous namespace)::CMsgGCCasualCriteriaStatsResponse_DataCenterPopulation_descriptor_
 b (anonymous namespace)::CMsgGCCasualCriteriaStatsResponse_DataCenterPopulation_reflection_
 b (anonymous namespace)::CMsgGCCasualCriteriaStatsResponse_descriptor_
 b (anonymous namespace)::CMsgGCCasualCriteriaStatsResponse_reflection_
 b (anonymous namespace)::CMsgGCCheckClanMembership_Response_descriptor_
 b (anonymous namespace)::CMsgGCCheckClanMembership_Response_reflection_
 b (anonymous namespace)::CMsgGCCheckClanMembership_descriptor_
 b (anonymous namespace)::CMsgGCCheckClanMembership_reflection_
 b (anonymous namespace)::CMsgGCCheckFriendship_Response_descriptor_
 b (anonymous namespace)::CMsgGCCheckFriendship_Response_reflection_
 b (anonymous namespace)::CMsgGCCheckFriendship_descriptor_
 b (anonymous namespace)::CMsgGCCheckFriendship_reflection_
 b (anonymous namespace)::CMsgGCClientDisplayNotification_descriptor_
 b (anonymous namespace)::CMsgGCClientDisplayNotification_reflection_
 b (anonymous namespace)::CMsgGCClientMarketDataEntry_descriptor_
 b (anonymous namespace)::CMsgGCClientMarketDataEntry_reflection_
 b (anonymous namespace)::CMsgGCClientMarketDataRequest_descriptor_
 b (anonymous namespace)::CMsgGCClientMarketDataRequest_reflection_
 b (anonymous namespace)::CMsgGCClientMarketData_descriptor_
 b (anonymous namespace)::CMsgGCClientMarketData_reflection_
 b (anonymous namespace)::CMsgGCClientPing_descriptor_
 b (anonymous namespace)::CMsgGCClientPing_reflection_
 b (anonymous namespace)::CMsgGCCollectItem_descriptor_
 b (anonymous namespace)::CMsgGCCollectItem_reflection_
 b (anonymous namespace)::CMsgGCDataCenterPing_Update_PingEntry_descriptor_
 b (anonymous namespace)::CMsgGCDataCenterPing_Update_PingEntry_reflection_
 b (anonymous namespace)::CMsgGCDataCenterPing_Update_Status_descriptor_
 b (anonymous namespace)::CMsgGCDataCenterPing_Update_descriptor_
 b (anonymous namespace)::CMsgGCDataCenterPing_Update_reflection_
 b (anonymous namespace)::CMsgGCError_descriptor_
 b (anonymous namespace)::CMsgGCError_reflection_
 b (anonymous namespace)::CMsgGCGetCommandListResponse_descriptor_
 b (anonymous namespace)::CMsgGCGetCommandListResponse_reflection_
 b (anonymous namespace)::CMsgGCGetCommandList_descriptor_
 b (anonymous namespace)::CMsgGCGetCommandList_reflection_
 b (anonymous namespace)::CMsgGCGetEmailTemplateResponse_descriptor_
 b (anonymous namespace)::CMsgGCGetEmailTemplateResponse_reflection_
 b (anonymous namespace)::CMsgGCGetEmailTemplate_descriptor_
 b (anonymous namespace)::CMsgGCGetEmailTemplate_reflection_
 b (anonymous namespace)::CMsgGCGetPartnerAccountLink_Response_descriptor_
 b (anonymous namespace)::CMsgGCGetPartnerAccountLink_Response_reflection_
 b (anonymous namespace)::CMsgGCGetPartnerAccountLink_descriptor_
 b (anonymous namespace)::CMsgGCGetPartnerAccountLink_reflection_
 b (anonymous namespace)::CMsgGCGetPersonaNames_Response_PersonaName_descriptor_
 b (anonymous namespace)::CMsgGCGetPersonaNames_Response_PersonaName_reflection_
 b (anonymous namespace)::CMsgGCGetPersonaNames_Response_descriptor_
 b (anonymous namespace)::CMsgGCGetPersonaNames_Response_reflection_
 b (anonymous namespace)::CMsgGCGetPersonaNames_descriptor_
 b (anonymous namespace)::CMsgGCGetPersonaNames_reflection_
 b (anonymous namespace)::CMsgGCGiftedItems_descriptor_
 b (anonymous namespace)::CMsgGCGiftedItems_reflection_
 b (anonymous namespace)::CMsgGCHAccountLockStatusChange_descriptor_
 b (anonymous namespace)::CMsgGCHAccountLockStatusChange_reflection_
 b (anonymous namespace)::CMsgGCHAccountPhoneNumberChange_descriptor_
 b (anonymous namespace)::CMsgGCHAccountPhoneNumberChange_reflection_
 b (anonymous namespace)::CMsgGCHAccountTradeBanStatusChange_descriptor_
 b (anonymous namespace)::CMsgGCHAccountTradeBanStatusChange_reflection_
 b (anonymous namespace)::CMsgGCHAccountTwoFactorChange_descriptor_
 b (anonymous namespace)::CMsgGCHAccountTwoFactorChange_reflection_
 b (anonymous namespace)::CMsgGCHAccountVacStatusChange_descriptor_
 b (anonymous namespace)::CMsgGCHAccountVacStatusChange_reflection_
 b (anonymous namespace)::CMsgGCHUpdateSession_ExtraField_descriptor_
 b (anonymous namespace)::CMsgGCHUpdateSession_ExtraField_reflection_
 b (anonymous namespace)::CMsgGCHUpdateSession_descriptor_
 b (anonymous namespace)::CMsgGCHUpdateSession_reflection_
 b (anonymous namespace)::CMsgGCHVacVerificationChange_descriptor_
 b (anonymous namespace)::CMsgGCHVacVerificationChange_reflection_
 b (anonymous namespace)::CMsgGCIncrementKillCountResponse_descriptor_
 b (anonymous namespace)::CMsgGCIncrementKillCountResponse_reflection_
 b (anonymous namespace)::CMsgGCItemPreviewItemBoughtNotification_descriptor_
 b (anonymous namespace)::CMsgGCItemPreviewItemBoughtNotification_reflection_
 b (anonymous namespace)::CMsgGCMatchHistoryLoad_descriptor_
 b (anonymous namespace)::CMsgGCMatchHistoryLoad_reflection_
 b (anonymous namespace)::CMsgGCMsgMasterSetClientMsgRouting_Entry_descriptor_
 b (anonymous namespace)::CMsgGCMsgMasterSetClientMsgRouting_Entry_reflection_
 b (anonymous namespace)::CMsgGCMsgMasterSetClientMsgRouting_Response_descriptor_
 b (anonymous namespace)::CMsgGCMsgMasterSetClientMsgRouting_Response_reflection_
 b (anonymous namespace)::CMsgGCMsgMasterSetClientMsgRouting_descriptor_
 b (anonymous namespace)::CMsgGCMsgMasterSetClientMsgRouting_reflection_
 b (anonymous namespace)::CMsgGCMsgMasterSetDirectory_Response_descriptor_
 b (anonymous namespace)::CMsgGCMsgMasterSetDirectory_Response_reflection_
 b (anonymous namespace)::CMsgGCMsgMasterSetDirectory_SubGC_descriptor_
 b (anonymous namespace)::CMsgGCMsgMasterSetDirectory_SubGC_reflection_
 b (anonymous namespace)::CMsgGCMsgMasterSetDirectory_descriptor_
 b (anonymous namespace)::CMsgGCMsgMasterSetDirectory_reflection_
 b (anonymous namespace)::CMsgGCMsgMasterSetWebAPIRouting_Entry_descriptor_
 b (anonymous namespace)::CMsgGCMsgMasterSetWebAPIRouting_Entry_reflection_
 b (anonymous namespace)::CMsgGCMsgMasterSetWebAPIRouting_Response_descriptor_
 b (anonymous namespace)::CMsgGCMsgMasterSetWebAPIRouting_Response_reflection_
 b (anonymous namespace)::CMsgGCMsgMasterSetWebAPIRouting_descriptor_
 b (anonymous namespace)::CMsgGCMsgMasterSetWebAPIRouting_reflection_
 b (anonymous namespace)::CMsgGCMsgSetOptions_GCSQLVersion_descriptor_
 b (anonymous namespace)::CMsgGCMsgSetOptions_MessageRange_descriptor_
 b (anonymous namespace)::CMsgGCMsgSetOptions_MessageRange_reflection_
 b (anonymous namespace)::CMsgGCMsgSetOptions_Option_descriptor_
 b (anonymous namespace)::CMsgGCMsgSetOptions_descriptor_
 b (anonymous namespace)::CMsgGCMsgSetOptions_reflection_
 b (anonymous namespace)::CMsgGCMsgWebAPIJobRequestForwardResponse_descriptor_
 b (anonymous namespace)::CMsgGCMsgWebAPIJobRequestForwardResponse_reflection_
 b (anonymous namespace)::CMsgGCMultiplexMessage_descriptor_
 b (anonymous namespace)::CMsgGCMultiplexMessage_reflection_
 b (anonymous namespace)::CMsgGCNameItemNotification_descriptor_
 b (anonymous namespace)::CMsgGCNameItemNotification_reflection_
 b (anonymous namespace)::CMsgGCNotificationQueue_descriptor_
 b (anonymous namespace)::CMsgGCNotificationQueue_reflection_
 b (anonymous namespace)::CMsgGCNotification_NotificationType_descriptor_
 b (anonymous namespace)::CMsgGCNotification_descriptor_
 b (anonymous namespace)::CMsgGCNotification_reflection_
 b (anonymous namespace)::CMsgGCQuestComplete_Request_descriptor_
 b (anonymous namespace)::CMsgGCQuestComplete_Request_reflection_
 b (anonymous namespace)::CMsgGCQuestCompleted_descriptor_
 b (anonymous namespace)::CMsgGCQuestCompleted_reflection_
 b (anonymous namespace)::CMsgGCQuestDiscard_Request_descriptor_
 b (anonymous namespace)::CMsgGCQuestDiscard_Request_reflection_
 b (anonymous namespace)::CMsgGCQuestObjective_PointsChange_descriptor_
 b (anonymous namespace)::CMsgGCQuestObjective_PointsChange_reflection_
 b (anonymous namespace)::CMsgGCQuestObjective_Progress_descriptor_
 b (anonymous namespace)::CMsgGCQuestObjective_Progress_reflection_
 b (anonymous namespace)::CMsgGCQuestObjective_RequestLoanerItems_descriptor_
 b (anonymous namespace)::CMsgGCQuestObjective_RequestLoanerItems_reflection_
 b (anonymous namespace)::CMsgGCQuestObjective_RequestLoanerResponse_descriptor_
 b (anonymous namespace)::CMsgGCQuestObjective_RequestLoanerResponse_reflection_
 b (anonymous namespace)::CMsgGCRematchRequestResponse_descriptor_
 b (anonymous namespace)::CMsgGCRematchRequestResponse_reflection_
 b (anonymous namespace)::CMsgGCRematchRequest_PartyEntry_descriptor_
 b (anonymous namespace)::CMsgGCRematchRequest_PartyEntry_reflection_
 b (anonymous namespace)::CMsgGCRematchRequest_descriptor_
 b (anonymous namespace)::CMsgGCRematchRequest_reflection_
 b (anonymous namespace)::CMsgGCRemoveCustomizationAttributeSimple_descriptor_
 b (anonymous namespace)::CMsgGCRemoveCustomizationAttributeSimple_reflection_
 b (anonymous namespace)::CMsgGCRemoveStrangePart_descriptor_
 b (anonymous namespace)::CMsgGCRemoveStrangePart_reflection_
 b (anonymous namespace)::CMsgGCRemoveUpgradeCard_descriptor_
 b (anonymous namespace)::CMsgGCRemoveUpgradeCard_reflection_
 b (anonymous namespace)::CMsgGCReportAbuseResponse_descriptor_
 b (anonymous namespace)::CMsgGCReportAbuseResponse_reflection_
 b (anonymous namespace)::CMsgGCReportAbuse_descriptor_
 b (anonymous namespace)::CMsgGCReportAbuse_reflection_
 b (anonymous namespace)::CMsgGCRequestCasualCriteriaStats_descriptor_
 b (anonymous namespace)::CMsgGCRequestCasualCriteriaStats_reflection_
 b (anonymous namespace)::CMsgGCRequestStoreSalesDataResponse_Price_descriptor_
 b (anonymous namespace)::CMsgGCRequestStoreSalesDataResponse_Price_reflection_
 b (anonymous namespace)::CMsgGCRequestStoreSalesDataResponse_descriptor_
 b (anonymous namespace)::CMsgGCRequestStoreSalesDataResponse_reflection_
 b (anonymous namespace)::CMsgGCRequestStoreSalesDataUpToDateResponse_descriptor_
 b (anonymous namespace)::CMsgGCRequestStoreSalesDataUpToDateResponse_reflection_
 b (anonymous namespace)::CMsgGCRequestStoreSalesData_descriptor_
 b (anonymous namespace)::CMsgGCRequestStoreSalesData_reflection_
 b (anonymous namespace)::CMsgGCRequestSubGCSessionInfoResponse_descriptor_
 b (anonymous namespace)::CMsgGCRequestSubGCSessionInfoResponse_reflection_
 b (anonymous namespace)::CMsgGCRequestSubGCSessionInfo_descriptor_
 b (anonymous namespace)::CMsgGCRequestSubGCSessionInfo_reflection_
 b (anonymous namespace)::CMsgGCResetStrangeScores_descriptor_
 b (anonymous namespace)::CMsgGCResetStrangeScores_reflection_
 b (anonymous namespace)::CMsgGCRoutingInfo_RoutingMethod_descriptor_
 b (anonymous namespace)::CMsgGCRoutingInfo_descriptor_
 b (anonymous namespace)::CMsgGCRoutingInfo_reflection_
 b (anonymous namespace)::CMsgGCShowItemsPickedUp_descriptor_
 b (anonymous namespace)::CMsgGCShowItemsPickedUp_reflection_
 b (anonymous namespace)::CMsgGCShuffleCrateContents_descriptor_
 b (anonymous namespace)::CMsgGCShuffleCrateContents_reflection_
 b (anonymous namespace)::CMsgGCStorePurchaseCancelResponse_descriptor_
 b (anonymous namespace)::CMsgGCStorePurchaseCancelResponse_reflection_
 b (anonymous namespace)::CMsgGCStorePurchaseCancel_descriptor_
 b (anonymous namespace)::CMsgGCStorePurchaseCancel_reflection_
 b (anonymous namespace)::CMsgGCStorePurchaseFinalizeResponse_descriptor_
 b (anonymous namespace)::CMsgGCStorePurchaseFinalizeResponse_reflection_
 b (anonymous namespace)::CMsgGCStorePurchaseFinalize_descriptor_
 b (anonymous namespace)::CMsgGCStorePurchaseFinalize_reflection_
 b (anonymous namespace)::CMsgGCStorePurchaseInitResponse_descriptor_
 b (anonymous namespace)::CMsgGCStorePurchaseInitResponse_reflection_
 b (anonymous namespace)::CMsgGCStorePurchaseInit_descriptor_
 b (anonymous namespace)::CMsgGCStorePurchaseInit_reflection_
 b (anonymous namespace)::CMsgGCSurveyRequest_descriptor_
 b (anonymous namespace)::CMsgGCSurveyRequest_reflection_
 b (anonymous namespace)::CMsgGCSurveyResponse_descriptor_
 b (anonymous namespace)::CMsgGCSurveyResponse_reflection_
 b (anonymous namespace)::CMsgGCTFSpecificItemBroadcast_descriptor_
 b (anonymous namespace)::CMsgGCTFSpecificItemBroadcast_reflection_
 b (anonymous namespace)::CMsgGCToGCGetUserServerMembersResponse_descriptor_
 b (anonymous namespace)::CMsgGCToGCGetUserServerMembersResponse_reflection_
 b (anonymous namespace)::CMsgGCToGCGetUserServerMembers_descriptor_
 b (anonymous namespace)::CMsgGCToGCGetUserServerMembers_reflection_
 b (anonymous namespace)::CMsgGCToGCGetUserSessionServerResponse_descriptor_
 b (anonymous namespace)::CMsgGCToGCGetUserSessionServerResponse_reflection_
 b (anonymous namespace)::CMsgGCToGCGetUserSessionServer_descriptor_
 b (anonymous namespace)::CMsgGCToGCGetUserSessionServer_reflection_
 b (anonymous namespace)::CMsgGCToGCGrantSelfMadeItemToAccount_descriptor_
 b (anonymous namespace)::CMsgGCToGCGrantSelfMadeItemToAccount_reflection_
 b (anonymous namespace)::CMsgGCToGCIncrementRecruitmentLevel_descriptor_
 b (anonymous namespace)::CMsgGCToGCIncrementRecruitmentLevel_reflection_
 b (anonymous namespace)::CMsgGCToGCPingRequest_descriptor_
 b (anonymous namespace)::CMsgGCToGCPingRequest_reflection_
 b (anonymous namespace)::CMsgGCToGCPingResponse_descriptor_
 b (anonymous namespace)::CMsgGCToGCPingResponse_reflection_
 b (anonymous namespace)::CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions_descriptor_
 b (anonymous namespace)::CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions_reflection_
 b (anonymous namespace)::CMsgGCToGCSOCacheSubscribe_descriptor_
 b (anonymous namespace)::CMsgGCToGCSOCacheSubscribe_reflection_
 b (anonymous namespace)::CMsgGCToGCSOCacheUnsubscribe_descriptor_
 b (anonymous namespace)::CMsgGCToGCSOCacheUnsubscribe_reflection_
 b (anonymous namespace)::CMsgGCToGCThankedByNewUser_descriptor_
 b (anonymous namespace)::CMsgGCToGCThankedByNewUser_reflection_
 b (anonymous namespace)::CMsgGCUpdateSubGCSessionInfo_CMsgUpdate_descriptor_
 b (anonymous namespace)::CMsgGCUpdateSubGCSessionInfo_CMsgUpdate_reflection_
 b (anonymous namespace)::CMsgGCUpdateSubGCSessionInfo_descriptor_
 b (anonymous namespace)::CMsgGCUpdateSubGCSessionInfo_reflection_
 b (anonymous namespace)::CMsgGC_Client2GCEconPreviewDataBlockRequest_descriptor_
 b (anonymous namespace)::CMsgGC_Client2GCEconPreviewDataBlockRequest_reflection_
 b (anonymous namespace)::CMsgGC_Client2GCEconPreviewDataBlockResponse_descriptor_
 b (anonymous namespace)::CMsgGC_Client2GCEconPreviewDataBlockResponse_reflection_
 b (anonymous namespace)::CMsgGC_Client_UseServerModificationItem_Response_EServerModificationItemResponse_descriptor_
 b (anonymous namespace)::CMsgGC_Client_UseServerModificationItem_Response_descriptor_
 b (anonymous namespace)::CMsgGC_Client_UseServerModificationItem_Response_reflection_
 b (anonymous namespace)::CMsgGC_Client_UseServerModificationItem_descriptor_
 b (anonymous namespace)::CMsgGC_Client_UseServerModificationItem_reflection_
 b (anonymous namespace)::CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry_descriptor_
 b (anonymous namespace)::CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry_reflection_
 b (anonymous namespace)::CMsgGC_DailyCompetitiveStatsRollup_Response_descriptor_
 b (anonymous namespace)::CMsgGC_DailyCompetitiveStatsRollup_Response_reflection_
 b (anonymous namespace)::CMsgGC_DailyCompetitiveStatsRollup_descriptor_
 b (anonymous namespace)::CMsgGC_DailyCompetitiveStatsRollup_reflection_
 b (anonymous namespace)::CMsgGC_GameServer_AckPolicyResponse_descriptor_
 b (anonymous namespace)::CMsgGC_GameServer_AckPolicyResponse_reflection_
 b (anonymous namespace)::CMsgGC_GameServer_AckPolicy_descriptor_
 b (anonymous namespace)::CMsgGC_GameServer_AckPolicy_reflection_
 b (anonymous namespace)::CMsgGC_GameServer_AuthChallengeResponse_descriptor_
 b (anonymous namespace)::CMsgGC_GameServer_AuthChallengeResponse_reflection_
 b (anonymous namespace)::CMsgGC_GameServer_AuthChallenge_descriptor_
 b (anonymous namespace)::CMsgGC_GameServer_AuthChallenge_reflection_
 b (anonymous namespace)::CMsgGC_GameServer_AuthResult_descriptor_
 b (anonymous namespace)::CMsgGC_GameServer_AuthResult_reflection_
 b (anonymous namespace)::CMsgGC_GameServer_CreateIdentityResponse_EStatus_descriptor_
 b (anonymous namespace)::CMsgGC_GameServer_CreateIdentityResponse_descriptor_
 b (anonymous namespace)::CMsgGC_GameServer_CreateIdentityResponse_reflection_
 b (anonymous namespace)::CMsgGC_GameServer_CreateIdentity_descriptor_
 b (anonymous namespace)::CMsgGC_GameServer_CreateIdentity_reflection_
 b (anonymous namespace)::CMsgGC_GameServer_LevelInfo_descriptor_
 b (anonymous namespace)::CMsgGC_GameServer_LevelInfo_reflection_
 b (anonymous namespace)::CMsgGC_GameServer_ListResponse_GameServerIdentity_descriptor_
 b (anonymous namespace)::CMsgGC_GameServer_ListResponse_GameServerIdentity_reflection_
 b (anonymous namespace)::CMsgGC_GameServer_ListResponse_descriptor_
 b (anonymous namespace)::CMsgGC_GameServer_ListResponse_reflection_
 b (anonymous namespace)::CMsgGC_GameServer_List_descriptor_
 b (anonymous namespace)::CMsgGC_GameServer_List_reflection_
 b (anonymous namespace)::CMsgGC_GameServer_ResetIdentityResponse_descriptor_
 b (anonymous namespace)::CMsgGC_GameServer_ResetIdentityResponse_reflection_
 b (anonymous namespace)::CMsgGC_GameServer_ResetIdentity_descriptor_
 b (anonymous namespace)::CMsgGC_GameServer_ResetIdentity_reflection_
 b (anonymous namespace)::CMsgGC_GameServer_ServerModificationItemExpired_descriptor_
 b (anonymous namespace)::CMsgGC_GameServer_ServerModificationItemExpired_reflection_
 b (anonymous namespace)::CMsgGC_GameServer_ServerModificationItem_descriptor_
 b (anonymous namespace)::CMsgGC_GameServer_ServerModificationItem_reflection_
 b (anonymous namespace)::CMsgGC_GameServer_UseServerModificationItem_Response_EServerModificationItemServerResponse_descriptor_
 b (anonymous namespace)::CMsgGC_GameServer_UseServerModificationItem_Response_descriptor_
 b (anonymous namespace)::CMsgGC_GameServer_UseServerModificationItem_Response_reflection_
 b (anonymous namespace)::CMsgGC_GameServer_UseServerModificationItem_descriptor_
 b (anonymous namespace)::CMsgGC_GameServer_UseServerModificationItem_reflection_
 b (anonymous namespace)::CMsgGC_Halloween_GrantItemResponse_descriptor_
 b (anonymous namespace)::CMsgGC_Halloween_GrantItemResponse_reflection_
 b (anonymous namespace)::CMsgGC_Halloween_GrantItem_descriptor_
 b (anonymous namespace)::CMsgGC_Halloween_GrantItem_reflection_
 b (anonymous namespace)::CMsgGC_Halloween_ItemClaimed_descriptor_
 b (anonymous namespace)::CMsgGC_Halloween_ItemClaimed_reflection_
 b (anonymous namespace)::CMsgGC_Halloween_ReservedItem_descriptor_
 b (anonymous namespace)::CMsgGC_Halloween_ReservedItem_reflection_
 b (anonymous namespace)::CMsgGC_KickPlayerFromLobby_descriptor_
 b (anonymous namespace)::CMsgGC_KickPlayerFromLobby_reflection_
 b (anonymous namespace)::CMsgGC_Match_ResultResponse_descriptor_
 b (anonymous namespace)::CMsgGC_Match_ResultResponse_reflection_
 b (anonymous namespace)::CMsgGC_Match_Result_Player_descriptor_
 b (anonymous namespace)::CMsgGC_Match_Result_Player_reflection_
 b (anonymous namespace)::CMsgGC_Match_Result_Status_descriptor_
 b (anonymous namespace)::CMsgGC_Match_Result_descriptor_
 b (anonymous namespace)::CMsgGC_Match_Result_reflection_
 b (anonymous namespace)::CMsgGC_PickupItemEligibility_QueryResponse_descriptor_
 b (anonymous namespace)::CMsgGC_PickupItemEligibility_QueryResponse_reflection_
 b (anonymous namespace)::CMsgGC_PickupItemEligibility_Query_descriptor_
 b (anonymous namespace)::CMsgGC_PickupItemEligibility_Query_reflection_
 b (anonymous namespace)::CMsgGC_ReportPlayer_EReason_descriptor_
 b (anonymous namespace)::CMsgGC_ReportPlayer_descriptor_
 b (anonymous namespace)::CMsgGC_ReportPlayer_reflection_
 b (anonymous namespace)::CMsgGC_TFVoteKickPlayerRequest_descriptor_
 b (anonymous namespace)::CMsgGC_TFVoteKickPlayerRequest_reflection_
 b (anonymous namespace)::CMsgGC_VoteKickPlayerRequestResponse_descriptor_
 b (anonymous namespace)::CMsgGC_VoteKickPlayerRequestResponse_reflection_
 b (anonymous namespace)::CMsgGameServerKickingLobbyResponse_descriptor_
 b (anonymous namespace)::CMsgGameServerKickingLobbyResponse_reflection_
 b (anonymous namespace)::CMsgGameServerKickingLobby_descriptor_
 b (anonymous namespace)::CMsgGameServerKickingLobby_reflection_
 b (anonymous namespace)::CMsgGameServerMatchmakingStatus_Event_descriptor_
 b (anonymous namespace)::CMsgGameServerMatchmakingStatus_PlayerConnectState_descriptor_
 b (anonymous namespace)::CMsgGameServerMatchmakingStatus_Player_descriptor_
 b (anonymous namespace)::CMsgGameServerMatchmakingStatus_Player_reflection_
 b (anonymous namespace)::CMsgGameServerMatchmakingStatus_descriptor_
 b (anonymous namespace)::CMsgGameServerMatchmakingStatus_reflection_
 b (anonymous namespace)::CMsgHalloween_Merasmus2012_descriptor_
 b (anonymous namespace)::CMsgHalloween_Merasmus2012_reflection_
 b (anonymous namespace)::CMsgHalloween_ServerBossEvent_descriptor_
 b (anonymous namespace)::CMsgHalloween_ServerBossEvent_reflection_
 b (anonymous namespace)::CMsgHttpRequest_QueryParam_descriptor_
 b (anonymous namespace)::CMsgHttpRequest_QueryParam_reflection_
 b (anonymous namespace)::CMsgHttpRequest_RequestHeader_descriptor_
 b (anonymous namespace)::CMsgHttpRequest_RequestHeader_reflection_
 b (anonymous namespace)::CMsgHttpRequest_descriptor_
 b (anonymous namespace)::CMsgHttpRequest_reflection_
 b (anonymous namespace)::CMsgHttpResponse_ResponseHeader_descriptor_
 b (anonymous namespace)::CMsgHttpResponse_ResponseHeader_reflection_
 b (anonymous namespace)::CMsgHttpResponse_descriptor_
 b (anonymous namespace)::CMsgHttpResponse_reflection_
 b (anonymous namespace)::CMsgIncrementKillCountAttribute_Multiple_descriptor_
 b (anonymous namespace)::CMsgIncrementKillCountAttribute_Multiple_reflection_
 b (anonymous namespace)::CMsgIncrementKillCountAttribute_descriptor_
 b (anonymous namespace)::CMsgIncrementKillCountAttribute_reflection_
 b (anonymous namespace)::CMsgInvitationCreated_descriptor_
 b (anonymous namespace)::CMsgInvitationCreated_reflection_
 b (anonymous namespace)::CMsgInviteToParty_descriptor_
 b (anonymous namespace)::CMsgInviteToParty_reflection_
 b (anonymous namespace)::CMsgItemAcknowledged_descriptor_
 b (anonymous namespace)::CMsgItemAcknowledged_reflection_
 b (anonymous namespace)::CMsgKickFromParty_descriptor_
 b (anonymous namespace)::CMsgKickFromParty_reflection_
 b (anonymous namespace)::CMsgKickedFromMatchmakingQueue_descriptor_
 b (anonymous namespace)::CMsgKickedFromMatchmakingQueue_reflection_
 b (anonymous namespace)::CMsgLANServerAvailable_descriptor_
 b (anonymous namespace)::CMsgLANServerAvailable_reflection_
 b (anonymous namespace)::CMsgLeaveGameAndPrepareToJoinParty_descriptor_
 b (anonymous namespace)::CMsgLeaveGameAndPrepareToJoinParty_reflection_
 b (anonymous namespace)::CMsgLeaveParty_descriptor_
 b (anonymous namespace)::CMsgLeaveParty_reflection_
 b (anonymous namespace)::CMsgLookupMultipleAccountNamesResponse_Account_descriptor_
 b (anonymous namespace)::CMsgLookupMultipleAccountNamesResponse_Account_reflection_
 b (anonymous namespace)::CMsgLookupMultipleAccountNamesResponse_descriptor_
 b (anonymous namespace)::CMsgLookupMultipleAccountNamesResponse_reflection_
 b (anonymous namespace)::CMsgLookupMultipleAccountNames_descriptor_
 b (anonymous namespace)::CMsgLookupMultipleAccountNames_reflection_
 b (anonymous namespace)::CMsgMatchSearchCriteria_descriptor_
 b (anonymous namespace)::CMsgMatchSearchCriteria_reflection_
 b (anonymous namespace)::CMsgMatchmakingProgress_descriptor_
 b (anonymous namespace)::CMsgMatchmakingProgress_reflection_
 b (anonymous namespace)::CMsgMatchmakingSearchCountRequest_descriptor_
 b (anonymous namespace)::CMsgMatchmakingSearchCountRequest_reflection_
 b (anonymous namespace)::CMsgMatchmakingSearchCountResponse_descriptor_
 b (anonymous namespace)::CMsgMatchmakingSearchCountResponse_reflection_
 b (anonymous namespace)::CMsgMvMMannUpVictoryReply_descriptor_
 b (anonymous namespace)::CMsgMvMMannUpVictoryReply_reflection_
 b (anonymous namespace)::CMsgMvMVictoryInfo_GrantReason_descriptor_
 b (anonymous namespace)::CMsgMvMVictoryInfo_Item_descriptor_
 b (anonymous namespace)::CMsgMvMVictoryInfo_Item_reflection_
 b (anonymous namespace)::CMsgMvMVictoryInfo_Player_descriptor_
 b (anonymous namespace)::CMsgMvMVictoryInfo_Player_reflection_
 b (anonymous namespace)::CMsgMvMVictoryInfo_descriptor_
 b (anonymous namespace)::CMsgMvMVictoryInfo_reflection_
 b (anonymous namespace)::CMsgMvMVictory_Player_descriptor_
 b (anonymous namespace)::CMsgMvMVictory_Player_reflection_
 b (anonymous namespace)::CMsgMvMVictory_descriptor_
 b (anonymous namespace)::CMsgMvMVictory_reflection_
 b (anonymous namespace)::CMsgNotificationAcknowledgeReply_descriptor_
 b (anonymous namespace)::CMsgNotificationAcknowledgeReply_reflection_
 b (anonymous namespace)::CMsgNotificationAcknowledge_descriptor_
 b (anonymous namespace)::CMsgNotificationAcknowledge_reflection_
 b (anonymous namespace)::CMsgNotificationOfSuspiciousActivity_MultipleGameInstances_descriptor_
 b (anonymous namespace)::CMsgNotificationOfSuspiciousActivity_MultipleGameInstances_reflection_
 b (anonymous namespace)::CMsgNotificationOfSuspiciousActivity_descriptor_
 b (anonymous namespace)::CMsgNotificationOfSuspiciousActivity_reflection_
 b (anonymous namespace)::CMsgNotifyWatchdog_descriptor_
 b (anonymous namespace)::CMsgNotifyWatchdog_reflection_
 b (anonymous namespace)::CMsgPackageLicense_descriptor_
 b (anonymous namespace)::CMsgPackageLicense_reflection_
 b (anonymous namespace)::CMsgPartyInviteResponse_descriptor_
 b (anonymous namespace)::CMsgPartyInviteResponse_reflection_
 b (anonymous namespace)::CMsgPlayerLeftMatchResponse_descriptor_
 b (anonymous namespace)::CMsgPlayerLeftMatchResponse_reflection_
 b (anonymous namespace)::CMsgPlayerLeftMatch_descriptor_
 b (anonymous namespace)::CMsgPlayerLeftMatch_reflection_
 b (anonymous namespace)::CMsgProtoBufHeader_descriptor_
 b (anonymous namespace)::CMsgProtoBufHeader_reflection_
 b (anonymous namespace)::CMsgReadyUp_descriptor_
 b (anonymous namespace)::CMsgReadyUp_reflection_
 b (anonymous namespace)::CMsgRecipeComponent_descriptor_
 b (anonymous namespace)::CMsgRecipeComponent_reflection_
 b (anonymous namespace)::CMsgReplaySubmitContestEntryResponse_descriptor_
 b (anonymous namespace)::CMsgReplaySubmitContestEntryResponse_reflection_
 b (anonymous namespace)::CMsgReplaySubmitContestEntry_descriptor_
 b (anonymous namespace)::CMsgReplaySubmitContestEntry_reflection_
 b (anonymous namespace)::CMsgReplayUploadedToYouTube_descriptor_
 b (anonymous namespace)::CMsgReplayUploadedToYouTube_reflection_
 b (anonymous namespace)::CMsgReplicateConVars_descriptor_
 b (anonymous namespace)::CMsgReplicateConVars_reflection_
 b (anonymous namespace)::CMsgRequestInventoryRefresh_descriptor_
 b (anonymous namespace)::CMsgRequestInventoryRefresh_reflection_
 b (anonymous namespace)::CMsgRequestItemPurgatory_FinalizePurchaseResponse_descriptor_
 b (anonymous namespace)::CMsgRequestItemPurgatory_FinalizePurchaseResponse_reflection_
 b (anonymous namespace)::CMsgRequestItemPurgatory_FinalizePurchase_descriptor_
 b (anonymous namespace)::CMsgRequestItemPurgatory_FinalizePurchase_reflection_
 b (anonymous namespace)::CMsgRequestItemPurgatory_RefundPurchaseResponse_descriptor_
 b (anonymous namespace)::CMsgRequestItemPurgatory_RefundPurchaseResponse_reflection_
 b (anonymous namespace)::CMsgRequestItemPurgatory_RefundPurchase_descriptor_
 b (anonymous namespace)::CMsgRequestItemPurgatory_RefundPurchase_reflection_
 b (anonymous namespace)::CMsgSOCacheHaveVersion_descriptor_
 b (anonymous namespace)::CMsgSOCacheHaveVersion_reflection_
 b (anonymous namespace)::CMsgSOCacheSubscribedUpToDate_descriptor_
 b (anonymous namespace)::CMsgSOCacheSubscribedUpToDate_reflection_
 b (anonymous namespace)::CMsgSOCacheSubscribed_SubscribedType_descriptor_
 b (anonymous namespace)::CMsgSOCacheSubscribed_SubscribedType_reflection_
 b (anonymous namespace)::CMsgSOCacheSubscribed_descriptor_
 b (anonymous namespace)::CMsgSOCacheSubscribed_reflection_
 b (anonymous namespace)::CMsgSOCacheSubscriptionCheck_descriptor_
 b (anonymous namespace)::CMsgSOCacheSubscriptionCheck_reflection_
 b (anonymous namespace)::CMsgSOCacheSubscriptionRefresh_descriptor_
 b (anonymous namespace)::CMsgSOCacheSubscriptionRefresh_reflection_
 b (anonymous namespace)::CMsgSOCacheUnsubscribed_descriptor_
 b (anonymous namespace)::CMsgSOCacheUnsubscribed_reflection_
 b (anonymous namespace)::CMsgSOCacheVersion_descriptor_
 b (anonymous namespace)::CMsgSOCacheVersion_reflection_
 b (anonymous namespace)::CMsgSOIDOwner_descriptor_
 b (anonymous namespace)::CMsgSOIDOwner_reflection_
 b (anonymous namespace)::CMsgSOMultipleObjects_SingleObject_descriptor_
 b (anonymous namespace)::CMsgSOMultipleObjects_SingleObject_reflection_
 b (anonymous namespace)::CMsgSOMultipleObjects_descriptor_
 b (anonymous namespace)::CMsgSOMultipleObjects_reflection_
 b (anonymous namespace)::CMsgSOSingleObject_descriptor_
 b (anonymous namespace)::CMsgSOSingleObject_reflection_
 b (anonymous namespace)::CMsgSaxxyAwarded_descriptor_
 b (anonymous namespace)::CMsgSaxxyAwarded_reflection_
 b (anonymous namespace)::CMsgSelectPresetForClass_descriptor_
 b (anonymous namespace)::CMsgSelectPresetForClass_reflection_
 b (anonymous namespace)::CMsgServerAvailable_descriptor_
 b (anonymous namespace)::CMsgServerAvailable_reflection_
 b (anonymous namespace)::CMsgServerGoodbye_descriptor_
 b (anonymous namespace)::CMsgServerGoodbye_reflection_
 b (anonymous namespace)::CMsgServerHello_descriptor_
 b (anonymous namespace)::CMsgServerHello_reflection_
 b (anonymous namespace)::CMsgServerWelcome_descriptor_
 b (anonymous namespace)::CMsgServerWelcome_reflection_
 b (anonymous namespace)::CMsgSetHatEffectUseHeadOrigin_descriptor_
 b (anonymous namespace)::CMsgSetHatEffectUseHeadOrigin_reflection_
 b (anonymous namespace)::CMsgSetItemEffectVerticalOffset_descriptor_
 b (anonymous namespace)::CMsgSetItemEffectVerticalOffset_reflection_
 b (anonymous namespace)::CMsgSetItemPositions_ItemPosition_descriptor_
 b (anonymous namespace)::CMsgSetItemPositions_ItemPosition_reflection_
 b (anonymous namespace)::CMsgSetItemPositions_descriptor_
 b (anonymous namespace)::CMsgSetItemPositions_reflection_
 b (anonymous namespace)::CMsgSetItemSlotAttribute_descriptor_
 b (anonymous namespace)::CMsgSetItemSlotAttribute_reflection_
 b (anonymous namespace)::CMsgSetPresetItemPosition_descriptor_
 b (anonymous namespace)::CMsgSetPresetItemPosition_reflection_
 b (anonymous namespace)::CMsgSortItems_descriptor_
 b (anonymous namespace)::CMsgSortItems_reflection_
 b (anonymous namespace)::CMsgStoreGetUserDataResponse_descriptor_
 b (anonymous namespace)::CMsgStoreGetUserDataResponse_reflection_
 b (anonymous namespace)::CMsgStoreGetUserData_descriptor_
 b (anonymous namespace)::CMsgStoreGetUserData_reflection_
 b (anonymous namespace)::CMsgSystemBroadcast_descriptor_
 b (anonymous namespace)::CMsgSystemBroadcast_reflection_
 b (anonymous namespace)::CMsgTFClientInit_descriptor_
 b (anonymous namespace)::CMsgTFClientInit_reflection_
 b (anonymous namespace)::CMsgTFCoaching_AddToCoaches_descriptor_
 b (anonymous namespace)::CMsgTFCoaching_AddToCoaches_reflection_
 b (anonymous namespace)::CMsgTFCoaching_AskCoachResponse_descriptor_
 b (anonymous namespace)::CMsgTFCoaching_AskCoachResponse_reflection_
 b (anonymous namespace)::CMsgTFCoaching_AskCoach_descriptor_
 b (anonymous namespace)::CMsgTFCoaching_AskCoach_reflection_
 b (anonymous namespace)::CMsgTFCoaching_CoachJoinGame_descriptor_
 b (anonymous namespace)::CMsgTFCoaching_CoachJoinGame_reflection_
 b (anonymous namespace)::CMsgTFCoaching_CoachJoined_descriptor_
 b (anonymous namespace)::CMsgTFCoaching_CoachJoined_reflection_
 b (anonymous namespace)::CMsgTFCoaching_CoachJoining_descriptor_
 b (anonymous namespace)::CMsgTFCoaching_CoachJoining_reflection_
 b (anonymous namespace)::CMsgTFCoaching_FindCoachResponse_descriptor_
 b (anonymous namespace)::CMsgTFCoaching_FindCoachResponse_reflection_
 b (anonymous namespace)::CMsgTFCoaching_FindCoach_descriptor_
 b (anonymous namespace)::CMsgTFCoaching_FindCoach_reflection_
 b (anonymous namespace)::CMsgTFCoaching_LikeCurrentCoach_descriptor_
 b (anonymous namespace)::CMsgTFCoaching_LikeCurrentCoach_reflection_
 b (anonymous namespace)::CMsgTFCoaching_RemoveCurrentCoach_descriptor_
 b (anonymous namespace)::CMsgTFCoaching_RemoveCurrentCoach_reflection_
 b (anonymous namespace)::CMsgTFCoaching_RemoveFromCoaches_descriptor_
 b (anonymous namespace)::CMsgTFCoaching_RemoveFromCoaches_reflection_
 b (anonymous namespace)::CMsgTFFreeTrialChooseMostHelpfulFriend_descriptor_
 b (anonymous namespace)::CMsgTFFreeTrialChooseMostHelpfulFriend_reflection_
 b (anonymous namespace)::CMsgTFFreeTrialConvertedToPremium_descriptor_
 b (anonymous namespace)::CMsgTFFreeTrialConvertedToPremium_reflection_
 b (anonymous namespace)::CMsgTFGoldenWrenchBroadcast_descriptor_
 b (anonymous namespace)::CMsgTFGoldenWrenchBroadcast_reflection_
 b (anonymous namespace)::CMsgTFJoinChatChannelResponse_ChatMember_descriptor_
 b (anonymous namespace)::CMsgTFJoinChatChannelResponse_ChatMember_reflection_
 b (anonymous namespace)::CMsgTFJoinChatChannelResponse_descriptor_
 b (anonymous namespace)::CMsgTFJoinChatChannelResponse_reflection_
 b (anonymous namespace)::CMsgTFJoinChatChannel_descriptor_
 b (anonymous namespace)::CMsgTFJoinChatChannel_reflection_
 b (anonymous namespace)::CMsgTFLeaveChatChannel_descriptor_
 b (anonymous namespace)::CMsgTFLeaveChatChannel_reflection_
 b (anonymous namespace)::CMsgTFOtherJoinedChatChannel_descriptor_
 b (anonymous namespace)::CMsgTFOtherJoinedChatChannel_reflection_
 b (anonymous namespace)::CMsgTFOtherLeftChatChannel_descriptor_
 b (anonymous namespace)::CMsgTFOtherLeftChatChannel_reflection_
 b (anonymous namespace)::CMsgTFQuickplay_PlayerJoining_descriptor_
 b (anonymous namespace)::CMsgTFQuickplay_PlayerJoining_reflection_
 b (anonymous namespace)::CMsgTFQuickplay_ScoreServersResponse_ServerInfo_descriptor_
 b (anonymous namespace)::CMsgTFQuickplay_ScoreServersResponse_ServerInfo_reflection_
 b (anonymous namespace)::CMsgTFQuickplay_ScoreServersResponse_descriptor_
 b (anonymous namespace)::CMsgTFQuickplay_ScoreServersResponse_reflection_
 b (anonymous namespace)::CMsgTFQuickplay_ScoreServers_ServerInfo_descriptor_
 b (anonymous namespace)::CMsgTFQuickplay_ScoreServers_ServerInfo_reflection_
 b (anonymous namespace)::CMsgTFQuickplay_ScoreServers_descriptor_
 b (anonymous namespace)::CMsgTFQuickplay_ScoreServers_reflection_
 b (anonymous namespace)::CMsgTFRequestChatChannelListResponse_ChatChannel_descriptor_
 b (anonymous namespace)::CMsgTFRequestChatChannelListResponse_ChatChannel_reflection_
 b (anonymous namespace)::CMsgTFRequestChatChannelListResponse_descriptor_
 b (anonymous namespace)::CMsgTFRequestChatChannelListResponse_reflection_
 b (anonymous namespace)::CMsgTFRequestChatChannelList_descriptor_
 b (anonymous namespace)::CMsgTFRequestChatChannelList_reflection_
 b (anonymous namespace)::CMsgTFRequestDefaultChatChannelResponse_descriptor_
 b (anonymous namespace)::CMsgTFRequestDefaultChatChannelResponse_reflection_
 b (anonymous namespace)::CMsgTFRequestDefaultChatChannel_descriptor_
 b (anonymous namespace)::CMsgTFRequestDefaultChatChannel_reflection_
 b (anonymous namespace)::CMsgTFRequestTF2FriendsResponse_descriptor_
 b (anonymous namespace)::CMsgTFRequestTF2FriendsResponse_reflection_
 b (anonymous namespace)::CMsgTFRequestTF2Friends_descriptor_
 b (anonymous namespace)::CMsgTFRequestTF2Friends_reflection_
 b (anonymous namespace)::CMsgTFSaxxyBroadcast_descriptor_
 b (anonymous namespace)::CMsgTFSaxxyBroadcast_reflection_
 b (anonymous namespace)::CMsgTFThankedBySomeone_descriptor_
 b (anonymous namespace)::CMsgTFThankedBySomeone_reflection_
 b (anonymous namespace)::CMsgTFThankedSomeone_descriptor_
 b (anonymous namespace)::CMsgTFThankedSomeone_reflection_
 b (anonymous namespace)::CMsgTFVoteKickBanPlayerResult_descriptor_
 b (anonymous namespace)::CMsgTFVoteKickBanPlayerResult_reflection_
 b (anonymous namespace)::CMsgTFVoteKickBanPlayer_descriptor_
 b (anonymous namespace)::CMsgTFVoteKickBanPlayer_reflection_
 b (anonymous namespace)::CMsgTFWorldStatus_descriptor_
 b (anonymous namespace)::CMsgTFWorldStatus_reflection_
 b (anonymous namespace)::CMsgTFXPSourceBreakdown_descriptor_
 b (anonymous namespace)::CMsgTFXPSourceBreakdown_reflection_
 b (anonymous namespace)::CMsgTFXPSource_XPSourceType_descriptor_
 b (anonymous namespace)::CMsgTFXPSource_descriptor_
 b (anonymous namespace)::CMsgTFXPSource_reflection_
 b (anonymous namespace)::CMsgTrackUniquePlayerPairEvent_descriptor_
 b (anonymous namespace)::CMsgTrackUniquePlayerPairEvent_reflection_
 b (anonymous namespace)::CMsgUpdateHalloweenMerasmusLootLevel_Player_descriptor_
 b (anonymous namespace)::CMsgUpdateHalloweenMerasmusLootLevel_Player_reflection_
 b (anonymous namespace)::CMsgUpdateHalloweenMerasmusLootLevel_descriptor_
 b (anonymous namespace)::CMsgUpdateHalloweenMerasmusLootLevel_reflection_
 b (anonymous namespace)::CMsgUpdateItemSchema_descriptor_
 b (anonymous namespace)::CMsgUpdateItemSchema_reflection_
 b (anonymous namespace)::CMsgUpdatePeriodicEvent_descriptor_
 b (anonymous namespace)::CMsgUpdatePeriodicEvent_reflection_
 b (anonymous namespace)::CMsgUseItem_descriptor_
 b (anonymous namespace)::CMsgUseItem_reflection_
 b (anonymous namespace)::CMsgWebAPIKey_descriptor_
 b (anonymous namespace)::CMsgWebAPIKey_reflection_
 b (anonymous namespace)::CMsgWebAPIRequest_descriptor_
 b (anonymous namespace)::CMsgWebAPIRequest_reflection_
 b (anonymous namespace)::CReplayCachedContestData_descriptor_
 b (anonymous namespace)::CReplayCachedContestData_reflection_
 b (anonymous namespace)::CSOClassPresetClientData_descriptor_
 b (anonymous namespace)::CSOClassPresetClientData_reflection_
 b (anonymous namespace)::CSOEconClaimCode_descriptor_
 b (anonymous namespace)::CSOEconClaimCode_reflection_
 b (anonymous namespace)::CSOEconGameAccountClient_descriptor_
 b (anonymous namespace)::CSOEconGameAccountClient_reflection_
 b (anonymous namespace)::CSOEconGameAccountForGameServers_descriptor_
 b (anonymous namespace)::CSOEconGameAccountForGameServers_reflection_
 b (anonymous namespace)::CSOEconItemAttribute_descriptor_
 b (anonymous namespace)::CSOEconItemAttribute_reflection_
 b (anonymous namespace)::CSOEconItemEquipped_descriptor_
 b (anonymous namespace)::CSOEconItemEquipped_reflection_
 b (anonymous namespace)::CSOEconItemPresetInstance_descriptor_
 b (anonymous namespace)::CSOEconItemPresetInstance_reflection_
 b (anonymous namespace)::CSOEconItem_descriptor_
 b (anonymous namespace)::CSOEconItem_reflection_
 b (anonymous namespace)::CSOItemCriteriaCondition_descriptor_
 b (anonymous namespace)::CSOItemCriteriaCondition_reflection_
 b (anonymous namespace)::CSOItemCriteria_descriptor_
 b (anonymous namespace)::CSOItemCriteria_reflection_
 b (anonymous namespace)::CSOItemRecipe_descriptor_
 b (anonymous namespace)::CSOItemRecipe_reflection_
 b (anonymous namespace)::CSOLobbyInvite_descriptor_
 b (anonymous namespace)::CSOLobbyInvite_reflection_
 b (anonymous namespace)::CSOPartyInvite_descriptor_
 b (anonymous namespace)::CSOPartyInvite_reflection_
 b (anonymous namespace)::CSOTFDuelSummary_descriptor_
 b (anonymous namespace)::CSOTFDuelSummary_reflection_
 b (anonymous namespace)::CSOTFGameServerLobby_LobbyType_descriptor_
 b (anonymous namespace)::CSOTFGameServerLobby_State_descriptor_
 b (anonymous namespace)::CSOTFGameServerLobby_WarMatch_descriptor_
 b (anonymous namespace)::CSOTFGameServerLobby_descriptor_
 b (anonymous namespace)::CSOTFGameServerLobby_reflection_
 b (anonymous namespace)::CSOTFLadderPlayerStats_descriptor_
 b (anonymous namespace)::CSOTFLadderPlayerStats_reflection_
 b (anonymous namespace)::CSOTFMapContribution_descriptor_
 b (anonymous namespace)::CSOTFMapContribution_reflection_
 b (anonymous namespace)::CSOTFMatchResultPlayerStats_descriptor_
 b (anonymous namespace)::CSOTFMatchResultPlayerStats_reflection_
 b (anonymous namespace)::CSOTFPartyInvite_PartyMember_descriptor_
 b (anonymous namespace)::CSOTFPartyInvite_PartyMember_reflection_
 b (anonymous namespace)::CSOTFPartyInvite_descriptor_
 b (anonymous namespace)::CSOTFPartyInvite_reflection_
 b (anonymous namespace)::CSOTFPartyMember_descriptor_
 b (anonymous namespace)::CSOTFPartyMember_reflection_
 b (anonymous namespace)::CSOTFParty_State_descriptor_
 b (anonymous namespace)::CSOTFParty_descriptor_
 b (anonymous namespace)::CSOTFParty_reflection_
 b (anonymous namespace)::CSOTFPlayerInfo_descriptor_
 b (anonymous namespace)::CSOTFPlayerInfo_reflection_
 b (anonymous namespace)::CSOWarData_descriptor_
 b (anonymous namespace)::CSOWarData_reflection_
 b (anonymous namespace)::CTFLobbyMember_ConnectState_descriptor_
 b (anonymous namespace)::CTFLobbyMember_descriptor_
 b (anonymous namespace)::CTFLobbyMember_reflection_
 b (anonymous namespace)::CWorkshop_GetContributors_Request_descriptor_
 b (anonymous namespace)::CWorkshop_GetContributors_Request_reflection_
 b (anonymous namespace)::CWorkshop_GetContributors_Response_descriptor_
 b (anonymous namespace)::CWorkshop_GetContributors_Response_reflection_
 b (anonymous namespace)::CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock_descriptor_
 b (anonymous namespace)::CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock_reflection_
 b (anonymous namespace)::CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription_descriptor_
 b (anonymous namespace)::CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription_reflection_
 b (anonymous namespace)::CWorkshop_PopulateItemDescriptions_Request_descriptor_
 b (anonymous namespace)::CWorkshop_PopulateItemDescriptions_Request_reflection_
 b (anonymous namespace)::CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule_descriptor_
 b (anonymous namespace)::CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule_reflection_
 b (anonymous namespace)::CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule_descriptor_
 b (anonymous namespace)::CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule_reflection_
 b (anonymous namespace)::CWorkshop_SetItemPaymentRules_Request_descriptor_
 b (anonymous namespace)::CWorkshop_SetItemPaymentRules_Request_reflection_
 b (anonymous namespace)::CWorkshop_SetItemPaymentRules_Response_descriptor_
 b (anonymous namespace)::CWorkshop_SetItemPaymentRules_Response_reflection_
 b (anonymous namespace)::ChatChannelType_t_descriptor_
 b (anonymous namespace)::EGCBaseClientMsg_descriptor_
 b (anonymous namespace)::EGCBaseMsg_descriptor_
 b (anonymous namespace)::EGCBaseProtoObjectTypes_descriptor_
 b (anonymous namespace)::EGCItemMsg_descriptor_
 b (anonymous namespace)::EGCMsgResponse_descriptor_
 b (anonymous namespace)::EGCSystemMsg_descriptor_
 b (anonymous namespace)::EGCToGCMsg_descriptor_
 b (anonymous namespace)::EItemPurgatoryResponse_Finalize_descriptor_
 b (anonymous namespace)::EItemPurgatoryResponse_Refund_descriptor_
 b (anonymous namespace)::ESOMsg_descriptor_
 b (anonymous namespace)::EServerModificationItemType_descriptor_
 b (anonymous namespace)::ETFGCMsg_descriptor_
 b (anonymous namespace)::EUnlockStyle_descriptor_
 b (anonymous namespace)::GCConnectionStatus_descriptor_
 b (anonymous namespace)::GCGoodbyeReason_descriptor_
 b (anonymous namespace)::GCProtoBufMsgSrc_descriptor_
 b (anonymous namespace)::PartnerAccountType_descriptor_
 b (anonymous namespace)::ServerMatchmakingState_descriptor_
 b (anonymous namespace)::SurveyQuestionType_descriptor_
 b (anonymous namespace)::TFLobbyReadyState_descriptor_
 b (anonymous namespace)::TFMatchLeaveReason_descriptor_
 b (anonymous namespace)::TF_GC_GameState_descriptor_
 b (anonymous namespace)::TF_GC_TEAM_descriptor_
 b (anonymous namespace)::TF_MatchmakingMode_descriptor_
 b (anonymous namespace)::TF_Matchmaking_WizardStep_descriptor_
 b (anonymous namespace)::__g_CreateCPlayerInfoManager_V1IPlayerInfoManager_V1_reg
 b ACT_DOOR_LOCKED
 b ACT_DOOR_OPEN
 b AIN_DEF_TARGET
 b AddMultiDamage(CTakeDamageInfo const&, CBaseEntity*)::warningCount
 b Bias(float, float)::lastExponent
 b CAI_BaseNPC::FindNamedEntity(char const*, IEntityFindFilter*)::playerwarningcount
 b CAI_BaseNPC::FindNamedEntity(char const*, IEntityFindFilter*)::selfwarningcount
 b CAI_BaseNPC::NPCThink()::timer
 b CAI_BaseNPC::PreNPCThink()::pHostTimescale
 b CAI_BaseNPC::RebalanceThinks()::iPrevTick
 b CAI_BaseNPC::RebalanceThinks()::nRebalanceableThinksInTick
 b CAI_BaseNPC::RebalanceThinks()::nThinksInTick
 b CAI_BaseNPC::RebalanceThinks()::rebalanceCandidates
 b CAI_BaseNPC::ResolveActivityToSequence(Activity, int&, Activity&, Activity&)::lastWarnActivity
 b CAI_BaseNPC::ResolveActivityToSequence(Activity, int&, Activity&, Activity&)::pLastWarn
 b CAI_BaseNPC::ResolveActivityToSequence(Activity, int&, Activity&, Activity&)::timeLastWarn
 b CAI_BaseNPC::TranslateActivity(Activity, Activity*)::sUniqueActivities
 b CAI_BaseNPC::UpdateEfficiency(bool)::vPlayerEyePosition
 b CAI_BaseNPC::UpdateEfficiency(bool)::vPlayerForward
 b CAI_NetworkEditTools::DrawAINetworkOverlay()::endDrawNode
 b CAI_NetworkEditTools::DrawAINetworkOverlay()::flDrawDuration
 b CAI_NetworkEditTools::DrawAINetworkOverlay()::startDrawNode
 b CAI_Path::BaseGoalPosition() const::vecResult
 b CAI_Pathfinder::CTriDebugOverlay::AddTriOverlayLine(Vector const&, Vector const&, int, int, int, bool)::overCounter
 b CAI_TacticalServices::FindCoverNode(Vector const&, Vector const&, Vector const&, float, float)::nSearchRandomizer
 b CAI_TacticalServices::FindLosNode(Vector const&, Vector const&, float, float, float, FlankType_t, Vector const&, float)::nSearchRandomizer
 b CBaseCombatCharacter::FindEntityRelationship(CBaseEntity*)::dummy
 b CBaseCombatWeapon::GetBulletSpread()::cone
 b CBaseEntity::FireBullets(FireBulletsInfo_t const&)::tracerCount
 b CBaseEntity::KeyValue(char const*, char const*)::szBuf
 b CBaseEntity::TakeDamage(CTakeDamageInfo const&)::warningCount
 b CBasePlayer::EyeAngles()::angEyeWorld
 b CBasePlayer::UpdateStepSound(surfacedata_t*, Vector const&, Vector const&)::iSkipStep
 b CBeam::GetAbsEndPos() const::vecAbsPos
 b CC_CollisionTest(CCommand const&)::first
 b CC_CollisionTest(CCommand const&)::targets
 b CC_KDTreeTest(CCommand const&)::bFirst
 b CC_KDTreeTest(CCommand const&)::vecTargets
 b CC_Player_SetModel(CCommand const&)::szName
 b CChoreoEvent::GetDescription()::description
 b CCollisionProperty::CollisionToWorldTransform() const::s_matTemp
 b CCollisionProperty::CollisionToWorldTransform() const::s_nIndex
 b CCurveData::GetBoundedSample(ICurveDataAccessor*, int, bool&)::nullend
 b CCurveData::GetBoundedSample(ICurveDataAccessor*, int, bool&)::nullstart
 b CDataManagerBase::GetForFreeByIndex(unsigned short)::__executeCount
 b CEconItem::GetCustomDesc() const::pAttrDef_CustomDesc
 b CEconItem::GetCustomName() const::pAttrDef_CustomName
 b CEconItem::GetStyle() const::pAttrDef_ItemStyleOverride
 b CEconItem::GetStyle() const::pAttrDef_ItemStyleStrange
 b CEconItem::SetCustomDesc(char const*)::pAttrDef_CustomDesc
 b CEconItem::SetCustomName(char const*)::pAttrDef_CustomName
 b CEconItemDefinition::BInitFromTestItemKVs(int, KeyValues*, CUtlVector<CUtlString, CUtlMemory<CUtlString, int> >*)::pAttrDef_AttachParticleStatic
 b CEconItemDefinition::BInitFromTestItemKVs(int, KeyValues*, CUtlVector<CUtlString, CUtlMemory<CUtlString, int> >*)::pAttrDef_PaintRGB
 b CEconItemDefinition::GetIconDisplayModel() const::pAttribString
 b CEconItemSchema::BInitItems(KeyValues*, CUtlVector<CUtlString, CUtlMemory<CUtlString, int> >*)::pAttrDef_ContainsCollection
 b CEconItemSchema::BRecurseiveVerifyLootListItemDropDates(CEconLootListDefinition const*, CEconLootListDefinition const*, CUtlVector<CUtlString, CUtlMemory<CUtlString, int> >*) const::pAttribDef_EndDropDate
 b CEconItemSchema::BRecurseiveVerifyLootListItemDropDates(CEconLootListDefinition const*, CEconLootListDefinition const*, CUtlVector<CUtlString, CUtlMemory<CUtlString, int> >*) const::pAttribDef_StartDropDate
 b CEconItemSchema::GetItemDefinition(int)::s_pEmptyDefinition
 b CEconItemView::GetItemStyle() const::pAttrDef_ItemStyleOverride
 b CEconItemView::GetItemStyle() const::pAttrDef_ItemStyleStrange
 b CEconItemView::GetModifiedRGBValue(bool)::pAttr_Paint
 b CEconItemView::GetModifiedRGBValue(bool)::pAttr_Paint2
 b CEconItemView::GetModifiedRGBValue(bool)::pAttr_PaintOverride
 b CEconLootListDefinition::BInitFromKV(KeyValues*, CEconItemSchema&, CUtlVector<CUtlString, CUtlMemory<CUtlString, int> >*)::pAttribDef_EndDropDate
 b CEconLootListDefinition::BInitFromKV(KeyValues*, CEconItemSchema&, CUtlVector<CUtlString, CUtlMemory<CUtlString, int> >*)::pAttribDef_StartDropDate
 b CEconTool_DuckToken::CanApplyTo(IEconItemInterface const*, IEconItemInterface const*) const::pAttrDef_DuckBadgeLevel
 b CEconTool_Festivizer::CanApplyTo(IEconItemInterface const*, IEconItemInterface const*) const::pAttribDef_Festivizer
 b CEconTool_GiftWrap::CanApplyTo(IEconItemInterface const*, IEconItemInterface const*) const::pAttrDef_CannotGiftwrap
 b CEconTool_GiftWrap::CanApplyTo(IEconItemInterface const*, IEconItemInterface const*) const::pAttrDef_ToolNeedsGiftwrap
 b CEconTool_KillStreakifier::CanApplyTo(IEconItemInterface const*, IEconItemInterface const*) const::pAttribDef_KillStreakEffect
 b CEconTool_StrangePart::CanApplyTo(IEconItemInterface const*, IEconItemInterface const*) const::pAttrDef_StrangePartCounterID
 b CEconTool_Xifier::CanApplyTo(IEconItemInterface const*, IEconItemInterface const*) const::pAttribDef_StatModule
 b CEconTool_Xifier::CanApplyTo(IEconItemInterface const*, IEconItemInterface const*) const::pAttribDef_ToolTargetItem
 b CEyeballBoss::PickNewSpawnSpot() const::spot
 b CEyeballBossLocomotion::GetFeet() const::feet
 b CFlexAnimationTrack::GetBoundedSample(int, bool&, int)::nullend
 b CFlexAnimationTrack::GetBoundedSample(int, bool&, int)::nullstart
 b CHalloweenSoulPack::ItemTouch(CBaseEntity*)::hItemDef
 b CKeyValuesDumpContextAsDevMsg::KvBeginKey(KeyValues*, int)::r_developer
 b CMultiplayRules::DetermineMapCycleFilename(char*, int, bool)::szLastResult
 b CNavArea::ComputeVisibilityDelta(CNavArea const*) const::delta
 b CNavArea::Draw() const::blink
 b CNavArea::Draw() const::blinkOn
 b CNavMesh::DrawEditMode()::host_thread_mode
 b CNavMesh::GetFilename() const::filename
 b CNavMesh::GetNearestNavArea(Vector const&, bool, float, bool, bool, int) const::searchMarker
 b CNavMesh::UpdateGeneration(float)::host_thread_mode
 b CNavMesh::UpdateGeneration(float)::s_playerSettleTimer
 b CNavMesh::UpdateGeneration(float)::s_unlitAreas
 b CNavMesh::UpdateGeneration(float)::s_unlitSeedAreas
 b CNavNode::GetNode(Vector const&)::lookup
 b CParticleSystemDefinition_UnpackInit::s_pUnpack
 b CPlayerMove::RunCommand(CBasePlayer*, CUserCmd*, IMoveHelper*)::s_dblLastWarningTime
 b CQuestItemTracker::UpdatePointsFromSOItem()::pAttribDef_EarnedBonusPoints
 b CQuestItemTracker::UpdatePointsFromSOItem()::pAttribDef_EarnedStandardPoints
 b CResponseSystem::ParseRule()::instancedCriteria
 b CResponseSystem::ResponseWarning(char const*, ...)::string
 b CServerGameClients::ClientSettingsChanged(edict_t*)::pMax
 b CServerGameClients::ClientSettingsChanged(edict_t*)::pMaxUpdateRate
 b CServerGameClients::ClientSettingsChanged(edict_t*)::pMin
 b CServerGameClients::ClientSettingsChanged(edict_t*)::pMinUpdateRate
 b CServerGameDLL::GetServerBrowserGameData()::rchResult
 b CSteamID::Render() const::nBuf
 b CSteamID::Render() const::rgchBuf
 b CStudioHdr::CActivityToSequenceMapping::SelectWeightedSequence(CStudioHdr*, int, int)::__executeCount
 b CStudioHdr::GroupStudioHdr(int)::__executeCount
 b CStudioHdr::pSeqdesc(int)::s_nil_seq
 b CTFBot::GetMaxAttackRange() const::pItemDef_GiantFlamethrower
 b CTFBot::ModifyMaxHealth(int, bool, bool)::pAttrDef_HiddenMaxHealthNonBuffed
 b CTFBotDeliverFlag::UpgradeOverTime(CTFBot*)::pAttrDef_HealthRegen
 b CTFBotEngineerBuildDispenser::Update(CTFBot*, float)::buildReply
 b CTFBotMvMDeployBomb::OnEnd(CTFBot*, Action<CTFBot>*)::pAttrDef_AirblastVerticalVulnerability
 b CTFBotMvMDeployBomb::OnStart(CTFBot*, Action<CTFBot>*)::pAttrDef_AirblastVerticalVulnerability
 b CTFFlameEntity::OnCollide(CBaseEntity*)::flipTaunt
 b CTFGCServerSystem::PreClientUpdate()::sv_password
 b CTFGCServerSystem::PreClientUpdate()::sv_visiblemaxplayers
 b CTFGCServerSystem::UpdateConnectedPlayersAndServerInfo(CMsgGameServerMatchmakingStatus_Event, bool)::sv_region
 b CTFGCServerSystem::UpdateConnectedPlayersAndServerInfo(CMsgGameServerMatchmakingStatus_Event, bool)::sv_tags
 b CTFGCServerSystem::UpdateConnectedPlayersAndServerInfo(CMsgGameServerMatchmakingStatus_Event, bool)::sv_visiblemaxplayers
 b CTFGameRules::DropBonusDuck(Vector const&, CTFPlayer*, CTFPlayer*, CTFPlayer*, bool, bool) const::pAttr_DuckLevelBadge
 b CTFGameRules::HandleScrambleTeams()::playerVector
 b CTFGameRules::MatchSummaryEnd()::tf_bot_quota
 b CTFGameRules::MatchSummaryEnd()::tf_bot_quota_mode
 b CTFGameRules::PlayHelltowerAnnouncerVO(int, int)::flBlueAnnouncerTalkingUntil
 b CTFGameRules::PlayHelltowerAnnouncerVO(int, int)::flRedAnnouncerTalkingUntil
 b CTFGameRules::SetupOnRoundRunning()::tf_bot_quota
 b CTFGameRules::SetupOnRoundRunning()::tf_bot_quota_mode
 b CTFInventoryManager::GetBaseItemForClass(int, int)::pItemDef_GrapplingHook
 b CTFInventoryManager::GetBaseItemForClass(int, int)::pItemDef_MvMCanteen
 b CTFInventoryManager::GetBaseItemForClass(int, int)::pItemDef_SpellBook
 b CTFItemSchema::BCanStrangeFilterApplyToStrangeSlotInItem(unsigned int, unsigned int, IEconItemInterface const*, int, unsigned int*) const::pAttrDef_CannotRestore
 b CTFItemSchema::BCanStrangeFilterApplyToStrangeSlotInItem(unsigned int, unsigned int, IEconItemInterface const*, int, unsigned int*) const::pAttrDef_IsOperationPass
 b CTFJar::GetProjectileEntityName(CAttribute_String*)::pAttrDef_ProjectileEntityName
 b CTFNavArea::ComputeInvasionAreaVectors()::searchMarker
 b CTFPlayer::AcceptTauntWithPartner(CTFPlayer*)::pAttrDef_TauntAttackName
 b CTFPlayer::AcceptTauntWithPartner(CTFPlayer*)::pAttrDef_TauntAttackTime
 b CTFPlayer::Event_Killed(CTakeDamageInfo const&)::congaTaunt
 b CTFPlayer::Event_Killed(CTakeDamageInfo const&)::dosidoTaunt
 b CTFPlayer::IsDemowolf() const::ppItemDefWearables
 b CTFPlayer::IsFairyHeavy() const::ppItemDefWearables
 b CTFPlayer::IsFrankenHeavy() const::ppItemDefWearables
 b CTFPlayer::IsRobotCostumeEquipped() const::ppItemDefWearables
 b CTFPlayer::IsWormsGearEquipped() const::ppItemDefWearables
 b CTFPlayer::ItemIsAllowed(CEconItemView*)::pAttrib_AllowedInMedievalMode
 b CTFPlayer::ModifyOrAppendCriteria(AI_CriteriaSet&)::pAttrDef_AdditionalHalloweenResponseRule
 b CTFPlayer::ParseSharedTauntDataFromEconItemView(CEconItemView*)::pAttrDef_TauntForceMoveForward
 b CTFPlayer::ParseSharedTauntDataFromEconItemView(CEconItemView*)::pAttrDef_TauntMoveAccelerationTime
 b CTFPlayer::ParseSharedTauntDataFromEconItemView(CEconItemView*)::pAttrDef_TauntMoveSpeed
 b CTFPlayer::ParseSharedTauntDataFromEconItemView(CEconItemView*)::pAttrDef_TauntTurnAccelerationTime
 b CTFPlayer::ParseSharedTauntDataFromEconItemView(CEconItemView*)::pAttrDef_TauntTurnSpeed
 b CTFPlayer::PlayTauntSceneFromItem(CEconItemView*)::congaTaunt
 b CTFPlayer::PlayTauntSceneFromItem(CEconItemView*)::pAttrDef_TauntAttackName
 b CTFPlayer::PlayTauntSceneFromItem(CEconItemView*)::pAttrDef_TauntAttackTime
 b CTFPlayer::PlayTauntSceneFromItem(CEconItemView*)::pAttrDef_TauntForceWeaponSlot
 b CTFPlayer::PlayTauntSceneFromItem(CEconItemView*)::pAttrDef_TauntMimic
 b CTFPlayer::PlayTauntSceneFromItem(CEconItemView*)::pAttrDef_TauntPressAndHold
 b CTFPlayer::PlayTauntSceneFromItem(CEconItemView*)::pAttrDef_TauntSuccessSound
 b CTFPlayer::PlayTauntSceneFromItem(CEconItemView*)::pAttrDef_TauntSuccessSoundLoop
 b CTFPlayer::PlayTauntSceneFromItem(CEconItemView*)::pAttrDef_TauntSuccessSoundLoopOffset
 b CTFPlayer::PlayTauntSceneFromItem(CEconItemView*)::pAttrDef_TauntSuccessSoundOffset
 b CTFPlayerAnimState::ComputePoseParam_AimYaw(CStudioHdr*)::flCurrentPitch
 b CTFPlayerAnimState::ComputePoseParam_AimYaw(CStudioHdr*)::flCurrentYaw
 b CTFPlayerClassShared::GetModelName() const::modelFilename
 b CTFPlayerInventory::SOCreated(CSteamID const&, GCSDK::CSharedObject const*, GCSDK::ESOCacheEvent)::pItemDef_HalloweenPass
 b CTFPlayerInventory::SOCreated(CSteamID const&, GCSDK::CSharedObject const*, GCSDK::ESOCacheEvent)::pItemDef_InvasionPass
 b CTFPlayerInventory::SOCreated(CSteamID const&, GCSDK::CSharedObject const*, GCSDK::ESOCacheEvent)::pItemDef_Summer2015Operation
 b CTFPlayerInventory::SOCreated(CSteamID const&, GCSDK::CSharedObject const*, GCSDK::ESOCacheEvent)::pItemDef_Winter2016Pass
 b CTFPlayerShared::OnRemoveHalloweenTiny()::vTest
 b CTFPowerupBottle::SetNumCharges(unsigned char)::pAttrDef_PowerupCharges
 b CTFWeaponBase::GetBulletSpread()::cone
 b CTFWeaponBaseGun::GetCustomProjectileModel(CAttribute_String*)::pAttrDef_ProjectileEntityName
 b CTFWeaponBaseMelee::DoSwingTraceInternal(CGameTrace&, bool, CUtlVector<CGameTrace, CUtlMemory<CGameTrace, int> >*)::vecSwingMaxsBase
 b CTFWeaponBaseMelee::DoSwingTraceInternal(CGameTrace&, bool, CUtlVector<CGameTrace, CUtlMemory<CGameTrace, int> >*)::vecSwingMinsBase
 b CTFWrench::Smack()::vecSwingMaxs
 b CTFWrench::Smack()::vecSwingMins
 b CTestTraceline::Spin()::traceline_spin
 b CTextStat::GetTextStatsList()::theList
 b CUtlSymbol::Initialize()::symbolsInitialized
 b CalcLocalHierarchyAnimation(CStudioHdr const*, matrix3x4_t*, CBoneBitList&, Vector*, Quaternion*, mstudiobone_t const*, mstudiolocalhierarchy_t*, int, int, float, int, float, int)::rootXform
 b ClearAllAttributes
 b ClearAllNavAttributes
 b ClearAttributeTF
 b ConVarRef::Init(char const*, bool)::bFirst
 b CreateStuckTable()::firsttime
 b CryptoPP::NullRNG()::s_nullRNG
 b CryptoPP::Td
 b CryptoPP::Te
 b CryptoPP::TheBitBucket()::bitBucket
 b CryptoPP::s_NullNameValuePairs
 b CryptoPP::s_TdFilled
 b CryptoPP::s_TeFilled
 b CryptoPP::s_jmpNoCPUID
 b CryptoPP::s_jmpNoSSE2
 b CryptoPP::s_pBot
 b CryptoPP::s_pMul
 b CryptoPP::s_pSqu
 b CryptoPP::s_pTop
 b DescribeAxis(int)::sz
 b EconEntity_NonEquippedItemKillTracking(CTFPlayer*, CTFPlayer*, unsigned short, kill_eater_event_t, int)::pAttrDef_DeactiveDate
 b EconEntity_NonEquippedItemKillTracking_NoPartnerBatched(CTFPlayer*, unsigned short, kill_eater_event_t, int)::pAttrDef_DeactiveDate
 b EntityFactoryDictionary()::s_EntityFactory
 b ForceLookAt
 b GCSDK::CJob::GetPauseReasonDescription() const::srgchPauseReason
 b GCSDK::GMapJobTypesByMsg()::s_MapJobTypes
 b GCSDK::GMapJobTypesByName()::s_MapJobTypes
 b GCSDK::GProtoBufMsgMemoryPoolMgr()::s_ProtoBufMsgMemoryPoolMgr
 b GetAmmoDef()::bInitted
 b GetAmmoDef()::def
 b GetBspFilename(char const*)::bspFilename
 b GetEarnedBonusPoints(IEconItemInterface const*)::pAttribDef_EarnedBonusPoints
 b GetEarnedStandardPoints(IEconItemInterface const*)::pAttribDef_EarnedStandardPoints
 b GetMatchGroupDescription(EMatchGroup const&)::descBootcamp
 b GetMatchGroupDescription(EMatchGroup const&)::descCasual12v12
 b GetMatchGroupDescription(EMatchGroup const&)::descCasual6v6
 b GetMatchGroupDescription(EMatchGroup const&)::descCasual9v9
 b GetMatchGroupDescription(EMatchGroup const&)::descLadder12v12
 b GetMatchGroupDescription(EMatchGroup const&)::descLadder6v6
 b GetMatchGroupDescription(EMatchGroup const&)::descLadder9v9
 b GetMatchGroupDescription(EMatchGroup const&)::descMannup
 b GetPhysObjSaveRestoreOps(PhysInterfaceId_t)::inited
 b GetQuestEventsKeyValues()::pQuestEvents
 b GetRandomBotName()::nameCount
 b GetRandomBotName()::nameIndex
 b GetReplayGameStatsHelper()::s_Instance
 b GetSceneManager()::s_SceneManager
 b GetSequenceLinearMotion(CStudioHdr*, int, float const*, Vector*)::__executeCount
 b GetServerBrowser()::pServerBrowser
 b GetUniverse()::steamUniverse
 b GetWarTrackerManager()::trackerManager
 b GetWorkshopUGC()::bInitUGC
 b IBody::GetEyePosition() const::eye
 b IBody::GetViewVector() const::view
 b IEconItemInterface::GetCustomPaintKitWear(float&) const::pAttrDef_DefaultWear
 b IEconItemInterface::GetCustomPaintKitWear(float&) const::pAttrDef_PaintKitWear
 b IEconItemInterface::GetExpirationDate() const::pAttrib_ExpirationDate
 b IEconItemInterface::GetTradableAfterDateTime() const::pAttrib_TradableAfter
 b IEconItemInterface::IsCommodity() const::pAttrib_IsCommodity
 b IEconItemInterface::IsMarketable() const::pAttrDef_IsAustralium
 b IEconItemInterface::IsMarketable() const::pAttrDef_IsLimited
 b IEconItemInterface::IsMarketable() const::pAttrDef_IsMarketable
 b IEconItemInterface::IsMarketable() const::pAttr_killstreak
 b IEconItemInterface::IsMarketable() const::pItemDef_GlitchedCircuit
 b IEconItemInterface::IsPermanentlyUntradable() const::pAttrib_AlwaysTradable
 b IEconItemInterface::IsPermanentlyUntradable() const::pAttrib_CannotTrade
 b IEconItemInterface::IsPermanentlyUntradable() const::pAttrib_NonEconomy
 b IEconItemInterface::IsUsableInCrafting() const::pAttrib_AlwaysUsableInCraft
 b IEconItemInterface::IsUsableInCrafting() const::pAttrib_NeverCraftable
 b IEconTool::ShouldDisplayQuantity(IEconItemInterface const*) const::pAttrDef_UnlimitedQuantity
 b INextBot::GetDebugIdentifier() const::name
 b IVision::IsLineOfSightClear(Vector const&) const::_counter
 b Internal_GetAttributeTypeUniqueIdentifierNextValue()::s_unUniqueCounter
 b ItemSystem()::pSystem
 b KeyValues::SaveKeyToFile(KeyValues*, IBaseFileSystem*, void*, CUtlBuffer*, int, bool, bool)::buf
 b ListRecentNPCSpeechCmd
 b MarkAttribute
 b MissingSceneWarning(char const*)::missing
 b MoveHelperServer()::s_MoveHelperServer
 b NavClearAttribute
 b NavMarkAttribute
 b ParticleChildrenInfo_t_UnpackInit::s_pUnpack
 b PhysFrame(float)::lastObjectCount
 b PlayerBody::Upkeep()::bot_mimic
 b PlayerHasDuckStreaks(CTFPlayer*)::pAttr_DuckStreaks
 b PlayerLocomotion::GetGroundNormal() const::up
 b QuestObjectiveManager()::g_QuestObjectiveManager
 b SecretRoom_GetSlotInfoForTrigger(char const*)::unused
 b SelectBot
 b SelectPartnerTaunt(CTFItemDefinition const*, CTFPlayer*, CTFPlayer*, char const**, char const**)::rpsTaunt
 b SelectWithAttribute
 b SetDebug
 b SetDebugFilter
 b TheNextBots()::manager
 b TheTacticalMissions()::manager
 b UTIL_EntitiesInPVS(CBaseEntity*, CBaseEntity*)::lastOrg
 b UTIL_EntitiesInPVS(CBaseEntity*, CBaseEntity*)::pvs
 b UTIL_VarArgs(char const*, ...)::string
 b WarpSelectedHere
 b WaveTrace(char const*, char const*)::s_WaveTrace
 b _ZL8ice_sbox.0
 b _ZL8ice_sbox.1
 b _ZL8ice_sbox.2
 b _ZL8ice_sbox.3
 b _ZZN6google8protobuf55protobuf_AddDesc_google_2fprotobuf_2fdescriptor_2eprotoEvE12already_here.b
 b __g_CServerDLLSharedAppSystems_singleton
 b __g_CServerGameEnts_singleton
 b __g_CreateCEffectsServerIEffects_reg
 b __g_CreateCGameMovementIGameMovement_reg
 b __g_CreateCHLTVDirectorIHLTVDirector_reg
 b __g_CreateCPlayerInfoManagerIPlayerInfoManager_reg
 b __g_CreateCPluginBotManagerIBotManager_reg
 b __g_CreateCPluginHelpersCheckIPluginHelpersCheck_reg
 b __g_CreateCServerChoreoToolsIServerChoreoTools_reg
 b __g_CreateCServerDLLSharedAppSystemsIServerDLLSharedAppSystems_reg
 b __g_CreateCServerGameClientsIServerGameClients003_reg
 b __g_CreateCServerGameClientsIServerGameClients_reg
 b __g_CreateCServerGameDLLIServerGameDLL_reg
 b __g_CreateCServerGameEntsIServerGameEnts_reg
 b __g_CreateCServerGameTagsIServerGameTags_reg
 b __g_CreateCServerReplayImpIServerReplay_reg
 b __g_CreateCServerToolsIServerTools001_reg
 b __g_CreateCServerToolsIServerTools002_reg
 b __g_CreateCServerToolsIServerTools_reg
 b __g_GameRulesRegister_CMultiplayRules
 b __g_GameRulesRegister_CTFGameRules
 b __g_GameRulesRegister_CTeamplayRules
 b __proxy_SendProxy_ClientSideAnimation
 b __proxy_SendProxy_FlexWeights
 b __proxy_SendProxy_OnlyToTeam
 b __proxy_SendProxy_SendActiveLocalWeaponDataTable
 b __proxy_SendProxy_SendBaseCombatCharacterLocalDataTable
 b __proxy_SendProxy_SendHealersDataTable
 b __proxy_SendProxy_SendLocalFlameThrowerDataTable
 b __proxy_SendProxy_SendLocalObjectDataTable
 b __proxy_SendProxy_SendLocalWeaponDataTable
 b __proxy_SendProxy_SendNonLocalDataTable
 b __proxy_SendProxy_SendNonLocalWeaponDataTable
 b __proxy_SendProxy_SendPredictableId
 b __proxy_SendProxy_TestProxyToggle
 b _ballplayertoucher
 b _firesmoke
 b _plasma
 b ai_ally_speech_manager
 b ai_battle_line
 b ai_changehintgroup
 b ai_changetarget
 b ai_debug_node_connect_command
 b ai_dump_hints_command
 b ai_goal_assault
 b ai_goal_follow
 b ai_goal_lead
 b ai_goal_lead_weapon
 b ai_goal_standoff
 b ai_hint
 b ai_network
 b ai_relationship
 b ai_script_conditions
 b ai_set_move_height_epsilon_command
 b ai_sound
 b ai_speechfilter
 b air_density
 b aiscripted_schedule
 b aitesthull
 b ambient_generic
 b anim_3wayblend
 b archer_proxy
 b assault_assaultpoint
 b assault_rallypoint
 b bBotTrigInitted
 b base_boss
 b beam
 b bloodspray
 b bombReply
 b bot_action_point
 b bot_changeteams_command
 b bot_command
 b bot_controller
 b bot_drop_command
 b bot_generator
 b bot_hint_engineer_nest
 b bot_hint_sentrygun
 b bot_hint_teleporter_exit
 b bot_hurt_command
 b bot_kick_command
 b bot_kill
 b bot_mimic_inverse
 b bot_mimic_yaw_offset
 b bot_mirror_command
 b bot_moveto_command
 b bot_npc_archer
 b bot_npc_decoy
 b bot_proxy
 b bot_refill_command
 b bot_roster
 b bot_sendcommand
 b bot_teleport_command
 b bot_whack_command
 b buddha_command
 b bugswap
 b cProceduralBarrelRotationAnimationPoints
 b callvote_command
 b cast_hull_command
 b cast_ray_command
 b cc_IgnitePlayer
 b cc_bot_selectweapon_command
 b cc_spawn_merasmus_at_level_command
 b ch_createairboat
 b ch_createjeep
 b clear_debug_overlays_command
 b collision_test
 b color_correction
 b color_correction_volume
 b commentary_auto
 b commentary_cvarsnotchanging
 b commentary_finishnode
 b cosTable
 b create_flashlight
 b creditsdone
 b currency_give_command
 b cycler_actor
 b cycler_flex
 b dbghist_addline
 b dbghist_dump
 b defaultresponsesytem
 b dispcoll_drawplane
 b dispenser_touch_trigger
 b drawcross
 b drawline
 b dropitem
 b dump_all_caches_command
 b dump_entity_sizes_command
 b dump_globals_command
 b dumpentityfactories
 b dumpeventqueue
 b dumpgamestringtable
 b dynamic_prop
 b ensure_so_trackers_for_steamid_command
 b ent_absbox
 b ent_attachments
 b ent_autoaim
 b ent_bbox
 b ent_cancelpendingentfires
 b ent_create
 b ent_dump
 b ent_fire
 b ent_info
 b ent_keyvalue
 b ent_messages
 b ent_name
 b ent_orient
 b ent_pause
 b ent_pivot
 b ent_rbox
 b ent_remove
 b ent_remove_all
 b ent_rotate
 b ent_setname
 b ent_show_response_criteria
 b ent_step
 b ent_teleport
 b ent_text
 b ent_viewoffset
 b entity_bird
 b entity_blocker
 b entity_carrier
 b entity_medigun_shield
 b entity_revive_marker
 b entity_rocket
 b entity_saucer
 b entity_sign
 b entity_spawn_manager
 b entity_spawn_point
 b entityflame
 b env_beam
 b env_beverage
 b env_blood
 b env_bubbles
 b env_credits
 b env_debughistory
 b env_detail_controller
 b env_dustpuff
 b env_dusttrail
 b env_effectscript
 b env_embers
 b env_entity_dissolver
 b env_entity_igniter
 b env_entity_maker
 b env_explosion
 b env_fade
 b env_fire
 b env_fire_trail
 b env_firesensor
 b env_firesource
 b env_fog_controller
 b env_funnel
 b env_global
 b env_glow
 b env_gunfire
 b env_hudhint
 b env_laser
 b env_laserdot
 b env_lightglow
 b env_message
 b env_microphone
 b env_movieexplosion
 b env_muzzleflash
 b env_particle_performance_monitor
 b env_particle_trail
 b env_particlefire
 b env_particlelight
 b env_particlescript
 b env_particlesmokegrenade
 b env_physexplosion
 b env_physimpact
 b env_physwire
 b env_player_surface_trigger
 b env_projectedtexture
 b env_quadraticbeam
 b env_ragdoll_boogie
 b env_rockettrail
 b env_rotorshooter
 b env_screeneffect
 b env_screenoverlay
 b env_shake
 b env_shooter
 b env_smokestack
 b env_smoketrail
 b env_sniperdot
 b env_soundscape
 b env_soundscape_proxy
 b env_soundscape_triggerable
 b env_spark
 b env_splash
 b env_sporeexplosion
 b env_sporetrail
 b env_sprite
 b env_sprite_oriented
 b env_spritetrail
 b env_steam
 b env_steamjet
 b env_sun
 b env_texturetoggle
 b env_tonemap_controller
 b env_tracer
 b env_viewpunch
 b env_wind
 b env_zoom
 b event_queue_saveload_proxy
 b explode_command
 b explodevector_command
 b eyeball_boss
 b f05
 b f3
 b fadein
 b fadeout
 b filter_activator_class
 b filter_activator_mass_greater
 b filter_activator_name
 b filter_activator_team
 b filter_activator_tfteam
 b filter_base
 b filter_damage_type
 b filter_enemy
 b filter_multi
 b filter_tf_bot_has_tag
 b filter_tf_class
 b filter_tf_condition
 b filter_tf_damaged_by_weapon_in_slot
 b filter_tf_player_can_cap
 b find_ent
 b find_ent_index
 b firetarget
 b fish
 b fov_command
 b funCBaseFlex
 b func_achievement
 b func_areaportal
 b func_areaportalwindow
 b func_breakable
 b func_breakable_surf
 b func_brush
 b func_button
 b func_capturezone
 b func_changeclass
 b func_clip_vphysics
 b func_conveyor
 b func_door
 b func_door_rotating
 b func_dustcloud
 b func_dustmotes
 b func_fish_pool
 b func_flag_alert
 b func_flagdetectionzone
 b func_forcefield
 b func_guntarget
 b func_illusionary
 b func_ladderendpoint
 b func_lod
 b func_monitor
 b func_movelinear
 b func_nav_avoid
 b func_nav_avoidance_obstacle
 b func_nav_blocker
 b func_nav_prefer
 b func_nav_prerequisite
 b func_nobuild
 b func_nogrenades
 b func_occluder
 b func_passtime_goal
 b func_passtime_goalie_zone
 b func_passtime_no_ball_zone
 b func_physbox
 b func_physbox_multiplayer
 b func_plat
 b func_platrot
 b func_powerupvolume
 b func_precipitation
 b func_proprrespawnzone
 b func_pushable
 b func_reflective_glass
 b func_regenerate
 b func_respawnflag
 b func_respawnroom
 b func_respawnroomvisualizer
 b func_rot_button
 b func_rotating
 b func_smokevolume
 b func_suggested_build
 b func_tanktrain
 b func_tfbot_hint
 b func_trackautochange
 b func_trackchange
 b func_tracktrain
 b func_train
 b func_traincontrols
 b func_upgradestation
 b func_useableladder
 b func_vehicleclip
 b func_wall
 b func_wall_toggle
 b func_water
 b func_water_analog
 b func_weight_button
 b gGlobalState
 b gNullPlayerClassInfo
 b gNullWeaponInfo
 b g_AISystemHook
 b g_AchievementSaveThread
 b g_AimManager
 b g_AnchorList
 b g_BotData
 b g_BreakModelsPrecached
 b g_CAI_BaseNPC_ClassReg
 b g_CBaseAnimatingOverlay_ClassReg
 b g_CBaseAnimating_ClassReg
 b g_CBaseAttributableItem_ClassReg
 b g_CBaseCombatCharacter_ClassReg
 b g_CBaseCombatWeapon_ClassReg
 b g_CBaseDoor_ClassReg
 b g_CBaseEntity_ClassReg
 b g_CBaseFlex_ClassReg
 b g_CBaseGrenade_ClassReg
 b g_CBaseObjectUpgrade_ClassReg
 b g_CBaseObject_ClassReg
 b g_CBaseParticleEntity_ClassReg
 b g_CBasePlayer_ClassReg
 b g_CBaseProjectile_ClassReg
 b g_CBasePropDoor_ClassReg
 b g_CBaseTeamObjectiveResource_ClassReg
 b g_CBaseTempEntity_ClassReg
 b g_CBaseViewModel_ClassReg
 b g_CBeam_ClassReg
 b g_CBoneFollower_ClassReg
 b g_CBonusDuckPickup_ClassReg
 b g_CBonusPack_ClassReg
 b g_CBonusRoundLogic_ClassReg
 b g_CBreakableProp_ClassReg
 b g_CBreakableSurface_ClassReg
 b g_CCaptureFlagReturnIcon_ClassReg
 b g_CCaptureFlag_ClassReg
 b g_CCaptureZone_ClassReg
 b g_CColorCorrectionVolume_ClassReg
 b g_CColorCorrection_ClassReg
 b g_CCurrencyPack_ClassReg
 b g_CDynamicLight_ClassReg
 b g_CDynamicProp_ClassReg
 b g_CEconEntity_ClassReg
 b g_CEconWearable_ClassReg
 b g_CEmbers_ClassReg
 b g_CEntityDissolve_ClassReg
 b g_CEntityFlame_ClassReg
 b g_CEntityParticleTrail_ClassReg
 b g_CEnvDetailController_ClassReg
 b g_CEnvParticleScript_ClassReg
 b g_CEnvProjectedTexture_ClassReg
 b g_CEnvQuadraticBeam_ClassReg
 b g_CEnvScreenEffect_ClassReg
 b g_CEnvScreenOverlay_ClassReg
 b g_CEnvTonemapController_ClassReg
 b g_CEnvWind_ClassReg
 b g_CEyeballBoss_ClassReg
 b g_CFireSmoke_ClassReg
 b g_CFireTrail_ClassReg
 b g_CFish_ClassReg
 b g_CFogController_ClassReg
 b g_CFuncAreaPortalWindow_ClassReg
 b g_CFuncConveyor_ClassReg
 b g_CFuncForceField_ClassReg
 b g_CFuncLadder_ClassReg
 b g_CFuncMonitor_ClassReg
 b g_CFuncOccluder_ClassReg
 b g_CFuncPasstimeGoal_ClassReg
 b g_CFuncReflectiveGlass_ClassReg
 b g_CFuncRespawnRoomVisualizer_ClassReg
 b g_CFuncRespawnRoom_ClassReg
 b g_CFuncRotating_ClassReg
 b g_CFuncSmokeVolume_ClassReg
 b g_CFuncTrackTrain_ClassReg
 b g_CFunc_Dust_ClassReg
 b g_CFunc_LOD_ClassReg
 b g_CGameRulesProxy_ClassReg
 b g_CHalloweenGiftPickup_ClassReg
 b g_CHalloweenPickup_ClassReg
 b g_CHalloweenSoulPack_ClassReg
 b g_CHandleTest_ClassReg
 b g_CHeadlessHatman_ClassReg
 b g_CHightower_TeleportVortex_ClassReg
 b g_CInfoLadderDismount_ClassReg
 b g_CInfoLightingRelative_ClassReg
 b g_CInfoOverlayAccessor_ClassReg
 b g_CLaserDot_ClassReg
 b g_CLightGlow_ClassReg
 b g_CMannVsMachineStats_ClassReg
 b g_CMaterialModifyControl_ClassReg
 b g_CMerasmusDancer_ClassReg
 b g_CMerasmus_ClassReg
 b g_CMonsterResource_ClassReg
 b g_CObjectCartDispenser_ClassReg
 b g_CObjectDispenser_ClassReg
 b g_CObjectSapper_ClassReg
 b g_CObjectSentrygun_ClassReg
 b g_CObjectTeleporter_ClassReg
 b g_CParticleFire_ClassReg
 b g_CParticlePerformanceMonitor_ClassReg
 b g_CParticleSystem_ClassReg
 b g_CPasstimeBall_ClassReg
 b g_CPasstimeGun_ClassReg
 b g_CPhysBoxMultiplayer_ClassReg
 b g_CPhysBox_ClassReg
 b g_CPhysMagnet_ClassReg
 b g_CPhysicsPropMultiplayer_ClassReg
 b g_CPhysicsProp_ClassReg
 b g_CPlasma_ClassReg
 b g_CPlayerDestructionDispenser_ClassReg
 b g_CPlayerResource_ClassReg
 b g_CPointCamera_ClassReg
 b g_CPointCommentaryNode_ClassReg
 b g_CPoseController_ClassReg
 b g_CPrecipitation_ClassReg
 b g_CPropVehicleDriveable_ClassReg
 b g_CRagdollManager_ClassReg
 b g_CRagdollPropAttached_ClassReg
 b g_CRagdollProp_ClassReg
 b g_CRobotDispenser_ClassReg
 b g_CRopeKeyframe_ClassReg
 b g_CSceneEntity_ClassReg
 b g_CShadowControl_ClassReg
 b g_CSlideshowDisplay_ClassReg
 b g_CSmokeStack_ClassReg
 b g_CSniperDot_ClassReg
 b g_CSpotlightEnd_ClassReg
 b g_CSpriteOriented_ClassReg
 b g_CSpriteTrail_ClassReg
 b g_CSprite_ClassReg
 b g_CSteamJet_ClassReg
 b g_CSun_ClassReg
 b g_CTEArmorRicochet_ClassReg
 b g_CTEBSPDecal_ClassReg
 b g_CTEBaseBeam_ClassReg
 b g_CTEBeamEntPoint_ClassReg
 b g_CTEBeamEnts_ClassReg
 b g_CTEBeamFollow_ClassReg
 b g_CTEBeamLaser_ClassReg
 b g_CTEBeamPoints_ClassReg
 b g_CTEBeamRingPoint_ClassReg
 b g_CTEBeamRing_ClassReg
 b g_CTEBeamSpline_ClassReg
 b g_CTEBloodSprite_ClassReg
 b g_CTEBloodStream_ClassReg
 b g_CTEBreakModel_ClassReg
 b g_CTEBubbleTrail_ClassReg
 b g_CTEBubbles_ClassReg
 b g_CTEClientProjectile_ClassReg
 b g_CTEDecal_ClassReg
 b g_CTEDust_ClassReg
 b g_CTEDynamicLight_ClassReg
 b g_CTEEffectDispatch_ClassReg
 b g_CTEEnergySplash_ClassReg
 b g_CTEExplosion_ClassReg
 b g_CTEFireBullets_ClassReg
 b g_CTEFizz_ClassReg
 b g_CTEFootprintDecal_ClassReg
 b g_CTEGaussExplosion_ClassReg
 b g_CTEGlowSprite_ClassReg
 b g_CTEImpact_ClassReg
 b g_CTEKillPlayerAttachments_ClassReg
 b g_CTELargeFunnel_ClassReg
 b g_CTEMetalSparks_ClassReg
 b g_CTEMuzzleFlash_ClassReg
 b g_CTEParticleSystem_ClassReg
 b g_CTEPhysicsProp_ClassReg
 b g_CTEPlayerAnimEvent_ClassReg
 b g_CTEPlayerDecal_ClassReg
 b g_CTEProjectedDecal_ClassReg
 b g_CTEShatterSurface_ClassReg
 b g_CTEShowLine_ClassReg
 b g_CTESmoke_ClassReg
 b g_CTESparks_ClassReg
 b g_CTESpriteSpray_ClassReg
 b g_CTESprite_ClassReg
 b g_CTETFBlood_ClassReg
 b g_CTETFExplosion_ClassReg
 b g_CTETFParticleEffect_ClassReg
 b g_CTEWorldDecal_ClassReg
 b g_CTFAmmoPack_ClassReg
 b g_CTFBall_Ornament_ClassReg
 b g_CTFBaseBoss_ClassReg
 b g_CTFBaseProjectile_ClassReg
 b g_CTFBaseRocket_ClassReg
 b g_CTFBat_ClassReg
 b g_CTFBat_Fish_ClassReg
 b g_CTFBat_Giftwrap_ClassReg
 b g_CTFBat_Wood_ClassReg
 b g_CTFBonesaw_ClassReg
 b g_CTFBotHintEngineerNest_ClassReg
 b g_CTFBottle_ClassReg
 b g_CTFBuffItem_ClassReg
 b g_CTFCannon_ClassReg
 b g_CTFChargedSMG_ClassReg
 b g_CTFCleaver_ClassReg
 b g_CTFClub_ClassReg
 b g_CTFCompoundBow_ClassReg
 b g_CTFCrossbow_ClassReg
 b g_CTFDRGPomson_ClassReg
 b g_CTFDroppedWeapon_ClassReg
 b g_CTFFireAxe_ClassReg
 b g_CTFFists_ClassReg
 b g_CTFFlameRocket_ClassReg
 b g_CTFFlameThrower_ClassReg
 b g_CTFFlareGun_ClassReg
 b g_CTFFlareGun_Revenge_ClassReg
 b g_CTFGameRulesProxy_ClassReg
 b g_CTFGenericBomb_ClassReg
 b g_CTFGlow_ClassReg
 b g_CTFGrapplingHook_ClassReg
 b g_CTFGrenadeLauncher_ClassReg
 b g_CTFGrenadePipebombProjectile_ClassReg
 b g_CTFHalloweenMinigame_ClassReg
 b g_CTFHalloweenMinigame_FallingPlatforms_ClassReg
 b g_CTFHellZap_ClassReg
 b g_CTFItem_ClassReg
 b g_CTFJarMilk_ClassReg
 b g_CTFJar_ClassReg
 b g_CTFKatana_ClassReg
 b g_CTFKnife_ClassReg
 b g_CTFLaserPointer_ClassReg
 b g_CTFLunchBox_ClassReg
 b g_CTFLunchBox_Drink_ClassReg
 b g_CTFMechanicalArm_ClassReg
 b g_CTFMedigunShield_ClassReg
 b g_CTFMiniGame_ClassReg
 b g_CTFMinigameLogic_ClassReg
 b g_CTFMinigun_ClassReg
 b g_CTFObjectiveResource_ClassReg
 b g_CTFPEPBrawlerBlaster_ClassReg
 b g_CTFParachute_ClassReg
 b g_CTFParachute_Primary_ClassReg
 b g_CTFParachute_Secondary_ClassReg
 b g_CTFParticleCannon_ClassReg
 b g_CTFPasstimeLogic_ClassReg
 b g_CTFPipebombLauncher_ClassReg
 b g_CTFPistol_ClassReg
 b g_CTFPistol_ScoutPrimary_ClassReg
 b g_CTFPistol_ScoutSecondary_ClassReg
 b g_CTFPistol_Scout_ClassReg
 b g_CTFPlayerDestructionLogic_ClassReg
 b g_CTFPlayerResource_ClassReg
 b g_CTFPlayer_ClassReg
 b g_CTFPowerupBottle_ClassReg
 b g_CTFProjectile_Arrow_ClassReg
 b g_CTFProjectile_Cleaver_ClassReg
 b g_CTFProjectile_EnergyBall_ClassReg
 b g_CTFProjectile_EnergyRing_ClassReg
 b g_CTFProjectile_Flare_ClassReg
 b g_CTFProjectile_GrapplingHook_ClassReg
 b g_CTFProjectile_HealingBolt_ClassReg
 b g_CTFProjectile_JarMilk_ClassReg
 b g_CTFProjectile_Jar_ClassReg
 b g_CTFProjectile_Rocket_ClassReg
 b g_CTFProjectile_SentryRocket_ClassReg
 b g_CTFProjectile_SpellBats_ClassReg
 b g_CTFProjectile_SpellFireball_ClassReg
 b g_CTFProjectile_SpellKartBats_ClassReg
 b g_CTFProjectile_SpellKartOrb_ClassReg
 b g_CTFProjectile_SpellLightningOrb_ClassReg
 b g_CTFProjectile_SpellMeteorShower_ClassReg
 b g_CTFProjectile_SpellMirv_ClassReg
 b g_CTFProjectile_SpellPumpkin_ClassReg
 b g_CTFProjectile_SpellSpawnBoss_ClassReg
 b g_CTFProjectile_SpellSpawnHorde_ClassReg
 b g_CTFProjectile_SpellSpawnZombie_ClassReg
 b g_CTFProjectile_SpellTransposeTeleport_ClassReg
 b g_CTFProjectile_ThrowableBreadMonster_ClassReg
 b g_CTFProjectile_ThrowableBrick_ClassReg
 b g_CTFProjectile_ThrowableRepel_ClassReg
 b g_CTFProjectile_Throwable_ClassReg
 b g_CTFPumpkinBomb_ClassReg
 b g_CTFRagdoll_ClassReg
 b g_CTFRaygun_ClassReg
 b g_CTFReviveMarker_ClassReg
 b g_CTFRevolver_ClassReg
 b g_CTFRobotArm_ClassReg
 b g_CTFRobotDestructionLogic_ClassReg
 b g_CTFRobotDestruction_RobotGroup_ClassReg
 b g_CTFRobotDestruction_RobotSpawn_ClassReg
 b g_CTFRobotDestruction_Robot_ClassReg
 b g_CTFRocketLauncher_AirStrike_ClassReg
 b g_CTFRocketLauncher_ClassReg
 b g_CTFRocketLauncher_DirectHit_ClassReg
 b g_CTFRocketLauncher_Mortar_ClassReg
 b g_CTFSMG_ClassReg
 b g_CTFScatterGun_ClassReg
 b g_CTFShotgunBuildingRescue_ClassReg
 b g_CTFShotgun_ClassReg
 b g_CTFShotgun_HWG_ClassReg
 b g_CTFShotgun_Pyro_ClassReg
 b g_CTFShotgun_Revenge_ClassReg
 b g_CTFShotgun_Soldier_ClassReg
 b g_CTFShovel_ClassReg
 b g_CTFSniperRifleClassic_ClassReg
 b g_CTFSniperRifleDecap_ClassReg
 b g_CTFSniperRifle_ClassReg
 b g_CTFSodaPopper_ClassReg
 b g_CTFSpellBook_ClassReg
 b g_CTFStickBomb_ClassReg
 b g_CTFStunBall_ClassReg
 b g_CTFSword_ClassReg
 b g_CTFSyringeGun_ClassReg
 b g_CTFTankBoss_ClassReg
 b g_CTFTauntProp_ClassReg
 b g_CTFTeam_ClassReg
 b g_CTFThrowable_ClassReg
 b g_CTFViewModel_ClassReg
 b g_CTFWeaponBaseGrenadeProj_ClassReg
 b g_CTFWeaponBaseGun_ClassReg
 b g_CTFWeaponBaseMelee_ClassReg
 b g_CTFWeaponBaseMerasmusGrenade_ClassReg
 b g_CTFWeaponBase_ClassReg
 b g_CTFWeaponBuilder_ClassReg
 b g_CTFWeaponInvis_ClassReg
 b g_CTFWeaponPDAExpansion_Dispenser_ClassReg
 b g_CTFWeaponPDAExpansion_Teleporter_ClassReg
 b g_CTFWeaponPDA_ClassReg
 b g_CTFWeaponPDA_Engineer_Build_ClassReg
 b g_CTFWeaponPDA_Engineer_Destroy_ClassReg
 b g_CTFWeaponPDA_Spy_ClassReg
 b g_CTFWeaponSapper_ClassReg
 b g_CTFWearableDemoShield_ClassReg
 b g_CTFWearableItem_ClassReg
 b g_CTFWearableLevelableItem_ClassReg
 b g_CTFWearableRobotArm_ClassReg
 b g_CTFWearableVM_ClassReg
 b g_CTFWearable_ClassReg
 b g_CTFWrench_ClassReg
 b g_CTeamRoundTimer_ClassReg
 b g_CTeamTrainWatcher_ClassReg
 b g_CTeam_ClassReg
 b g_CTeamplayRoundBasedRulesProxy_ClassReg
 b g_CTeleportVortex_ClassReg
 b g_CTesla_ClassReg
 b g_CTestTraceline_ClassReg
 b g_CTest_ProxyToggle_Networkable_ClassReg
 b g_CVGuiScreen_ClassReg
 b g_CVoteController_ClassReg
 b g_CWaterBullet_ClassReg
 b g_CWaterLODControl_ClassReg
 b g_CWeaponIFMBaseCamera_ClassReg
 b g_CWeaponIFMBase_ClassReg
 b g_CWeaponIFMSteadyCam_ClassReg
 b g_CWeaponMedigun_ClassReg
 b g_CWorld_ClassReg
 b g_CZombie_ClassReg
 b g_CleanupDefaultRelationships
 b g_CleanupSymbolTable
 b g_ConceptInfoMap
 b g_Controller
 b g_DataObjectAccessSystem
 b g_DecalSystem
 b g_DefaultViewVectors
 b g_DeleteList
 b g_DustTrail_ClassReg
 b g_EdictTouchLinks
 b g_EntityGroundLinks
 b g_EntityListSystem
 b g_FortuneTellerEffect_BalloonHead
 b g_FortuneTellerEffect_MeleeOnly
 b g_FortuneTellerEffect_SwimmingCurse
 b g_GameMovement
 b g_GameStringPool
 b g_GameUI
 b g_GlobalSymbolDataOps
 b g_HighestActivity
 b g_HighestEvent
 b g_Holiday_AprilFools
 b g_Holiday_Christmas
 b g_Holiday_CommunityUpdate
 b g_Holiday_EndOfTheLine
 b g_Holiday_FullMoon
 b g_Holiday_Halloween
 b g_Holiday_HalloweenOrFullMoon
 b g_Holiday_HalloweenOrFullMoonOrValentines
 b g_Holiday_MeetThePyro
 b g_Holiday_NoHoliday
 b g_Holiday_TF2Birthday
 b g_Holiday_ValentinesDay
 b g_InRestore
 b g_KartSpellList
 b g_KeyValues2ErrorStack
 b g_LagCompensationManager
 b g_LogFileHandle
 b g_Managers
 b g_Mathlib_GammaToLinear
 b g_Mathlib_LinearToGamma
 b g_MessageEntities
 b g_ModelSoundsCache
 b g_ModelSoundsCacheSaver
 b g_ModelSoundsSymbolHelper
 b g_MoveData
 b g_MovieExplosion_ClassReg
 b g_NextBotCombatCharacter_ClassReg
 b g_NormalSpellList
 b g_NotifyList
 b g_NpcTimeThisFrame
 b g_OneWayTransition
 b g_ParticleSmokeGrenade_ClassReg
 b g_PhysAverageSimTime
 b g_PlayerMove
 b g_RS
 b g_RareSpellList
 b g_RecipientFilterPredictionSystem
 b g_RestoredEntities
 b g_RocketTrail_ClassReg
 b g_ServerBenchmark
 b g_ServerBrowser
 b g_ServerChoreoTools
 b g_ServerTools
 b g_SmokeTrail_ClassReg
 b g_SoundEmitterSystem
 b g_SporeExplosion_ClassReg
 b g_SporeTrail_ClassReg
 b g_StartTimeCurThink
 b g_SteamWorksGameStats
 b g_StudioBoneCache
 b g_TEArmorRicochet
 b g_TEBSPDecal
 b g_TEBeamEntPoint
 b g_TEBeamEnts
 b g_TEBeamFollow
 b g_TEBeamLaser
 b g_TEBeamPoints
 b g_TEBeamRing
 b g_TEBeamRingPoint
 b g_TEBeamSpline
 b g_TEBloodSprite
 b g_TEBloodStream
 b g_TEBreakModel
 b g_TEBubbleTrail
 b g_TEBubbles
 b g_TEClientProjectile
 b g_TEDecal
 b g_TEDust
 b g_TEDynamicLight
 b g_TEEffectDispatch
 b g_TEEnergySplash
 b g_TEExplosion
 b g_TEFireBullets
 b g_TEFizz
 b g_TEFootprintDecal
 b g_TEGaussExplosion
 b g_TEGlowSprite
 b g_TEImpact
 b g_TEKillPlayerAttachments
 b g_TELargeFunnel
 b g_TEMetalSparks
 b g_TEMuzzleFlash
 b g_TEPlayerAnimEvent
 b g_TEPlayerDecal
 b g_TEProjectedDecal
 b g_TEShatterSurface
 b g_TEShowLine
 b g_TESmoke
 b g_TESparks
 b g_TESprite
 b g_TESpriteSpray
 b g_TESystem
 b g_TETFBlood
 b g_TETFExplosion
 b g_TETFParticleEffect
 b g_TEWorldDecal
 b g_TFServerBenchmark
 b g_TFViewVectors
 b g_TeleportStack
 b g_Templates
 b g_ThinkChecker
 b g_ToolFrameworkServer
 b g_TouchManager
 b g_TouchTrace
 b g_UserMessages
 b g_VisibilityCache
 b g_WatcherList
 b g_WorldEntity
 b g_bPermitDirectSoundPrecache
 b g_bRandomMap
 b g_bTracingVsCommentaryNodes
 b g_bWarnedAboutMaxplayersInMVM
 b g_fEternaweenAutodisableTime
 b g_iDebuggingTransition
 b g_nBlockedSlides
 b g_nCommandClientIndex
 b g_nRun
 b g_nSlid
 b g_pClassnameSpawnPriority
 b g_pClientPutInServerOverride
 b g_pClosecaption
 b g_pMVMStats
 b g_pMsgBuffer
 b g_pNextLink
 b g_pPrecacheRegisters
 b g_pSoundEnt
 b g_pTestObj
 b g_pcv_ThreadMode
 b g_pcv_commentary
 b g_pcv_hideServer
 b game_end
 b game_forcerespawn
 b game_gib_manager
 b game_intro_viewpoint
 b game_player_equip
 b game_player_team
 b game_ragdoll_manager
 b game_round_win
 b game_score
 b game_text
 b game_text_tf
 b game_ui
 b game_weapon_manager
 b game_zone_player
 b generic_actor
 b ghost
 b ghost_spawn
 b gib
 b gibshooter
 b give_command
 b givecurrentammo
 b global_set
 b god
 b grenade
 b groundlist
 b gs_pRecursivePlayerCheck
 b guard variable for CAI_BaseNPC::NPCThink()::timer
 b guard variable for CAI_BaseNPC::RebalanceThinks()::rebalanceCandidates
 b guard variable for CAI_BaseNPC::TranslateActivity(Activity, Activity*)::sUniqueActivities
 b guard variable for CAI_BaseNPC::UpdateEfficiency(bool)::vPlayerEyePosition
 b guard variable for CAI_BaseNPC::UpdateEfficiency(bool)::vPlayerForward
 b guard variable for CAI_Path::BaseGoalPosition() const::vecResult
 b guard variable for CBaseCombatCharacter::FindEntityRelationship(CBaseEntity*)::dummy
 b guard variable for CBaseCombatWeapon::GetBulletSpread()::cone
 b guard variable for CBasePlayer::EyeAngles()::angEyeWorld
 b guard variable for CBeam::GetAbsEndPos() const::vecAbsPos
 b guard variable for CCollisionProperty::CollisionToWorldTransform() const::s_matTemp
 b guard variable for CCurveData::GetBoundedSample(ICurveDataAccessor*, int, bool&)::nullend
 b guard variable for CCurveData::GetBoundedSample(ICurveDataAccessor*, int, bool&)::nullstart
 b guard variable for CEconItem::GetCustomDesc() const::pAttrDef_CustomDesc
 b guard variable for CEconItem::GetCustomName() const::pAttrDef_CustomName
 b guard variable for CEconItem::GetStyle() const::pAttrDef_ItemStyleOverride
 b guard variable for CEconItem::GetStyle() const::pAttrDef_ItemStyleStrange
 b guard variable for CEconItem::SetCustomDesc(char const*)::pAttrDef_CustomDesc
 b guard variable for CEconItem::SetCustomName(char const*)::pAttrDef_CustomName
 b guard variable for CEconItemDefinition::BInitFromTestItemKVs(int, KeyValues*, CUtlVector<CUtlString, CUtlMemory<CUtlString, int> >*)::pAttrDef_AttachParticleStatic
 b guard variable for CEconItemDefinition::BInitFromTestItemKVs(int, KeyValues*, CUtlVector<CUtlString, CUtlMemory<CUtlString, int> >*)::pAttrDef_PaintRGB
 b guard variable for CEconItemDefinition::GetIconDisplayModel() const::pAttribString
 b guard variable for CEconItemSchema::BInitItems(KeyValues*, CUtlVector<CUtlString, CUtlMemory<CUtlString, int> >*)::pAttrDef_ContainsCollection
 b guard variable for CEconItemSchema::BRecurseiveVerifyLootListItemDropDates(CEconLootListDefinition const*, CEconLootListDefinition const*, CUtlVector<CUtlString, CUtlMemory<CUtlString, int> >*) const::pAttribDef_EndDropDate
 b guard variable for CEconItemSchema::BRecurseiveVerifyLootListItemDropDates(CEconLootListDefinition const*, CEconLootListDefinition const*, CUtlVector<CUtlString, CUtlMemory<CUtlString, int> >*) const::pAttribDef_StartDropDate
 b guard variable for CEconItemSchema::GetItemDefinition(int)::s_pEmptyDefinition
 b guard variable for CEconItemView::GetItemStyle() const::pAttrDef_ItemStyleOverride
 b guard variable for CEconItemView::GetItemStyle() const::pAttrDef_ItemStyleStrange
 b guard variable for CEconItemView::GetModifiedRGBValue(bool)::pAttr_Paint
 b guard variable for CEconItemView::GetModifiedRGBValue(bool)::pAttr_Paint2
 b guard variable for CEconItemView::GetModifiedRGBValue(bool)::pAttr_PaintOverride
 b guard variable for CEconLootListDefinition::BInitFromKV(KeyValues*, CEconItemSchema&, CUtlVector<CUtlString, CUtlMemory<CUtlString, int> >*)::pAttribDef_EndDropDate
 b guard variable for CEconLootListDefinition::BInitFromKV(KeyValues*, CEconItemSchema&, CUtlVector<CUtlString, CUtlMemory<CUtlString, int> >*)::pAttribDef_StartDropDate
 b guard variable for CEconTool_DuckToken::CanApplyTo(IEconItemInterface const*, IEconItemInterface const*) const::pAttrDef_DuckBadgeLevel
 b guard variable for CEconTool_Festivizer::CanApplyTo(IEconItemInterface const*, IEconItemInterface const*) const::pAttribDef_Festivizer
 b guard variable for CEconTool_GiftWrap::CanApplyTo(IEconItemInterface const*, IEconItemInterface const*) const::pAttrDef_CannotGiftwrap
 b guard variable for CEconTool_GiftWrap::CanApplyTo(IEconItemInterface const*, IEconItemInterface const*) const::pAttrDef_ToolNeedsGiftwrap
 b guard variable for CEconTool_KillStreakifier::CanApplyTo(IEconItemInterface const*, IEconItemInterface const*) const::pAttribDef_KillStreakEffect
 b guard variable for CEconTool_StrangePart::CanApplyTo(IEconItemInterface const*, IEconItemInterface const*) const::pAttrDef_StrangePartCounterID
 b guard variable for CEconTool_Xifier::CanApplyTo(IEconItemInterface const*, IEconItemInterface const*) const::pAttribDef_StatModule
 b guard variable for CEconTool_Xifier::CanApplyTo(IEconItemInterface const*, IEconItemInterface const*) const::pAttribDef_ToolTargetItem
 b guard variable for CEyeballBoss::PickNewSpawnSpot() const::spot
 b guard variable for CEyeballBossLocomotion::GetFeet() const::feet
 b guard variable for CFlexAnimationTrack::GetBoundedSample(int, bool&, int)::nullend
 b guard variable for CFlexAnimationTrack::GetBoundedSample(int, bool&, int)::nullstart
 b guard variable for CHalloweenSoulPack::ItemTouch(CBaseEntity*)::hItemDef
 b guard variable for CKeyValuesDumpContextAsDevMsg::KvBeginKey(KeyValues*, int)::r_developer
 b guard variable for CNavArea::ComputeVisibilityDelta(CNavArea const*) const::delta
 b guard variable for CNavArea::Draw() const::blink
 b guard variable for CNavMesh::DrawEditMode()::host_thread_mode
 b guard variable for CNavMesh::GetNearestNavArea(Vector const&, bool, float, bool, bool, int) const::searchMarker
 b guard variable for CNavMesh::UpdateGeneration(float)::host_thread_mode
 b guard variable for CNavMesh::UpdateGeneration(float)::s_playerSettleTimer
 b guard variable for CNavMesh::UpdateGeneration(float)::s_unlitAreas
 b guard variable for CNavMesh::UpdateGeneration(float)::s_unlitSeedAreas
 b guard variable for CNavNode::GetNode(Vector const&)::lookup
 b guard variable for CQuestItemTracker::UpdatePointsFromSOItem()::pAttribDef_EarnedBonusPoints
 b guard variable for CQuestItemTracker::UpdatePointsFromSOItem()::pAttribDef_EarnedStandardPoints
 b guard variable for CServerGameClients::ClientSettingsChanged(edict_t*)::pMax
 b guard variable for CServerGameClients::ClientSettingsChanged(edict_t*)::pMaxUpdateRate
 b guard variable for CServerGameClients::ClientSettingsChanged(edict_t*)::pMin
 b guard variable for CServerGameClients::ClientSettingsChanged(edict_t*)::pMinUpdateRate
 b guard variable for CStudioHdr::pSeqdesc(int)::s_nil_seq
 b guard variable for CTFBot::GetMaxAttackRange() const::pItemDef_GiantFlamethrower
 b guard variable for CTFBot::ModifyMaxHealth(int, bool, bool)::pAttrDef_HiddenMaxHealthNonBuffed
 b guard variable for CTFBotDeliverFlag::UpgradeOverTime(CTFBot*)::pAttrDef_HealthRegen
 b guard variable for CTFBotEngineerBuildDispenser::Update(CTFBot*, float)::buildReply
 b guard variable for CTFBotMvMDeployBomb::OnEnd(CTFBot*, Action<CTFBot>*)::pAttrDef_AirblastVerticalVulnerability
 b guard variable for CTFBotMvMDeployBomb::OnStart(CTFBot*, Action<CTFBot>*)::pAttrDef_AirblastVerticalVulnerability
 b guard variable for CTFFlameEntity::OnCollide(CBaseEntity*)::flipTaunt
 b guard variable for CTFGCServerSystem::PreClientUpdate()::sv_password
 b guard variable for CTFGCServerSystem::PreClientUpdate()::sv_visiblemaxplayers
 b guard variable for CTFGCServerSystem::UpdateConnectedPlayersAndServerInfo(CMsgGameServerMatchmakingStatus_Event, bool)::sv_region
 b guard variable for CTFGCServerSystem::UpdateConnectedPlayersAndServerInfo(CMsgGameServerMatchmakingStatus_Event, bool)::sv_tags
 b guard variable for CTFGCServerSystem::UpdateConnectedPlayersAndServerInfo(CMsgGameServerMatchmakingStatus_Event, bool)::sv_visiblemaxplayers
 b guard variable for CTFGameRules::DropBonusDuck(Vector const&, CTFPlayer*, CTFPlayer*, CTFPlayer*, bool, bool) const::pAttr_DuckLevelBadge
 b guard variable for CTFGameRules::HandleScrambleTeams()::playerVector
 b guard variable for CTFGameRules::MatchSummaryEnd()::tf_bot_quota
 b guard variable for CTFGameRules::MatchSummaryEnd()::tf_bot_quota_mode
 b guard variable for CTFGameRules::SetupOnRoundRunning()::tf_bot_quota
 b guard variable for CTFGameRules::SetupOnRoundRunning()::tf_bot_quota_mode
 b guard variable for CTFInventoryManager::GetBaseItemForClass(int, int)::pItemDef_GrapplingHook
 b guard variable for CTFInventoryManager::GetBaseItemForClass(int, int)::pItemDef_MvMCanteen
 b guard variable for CTFInventoryManager::GetBaseItemForClass(int, int)::pItemDef_SpellBook
 b guard variable for CTFItemSchema::BCanStrangeFilterApplyToStrangeSlotInItem(unsigned int, unsigned int, IEconItemInterface const*, int, unsigned int*) const::pAttrDef_CannotRestore
 b guard variable for CTFItemSchema::BCanStrangeFilterApplyToStrangeSlotInItem(unsigned int, unsigned int, IEconItemInterface const*, int, unsigned int*) const::pAttrDef_IsOperationPass
 b guard variable for CTFJar::GetProjectileEntityName(CAttribute_String*)::pAttrDef_ProjectileEntityName
 b guard variable for CTFNavArea::ComputeInvasionAreaVectors()::searchMarker
 b guard variable for CTFPlayer::AcceptTauntWithPartner(CTFPlayer*)::pAttrDef_TauntAttackName
 b guard variable for CTFPlayer::AcceptTauntWithPartner(CTFPlayer*)::pAttrDef_TauntAttackTime
 b guard variable for CTFPlayer::Event_Killed(CTakeDamageInfo const&)::congaTaunt
 b guard variable for CTFPlayer::Event_Killed(CTakeDamageInfo const&)::dosidoTaunt
 b guard variable for CTFPlayer::IsDemowolf() const::ppItemDefWearables
 b guard variable for CTFPlayer::IsFairyHeavy() const::ppItemDefWearables
 b guard variable for CTFPlayer::IsFrankenHeavy() const::ppItemDefWearables
 b guard variable for CTFPlayer::IsRobotCostumeEquipped() const::ppItemDefWearables
 b guard variable for CTFPlayer::IsWormsGearEquipped() const::ppItemDefWearables
 b guard variable for CTFPlayer::ItemIsAllowed(CEconItemView*)::pAttrib_AllowedInMedievalMode
 b guard variable for CTFPlayer::ModifyOrAppendCriteria(AI_CriteriaSet&)::pAttrDef_AdditionalHalloweenResponseRule
 b guard variable for CTFPlayer::ParseSharedTauntDataFromEconItemView(CEconItemView*)::pAttrDef_TauntForceMoveForward
 b guard variable for CTFPlayer::ParseSharedTauntDataFromEconItemView(CEconItemView*)::pAttrDef_TauntMoveAccelerationTime
 b guard variable for CTFPlayer::ParseSharedTauntDataFromEconItemView(CEconItemView*)::pAttrDef_TauntMoveSpeed
 b guard variable for CTFPlayer::ParseSharedTauntDataFromEconItemView(CEconItemView*)::pAttrDef_TauntTurnAccelerationTime
 b guard variable for CTFPlayer::ParseSharedTauntDataFromEconItemView(CEconItemView*)::pAttrDef_TauntTurnSpeed
 b guard variable for CTFPlayer::PlayTauntSceneFromItem(CEconItemView*)::congaTaunt
 b guard variable for CTFPlayer::PlayTauntSceneFromItem(CEconItemView*)::pAttrDef_TauntAttackName
 b guard variable for CTFPlayer::PlayTauntSceneFromItem(CEconItemView*)::pAttrDef_TauntAttackTime
 b guard variable for CTFPlayer::PlayTauntSceneFromItem(CEconItemView*)::pAttrDef_TauntForceWeaponSlot
 b guard variable for CTFPlayer::PlayTauntSceneFromItem(CEconItemView*)::pAttrDef_TauntMimic
 b guard variable for CTFPlayer::PlayTauntSceneFromItem(CEconItemView*)::pAttrDef_TauntPressAndHold
 b guard variable for CTFPlayer::PlayTauntSceneFromItem(CEconItemView*)::pAttrDef_TauntSuccessSound
 b guard variable for CTFPlayer::PlayTauntSceneFromItem(CEconItemView*)::pAttrDef_TauntSuccessSoundLoop
 b guard variable for CTFPlayer::PlayTauntSceneFromItem(CEconItemView*)::pAttrDef_TauntSuccessSoundLoopOffset
 b guard variable for CTFPlayer::PlayTauntSceneFromItem(CEconItemView*)::pAttrDef_TauntSuccessSoundOffset
 b guard variable for CTFPlayerInventory::SOCreated(CSteamID const&, GCSDK::CSharedObject const*, GCSDK::ESOCacheEvent)::pItemDef_HalloweenPass
 b guard variable for CTFPlayerInventory::SOCreated(CSteamID const&, GCSDK::CSharedObject const*, GCSDK::ESOCacheEvent)::pItemDef_InvasionPass
 b guard variable for CTFPlayerInventory::SOCreated(CSteamID const&, GCSDK::CSharedObject const*, GCSDK::ESOCacheEvent)::pItemDef_Summer2015Operation
 b guard variable for CTFPlayerInventory::SOCreated(CSteamID const&, GCSDK::CSharedObject const*, GCSDK::ESOCacheEvent)::pItemDef_Winter2016Pass
 b guard variable for CTFPlayerShared::OnRemoveHalloweenTiny()::vTest
 b guard variable for CTFPowerupBottle::SetNumCharges(unsigned char)::pAttrDef_PowerupCharges
 b guard variable for CTFWeaponBase::GetBulletSpread()::cone
 b guard variable for CTFWeaponBaseGun::GetCustomProjectileModel(CAttribute_String*)::pAttrDef_ProjectileEntityName
 b guard variable for CTFWeaponBaseMelee::DoSwingTraceInternal(CGameTrace&, bool, CUtlVector<CGameTrace, CUtlMemory<CGameTrace, int> >*)::vecSwingMaxsBase
 b guard variable for CTFWeaponBaseMelee::DoSwingTraceInternal(CGameTrace&, bool, CUtlVector<CGameTrace, CUtlMemory<CGameTrace, int> >*)::vecSwingMinsBase
 b guard variable for CTFWrench::Smack()::vecSwingMaxs
 b guard variable for CTFWrench::Smack()::vecSwingMins
 b guard variable for CTestTraceline::Spin()::traceline_spin
 b guard variable for CTextStat::GetTextStatsList()::theList
 b guard variable for CalcLocalHierarchyAnimation(CStudioHdr const*, matrix3x4_t*, CBoneBitList&, Vector*, Quaternion*, mstudiobone_t const*, mstudiolocalhierarchy_t*, int, int, float, int, float, int)::rootXform
 b guard variable for CryptoPP::NullRNG()::s_nullRNG
 b guard variable for CryptoPP::TheBitBucket()::bitBucket
 b guard variable for EconEntity_NonEquippedItemKillTracking(CTFPlayer*, CTFPlayer*, unsigned short, kill_eater_event_t, int)::pAttrDef_DeactiveDate
 b guard variable for EconEntity_NonEquippedItemKillTracking_NoPartnerBatched(CTFPlayer*, unsigned short, kill_eater_event_t, int)::pAttrDef_DeactiveDate
 b guard variable for EntityFactoryDictionary()::s_EntityFactory
 b guard variable for GCSDK::GMapJobTypesByMsg()::s_MapJobTypes
 b guard variable for GCSDK::GMapJobTypesByName()::s_MapJobTypes
 b guard variable for GCSDK::GProtoBufMsgMemoryPoolMgr()::s_ProtoBufMsgMemoryPoolMgr
 b guard variable for GetAmmoDef()::def
 b guard variable for GetEarnedBonusPoints(IEconItemInterface const*)::pAttribDef_EarnedBonusPoints
 b guard variable for GetEarnedStandardPoints(IEconItemInterface const*)::pAttribDef_EarnedStandardPoints
 b guard variable for GetMatchGroupDescription(EMatchGroup const&)::descBootcamp
 b guard variable for GetMatchGroupDescription(EMatchGroup const&)::descCasual12v12
 b guard variable for GetMatchGroupDescription(EMatchGroup const&)::descCasual6v6
 b guard variable for GetMatchGroupDescription(EMatchGroup const&)::descCasual9v9
 b guard variable for GetMatchGroupDescription(EMatchGroup const&)::descLadder12v12
 b guard variable for GetMatchGroupDescription(EMatchGroup const&)::descLadder6v6
 b guard variable for GetMatchGroupDescription(EMatchGroup const&)::descLadder9v9
 b guard variable for GetMatchGroupDescription(EMatchGroup const&)::descMannup
 b guard variable for GetReplayGameStatsHelper()::s_Instance
 b guard variable for GetSceneManager()::s_SceneManager
 b guard variable for GetUniverse()::steamUniverse
 b guard variable for GetWarTrackerManager()::trackerManager
 b guard variable for IBody::GetEyePosition() const::eye
 b guard variable for IBody::GetViewVector() const::view
 b guard variable for IEconItemInterface::GetCustomPaintKitWear(float&) const::pAttrDef_DefaultWear
 b guard variable for IEconItemInterface::GetCustomPaintKitWear(float&) const::pAttrDef_PaintKitWear
 b guard variable for IEconItemInterface::GetExpirationDate() const::pAttrib_ExpirationDate
 b guard variable for IEconItemInterface::GetTradableAfterDateTime() const::pAttrib_TradableAfter
 b guard variable for IEconItemInterface::IsCommodity() const::pAttrib_IsCommodity
 b guard variable for IEconItemInterface::IsMarketable() const::pAttrDef_IsAustralium
 b guard variable for IEconItemInterface::IsMarketable() const::pAttrDef_IsLimited
 b guard variable for IEconItemInterface::IsMarketable() const::pAttrDef_IsMarketable
 b guard variable for IEconItemInterface::IsMarketable() const::pAttr_killstreak
 b guard variable for IEconItemInterface::IsMarketable() const::pItemDef_GlitchedCircuit
 b guard variable for IEconItemInterface::IsPermanentlyUntradable() const::pAttrib_AlwaysTradable
 b guard variable for IEconItemInterface::IsPermanentlyUntradable() const::pAttrib_CannotTrade
 b guard variable for IEconItemInterface::IsPermanentlyUntradable() const::pAttrib_NonEconomy
 b guard variable for IEconItemInterface::IsUsableInCrafting() const::pAttrib_AlwaysUsableInCraft
 b guard variable for IEconItemInterface::IsUsableInCrafting() const::pAttrib_NeverCraftable
 b guard variable for IEconTool::ShouldDisplayQuantity(IEconItemInterface const*) const::pAttrDef_UnlimitedQuantity
 b guard variable for IVision::IsLineOfSightClear(Vector const&) const::_counter
 b guard variable for MissingSceneWarning(char const*)::missing
 b guard variable for MoveHelperServer()::s_MoveHelperServer
 b guard variable for PlayerBody::Upkeep()::bot_mimic
 b guard variable for PlayerHasDuckStreaks(CTFPlayer*)::pAttr_DuckStreaks
 b guard variable for PlayerLocomotion::GetGroundNormal() const::up
 b guard variable for QuestObjectiveManager()::g_QuestObjectiveManager
 b guard variable for SelectPartnerTaunt(CTFItemDefinition const*, CTFPlayer*, CTFPlayer*, char const**, char const**)::rpsTaunt
 b guard variable for TheNextBots()::manager
 b guard variable for TheTacticalMissions()::manager
 b guard variable for UTIL_EntitiesInPVS(CBaseEntity*, CBaseEntity*)::lastOrg
 b guard variable for WaveTrace(char const*, char const*)::s_WaveTrace
 b halloween_fortune_teller
 b halloween_souls_pack
 b halloween_zapper
 b hammer_update_entity_command
 b hammer_update_safe_entities_command
 b hammer_updateignorelist
 b handle_dummy
 b handle_test
 b headless_hatman
 b hightower_teleport_vortex
 b hullcolor
 b hurtme
 b ice_sboxes_initialised
 b ifm_basecamera_camerastate_command
 b info_camera_link
 b info_constraint_anchor
 b info_hint
 b info_intermission
 b info_ladder_dismount
 b info_landmark
 b info_lighting_relative
 b info_mass_center
 b info_node
 b info_node_air
 b info_node_air_hint
 b info_node_climb
 b info_node_hint
 b info_node_link
 b info_node_link_controller
 b info_npc_spawn_destination
 b info_null
 b info_observer_point
 b info_overlay_accessor
 b info_particle_system
 b info_passtime_ball_spawn
 b info_player_deathmatch
 b info_player_start
 b info_player_teamspawn
 b info_populator
 b info_powerup_spawn
 b info_projecteddecal
 b info_radial_link_controller
 b info_target
 b info_teleport_destination
 b infodecal
 b instanced_scripted_scene
 b isBossForceSpawning
 b item_ammopack_full
 b item_ammopack_medium
 b item_ammopack_small
 b item_armor
 b item_bonuspack
 b item_currencypack_custom
 b item_currencypack_large
 b item_currencypack_medium
 b item_currencypack_small
 b item_healthammokit
 b item_healthkit_full
 b item_healthkit_medium
 b item_healthkit_small
 b item_powerup_crit
 b item_powerup_rune
 b item_powerup_rune_temp
 b item_powerup_uber
 b item_quality_chance_common
 b item_quality_chance_rare
 b item_quality_chance_unique
 b item_show_whitelistable_definitions_command
 b item_sodacan
 b item_teamflag
 b item_teamflag_return_icon
 b kDefaultFacingFOV
 b kdtree_test
 b keyframe_rope
 b keyframe_track
 b kill_command
 b killvector_command
 b lastMsgTime
 b light
 b light_dynamic
 b light_environment
 b light_glspot
 b light_spot
 b lineartoscreen
 b lineartotexture
 b logic_active_autosave
 b logic_auto
 b logic_autosave
 b logic_branch
 b logic_branch_listener
 b logic_case
 b logic_choreographed_scene
 b logic_collision_pair
 b logic_compare
 b logic_lineto
 b logic_measure_movement
 b logic_multicompare
 b logic_navigation
 b logic_proximity
 b logic_relay
 b logic_scene_list_manager
 b logic_timer
 b m_ActivityRemapDatabase
 b m_PVS
 b m_PlayerClassInfoDatabase
 b m_WeaponInfoDatabase
 b m_nPVSSize
 b mapobj_cart_dispenser
 b material_modify_control
 b math_colorblend
 b math_counter
 b math_remap
 b merasmus
 b merasmus_dancer
 b mission_list_command
 b mission_show_command
 b mod_load_showstall
 b momentary_door
 b momentary_rot_button
 b monster_furniture
 b monster_generic
 b monster_resource
 b motdfile
 b motdfile_text
 b move_keyframed
 b move_rope
 b mp_disable_autokick_command
 b mp_forcerespawnplayers
 b mp_forcewin_command
 b mp_scrambleteams
 b mp_switchteams
 b mp_tournament_allow_non_admin_restart
 b mp_tournament_restart
 b multisource
 b nFrameNumber
 b nPropBreakablesPerFrameCount
 b nav_add_to_selected_set
 b nav_add_to_selected_set_by_id_command
 b nav_analyze
 b nav_analyze_scripted
 b nav_avoid
 b nav_begin_area
 b nav_begin_deselecting
 b nav_begin_drag_deselecting
 b nav_begin_drag_selecting
 b nav_begin_selecting
 b nav_begin_shift_xy
 b nav_build_ladder
 b nav_check_file_consistency
 b nav_check_floor
 b nav_check_stairs
 b nav_chop_selected_command
 b nav_clear_selected_set
 b nav_clear_walkable_marks
 b nav_compress_id
 b nav_connect
 b nav_corner_lower_command
 b nav_corner_place_on_ground_command
 b nav_corner_raise_command
 b nav_corner_select
 b nav_crouch
 b nav_delete
 b nav_delete_marked
 b nav_disconnect
 b nav_disconnect_outgoing_oneways
 b nav_dont_hide
 b nav_dump_selected_set_positions_command
 b nav_end_area
 b nav_end_deselecting
 b nav_end_drag_deselecting
 b nav_end_drag_selecting
 b nav_end_selecting
 b nav_end_shift_xy
 b nav_flood_select_command
 b nav_gen_cliffs_approx_command
 b nav_generate
 b nav_generate_incremental
 b nav_jump
 b nav_ladder_flip
 b nav_load
 b nav_lower_drag_volume_max
 b nav_lower_drag_volume_min
 b nav_make_sniper_spots
 b nav_mark
 b nav_mark_unnamed
 b nav_mark_walkable
 b nav_merge
 b nav_merge_mesh_command
 b nav_no_hostages
 b nav_no_jump
 b nav_place_floodfill
 b nav_place_list
 b nav_place_pick
 b nav_place_replace
 b nav_place_set
 b nav_precise
 b nav_raise_drag_volume_max
 b nav_raise_drag_volume_min
 b nav_recall_selected_set
 b nav_remove_from_selected_set
 b nav_remove_jump_areas
 b nav_run
 b nav_save
 b nav_save_selected_command
 b nav_select_blocked_areas_command
 b nav_select_damaging_areas_command
 b nav_select_half_space_command
 b nav_select_invalid_areas
 b nav_select_larger_than_command
 b nav_select_obstructed_areas_command
 b nav_select_orphans_command
 b nav_select_overlapping
 b nav_select_radius_command
 b nav_select_stairs_command
 b nav_set_place_mode
 b nav_shift_command
 b nav_show_dumped_positions_command
 b nav_simplify_selected_command
 b nav_splice
 b nav_split
 b nav_stand
 b nav_stop
 b nav_store_selected_set
 b nav_strip
 b nav_subdivide_command
 b nav_test_stairs_command
 b nav_toggle_deselecting
 b nav_toggle_in_selected_set
 b nav_toggle_place_mode
 b nav_toggle_place_painting
 b nav_toggle_selected_set
 b nav_toggle_selecting
 b nav_transient
 b nav_unmark
 b nav_update_blocked
 b nav_update_lighting_command
 b nav_use_place
 b nav_walk
 b nav_warp_to_mark
 b nb_command_command
 b nb_delete_all_command
 b nb_move_to_cursor_command
 b noclip
 b npc_concussiongrenade
 b npc_contactgrenade
 b npc_furniture
 b npc_handgrenade
 b npc_maker
 b npc_speakall_command
 b npc_template_maker
 b npc_vehicledriver
 b num_teams
 b obj_attachment_sapper
 b obj_dispenser
 b obj_dump_damage
 b obj_sentrygun
 b obj_teleporter
 b old_armor
 b particle_test_start
 b particle_test_stop
 b passtime_ball
 b passtime_logic
 b path_corner
 b path_corner_crash
 b path_track
 b pd_dispenser
 b phys_ballsocket
 b phys_bone_follower
 b phys_constraint
 b phys_constraintsystem
 b phys_convert
 b phys_hinge
 b phys_keepupright
 b phys_lengthconstraint
 b phys_magnet
 b phys_motor
 b phys_penetration_error_time
 b phys_pulleyconstraint
 b phys_ragdollconstraint
 b phys_ragdollmagnet
 b phys_slideconstraint
 b phys_spring
 b phys_thruster
 b phys_torque
 b physics_budget_command
 b physics_cannister
 b physics_constraints_command
 b physics_debug_entity_command
 b physics_entity_solver
 b physics_highlight_active_command
 b physics_npc_solver
 b physics_prop
 b physics_prop_ragdoll
 b physics_report_active_command
 b physics_select_command
 b physicsshadowupdate_render
 b picker
 b player
 b player_loadsaved
 b player_manager
 b player_speedmod
 b player_weaponstrip
 b point_anglesensor
 b point_angularvelocitysensor
 b point_bonusmaps_accessor
 b point_camera
 b point_clientcommand
 b point_commentary_node
 b point_commentary_viewpoint
 b point_devshot_camera
 b point_enable_motion_fixup
 b point_gamestats_counter
 b point_hurt
 b point_intermission
 b point_message
 b point_playermoveconstraint
 b point_populator_interface
 b point_posecontroller
 b point_proximity_sensor
 b point_push
 b point_servercommand
 b point_spotlight
 b point_teleport
 b point_template
 b point_tesla
 b point_velocitysensor
 b point_viewcontrol
 b populator_internal_spawn_point
 b precache_function_EffectsPrecache
 b precache_function_PrecacheRing
 b precache_function_PrecacheSyringe
 b precache_other_base_boss
 b precache_other_bot_npc_archer
 b precache_other_bot_npc_decoy
 b precache_other_entity_revive_marker
 b precache_other_entityflame
 b precache_other_func_nobuild
 b precache_other_func_suggested_build
 b precache_other_halloween_souls_pack
 b precache_other_info_populator
 b precache_other_obj_attachment_sapper
 b precache_other_obj_dispenser
 b precache_other_obj_sentrygun
 b precache_other_obj_teleporter
 b precache_other_passtime_ball
 b precache_other_passtime_logic
 b precache_other_player
 b precache_other_spraycan
 b precache_other_tank_boss
 b precache_other_tank_destruction
 b precache_other_team_round_timer
 b precache_other_tf_ammo_pack
 b precache_other_tf_dropped_weapon
 b precache_other_tf_powerup_bottle
 b precache_other_tf_projectile_rocket
 b precache_other_tf_projectile_syringe
 b precache_other_tf_weaponbase_grenade_proj
 b precache_other_tf_wearable
 b precache_other_tf_wearable_vm
 b precache_other_vgui_screen
 b precache_other_wearable_item
 b precache_weapon_entity_medigun_shield
 b precache_weapon_tf_projectile_arrow
 b precache_weapon_tf_projectile_ball_ornament
 b precache_weapon_tf_projectile_cleaver
 b precache_weapon_tf_projectile_energy_ball
 b precache_weapon_tf_projectile_energy_ring
 b precache_weapon_tf_projectile_flare
 b precache_weapon_tf_projectile_grapplinghook
 b precache_weapon_tf_projectile_healing_bolt
 b precache_weapon_tf_projectile_jar
 b precache_weapon_tf_projectile_jar_milk
 b precache_weapon_tf_projectile_lightningorb
 b precache_weapon_tf_projectile_pipe
 b precache_weapon_tf_projectile_pipe_remote
 b precache_weapon_tf_projectile_spellbats
 b precache_weapon_tf_projectile_spellfireball
 b precache_weapon_tf_projectile_spellkartbats
 b precache_weapon_tf_projectile_spellkartorb
 b precache_weapon_tf_projectile_spellmeteorshower
 b precache_weapon_tf_projectile_spellmirv
 b precache_weapon_tf_projectile_spellpumpkin
 b precache_weapon_tf_projectile_spellspawnboss
 b precache_weapon_tf_projectile_spellspawnhorde
 b precache_weapon_tf_projectile_spellspawnzombie
 b precache_weapon_tf_projectile_spelltransposeteleport
 b precache_weapon_tf_projectile_stun_ball
 b precache_weapon_tf_projectile_throwable
 b precache_weapon_tf_projectile_throwable_breadmonster
 b precache_weapon_tf_projectile_throwable_brick
 b precache_weapon_tf_projectile_throwable_repel
 b precache_weapon_tf_weapon_bat
 b precache_weapon_tf_weapon_bat_fish
 b precache_weapon_tf_weapon_bat_giftwrap
 b precache_weapon_tf_weapon_bat_wood
 b precache_weapon_tf_weapon_bonesaw
 b precache_weapon_tf_weapon_bottle
 b precache_weapon_tf_weapon_buff_item
 b precache_weapon_tf_weapon_builder
 b precache_weapon_tf_weapon_cannon
 b precache_weapon_tf_weapon_charged_smg
 b precache_weapon_tf_weapon_cleaver
 b precache_weapon_tf_weapon_club
 b precache_weapon_tf_weapon_compound_bow
 b precache_weapon_tf_weapon_crossbow
 b precache_weapon_tf_weapon_drg_pomson
 b precache_weapon_tf_weapon_fireaxe
 b precache_weapon_tf_weapon_fists
 b precache_weapon_tf_weapon_flamethrower
 b precache_weapon_tf_weapon_flaregun
 b precache_weapon_tf_weapon_flaregun_revenge
 b precache_weapon_tf_weapon_grapplinghook
 b precache_weapon_tf_weapon_grenadelauncher
 b precache_weapon_tf_weapon_handgun_scout_primary
 b precache_weapon_tf_weapon_handgun_scout_secondary
 b precache_weapon_tf_weapon_invis
 b precache_weapon_tf_weapon_jar
 b precache_weapon_tf_weapon_jar_milk
 b precache_weapon_tf_weapon_katana
 b precache_weapon_tf_weapon_knife
 b precache_weapon_tf_weapon_laser_pointer
 b precache_weapon_tf_weapon_lunchbox
 b precache_weapon_tf_weapon_lunchbox_drink
 b precache_weapon_tf_weapon_mechanical_arm
 b precache_weapon_tf_weapon_medigun
 b precache_weapon_tf_weapon_minigun
 b precache_weapon_tf_weapon_parachute
 b precache_weapon_tf_weapon_parachute_primary
 b precache_weapon_tf_weapon_parachute_secondary
 b precache_weapon_tf_weapon_particle_cannon
 b precache_weapon_tf_weapon_passtime_gun
 b precache_weapon_tf_weapon_pda_engineer_build
 b precache_weapon_tf_weapon_pda_engineer_destroy
 b precache_weapon_tf_weapon_pda_spy
 b precache_weapon_tf_weapon_pep_brawler_blaster
 b precache_weapon_tf_weapon_pipebomblauncher
 b precache_weapon_tf_weapon_pistol
 b precache_weapon_tf_weapon_pistol_scout
 b precache_weapon_tf_weapon_raygun
 b precache_weapon_tf_weapon_revolver
 b precache_weapon_tf_weapon_robot_arm
 b precache_weapon_tf_weapon_rocketlauncher
 b precache_weapon_tf_weapon_rocketlauncher_airstrike
 b precache_weapon_tf_weapon_rocketlauncher_directhit
 b precache_weapon_tf_weapon_sapper
 b precache_weapon_tf_weapon_scattergun
 b precache_weapon_tf_weapon_sentry_revenge
 b precache_weapon_tf_weapon_shotgun_building_rescue
 b precache_weapon_tf_weapon_shotgun_hwg
 b precache_weapon_tf_weapon_shotgun_primary
 b precache_weapon_tf_weapon_shotgun_pyro
 b precache_weapon_tf_weapon_shotgun_soldier
 b precache_weapon_tf_weapon_shovel
 b precache_weapon_tf_weapon_smg
 b precache_weapon_tf_weapon_sniperrifle
 b precache_weapon_tf_weapon_sniperrifle_classic
 b precache_weapon_tf_weapon_sniperrifle_decap
 b precache_weapon_tf_weapon_soda_popper
 b precache_weapon_tf_weapon_spellbook
 b precache_weapon_tf_weapon_stickbomb
 b precache_weapon_tf_weapon_sword
 b precache_weapon_tf_weapon_syringegun_medic
 b precache_weapon_tf_weapon_wrench
 b prop_debug
 b prop_door_rotating
 b prop_dynamic
 b prop_dynamic_create
 b prop_dynamic_ornament
 b prop_dynamic_override
 b prop_physics
 b prop_physics_create
 b prop_physics_multiplayer
 b prop_physics_override
 b prop_physics_respawnable
 b prop_ragdoll
 b prop_ragdoll_attached
 b prop_soccer_ball
 b prop_sphere
 b prop_vehicle
 b prop_vehicle_driveable
 b protobuf_AddDesc_base_5fgcmessages_2eproto()::already_here
 b protobuf_AddDesc_econ_5fgcmessages_2eproto()::already_here
 b protobuf_AddDesc_gcsdk_5fgcmessages_2eproto()::already_here
 b protobuf_AddDesc_gcsystemmsgs_2eproto()::already_here
 b protobuf_AddDesc_steammessages_2eproto()::already_here
 b protobuf_AddDesc_tf_5fgcmessages_2eproto()::already_here
 b raggib
 b randommap
 b rd_robot_dispenser
 b reference temporary #0 for CryptoPP::BufferedTransformation::NULL_CHANNEL
 b report_entities_command
 b report_simthinklist_command
 b report_soundpatch_command
 b report_touchlinks_command
 b resetGameStats
 b restart_entities
 b rope_anchor
 b rr_reloadresponsesystems_command
 b sTFBotManager
 b s_BraceCharacters
 b s_BreakSet
 b s_BuildReverseMap
 b s_CombatCharVisCache
 b s_DebugHistory
 b s_DirtyKDTree
 b s_EffectServer
 b s_EmptyConVar
 b s_GameStats_Singleton
 b s_GameSystems
 b s_GameSystemsPerFrame
 b s_HLTVDirector
 b s_HashChains
 b s_HolidaysActive
 b s_HolidaysCalculated
 b s_LastEntityReasonableEmitTime
 b s_LightMutex
 b s_Microphones
 b s_ParticleSystemMgr
 b s_QCache
 b s_RemoveImmediateSemaphore
 b s_RndOrder
 b s_SIMDRandContexts
 b s_ServerReplayImp
 b s_StaticCryptoConstructor
 b s_SteamAPIContext
 b s_SteamGameServerAPIContext
 b s_SuccessfulSpeculatives
 b s_TEPhysicsProp
 b s_TFGCServerSystem
 b s_VictimList
 b s_WastedSpeculativeUpdates
 b s_bAllocatorInitialized
 b s_bBuiltBreakSet
 b s_bConnected
 b s_bInDMXContext
 b s_bMMXEnabled
 b s_bRegistered
 b s_bRunningWithDebugModules
 b s_bSSE2Enabled
 b s_bSSEEnabled
 b s_bSystemsInitted
 b s_detailController
 b s_factories
 b s_iszTrainName
 b s_lastTeleporter
 b s_nCVarFlag
 b s_nNumCacheMisses
 b s_nNumCacheQueries
 b s_pCGCGameSpecificClientSystem
 b s_pClassLists
 b s_pMapName
 b s_pNonModifiedPointerProxyHead
 b s_pPerFrameSystemList
 b s_pSystemList
 b s_pTokenBuf
 b s_pmsgIncrementKillCountMessageBatch
 b s_pointCentroid
 b s_possibleAmmo
 b s_possibleBot
 b s_possibleFrame
 b s_possibleHealth
 b s_static_p4_factory
 b s_szPseudoUniqueID
 b s_szSaveFileName
 b s_szStatUploadRegistryKeyName
 b s_vecWindVelocity
 b say_command
 b say_team_command
 b scene_async_prefetch_spew
 b scene_clamplookat
 b scene_flush_command
 b scene_forcecombined
 b scene_manager
 b scene_maxcaptionradius
 b scene_print
 b scene_showfaceto
 b scene_showlook
 b scene_showmoveto
 b scene_showunlock
 b scripted_scene
 b scripted_sentence
 b scripted_sequence
 b scripted_target
 b server_game_time_command
 b setang
 b setang_exact_command
 b setmodel
 b setpos_command
 b setpos_exact_command
 b sg_DynamicLoadHandlers
 b shadow_control
 b shake
 b showtriggers_toggle
 b simple_bot
 b simple_bot_add_command
 b simple_physics_brush
 b simple_physics_prop
 b sky_camera
 b smoothstairs
 b soundent
 b soundpatch_captionlength
 b soundscape_flush_command
 b spark_shower
 b speechListIndex
 b speechListSounds
 b spotlight_end
 b spraycan
 b st_szNextMap
 b st_szNextSpot
 b std::__ioinit
 b surfaceprop_command
 b sv_benchmark_autovprofrecord
 b sv_benchmark_force_start_command
 b sv_benchmark_freeroam
 b sv_benchmark_numticks
 b sv_clockcorrection_msecs
 b sv_debug_stuck_particles
 b sv_findsoundname_command
 b sv_ignore_hitboxes
 b sv_lagcompensation_teleport_dist
 b sv_maxusrcmdprocessticks
 b sv_maxusrcmdprocessticks_holdaim
 b sv_optimizedmovement
 b sv_playerperfhistorycount
 b sv_querycache_stats_command
 b sv_registration_message
 b sv_registration_successful
 b sv_soundemitter_filecheck_command
 b sv_soundemitter_flush_command
 b sv_soundemitter_trace
 b sv_soundscape_printdebuginfo_command
 b sv_thinktimecheck
 b tank_boss
 b tank_destruction
 b tanktrain_ai
 b tanktrain_aitarget
 b target_cdaudio
 b target_changegravity
 b te_tester
 b team_control_point
 b team_control_point_master
 b team_control_point_round
 b team_manager
 b team_names
 b team_round_timer
 b team_scores
 b team_train_watcher
 b teleport_vortex
 b test_dispatcheffect
 b test_effect
 b test_entity_blocker
 b test_proxytoggle
 b test_traceline
 b texturetolinear
 b tf_ammo_pack
 b tf_base_minigame
 b tf_bonus_duck_pickup
 b tf_bot
 b tf_bot_add_command
 b tf_bot_debug_stuck_log_clear_command
 b tf_bot_debug_stuck_log_command
 b tf_bot_kick_command
 b tf_bot_kill_command
 b tf_bot_mvm_show_engineer_hint_region_command
 b tf_bot_warp_team_to_me
 b tf_demoman_charge_frametime_scaling
 b tf_dropped_weapon
 b tf_dumpplayerstats_command
 b tf_flame
 b tf_gamerules
 b tf_generic_bomb
 b tf_glow
 b tf_halloween_force_boss_spawn_command
 b tf_halloween_gift_pickup
 b tf_halloween_gift_spawn_location
 b tf_halloween_minigame
 b tf_halloween_minigame_falling_platforms
 b tf_halloween_pickup
 b tf_logic_arena
 b tf_logic_bonusround
 b tf_logic_competitive
 b tf_logic_cp_timer
 b tf_logic_holiday
 b tf_logic_hybrid_ctf_cp
 b tf_logic_koth
 b tf_logic_mann_vs_machine
 b tf_logic_mannpower
 b tf_logic_medieval
 b tf_logic_minigames
 b tf_logic_multiple_escort
 b tf_logic_on_holiday
 b tf_logic_player_destruction
 b tf_logic_robot_destruction
 b tf_logic_training_mode
 b tf_mann_vs_machine_stats
 b tf_merasmus_trick_or_treat_prop
 b tf_mvm_checkpoint_clear_command
 b tf_mvm_checkpoint_command
 b tf_mvm_debugstats_command
 b tf_mvm_force_victory_command
 b tf_mvm_jump_to_wave_command
 b tf_mvm_nextmission_command
 b tf_mvm_popfile_command
 b tf_mvm_tank_health
 b tf_mvm_tank_kill
 b tf_objective_resource
 b tf_pda_expansion_dispenser
 b tf_pda_expansion_teleporter
 b tf_player_manager
 b tf_point_nav_interface
 b tf_point_weapon_mimic
 b tf_powerup_bottle
 b tf_projectile_arrow
 b tf_projectile_ball_ornament
 b tf_projectile_cleaver
 b tf_projectile_energy_ball
 b tf_projectile_energy_ring
 b tf_projectile_flare
 b tf_projectile_grapplinghook
 b tf_projectile_healing_bolt
 b tf_projectile_jar
 b tf_projectile_jar_milk
 b tf_projectile_lightningorb
 b tf_projectile_pipe
 b tf_projectile_pipe_remote
 b tf_projectile_rocket
 b tf_projectile_sentryrocket
 b tf_projectile_spellbats
 b tf_projectile_spellfireball
 b tf_projectile_spellkartbats
 b tf_projectile_spellkartorb
 b tf_projectile_spellmeteorshower
 b tf_projectile_spellmirv
 b tf_projectile_spellpumpkin
 b tf_projectile_spellspawnboss
 b tf_projectile_spellspawnhorde
 b tf_projectile_spellspawnzombie
 b tf_projectile_spelltransposeteleport
 b tf_projectile_stun_ball
 b tf_projectile_syringe
 b tf_projectile_throwable
 b tf_projectile_throwable_breadmonster
 b tf_projectile_throwable_brick
 b tf_projectile_throwable_repel
 b tf_pumpkin_bomb
 b tf_quests_spew_trackers_command
 b tf_ragdoll
 b tf_robot_destruction_robot
 b tf_robot_destruction_robot_spawn
 b tf_robot_destruction_spawn_group
 b tf_select_ambush_areas
 b tf_server_identity_account_id
 b tf_server_identity_disable_quickplay
 b tf_server_identity_token
 b tf_server_lobby_debug_command
 b tf_spawner
 b tf_spell_meteorshowerspawner
 b tf_spell_pickup
 b tf_stats_nogameplaycheck
 b tf_target_dummy
 b tf_taunt_prop
 b tf_team
 b tf_teleport_location
 b tf_testrr
 b tf_testvcd
 b tf_viewmodel
 b tf_weapon_base
 b tf_weapon_bat
 b tf_weapon_bat_fish
 b tf_weapon_bat_giftwrap
 b tf_weapon_bat_wood
 b tf_weapon_bonesaw
 b tf_weapon_bottle
 b tf_weapon_buff_item
 b tf_weapon_builder
 b tf_weapon_cannon
 b tf_weapon_charged_smg
 b tf_weapon_cleaver
 b tf_weapon_club
 b tf_weapon_compound_bow
 b tf_weapon_crossbow
 b tf_weapon_drg_pomson
 b tf_weapon_fireaxe
 b tf_weapon_fists
 b tf_weapon_flamethrower
 b tf_weapon_flaregun
 b tf_weapon_flaregun_revenge
 b tf_weapon_grapplinghook
 b tf_weapon_grenadelauncher
 b tf_weapon_handgun_scout_primary
 b tf_weapon_handgun_scout_secondary
 b tf_weapon_invis
 b tf_weapon_jar
 b tf_weapon_jar_milk
 b tf_weapon_katana
 b tf_weapon_knife
 b tf_weapon_laser_pointer
 b tf_weapon_lunchbox
 b tf_weapon_lunchbox_drink
 b tf_weapon_mechanical_arm
 b tf_weapon_medigun
 b tf_weapon_minigun
 b tf_weapon_parachute
 b tf_weapon_parachute_primary
 b tf_weapon_parachute_secondary
 b tf_weapon_particle_cannon
 b tf_weapon_passtime_gun
 b tf_weapon_pda_engineer_build
 b tf_weapon_pda_engineer_destroy
 b tf_weapon_pda_spy
 b tf_weapon_pep_brawler_blaster
 b tf_weapon_pipebomblauncher
 b tf_weapon_pistol
 b tf_weapon_pistol_scout
 b tf_weapon_raygun
 b tf_weapon_revolver
 b tf_weapon_robot_arm
 b tf_weapon_rocketlauncher
 b tf_weapon_rocketlauncher_airstrike
 b tf_weapon_rocketlauncher_directhit
 b tf_weapon_sapper
 b tf_weapon_scattergun
 b tf_weapon_sentry_revenge
 b tf_weapon_shotgun_building_rescue
 b tf_weapon_shotgun_hwg
 b tf_weapon_shotgun_primary
 b tf_weapon_shotgun_pyro
 b tf_weapon_shotgun_soldier
 b tf_weapon_shovel
 b tf_weapon_smg
 b tf_weapon_sniperrifle
 b tf_weapon_sniperrifle_classic
 b tf_weapon_sniperrifle_decap
 b tf_weapon_soda_popper
 b tf_weapon_spellbook
 b tf_weapon_stickbomb
 b tf_weapon_sword
 b tf_weapon_syringegun_medic
 b tf_weapon_wrench
 b tf_weaponbase_grenade_proj
 b tf_weaponbase_melee
 b tf_weaponbase_merasmus_grenade
 b tf_wearable
 b tf_wearable_demoshield
 b tf_wearable_levelable_item
 b tf_wearable_robot_arm
 b tf_wearable_vm
 b tf_workshop_map_status_command
 b tf_workshop_map_sync_command
 b tf_workshop_refresh_command
 b tf_zombie
 b tf_zombie_spawner
 b training_annotation
 b training_continue_command
 b training_prop_dynamic
 b trigger
 b trigger_add_or_remove_tf_player_attributes
 b trigger_add_tf_player_condition
 b trigger_apply_impulse
 b trigger_autosave
 b trigger_bot_tag
 b trigger_brush
 b trigger_capture_area
 b trigger_catapult
 b trigger_cdaudio
 b trigger_changelevel
 b trigger_gravity
 b trigger_hurt
 b trigger_ignite
 b trigger_ignite_arrows
 b trigger_impact
 b trigger_look
 b trigger_multiple
 b trigger_once
 b trigger_particle
 b trigger_passtime_ball
 b trigger_player_respawn_override
 b trigger_playermovement
 b trigger_proximity
 b trigger_push
 b trigger_rd_vault_trigger
 b trigger_remove
 b trigger_remove_tf_player_condition
 b trigger_serverragdoll
 b trigger_soundscape
 b trigger_stun
 b trigger_teleport
 b trigger_teleport_relative
 b trigger_timer_door
 b trigger_togglesave
 b trigger_transition
 b trigger_vphysics_motion
 b trigger_wind
 b tv_allow_camera_man
 b tv_allow_static_shots
 b tv_delay
 b use
 b variant_t::ToString() const::szBuf
 b vec2_invalid
 b vec2_origin
 b vec4_invalid
 b vec4_origin
 b vehicle_flushscript_command
 b vgui_screen
 b vgui_screen_team
 b vgui_slideshow_display
 b viewmodel
 b violence_ablood
 b violence_agibs
 b violence_hblood
 b violence_hgibs
 b vote_controller
 b voxeltree_box
 b voxeltree_playerview
 b voxeltree_sphere
 b voxeltree_view
 b water_lod_control
 b waterbullet
 b wc_air_edit_further
 b wc_air_edit_nearer
 b wc_air_node_edit
 b wc_create
 b wc_destroy
 b wc_destroy_undo
 b wc_link_edit
 b weapon_ifm_base
 b weapon_ifm_base_camera
 b weapon_ifm_steadycam
 b wearable_item
 b wheel_of_doom
 b wheel_of_doom_spiral
 b window_pane
 b world_items
 b worldspawn
 ceil
 ceilf
 clock$UNIX2003
 close$UNIX2003
 cos
 cosf
 d (anonymous namespace)::protobuf_AssignDescriptors_once_
 d (anonymous namespace)::s_PlayerInfoManager_V1
 d .memset_pattern
 d ACHIEVEMENT_SAVE_RESTORE_VERSION
 d AI_DEFAULT_STANDOFF_PARAMS
 d AI_SAVE_RESTORE_VERSION
 d BotGenerateAndWearItem(CTFPlayer*, char const*)::s_nFakeID
 d BotNumber
 d CAI_BaseNPC::ClearSenseConditions()::conditionsToClear
 d CAI_BaseNPC::DrawDebugTextOverlays()::pMoveNames
 d CAI_BaseNPC::NPCThink()::ppszEfficiencies
 d CAI_BaseNPC::NPCThink()::ppszMoveEfficiencies
 d CAI_BaseNPC::OnListened()::conditionsToClear
 d CAI_BaseNPC::OnLooked(int)::conditionsToClear
 d CAI_BaseNPC::PreNPCThink()::frameTimeLimit
 d CAI_BaseNPC::PreNPCThink()::iPrevFrame
 d CAI_BaseNPC::ReportAIState()::pStateNames
 d CAI_BaseNPC::SetScriptedScheduleIgnoreConditions(Interruptability_t)::g_DamageConditions
 d CAI_BaseNPC::SetScriptedScheduleIgnoreConditions(Interruptability_t)::g_GeneralConditions
 d CAI_BaseNPC::UpdateEfficiency(bool)::iPrevFrame
 d CAI_ExpresserHost_NPC_DoModifyOrAppendCriteria(CAI_BaseNPC*, AI_CriteriaSet&)::pStateNames
 d CAI_Navigator::SimplifyPathForward(float)::fullScanParams
 d CAI_Navigator::SimplifyPathQuick()::quickScanParams
 d CBaseButton::DrawDebugTextOverlays()::pszStates
 d CBaseCombatWeapon::GetProficiencyValues()::defaultWeaponProficiencyTable
 d CCasualMatchGroupDescription::CCasualProgressionDesc::CCasualProgressionDesc(EMatchGroup)::stepInfo
 d CDecal::StaticDecal()::CTraceFilterValidForDecal::ShouldHitEntity(IHandleEntity*, int)::ppszIgnoredClasses
 d CGlobalState::DumpGlobals()::estates
 d CHLTVDirector::GetModEvents()::s_modevents
 d COMMENTARY_SAVE_RESTORE_VERSION
 d CRTime::RTime32FromFmtString(char const*, char const*)::rgszMonthNames
 d CRestore::ReadFields(char const*, void*, datamap_t*, typedescription_t*, int)::lastName
 d CTFBot::GetNextSpawnClassname() const::compRoster
 d CTFBot::GetNextSpawnClassname() const::defenseRoster
 d CTFBot::GetNextSpawnClassname() const::offenseRoster
 d CTFGameRules::Think()::nLastTimeSent
 d CTFHLTVDirector::GetModEvents()::s_modevents
 d CTFMinigameLogic::InputTeleportToRandomMinigame(inputdata_t&)::nLastChosenIndex
 d CTFPlayer::GetOverrideStepSound(char const*)::s_ReplacementSounds
 d CTFPlayer::ItemTesting_Start(KeyValues*)::s_iTestIndex
 d CTFPlayer::ModifyOrAppendCriteria(AI_CriteriaSet&)::kSlotCriteriaName
 d CTFPlayer::StateLookupInfo(int)::playerStateInfos
 d CTFPlayerAnimState::ComputePoseParam_AimYaw(CStudioHdr*)::flDeltaPitch
 d CTFPlayerAnimState::ComputePoseParam_AimYaw(CStudioHdr*)::flDeltaYaw
 d CTFPlayerShared::ConditionThink()::s_vecBombStages
 d CTFTauntInfo::InitTauntInputRemap(KeyValues*, CUtlVector<CUtlString, CUtlMemory<CUtlString, int> >*)::s_pszAllowedTauntInputButtonNames
 d CTeamplayRoundBasedRules::State_LookupInfo(gamerules_roundstate_t)::playerStateInfos
 d EVENTQUEUE_SAVE_RESTORE_VERSION
 d GCSDK::g_JobType_CGCSOCacheSubscribedJob
 d GCSDK::g_JobType_CGCSOCacheSubscriptionCheck
 d GCSDK::g_JobType_CGCSOCacheUnsubscribedJob
 d GCSDK::g_JobType_CGCSOCreateJob
 d GCSDK::g_JobType_CGCSODestroyJob
 d GCSDK::g_JobType_CGCSOUpdateJob
 d GCSDK::g_JobType_CGCSOUpdateMultipleJob
 d GCSDK::k_prgchJobPauseReason
 d GetAttachTypeFromString(char const*)::pAttachmentNames
 d GetMassEquivalent(float)::masstext
 d GetRandomBotName()::nameList
 d NextBotManager::Update()::iCurFrame
 d PHYS_SAVE_RESTORE_VERSION
 d PrecacheInstancedScene(char const*)::nMakingReslists
 d RESPONSESYSTEM_SAVE_RESTORE_VERSION
 d RemapOverridePaintIndexToRGB(unsigned int, unsigned int)::k_pPointSampleContent_Team0
 d RemapOverridePaintIndexToRGB(unsigned int, unsigned int)::k_pPointSampleContent_Team1
 d RemapOverridePaintIndexToRGB(unsigned int, unsigned int)::k_unAfraidOfShadowsDark
 d RemapOverridePaintIndexToRGB(unsigned int, unsigned int)::k_unBubbleBubble
 d RemapOverridePaintIndexToRGB(unsigned int, unsigned int)::k_unDistinctiveLackOfSanity
 d RemapOverridePaintIndexToRGB(unsigned int, unsigned int)::k_unOverabundanceOfRottingFlesh
 d RemapOverridePaintIndexToRGB(unsigned int, unsigned int)::k_unThatQueesyFeeling
 d RemapOverridePaintIndexToRGB(unsigned int, unsigned int)::k_unTheFlamesBelow
 d RemapOverridePaintIndexToRGB(unsigned int, unsigned int)::k_unWitchYellow
 d TEMPLATE_SAVE_RESTORE_VERSION
 d __g_CServerGameTags_singleton
 d constraintevents
 d debugTypeName
 d dyld__mach_header
 d gDamageTableRegistry
 d gTitleComments
 d g_ActivityDataOps
 d g_AntlionFollowFormation
 d g_AntlionFollowFormationSlots
 d g_CommanderFollowFormation
 d g_CommanderFollowFormationSlots
 d g_ConVarAccessor
 d g_DefaultLightstyles
 d g_EntFireAutoComplete
 d g_GlobalFortuneTellerEffects
 d g_HalloweenMapInfo
 d g_Helper
 d g_HunterFollowFormation
 d g_HunterFollowFormationSlots
 d g_JobType_CGCClientJobServerGoodbye
 d g_JobType_CGCClientJobServerWelcome
 d g_JobType_CGCCoaching_CoachJoining
 d g_JobType_CGCCoaching_RemoveCurrentCoach
 d g_JobType_CGCCompetitiveDailyStatsRollupJob
 d g_JobType_CGCDev_NewItemRequestResponse
 d g_JobType_CGCKickPlayerFromLobbyJob
 d g_JobType_CGCQuestObjective_PointsChangeResponse
 d g_JobType_CGCReplicateConVars
 d g_JobType_CGCTFItemAcknowledged
 d g_JobType_CGCTFQuickplay_PlayerJoining
 d g_JobType_CGCUpdateConVar
 d g_JobType_CGCUpdateItemSchema
 d g_JobType_CGCUpdateServerModificationItemStateJob
 d g_JobType_CGCUseServerModificationItemJob
 d g_JobType_CGCVoteSystemVoteKickResponse
 d g_JobType_CGC_GameServer_AuthChallenge
 d g_JobType_CGC_GameServer_AuthResult
 d g_JobType_CGC_GameServer_Duel_Request
 d g_JobType_CGC_GameServer_Duel_Response
 d g_JobType_CGC_RespawnPostLoadoutChange
 d g_MediumFollowFormation
 d g_MediumFollowFormationSlots
 d g_NameMap
 d g_NullSurface
 d g_ProficiencyNames
 d g_ServerSideFlexControllers
 d g_SidekickFollowFormation
 d g_SidekickFollowFormationSlots
 d g_SimpleFollowFormation
 d g_SimpleFollowFormationSlots
 d g_TauntCamAchievements
 d g_TauntCamAchievements2
 d g_TauntCamRagdollAchievements
 d g_TightFollowFormation
 d g_TightFollowFormationSlots
 d g_VortigauntFollowFormation
 d g_VortigauntFollowFormationSlots
 d g_WideFollowFormation
 d g_WideFollowFormationSlots
 d g_aConditionNames
 d g_bCleanupDatObject
 d g_bEnableProxy
 d g_pSoundLevels
 d glassAngularTable
 d glassLinearTable
 d gs_PlayerClassData
 d kValidPositions_Hightower
 d kValidPositions_Lakeside
 d kValidPositions_MannManor
 d kValidPositions_Viaduct
 d npcAngularTable
 d npcLinearTable
 d playerAngularTable
 d playerLinearTable
 d playerVehicleAngularTable
 d playerVehicleLinearTable
 d sCountdownSoundsRoundBegin
 d sCountdownSoundsRoundBeginMerasmus
 d s_BotManager
 d s_ChildOperatorDefinition
 d s_DamageTypeToStrTable
 d s_DefaultAccessor
 d s_DefaultParticleSystemQuery
 d s_EItemCriteriaOperator
 d s_HolidayChecks
 d s_IKSaveRestoreOp
 d s_LastFileLoadingFrom
 d s_NameMap
 d s_ParticleSystemQuery
 d s_PlayerInfoManager
 d s_PreserveEnts
 d s_RemapOperatorNameTable
 d s_SecretRoom_TriggerInfo
 d s_SoundPatchSaveRestoreOps
 d s_TFAttributeTable
 d s_TankModel
 d s_TankModelRome
 d s_ValveMaps
 d s_aEnumGameTypeName
 d s_aGameTypeNames
 d s_acttablePasstime
 d s_flLastTeleportTime
 d s_iLastKnownMission
 d s_iLastKnownMissionCategory
 d s_loadout_position_names
 d s_nDLLIdentifier
 d s_pConversionArrays_NoEscConversion
 d s_pConversionArrays_StringCharConversion
 d s_pThrowArcConvars
 d s_pThrowSpeedConvars
 d s_pszDisguiseProps
 d s_pszRuneIcons
 d s_pszStrangeRestrictionTypes
 d s_pszTauntRPSParticleNames
 d s_pszTeamRestrictionNames
 d s_skeletonHatModels
 d taunt_attack_name
 d typeinfo for (anonymous namespace)::CPlayerInfoManager_V1
 d typeinfo for (anonymous namespace)::IPlayerInfoManager_V1
 d typeinfo for CDecal::StaticDecal()::CTraceFilterValidForDecal
 d typeinfo for CEconItemView::InitNetworkedDynamicAttributesForDemos()::CEconDynamicAttributesForDemosIterator
 d typeinfo for CEconItemView::IterateAttributes(IEconItemAttributeIterator*) const::CEconItemAttributeIterator_EconItemViewWrapper
 d typeinfo for CTFPowerupBottle::Reset()::CAttributeIterator_ZeroRefundableCurrency
 d typeinfo for CTFPowerupBottle::Use()::CAttributeIterator_ConsumeOneRefundableCharge
 d typeinfo for CTeamplayRoundBasedRules::CleanUpMap()::CTeamplayMapEntityFilter
 d vtable for (anonymous namespace)::CPlayerInfoManager_V1
 d vtable for CDecal::StaticDecal()::CTraceFilterValidForDecal
 d vtable for CEconItemView::InitNetworkedDynamicAttributesForDemos()::CEconDynamicAttributesForDemosIterator
 d vtable for CEconItemView::IterateAttributes(IEconItemAttributeIterator*) const::CEconItemAttributeIterator_EconItemViewWrapper
 d vtable for CTFPowerupBottle::Reset()::CAttributeIterator_ZeroRefundableCurrency
 d vtable for CTFPowerupBottle::Use()::CAttributeIterator_ConsumeOneRefundableCharge
 d vtable for CTeamplayRoundBasedRules::CleanUpMap()::CTeamplayMapEntityFilter
 daylight
 dlclose
 dlerror
 dlopen
 dlsym
 erf
 expf
 fflush
 floor
 floorf
 fmaxf
 fminf
 fmod
 fmodf
 fprintf
 free
 g_ClockSpeed
 g_ClockSpeedMillisecondsMultiplier
 g_ClockSpeedSecondsMultiplier
 g_VProfCurrentProfile
 g_pMemAlloc
 g_pSteamClientGameServer
 g_pThreadPool
 g_pVCR
 getcwd
 localtime
 log
 log10
 logf
 longjmp
 malloc
 malloc_size
 memcmp
 memcpy
 memmove
 memset
 memset_pattern16
 mktime$UNIX2003
 open$UNIX2003
 pow
 printf
 pthread_mutex_destroy
 pthread_mutex_init
 pthread_mutex_lock
 pthread_mutex_unlock
 pthread_mutexattr_init
 pthread_mutexattr_settype
 pthread_once
 qsort
 r .memset_pattern
 r .memset_pattern128
 r .memset_pattern24
 r AI_NAVIGATOR_SAVE_VERSION
 r CAI_BaseNPC::NPCThink()::g_DecisionIntervals
 r CAI_BaseNPC::StartNPC()::nextThinkTimes
 r CAI_BaseNPC::UpdateEfficiency(bool)::mappings
 r CAI_BaseNPC::UpdateEfficiency(bool)::stateBase
 r CAI_Motor::MoveNormalExecute(AILocalMoveGoal_t const&)::moveResults
 r CAI_Navigator::Move(float)::failures
 r CAI_Pathfinder::CTriDebugOverlay::AddTriOverlayLines(Vector const&, Vector const&, Vector const&, AIMoveTrace_t const&, AIMoveTrace_t const&, bool)::s_TriangulationColor
 r CAI_ScriptConditions::EvalState(CAI_ScriptConditions::EvalArgs_t const&)::stateVals
 r CAI_ScriptedSchedule::StartSchedule(CAI_BaseNPC*)::forcedStatesMap
 r CBaseGameStats_Driver::SendData()::szFileName
 r CBasePlayer::FindUseEntity()::tangents
 r CCaptureFlag::Drop(CTFPlayer*, bool, bool, bool)::fMultipliers
 r CPasstimeBall::ChangeTeam(int)::skinForTeam
 r CTFBotDefendPoint::OnStart(CTFBot*, Action<CTFBot>*)::roamChance
 r CTFMapsWorkshop::MapIDFromName(CUtlString)::szUGCSuffix
 r CTFMapsWorkshop::MapIDFromName(CUtlString)::szWorkshopPrefix
 r CTFPlayerShared::GetConditionAssistFromAttacker()::nTrackedConditions
 r CTFPlayerShared::GetConditionAssistFromVictim()::nTrackedConditions
 r CTFTauntInfo::InitTauntInputRemap(KeyValues*, CUtlVector<CUtlString, CUtlMemory<CUtlString, int> >*)::s_iAllowedTauntInputButtons
 r CTFWeaponBase::GetInspectActivity(CTFWeaponBase::TFWeaponInspectStage)::s_inspectActivities
 r CheckValveSignature(void const*, unsigned int, void const*, unsigned int)::valvePublicKey
 r CryptoPP::RoundupSizeTable
 r CryptoPP::SHA256::InitState(unsigned int*)::s
 r GCSDK::k_rgchUnknown
 r GCSDK::s_MemPoolConfigAllocSize
 r MAX_LOCAL_NAV_DIST_FLY
 r MAX_LOCAL_NAV_DIST_GROUND
 r MAX_PROBE_DIST
 r NO_PVS_ROUTE_SIMPLIFY_TIME_DELAY
 r PLANE_SOLVER_THINK_FREQUENCY
 r QUICK_SIMPLIFY_TIME_DELAY
 r ROUTE_SIMPLIFY_TIME_DELAY
 r TIME_DELAY_FULL_DIRECT_PROBE
 r gSizes
 r g_AI_MoveSuggWeights
 r g_RageBuffTypes
 r g_doomsdayNormalSpellIndexList
 r g_doomsdayRareSpellIndexList
 r g_eClassKillEvents
 r g_eRobotClassKillEvents
 r g_generalSpellIndexList
 r g_nRandomValues
 r g_pszIdleKickString
 r ice_keyrot
 r ice_pbox
 r ice_smod
 r ice_sxor
 r kDuelScoreTypes
 r protobuf_AssignDesc_base_5fgcmessages_2eproto()::CGCStorePurchaseInit_LineItem_offsets_
 r protobuf_AssignDesc_base_5fgcmessages_2eproto()::CMsgAdjustItemEquippedState_offsets_
 r protobuf_AssignDesc_base_5fgcmessages_2eproto()::CMsgApplyStrangeCountTransfer_offsets_
 r protobuf_AssignDesc_base_5fgcmessages_2eproto()::CMsgApplyStrangePart_offsets_
 r protobuf_AssignDesc_base_5fgcmessages_2eproto()::CMsgApplyStrangeRestriction_offsets_
 r protobuf_AssignDesc_base_5fgcmessages_2eproto()::CMsgApplyToolToBaseItem_offsets_
 r protobuf_AssignDesc_base_5fgcmessages_2eproto()::CMsgApplyToolToItem_offsets_
 r protobuf_AssignDesc_base_5fgcmessages_2eproto()::CMsgApplyUpgradeCard_offsets_
 r protobuf_AssignDesc_base_5fgcmessages_2eproto()::CMsgClientGoodbye_offsets_
 r protobuf_AssignDesc_base_5fgcmessages_2eproto()::CMsgClientHello_offsets_
 r protobuf_AssignDesc_base_5fgcmessages_2eproto()::CMsgClientWelcome_offsets_
 r protobuf_AssignDesc_base_5fgcmessages_2eproto()::CMsgConVarValue_offsets_
 r protobuf_AssignDesc_base_5fgcmessages_2eproto()::CMsgConsumableExhausted_offsets_
 r protobuf_AssignDesc_base_5fgcmessages_2eproto()::CMsgDeliverGiftResponseGiver_offsets_
 r protobuf_AssignDesc_base_5fgcmessages_2eproto()::CMsgDevDebugRollLootRequest_offsets_
 r protobuf_AssignDesc_base_5fgcmessages_2eproto()::CMsgDevNewItemRequest_offsets_
 r protobuf_AssignDesc_base_5fgcmessages_2eproto()::CMsgFulfillDynamicRecipeComponent_offsets_
 r protobuf_AssignDesc_base_5fgcmessages_2eproto()::CMsgGCBannedWordListRequest_offsets_
 r protobuf_AssignDesc_base_5fgcmessages_2eproto()::CMsgGCClientDisplayNotification_offsets_
 r protobuf_AssignDesc_base_5fgcmessages_2eproto()::CMsgGCClientMarketDataEntry_offsets_
 r protobuf_AssignDesc_base_5fgcmessages_2eproto()::CMsgGCClientMarketDataRequest_offsets_
 r protobuf_AssignDesc_base_5fgcmessages_2eproto()::CMsgGCClientMarketData_offsets_
 r protobuf_AssignDesc_base_5fgcmessages_2eproto()::CMsgGCCollectItem_offsets_
 r protobuf_AssignDesc_base_5fgcmessages_2eproto()::CMsgGCError_offsets_
 r protobuf_AssignDesc_base_5fgcmessages_2eproto()::CMsgGCGiftedItems_offsets_
 r protobuf_AssignDesc_base_5fgcmessages_2eproto()::CMsgGCIncrementKillCountResponse_offsets_
 r protobuf_AssignDesc_base_5fgcmessages_2eproto()::CMsgGCItemPreviewItemBoughtNotification_offsets_
 r protobuf_AssignDesc_base_5fgcmessages_2eproto()::CMsgGCNameItemNotification_offsets_
 r protobuf_AssignDesc_base_5fgcmessages_2eproto()::CMsgGCRemoveCustomizationAttributeSimple_offsets_
 r protobuf_AssignDesc_base_5fgcmessages_2eproto()::CMsgGCRemoveStrangePart_offsets_
 r protobuf_AssignDesc_base_5fgcmessages_2eproto()::CMsgGCRemoveUpgradeCard_offsets_
 r protobuf_AssignDesc_base_5fgcmessages_2eproto()::CMsgGCReportAbuseResponse_offsets_
 r protobuf_AssignDesc_base_5fgcmessages_2eproto()::CMsgGCReportAbuse_offsets_
 r protobuf_AssignDesc_base_5fgcmessages_2eproto()::CMsgGCResetStrangeScores_offsets_
 r protobuf_AssignDesc_base_5fgcmessages_2eproto()::CMsgGCShowItemsPickedUp_offsets_
 r protobuf_AssignDesc_base_5fgcmessages_2eproto()::CMsgGCStorePurchaseCancelResponse_offsets_
 r protobuf_AssignDesc_base_5fgcmessages_2eproto()::CMsgGCStorePurchaseCancel_offsets_
 r protobuf_AssignDesc_base_5fgcmessages_2eproto()::CMsgGCStorePurchaseFinalizeResponse_offsets_
 r protobuf_AssignDesc_base_5fgcmessages_2eproto()::CMsgGCStorePurchaseFinalize_offsets_
 r protobuf_AssignDesc_base_5fgcmessages_2eproto()::CMsgGCStorePurchaseInitResponse_offsets_
 r protobuf_AssignDesc_base_5fgcmessages_2eproto()::CMsgGCStorePurchaseInit_offsets_
 r protobuf_AssignDesc_base_5fgcmessages_2eproto()::CMsgIncrementKillCountAttribute_Multiple_offsets_
 r protobuf_AssignDesc_base_5fgcmessages_2eproto()::CMsgIncrementKillCountAttribute_offsets_
 r protobuf_AssignDesc_base_5fgcmessages_2eproto()::CMsgInvitationCreated_offsets_
 r protobuf_AssignDesc_base_5fgcmessages_2eproto()::CMsgInviteToParty_offsets_
 r protobuf_AssignDesc_base_5fgcmessages_2eproto()::CMsgItemAcknowledged_offsets_
 r protobuf_AssignDesc_base_5fgcmessages_2eproto()::CMsgKickFromParty_offsets_
 r protobuf_AssignDesc_base_5fgcmessages_2eproto()::CMsgLANServerAvailable_offsets_
 r protobuf_AssignDesc_base_5fgcmessages_2eproto()::CMsgLeaveParty_offsets_
 r protobuf_AssignDesc_base_5fgcmessages_2eproto()::CMsgPartyInviteResponse_offsets_
 r protobuf_AssignDesc_base_5fgcmessages_2eproto()::CMsgRecipeComponent_offsets_
 r protobuf_AssignDesc_base_5fgcmessages_2eproto()::CMsgReplayUploadedToYouTube_offsets_
 r protobuf_AssignDesc_base_5fgcmessages_2eproto()::CMsgReplicateConVars_offsets_
 r protobuf_AssignDesc_base_5fgcmessages_2eproto()::CMsgRequestInventoryRefresh_offsets_
 r protobuf_AssignDesc_base_5fgcmessages_2eproto()::CMsgSelectPresetForClass_offsets_
 r protobuf_AssignDesc_base_5fgcmessages_2eproto()::CMsgServerAvailable_offsets_
 r protobuf_AssignDesc_base_5fgcmessages_2eproto()::CMsgServerGoodbye_offsets_
 r protobuf_AssignDesc_base_5fgcmessages_2eproto()::CMsgServerHello_offsets_
 r protobuf_AssignDesc_base_5fgcmessages_2eproto()::CMsgServerWelcome_offsets_
 r protobuf_AssignDesc_base_5fgcmessages_2eproto()::CMsgSetHatEffectUseHeadOrigin_offsets_
 r protobuf_AssignDesc_base_5fgcmessages_2eproto()::CMsgSetItemEffectVerticalOffset_offsets_
 r protobuf_AssignDesc_base_5fgcmessages_2eproto()::CMsgSetItemPositions_ItemPosition_offsets_
 r protobuf_AssignDesc_base_5fgcmessages_2eproto()::CMsgSetItemPositions_offsets_
 r protobuf_AssignDesc_base_5fgcmessages_2eproto()::CMsgSetPresetItemPosition_offsets_
 r protobuf_AssignDesc_base_5fgcmessages_2eproto()::CMsgSortItems_offsets_
 r protobuf_AssignDesc_base_5fgcmessages_2eproto()::CMsgStoreGetUserDataResponse_offsets_
 r protobuf_AssignDesc_base_5fgcmessages_2eproto()::CMsgStoreGetUserData_offsets_
 r protobuf_AssignDesc_base_5fgcmessages_2eproto()::CMsgSystemBroadcast_offsets_
 r protobuf_AssignDesc_base_5fgcmessages_2eproto()::CMsgTrackUniquePlayerPairEvent_offsets_
 r protobuf_AssignDesc_base_5fgcmessages_2eproto()::CMsgUpdateItemSchema_offsets_
 r protobuf_AssignDesc_base_5fgcmessages_2eproto()::CMsgUpdatePeriodicEvent_offsets_
 r protobuf_AssignDesc_base_5fgcmessages_2eproto()::CMsgUseItem_offsets_
 r protobuf_AssignDesc_base_5fgcmessages_2eproto()::CSOClassPresetClientData_offsets_
 r protobuf_AssignDesc_base_5fgcmessages_2eproto()::CSOEconClaimCode_offsets_
 r protobuf_AssignDesc_base_5fgcmessages_2eproto()::CSOEconGameAccountClient_offsets_
 r protobuf_AssignDesc_base_5fgcmessages_2eproto()::CSOEconGameAccountForGameServers_offsets_
 r protobuf_AssignDesc_base_5fgcmessages_2eproto()::CSOEconItemAttribute_offsets_
 r protobuf_AssignDesc_base_5fgcmessages_2eproto()::CSOEconItemEquipped_offsets_
 r protobuf_AssignDesc_base_5fgcmessages_2eproto()::CSOEconItemPresetInstance_offsets_
 r protobuf_AssignDesc_base_5fgcmessages_2eproto()::CSOEconItem_offsets_
 r protobuf_AssignDesc_base_5fgcmessages_2eproto()::CSOItemCriteriaCondition_offsets_
 r protobuf_AssignDesc_base_5fgcmessages_2eproto()::CSOItemCriteria_offsets_
 r protobuf_AssignDesc_base_5fgcmessages_2eproto()::CSOItemRecipe_offsets_
 r protobuf_AssignDesc_base_5fgcmessages_2eproto()::CSOLobbyInvite_offsets_
 r protobuf_AssignDesc_base_5fgcmessages_2eproto()::CSOPartyInvite_offsets_
 r protobuf_AssignDesc_base_5fgcmessages_2eproto()::CWorkshop_GetContributors_Request_offsets_
 r protobuf_AssignDesc_base_5fgcmessages_2eproto()::CWorkshop_GetContributors_Response_offsets_
 r protobuf_AssignDesc_base_5fgcmessages_2eproto()::CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock_offsets_
 r protobuf_AssignDesc_base_5fgcmessages_2eproto()::CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription_offsets_
 r protobuf_AssignDesc_base_5fgcmessages_2eproto()::CWorkshop_PopulateItemDescriptions_Request_offsets_
 r protobuf_AssignDesc_base_5fgcmessages_2eproto()::CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule_offsets_
 r protobuf_AssignDesc_base_5fgcmessages_2eproto()::CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule_offsets_
 r protobuf_AssignDesc_base_5fgcmessages_2eproto()::CWorkshop_SetItemPaymentRules_Request_offsets_
 r protobuf_AssignDesc_base_5fgcmessages_2eproto()::CWorkshop_SetItemPaymentRules_Response_offsets_
 r protobuf_AssignDesc_econ_5fgcmessages_2eproto()::CMsgApplyAutograph_offsets_
 r protobuf_AssignDesc_econ_5fgcmessages_2eproto()::CMsgCraftCollectionUpgrade_offsets_
 r protobuf_AssignDesc_econ_5fgcmessages_2eproto()::CMsgCraftCommonStatClock_offsets_
 r protobuf_AssignDesc_econ_5fgcmessages_2eproto()::CMsgCraftHalloweenOffering_offsets_
 r protobuf_AssignDesc_econ_5fgcmessages_2eproto()::CMsgCraftingResponse_offsets_
 r protobuf_AssignDesc_econ_5fgcmessages_2eproto()::CMsgEconPlayerStrangeCountAdjustment_CStrangeCountAdjustment_offsets_
 r protobuf_AssignDesc_econ_5fgcmessages_2eproto()::CMsgEconPlayerStrangeCountAdjustment_offsets_
 r protobuf_AssignDesc_econ_5fgcmessages_2eproto()::CMsgGCQuestComplete_Request_offsets_
 r protobuf_AssignDesc_econ_5fgcmessages_2eproto()::CMsgGCQuestCompleted_offsets_
 r protobuf_AssignDesc_econ_5fgcmessages_2eproto()::CMsgGCQuestDiscard_Request_offsets_
 r protobuf_AssignDesc_econ_5fgcmessages_2eproto()::CMsgGCQuestObjective_PointsChange_offsets_
 r protobuf_AssignDesc_econ_5fgcmessages_2eproto()::CMsgGCQuestObjective_Progress_offsets_
 r protobuf_AssignDesc_econ_5fgcmessages_2eproto()::CMsgGCQuestObjective_RequestLoanerItems_offsets_
 r protobuf_AssignDesc_econ_5fgcmessages_2eproto()::CMsgGCQuestObjective_RequestLoanerResponse_offsets_
 r protobuf_AssignDesc_econ_5fgcmessages_2eproto()::CMsgGCRequestStoreSalesDataResponse_Price_offsets_
 r protobuf_AssignDesc_econ_5fgcmessages_2eproto()::CMsgGCRequestStoreSalesDataResponse_offsets_
 r protobuf_AssignDesc_econ_5fgcmessages_2eproto()::CMsgGCRequestStoreSalesDataUpToDateResponse_offsets_
 r protobuf_AssignDesc_econ_5fgcmessages_2eproto()::CMsgGCRequestStoreSalesData_offsets_
 r protobuf_AssignDesc_econ_5fgcmessages_2eproto()::CMsgGCShuffleCrateContents_offsets_
 r protobuf_AssignDesc_econ_5fgcmessages_2eproto()::CMsgGCToGCGetUserServerMembersResponse_offsets_
 r protobuf_AssignDesc_econ_5fgcmessages_2eproto()::CMsgGCToGCGetUserServerMembers_offsets_
 r protobuf_AssignDesc_econ_5fgcmessages_2eproto()::CMsgGCToGCGetUserSessionServerResponse_offsets_
 r protobuf_AssignDesc_econ_5fgcmessages_2eproto()::CMsgGCToGCGetUserSessionServer_offsets_
 r protobuf_AssignDesc_econ_5fgcmessages_2eproto()::CMsgGCToGCGrantSelfMadeItemToAccount_offsets_
 r protobuf_AssignDesc_econ_5fgcmessages_2eproto()::CMsgGCToGCPingRequest_offsets_
 r protobuf_AssignDesc_econ_5fgcmessages_2eproto()::CMsgGCToGCPingResponse_offsets_
 r protobuf_AssignDesc_econ_5fgcmessages_2eproto()::CMsgGCToGCThankedByNewUser_offsets_
 r protobuf_AssignDesc_econ_5fgcmessages_2eproto()::CMsgLookupMultipleAccountNamesResponse_Account_offsets_
 r protobuf_AssignDesc_econ_5fgcmessages_2eproto()::CMsgLookupMultipleAccountNamesResponse_offsets_
 r protobuf_AssignDesc_econ_5fgcmessages_2eproto()::CMsgLookupMultipleAccountNames_offsets_
 r protobuf_AssignDesc_econ_5fgcmessages_2eproto()::CMsgRequestItemPurgatory_FinalizePurchaseResponse_offsets_
 r protobuf_AssignDesc_econ_5fgcmessages_2eproto()::CMsgRequestItemPurgatory_FinalizePurchase_offsets_
 r protobuf_AssignDesc_econ_5fgcmessages_2eproto()::CMsgRequestItemPurgatory_RefundPurchaseResponse_offsets_
 r protobuf_AssignDesc_econ_5fgcmessages_2eproto()::CMsgRequestItemPurgatory_RefundPurchase_offsets_
 r protobuf_AssignDesc_gcsdk_5fgcmessages_2eproto()::CGCToGCMsgMasterAck_Response_offsets_
 r protobuf_AssignDesc_gcsdk_5fgcmessages_2eproto()::CGCToGCMsgMasterAck_offsets_
 r protobuf_AssignDesc_gcsdk_5fgcmessages_2eproto()::CGCToGCMsgMasterStartupComplete_GCInfo_offsets_
 r protobuf_AssignDesc_gcsdk_5fgcmessages_2eproto()::CGCToGCMsgMasterStartupComplete_offsets_
 r protobuf_AssignDesc_gcsdk_5fgcmessages_2eproto()::CGCToGCMsgRoutedReply_offsets_
 r protobuf_AssignDesc_gcsdk_5fgcmessages_2eproto()::CGCToGCMsgRouted_offsets_
 r protobuf_AssignDesc_gcsdk_5fgcmessages_2eproto()::CMsgConnectionStatus_offsets_
 r protobuf_AssignDesc_gcsdk_5fgcmessages_2eproto()::CMsgGCClientPing_offsets_
 r protobuf_AssignDesc_gcsdk_5fgcmessages_2eproto()::CMsgGCMultiplexMessage_offsets_
 r protobuf_AssignDesc_gcsdk_5fgcmessages_2eproto()::CMsgGCRequestSubGCSessionInfoResponse_offsets_
 r protobuf_AssignDesc_gcsdk_5fgcmessages_2eproto()::CMsgGCRequestSubGCSessionInfo_offsets_
 r protobuf_AssignDesc_gcsdk_5fgcmessages_2eproto()::CMsgGCToGCIncrementRecruitmentLevel_offsets_
 r protobuf_AssignDesc_gcsdk_5fgcmessages_2eproto()::CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions_offsets_
 r protobuf_AssignDesc_gcsdk_5fgcmessages_2eproto()::CMsgGCToGCSOCacheSubscribe_offsets_
 r protobuf_AssignDesc_gcsdk_5fgcmessages_2eproto()::CMsgGCToGCSOCacheUnsubscribe_offsets_
 r protobuf_AssignDesc_gcsdk_5fgcmessages_2eproto()::CMsgGCUpdateSubGCSessionInfo_CMsgUpdate_offsets_
 r protobuf_AssignDesc_gcsdk_5fgcmessages_2eproto()::CMsgGCUpdateSubGCSessionInfo_offsets_
 r protobuf_AssignDesc_gcsdk_5fgcmessages_2eproto()::CMsgSOCacheHaveVersion_offsets_
 r protobuf_AssignDesc_gcsdk_5fgcmessages_2eproto()::CMsgSOCacheSubscribedUpToDate_offsets_
 r protobuf_AssignDesc_gcsdk_5fgcmessages_2eproto()::CMsgSOCacheSubscribed_SubscribedType_offsets_
 r protobuf_AssignDesc_gcsdk_5fgcmessages_2eproto()::CMsgSOCacheSubscribed_offsets_
 r protobuf_AssignDesc_gcsdk_5fgcmessages_2eproto()::CMsgSOCacheSubscriptionCheck_offsets_
 r protobuf_AssignDesc_gcsdk_5fgcmessages_2eproto()::CMsgSOCacheSubscriptionRefresh_offsets_
 r protobuf_AssignDesc_gcsdk_5fgcmessages_2eproto()::CMsgSOCacheUnsubscribed_offsets_
 r protobuf_AssignDesc_gcsdk_5fgcmessages_2eproto()::CMsgSOCacheVersion_offsets_
 r protobuf_AssignDesc_gcsdk_5fgcmessages_2eproto()::CMsgSOIDOwner_offsets_
 r protobuf_AssignDesc_gcsdk_5fgcmessages_2eproto()::CMsgSOMultipleObjects_SingleObject_offsets_
 r protobuf_AssignDesc_gcsdk_5fgcmessages_2eproto()::CMsgSOMultipleObjects_offsets_
 r protobuf_AssignDesc_gcsdk_5fgcmessages_2eproto()::CMsgSOSingleObject_offsets_
 r protobuf_AssignDesc_steammessages_2eproto()::CGCMsgGetIPLocationResponse_offsets_
 r protobuf_AssignDesc_steammessages_2eproto()::CGCMsgGetIPLocation_offsets_
 r protobuf_AssignDesc_steammessages_2eproto()::CGCMsgGetSystemStatsResponse_offsets_
 r protobuf_AssignDesc_steammessages_2eproto()::CGCMsgGetSystemStats_offsets_
 r protobuf_AssignDesc_steammessages_2eproto()::CGCMsgMemCachedDelete_offsets_
 r protobuf_AssignDesc_steammessages_2eproto()::CGCMsgMemCachedGetResponse_ValueTag_offsets_
 r protobuf_AssignDesc_steammessages_2eproto()::CGCMsgMemCachedGetResponse_offsets_
 r protobuf_AssignDesc_steammessages_2eproto()::CGCMsgMemCachedGet_offsets_
 r protobuf_AssignDesc_steammessages_2eproto()::CGCMsgMemCachedSet_KeyPair_offsets_
 r protobuf_AssignDesc_steammessages_2eproto()::CGCMsgMemCachedSet_offsets_
 r protobuf_AssignDesc_steammessages_2eproto()::CGCMsgMemCachedStatsResponse_offsets_
 r protobuf_AssignDesc_steammessages_2eproto()::CGCMsgMemCachedStats_offsets_
 r protobuf_AssignDesc_steammessages_2eproto()::CGCMsgSQLStatsResponse_offsets_
 r protobuf_AssignDesc_steammessages_2eproto()::CGCMsgSQLStats_offsets_
 r protobuf_AssignDesc_steammessages_2eproto()::CGCMsgSystemStatsSchema_offsets_
 r protobuf_AssignDesc_steammessages_2eproto()::CGCSystemMsg_GetAccountDetails_Response_offsets_
 r protobuf_AssignDesc_steammessages_2eproto()::CGCSystemMsg_GetAccountDetails_offsets_
 r protobuf_AssignDesc_steammessages_2eproto()::CGCSystemMsg_GetPurchaseTrust_Request_offsets_
 r protobuf_AssignDesc_steammessages_2eproto()::CGCSystemMsg_GetPurchaseTrust_Response_offsets_
 r protobuf_AssignDesc_steammessages_2eproto()::CIPLocationInfo_offsets_
 r protobuf_AssignDesc_steammessages_2eproto()::CMsgAMAddFreeLicenseResponse_offsets_
 r protobuf_AssignDesc_steammessages_2eproto()::CMsgAMAddFreeLicense_offsets_
 r protobuf_AssignDesc_steammessages_2eproto()::CMsgAMFindAccountsResponse_offsets_
 r protobuf_AssignDesc_steammessages_2eproto()::CMsgAMFindAccounts_offsets_
 r protobuf_AssignDesc_steammessages_2eproto()::CMsgAMGetLicensesResponse_offsets_
 r protobuf_AssignDesc_steammessages_2eproto()::CMsgAMGetLicenses_offsets_
 r protobuf_AssignDesc_steammessages_2eproto()::CMsgAMGetUserGameStatsResponse_Achievement_Blocks_offsets_
 r protobuf_AssignDesc_steammessages_2eproto()::CMsgAMGetUserGameStatsResponse_Stats_offsets_
 r protobuf_AssignDesc_steammessages_2eproto()::CMsgAMGetUserGameStatsResponse_offsets_
 r protobuf_AssignDesc_steammessages_2eproto()::CMsgAMGetUserGameStats_offsets_
 r protobuf_AssignDesc_steammessages_2eproto()::CMsgAMGrantGuestPasses2Response_offsets_
 r protobuf_AssignDesc_steammessages_2eproto()::CMsgAMGrantGuestPasses2_offsets_
 r protobuf_AssignDesc_steammessages_2eproto()::CMsgAMSendEmailResponse_offsets_
 r protobuf_AssignDesc_steammessages_2eproto()::CMsgAMSendEmail_PersonaNameReplacementToken_offsets_
 r protobuf_AssignDesc_steammessages_2eproto()::CMsgAMSendEmail_ReplacementToken_offsets_
 r protobuf_AssignDesc_steammessages_2eproto()::CMsgAMSendEmail_offsets_
 r protobuf_AssignDesc_steammessages_2eproto()::CMsgGCCheckClanMembership_Response_offsets_
 r protobuf_AssignDesc_steammessages_2eproto()::CMsgGCCheckClanMembership_offsets_
 r protobuf_AssignDesc_steammessages_2eproto()::CMsgGCCheckFriendship_Response_offsets_
 r protobuf_AssignDesc_steammessages_2eproto()::CMsgGCCheckFriendship_offsets_
 r protobuf_AssignDesc_steammessages_2eproto()::CMsgGCGetCommandListResponse_offsets_
 r protobuf_AssignDesc_steammessages_2eproto()::CMsgGCGetCommandList_offsets_
 r protobuf_AssignDesc_steammessages_2eproto()::CMsgGCGetEmailTemplateResponse_offsets_
 r protobuf_AssignDesc_steammessages_2eproto()::CMsgGCGetEmailTemplate_offsets_
 r protobuf_AssignDesc_steammessages_2eproto()::CMsgGCGetPartnerAccountLink_Response_offsets_
 r protobuf_AssignDesc_steammessages_2eproto()::CMsgGCGetPartnerAccountLink_offsets_
 r protobuf_AssignDesc_steammessages_2eproto()::CMsgGCGetPersonaNames_Response_PersonaName_offsets_
 r protobuf_AssignDesc_steammessages_2eproto()::CMsgGCGetPersonaNames_Response_offsets_
 r protobuf_AssignDesc_steammessages_2eproto()::CMsgGCGetPersonaNames_offsets_
 r protobuf_AssignDesc_steammessages_2eproto()::CMsgGCHAccountLockStatusChange_offsets_
 r protobuf_AssignDesc_steammessages_2eproto()::CMsgGCHAccountPhoneNumberChange_offsets_
 r protobuf_AssignDesc_steammessages_2eproto()::CMsgGCHAccountTradeBanStatusChange_offsets_
 r protobuf_AssignDesc_steammessages_2eproto()::CMsgGCHAccountTwoFactorChange_offsets_
 r protobuf_AssignDesc_steammessages_2eproto()::CMsgGCHAccountVacStatusChange_offsets_
 r protobuf_AssignDesc_steammessages_2eproto()::CMsgGCHUpdateSession_ExtraField_offsets_
 r protobuf_AssignDesc_steammessages_2eproto()::CMsgGCHUpdateSession_offsets_
 r protobuf_AssignDesc_steammessages_2eproto()::CMsgGCHVacVerificationChange_offsets_
 r protobuf_AssignDesc_steammessages_2eproto()::CMsgGCMsgMasterSetClientMsgRouting_Entry_offsets_
 r protobuf_AssignDesc_steammessages_2eproto()::CMsgGCMsgMasterSetClientMsgRouting_Response_offsets_
 r protobuf_AssignDesc_steammessages_2eproto()::CMsgGCMsgMasterSetClientMsgRouting_offsets_
 r protobuf_AssignDesc_steammessages_2eproto()::CMsgGCMsgMasterSetDirectory_Response_offsets_
 r protobuf_AssignDesc_steammessages_2eproto()::CMsgGCMsgMasterSetDirectory_SubGC_offsets_
 r protobuf_AssignDesc_steammessages_2eproto()::CMsgGCMsgMasterSetDirectory_offsets_
 r protobuf_AssignDesc_steammessages_2eproto()::CMsgGCMsgMasterSetWebAPIRouting_Entry_offsets_
 r protobuf_AssignDesc_steammessages_2eproto()::CMsgGCMsgMasterSetWebAPIRouting_Response_offsets_
 r protobuf_AssignDesc_steammessages_2eproto()::CMsgGCMsgMasterSetWebAPIRouting_offsets_
 r protobuf_AssignDesc_steammessages_2eproto()::CMsgGCMsgSetOptions_MessageRange_offsets_
 r protobuf_AssignDesc_steammessages_2eproto()::CMsgGCMsgSetOptions_offsets_
 r protobuf_AssignDesc_steammessages_2eproto()::CMsgGCMsgWebAPIJobRequestForwardResponse_offsets_
 r protobuf_AssignDesc_steammessages_2eproto()::CMsgGCRoutingInfo_offsets_
 r protobuf_AssignDesc_steammessages_2eproto()::CMsgHttpRequest_QueryParam_offsets_
 r protobuf_AssignDesc_steammessages_2eproto()::CMsgHttpRequest_RequestHeader_offsets_
 r protobuf_AssignDesc_steammessages_2eproto()::CMsgHttpRequest_offsets_
 r protobuf_AssignDesc_steammessages_2eproto()::CMsgHttpResponse_ResponseHeader_offsets_
 r protobuf_AssignDesc_steammessages_2eproto()::CMsgHttpResponse_offsets_
 r protobuf_AssignDesc_steammessages_2eproto()::CMsgNotificationOfSuspiciousActivity_MultipleGameInstances_offsets_
 r protobuf_AssignDesc_steammessages_2eproto()::CMsgNotificationOfSuspiciousActivity_offsets_
 r protobuf_AssignDesc_steammessages_2eproto()::CMsgNotifyWatchdog_offsets_
 r protobuf_AssignDesc_steammessages_2eproto()::CMsgPackageLicense_offsets_
 r protobuf_AssignDesc_steammessages_2eproto()::CMsgProtoBufHeader_offsets_
 r protobuf_AssignDesc_steammessages_2eproto()::CMsgWebAPIKey_offsets_
 r protobuf_AssignDesc_steammessages_2eproto()::CMsgWebAPIRequest_offsets_
 r protobuf_AssignDesc_tf_5fgcmessages_2eproto()::CAttribute_DynamicRecipeComponent_COMPAT_NEVER_SERIALIZE_THIS_OUT_offsets_
 r protobuf_AssignDesc_tf_5fgcmessages_2eproto()::CAttribute_DynamicRecipeComponent_offsets_
 r protobuf_AssignDesc_tf_5fgcmessages_2eproto()::CAttribute_ItemSlotCriteria_offsets_
 r protobuf_AssignDesc_tf_5fgcmessages_2eproto()::CAttribute_String_offsets_
 r protobuf_AssignDesc_tf_5fgcmessages_2eproto()::CAttribute_WorldItemPlacement_offsets_
 r protobuf_AssignDesc_tf_5fgcmessages_2eproto()::CEconItemPreviewDataBlock_offsets_
 r protobuf_AssignDesc_tf_5fgcmessages_2eproto()::CGCMsgGC_PlayerDuckLeaderboard_IndividualUpdate_offsets_
 r protobuf_AssignDesc_tf_5fgcmessages_2eproto()::CGCMsgGC_War_GlobalStatsResponse_SideScore_offsets_
 r protobuf_AssignDesc_tf_5fgcmessages_2eproto()::CGCMsgGC_War_GlobalStatsResponse_offsets_
 r protobuf_AssignDesc_tf_5fgcmessages_2eproto()::CGCMsgGC_War_IndividualUpdate_offsets_
 r protobuf_AssignDesc_tf_5fgcmessages_2eproto()::CGCMsgGC_War_JoinWar_offsets_
 r protobuf_AssignDesc_tf_5fgcmessages_2eproto()::CGCMsgGC_War_RequestGlobalStats_offsets_
 r protobuf_AssignDesc_tf_5fgcmessages_2eproto()::CGCMsgTFHelloResponse_offsets_
 r protobuf_AssignDesc_tf_5fgcmessages_2eproto()::CGCMsgTFSyncEx_offsets_
 r protobuf_AssignDesc_tf_5fgcmessages_2eproto()::CGCMsgTFSync_offsets_
 r protobuf_AssignDesc_tf_5fgcmessages_2eproto()::CGCMsg_WorldItemPlacement_Update_offsets_
 r protobuf_AssignDesc_tf_5fgcmessages_2eproto()::CLobbyPendingPlayerReport_offsets_
 r protobuf_AssignDesc_tf_5fgcmessages_2eproto()::CMsgAcceptInviteResponse_offsets_
 r protobuf_AssignDesc_tf_5fgcmessages_2eproto()::CMsgAcceptInvite_offsets_
 r protobuf_AssignDesc_tf_5fgcmessages_2eproto()::CMsgAcknowledgeXP_offsets_
 r protobuf_AssignDesc_tf_5fgcmessages_2eproto()::CMsgCasualMatchmakingSearchCriteria_offsets_
 r protobuf_AssignDesc_tf_5fgcmessages_2eproto()::CMsgCreateOrUpdatePartyReply_offsets_
 r protobuf_AssignDesc_tf_5fgcmessages_2eproto()::CMsgCreateOrUpdateParty_offsets_
 r protobuf_AssignDesc_tf_5fgcmessages_2eproto()::CMsgExitMatchmaking_offsets_
 r protobuf_AssignDesc_tf_5fgcmessages_2eproto()::CMsgGCCasualCriteriaStatsResponse_DataCenterPopulation_offsets_
 r protobuf_AssignDesc_tf_5fgcmessages_2eproto()::CMsgGCCasualCriteriaStatsResponse_offsets_
 r protobuf_AssignDesc_tf_5fgcmessages_2eproto()::CMsgGCDataCenterPing_Update_PingEntry_offsets_
 r protobuf_AssignDesc_tf_5fgcmessages_2eproto()::CMsgGCDataCenterPing_Update_offsets_
 r protobuf_AssignDesc_tf_5fgcmessages_2eproto()::CMsgGCMatchHistoryLoad_offsets_
 r protobuf_AssignDesc_tf_5fgcmessages_2eproto()::CMsgGCNotificationQueue_offsets_
 r protobuf_AssignDesc_tf_5fgcmessages_2eproto()::CMsgGCNotification_offsets_
 r protobuf_AssignDesc_tf_5fgcmessages_2eproto()::CMsgGCRematchRequestResponse_offsets_
 r protobuf_AssignDesc_tf_5fgcmessages_2eproto()::CMsgGCRematchRequest_PartyEntry_offsets_
 r protobuf_AssignDesc_tf_5fgcmessages_2eproto()::CMsgGCRematchRequest_offsets_
 r protobuf_AssignDesc_tf_5fgcmessages_2eproto()::CMsgGCRequestCasualCriteriaStats_offsets_
 r protobuf_AssignDesc_tf_5fgcmessages_2eproto()::CMsgGCSurveyRequest_offsets_
 r protobuf_AssignDesc_tf_5fgcmessages_2eproto()::CMsgGCSurveyResponse_offsets_
 r protobuf_AssignDesc_tf_5fgcmessages_2eproto()::CMsgGCTFSpecificItemBroadcast_offsets_
 r protobuf_AssignDesc_tf_5fgcmessages_2eproto()::CMsgGC_Client2GCEconPreviewDataBlockRequest_offsets_
 r protobuf_AssignDesc_tf_5fgcmessages_2eproto()::CMsgGC_Client2GCEconPreviewDataBlockResponse_offsets_
 r protobuf_AssignDesc_tf_5fgcmessages_2eproto()::CMsgGC_Client_UseServerModificationItem_Response_offsets_
 r protobuf_AssignDesc_tf_5fgcmessages_2eproto()::CMsgGC_Client_UseServerModificationItem_offsets_
 r protobuf_AssignDesc_tf_5fgcmessages_2eproto()::CMsgGC_DailyCompetitiveStatsRollup_Response_RankBucketEntry_offsets_
 r protobuf_AssignDesc_tf_5fgcmessages_2eproto()::CMsgGC_DailyCompetitiveStatsRollup_Response_offsets_
 r protobuf_AssignDesc_tf_5fgcmessages_2eproto()::CMsgGC_DailyCompetitiveStatsRollup_offsets_
 r protobuf_AssignDesc_tf_5fgcmessages_2eproto()::CMsgGC_GameServer_AckPolicyResponse_offsets_
 r protobuf_AssignDesc_tf_5fgcmessages_2eproto()::CMsgGC_GameServer_AckPolicy_offsets_
 r protobuf_AssignDesc_tf_5fgcmessages_2eproto()::CMsgGC_GameServer_AuthChallengeResponse_offsets_
 r protobuf_AssignDesc_tf_5fgcmessages_2eproto()::CMsgGC_GameServer_AuthChallenge_offsets_
 r protobuf_AssignDesc_tf_5fgcmessages_2eproto()::CMsgGC_GameServer_AuthResult_offsets_
 r protobuf_AssignDesc_tf_5fgcmessages_2eproto()::CMsgGC_GameServer_CreateIdentityResponse_offsets_
 r protobuf_AssignDesc_tf_5fgcmessages_2eproto()::CMsgGC_GameServer_CreateIdentity_offsets_
 r protobuf_AssignDesc_tf_5fgcmessages_2eproto()::CMsgGC_GameServer_LevelInfo_offsets_
 r protobuf_AssignDesc_tf_5fgcmessages_2eproto()::CMsgGC_GameServer_ListResponse_GameServerIdentity_offsets_
 r protobuf_AssignDesc_tf_5fgcmessages_2eproto()::CMsgGC_GameServer_ListResponse_offsets_
 r protobuf_AssignDesc_tf_5fgcmessages_2eproto()::CMsgGC_GameServer_List_offsets_
 r protobuf_AssignDesc_tf_5fgcmessages_2eproto()::CMsgGC_GameServer_ResetIdentityResponse_offsets_
 r protobuf_AssignDesc_tf_5fgcmessages_2eproto()::CMsgGC_GameServer_ResetIdentity_offsets_
 r protobuf_AssignDesc_tf_5fgcmessages_2eproto()::CMsgGC_GameServer_ServerModificationItemExpired_offsets_
 r protobuf_AssignDesc_tf_5fgcmessages_2eproto()::CMsgGC_GameServer_ServerModificationItem_offsets_
 r protobuf_AssignDesc_tf_5fgcmessages_2eproto()::CMsgGC_GameServer_UseServerModificationItem_Response_offsets_
 r protobuf_AssignDesc_tf_5fgcmessages_2eproto()::CMsgGC_GameServer_UseServerModificationItem_offsets_
 r protobuf_AssignDesc_tf_5fgcmessages_2eproto()::CMsgGC_Halloween_GrantItemResponse_offsets_
 r protobuf_AssignDesc_tf_5fgcmessages_2eproto()::CMsgGC_Halloween_GrantItem_offsets_
 r protobuf_AssignDesc_tf_5fgcmessages_2eproto()::CMsgGC_Halloween_ItemClaimed_offsets_
 r protobuf_AssignDesc_tf_5fgcmessages_2eproto()::CMsgGC_Halloween_ReservedItem_offsets_
 r protobuf_AssignDesc_tf_5fgcmessages_2eproto()::CMsgGC_KickPlayerFromLobby_offsets_
 r protobuf_AssignDesc_tf_5fgcmessages_2eproto()::CMsgGC_Match_ResultResponse_offsets_
 r protobuf_AssignDesc_tf_5fgcmessages_2eproto()::CMsgGC_Match_Result_Player_offsets_
 r protobuf_AssignDesc_tf_5fgcmessages_2eproto()::CMsgGC_Match_Result_offsets_
 r protobuf_AssignDesc_tf_5fgcmessages_2eproto()::CMsgGC_PickupItemEligibility_QueryResponse_offsets_
 r protobuf_AssignDesc_tf_5fgcmessages_2eproto()::CMsgGC_PickupItemEligibility_Query_offsets_
 r protobuf_AssignDesc_tf_5fgcmessages_2eproto()::CMsgGC_ReportPlayer_offsets_
 r protobuf_AssignDesc_tf_5fgcmessages_2eproto()::CMsgGC_TFVoteKickPlayerRequest_offsets_
 r protobuf_AssignDesc_tf_5fgcmessages_2eproto()::CMsgGC_VoteKickPlayerRequestResponse_offsets_
 r protobuf_AssignDesc_tf_5fgcmessages_2eproto()::CMsgGameServerKickingLobbyResponse_offsets_
 r protobuf_AssignDesc_tf_5fgcmessages_2eproto()::CMsgGameServerKickingLobby_offsets_
 r protobuf_AssignDesc_tf_5fgcmessages_2eproto()::CMsgGameServerMatchmakingStatus_Player_offsets_
 r protobuf_AssignDesc_tf_5fgcmessages_2eproto()::CMsgGameServerMatchmakingStatus_offsets_
 r protobuf_AssignDesc_tf_5fgcmessages_2eproto()::CMsgHalloween_Merasmus2012_offsets_
 r protobuf_AssignDesc_tf_5fgcmessages_2eproto()::CMsgHalloween_ServerBossEvent_offsets_
 r protobuf_AssignDesc_tf_5fgcmessages_2eproto()::CMsgKickedFromMatchmakingQueue_offsets_
 r protobuf_AssignDesc_tf_5fgcmessages_2eproto()::CMsgLeaveGameAndPrepareToJoinParty_offsets_
 r protobuf_AssignDesc_tf_5fgcmessages_2eproto()::CMsgMatchSearchCriteria_offsets_
 r protobuf_AssignDesc_tf_5fgcmessages_2eproto()::CMsgMatchmakingProgress_offsets_
 r protobuf_AssignDesc_tf_5fgcmessages_2eproto()::CMsgMatchmakingSearchCountRequest_offsets_
 r protobuf_AssignDesc_tf_5fgcmessages_2eproto()::CMsgMatchmakingSearchCountResponse_offsets_
 r protobuf_AssignDesc_tf_5fgcmessages_2eproto()::CMsgMvMMannUpVictoryReply_offsets_
 r protobuf_AssignDesc_tf_5fgcmessages_2eproto()::CMsgMvMVictoryInfo_Item_offsets_
 r protobuf_AssignDesc_tf_5fgcmessages_2eproto()::CMsgMvMVictoryInfo_Player_offsets_
 r protobuf_AssignDesc_tf_5fgcmessages_2eproto()::CMsgMvMVictoryInfo_offsets_
 r protobuf_AssignDesc_tf_5fgcmessages_2eproto()::CMsgMvMVictory_Player_offsets_
 r protobuf_AssignDesc_tf_5fgcmessages_2eproto()::CMsgMvMVictory_offsets_
 r protobuf_AssignDesc_tf_5fgcmessages_2eproto()::CMsgNotificationAcknowledgeReply_offsets_
 r protobuf_AssignDesc_tf_5fgcmessages_2eproto()::CMsgNotificationAcknowledge_offsets_
 r protobuf_AssignDesc_tf_5fgcmessages_2eproto()::CMsgPlayerLeftMatchResponse_offsets_
 r protobuf_AssignDesc_tf_5fgcmessages_2eproto()::CMsgPlayerLeftMatch_offsets_
 r protobuf_AssignDesc_tf_5fgcmessages_2eproto()::CMsgReadyUp_offsets_
 r protobuf_AssignDesc_tf_5fgcmessages_2eproto()::CMsgReplaySubmitContestEntryResponse_offsets_
 r protobuf_AssignDesc_tf_5fgcmessages_2eproto()::CMsgReplaySubmitContestEntry_offsets_
 r protobuf_AssignDesc_tf_5fgcmessages_2eproto()::CMsgSaxxyAwarded_offsets_
 r protobuf_AssignDesc_tf_5fgcmessages_2eproto()::CMsgSetItemSlotAttribute_offsets_
 r protobuf_AssignDesc_tf_5fgcmessages_2eproto()::CMsgTFClientInit_offsets_
 r protobuf_AssignDesc_tf_5fgcmessages_2eproto()::CMsgTFCoaching_AddToCoaches_offsets_
 r protobuf_AssignDesc_tf_5fgcmessages_2eproto()::CMsgTFCoaching_AskCoachResponse_offsets_
 r protobuf_AssignDesc_tf_5fgcmessages_2eproto()::CMsgTFCoaching_AskCoach_offsets_
 r protobuf_AssignDesc_tf_5fgcmessages_2eproto()::CMsgTFCoaching_CoachJoinGame_offsets_
 r protobuf_AssignDesc_tf_5fgcmessages_2eproto()::CMsgTFCoaching_CoachJoined_offsets_
 r protobuf_AssignDesc_tf_5fgcmessages_2eproto()::CMsgTFCoaching_CoachJoining_offsets_
 r protobuf_AssignDesc_tf_5fgcmessages_2eproto()::CMsgTFCoaching_FindCoachResponse_offsets_
 r protobuf_AssignDesc_tf_5fgcmessages_2eproto()::CMsgTFCoaching_FindCoach_offsets_
 r protobuf_AssignDesc_tf_5fgcmessages_2eproto()::CMsgTFCoaching_LikeCurrentCoach_offsets_
 r protobuf_AssignDesc_tf_5fgcmessages_2eproto()::CMsgTFCoaching_RemoveCurrentCoach_offsets_
 r protobuf_AssignDesc_tf_5fgcmessages_2eproto()::CMsgTFCoaching_RemoveFromCoaches_offsets_
 r protobuf_AssignDesc_tf_5fgcmessages_2eproto()::CMsgTFFreeTrialChooseMostHelpfulFriend_offsets_
 r protobuf_AssignDesc_tf_5fgcmessages_2eproto()::CMsgTFFreeTrialConvertedToPremium_offsets_
 r protobuf_AssignDesc_tf_5fgcmessages_2eproto()::CMsgTFGoldenWrenchBroadcast_offsets_
 r protobuf_AssignDesc_tf_5fgcmessages_2eproto()::CMsgTFJoinChatChannelResponse_ChatMember_offsets_
 r protobuf_AssignDesc_tf_5fgcmessages_2eproto()::CMsgTFJoinChatChannelResponse_offsets_
 r protobuf_AssignDesc_tf_5fgcmessages_2eproto()::CMsgTFJoinChatChannel_offsets_
 r protobuf_AssignDesc_tf_5fgcmessages_2eproto()::CMsgTFLeaveChatChannel_offsets_
 r protobuf_AssignDesc_tf_5fgcmessages_2eproto()::CMsgTFOtherJoinedChatChannel_offsets_
 r protobuf_AssignDesc_tf_5fgcmessages_2eproto()::CMsgTFOtherLeftChatChannel_offsets_
 r protobuf_AssignDesc_tf_5fgcmessages_2eproto()::CMsgTFQuickplay_PlayerJoining_offsets_
 r protobuf_AssignDesc_tf_5fgcmessages_2eproto()::CMsgTFQuickplay_ScoreServersResponse_ServerInfo_offsets_
 r protobuf_AssignDesc_tf_5fgcmessages_2eproto()::CMsgTFQuickplay_ScoreServersResponse_offsets_
 r protobuf_AssignDesc_tf_5fgcmessages_2eproto()::CMsgTFQuickplay_ScoreServers_ServerInfo_offsets_
 r protobuf_AssignDesc_tf_5fgcmessages_2eproto()::CMsgTFQuickplay_ScoreServers_offsets_
 r protobuf_AssignDesc_tf_5fgcmessages_2eproto()::CMsgTFRequestChatChannelListResponse_ChatChannel_offsets_
 r protobuf_AssignDesc_tf_5fgcmessages_2eproto()::CMsgTFRequestChatChannelListResponse_offsets_
 r protobuf_AssignDesc_tf_5fgcmessages_2eproto()::CMsgTFRequestChatChannelList_offsets_
 r protobuf_AssignDesc_tf_5fgcmessages_2eproto()::CMsgTFRequestDefaultChatChannelResponse_offsets_
 r protobuf_AssignDesc_tf_5fgcmessages_2eproto()::CMsgTFRequestDefaultChatChannel_offsets_
 r protobuf_AssignDesc_tf_5fgcmessages_2eproto()::CMsgTFRequestTF2FriendsResponse_offsets_
 r protobuf_AssignDesc_tf_5fgcmessages_2eproto()::CMsgTFRequestTF2Friends_offsets_
 r protobuf_AssignDesc_tf_5fgcmessages_2eproto()::CMsgTFSaxxyBroadcast_offsets_
 r protobuf_AssignDesc_tf_5fgcmessages_2eproto()::CMsgTFThankedBySomeone_offsets_
 r protobuf_AssignDesc_tf_5fgcmessages_2eproto()::CMsgTFThankedSomeone_offsets_
 r protobuf_AssignDesc_tf_5fgcmessages_2eproto()::CMsgTFVoteKickBanPlayerResult_offsets_
 r protobuf_AssignDesc_tf_5fgcmessages_2eproto()::CMsgTFVoteKickBanPlayer_offsets_
 r protobuf_AssignDesc_tf_5fgcmessages_2eproto()::CMsgTFWorldStatus_offsets_
 r protobuf_AssignDesc_tf_5fgcmessages_2eproto()::CMsgTFXPSourceBreakdown_offsets_
 r protobuf_AssignDesc_tf_5fgcmessages_2eproto()::CMsgTFXPSource_offsets_
 r protobuf_AssignDesc_tf_5fgcmessages_2eproto()::CMsgUpdateHalloweenMerasmusLootLevel_Player_offsets_
 r protobuf_AssignDesc_tf_5fgcmessages_2eproto()::CMsgUpdateHalloweenMerasmusLootLevel_offsets_
 r protobuf_AssignDesc_tf_5fgcmessages_2eproto()::CReplayCachedContestData_offsets_
 r protobuf_AssignDesc_tf_5fgcmessages_2eproto()::CSOTFDuelSummary_offsets_
 r protobuf_AssignDesc_tf_5fgcmessages_2eproto()::CSOTFGameServerLobby_offsets_
 r protobuf_AssignDesc_tf_5fgcmessages_2eproto()::CSOTFLadderPlayerStats_offsets_
 r protobuf_AssignDesc_tf_5fgcmessages_2eproto()::CSOTFMapContribution_offsets_
 r protobuf_AssignDesc_tf_5fgcmessages_2eproto()::CSOTFMatchResultPlayerStats_offsets_
 r protobuf_AssignDesc_tf_5fgcmessages_2eproto()::CSOTFPartyInvite_PartyMember_offsets_
 r protobuf_AssignDesc_tf_5fgcmessages_2eproto()::CSOTFPartyInvite_offsets_
 r protobuf_AssignDesc_tf_5fgcmessages_2eproto()::CSOTFPartyMember_offsets_
 r protobuf_AssignDesc_tf_5fgcmessages_2eproto()::CSOTFParty_offsets_
 r protobuf_AssignDesc_tf_5fgcmessages_2eproto()::CSOTFPlayerInfo_offsets_
 r protobuf_AssignDesc_tf_5fgcmessages_2eproto()::CSOWarData_offsets_
 r protobuf_AssignDesc_tf_5fgcmessages_2eproto()::CTFLobbyMember_offsets_
 r pulCRCTable
 r s_ExtIndices
 r s_MatIndices
 r s_acttableBuildingDeployed
 r s_acttableCompetitiveLoserState
 r s_acttableKartState
 r s_acttableLoserState
 r s_pAttributeSize
 r typeinfo name for (anonymous namespace)::CPlayerInfoManager_V1
 r typeinfo name for (anonymous namespace)::IPlayerInfoManager_V1
 r typeinfo name for CDecal::StaticDecal()::CTraceFilterValidForDecal
 r typeinfo name for CEconItemView::InitNetworkedDynamicAttributesForDemos()::CEconDynamicAttributesForDemosIterator
 r typeinfo name for CEconItemView::IterateAttributes(IEconItemAttributeIterator*) const::CEconItemAttributeIterator_EconItemViewWrapper
 r typeinfo name for CTFPowerupBottle::Reset()::CAttributeIterator_ZeroRefundableCurrency
 r typeinfo name for CTFPowerupBottle::Use()::CAttributeIterator_ConsumeOneRefundableCharge
 r typeinfo name for CTeamplayRoundBasedRules::CleanUpMap()::CTeamplayMapEntityFilter
 raise
 read$UNIX2003
 realloc
 round
 setjmp
 signal
 sin
 sinf
 sleep$UNIX2003
 snprintf
 sprintf
 sscanf
 std::_Rb_tree_decrement(std::_Rb_tree_node_base*)
 std::_Rb_tree_increment(std::_Rb_tree_node_base const*)
 std::_Rb_tree_increment(std::_Rb_tree_node_base*)
 std::_Rb_tree_insert_and_rebalance(bool, std::_Rb_tree_node_base*, std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)
 std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)
 std::__throw_bad_alloc()
 std::__throw_length_error(char const*)
 std::__throw_logic_error(char const*)
 std::allocator<char>::allocator()
 std::allocator<char>::~allocator()
 std::bad_alloc::~bad_alloc()
 std::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string()
 std::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(char const*, std::allocator<char> const&)
 std::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(char const*, unsigned long, std::allocator<char> const&)
 std::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::string const&)
 std::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()
 std::exception::~exception()
 std::ios_base::Init::Init()
 std::ios_base::Init::~Init()
 std::set_new_handler(void (*)())
 std::string::_Alloc_hider::_Alloc_hider(char*, std::allocator<char> const&)
 std::string::_M_iend() const
 std::string::_M_leak_hard()
 std::string::_M_mutate(unsigned long, unsigned long, unsigned long)
 std::string::_Rep::_M_destroy(std::allocator<char> const&)
 std::string::_Rep::_M_refdata()
 std::string::_Rep::_M_set_length_and_sharable(unsigned long)
 std::string::_Rep::_S_create(unsigned long, unsigned long, std::allocator<char> const&)
 std::string::_Rep::_S_empty_rep_storage
 std::string::_S_copy_chars(char*, char*, char*)
 std::string::_S_empty_rep()
 std::string::append(char const*)
 std::string::append(char const*, unsigned long)
 std::string::append(std::string const&)
 std::string::append(std::string const&, unsigned long, unsigned long)
 std::string::append(unsigned long, char)
 std::string::assign(char const*)
 std::string::assign(char const*, unsigned long)
 std::string::assign(std::string const&)
 std::string::begin()
 std::string::c_str() const
 std::string::capacity() const
 std::string::clear()
 std::string::compare(char const*) const
 std::string::compare(std::string const&) const
 std::string::compare(unsigned long, unsigned long, std::string const&) const
 std::string::data() const
 std::string::empty() const
 std::string::end()
 std::string::erase(unsigned long, unsigned long)
 std::string::find_first_of(char, unsigned long) const
 std::string::find_last_of(char, unsigned long) const
 std::string::length() const
 std::string::operator+=(char const*)
 std::string::operator+=(char)
 std::string::operator+=(std::string const&)
 std::string::operator=(char const*)
 std::string::operator=(std::string const&)
 std::string::operator[](unsigned long)
 std::string::operator[](unsigned long) const
 std::string::push_back(char)
 std::string::replace(__gnu_cxx::__normal_iterator<char*, std::string>, __gnu_cxx::__normal_iterator<char*, std::string>, char const*, char const*)
 std::string::reserve(unsigned long)
 std::string::resize(unsigned long)
 std::string::resize(unsigned long, char)
 std::string::size() const
 std::string::substr(unsigned long, unsigned long) const
 std::terminate()
 std::uncaught_exception()
 strcasecmp
 strcat
 strchr
 strcmp
 strcpy
 strerror$UNIX2003
 strftime$UNIX2003
 strlen
 strncasecmp
 strncat
 strncmp
 strncpy
 strrchr
 strstr
 strtod$UNIX2003
 strtof$UNIX2003
 strtok
 strtol
 strtoll
 strtoul
 strtoull
 swprintf
 t (anonymous namespace)::CPlayerInfoManager_V1::GetPlayerInfo(edict_t*)
 t (anonymous namespace)::SortDescendingPriority(CPasstimeBallController* const*, CPasstimeBallController* const*)
 t (anonymous namespace)::__CreateCPlayerInfoManager_V1IPlayerInfoManager_V1_interface()
 t (anonymous namespace)::protobuf_RegisterTypes(std::string const&)
 t AlignBoxes(matrix3x4_t*, Vector const&, Vector const&)
 t AnalysisProgress(char const*, int, int, bool)
 t AttributeAutocomplete(char const*, char (*) [64])
 t BIgnoreConvarChangeInPVEMode()
 t BuildTeleportList_r(CBaseEntity*, CUtlVector<TeleportListEntry_t, CUtlMemory<TeleportListEntry_t, int> >&)
 t CC_FadeIn(CCommand const&)
 t CC_FadeOut(CCommand const&)
 t CC_ForceLookAt(CCommand const&)
 t CC_ResetGameStats(CCommand const&)
 t CC_SelectBot(CCommand const&)
 t CC_SetDebug(CCommand const&)
 t CC_SetDebugFilter(CCommand const&)
 t CDecal::StaticDecal()::CTraceFilterValidForDecal::ShouldHitEntity(IHandleEntity*, int)
 t CEconItemView::InitNetworkedDynamicAttributesForDemos()::CEconDynamicAttributesForDemosIterator::OnIterateAttributeValue(CEconItemAttributeDefinition const*, float)
 t CEconItemView::InitNetworkedDynamicAttributesForDemos()::CEconDynamicAttributesForDemosIterator::OnIterateAttributeValue(CEconItemAttributeDefinition const*, unsigned int)
 t CEconItemView::InitNetworkedDynamicAttributesForDemos()::CEconDynamicAttributesForDemosIterator::~CEconDynamicAttributesForDemosIterator()
 t CEconItemView::IterateAttributes(IEconItemAttributeIterator*) const::CEconItemAttributeIterator_EconItemViewWrapper::OnIterateAttributeValue(CEconItemAttributeDefinition const*, CAttribute_DynamicRecipeComponent const&)
 t CEconItemView::IterateAttributes(IEconItemAttributeIterator*) const::CEconItemAttributeIterator_EconItemViewWrapper::OnIterateAttributeValue(CEconItemAttributeDefinition const*, CAttribute_ItemSlotCriteria const&)
 t CEconItemView::IterateAttributes(IEconItemAttributeIterator*) const::CEconItemAttributeIterator_EconItemViewWrapper::OnIterateAttributeValue(CEconItemAttributeDefinition const*, CAttribute_String const&)
 t CEconItemView::IterateAttributes(IEconItemAttributeIterator*) const::CEconItemAttributeIterator_EconItemViewWrapper::OnIterateAttributeValue(CEconItemAttributeDefinition const*, CAttribute_WorldItemPlacement const&)
 t CEconItemView::IterateAttributes(IEconItemAttributeIterator*) const::CEconItemAttributeIterator_EconItemViewWrapper::OnIterateAttributeValue(CEconItemAttributeDefinition const*, float)
 t CEconItemView::IterateAttributes(IEconItemAttributeIterator*) const::CEconItemAttributeIterator_EconItemViewWrapper::OnIterateAttributeValue(CEconItemAttributeDefinition const*, unsigned int)
 t CEconItemView::IterateAttributes(IEconItemAttributeIterator*) const::CEconItemAttributeIterator_EconItemViewWrapper::OnIterateAttributeValue(CEconItemAttributeDefinition const*, unsigned long long const&)
 t CEconItemView::IterateAttributes(IEconItemAttributeIterator*) const::CEconItemAttributeIterator_EconItemViewWrapper::~CEconItemAttributeIterator_EconItemViewWrapper()
 t CEconTool_ItemDynamicRecipe::BInitFromKV(KeyValues*, CUtlVector<CUtlString, CUtlMemory<CUtlString, int> >*)::RecipeComponentSorter::SortRecipeComponentVector(CEconTool_ItemDynamicRecipe::CBaseRecipeComponent* const*, CEconTool_ItemDynamicRecipe::CBaseRecipeComponent* const*)
 t CTFPowerupBottle::Reset()::CAttributeIterator_ZeroRefundableCurrency::OnIterateAttributeValueUntyped(CEconItemAttributeDefinition const*)
 t CTFPowerupBottle::Reset()::CAttributeIterator_ZeroRefundableCurrency::~CAttributeIterator_ZeroRefundableCurrency()
 t CTFPowerupBottle::Use()::CAttributeIterator_ConsumeOneRefundableCharge::OnIterateAttributeValueUntyped(CEconItemAttributeDefinition const*)
 t CTFPowerupBottle::Use()::CAttributeIterator_ConsumeOneRefundableCharge::~CAttributeIterator_ConsumeOneRefundableCharge()
 t CTeamplayRoundBasedRules::CleanUpMap()::CTeamplayMapEntityFilter::CreateNextEntity(char const*)
 t CTeamplayRoundBasedRules::CleanUpMap()::CTeamplayMapEntityFilter::ShouldCreateEntity(char const*)
 t CUtlVector<CTFGCServerSystem::UpdateConnectedPlayersAndServerInfo(CMsgGameServerMatchmakingStatus_Event, bool)::Reservation_t, CUtlMemory<CTFGCServerSystem::UpdateConnectedPlayersAndServerInfo(CMsgGameServerMatchmakingStatus_Event, bool)::Reservation_t, int> >::AddToTail(CTFGCServerSystem::UpdateConnectedPlayersAndServerInfo(CMsgGameServerMatchmakingStatus_Event, bool)::Reservation_t const&)
 t CUtlVector<CTFGCServerSystem::UpdateConnectedPlayersAndServerInfo(CMsgGameServerMatchmakingStatus_Event, bool)::Reservation_t, CUtlMemory<CTFGCServerSystem::UpdateConnectedPlayersAndServerInfo(CMsgGameServerMatchmakingStatus_Event, bool)::Reservation_t, int> >::~CUtlVector()
 t CalcAnimation(CStudioHdr const*, Vector*, Quaternion*, mstudioseqdesc_t&, int, int, float, int)
 t CalcDecompressedAnimation(mstudiocompressedikerror_t const*, int, float, Vector&, Quaternion&)
 t CalcLocalHierarchyAnimation(CStudioHdr const*, matrix3x4_t*, CBoneBitList&, Vector*, Quaternion*, mstudiobone_t const*, mstudiolocalhierarchy_t*, int, int, float, int, float, int)
 t CalcZeroframeData(CStudioHdr const*, studiohdr_t const*, virtualgroup_t const*, mstudiobone_t const*, mstudioanimdesc_t&, float, Vector*, Quaternion*, int, float)
 t CalculateKeyValuesCRCRecursive(KeyValues*, unsigned int*, bool)
 t CallbackHighlight(CBaseEntity*)
 t CallbackReport(CBaseEntity*)
 t CanFindBallSpawnLocation(Vector const&, Vector*)
 t CheckMedicResist(ETFCond, ETFCond, CTFPlayer*, float, float&, bool, float&)
 t ChoreEventStartTimeLessFunc(CChoreoEvent* const&, CChoreoEvent* const&)
 t ClipRayToHitbox(Ray_t const&, mstudiobbox_t*, matrix3x4_t&, CGameTrace&)
 t CommandNavCheckFloor()
 t CommandNavCheckStairs()
 t CommandNavSelectOverlapping()
 t CommandNavUpdateBlocked()
 t CompareSpawnOrder(HierarchicalSpawn_t*, HierarchicalSpawn_t*)
 t ComputePushStartMatrix(matrix3x4_t&, CBaseEntity*, pushblock_t const&)
 t ComputeSeparatingPlane(matrix3x4_t const&, matrix3x4_t const&, Vector const&, Vector const&, float, cplane_t*)
 t ComputeSpawnHierarchyDepth_r(CBaseEntity*)
 t CreateAirboat(CBasePlayer*)
 t CreateJeep(CBasePlayer*)
 t CreatePhysicsToy(char const*, Vector const&, QAngle const&)
 t CreditsDone_f()
 t CryptoPP::TrySSE2()
 t CryptoPP::TwosComplement(unsigned int*, unsigned long)
 t DebugConstraints(CBaseEntity*)
 t DescribeGroundList(CBaseEntity*)
 t DispatchRPSEffect(CTFPlayer const*, char const*)
 t FindPassableSpace(CBasePlayer*, Vector const&, float, Vector&)
 t FindPositionInArea(CNavArea*, NavCornerType)
 t GameEventLessFunc(CHLTVGameEvent const&, CHLTVGameEvent const&)
 t GetAllChildren_r(CBaseEntity*, CUtlVector<CBaseEntity*, CUtlMemory<CBaseEntity*, int> >&)
 t GetFadeParms(CCommand const&, float&, color32_s&)
 t GetWorkshopUGC()
 t HandleCoachCommand(CTFPlayer*, eCoachCommand)
 t HookOutput(char const*, string_t, char const*, char const*, char const*, int)
 t InitPerClassRandomChanceStringArray(KeyValues*, CRandomChanceString (&) [11], CUtlVector<CUtlString, CUtlMemory<CUtlString, int> >*)
 t InitPerClassStringArray(KeyValues*, char const* (&) [11])
 t InitPerClassStringVectorArray(KeyValues*, CUtlVector<char const*, CUtlMemory<char const*, int> > (&) [11], CUtlVector<CUtlString, CUtlMemory<CUtlString, int> >*)
 t InvokeMethod(void (IGameSystem::*)(), char const*)
 t InvokeMethodReverseOrder(void (IGameSystem::*)())
 t InvokePerFrameMethod(void (IGameSystemPerFrame::*)(), char const*)
 t IsNodeOverlapped(Vector const&, Vector const&)
 t ListRecentNPCSpeech()
 t MD5Transform(unsigned int*, unsigned int const*)
 t MarkVPhysicsDebug(CBaseEntity*)
 t NavAttributeAutocomplete(char const*, char (*) [64])
 t OutputVPhysicsDebugInfo(CBaseEntity*)
 t ParseDynamicAttributes(CTFBot::EventChangeAttributes_t&, KeyValues*)
 t ParseEvent(KeyValues*)
 t PhysFrame(float)
 t PhysicsCheckSweep(CBaseEntity*, Vector const&, Vector const&, CGameTrace*)
 t PlaceNameAutocompleteCallback(char const*, char (*) [64])
 t PlayerHasDuckStreaks(CTFPlayer*)
 t PostSimulation_ImpulseEvent(IPhysicsObject*, Vector const&, Vector const&)
 t PostUpdateQueryCache()
 t PotentiallyFireDamageMitigatedEvent(CTFPlayer const*, CTFPlayer const*, CEconEntity const*, float, float)
 t PreUpdateQueryCache()
 t ProcessNavigationQueries(CFunctor**, unsigned int)
 t RecursiveInheritKeyValues(KeyValues*, KeyValues*)
 t ReduceToComponentAreas(CNavArea*, bool)
 t RetrieveLeaderboardEntries(LeaderboardScoresDownloaded_t&, CUtlVector<LeaderboardEntry_t*, CUtlMemory<LeaderboardEntry_t*, int> >&)
 t SecretRoom_PlayTvSound(CSoundPatch**, int, char const*, float)
 t SelectedSetColorChaged(IConVar*, char const*, float)
 t SendDuelResults(duel_minigame_data_t&, CSteamID const&, eDuelEndReason)
 t SendProxy_Empty(SendProp const*, void const*, void const*, DVariant*, int, int)
 t SendProxy_PredictableIdToInt(SendProp const*, void const*, void const*, DVariant*, int, int)
 t SendProxy_SendPredictableId(SendProp const*, void const*, void const*, CSendProxyRecipients*, int)
 t SendProxy_Solid(SendProp const*, void const*, void const*, DVariant*, int, int)
 t SendProxy_SolidFlags(SendProp const*, void const*, void const*, DVariant*, int, int)
 t SendVoteResponseToGC(bool)
 t SetCustomNameOrDescAttribute(CEconItem*, CEconItemAttributeDefinition const*, char const*)
 t SetMinMaxSize(CBaseEntity*, Vector const&, Vector const&)
 t SigIllHandlerCPUID
 t SigIllHandlerSSE2
 t SortCollectionByRarity(unsigned short const*, unsigned short const*)
 t SortMapPlaytime(void const*, void const*)
 t SpeakConceptBySteamID(CSteamID const&, int, CSteamID const&, CSteamID const&)
 t SpewFileInfo(IBaseFileSystem*, char const*, char const*, KeyValues*)
 t SwitchPlayersSort(CBaseMultiplayerPlayer* const*, CBaseMultiplayerPlayer* const*)
 t UTIL_FindClientInPVSGuts(edict_t*, unsigned char*, unsigned int)
 t UTIL_GetCurrentCheckClient()
 t UTIL_KickBotFromTeam(int)
 t UpdateDuelScore(CTFPlayer*, CTFPlayer*, eDuelScoreType)
 t ValidateKeysAreSubset(KeyValues*, CUtlVector<char const*, CUtlMemory<char const*, int> > const&, CUtlVector<CUtlString, CUtlMemory<CUtlString, int> >*)
 t ValidateMOTDFilename(IConVar*, char const*, float)
 t VoiceServerDebug(char const*, ...)
 t WriteAchievementGlobalState(KeyValues*, bool)
 t __CreateCEffectsServerIEffects_interface()
 t __CreateCGameMovementIGameMovement_interface()
 t __CreateCHLTVDirectorIHLTVDirector_interface()
 t __CreateCPlayerInfoManagerIPlayerInfoManager_interface()
 t __CreateCPluginBotManagerIBotManager_interface()
 t __CreateCPluginHelpersCheckIPluginHelpersCheck_interface()
 t __CreateCServerChoreoToolsIServerChoreoTools_interface()
 t __CreateCServerDLLSharedAppSystemsIServerDLLSharedAppSystems_interface()
 t __CreateCServerGameClientsIServerGameClients003_interface()
 t __CreateCServerGameClientsIServerGameClients_interface()
 t __CreateCServerGameDLLIServerGameDLL_interface()
 t __CreateCServerGameEntsIServerGameEnts_interface()
 t __CreateCServerGameTagsIServerGameTags_interface()
 t __CreateCServerReplayImpIServerReplay_interface()
 t __CreateCServerToolsIServerTools001_interface()
 t __CreateCServerToolsIServerTools002_interface()
 t __CreateCServerToolsIServerTools_interface()
 t __cxx_global_array_dtor
 t __cxx_global_array_dtor102
 t __cxx_global_array_dtor105
 t __cxx_global_array_dtor106
 t __cxx_global_array_dtor118
 t __cxx_global_array_dtor119
 t __cxx_global_array_dtor121
 t __cxx_global_array_dtor125
 t __cxx_global_array_dtor1254
 t __cxx_global_array_dtor13
 t __cxx_global_array_dtor14
 t __cxx_global_array_dtor140
 t __cxx_global_array_dtor15
 t __cxx_global_array_dtor150
 t __cxx_global_array_dtor158
 t __cxx_global_array_dtor16
 t __cxx_global_array_dtor166
 t __cxx_global_array_dtor167
 t __cxx_global_array_dtor172
 t __cxx_global_array_dtor173
 t __cxx_global_array_dtor175
 t __cxx_global_array_dtor18
 t __cxx_global_array_dtor182
 t __cxx_global_array_dtor183
 t __cxx_global_array_dtor184
 t __cxx_global_array_dtor189
 t __cxx_global_array_dtor19
 t __cxx_global_array_dtor191
 t __cxx_global_array_dtor192
 t __cxx_global_array_dtor195
 t __cxx_global_array_dtor199
 t __cxx_global_array_dtor20
 t __cxx_global_array_dtor200
 t __cxx_global_array_dtor21
 t __cxx_global_array_dtor211
 t __cxx_global_array_dtor212
 t __cxx_global_array_dtor22
 t __cxx_global_array_dtor220
 t __cxx_global_array_dtor228
 t __cxx_global_array_dtor23
 t __cxx_global_array_dtor232
 t __cxx_global_array_dtor237
 t __cxx_global_array_dtor241
 t __cxx_global_array_dtor242
 t __cxx_global_array_dtor25
 t __cxx_global_array_dtor251
 t __cxx_global_array_dtor257
 t __cxx_global_array_dtor26
 t __cxx_global_array_dtor260
 t __cxx_global_array_dtor265
 t __cxx_global_array_dtor27
 t __cxx_global_array_dtor28
 t __cxx_global_array_dtor280
 t __cxx_global_array_dtor29
 t __cxx_global_array_dtor30
 t __cxx_global_array_dtor308
 t __cxx_global_array_dtor31
 t __cxx_global_array_dtor34
 t __cxx_global_array_dtor351
 t __cxx_global_array_dtor36
 t __cxx_global_array_dtor38
 t __cxx_global_array_dtor39
 t __cxx_global_array_dtor397
 t __cxx_global_array_dtor40
 t __cxx_global_array_dtor408
 t __cxx_global_array_dtor41
 t __cxx_global_array_dtor412
 t __cxx_global_array_dtor425
 t __cxx_global_array_dtor427
 t __cxx_global_array_dtor43
 t __cxx_global_array_dtor45
 t __cxx_global_array_dtor46
 t __cxx_global_array_dtor47
 t __cxx_global_array_dtor48
 t __cxx_global_array_dtor50
 t __cxx_global_array_dtor51
 t __cxx_global_array_dtor52
 t __cxx_global_array_dtor53
 t __cxx_global_array_dtor54
 t __cxx_global_array_dtor58
 t __cxx_global_array_dtor60
 t __cxx_global_array_dtor61
 t __cxx_global_array_dtor63
 t __cxx_global_array_dtor64
 t __cxx_global_array_dtor67
 t __cxx_global_array_dtor68
 t __cxx_global_array_dtor69
 t __cxx_global_array_dtor72
 t __cxx_global_array_dtor73
 t __cxx_global_array_dtor80
 t __cxx_global_array_dtor81
 t __cxx_global_array_dtor85
 t __cxx_global_array_dtor87
 t __cxx_global_array_dtor90
 t __cxx_global_array_dtor93
 t __cxx_global_array_dtor96
 t __cxx_global_var_init11
 t __cxx_global_var_init1165
 t __cxx_global_var_init12
 t __cxx_global_var_init1275
 t __cxx_global_var_init133
 t __cxx_global_var_init16
 t __cxx_global_var_init169
 t __cxx_global_var_init170
 t __cxx_global_var_init18
 t __cxx_global_var_init23
 t __cxx_global_var_init24
 t __cxx_global_var_init343
 t __cxx_global_var_init37
 t __cxx_global_var_init4
 t __cxx_global_var_init446
 t __cxx_global_var_init48
 t __cxx_global_var_init6
 t __static_initialization_and_destruction_0(int, int)
 t __tcf_0
 t __tcf_1
 t __tcf_10
 t __tcf_11
 t __tcf_12
 t __tcf_13
 t __tcf_14
 t __tcf_15
 t __tcf_16
 t __tcf_17
 t __tcf_18
 t __tcf_2
 t __tcf_3
 t __tcf_4
 t __tcf_5
 t __tcf_6
 t __tcf_7
 t __tcf_8
 t __tcf_9
 t ai_debug_node_connect(CCommand const&)
 t ai_dump_hints(CCommand const&)
 t ai_set_move_height_epsilon(CCommand const&)
 t bot(CCommand const&)
 t bot_changeteams(CCommand const&)
 t bot_drop(CCommand const&)
 t bot_hurt(CCommand const&)
 t bot_kick(CCommand const&)
 t bot_mirror(CCommand const&)
 t bot_moveto(CCommand const&)
 t bot_refill(CCommand const&)
 t bot_teleport(CCommand const&)
 t bot_whack(CCommand const&)
 t buddha(CCommand const&)
 t callvote(CCommand const&)
 t cast_hull(CCommand const&)
 t cast_ray(CCommand const&)
 t cc_bot_selectweapon(CCommand const&)
 t cc_spawn_merasmus_at_level(CCommand const&)
 t clear_debug_overlays(CCommand const&)
 t currency_give(CCommand const&)
 t dump_all_caches(CCommand const&)
 t dump_entity_sizes(CCommand const&)
 t dump_globals(CCommand const&)
 t ensure_so_trackers_for_steamid(CCommand const&)
 t explode(CCommand const&)
 t explodevector(CCommand const&)
 t fov(CCommand const&)
 t give(CCommand const&)
 t global constructors keyed to CryptoPP::AssignIntToInteger(std::type_info const&, void*, void const*)
 t global constructors keyed to CryptoPP::DEFAULT_CHANNEL
 t global constructors keyed to CryptoPP::PKCS_DigestDecoration<CryptoPP::SHA1>::decoration
 t global constructors keyed to CryptoPP::PolynomialMod2::PolynomialMod2()
 t global constructors keyed to a
 t hammer_update_entity(CCommand const&)
 t hammer_update_safe_entities(CCommand const&)
 t ifm_basecamera_camerastate(CCommand const&)
 t item_show_whitelistable_definitions(CCommand const&)
 t kill(CCommand const&)
 t killvector(CCommand const&)
 t mission_list(CCommand const&)
 t mission_show(CCommand const&)
 t mp_disable_autokick(CCommand const&)
 t mp_forcewin(CCommand const&)
 t nav_add_to_selected_set_by_id(CCommand const&)
 t nav_chop_selected(CCommand const&)
 t nav_corner_lower(CCommand const&)
 t nav_corner_place_on_ground(CCommand const&)
 t nav_corner_raise(CCommand const&)
 t nav_dump_selected_set_positions(CCommand const&)
 t nav_flood_select(CCommand const&)
 t nav_gen_cliffs_approx(CCommand const&)
 t nav_merge_mesh(CCommand const&)
 t nav_save_selected(CCommand const&)
 t nav_select_blocked_areas(CCommand const&)
 t nav_select_damaging_areas(CCommand const&)
 t nav_select_half_space(CCommand const&)
 t nav_select_larger_than(CCommand const&)
 t nav_select_obstructed_areas(CCommand const&)
 t nav_select_orphans(CCommand const&)
 t nav_select_radius(CCommand const&)
 t nav_select_stairs(CCommand const&)
 t nav_shift(CCommand const&)
 t nav_show_dumped_positions(CCommand const&)
 t nav_simplify_selected(CCommand const&)
 t nav_subdivide(CCommand const&)
 t nav_test_stairs(CCommand const&)
 t nav_update_lighting(CCommand const&)
 t nb_command(CCommand const&)
 t nb_delete_all(CCommand const&)
 t nb_move_to_cursor(CCommand const&)
 t npc_speakall(CCommand const&)
 t physics_budget(CCommand const&)
 t physics_constraints(CCommand const&)
 t physics_debug_entity(CCommand const&)
 t physics_highlight_active(CCommand const&)
 t physics_report_active(CCommand const&)
 t physics_select(CCommand const&)
 t qsort_ascending_uint16(void const*, void const*)
 t report_entities(CCommand const&)
 t report_simthinklist(CCommand const&)
 t report_soundpatch(CCommand const&)
 t report_touchlinks(CCommand const&)
 t rr_reloadresponsesystems(CCommand const&)
 t say(CCommand const&)
 t say_team(CCommand const&)
 t scene_flush(CCommand const&)
 t server_game_time(CCommand const&)
 t setang_exact(CCommand const&)
 t setpos(CCommand const&)
 t setpos_exact(CCommand const&)
 t simple_bot_add(CCommand const&)
 t soundscape_flush(CCommand const&)
 t splitX(CNavArea*)
 t splitY(CNavArea*)
 t surfaceprop(CCommand const&)
 t sv_benchmark_force_start(CCommand const&)
 t sv_findsoundname(CCommand const&)
 t sv_querycache_stats(CCommand const&)
 t sv_soundemitter_filecheck(CCommand const&)
 t sv_soundemitter_flush(CCommand const&)
 t sv_soundscape_printdebuginfo(CCommand const&)
 t testStitchConnection(CNavArea*, CNavArea*, Vector const&, Vector const&)
 t tf_bot_add(CCommand const&)
 t tf_bot_debug_stuck_log(CCommand const&)
 t tf_bot_debug_stuck_log_clear(CCommand const&)
 t tf_bot_kick(CCommand const&)
 t tf_bot_kill(CCommand const&)
 t tf_bot_mvm_show_engineer_hint_region(CCommand const&)
 t tf_dumpplayerstats(CCommand const&)
 t tf_halloween_force_boss_spawn(CCommand const&)
 t tf_mvm_checkpoint(CCommand const&)
 t tf_mvm_checkpoint_clear(CCommand const&)
 t tf_mvm_debugstats(CCommand const&)
 t tf_mvm_force_victory(CCommand const&)
 t tf_mvm_jump_to_wave(CCommand const&)
 t tf_mvm_nextmission(CCommand const&)
 t tf_mvm_popfile(CCommand const&)
 t tf_quests_spew_trackers(CCommand const&)
 t tf_server_lobby_debug(CCommand const&)
 t tf_workshop_map_status(CCommand const&)
 t tf_workshop_map_sync(CCommand const&)
 t tf_workshop_refresh(CCommand const&)
 t training_continue(CCommand const&)
 t vehicle_flushscript(CCommand const&)
 t void QueueReliableMessage<CMsgGameServerKickingLobby, CMsgGameServerKickingLobbyResponse, (ETFGCMsg)6521>(char const*, GCSDK::CProtoBufMsg<CMsgGameServerKickingLobby>*, void (*)(GCSDK::CProtoBufMsg<CMsgGameServerKickingLobbyResponse>&))
 tan
 time
 timezone$UNIX2003
 typeinfo for CThread
 typeinfo for float
 typeinfo for int
 typeinfo for std::bad_alloc
 typeinfo for std::exception
 typeinfo for unsigned int
 typeinfo for unsigned long long
 vsnprintf
 vswprintf
 vtable for __cxxabiv1::__class_type_info
 vtable for __cxxabiv1::__enum_type_info
 vtable for __cxxabiv1::__pointer_type_info
 vtable for __cxxabiv1::__si_class_type_info
 vtable for __cxxabiv1::__vmi_class_type_info
 vtable for std::bad_alloc
 vtune
 wcslen
 wcsncpy
 wcstol
 wcstoll
