<^_[]
>^_[]
|^_[]
 ^_[]
    `
     
                 
-----------------
,^_[]
"		@#	
{}()'
{}()':
@^_[]
@(^_]
@@@@ 
@@@@@@ 
$^_[]
\^_[]
`   0 @
   0`
  0``
  0  
@@` 0
0^_[]
0@@@ 
   00
    0 0
@@ @00@ 
  00  @0@
000  
`0000
0 0@0 0@0@
000@00 0 0`
000`p
0 0 1
0 0 -1
0 -0.707107 -0.707107
0 -0.707107 0.707107
0 0.707107 -0.707107
0 0.707107 0.707107
0 0 %8.4g 0
`00`p
  00p@@`
0 -1 0
0 1 0
0 1 1 1  # color of points
 0.3  0.3 0.0001     0 0 1 1
 0.3 -0.3 0.0001     0 0 1 1
-0.3 -0.3 0.0001     0 0 1 1
-0.3  0.3 0.0001     0 0 1 1 } transform { 
-0.707107 0 -0.707107
-0.707107 0 0.707107
0.707107 0 -0.707107
0.707107 0 0.707107
-0.707107 -0.707107 0
-0.707107 0.707107 0
0.707107 -0.707107 0
0.707107 0.707107 0
 0 %8.4g 0 0
 *0 cnt*
_0fffff.
 0 # infinity not used
0p@@`
  0pp
  0pp  
0pp `
1 }}}
-1 0 0
1 0 0
{%16.8f, %16.8f, %16.8f}
18 32 48
# 1 color for all
 (%.1fx)
# 1 point per line
 %2.2g
%2.2g 
(%.2f, %.2f, %.2f)
(%.2f, %.2f, %.2f), 
3 0 11 9
3 0 1 2 %8.4g %8.4g %8.4g
3 0 1 2 %8.4g %8.4g %8.4g 1.0
3 0 6 11
3 0 7 6	
3 0 9 7	
3 11 12 9
3 1 13 6
3 1 14 13
3 14 8 17
3 15 13 14
3 16 12 15
3 1 6 8	
3 17 10 16
3 1 8 14
3 2 11 13
3 2 12 11
3 2 13 15
3 2 15 12
3 3 10 9
3 3 12 16
3 3 16 10
>333@
333333
3 3 9 12
3 4 10 17
3 4 17 8
3 4 7 10
3 4 8 7
3 5 14 17
3 5 15 14
3 5 16 15
3 5 17 16
3 6 13 11
3 7 8 6
3 9 10 7
3 %double %double %double %8.4g %8.4g %8.4g 1 # float%double float%double
3 %double %double %double %8.4g %8.4g %8.4g 1 #r%double float%double float%double
4fffff.
4OFF %double %double 1
 %5.2g
%6.16g 
%6.16g %6.16g
%6.2e 
 %6.2g
 %6.2g max. abs. coordinate in the (transformed) input ('Qbd:__int128')
 %6.2g max. cosine for post-merge angle
 %6.2g max. cosine for pre-merge angle
 %6.2g max. distance for coplanar facets ('Un')
 %6.2g max. distance for merging two simplicial facets
 %6.2g max. distance for near-inside points
 %6.2g max. facet width for recomputing centrum and area
 %6.2g max. roundoff error for angle computations
 %6.2g max. roundoff error for arithmetic operations
 %6.2g max. roundoff error for distance computation ('En')
 %6.2g min. denominator for divisions
 %6.2g min. distance for outside points ('Wn')
 %6.2g min. distance for visible facets ('__int128 volatile')
 %6.2g radius of post-merge centrum
 %6.2g radius of pre-merge centrum
%6.3g 
 %6.4g
%7.2g
%7.2g     average copy size
%7.3g
%7d bytes of long memory allocated (except for input)
%7d bytes of long memory in use (in %double pieces)
%7d bytes of short memory in freelists
%7d bytes of short memory in use
%7d bytes per memory buffer (initially %double bytes)
%7d calls to qh_setlarger
%7d long allocations
%7d long frees
7 %double %double %double %double %double %double %double
%7d quick allocations
%7d short allocations
%7d short frees
8^_[]
 %8.4g
%8.4g 
%8.4g 0 0 0 # void%double
%8.4g %8.4g %8.4g
%8.4g %8.4g %8.4g # 
%8.4g %8.4g %8.4g 0
%8.4g %8.4g %8.4g 1
%8.4g %8.4g %8.4g 1.0
%8.4g %8.4g %8.4g 1.0 }
%8.4g %8.4g %8.4g %8.4g # 
8ffff.
9BDuO
9D>$u
9FDte
9FDu2
9ffff.
9H|u,
9p,u	9
9VPHYu*
9V,uk;u
A coplanar point may lead to signed char wide facet.  Options 'Qs' (search for best
_acos
addgravity
addGravity
additionalIterations
  additional non-convex ridges
  - add one or more points to make the input full dimensional.
AddPointToBounds(Vector const&, Vector&, Vector&)
A ff.
A flipped facet occurs when its distance to the interior point is
  After %double retries, input joggled by: %2.2g
A,=IVPSt'=SPVIt 1
aligned_tmp_t
allowPhysicsMovement
allowPhysicsRotation
     - all ridges:
 and at-infinity
 and distance: 
angDragCoefficient
AngleMatrix(QAngle const&, Vector const&, matrix3x4_t&)
Angle-postmerge
Angle-postmerge-with-random
Angle-premerge-
Angle-premerge-with-random
angles
angles computed for ridge convexity
AngleVectors(QAngle const&, Vector*, Vector*, Vector*)
Angular Drag: %.2f, %.2f, %.2f (factor %.2f)
angularVelocity
angVelocity
Ang Velocity: %.2f, %.2f, %.2f 
{appearance {+edge -evert linewidth 2} LIST # %short | %short
{appearance {+edge -face} OFF %double %double 1 # Voronoi centers and cells
{appearance {-edge -normal normscale 0} {
{appearance {linewidth 3} LIST # %short | %short
{appearance {-normal -edge normscale 0} 
/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.9.sdk/usr/include/char++/.2.1/bits/stl_algobase.h
/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.9.sdk/usr/include/ctype.h
Approximate
A Qhull error has occurred.  Qhull should have corrected the above
    - area: %2.2g
are first selected from points that maximize signed char coordinate.
_asin
Asleep
asleepSinceCreation
At %02d:%02d:%02d & %2.5g CPU secs, qhull has created %double facets and merged %d.
_atan
_atan2
_atan2f
At %double:%double:%double & %2.5g CPU secs, qhull has merged %double facets.  The hull
at error exit
At error exit:
_atof
     at offset: 
_atoi
At signed char premature exit due to 'TVn', 'TCn', or precision error.
Attached core twice!!!
attachedRefXform
attached to %double controllers
audioHardMinVelocity
audioHardnessFactor
audioReflectivity
audioRoughnessFactor
autobrakeSpeedFactor
autobrakeSpeedGain
AutoTransmission
available for 4-double output (ignored).  Could use 'decltype(nullptr)imaginary ' instead.
  ave. additional non-convex ridges per iteration
  ave. angle to ridge
  ave. distance of midpoint to ridge
ave. distance of signed char new vertex to signed char facet (not 0s)
  ave. distance tests per check
  ave. distance to ridge
  ave. facets deleted per iteration
  ave. facets per cycle
ave. horizon facets per iteration
ave. initial non-convex ridges per iteration
ave. new or merged facets per iteration
   ave. number found per vertex
  ave. number of ridges per tested vertex
average angle (cosine) for all ridges
  average merge distance
average merges per facet (at most 511)
average new facet balance
average number of neighbors per facet
average number of neighbors per vertex
average number of ridges per facet
average number of tests per subridge
average number of tests to match signed char ridge
average number of vertices per facet
   average of 1000 random integers (%.2g) is much different than expected (%.2g).
average partition balance
  ave. vertices deleted per iteration
ave. visible facets per iteration
  ave. visible facets without an horizon neighbor
ave. visible vertices per iteration
Awake
aXE/[
axes[0]
axes[1]
axes[2]
axisMap
axisMapSize
axleCount
axleratio
axleRatio
axles
ball_socket
B,;B(
Because of the high dimension, the min long long-coordinate and max-coordinate
begin
best merges used centrum instead of vertices
           between float%double and float%double
bodyMassScale
boost
boostDelay
boostDuration
boostForce
boostMaxSpeed
boostSteeringRateFactor
boostSteeringRestRateFactor
boostTimeLeft
Both Anchors of signed char Torque_Actuator must be attached to just one object.
 bottom
bounded ridges
bounded ridges with near-zero normal
bounded ridges with ok normal
brakefactor
brakeFactor
brakematerial
brakeMaterialIndex
brakeSteeringRateFactor
break
BreakableConstraintHelper::BreakableConstraintHelper(hk_Rigid_Body*, float)
__bss
BuildGammaTable(float, float, float, int)
build hull statistics
BuildVertMap(vertmap_t&, Vector const*, int, IVP_Compact_Ledge const*)
bulletimpact
by at least %double, or signed char random real %__float128 >= 1.0
C;^0|
.C0tT
C333333
CAirboatFrictionData
CAirboatFrictionData::GetContactPoint(Vector&)
CAirboatFrictionData::GetContactSpeed(Vector&)
CAirboatFrictionData::GetSurfaceNormal(Vector&)
calc_line_representation: no orig_surface specified!
CAlignedNewDelete<16, aligned_tmp_t>
callbacks
Cannot convert
CBaseAppSystem<IPhysics>
CBuoyancyAttacher
CBuoyancyAttacher::~CBuoyancyAttacher()
CBuoyancyAttacher::get_parameters_per_core(IVP_Core*)
CByteswap::SwapFieldsToTargetEndian(void*, void*, datamap_t*)
CByteswap::SwapFieldToTargetEndian(void*, void*, typedescription_t*)
CCleanupUtlSymbolTable::~CCleanupUtlSymbolTable()
CCollisionQuery
CCollisionQuery::~CCollisionQuery()
CCollisionQuery::ConvexCount()
CCollisionQuery::GetGameData(int)
CCollisionQuery::GetTriangleMaterialIndex(int, int)
CCollisionQuery::GetTriangleVerts(int, int, Vector*)
CCollisionQuery::SetTriangleMaterialIndex(int, int, int)
CCollisionQuery::SetTriangleVerts(int, int, Vector const*)
CCollisionQuery::TriangleCount(int)
CCollisionSolver
CCollisionSolver::~CCollisionSolver()
CCollisionSolver::check_objects_for_collision_detection(IVP_Real_Object*, IVP_Real_Object*)
CCollisionSolver::CheckObjPair(IVP_Real_Object*, IVP_Real_Object*)
CCollisionSolver::environment_will_be_deleted(IVP_Environment*)
CCollisionSolver::inter_penetration(IVP_Mindist*, IVP_Real_Object*, IVP_Real_Object*, double)
CCollisionSolver::max_collision_checks_exceeded(int)
CCollisionSolver::max_collisions_exceeded_check_freezing(IVP_Anomaly_Limits*, IVP_Core*)
CCollisionSolver::max_contacts_exceeded_check_freezing(IVP_Core**, int)
CCollisionSolver::max_velocity_exceeded(IVP_Anomaly_Limits*, IVP_Core*, IVP_U_Float_Point*)
CDatadescGeneratedNameHolder::~CDatadescGeneratedNameHolder()
CDataManagerBase
CDataManagerBase::BreakLock(memhandle_t__*)
CDataManagerBase::~CDataManagerBase()
CDataManagerBase::CDataManagerBase(unsigned int)
CDataManagerBase::CreateHandle(bool)
CDataManagerBase::DestroyResource(memhandle_t__*)
CDataManagerBase::EnsureCapacity(unsigned int)
CDataManagerBase::FlushAll()
CDataManagerBase::GetForFreeByIndex(unsigned short)
CDataManagerBase::GetForFreeByIndex(unsigned short)::__executeCount
CDataManagerBase::Lock()
CDataManagerBase::LockResource(memhandle_t__*)
CDataManagerBase::StoreResourceInHandle(unsigned short, void*, unsigned int)
CDataManagerBase::TryLock()
CDataManagerBase::Unlock()
CDataManagerBase::UnlockResource(memhandle_t__*)
CDataManager<CMeshInstance, virtualmeshlist_t, CMeshInstance*, CThreadFastMutex>
CDataManager<CMeshInstance, virtualmeshlist_t, CMeshInstance*, CThreadFastMutex>::~CDataManager()
CDataManager<CMeshInstance, virtualmeshlist_t, CMeshInstance*, CThreadFastMutex>::CreateResource(virtualmeshlist_t const&, bool)
CDataManager<CMeshInstance, virtualmeshlist_t, CMeshInstance*, CThreadFastMutex>::DestroyResourceStorage(void*)
CDataManager<CMeshInstance, virtualmeshlist_t, CMeshInstance*, CThreadFastMutex>::GetRealSize(void*)
CDataManager<CMeshInstance, virtualmeshlist_t, CMeshInstance*, CThreadFastMutex>::Lock()
CDataManager<CMeshInstance, virtualmeshlist_t, CMeshInstance*, CThreadFastMutex>::TryLock()
CDataManager<CMeshInstance, virtualmeshlist_t, CMeshInstance*, CThreadFastMutex>::Unlock()
CDefaultAccessor
CDefaultAccessor::RegisterConCommandBase(ConCommandBase*)
CDefConvexInfo
CDefConvexInfo::GetContents(int)
CDefOps<void*>::LessFunc(void* const&, void* const&)
CDefSaveRestoreOps
CDefSaveRestoreOps::IsEmpty(SaveRestoreFieldInfo_t const&)
CDefSaveRestoreOps::MakeEmpty(SaveRestoreFieldInfo_t const&)
CDefSaveRestoreOps::Parse(SaveRestoreFieldInfo_t const&, char const*)
CDeleteProxy<IPhysicsConstraint>
CDeleteProxy<IPhysicsConstraint>::~CDeleteProxy()
CDeleteProxy<IPhysicsConstraint>::Delete()
CDragController
CDragController::~CDragController()
CDragController::do_simulation_controller(IVP_Event_Sim*, IVP_U_Vector<IVP_Core>*)
CDragController::get_controller_name()
CDragController::get_controller_priority()
_ceil
CEmptyCollisionListener
CEmptyCollisionListener::EndTouch(IPhysicsObject*, IPhysicsObject*, IPhysicsCollisionData*)
CEmptyCollisionListener::FluidEndTouch(IPhysicsObject*, IPhysicsFluidController*)
CEmptyCollisionListener::FluidStartTouch(IPhysicsObject*, IPhysicsFluidController*)
CEmptyCollisionListener::Friction(IPhysicsObject*, float, int, int, IPhysicsCollisionData*)
CEmptyCollisionListener::ObjectEnterTrigger(IPhysicsObject*, IPhysicsObject*)
CEmptyCollisionListener::ObjectLeaveTrigger(IPhysicsObject*, IPhysicsObject*)
CEmptyCollisionListener::PostCollision(vcollisionevent_t*)
CEmptyCollisionListener::PostSimulationFrame()
CEmptyCollisionListener::PreCollision(vcollisionevent_t*)
CEmptyCollisionListener::StartTouch(IPhysicsObject*, IPhysicsObject*, IPhysicsCollisionData*)
CEmptyConVar
CEmptyConVar::~CEmptyConVar()
CEmptyConVar::GetName() const
CEmptyConVar::IsFlagSet(int) const
CEmptyConVar::SetValue(char const*)
CEmptyConVar::SetValue(float)
CEmptyConVar::SetValue(int)
    - center: 
center:
center point
Centrum-postmerge
Centrum-postmerge-with-random
Centrum-premerge-
Centrum-premerge-with-random
centrums frozen due to extra vertices
centrums frozen due to signed char wide merge
C$ff.
?CFmtStrN<256, false>
CFmtStrN<256, false>::InitQuietTruncation()
CFmtStrN<256, false>::sprintf(char const*, ...)
CFmtStrN<256, false>::sprintf(char const*, ...)::scAsserted
CFrictionSnapshot
CFrictionSnapshot::~CFrictionSnapshot()
CFrictionSnapshot::ClearFrictionForce()
CFrictionSnapshot::DeleteAllMarkedContacts(bool)
CFrictionSnapshot::GetContactPoint(Vector&)
CFrictionSnapshot::GetEnergyAbsorbed()
CFrictionSnapshot::GetFrictionCoefficient()
CFrictionSnapshot::GetMaterial(int)
CFrictionSnapshot::GetNormalForce()
CFrictionSnapshot::GetObject(int)
CFrictionSnapshot::GetSurfaceNormal(Vector&)
CFrictionSnapshot::IsValid()
CFrictionSnapshot::MarkContactForDelete()
CFrictionSnapshot::NextFrictionData()
CFrictionSnapshot::RecomputeFriction()
C$;GDu<
C$;G(u:
Changed collision rules for %short vs. %short without calling recheck!
CharacterSetBuild(characterset_t*, char const*)
CHfff.
child
CIVPMaterialManager
CIVPMaterialManager::~CIVPMaterialManager()
CIVPMaterialManager::get_elasticity(IVP_Contact_Situation*)
CIVPMaterialManager::get_friction_factor(IVP_Contact_Situation*)
CIVPMaterialManager::get_material_by_index(IVP_Real_Object*, IVP_U_Point const*, int)
___clang_call_terminate
ClearBounds(Vector&, Vector&)
clearly convex
climbable
CLiquidSurfaceDescriptor
CLiquidSurfaceDescriptor::calc_liquid_surface(IVP_Environment*, IVP_Core*, IVP_U_Float_Hesse*, IVP_U_Float_Point*)
CLiquidSurfaceDescriptor::~CLiquidSurfaceDescriptor()
CMaterialIndexOps
CMaterialIndexOps::IsEmpty(SaveRestoreFieldInfo_t const&)
CMaterialIndexOps::MakeEmpty(SaveRestoreFieldInfo_t const&)
CMaterialIndexOps::Restore(SaveRestoreFieldInfo_t const&, IRestore*)
CMaterialIndexOps::Save(SaveRestoreFieldInfo_t const&, ISave*)
CMeshInstance::Init(virtualmeshlist_t const&)
CM uq
CNormalList::ClampVector(Vector const&, float)
CObjectPairHash
CObjectPairHash::AddObjectPair(void*, void*)
CObjectPairHash::AddToObjectList(void*, void*)
CObjectPairHash::~CObjectPairHash()
CObjectPairHash::CObjectPairHash()
CObjectPairHash::DestroyListForObject(void*, unsigned short)
CObjectPairHash::GetPairCountForObject(void*)
CObjectPairHash::GetPairListForObject(void*, int, void**)
CObjectPairHash::IsObjectInHash(void*)
CObjectPairHash::IsObjectPairInHash(void*, void*)
CObjectPairHash::RemoveAllPairsForObject(void*)
CObjectPairHash::RemoveFromObjectList(void*, void*)
CObjectPairHash::RemoveObjectPair(void*, void*)
collideType
collisionEnabled
CollisionModel: Compact Surface: %double convex pieces %short outer hull
__common
compactsurfaceheader_t
compactsurfaceheader_t_DataDescInit::g_DataMapHolder
compactsurfaceheader_t::m_DataMap
computation has overflowed.
ComputeController(IVP_U_Float_Point&, IVP_U_Float_Point const&, float, float, float, float, IVP_U_Float_Point*)
ComputeController(IVP_U_Float_Point&, IVP_U_Float_Point const&, IVP_U_Float_Point const&, float, float, IVP_U_Float_Point*)
ComputeShadowControllerHL(CPhysicsObject*, hlshadowcontrol_params_t const&, float, float)
ComputeShadowControllerIVP(IVP_Real_Object*, shadowcontrol_params_t&, float, float)
computing area of each facet and volume of the convex hull
computing distances is %2.2g.  The center point, facets and distances
ConcatTransforms(matrix3x4_t const&, matrix3x4_t const&, matrix3x4_t&)
concave half ridges in output
concave ridge
concave ridge, flipped facet, or duplicate facet occurs.
concave ridges in getmergeset
ConCommandBase
ConCommandBase::CreateBase(char const*, char const*, int)
ConCommandBase::GetDLLIdentifier() const
ConCommandBase::s_pAccessor
ConCommandBase::s_pConCommandBases
ConnectTier1Libraries(void* (**)(char const*, int*), int)
__const
constant
constraint
	Constraint %double) %short
constraintPosition
constraintToAttached
constraintToReference
constraintType
  contains %double facets and %double vertices.
contents
contentsMask
ControlPhysicsPlayerControllerAttachment_Silent(IPhysicsPlayerController*, IVP_Real_Object*, bool)
ControlPhysicsShadowControllerAttachment_Silent(IPhysicsShadowController*, IVP_Real_Object*, bool)
ConVar
ConVar::AddFlags(int)
ConVar::ChangeStringValue(char const*, float)
ConVar::ClampValue(float&)
ConVar::~ConVar()
ConVar::Create(char const*, char const*, int, char const*, bool, float, bool, float, bool, float, bool, float, void (*)(IConVar*, char const*, float))
ConVar::GetHelpText() const
ConVar::GetName() const
ConVar::Init()
ConVar::InternalSetFloatValue(float, bool)
ConVar::InternalSetIntValue(int)
ConVar::InternalSetValue(char const*)
ConVar::IsCommand() const
ConVar::IsFlagSet(int) const
ConVar::IsRegistered() const
ConVar_Register(int, IConCommandBaseAccessor*)
ConVar::SetValue(char const*)
ConVar::SetValue(float)
ConVar::SetValue(int)
ConVar_Unregister()
ConvertCoordinateAxisToIVP(int)
ConvertMatrixToHL(IVP_U_Matrix const&, matrix3x4_t&)
ConvertMatrixToIVP(matrix3x4_t const&, IVP_U_Matrix&)
ConvertRotationToHL(IVP_U_Matrix3 const&, QAngle&)
ConvertRotationToHL(IVP_U_Quat const&, QAngle&)
ConvertRotationToIVP(QAngle const&, IVP_U_Matrix3&)
ConvertRotationToIVP(QAngle const&, IVP_U_Quat&)
Convex hull of %double points in %double-double:
coplanar
 coplanar
coplanar and interior
coplanar angles in getmergeset
coplanar centrums in getmergeset
coplanar/concave merges due to avoiding old merge
coplanar half ridges in output
coplanar horizon
coplanar horizon facets for new vertices
coplanar or concave ridge
coplanar points during partitioning
coplanar ridge
coplanar ridges, concave ridges, and flipped facets.  In 4-double and higher,
    - coplanar set:
    - coplanar set:  %double points.
coplanarset for float
    - coplanar set (furthest p%double):
    correct topology.
_cosf
CO`u+
Couldn'unsigned short find signed char matching point to baseline!
countertorquefactor
counterTorqueFactor
CPhysCollide
CPhysCollideCompactSurface
CPhysCollideCompactSurface::ComputeHullInfo_r(CPhysCollideCompactSurface::hullinfo_t*, IVP_Compact_Ledgetree_Node const*) const
CPhysCollideCompactSurface::ComputeOrthographicAreas(float)
CPhysCollideCompactSurface::~CPhysCollideCompactSurface()
CPhysCollideCompactSurface::CreateSurfaceManager(short&) const
CPhysCollideCompactSurface::GetAllLedges(IVP_U_BigVector<IVP_Compact_Ledge>&) const
CPhysCollideCompactSurface::GetCollideMap() const
CPhysCollideCompactSurface::GetCompactSurface() const
CPhysCollideCompactSurface::GetMassCenter() const
CPhysCollideCompactSurface::GetOrthographicAreas() const
CPhysCollideCompactSurface::GetSerializationSize() const
CPhysCollideCompactSurface::GetVCollideIndex() const
CPhysCollideCompactSurface::InitCollideMap()
CPhysCollideCompactSurface::OutputDebugInfo() const
CPhysCollideCompactSurface::SerializeToBuffer(char*, bool) const
CPhysCollideCompactSurface::SetMassCenter(Vector const&)
CPhysCollideCompactSurface::SetOrthographicAreas(Vector const&)
CPhysCollide::ComputeOrthographicAreas(float)
CPhysCollide::GetCollideMap() const
CPhysCollide::GetCompactSurface() const
CPhysCollide::GetSphereRadius() const
CPhysCollide::SetOrthographicAreas(Vector const&)
CPhysCollide::UnserializeFromBuffer(char const*, unsigned int, int, bool)
CPhysCollideVirtualMesh
CPhysCollideVirtualMesh::AddRef()
CPhysCollideVirtualMesh::~CPhysCollideVirtualMesh()
CPhysCollideVirtualMesh::CreateBoundingSurfaceFromRange(virtualmeshlist_t const&, int, int)
CPhysCollideVirtualMesh::CreateMeshBoundingHull(virtualmeshlist_t const&)
CPhysCollideVirtualMesh::CreateSurfaceManager(short&) const
CPhysCollideVirtualMesh::FrameRelease()
CPhysCollideVirtualMesh::GetAllLedges(IVP_U_BigVector<IVP_Compact_Ledge>&) const
CPhysCollideVirtualMesh::GetAllLedgesWithinRadius(IVP_U_Point const*, double, IVP_U_BigVector<IVP_Compact_Ledge>*, IVP_Compact_Ledge const*)
CPhysCollideVirtualMesh::GetMassCenter() const
CPhysCollideVirtualMesh::GetOrthographicAreas() const
CPhysCollideVirtualMesh::GetSerializationSize() const
CPhysCollideVirtualMesh::GetSphereRadius() const
CPhysCollideVirtualMesh::GetVCollideIndex() const
CPhysCollideVirtualMesh::OutputDebugInfo() const
CPhysCollideVirtualMesh::SerializeToBuffer(char*, bool) const
CPhysCollideVirtualMesh::SetMassCenter(Vector const&)
?CPhysics_Airboat
CPhysics_Airboat::activate_booster(float, float, float)
CPhysics_Airboat::change_body_downforce(float)
CPhysics_Airboat::change_fast_turn_factor(float)
CPhysics_Airboat::change_max_body_force(IVP_POS_WHEEL, float)
CPhysics_Airboat::change_spring_constant(IVP_POS_WHEEL, float)
CPhysics_Airboat::change_spring_dampening_compression(IVP_POS_WHEEL, float)
CPhysics_Airboat::change_spring_dampening(IVP_POS_WHEEL, float)
CPhysics_Airboat::change_spring_length(IVP_POS_WHEEL, float)
CPhysics_Airboat::change_spring_pre_tension(IVP_POS_WHEEL, float)
CPhysics_Airboat::change_stabilizer_constant(IVP_POS_AXIS, float)
CPhysics_Airboat::change_wheel_torque(IVP_POS_WHEEL, float)
CPhysics_Airboat::core_is_going_to_be_deleted_event(IVP_Core*)
CPhysics_Airboat::~CPhysics_Airboat()
CPhysics_Airboat::CPhysics_Airboat(IVP_Environment*, IVP_Template_Car_System const*, IPhysicsGameTrace*)
CPhysics_Airboat::do_raycasts_gameside(int, IVP_Ray_Solver_Template*, IVP_Raycast_Airboat_Impact*)
CPhysics_Airboat::do_simulation_controller(IVP_Event_Sim*, IVP_U_Vector<IVP_Core>*)
CPhysics_Airboat::do_simulation_controller projected_axis_direction_ws.normize failed
CPhysics_Airboat::DoSimulationDrag(IVP_Raycast_Airboat_Impact*, IVP_Event_Sim*)
CPhysics_Airboat::DoSimulationKeepUprightPitch(IVP_Raycast_Airboat_Impact*, IVP_Event_Sim*)
CPhysics_Airboat::DoSimulationKeepUprightRoll(IVP_Raycast_Airboat_Impact*, IVP_Event_Sim*)
CPhysics_Airboat::DoSimulationPontoonsGround(IVP_Raycast_Airboat_Wheel*, IVP_Raycast_Airboat_Impact*, IVP_Event_Sim*)
CPhysics_Airboat::DoSimulationPontoons(IVP_Raycast_Airboat_Impact*, IVP_Event_Sim*)
CPhysics_Airboat::DoSimulationSteering(IVP_Event_Sim*)
CPhysics_Airboat::DoSimulationTurbine(IVP_Event_Sim*)
CPhysics_Airboat::do_steering(float, bool)
CPhysics_Airboat::do_steering_wheel(IVP_POS_WHEEL, float)
CPhysics_Airboat::fix_wheel(IVP_POS_WHEEL, IVP_BOOL)
CPhysics_Airboat::get_associated_controlled_cores()
CPhysics_Airboat::get_body_speed(IVP_COORDINATE_INDEX)
CPhysics_Airboat::get_booster_delay()
CPhysics_Airboat::get_booster_time_to_go()
CPhysics_Airboat::GetCarSystemDebugData(IVP_CarSystemDebugData_t&)
CPhysics_Airboat::get_controller_name()
CPhysics_Airboat::get_controller_priority()
CPhysics_Airboat::get_orig_axles_distance()
CPhysics_Airboat::get_orig_front_wheel_distance()
CPhysics_Airboat::get_skid_info(IVP_Wheel_Skid_Info*)
CPhysics_Airboat::get_wheel_angular_velocity(IVP_POS_WHEEL)
CPhysics_Airboat::GetWheel(int)
CPhysics_Airboat::get_wheel_torque(IVP_POS_WHEEL)
CPhysics_Airboat::InitRaycastCarEnvironment(IVP_Environment*, IVP_Template_Car_System const*)
CPhysics_Airboat::InitRaycastCarWheels(IVP_Template_Car_System const*)
CPhysics_Airboat::IsBoosting()
CPhysics_Airboat::PostRaycasts(IVP_Ray_Solver_Template*, IVP_U_Matrix const*, IVP_Raycast_Airboat_Impact*)
CPhysics_Airboat::pre_raycasts_gameside(int, IVP_Ray_Solver_Template*, Ray_t*, IVP_Raycast_Airboat_Impact*)
CPhysics_Airboat::set_booster_acceleration(float)
CPhysics_Airboat::SetCarSystemDebugData(IVP_CarSystemDebugData_t const&)
CPhysics_Airboat::set_powerslide(float, float)
CPhysics_Airboat::SetWheelFriction(int, float)
CPhysics_Airboat::update_body_countertorque()
CPhysics_Airboat::update_booster(float)
CPhysics_Airboat::update_throttle(float)
CPhysics_Airboat::update_wheel_positions()
CPhysics_Car_System_Raycast_Wheels
CPhysics_Car_System_Raycast_Wheels::~CPhysics_Car_System_Raycast_Wheels()
CPhysics_Car_System_Raycast_Wheels::CPhysics_Car_System_Raycast_Wheels(IVP_Environment*, IVP_Template_Car_System const*)
CPhysics_Car_System_Raycast_Wheels::do_raycasts(IVP_Event_Sim*, int, IVP_Ray_Solver_Template*, IVP_Ray_Hit*, float*)
CPhysics_Car_System_Raycast_Wheels::get_controller_name()
CPhysics_Car_System_Raycast_Wheels::GetWheel(int)
CPhysics_Car_System_Raycast_Wheels::update_wheel_positions()
CPhysicsCollision
CPhysicsCollision::AddBBoxCache(CPhysCollideCompactSurface*, Vector const&, Vector const&)
CPhysicsCollision::BBoxToCollide(Vector const&, Vector const&)
CPhysicsCollision::BBoxToConvex(Vector const&, Vector const&)
CPhysicsCollision::CollideGetAABB(Vector*, Vector*, CPhysCollide const*, Vector const&, QAngle const&)
CPhysicsCollision::CollideGetExtent(CPhysCollide const*, Vector const&, QAngle const&, Vector const&)
CPhysicsCollision::CollideGetMassCenter(CPhysCollide*, Vector*)
CPhysicsCollision::CollideGetOrthographicAreas(CPhysCollide const*)
CPhysicsCollision::CollideIndex(CPhysCollide const*)
CPhysicsCollision::CollideSetMassCenter(CPhysCollide*, Vector const&)
CPhysicsCollision::CollideSetOrthographicAreas(CPhysCollide*, Vector const&)
CPhysicsCollision::CollideSize(CPhysCollide*)
CPhysicsCollision::CollideSurfaceArea(CPhysCollide*)
CPhysicsCollision::CollideVolume(CPhysCollide*)
CPhysicsCollision::CollideWrite(char*, CPhysCollide*, bool)
CPhysicsCollision::ConvertConvexToCollide(CPhysConvex**, int)
CPhysicsCollision::ConvertConvexToCollideParams(CPhysConvex**, int, convertconvexparams_t const&)
CPhysicsCollision::ConvertPolysoupToCollide(CPhysPolysoup*, bool)
CPhysicsCollision::ConvexesFromConvexPolygon(Vector const&, Vector const*, int, CPhysConvex**)
CPhysicsCollision::ConvexFree(CPhysConvex*)
CPhysicsCollision::ConvexFromConvexPolyhedron(CPolyhedron const&)
CPhysicsCollision::ConvexFromPlanes(float*, int, float)
CPhysicsCollision::ConvexFromVertsFast(Vector**, int)
CPhysicsCollision::ConvexFromVerts(Vector**, int)
CPhysicsCollision::ConvexSurfaceArea(CPhysConvex*)
CPhysicsCollision::ConvexVolume(CPhysConvex*)
CPhysicsCollision::~CPhysicsCollision()
CPhysicsCollision::CreateDebugMesh(CPhysCollide const*, Vector**)
CPhysicsCollision::CreateQueryModel(CPhysCollide*)
CPhysicsCollision::CreateVirtualMesh(virtualmeshparams_t const&)
CPhysicsCollisionData
CPhysicsCollisionData::GetContactPoint(Vector&)
CPhysicsCollisionData::GetContactSpeed(Vector&)
CPhysicsCollisionData::GetSurfaceNormal(Vector&)
CPhysicsCollision::DestroyCollide(CPhysCollide*)
CPhysicsCollision::DestroyDebugMesh(int, Vector*)
CPhysicsCollision::DestroyQueryModel(ICollisionQuery*)
CPhysicsCollision::FastBboxCollide(CPhysCollideCompactSurface const*, Vector const&, Vector const&)
CPhysicsCollision::GetBBoxCacheSize(int*, int*)
CPhysicsCollision::GetConvexesUsedInCollideable(CPhysCollide const*, CPhysConvex**, int)
CPhysicsCollision::InitBBoxCache()
CPhysicsCollision::IsBoxIntersectingCone(Vector const&, Vector const&, truncatedcone_t const&)
CPhysicsCollision::OutputDebugInfo(CPhysCollide const*)
CPhysicsCollision::PolyhedronFromConvex(CPhysConvex*, bool)
CPhysicsCollision::PolysoupAddTriangle(CPhysPolysoup*, Vector const&, Vector const&, Vector const&, int)
CPhysicsCollision::PolysoupCreate()
CPhysicsCollision::PolysoupDestroy(CPhysPolysoup*)
CPhysicsCollision::ReadStat(int)
CPhysicsCollision::RebuildConvexFromPlanes(CPhysConvex*, float)
CPhysicsCollisionSet
CPhysicsCollision::SetConvexGameData(CPhysConvex*, unsigned int)
CPhysicsCollisionSet::DisableCollisions(int, int)
CPhysicsCollisionSet::EnableCollisions(int, int)
CPhysicsCollisionSet::ShouldCollide(int, int)
CPhysicsCollision::SupportsVirtualMesh()
CPhysicsCollision::ThreadContextCreate()
CPhysicsCollision::ThreadContextDestroy(IPhysicsCollision*)
CPhysicsCollision::TraceBox(Ray_t const&, CPhysCollide const*, Vector const&, QAngle const&, CGameTrace*)
CPhysicsCollision::TraceBox(Ray_t const&, unsigned int, IConvexInfo*, CPhysCollide const*, Vector const&, QAngle const&, CGameTrace*)
CPhysicsCollision::TraceBox(Vector const&, Vector const&, Vector const&, Vector const&, CPhysCollide const*, Vector const&, QAngle const&, CGameTrace*)
CPhysicsCollision::TraceCollide(Vector const&, Vector const&, CPhysCollide const*, QAngle const&, CPhysCollide const*, Vector const&, QAngle const&, CGameTrace*)
CPhysicsCollision::UnserializeCollide(char*, int, int)
CPhysicsCollision::VCollideLoad(vcollide_t*, int, char const*, int, bool)
CPhysicsCollision::VCollideUnload(vcollide_t*)
CPhysicsCollision::VPhysicsKeyParserCreate(char const*)
CPhysicsCollision::VPhysicsKeyParserDestroy(IVPhysicsKeyParser*)
CPhysicsConstraint
CPhysicsConstraint::Activate()
CPhysicsConstraint::~CPhysicsConstraint()
CPhysicsConstraint::CreateBreakableConstraint(hk_Constraint*, hk_Local_Constraint_System*, constraint_breakableparams_t const&)
CPhysicsConstraint::Deactivate()
CPhysicsConstraint::event_object_created(IVP_Event_Object*)
CPhysicsConstraint::event_object_deleted(IVP_Event_Object*)
CPhysicsConstraint::event_object_frozen(IVP_Event_Object*)
CPhysicsConstraint::event_object_revived(IVP_Event_Object*)
CPhysicsConstraint::GetAttachedObject() const
CPhysicsConstraint::GetConstraintParams(constraint_breakableparams_t*) const
CPhysicsConstraint::GetConstraintTransform(matrix3x4_t*, matrix3x4_t*) const
CPhysicsConstraint::GetGameData() const
CPhysicsConstraint::GetReferenceObject() const
CPhysicsConstraintGroup
CPhysicsConstraintGroup::Activate()
CPhysicsConstraintGroup::ClearErrorState()
CPhysicsConstraintGroup::~CPhysicsConstraintGroup()
CPhysicsConstraintGroup::GetErrorParams(constraint_groupparams_t*)
CPhysicsConstraintGroup::IsInErrorState()
CPhysicsConstraintGroup::SetErrorParams(constraint_groupparams_t const&)
CPhysicsConstraintGroup::SolvePenetration(IPhysicsObject*, IPhysicsObject*)
CPhysicsConstraint::InitBallsocket(IVP_Environment*, CPhysicsConstraintGroup*, constraint_ballsocketparams_t const&)
CPhysicsConstraint::InitFixed(IVP_Environment*, CPhysicsConstraintGroup*, constraint_fixedparams_t const&)
CPhysicsConstraint::InitHinge(IVP_Environment*, CPhysicsConstraintGroup*, constraint_limitedhingeparams_t const&)
CPhysicsConstraint::InitLength(IVP_Environment*, CPhysicsConstraintGroup*, constraint_lengthparams_t const&)
CPhysicsConstraint::InitPulley(IVP_Environment*, CPhysicsConstraintGroup*, constraint_pulleyparams_t const&)
CPhysicsConstraint::InitRagdoll(IVP_Environment*, CPhysicsConstraintGroup*, constraint_ragdollparams_t const&)
CPhysicsConstraint::InitSliding(IVP_Environment*, CPhysicsConstraintGroup*, constraint_slidingparams_t const&)
CPhysicsConstraint::OutputDebugInfo()
CPhysicsConstraint::SetAngularMotor(float, float)
CPhysicsConstraint::SetGameData(void*)
CPhysicsConstraint::SetLinearMotor(float, float)
CPhysicsConstraint::UpdateRagdollTransforms(matrix3x4_t const&, matrix3x4_t const&)
CPhysicsConstraint::WriteBallsocket(constraint_ballsocketparams_t&) const
CPhysicsConstraint::WriteFixed(constraint_fixedparams_t&) const
CPhysicsConstraint::WriteHinge(constraint_hingeparams_t&) const
CPhysicsConstraint::WriteLength(constraint_lengthparams_t&) const
CPhysicsConstraint::WritePulley(constraint_pulleyparams_t&) const
CPhysicsConstraint::WriteRagdoll(constraint_ragdollparams_t&) const
CPhysicsConstraint::WriteSliding(constraint_slidingparams_t&) const
CPhysicsConstraint::WriteToTemplate(vphysics_save_cphysicsconstraint_t&, vphysics_save_constraint_t&) const
CPhysicsEnvironment
CPhysicsEnvironment::AddPlayerController(IPhysicsPlayerController*)
CPhysicsEnvironment::CleanupDeleteList()
CPhysicsEnvironment::ClearDeadObjects()
CPhysicsEnvironment::ClearStats()
CPhysicsEnvironment::~CPhysicsEnvironment()
CPhysicsEnvironment::CPhysicsEnvironment()
CPhysicsEnvironment::CreateBallsocketConstraint(IPhysicsObject*, IPhysicsObject*, IPhysicsConstraintGroup*, constraint_ballsocketparams_t const&)
CPhysicsEnvironment::CreateConstraintGroup(constraint_groupparams_t const&)
CPhysicsEnvironment::CreateFixedConstraint(IPhysicsObject*, IPhysicsObject*, IPhysicsConstraintGroup*, constraint_fixedparams_t const&)
CPhysicsEnvironment::CreateFluidController(IPhysicsObject*, fluidparams_t*)
CPhysicsEnvironment::CreateHingeConstraint(IPhysicsObject*, IPhysicsObject*, IPhysicsConstraintGroup*, constraint_hingeparams_t const&)
CPhysicsEnvironment::CreateLengthConstraint(IPhysicsObject*, IPhysicsObject*, IPhysicsConstraintGroup*, constraint_lengthparams_t const&)
CPhysicsEnvironment::CreateLimitedHingeConstraint(IPhysicsObject*, IPhysicsObject*, IPhysicsConstraintGroup*, constraint_limitedhingeparams_t const&)
CPhysicsEnvironment::CreateMotionController(IMotionEvent*)
CPhysicsEnvironment::CreatePlayerController(IPhysicsObject*)
CPhysicsEnvironment::CreatePolyObject(CPhysCollide const*, int, Vector const&, QAngle const&, objectparams_t*)
CPhysicsEnvironment::CreatePolyObjectStatic(CPhysCollide const*, int, Vector const&, QAngle const&, objectparams_t*)
CPhysicsEnvironment::CreatePulleyConstraint(IPhysicsObject*, IPhysicsObject*, IPhysicsConstraintGroup*, constraint_pulleyparams_t const&)
CPhysicsEnvironment::CreateRagdollConstraint(IPhysicsObject*, IPhysicsObject*, IPhysicsConstraintGroup*, constraint_ragdollparams_t const&)
CPhysicsEnvironment::CreateShadowController(IPhysicsObject*, bool, bool)
CPhysicsEnvironment::CreateSlidingConstraint(IPhysicsObject*, IPhysicsObject*, IPhysicsConstraintGroup*, constraint_slidingparams_t const&)
CPhysicsEnvironment::CreateSphereObject(float, int, Vector const&, QAngle const&, objectparams_t*, bool)
CPhysicsEnvironment::CreateSpring(IPhysicsObject*, IPhysicsObject*, springparams_t*)
CPhysicsEnvironment::CreateVehicleController(IPhysicsObject*, vehicleparams_t const&, unsigned int, IPhysicsGameTrace*)
CPhysicsEnvironment::DebugCheckContacts()
CPhysicsEnvironment::DestroyConstraintGroup(IPhysicsConstraintGroup*)
CPhysicsEnvironment::DestroyConstraint(IPhysicsConstraint*)
CPhysicsEnvironment::DestroyFluidController(IPhysicsFluidController*)
CPhysicsEnvironment::DestroyMotionController(IPhysicsMotionController*)
CPhysicsEnvironment::DestroyObject(IPhysicsObject*)
CPhysicsEnvironment::DestroyPlayerController(IPhysicsPlayerController*)
CPhysicsEnvironment::DestroyShadowController(IPhysicsShadowController*)
CPhysicsEnvironment::DestroySpring(IPhysicsSpring*)
CPhysicsEnvironment::DestroyVehicleController(IPhysicsVehicleController*)
CPhysicsEnvironment::EnableConstraintNotify(bool)
CPhysicsEnvironment::EnableDeleteQueue(bool)
CPhysicsEnvironment::GetActiveObjectCount() const
CPhysicsEnvironment::GetActiveObjects(IPhysicsObject**) const
CPhysicsEnvironment::GetAirDensity() const
CPhysicsEnvironment::GetCollisionEventHandler()
CPhysicsEnvironment::GetDebugOverlay()
CPhysicsEnvironment::GetGravity(Vector*) const
CPhysicsEnvironment::GetNextFrameTime() const
CPhysicsEnvironment::GetObjectList(int*) const
CPhysicsEnvironment::GetObjectSerializeSize(IPhysicsObject*) const
CPhysicsEnvironment::GetPerformanceSettings(physics_performanceparams_t*) const
CPhysicsEnvironment::GetSimulationTime() const
CPhysicsEnvironment::GetSimulationTimestep() const
CPhysicsEnvironment::IsCollisionModelUsed(CPhysCollide*) const
CPhysicsEnvironment::IsInSimulation() const
CPhysicsEnvironment::NotifyConstraintDisabled(IPhysicsConstraint*)
CPhysicsEnvironment::PhantomAdd(CPhysicsObject*)
CPhysicsEnvironment::PostRestore()
CPhysicsEnvironment::PreRestore(physprerestoreparams_t const&)
CPhysicsEnvironment::ReadStats(physics_stats_t*)
CPhysicsEnvironment::ResetSimulationClock()
CPhysicsEnvironment::Restore(physrestoreparams_t const&)
CPhysicsEnvironment::Restore(physrestoreparams_t const&)::restoreFuncs
CPhysicsEnvironment::Save(physsaveparams_t const&)
CPhysicsEnvironment::Save(physsaveparams_t const&)::saveFuncs
CPhysicsEnvironment::SerializeObjectToBuffer(IPhysicsObject*, unsigned char*, unsigned int)
CPhysicsEnvironment::SetAirDensity(float)
CPhysicsEnvironment::SetCollisionEventHandler(IPhysicsCollisionEvent*)
CPhysicsEnvironment::SetCollisionSolver(IPhysicsCollisionSolver*)
CPhysicsEnvironment::SetConstraintEventHandler(IPhysicsConstraintEvent*)
CPhysicsEnvironment::SetDebugOverlay(void* (*)(char const*, int*))
CPhysicsEnvironment::SetGravity(Vector const&)
CPhysicsEnvironment::SetObjectEventHandler(IPhysicsObjectEvent*)
CPhysicsEnvironment::SetPerformanceSettings(physics_performanceparams_t const*)
CPhysicsEnvironment::SetQuickDelete(bool)
CPhysicsEnvironment::SetSimulationTimestep(float)
CPhysicsEnvironment::ShouldQuickDelete() const
CPhysicsEnvironment::Simulate(float)
CPhysicsEnvironment::Simulate(float)::autoMutex__
CPhysicsEnvironment::SweepCollideable(CPhysCollide const*, Vector const&, Vector const&, QAngle const&, unsigned int, IPhysicsTraceFilter*, CGameTrace*)
CPhysicsEnvironment::TraceBox(CGameTrace*, Vector const&, Vector const&, Vector const&, Vector const&)
CPhysicsEnvironment::TraceRay(Ray_t const&, unsigned int, IPhysicsTraceFilter*, CGameTrace*)
CPhysicsEnvironment::TransferObject(IPhysicsObject*, IPhysicsEnvironment*)
CPhysicsEnvironment::UnserializeObjectFromBuffer(void*, unsigned char*, unsigned int, bool)
CPhysicsFluidController
CPhysicsFluidController::~CPhysicsFluidController()
CPhysicsFluidController::GetContents() const
CPhysicsFluidController::GetDensity() const
CPhysicsFluidController::GetGameData() const
CPhysicsFluidController::GetSurfacePlane(Vector*, float*) const
CPhysicsFluidController::SetGameData(void*)
CPhysicsFluidController::WakeAllSleepingObjects()
CPhysicsFrictionData
CPhysicsFrictionData::GetContactPoint(Vector&)
CPhysicsFrictionData::GetContactSpeed(Vector&)
CPhysicsFrictionData::GetSurfaceNormal(Vector&)
CPhysicsInterface
CPhysicsInterface::~CPhysicsInterface()
CPhysicsInterface::CreateEnvironment()
CPhysicsInterface::CreateObjectPairHash()
CPhysicsInterface::DestroyAllCollisionSets()
CPhysicsInterface::DestroyEnvironment(IPhysicsEnvironment*)
CPhysicsInterface::DestroyObjectPairHash(IPhysicsObjectPairHash*)
CPhysicsInterface::FindCollisionSet(unsigned int)
CPhysicsInterface::FindOrCreateCollisionSet(unsigned int, int)
CPhysicsInterface::GetActiveEnvironmentByIndex(int)
CPhysicsInterface::QueryInterface(char const*)
CPhysicsListenerCollision
CPhysicsListenerCollision::core_entered_volume(IVP_Controller_Phantom*, IVP_Core*)
CPhysicsListenerCollision::core_left_volume(IVP_Controller_Phantom*, IVP_Core*)
CPhysicsListenerCollision::CorePairLessFunc(CPhysicsListenerCollision::corepair_t const&, CPhysicsListenerCollision::corepair_t const&)
CPhysicsListenerCollision::~CPhysicsListenerCollision()
CPhysicsListenerCollision::event_collision_object_deleted(IVP_Real_Object*)
CPhysicsListenerCollision::event_friction_created(IVP_Event_Friction*)
CPhysicsListenerCollision::event_friction_deleted(IVP_Event_Friction*)
CPhysicsListenerCollision::event_friction_pair_created(IVP_Friction_Core_Pair*)
CPhysicsListenerCollision::event_friction_pair_deleted(IVP_Friction_Core_Pair*)
CPhysicsListenerCollision::event_post_collision(IVP_Event_Collision*)
CPhysicsListenerCollision::event_pre_collision(IVP_Event_Collision*)
CPhysicsListenerCollision::mindist_entered_volume(IVP_Controller_Phantom*, IVP_Mindist_Base*)
CPhysicsListenerCollision::mindist_left_volume(IVP_Controller_Phantom*, IVP_Mindist_Base*)
CPhysicsListenerCollision::phantom_is_going_to_be_deleted_event(IVP_Controller_Phantom*)
CPhysicsListenerCollision::UpdatePairListPSI(CPhysicsEnvironment*)
CPhysicsListenerConstraint
CPhysicsListenerConstraint::event_constraint_broken(hk_Breakable_Constraint*)
CPhysicsListenerConstraint::event_constraint_broken(IVP_Constraint*)
CPhysicsMotionController
CPhysicsMotionController::AttachObject(IPhysicsObject*, bool)
CPhysicsMotionController::ClearObjects()
CPhysicsMotionController::core_is_going_to_be_deleted_event(IVP_Core*)
CPhysicsMotionController::CountObjects()
CPhysicsMotionController::~CPhysicsMotionController()
CPhysicsMotionController::DetachObject(IPhysicsObject*)
CPhysicsMotionController::do_simulation_controller(IVP_Event_Sim*, IVP_U_Vector<IVP_Core>*)
CPhysicsMotionController::get_controller_name()
CPhysicsMotionController::get_controller_priority()
CPhysicsMotionController::GetObjects(IPhysicsObject**)
CPhysicsMotionController::SetEventHandler(IMotionEvent*)
CPhysicsMotionController::SetPriority(IPhysicsMotionController::priority_t)
CPhysicsMotionController::WakeObjects()
?CPhysicsObject
CPhysicsObject::AddVelocity(Vector const*, Vector const*)
CPhysicsObject::ApplyForceCenter(Vector const&)
CPhysicsObject::ApplyForceOffset(Vector const&, Vector const&)
CPhysicsObject::ApplyTorqueCenter(Vector const&)
CPhysicsObject::BecomeHinged(int)
CPhysicsObject::BecomeTrigger()
CPhysicsObject::CalculateAngularDrag(Vector const&) const
CPhysicsObject::CalculateForceOffset(Vector const&, Vector const&, Vector*, Vector*) const
CPhysicsObject::CalculateLinearDrag(Vector const&) const
CPhysicsObject::CalculateVelocityOffset(Vector const&, Vector const&, Vector*, Vector*) const
CPhysicsObject::ComputeShadowControl(hlshadowcontrol_params_t const&, float, float)
CPhysicsObject::~CPhysicsObject()
CPhysicsObject::CreateFrictionSnapshot()
CPhysicsObject::DestroyFrictionSnapshot(IPhysicsFrictionSnapshot*)
CPhysicsObject::EnableCollisions(bool)
CPhysicsObject::EnableDrag(bool)
CPhysicsObject::EnableGravity(bool)
CPhysicsObject::EnableMotion(bool)
CPhysicsObject::GetAngularDragInDirection(IVP_U_Float_Point const&) const
CPhysicsObject::GetCallbackFlags() const
CPhysicsObject::GetCollide() const
CPhysicsObject::GetContactPoint(Vector*, IPhysicsObject**) const
CPhysicsObject::GetContents() const
CPhysicsObject::GetDamping(float*, float*) const
CPhysicsObject::GetDragInDirection(IVP_U_Float_Point const&) const
CPhysicsObject::GetEnergy() const
CPhysicsObject::GetGameData() const
CPhysicsObject::GetGameFlags() const
CPhysicsObject::GetGameIndex() const
CPhysicsObject::GetImplicitVelocity(Vector*, Vector*) const
CPhysicsObject::GetInertia() const
CPhysicsObject::GetInvInertia() const
CPhysicsObject::GetInvMass() const
CPhysicsObject::GetMassCenterLocalSpace() const
CPhysicsObject::GetMass() const
CPhysicsObject::GetMaterialIndex() const
CPhysicsObject::GetName() const
CPhysicsObject::GetPositionMatrix(matrix3x4_t*) const
CPhysicsObject::GetPosition(Vector*, QAngle*) const
CPhysicsObject::GetShadowController() const
CPhysicsObject::GetShadowPosition(Vector*, QAngle*) const
CPhysicsObject::GetSphereRadius() const
CPhysicsObject::GetVelocityAtPoint(Vector const&, Vector*) const
CPhysicsObject::GetVelocity(Vector*, Vector*) const
CPhysicsObject::GetVPhysicsEnvironment()
CPhysicsObject::Init(CPhysCollide const*, IVP_Real_Object*, int, float, float, float)
CPhysicsObject::InitFromTemplate(CPhysicsEnvironment*, void*, vphysics_save_cphysicsobject_t const&)
CPhysicsObject::IsAsleep() const
CPhysicsObject::IsAttachedToConstraint(bool) const
CPhysicsObject::IsCollisionEnabled() const
CPhysicsObject::IsControlledByGame() const
CPhysicsObject::IsDragEnabled() const
CPhysicsObject::IsFluid() const
CPhysicsObject::IsGravityEnabled() const
CPhysicsObject::IsHinged() const
CPhysicsObject::IsMotionEnabled() const
CPhysicsObject::IsMoveable() const
CPhysicsObject::IsStatic() const
CPhysicsObject::IsTrigger() const
CPhysicsObject::LocalToWorld(Vector*, Vector const&) const
CPhysicsObject::LocalToWorldVector(Vector*, Vector const&) const
CPhysicsObject::NotifySleep()
CPhysicsObject::NotifyWake()
CPhysicsObject::OutputDebugInfo() const
CPhysicsObject::RecheckCollisionFilter()
CPhysicsObject::RecheckContactPoints()
CPhysicsObject::RecomputeDragBases()
CPhysicsObject::RemoveHinged()
CPhysicsObject::RemoveShadowController()
CPhysicsObject::RemoveTrigger()
CPhysicsObject::SetBuoyancyRatio(float)
CPhysicsObject::SetCallbackFlags(unsigned short)
CPhysicsObject::SetContents(unsigned int)
CPhysicsObject::SetDamping(float const*, float const*)
CPhysicsObject::SetDragCoefficient(float*, float*)
CPhysicsObject::SetGameData(void*)
CPhysicsObject::SetGameFlags(unsigned short)
CPhysicsObject::SetGameIndex(unsigned short)
CPhysicsObject::SetInertia(Vector const&)
CPhysicsObject::SetMass(float)
CPhysicsObject::SetMaterialIndex(int)
CPhysicsObject::SetPositionMatrix(matrix3x4_t const&, bool)
CPhysicsObject::SetPosition(Vector const&, QAngle const&, bool)
CPhysicsObject::SetShadow(float, float, bool, bool)
CPhysicsObject::SetVelocityInstantaneous(Vector const*, Vector const*)
CPhysicsObject::SetVelocity(Vector const*, Vector const*)
CPhysicsObject::Sleep()
CPhysicsObject::UpdateShadow(Vector const&, QAngle const&, bool, float)
CPhysicsObject::Wake()
CPhysicsObject::WorldToLocal(Vector*, Vector const&) const
CPhysicsObject::WorldToLocalVector(Vector*, Vector const&) const
CPhysicsObject::WriteToTemplate(vphysics_save_cphysicsobject_t&)
:CPhysicsSpring
CPhysicsSpring::~CPhysicsSpring()
CPhysicsSpring::event_object_created(IVP_Event_Object*)
CPhysicsSpring::event_object_deleted(IVP_Event_Object*)
CPhysicsSpring::event_object_frozen(IVP_Event_Object*)
CPhysicsSpring::event_object_revived(IVP_Event_Object*)
CPhysicsSpring::GetEndObject()
CPhysicsSpring::GetEndpoints(Vector*, Vector*)
CPhysicsSpring::GetStartObject()
CPhysicsSpring::SetSpringConstant(float)
CPhysicsSpring::SetSpringDamping(float)
CPhysicsSpring::SetSpringLength(float)
CPhysicsSurfaceProps
CPhysicsSurfaceProps::AddFileToDatabase(char const*)
CPhysicsSurfaceProps::~CPhysicsSurfaceProps()
CPhysicsSurfaceProps::CPhysicsSurfaceProps()
CPhysicsSurfaceProps::GetIVPManager()
CPhysicsSurfaceProps::GetIVPMaterialIndex(IVP_Material const*) const
CPhysicsSurfaceProps::GetIVPMaterial(int)
CPhysicsSurfaceProps::GetPhysicsParameters(int, surfacephysicsparams_t*) const
CPhysicsSurfaceProps::GetPhysicsProperties(int, float*, float*, float*, float*) const
CPhysicsSurfaceProps::GetPropName(int) const
CPhysicsSurfaceProps::GetReservedMaterialName(int) const
CPhysicsSurfaceProps::GetString(unsigned short) const
CPhysicsSurfaceProps::GetSurfaceData(int)
CPhysicsSurfaceProps::GetSurfaceIndex(char const*) const
CPhysicsSurfaceProps::ParseSurfaceData(char const*, char const*)
CPhysicsSurfaceProps::RemapIVPMaterialIndex(int) const
CPhysicsSurfaceProps::SetWorldMaterialIndexTable(int*, int)
CPhysicsSurfaceProps::SurfacePropCount() const
CPhysicsTrace::~CPhysicsTrace()
CPhysicsTrace::CPhysicsTrace()
CPhysicsTrace::GetAABB(Vector*, Vector*, CPhysCollide const*, Vector const&, QAngle const&)
CPhysicsTrace::GetExtent(CPhysCollide const*, Vector const&, QAngle const&, Vector const&)
CPhysicsTrace::IsBoxIntersectingCone(Vector const&, Vector const&, truncatedcone_t const&)
CPhysicsTrace::SweepBoxIVP(Ray_t const&, unsigned int, IConvexInfo*, CPhysCollide const*, Vector const&, QAngle const&, CGameTrace*)
CPhysicsTrace::SweepBoxIVP(Vector const&, Vector const&, Vector const&, Vector const&, CPhysCollide const*, Vector const&, QAngle const&, CGameTrace*)
CPhysicsTrace::SweepIVP(Vector const&, Vector const&, CPhysCollide const*, QAngle const&, CPhysCollide const*, Vector const&, QAngle const&, CGameTrace*)
CPhysPolysoup::CPhysPolysoup()
CPlayerController
CPlayerController::~CPlayerController()
CPlayerController::CPlayerController(CPhysicsObject*)
CPlayerController::do_simulation_controller(IVP_Event_Sim*, IVP_U_Vector<IVP_Core>*)
CPlayerController::event_object_created(IVP_Event_Object*)
CPlayerController::event_object_deleted(IVP_Event_Object*)
CPlayerController::event_object_frozen(IVP_Event_Object*)
CPlayerController::event_object_revived(IVP_Event_Object*)
CPlayerController::get_controller_name()
CPlayerController::get_controller_priority()
CPlayerController::GetLastImpulse(Vector*)
CPlayerController::GetObject()
CPlayerController::GetPushMassLimit()
CPlayerController::GetPushSpeedLimit()
CPlayerController::GetShadowPosition(Vector*, QAngle*)
CPlayerController::GetShadowVelocity(Vector*)
CPlayerController::IsInContact()
CPlayerController::Jump()
CPlayerController::MaxSpeed(Vector const&)
CPlayerController::SetEventHandler(IPhysicsPlayerControllerEvent*)
CPlayerController::SetObject(IPhysicsObject*)
CPlayerController::SetPushMassLimit(float)
CPlayerController::SetPushSpeedLimit(float)
CPlayerController::StepUp(float)
CPlayerController::TryTeleportObject()
CPlayerController::Update(Vector const&, Vector const&, float, bool, IPhysicsObject*)
CPlayerController::WasFrozen()
CPolyhedron
CPolyhedron_AllocByNew
CPolyhedron_AllocByNew::Allocate(unsigned short, unsigned short, unsigned short, unsigned short)
CPolyhedron_AllocByNew::~CPolyhedron_AllocByNew()
CPolyhedron_AllocByNew::Release()
CPolyhedron_TempMemory
CPolyhedron_TempMemory::~CPolyhedron_TempMemory()
CPolyhedron_TempMemory::Release()
cpu seconds for qhull after input
  CPU seconds to compute hull (after input): %2.4g
CreateBallsocketConstraint(IVP_Environment*, CPhysicsObject*, CPhysicsObject*, IPhysicsConstraintGroup*, constraint_ballsocketparams_t const&)
__CreateCPhysicsCollisionIPhysicsCollision_interface()
__CreateCPhysicsInterfaceIPhysics_interface()
__CreateCPhysicsSurfacePropsIPhysicsSurfaceProps_interface()
CreateFixedConstraint(IVP_Environment*, CPhysicsObject*, CPhysicsObject*, IPhysicsConstraintGroup*, constraint_fixedparams_t const&)
CreateFluidController(IVP_Environment*, CPhysicsObject*, fluidparams_t*)
CreateFrictionSnapshot(IVP_Real_Object*)
CreateHingeConstraint(IVP_Environment*, CPhysicsObject*, CPhysicsObject*, IPhysicsConstraintGroup*, constraint_limitedhingeparams_t const&)
_CreateInterface
CreateInterfaceInternal(char const*, int*)
CreateLengthConstraint(IVP_Environment*, CPhysicsObject*, CPhysicsObject*, IPhysicsConstraintGroup*, constraint_lengthparams_t const&)
CreateMotionController(CPhysicsEnvironment*, IMotionEvent*)
CreateObjectFromBuffer(CPhysicsEnvironment*, void*, unsigned char*, unsigned int, bool)
CreateObjectFromBuffer_UseExistingMemory(CPhysicsEnvironment*, void*, unsigned char*, unsigned int, CPhysicsObject*)
CreateObjectPairHash()
CreatePhysicsConstraintGroup(IVP_Environment*, constraint_groupparams_t const&)
CreatePhysicsEnvironment()
CreatePhysicsObject(CPhysicsEnvironment*, CPhysCollide const*, int, Vector const&, QAngle const&, objectparams_t*, bool)
CreatePhysicsSphere(CPhysicsEnvironment*, float, int, Vector const&, QAngle const&, objectparams_t*, bool)
CreatePlayerController(CPhysicsObject*)
CreatePulleyConstraint(IVP_Environment*, CPhysicsObject*, CPhysicsObject*, IPhysicsConstraintGroup*, constraint_pulleyparams_t const&)
CreateRagdollConstraint(IVP_Environment*, CPhysicsObject*, CPhysicsObject*, IPhysicsConstraintGroup*, constraint_ragdollparams_t const&)
CreateShadowController(CPhysicsObject*, bool, bool)
CreateSlidingConstraint(IVP_Environment*, CPhysicsObject*, CPhysicsObject*, IPhysicsConstraintGroup*, constraint_slidingparams_t const&)
CreateSpring(IVP_Environment*, CPhysicsObject*, CPhysicsObject*, springparams_t*)
CreateSurfaceManager(CPhysCollide const*, short&)
CreateVehicleController(CPhysicsEnvironment*, CPhysicsObject*, vehicleparams_t const&, unsigned int, IPhysicsGameTrace*)
CreateVirtualMesh(virtualmeshparams_t const&)
CreateVPhysicsKeyParser(char const*)
CShadowController
CShadowController::AllowsRotation()
CShadowController::AllowsTranslation()
CShadowController::AttachObject()
CShadowController::~CShadowController()
CShadowController::DetachObject()
CShadowController::do_simulation_controller(IVP_Event_Sim*, IVP_U_Vector<IVP_Core>*)
CShadowController::get_controller_name()
CShadowController::get_controller_priority()
CShadowController::GetLastImpulse(Vector*)
CShadowController::GetMaxSpeed(float*, float*)
CShadowController::GetTargetPosition(Vector*, QAngle*)
CShadowController::GetTeleportDistance()
CShadowController::InitFromTemplate(vphysics_save_cshadowcontroller_t const&)
CShadowController::IsPhysicallyControlled()
CShadowController::MaxSpeed(float, float)
CShadowController::ObjectMaterialChanged(int)
CShadowController::SetPhysicallyControlled(bool)
CShadowController::SetTeleportDistance(float)
CShadowController::StepUp(float)
CShadowController::Update(Vector const&, QAngle const&, float)
CShadowController::UseShadowMaterial(bool)
CSleepObjects
CSleepObjects::~CSleepObjects()
CSleepObjects::event_object_created(IVP_Event_Object*)
CSleepObjects::event_object_deleted(IVP_Event_Object*)
CSleepObjects::event_object_frozen(IVP_Event_Object*)
CSleepObjects::event_object_revived(IVP_Event_Object*)
CSleepObjects::ProcessActiveObjects(IVP_Environment*, IPhysicsCollisionEvent*)
CSleepObjects::UpdateSleepObjects()
__cstring
CSurface
CSurface::~CSurface()
CSurface::get_adhesion()
CSurface::get_damping()
CSurface::get_elasticity()
CSurface::get_friction_factor()
CSurface::get_name()
CSurface::get_second_friction_factor()
CThreadEvent::CThreadEvent(bool)
CThreadEvent::Set()
CThreadFastMutex::Lock(unsigned int, unsigned int) volatile
CThreadLocalBase::~CThreadLocalBase()
CThreadLocalBase::CThreadLocalBase()
CThreadLocalBase::Get() const
CThreadLocalBase::Set(void*)
CThreadLocalPtr<CUtlVector<CPhysCollideVirtualMesh*, CUtlMemory<CPhysCollideVirtualMesh*, int> > >::~CThreadLocalPtr()
CThreadRWLock::LockForWrite()
CThreadRWLock::UnlockWrite()
CThreadRWLock::WaitForRead()
CThreadSyncObject::~CThreadSyncObject()
CTier0AppSystem<IPhysics>
CTier1AppSystem<IPhysics, 0>
CTier1AppSystem<IPhysics, 0>::Connect(void* (*)(char const*, int*))
CTier1AppSystem<IPhysics, 0>::Disconnect()
CTier1AppSystem<IPhysics, 0>::Init()
CTier1AppSystem<IPhysics, 0>::Shutdown()
CTraceAABB
CTraceAABB::GetVertByIndex(int) const
CTraceAABB::Radius() const
CTraceAABB::SupportMap(Vector const&, Vector*) const
CTraceCone
CTraceCone::GetVertByIndex(int) const
CTraceCone::Radius() const
CTraceCone::SupportMap(Vector const&, Vector*) const
?CTraceIVP
CTraceIVP::BuildLeafmapCache(leafmap_t const*)
CTraceIVP::BuildLeafmapCacheRLE(leafmap_t const*)
CTraceIVP::~CTraceIVP()
CTraceIVP::CTraceIVP(CPhysCollide const*, Vector const&, QAngle const&)
CTraceIVP::GetVertByIndex(int) const
CTraceIVP::Radius() const
CTraceIVP::SetLedge(IVP_Compact_Ledge const*)
CTraceIVP::SupportMap(Vector const&, Vector*) const
CTraceRay::CTraceRay(Ray_t const&, Vector const&)
CTraceSolver
CTraceSolver::DoSweep()
CTraceSolver::SolveMeshIntersection(simplex_t&)
CTraceSolver::SweepSingleConvex()
CTraceSolverSweptObject
CTraceSolverSweptObject::DoSweep()
CTraceSolverSweptObject::InitOSRay()
CTraceSolverSweptObject::SweepLedgeTree_r(IVP_Compact_Ledgetree_Node const*)
CTSPool<CUtlVector<CPhysCollideVirtualMesh*, CUtlMemory<CPhysCollideVirtualMesh*, int> > >::~CTSPool()
CTSPool<CVisitHash>::~CTSPool()
currentSpeed.k
Current summary is:
current_time
currentvelocity
CUtlBuffer::AddNullTermination()
CUtlBuffer::CUtlBuffer(int, int, int)
CUtlBuffer::GetOverflow(int)
CUtlBuffer::PutOverflow(int)
CUtlBuffer::Put(void const*, int)
CUtlBuffer::SetExternalBuffer(void*, int, int, int)
CUtlCharConversion
CUtlCharConversion::FindConversion(char const*, int*)
CUtlCStringConversion
CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*)
CUtlCStringConversion::FindConversion(char const*, int*)
CUtlLinkedList<CUtlMultiList<CDataManagerBase::resource_lru_element_t, unsigned short>::List_t, unsigned short, false, unsigned short, CUtlMemory<UtlLinkedListElem_t<CUtlMultiList<CDataManagerBase::resource_lru_element_t, unsigned short>::List_t, unsigned short>, unsigned short> >::AllocInternal(bool)
CUtlLinkedList<CUtlMultiList<CDataManagerBase::resource_lru_element_t, unsigned short>::List_t, unsigned short, false, unsigned short, CUtlMemory<UtlLinkedListElem_t<CUtlMultiList<CDataManagerBase::resource_lru_element_t, unsigned short>::List_t, unsigned short>, unsigned short> >::~CUtlLinkedList()
CUtlLinkedList<CUtlMultiList<CDataManagerBase::resource_lru_element_t, unsigned short>::List_t, unsigned short, false, unsigned short, CUtlMemory<UtlLinkedListElem_t<CUtlMultiList<CDataManagerBase::resource_lru_element_t, unsigned short>::List_t, unsigned short>, unsigned short> >::LinkBefore(unsigned short, unsigned short)
CUtlLinkedList<CUtlMultiList<void*, unsigned short>::List_t, unsigned short, false, unsigned short, CUtlMemory<UtlLinkedListElem_t<CUtlMultiList<void*, unsigned short>::List_t, unsigned short>, unsigned short> >::AllocInternal(bool)
CUtlLinkedList<CUtlMultiList<void*, unsigned short>::List_t, unsigned short, false, unsigned short, CUtlMemory<UtlLinkedListElem_t<CUtlMultiList<void*, unsigned short>::List_t, unsigned short>, unsigned short> >::~CUtlLinkedList()
CUtlLinkedList<CUtlMultiList<void*, unsigned short>::List_t, unsigned short, false, unsigned short, CUtlMemory<UtlLinkedListElem_t<CUtlMultiList<void*, unsigned short>::List_t, unsigned short>, unsigned short> >::LinkBefore(unsigned short, unsigned short)
CUtlLinkedList overflow! (exhausted index range)
CUtlLinkedList overflow! (exhausted memory allocator)
CUtlMap<void*, void*, unsigned short>::~CUtlMap()
CUtlMemory<UtlLinkedListElem_t<CUtlMultiList<CDataManagerBase::resource_lru_element_t, unsigned short>::List_t, unsigned short>, unsigned short>::Grow(int)
CUtlMemory<UtlLinkedListElem_t<CUtlMultiList<void*, unsigned short>::List_t, unsigned short>, unsigned short>::Grow(int)
CUtlMemory<UtlRBTreeNode_t<CPhysicsListenerCollision::corepair_t, unsigned short>, unsigned short>::Grow(int)
CUtlMemory<UtlRBTreeNode_t<CUtlMap<void*, void*, unsigned short>::Node_t, unsigned short>, unsigned short>::Grow(int)
CUtlMemory<UtlRBTreeNode_t<CUtlSymbolTable::CStringPoolIndex, unsigned short>, unsigned short>::Grow(int)
CUtlMultiList<CDataManagerBase::resource_lru_element_t, unsigned short>::Alloc()
CUtlMultiList<CDataManagerBase::resource_lru_element_t, unsigned short>::~CUtlMultiList()
CUtlMultiList<CDataManagerBase::resource_lru_element_t, unsigned short>::LinkBefore(unsigned short, unsigned short, unsigned short)
CUtlMultiList overflow! (exhausted index range)
CUtlMultiList overflow! (exhausted memory allocator)
CUtlMultiList<void*, unsigned short>::Alloc()
CUtlMultiList<void*, unsigned short>::~CUtlMultiList()
CUtlMultiList<void*, unsigned short>::LinkBefore(unsigned short, unsigned short, unsigned short)
CUtlMultiList<void*, unsigned short>::Remove(unsigned short, unsigned short)
CUtlNoEscConversion
CUtlNoEscConversion::FindConversion(char const*, int*)
CUtlRBTree<CPhysicsListenerCollision::corepair_t, unsigned short, bool (*)(CPhysicsListenerCollision::corepair_t const&, CPhysicsListenerCollision::corepair_t const&), CUtlMemory<UtlRBTreeNode_t<CPhysicsListenerCollision::corepair_t, unsigned short>, unsigned short> >::~CUtlRBTree()
CUtlRBTree<CPhysicsListenerCollision::corepair_t, unsigned short, bool (*)(CPhysicsListenerCollision::corepair_t const&, CPhysicsListenerCollision::corepair_t const&), CUtlMemory<UtlRBTreeNode_t<CPhysicsListenerCollision::corepair_t, unsigned short>, unsigned short> >::Find(CPhysicsListenerCollision::corepair_t const&) const
CUtlRBTree<CPhysicsListenerCollision::corepair_t, unsigned short, bool (*)(CPhysicsListenerCollision::corepair_t const&, CPhysicsListenerCollision::corepair_t const&), CUtlMemory<UtlRBTreeNode_t<CPhysicsListenerCollision::corepair_t, unsigned short>, unsigned short> >::FindInsertionPosition(CPhysicsListenerCollision::corepair_t const&, unsigned short&, bool&)
CUtlRBTree<CPhysicsListenerCollision::corepair_t, unsigned short, bool (*)(CPhysicsListenerCollision::corepair_t const&, CPhysicsListenerCollision::corepair_t const&), CUtlMemory<UtlRBTreeNode_t<CPhysicsListenerCollision::corepair_t, unsigned short>, unsigned short> >::FirstInorder() const
CUtlRBTree<CPhysicsListenerCollision::corepair_t, unsigned short, bool (*)(CPhysicsListenerCollision::corepair_t const&, CPhysicsListenerCollision::corepair_t const&), CUtlMemory<UtlRBTreeNode_t<CPhysicsListenerCollision::corepair_t, unsigned short>, unsigned short> >::Insert(CPhysicsListenerCollision::corepair_t const&)
CUtlRBTree<CPhysicsListenerCollision::corepair_t, unsigned short, bool (*)(CPhysicsListenerCollision::corepair_t const&, CPhysicsListenerCollision::corepair_t const&), CUtlMemory<UtlRBTreeNode_t<CPhysicsListenerCollision::corepair_t, unsigned short>, unsigned short> >::InsertRebalance(unsigned short)
CUtlRBTree<CPhysicsListenerCollision::corepair_t, unsigned short, bool (*)(CPhysicsListenerCollision::corepair_t const&, CPhysicsListenerCollision::corepair_t const&), CUtlMemory<UtlRBTreeNode_t<CPhysicsListenerCollision::corepair_t, unsigned short>, unsigned short> >::IsLeftChild(unsigned short) const
CUtlRBTree<CPhysicsListenerCollision::corepair_t, unsigned short, bool (*)(CPhysicsListenerCollision::corepair_t const&, CPhysicsListenerCollision::corepair_t const&), CUtlMemory<UtlRBTreeNode_t<CPhysicsListenerCollision::corepair_t, unsigned short>, unsigned short> >::IsRightChild(unsigned short) const
CUtlRBTree<CPhysicsListenerCollision::corepair_t, unsigned short, bool (*)(CPhysicsListenerCollision::corepair_t const&, CPhysicsListenerCollision::corepair_t const&), CUtlMemory<UtlRBTreeNode_t<CPhysicsListenerCollision::corepair_t, unsigned short>, unsigned short> >::Links(unsigned short) const::s_Sentinel
CUtlRBTree<CPhysicsListenerCollision::corepair_t, unsigned short, bool (*)(CPhysicsListenerCollision::corepair_t const&, CPhysicsListenerCollision::corepair_t const&), CUtlMemory<UtlRBTreeNode_t<CPhysicsListenerCollision::corepair_t, unsigned short>, unsigned short> >::NewNode()
CUtlRBTree<CPhysicsListenerCollision::corepair_t, unsigned short, bool (*)(CPhysicsListenerCollision::corepair_t const&, CPhysicsListenerCollision::corepair_t const&), CUtlMemory<UtlRBTreeNode_t<CPhysicsListenerCollision::corepair_t, unsigned short>, unsigned short> >::NextInorder(unsigned short) const
CUtlRBTree<CPhysicsListenerCollision::corepair_t, unsigned short, bool (*)(CPhysicsListenerCollision::corepair_t const&, CPhysicsListenerCollision::corepair_t const&), CUtlMemory<UtlRBTreeNode_t<CPhysicsListenerCollision::corepair_t, unsigned short>, unsigned short> >::RemoveAll()
CUtlRBTree<CPhysicsListenerCollision::corepair_t, unsigned short, bool (*)(CPhysicsListenerCollision::corepair_t const&, CPhysicsListenerCollision::corepair_t const&), CUtlMemory<UtlRBTreeNode_t<CPhysicsListenerCollision::corepair_t, unsigned short>, unsigned short> >::RemoveRebalance(unsigned short)
CUtlRBTree<CPhysicsListenerCollision::corepair_t, unsigned short, bool (*)(CPhysicsListenerCollision::corepair_t const&, CPhysicsListenerCollision::corepair_t const&), CUtlMemory<UtlRBTreeNode_t<CPhysicsListenerCollision::corepair_t, unsigned short>, unsigned short> >::RotateLeft(unsigned short)
CUtlRBTree<CPhysicsListenerCollision::corepair_t, unsigned short, bool (*)(CPhysicsListenerCollision::corepair_t const&, CPhysicsListenerCollision::corepair_t const&), CUtlMemory<UtlRBTreeNode_t<CPhysicsListenerCollision::corepair_t, unsigned short>, unsigned short> >::RotateRight(unsigned short)
CUtlRBTree<CPhysicsListenerCollision::corepair_t, unsigned short, bool (*)(CPhysicsListenerCollision::corepair_t const&, CPhysicsListenerCollision::corepair_t const&), CUtlMemory<UtlRBTreeNode_t<CPhysicsListenerCollision::corepair_t, unsigned short>, unsigned short> >::Unlink(unsigned short)
CUtlRBTree<CUtlMap<void*, void*, unsigned short>::Node_t, unsigned short, CUtlMap<void*, void*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<void*, void*, unsigned short>::Node_t, unsigned short>, unsigned short> >::~CUtlRBTree()
CUtlRBTree<CUtlMap<void*, void*, unsigned short>::Node_t, unsigned short, CUtlMap<void*, void*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<void*, void*, unsigned short>::Node_t, unsigned short>, unsigned short> >::Find(CUtlMap<void*, void*, unsigned short>::Node_t const&) const
CUtlRBTree<CUtlMap<void*, void*, unsigned short>::Node_t, unsigned short, CUtlMap<void*, void*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<void*, void*, unsigned short>::Node_t, unsigned short>, unsigned short> >::FindInsertionPosition(CUtlMap<void*, void*, unsigned short>::Node_t const&, unsigned short&, bool&)
CUtlRBTree<CUtlMap<void*, void*, unsigned short>::Node_t, unsigned short, CUtlMap<void*, void*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<void*, void*, unsigned short>::Node_t, unsigned short>, unsigned short> >::Insert(CUtlMap<void*, void*, unsigned short>::Node_t const&)
CUtlRBTree<CUtlMap<void*, void*, unsigned short>::Node_t, unsigned short, CUtlMap<void*, void*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<void*, void*, unsigned short>::Node_t, unsigned short>, unsigned short> >::InsertRebalance(unsigned short)
CUtlRBTree<CUtlMap<void*, void*, unsigned short>::Node_t, unsigned short, CUtlMap<void*, void*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<void*, void*, unsigned short>::Node_t, unsigned short>, unsigned short> >::IsLeftChild(unsigned short) const
CUtlRBTree<CUtlMap<void*, void*, unsigned short>::Node_t, unsigned short, CUtlMap<void*, void*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<void*, void*, unsigned short>::Node_t, unsigned short>, unsigned short> >::IsRightChild(unsigned short) const
CUtlRBTree<CUtlMap<void*, void*, unsigned short>::Node_t, unsigned short, CUtlMap<void*, void*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<void*, void*, unsigned short>::Node_t, unsigned short>, unsigned short> >::Links(unsigned short) const::s_Sentinel
CUtlRBTree<CUtlMap<void*, void*, unsigned short>::Node_t, unsigned short, CUtlMap<void*, void*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<void*, void*, unsigned short>::Node_t, unsigned short>, unsigned short> >::NewNode()
CUtlRBTree<CUtlMap<void*, void*, unsigned short>::Node_t, unsigned short, CUtlMap<void*, void*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<void*, void*, unsigned short>::Node_t, unsigned short>, unsigned short> >::RemoveAll()
CUtlRBTree<CUtlMap<void*, void*, unsigned short>::Node_t, unsigned short, CUtlMap<void*, void*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<void*, void*, unsigned short>::Node_t, unsigned short>, unsigned short> >::RotateLeft(unsigned short)
CUtlRBTree<CUtlMap<void*, void*, unsigned short>::Node_t, unsigned short, CUtlMap<void*, void*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<void*, void*, unsigned short>::Node_t, unsigned short>, unsigned short> >::RotateRight(unsigned short)
CUtlRBTree<CUtlSymbolTable::CStringPoolIndex, unsigned short, CUtlSymbolTable::CLess, CUtlMemory<UtlRBTreeNode_t<CUtlSymbolTable::CStringPoolIndex, unsigned short>, unsigned short> >::~CUtlRBTree()
CUtlRBTree<CUtlSymbolTable::CStringPoolIndex, unsigned short, CUtlSymbolTable::CLess, CUtlMemory<UtlRBTreeNode_t<CUtlSymbolTable::CStringPoolIndex, unsigned short>, unsigned short> >::Find(CUtlSymbolTable::CStringPoolIndex const&) const
CUtlRBTree<CUtlSymbolTable::CStringPoolIndex, unsigned short, CUtlSymbolTable::CLess, CUtlMemory<UtlRBTreeNode_t<CUtlSymbolTable::CStringPoolIndex, unsigned short>, unsigned short> >::FindInsertionPosition(CUtlSymbolTable::CStringPoolIndex const&, unsigned short&, bool&)
CUtlRBTree<CUtlSymbolTable::CStringPoolIndex, unsigned short, CUtlSymbolTable::CLess, CUtlMemory<UtlRBTreeNode_t<CUtlSymbolTable::CStringPoolIndex, unsigned short>, unsigned short> >::Insert(CUtlSymbolTable::CStringPoolIndex const&)
CUtlRBTree<CUtlSymbolTable::CStringPoolIndex, unsigned short, CUtlSymbolTable::CLess, CUtlMemory<UtlRBTreeNode_t<CUtlSymbolTable::CStringPoolIndex, unsigned short>, unsigned short> >::InsertRebalance(unsigned short)
CUtlRBTree<CUtlSymbolTable::CStringPoolIndex, unsigned short, CUtlSymbolTable::CLess, CUtlMemory<UtlRBTreeNode_t<CUtlSymbolTable::CStringPoolIndex, unsigned short>, unsigned short> >::IsLeftChild(unsigned short) const
CUtlRBTree<CUtlSymbolTable::CStringPoolIndex, unsigned short, CUtlSymbolTable::CLess, CUtlMemory<UtlRBTreeNode_t<CUtlSymbolTable::CStringPoolIndex, unsigned short>, unsigned short> >::IsRightChild(unsigned short) const
CUtlRBTree<CUtlSymbolTable::CStringPoolIndex, unsigned short, CUtlSymbolTable::CLess, CUtlMemory<UtlRBTreeNode_t<CUtlSymbolTable::CStringPoolIndex, unsigned short>, unsigned short> >::Links(unsigned short) const::s_Sentinel
CUtlRBTree<CUtlSymbolTable::CStringPoolIndex, unsigned short, CUtlSymbolTable::CLess, CUtlMemory<UtlRBTreeNode_t<CUtlSymbolTable::CStringPoolIndex, unsigned short>, unsigned short> >::NewNode()
CUtlRBTree<CUtlSymbolTable::CStringPoolIndex, unsigned short, CUtlSymbolTable::CLess, CUtlMemory<UtlRBTreeNode_t<CUtlSymbolTable::CStringPoolIndex, unsigned short>, unsigned short> >::RemoveAll()
CUtlRBTree<CUtlSymbolTable::CStringPoolIndex, unsigned short, CUtlSymbolTable::CLess, CUtlMemory<UtlRBTreeNode_t<CUtlSymbolTable::CStringPoolIndex, unsigned short>, unsigned short> >::RotateLeft(unsigned short)
CUtlRBTree<CUtlSymbolTable::CStringPoolIndex, unsigned short, CUtlSymbolTable::CLess, CUtlMemory<UtlRBTreeNode_t<CUtlSymbolTable::CStringPoolIndex, unsigned short>, unsigned short> >::RotateRight(unsigned short)
CUtlRBTree overflow!
CUtlSymbol::s_pSymbolTable
CUtlSymbolTable::AddString(char const*)
CUtlSymbolTable::CLess::operator()(CUtlSymbolTable::CStringPoolIndex const&, CUtlSymbolTable::CStringPoolIndex const&) const
CUtlSymbolTable::~CUtlSymbolTable()
CUtlSymbolTable::CUtlSymbolTable(int, int, bool)
CUtlSymbolTable::Find(char const*) const
CUtlSymbolTableMT::Find(char const*) const
CUtlSymbolTableMT::String(CUtlSymbol) const
CUtlSymbolTable::String(CUtlSymbol) const
CUtlVector<bboxcache_t, CUtlMemory<bboxcache_t, int> >::~CUtlVector()
CUtlVector<CCollisionSolver::realobjectpair_t, CUtlMemory<CCollisionSolver::realobjectpair_t, int> >::~CUtlVector()
CUtlVector<char*, CUtlMemory<char*, int> >::~CUtlVector()
CUtlVector<CPhysCollideVirtualMesh*, CUtlMemory<CPhysCollideVirtualMesh*, int> >::~CUtlVector()
CUtlVector<CPhysicsCollisionSet, CUtlMemory<CPhysicsCollisionSet, int> >::~CUtlVector()
CUtlVector<CPhysicsConstraintGroup*, CUtlMemory<CPhysicsConstraintGroup*, int> >::~CUtlVector()
CUtlVector<CPhysicsFluidController*, CUtlMemory<CPhysicsFluidController*, int> >::~CUtlVector()
CUtlVector<CPhysicsObject*, CUtlMemory<CPhysicsObject*, int> >::AddToTail(CPhysicsObject* const&)
CUtlVector<CPhysicsObject*, CUtlMemory<CPhysicsObject*, int> >::~CUtlVector()
CUtlVector<CSurface, CUtlMemory<CSurface, int> >::AddToTail(CSurface const&)
CUtlVector<CSurface, CUtlMemory<CSurface, int> >::~CUtlVector()
CUtlVector<CUtlSymbol, CUtlMemory<CUtlSymbol, int> >::~CUtlVector()
CUtlVector<CUtlSymbolTable::StringPool_t*, CUtlMemory<CUtlSymbolTable::StringPool_t*, int> >::~CUtlVector()
CUtlVector<IDeleteQueueItem*, CUtlMemory<IDeleteQueueItem*, int> >::~CUtlVector()
CUtlVector<int, CUtlMemory<int, int> >::~CUtlVector()
CUtlVector<int, CUtlMemory<int, int> >::GrowVector(int)
CUtlVector<int, CUtlMemory<int, int> >::InsertMultipleBefore(int, int)
CUtlVector<IPhysicsEnvironment*, CUtlMemory<IPhysicsEnvironment*, int> >::~CUtlVector()
CUtlVector<IPhysicsObject*, CUtlMemory<IPhysicsObject*, int> >::AddToTail(IPhysicsObject* const&)
CUtlVector<IPhysicsObject*, CUtlMemory<IPhysicsObject*, int> >::~CUtlVector()
CUtlVector<IPhysicsObject*, CUtlMemory<IPhysicsObject*, int> >::InsertMultipleBefore(int, int)
CUtlVector<IPhysicsPlayerController*, CUtlMemory<IPhysicsPlayerController*, int> >::~CUtlVector()
CUtlVector<IVP_Compact_Ledgetree_Node const*, CUtlMemoryFixedGrowable<IVP_Compact_Ledgetree_Node const*, 64ul, int> >::~CUtlVector()
CUtlVector<IVP_Compact_Ledgetree_Node const*, CUtlMemoryFixedGrowable<IVP_Compact_Ledgetree_Node const*, 64ul, int> >::InsertBefore(int)
CUtlVector<IVP_Core*, CUtlMemory<IVP_Core*, int> >::~CUtlVector()
CUtlVector<IVP_Real_Object*, CUtlMemory<IVP_Real_Object*, int> >::~CUtlVector()
CUtlVector<postrestore_objectlist_t, CUtlMemory<postrestore_objectlist_t, int> >::~CUtlVector()
CUtlVector<unsigned char, CUtlMemory<unsigned char, int> >::~CUtlVector()
CUtlVector<unsigned char, CUtlMemory<unsigned char, int> >::InsertMultipleBefore(int, int)
CUtlVector<void*, CUtlMemory<void*, int> >::AddToTail(void* const&)
CUtlVector<void*, CUtlMemory<void*, int> >::~CUtlVector()
_cvar
CVehicleController
CVehicleController::CalcEngine(float, float, bool, float, bool)
CVehicleController::CalcEngineTransmission(float)
CVehicleController::CalcSteering(float, float, float, bool)
CVehicleController::CreateIVPObjects()
CVehicleController::CreateTraceData(int, vehicle_axleparams_t&)
CVehicleController::CreateWheel(int, vehicle_axleparams_t&)
CVehicleController::~CVehicleController()
CVehicleController::event_object_created(IVP_Event_Object*)
CVehicleController::event_object_deleted(IVP_Event_Object*)
CVehicleController::event_object_frozen(IVP_Event_Object*)
CVehicleController::event_object_revived(IVP_Event_Object*)
CVehicleController::GetCarSystemDebugData(vehicle_debugcarsystem_t&)
CVehicleController::GetOperatingParams()
CVehicleController::GetVehicleParams()
CVehicleController::GetVehicleParamsForChange()
CVehicleController::GetWheelContactPoint(int, Vector*, int*)
CVehicleController::GetWheelCount()
CVehicleController::GetWheel(int)
CVehicleController::InitCarSystem(CPhysicsObject*)
CVehicleController::InitCarSystemWheels(IVP_Template_Car_System&)
CVehicleController::InitFromTemplate(CPhysicsEnvironment*, void*, IPhysicsGameTrace*, vphysics_save_cvehiclecontroller_t const&)
CVehicleController::InitVehicleData(vehicleparams_t const&)
CVehicleController::IsBoosting()
CVehicleController::IsEngineDisabled()
CVehicleController::OnVehicleEnter()
CVehicleController::OnVehicleExit()
CVehicleController::SetEngineDisabled(bool)
CVehicleController::SetSpringLength(int, float)
CVehicleController::SetWheelFriction(int, float)
CVehicleController::UpdateBooster(float)
CVehicleController::UpdateEngine(vehicle_controlparams_t const&, float, float, float, bool, bool)
CVehicleController::UpdateExtraForces()
CVehicleController::Update(float, vehicle_controlparams_t&)
CVehicleController::UpdateHandbrake(vehicle_controlparams_t const&, float, bool, bool)
CVehicleController::UpdatePowerslide(vehicle_controlparams_t const&, bool, float)
CVehicleController::UpdateSkidding(bool)
CVehicleController::VehicleDataReload()
CVehicleController::WriteToTemplate(vphysics_save_cvehiclecontroller_t&)
CVoidPairHash
CVoidPairHash::~CVoidPairHash()
CVPhysicsDebugOverlay
CVPhysicsDebugOverlay::AddBoxOverlay(Vector const&, Vector const&, Vector const&, QAngle const&, int, int, int, int, float)
CVPhysicsDebugOverlay::AddEntityTextOverlay(int, int, float, int, int, int, int, char const*, ...)
CVPhysicsDebugOverlay::AddLineOverlay(Vector const&, Vector const&, int, int, int, bool, float)
CVPhysicsDebugOverlay::AddScreenTextOverlay(float, float, float, int, int, int, int, char const*)
CVPhysicsDebugOverlay::AddSweptBoxOverlay(Vector const&, Vector const&, Vector const&, Vector const&, QAngle const&, int, int, int, int, float)
CVPhysicsDebugOverlay::AddTextOverlayRGB(Vector const&, int, float, float, float, float, float, char const*, ...)
CVPhysicsDebugOverlay::AddTextOverlay(Vector const&, float, char const*, ...)
CVPhysicsDebugOverlay::AddTextOverlay(Vector const&, int, float, char const*, ...)
CVPhysicsDebugOverlay::AddTriangleOverlay(Vector const&, Vector const&, Vector const&, int, int, int, int, bool, float)
CVPhysicsParse
CVPhysicsParse::~CVPhysicsParse()
CVPhysicsParse::Finished()
CVPhysicsParse::GetCurrentBlockName()
CVPhysicsParse::NextBlock()
CVPhysicsParse::ParseCustom(void*, IVPhysicsKeyHandler*)
CVPhysicsParse::ParseFluid(fluid_t*, IVPhysicsKeyHandler*)
CVPhysicsParse::ParseRagdollConstraint(constraint_ragdollparams_t*, IVPhysicsKeyHandler*)
CVPhysicsParse::ParseSolid(solid_t*, IVPhysicsKeyHandler*)
CVPhysicsParse::ParseSurfaceTable(int*, IVPhysicsKeyHandler*)
CVPhysicsParse::ParseVehicleAxle(vehicle_axleparams_t&)
CVPhysicsParse::ParseVehicleBody(vehicle_bodyparams_t&)
CVPhysicsParse::ParseVehicleEngineBoost(vehicle_engineparams_t&)
CVPhysicsParse::ParseVehicleEngine(vehicle_engineparams_t&)
CVPhysicsParse::ParseVehicleSteering(vehicle_steeringparams_t&)
CVPhysicsParse::ParseVehicleSuspension(vehicle_suspensionparams_t&)
CVPhysicsParse::ParseVehicle(vehicleparams_t*, IVPhysicsKeyHandler*)
CVPhysicsParse::ParseVehicleWheel(vehicle_wheelparams_t&)
CVPhysicsParse::SkipBlock()
CVPhysicsVirtualMeshWriter::CreatePackedHullFromLedges(virtualmeshlist_t const&, IVP_Compact_Ledge const**, int)
CVPhysicsVirtualMeshWriter::DestroyPackedHull(virtualmeshhull_t*)
CVPhysicsVirtualMeshWriter::InitTwoSidedTriangleLege(triangleledge_t*, IVP_Compact_Poly_Point const*, int, int, int, int)
CVPhysicsVirtualMeshWriter::LedgeCanBePacked(IVP_Compact_Ledge const*, virtualmeshlist_t const&)
CVPhysicsVirtualMeshWriter::UnpackCompactLedgeFromHull(IVP_Compact_Ledge*, int, IVP_Compact_Poly_Point const*, virtualmeshhull_t const*, int, bool)
CVPhysicsVirtualMeshWriter::UnpackLedgeListFromHull(unsigned char*, virtualmeshhull_t*, IVP_Compact_Poly_Point*)
CVPhysPtrSaveRestoreOps
CVPhysPtrSaveRestoreOps::Restore(SaveRestoreFieldInfo_t const&, IRestore*)
CVPhysPtrSaveRestoreOps::Save(SaveRestoreFieldInfo_t const&, ISave*)
CVPhysPtrUtlVectorSaveRestoreOps
CVPhysPtrUtlVectorSaveRestoreOps::Restore(SaveRestoreFieldInfo_t const&, IRestore*)
CVPhysPtrUtlVectorSaveRestoreOps::Save(SaveRestoreFieldInfo_t const&, ISave*)
CVProfNode::EnterScope()
CVProfNode::ExitScope()
CVProfNode::GetSubNode(char const*, int, char const*, int)
___cxa_atexit
___cxa_begin_catch
___cxa_call_unexpected
___cxa_guard_abort
___cxa_guard_acquire
___cxa_guard_release
___cxa_pure_virtual
C;XP|
cycles of facets merged into coplanar horizon
dampening
dampFactor
damping
Damping %.2f linear, %.2f angular
__data
__DATA
Data manager 'used' memory incorrect
datamap_t* DataMapInit<compactsurfaceheader_t>(compactsurfaceheader_t*)::dataDesc
datamap_t* DataMapInit<compactsurfaceheader_t>(compactsurfaceheader_t*)::nameHolder
datamap_t* DataMapInit<physcollideheader_t>(physcollideheader_t*)::dataDesc
datamap_t* DataMapInit<physcollideheader_t>(physcollideheader_t*)::nameHolder
datamap_t* DataMapInit<vehicle_axleparams_t>(vehicle_axleparams_t*)::dataDesc
datamap_t* DataMapInit<vehicle_axleparams_t>(vehicle_axleparams_t*)::nameHolder
datamap_t* DataMapInit<vehicle_bodyparams_t>(vehicle_bodyparams_t*)::dataDesc
datamap_t* DataMapInit<vehicle_bodyparams_t>(vehicle_bodyparams_t*)::nameHolder
datamap_t* DataMapInit<vehicle_engineparams_t>(vehicle_engineparams_t*)::dataDesc
datamap_t* DataMapInit<vehicle_engineparams_t>(vehicle_engineparams_t*)::nameHolder
datamap_t* DataMapInit<vehicle_operatingparams_t>(vehicle_operatingparams_t*)
datamap_t* DataMapInit<vehicle_operatingparams_t>(vehicle_operatingparams_t*)::dataDesc
datamap_t* DataMapInit<vehicle_operatingparams_t>(vehicle_operatingparams_t*)::nameHolder
datamap_t* DataMapInit<vehicleparams_t>(vehicleparams_t*)::dataDesc
datamap_t* DataMapInit<vehicleparams_t>(vehicleparams_t*)::nameHolder
datamap_t* DataMapInit<vehicle_steeringparams_t>(vehicle_steeringparams_t*)::dataDesc
datamap_t* DataMapInit<vehicle_steeringparams_t>(vehicle_steeringparams_t*)::nameHolder
datamap_t* DataMapInit<vehicle_suspensionparams_t>(vehicle_suspensionparams_t*)::dataDesc
datamap_t* DataMapInit<vehicle_suspensionparams_t>(vehicle_suspensionparams_t*)::nameHolder
datamap_t* DataMapInit<vehicle_wheelparams_t>(vehicle_wheelparams_t*)
datamap_t* DataMapInit<vehicle_wheelparams_t>(vehicle_wheelparams_t*)::dataDesc
datamap_t* DataMapInit<vehicle_wheelparams_t>(vehicle_wheelparams_t*)::nameHolder
datamap_t* DataMapInit<vphysics_save_constraintaxislimit_t>(vphysics_save_constraintaxislimit_t*)::dataDesc
datamap_t* DataMapInit<vphysics_save_constraintaxislimit_t>(vphysics_save_constraintaxislimit_t*)::nameHolder
datamap_t* DataMapInit<vphysics_save_constraintballsocket_t>(vphysics_save_constraintballsocket_t*)::dataDesc
datamap_t* DataMapInit<vphysics_save_constraintballsocket_t>(vphysics_save_constraintballsocket_t*)::nameHolder
datamap_t* DataMapInit<vphysics_save_constraintbreakable_t>(vphysics_save_constraintbreakable_t*)::dataDesc
datamap_t* DataMapInit<vphysics_save_constraintbreakable_t>(vphysics_save_constraintbreakable_t*)::nameHolder
datamap_t* DataMapInit<vphysics_save_constraintfixed_t>(vphysics_save_constraintfixed_t*)::dataDesc
datamap_t* DataMapInit<vphysics_save_constraintfixed_t>(vphysics_save_constraintfixed_t*)::nameHolder
datamap_t* DataMapInit<vphysics_save_constrainthinge_t>(vphysics_save_constrainthinge_t*)::dataDesc
datamap_t* DataMapInit<vphysics_save_constrainthinge_t>(vphysics_save_constrainthinge_t*)::nameHolder
datamap_t* DataMapInit<vphysics_save_constraintlength_t>(vphysics_save_constraintlength_t*)::dataDesc
datamap_t* DataMapInit<vphysics_save_constraintlength_t>(vphysics_save_constraintlength_t*)::nameHolder
datamap_t* DataMapInit<vphysics_save_constraintpulley_t>(vphysics_save_constraintpulley_t*)::dataDesc
datamap_t* DataMapInit<vphysics_save_constraintpulley_t>(vphysics_save_constraintpulley_t*)::nameHolder
datamap_t* DataMapInit<vphysics_save_constraintragdoll_t>(vphysics_save_constraintragdoll_t*)::dataDesc
datamap_t* DataMapInit<vphysics_save_constraintragdoll_t>(vphysics_save_constraintragdoll_t*)::nameHolder
datamap_t* DataMapInit<vphysics_save_constraintsliding_t>(vphysics_save_constraintsliding_t*)::dataDesc
datamap_t* DataMapInit<vphysics_save_constraintsliding_t>(vphysics_save_constraintsliding_t*)::nameHolder
datamap_t* DataMapInit<vphysics_save_cphysicsconstraintgroup_t>(vphysics_save_cphysicsconstraintgroup_t*)::dataDesc
datamap_t* DataMapInit<vphysics_save_cphysicsconstraintgroup_t>(vphysics_save_cphysicsconstraintgroup_t*)::nameHolder
datamap_t* DataMapInit<vphysics_save_cphysicsconstraint_t>(vphysics_save_cphysicsconstraint_t*)::dataDesc
datamap_t* DataMapInit<vphysics_save_cphysicsconstraint_t>(vphysics_save_cphysicsconstraint_t*)::nameHolder
datamap_t* DataMapInit<vphysics_save_cphysicsobject_t>(vphysics_save_cphysicsobject_t*)::dataDesc
datamap_t* DataMapInit<vphysics_save_cphysicsobject_t>(vphysics_save_cphysicsobject_t*)::nameHolder
datamap_t* DataMapInit<vphysics_save_cphysicsspring_t>(vphysics_save_cphysicsspring_t*)::dataDesc
datamap_t* DataMapInit<vphysics_save_cphysicsspring_t>(vphysics_save_cphysicsspring_t*)::nameHolder
datamap_t* DataMapInit<vphysics_save_cshadowcontroller_t>(vphysics_save_cshadowcontroller_t*)
datamap_t* DataMapInit<vphysics_save_cshadowcontroller_t>(vphysics_save_cshadowcontroller_t*)::dataDesc
datamap_t* DataMapInit<vphysics_save_cshadowcontroller_t>(vphysics_save_cshadowcontroller_t*)::nameHolder
datamap_t* DataMapInit<vphysics_save_cvehiclecontroller_t>(vphysics_save_cvehiclecontroller_t*)::dataDesc
datamap_t* DataMapInit<vphysics_save_cvehiclecontroller_t>(vphysics_save_cvehiclecontroller_t*)::nameHolder
datamap_t* DataMapInit<vphysics_save_motioncontroller_t>(vphysics_save_motioncontroller_t*)::dataDesc
datamap_t* DataMapInit<vphysics_save_motioncontroller_t>(vphysics_save_motioncontroller_t*)::nameHolder
datamap_t* DataMapInit<vphysics_save_shadowcontrolparams_t>(vphysics_save_shadowcontrolparams_t*)::dataDesc
datamap_t* DataMapInit<vphysics_save_shadowcontrolparams_t>(vphysics_save_shadowcontrolparams_t*)::nameHolder
Debug! 
default
__DefaultRuneLocale
 degenerate
degenerate facets due to dropped neighbors
degenerate hyperplanes recomputed with gaussian elimination
Degenerate Triangle
degreesBoost
degreesFast
degreesSlow
delaunay
Delaunay triangulation by the convex hull of %double points in %double-double:
delay
 deleted
  deleted
Deleted NULL vphysics object
deleted ridges due to renamed vertices
density
DestroyFrictionSnapshot(IPhysicsFrictionSnapshot*)
DestroyPlayerController(IPhysicsPlayerController*)
DestroyVPhysicsKeyParser(IVPhysicsKeyParser*)
determinants computed (area & initial hull)
determinants not computed because vertex too low
  - determine the flat containing the points, rotate the points
_DevMsg
DevMsg(char const*, ...)
~dff.
Dffffff.
difference in max_outside at final check
Disabled
DisconnectTier1Libraries()
 distance= %4.2g
Distance-roundoff
distance tests for best merge
distance tests for centrum convexity
distance tests for checking convexity
distance tests for checking flipped facets
distance tests for checking good point
distance tests for checking simplicial convexity
distance tests for computing furthest
distance tests for facet visibility
distance tests for initial partition
distance tests for output
distance tests for partitioning
distance tests for statistics
   distance tests for these partitions
distance tests to report minimum vertex
DISTANT
do_constraint_system: Couldn'unsigned short invert rot matrix!
*** Done with convex pointsoup.
Do not use double quotes.  Option 'FO' ignored.
do signed char better, though much slower, job.  Instead of 'Qs', you can change
  %double:  %8.4g  %8.4g  difference= %4.4g
 %double->%double
%double %double 1
%double %double %double
%double %double %double 
%double %double %double %6.16g 
    %double %double real
%double %double real
# %double float%double
double_null
%double points with the same long long coordinate.
%double) %short
DoubleVal
dragAxisAreas
dragCoefficient
dragEnabled
dropped neighbors due to renamed vertices
~-;_Dt#
;{Dt&
;~Du+
DUPLICATED/MATCH
duplicated ridges in same merge cycle
duplicated ridges with flipped facets
 DUPLICATEridge
  duplicate ridges detected
 dupridge
duration
dustcloud
dustCloud
__dyld
dyld__mach_header
dyld_stub_binding_helper
__eh_frame
Either prepend the input with 1 point or use 'Hn,__int128,__int128'.  See manual.
elasticity
**empty**
empty horizon
enable
Enabled
endPosition
engine
engineRPM
ERRONEOUS
ERRONEOUS and NEIGHBORING FACETS to output
_Error
error deleting physics object
*** ERROR *** Excessive amount of children: %double
*** ERROR *** Excessive sizelevel (%double) for element
Error-roundoff
errorTolerance
?es-8R
exact, but floating-point arithmetic has roundoff errors.
existing bounds [%2.2g, %2.2g]
existing bounds [%2.2g, %2.2g] with width %2.2g
_exit
f05
F23hk_Breakable_Constraint
f3
facet
facets
facets before post merge
facets created altogether
  facets deleted because of no neighbors
    facets with added points.
Failed to restore spring enpoints
Farea
FArea-total
fastcarspeed
faststeeringrate
FCentrums
Fcoplanars
Fd-cdd-in
FD-cdd-out
feasible point: 
F(;F,
FFacets-xridge
>fff.
 fff.
,fff.
(fff.
&fff.
fff.
}Fff.
~$ffff.
<ffff.
 ffff.
&ffff.
#ffff.
ffff.
Ffff.
~&fffff.
=fffff.
>fffff.
.fffff.
@(fffff.
$fffff.
&fffff.
fffff.
 ffffff.
/ffffff.
'ffffff.
(ffffff.
#ffffff.
ffffff.
F<fffff.
_finite
Finner
First post-merge
fixed
F((knN
    - flags:
 flipped
flipped facet
flipped facets
- float%double
  %float %float %float
%float %float %float
%float %float %float %float
_floor
FlushFrameLocks()
Fmerges
FmtStrVSNPrintf truncated to %double without QUIET_TRUNCATION specified!
Fneighbors
FNeighbors-vertex
FOptions
force
forceLimit
for facets and their normals, neighbor and vertex sets
for input points and outside and coplanar sets
For post-merging
for ridges and their vertex sets
For testing vertex neighbors
for vertices and their neighbor sets
FO@uR
_Four_Fours
FourVectors::RotateManyBy(FourVectors*, unsigned int, matrix3x4_t const&)
Fouter
Fpoint-intersect
FPoint-nearest
_fprintf
.Fpt 
.Fpt!
_fputc
_fputs
_fputs$UNIX2003
FQhull
F;r |
_free
  freelists (bytes->count):
_freopen$UNIX2003
friction
frictionscale
frictionScale
from p%double to float%double
FSize
Fsummary
;F$t$
.F(t0
F t7f
\FtB9
Ftriangles
.Ftt 
  Furthest
      furthest distance= %2.2g
    - furthest distance= %2.2g
Furthest-site Delaunay triangulation by the convex hull of %double points in %double-double:
Furthest-site Voronoi vertices by the convex hull of %double points in %double-double:
FVertex-average
Fvertices
Fvoronoi
_fwrite
Fxtremes
Gall-points
gameFlags
gameIndex
gamematerial
g_BreakSet
g_BreakSetIncludingColons
__gcc_except_tab__TEXT
Gcentrums
g_CleanupSymbolTable
g_ConstraintGroupActivateList
__g_CreateCPhysicsCollisionIPhysicsCollision_reg
__g_CreateCPhysicsInterfaceIPhysics_reg
__g_CreateCPhysicsSurfacePropsIPhysicsSurfaceProps_reg
GDrop-dim
;GDu2
gearCount
gearRatio
_g_EmptyCollisionListener
GetClientDataForHkConstraint(hk_Breakable_Constraint*)
_GetCPUInformation
GetOppositeSynapseObject(IVP_Synapse_Friction*)
GetTempPolyhedron(unsigned short, unsigned short, unsigned short, unsigned short)
GetTmpObjectMatrix(IVP_Real_Object*)::coreShiftMatrix
_g_fDeferDeleteMindist
.Gfff?
Gfff.
gfffff
gfffffff.
Ginner
Gintersections
G,IVPS
global constructors keyed to a
g_MainDLLInterface
g_MaterialIndexDataOps
g_Mathlib_GammaToLinear
g_Mathlib_LinearToGamma
_g_MeshFrameLocksPool
g_MeshManager
GM@uK
Gno-planes
good facets found
good point (QGn or QG-__int128), or signed char good vertex with 'QJ' or 'Q0' (QVn).
Gouter
_g_pCurrentMindist
_g_pCVar
_g_PhysicsCollision
_g_PhysicsUnits
_g_pMemAlloc
_g_pMeshFrameLocks
Gpoints
g_PostRestoreObjectList
_g_pProcessUtils
g_print_function
gravityEnabled
greater than %2.2g, the maximum roundoff error.
Gridges
;G short&
_g_SIMD_ComponentMask
_g_SurfaceDatabase
GT;GL}unsigned int
Gtransparent
guard variable for CPhysicsEnvironment::Simulate(float)::autoMutex__
guard variable for CUtlRBTree<CPhysicsListenerCollision::corepair_t, unsigned short, bool (*)(CPhysicsListenerCollision::corepair_t const&, CPhysicsListenerCollision::corepair_t const&), CUtlMemory<UtlRBTreeNode_t<CPhysicsListenerCollision::corepair_t, unsigned short>, unsigned short> >::Links(unsigned short) const::s_Sentinel
guard variable for CUtlRBTree<CUtlMap<void*, void*, unsigned short>::Node_t, unsigned short, CUtlMap<void*, void*, unsigned short>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<void*, void*, unsigned short>::Node_t, unsigned short>, unsigned short> >::Links(unsigned short) const::s_Sentinel
guard variable for CUtlRBTree<CUtlSymbolTable::CStringPoolIndex, unsigned short, CUtlSymbolTable::CLess, CUtlMemory<UtlRBTreeNode_t<CUtlSymbolTable::CStringPoolIndex, unsigned short>, unsigned short> >::Links(unsigned short) const::s_Sentinel
guard variable for datamap_t* DataMapInit<compactsurfaceheader_t>(compactsurfaceheader_t*)::nameHolder
guard variable for datamap_t* DataMapInit<physcollideheader_t>(physcollideheader_t*)::nameHolder
guard variable for datamap_t* DataMapInit<vehicle_axleparams_t>(vehicle_axleparams_t*)::nameHolder
guard variable for datamap_t* DataMapInit<vehicle_bodyparams_t>(vehicle_bodyparams_t*)::nameHolder
guard variable for datamap_t* DataMapInit<vehicle_engineparams_t>(vehicle_engineparams_t*)::nameHolder
guard variable for datamap_t* DataMapInit<vehicle_operatingparams_t>(vehicle_operatingparams_t*)::dataDesc
guard variable for datamap_t* DataMapInit<vehicle_operatingparams_t>(vehicle_operatingparams_t*)::nameHolder
guard variable for datamap_t* DataMapInit<vehicleparams_t>(vehicleparams_t*)::nameHolder
guard variable for datamap_t* DataMapInit<vehicle_steeringparams_t>(vehicle_steeringparams_t*)::nameHolder
guard variable for datamap_t* DataMapInit<vehicle_suspensionparams_t>(vehicle_suspensionparams_t*)::nameHolder
guard variable for datamap_t* DataMapInit<vehicle_wheelparams_t>(vehicle_wheelparams_t*)::dataDesc
guard variable for datamap_t* DataMapInit<vehicle_wheelparams_t>(vehicle_wheelparams_t*)::nameHolder
guard variable for datamap_t* DataMapInit<vphysics_save_constraintaxislimit_t>(vphysics_save_constraintaxislimit_t*)::nameHolder
guard variable for datamap_t* DataMapInit<vphysics_save_constraintballsocket_t>(vphysics_save_constraintballsocket_t*)::nameHolder
guard variable for datamap_t* DataMapInit<vphysics_save_constraintbreakable_t>(vphysics_save_constraintbreakable_t*)::nameHolder
guard variable for datamap_t* DataMapInit<vphysics_save_constraintfixed_t>(vphysics_save_constraintfixed_t*)::nameHolder
guard variable for datamap_t* DataMapInit<vphysics_save_constrainthinge_t>(vphysics_save_constrainthinge_t*)::nameHolder
guard variable for datamap_t* DataMapInit<vphysics_save_constraintlength_t>(vphysics_save_constraintlength_t*)::nameHolder
guard variable for datamap_t* DataMapInit<vphysics_save_constraintpulley_t>(vphysics_save_constraintpulley_t*)::nameHolder
guard variable for datamap_t* DataMapInit<vphysics_save_constraintragdoll_t>(vphysics_save_constraintragdoll_t*)::nameHolder
guard variable for datamap_t* DataMapInit<vphysics_save_constraintsliding_t>(vphysics_save_constraintsliding_t*)::nameHolder
guard variable for datamap_t* DataMapInit<vphysics_save_cphysicsconstraintgroup_t>(vphysics_save_cphysicsconstraintgroup_t*)::nameHolder
guard variable for datamap_t* DataMapInit<vphysics_save_cphysicsconstraint_t>(vphysics_save_cphysicsconstraint_t*)::nameHolder
guard variable for datamap_t* DataMapInit<vphysics_save_cphysicsobject_t>(vphysics_save_cphysicsobject_t*)::nameHolder
guard variable for datamap_t* DataMapInit<vphysics_save_cphysicsspring_t>(vphysics_save_cphysicsspring_t*)::nameHolder
guard variable for datamap_t* DataMapInit<vphysics_save_cshadowcontroller_t>(vphysics_save_cshadowcontroller_t*)::dataDesc
guard variable for datamap_t* DataMapInit<vphysics_save_cshadowcontroller_t>(vphysics_save_cshadowcontroller_t*)::nameHolder
guard variable for datamap_t* DataMapInit<vphysics_save_cvehiclecontroller_t>(vphysics_save_cvehiclecontroller_t*)::nameHolder
guard variable for datamap_t* DataMapInit<vphysics_save_motioncontroller_t>(vphysics_save_motioncontroller_t*)::nameHolder
guard variable for datamap_t* DataMapInit<vphysics_save_shadowcontrolparams_t>(vphysics_save_shadowcontrolparams_t*)::nameHolder
guard variable for GetTmpObjectMatrix(IVP_Real_Object*)::coreShiftMatrix
guard variable for hk_Memory::get_instance()::s_memory_instance
guard variable for IVP_Material_Manager::get_material_by_index(IVP_Real_Object*, IVP_U_Point const*, int)::simple
Gvertices
_g_VisitHashPool
_g_VPhysPtrSaveRestoreOps
_g_VPhysPtrUtlVectorSaveRestoreOps
_g_VProfCurrentProfile
g_xneg
g_xpos
.Gxs	
.GxvG
___gxx_personality_v0
g_yneg
g_ypos
g_zneg
g_zpos
     halfspace: 
Halfspace
Halfspace-about
Halfspace intersection by the convex hull of %double points in %double-double:
halfspace intersection ('Hn,__int128,__int128').
hash %double float%double 
hasShadowController
hasTouchedDynamic
Hfff.
H,;H(
hinge
hingeAxis
Hinged on %short axis
hk_Array_Base::grow_mem(int)
hk_Ball_Socket_Constraint
hk_Ball_Socket_Constraint::get_constraint_dof()
hk_Ball_Socket_Constraint::get_constraint_type()
hk_Ball_Socket_Constraint::get_vmq_storage_size()
hk_Ball_Socket_Constraint::~hk_Ball_Socket_Constraint()
hk_Ball_Socket_Constraint::hk_Ball_Socket_Constraint(hk_Environment*, hk_Ball_Socket_BP const*, hk_Rigid_Body*, hk_Rigid_Body*)
hk_Ball_Socket_Constraint::hk_Ball_Socket_Constraint(hk_Local_Constraint_System*, hk_Ball_Socket_BP const*, hk_Rigid_Body*, hk_Rigid_Body*)
hk_Ball_Socket_Constraint::init_constraint(void const*)
hk_Ball_Socket_Constraint::setup_and_step_constraint(hk_PSI_Info&, void*, float, float)
hk_Ball_Socket_Constraint::step_constraint(hk_PSI_Info&, void*, float, float)
hk_Ball_Socket_Constraint::write_to_blueprint(hk_Ball_Socket_BP*)
hk_Breakable_Constraint::get_constraint_dof()
hk_Breakable_Constraint::get_constraint_type()
hk_Breakable_Constraint::get_vmq_storage_size()
hk_Breakable_Constraint::~hk_Breakable_Constraint()
hk_Breakable_Constraint::hk_Breakable_Constraint(hk_Local_Constraint_System*, hk_Breakable_Constraint_BP const*)
hk_Breakable_Constraint::init_constraint(void const*)
hk_Breakable_Constraint::setup_and_step_constraint(hk_PSI_Info&, void*, float, float)
hk_Breakable_Constraint::step_constraint(hk_PSI_Info&, void*, float, float)
hk_Breakable_Constraint::write_to_blueprint(hk_Breakable_Constraint_BP*)
hk_Constraint
hk_Constraint::get_constraint_dof()
hk_Constraint::get_constraint_type()
hk_Constraint::~hk_Constraint()
hk_Constraint::hk_Constraint(hk_Local_Constraint_System*, hk_Rigid_Body*, hk_Rigid_Body*, IVP_CONTROLLER_PRIORITY, int)
hk_Constraint_Limit_Util::do_angular_limit(hk_PSI_Info&, hk_Rigid_Body*, hk_Vector3&, float, hk_Rigid_Body*, hk_Constraint_Limit&, float, float)
hk_Constraint_Limit_Util::do_angular_plane_limit(hk_PSI_Info&, hk_Rigid_Body*, hk_Rigid_Body*, hk_Vector3&, hk_Vector3&, float, hk_Constraint_Limit&, float, float)
hk_Constraint_Limit_Util::do_linear_limit(hk_PSI_Info&, hk_Rigid_Body*, hk_Rigid_Body*, hk_Vector3&, hk_Vector3&, hk_Vector3&, hk_Constraint_Limit&, float, float)
hk_Dense_Matrix_Util::invert_3x3_symmetric(hk_Dense_Matrix&, float)
hk_Dense_Matrix_Util::invert_5x5(hk_Fixed_Dense_Matrix<5>&, float)
hk_Dense_Matrix_Util::invert_6x6(hk_Fixed_Dense_Matrix<6>&, float)
hk_Dense_Matrix_Util::mult(hk_Dense_Matrix const&, hk_Dense_Vector const&, hk_Dense_Vector&)
hk_Fixed_Constraint
hk_Fixed_Constraint::get_constraint_dof()
hk_Fixed_Constraint::get_constraint_type()
hk_Fixed_Constraint::get_vmq_storage_size()
hk_Fixed_Constraint::~hk_Fixed_Constraint()
hk_Fixed_Constraint::hk_Fixed_Constraint(hk_Environment*, hk_Fixed_BP const*, hk_Rigid_Body*, hk_Rigid_Body*)
hk_Fixed_Constraint::hk_Fixed_Constraint(hk_Local_Constraint_System*, hk_Fixed_BP const*, hk_Rigid_Body*, hk_Rigid_Body*)
hk_Fixed_Constraint::init_constraint(void const*)
hk_Fixed_Constraint::setup_and_step_constraint(hk_PSI_Info&, void*, float, float)
hk_Fixed_Constraint::step_constraint(hk_PSI_Info&, void*, float, float)
hk_Fixed_Constraint::write_to_blueprint(hk_Fixed_BP*)
hk_Hinge_BP_Builder::set_angular_limits(float, float)
hk_Hinge_BP_Builder::set_angular_motor(float, float)
hk_Hinge_BP_Builder::set_axis_perp_os(int, hk_Vector3 const&)
hk_Hinge_BP_Builder::set_axis_ws(hk_Rigid_Body*, hk_Rigid_Body*, hk_Vector3 const&)
hk_Hinge_BP_Builder::set_position_os(int, hk_Vector3 const&)
hk_Hinge_BP_Builder::set_tau(float)
hk_Hinge_Constraint
hk_Hinge_Constraint::get_constraint_dof()
hk_Hinge_Constraint::get_constraint_type()
hk_Hinge_Constraint::get_vmq_storage_size()
hk_Hinge_Constraint::~hk_Hinge_Constraint()
hk_Hinge_Constraint::hk_Hinge_Constraint(hk_Environment*, hk_Hinge_BP const*, hk_Rigid_Body*, hk_Rigid_Body*)
hk_Hinge_Constraint::hk_Hinge_Constraint(hk_Local_Constraint_System*, hk_Hinge_BP const*, hk_Rigid_Body*, hk_Rigid_Body*)
hk_Hinge_Constraint::init_constraint(void const*)
hk_Hinge_Constraint::init_hinge_constraint(hk_Hinge_BP const*)
hk_Hinge_Constraint::set_motor(float, float)
hk_Hinge_Constraint::setup_and_step_constraint(hk_PSI_Info&, void*, float, float)
hk_Hinge_Constraint::step_constraint(hk_PSI_Info&, void*, float, float)
hk_Hinge_Constraint::write_to_blueprint(hk_Hinge_BP*)
hk_Link_EF
hk_Link_EF::anchor_will_be_deleted_event(IVP_Anchor*)
hk_Link_EF::core_is_going_to_be_deleted_event(IVP_Core*)
hk_Link_EF::do_simulation_controller(IVP_Event_Sim*, IVP_U_Vector<IVP_Core>*)
hk_Link_EF::get_associated_controlled_cores()
hk_Link_EF::get_controller_name()
hk_Link_EF::get_controller_priority()
hk_Link_EF::~hk_Link_EF()
hk_Local_Constraint_System
hk_Local_Constraint_System::activate()
hk_Local_Constraint_System::add_constraint(hk_Constraint*, int)
hk_Local_Constraint_System::apply_effector_PSI(hk_PSI_Info&, hk_Array<hk_Rigid_Body*>*)
hk_Local_Constraint_System::constraint_deletion_event(hk_Constraint*)
hk_Local_Constraint_System::core_is_going_to_be_deleted_event(IVP_Core*)
hk_Local_Constraint_System::deactivate()
hk_Local_Constraint_System::entity_deletion_event(hk_Rigid_Body*)
hk_Local_Constraint_System::get_constraints_in_system(hk_Array<hk_Constraint*>&)
hk_Local_Constraint_System::get_effector_priority()
hk_Local_Constraint_System::~hk_Local_Constraint_System()
hk_Local_Constraint_System::hk_Local_Constraint_System(hk_Environment*, hk_Local_Constraint_System_BP*)
hk_Local_Constraint_System::report_square_error(float)
hk_Local_Constraint_System::solve_penetration(IVP_Real_Object*, IVP_Real_Object*)
hk_Local_Constraint_System::sort_constraints()
hk_Local_Constraint_System::write_to_blueprint(hk_Local_Constraint_System_BP*)
hk_Math::hk_random_seed
hk_Math::srand01(unsigned int)
hk_Matrix3::rotate(int, float)
hk_Matrix3::set_mul3(hk_Matrix3 const&, hk_Matrix3 const&)
hk_Matrix3::set_mul3_inv(hk_Rotation const&, hk_Matrix3 const&)
hk_Memory::allocate(int, hk_MEMORY_CLASS)
hk_Memory::allocate_real(int)
hk_Memory::deallocate(void*, int, hk_MEMORY_CLASS)
hk_Memory::get_instance()
hk_Memory::get_instance()::s_memory_instance
hk_Prismatic_Constraint
hk_Prismatic_Constraint::get_constraint_dof()
hk_Prismatic_Constraint::get_constraint_type()
hk_Prismatic_Constraint::get_vmq_storage_size()
hk_Prismatic_Constraint::~hk_Prismatic_Constraint()
hk_Prismatic_Constraint::hk_Prismatic_Constraint(hk_Environment*, hk_Prismatic_BP const*, hk_Rigid_Body*, hk_Rigid_Body*)
hk_Prismatic_Constraint::hk_Prismatic_Constraint(hk_Local_Constraint_System*, hk_Prismatic_BP const*, hk_Rigid_Body*, hk_Rigid_Body*)
hk_Prismatic_Constraint::init_constraint(void const*)
hk_Prismatic_Constraint::init_prismatic_constraint(hk_Prismatic_BP const*, hk_Local_Constraint_System*)
hk_Prismatic_Constraint::reset_linear_limit()
hk_Prismatic_Constraint::set_motor(float, float)
hk_Prismatic_Constraint::setup_and_step_constraint(hk_PSI_Info&, void*, float, float)
hk_Prismatic_Constraint::step_constraint(hk_PSI_Info&, void*, float, float)
hk_Prismatic_Constraint::write_to_blueprint(hk_Prismatic_BP*)
!hk_Pulley_Constraint
hk_Pulley_Constraint::get_constraint_dof()
hk_Pulley_Constraint::get_constraint_type()
hk_Pulley_Constraint::get_vmq_storage_size()
hk_Pulley_Constraint::~hk_Pulley_Constraint()
hk_Pulley_Constraint::hk_Pulley_Constraint(hk_Environment*, hk_Pulley_BP const*, hk_Rigid_Body*, hk_Rigid_Body*)
hk_Pulley_Constraint::hk_Pulley_Constraint(hk_Local_Constraint_System*, hk_Pulley_BP const*, hk_Rigid_Body*, hk_Rigid_Body*)
hk_Pulley_Constraint::init_constraint(void const*)
hk_Pulley_Constraint::setup_and_step_constraint(hk_PSI_Info&, void*, float, float)
hk_Pulley_Constraint::step_constraint(hk_PSI_Info&, void*, float, float)
hk_Pulley_Constraint::write_to_blueprint(hk_Pulley_BP*)
hk_Quaternion::set(hk_Rotation const&)
hk_Quaternion::set(hk_Rotation const&)::next
hk_Ragdoll_Constraint
hk_Ragdoll_Constraint_BP_Builder::initialize_from_limited_ball_socket_bp(hk_Limited_Ball_Socket_BP const*, hk_Rigid_Body*, hk_Rigid_Body*)
hk_Ragdoll_Constraint::get_constraint_dof()
hk_Ragdoll_Constraint::get_constraint_type()
hk_Ragdoll_Constraint::get_vmq_storage_size()
hk_Ragdoll_Constraint::~hk_Ragdoll_Constraint()
hk_Ragdoll_Constraint::hk_Ragdoll_Constraint(hk_Environment*, hk_Ragdoll_Constraint_BP const*, hk_Rigid_Body*, hk_Rigid_Body*)
hk_Ragdoll_Constraint::hk_Ragdoll_Constraint(hk_Local_Constraint_System*, hk_Ragdoll_Constraint_BP const*, hk_Rigid_Body*, hk_Rigid_Body*)
hk_Ragdoll_Constraint::init_constraint(void const*)
hk_Ragdoll_Constraint::init_ragdoll_constraint(hk_Ragdoll_Constraint_BP const*, hk_Local_Constraint_System*)
hk_Ragdoll_Constraint::setup_and_step_constraint(hk_PSI_Info&, void*, float, float)
hk_Ragdoll_Constraint::step_constraint(hk_PSI_Info&, void*, float, float)
hk_Ragdoll_Constraint::update_friction(float)
hk_Ragdoll_Constraint::update_transforms(hk_Transform const&, hk_Transform const&)
hk_Ragdoll_Constraint::write_to_blueprint(hk_Ragdoll_Constraint_BP*)
hk_Rigid_Body_Binary_EF
hk_Rigid_Body_Binary_EF::get_effected_entities(hk_Array<hk_Rigid_Body*>&)
hk_Rigid_Body_Binary_EF::hk_Rigid_Body_Binary_EF(hk_Environment*, hk_Rigid_Body*, hk_Rigid_Body*, IVP_CONTROLLER_PRIORITY)
hk_Rigid_Body_Core::add_to_mass_matrix_inv(hk_Core_VMQ_Input&, hk_Dense_Matrix&, float*)
hk_Rigid_Body_Core::apply_impulses(hk_Core_VMQ_Input&, float const*)
hk_Rotation::set(hk_Quaternion const&)
hk_Stiff_Spring_Constraint
hk_Stiff_Spring_Constraint::get_constraint_dof()
hk_Stiff_Spring_Constraint::get_constraint_type()
hk_Stiff_Spring_Constraint::get_vmq_storage_size()
hk_Stiff_Spring_Constraint::~hk_Stiff_Spring_Constraint()
hk_Stiff_Spring_Constraint::hk_Stiff_Spring_Constraint(hk_Environment*, hk_Stiff_Spring_BP const*, hk_Rigid_Body*, hk_Rigid_Body*)
hk_Stiff_Spring_Constraint::hk_Stiff_Spring_Constraint(hk_Local_Constraint_System*, hk_Stiff_Spring_BP const*, hk_Rigid_Body*, hk_Rigid_Body*)
hk_Stiff_Spring_Constraint::init_constraint(void const*)
hk_Stiff_Spring_Constraint::setup_and_step_constraint(hk_PSI_Info&, void*, float, float)
hk_Stiff_Spring_Constraint::step_constraint(hk_PSI_Info&, void*, float, float)
hk_Stiff_Spring_Constraint::write_to_blueprint(hk_Stiff_Spring_BP*)
hk_Transform::set_identity_transform()
hk_Vector3::set_rotated_dir(hk_Rotation const&, hk_Vector3 const&)
hk_Vector3::set_rotated_inv_dir(hk_Rotation const&, hk_Vector3 const&)
hk_Vector3::set_transformed_pos(hk_Transform const&, hk_Vector3 const&)
hk_Vector3_Util::perp_vec(hk_Vector3 const&)
horizon
horizon facets merged into new facets
horsepower
IAppSystem
ICollisionQuery
IConCommandBaseAccessor
IConVar
IConvexInfo
IDeleteQueueItem
Iffff.
If the input is lower dimensional:
If the input should be full dimensional, you have several options that
If you must use 'Q0',
If you need triangular output:
If you use 'Q0', the output may include
impacthard
impactHardThreshold
impactsoft
incidence
index
inertia
Inertia: %.2f, %.2f, %.2f (inv %.3f, %.3f, %.3f)
initial facet is coplanar with interior point
initial hull), 'QbB' (scale to unit box), or 'Qbb' (scale last coordinate)
InitializeCharacterSets()::s_CharacterSetInitialized
initial non-convex ridges for post merging
InitLeafmap(IVP_Compact_Ledge*, leafmap_t*)
InitObjectTemplate(IVP_Template_Real_Object&, int, objectparams_t*, bool)
input has same long long coordinate
  Input joggled by: %2.2g
in Qhull" (qh-impre.htm).
insert_active_float: name '%short' already exists in name_hash!
insert_active_float: tried to insert active_IVP_FLOAT without name!
insert_active_int: name '%short' already exists in name_hash!
insert_active_int: tried to insert active_int without name!
inside points
  inside points kept with signed char facet
  inside points that were coplanar with signed char facet
{INST geom { : centrum } transform { # float%double
{INST geom { define centrum CQUAD  # float%double
INST geom {define vsphere OFF
InterfaceReg::InterfaceReg(void* (*)(), char const*)
InterfaceReg::s_pInterfaceRegs
interior
# intersect float%double float%double
intersections, and OFF file format.
intersections failed to find signed char redundant vertex
intersections found redundant vertices
    into signed char coordinate plane, and delete the other coordinates.
IntVal
_InvRSquared(float const*)
IPhysCollide
IPhysics
IPhysicsCollision
IPhysicsCollisionData
IPhysicsCollisionEvent
IPhysicsCollisionSet
IPhysicsConstraint
IPhysicsConstraintGroup
IPhysicsEnvironment
IPhysicsFluidController
IPhysicsFrictionSnapshot
IPhysicsMotionController
IPhysicsObject
IPhysicsObjectPairHash
IPhysicsPlayerController
IPhysicsShadowController
IPhysicsSpring
IPhysicsSurfaceProps
IPhysicsSurfacePropsInternal
IPhysicsVehicleController
ipion 99/07/10
isActive
isAsleep
isAutoTransmission
ISaveRestoreOps
  ischeckmax %double ispartition %double isfindfacet %double testhorizon %double
IsExternalConstraint(IVP_Controller*, void*)
isPhysicallyControlled
   Is qh_RANDOMmax (%float) wrong?
isRigid
isSkidAllowed
isStatic
isTorqueBoosting
isTrigger
ITraceObject
IVP_3D_Solver
IVP_3D_Solver::calc_nullstelle(IVP_Time, IVP_Time, double, double, double, IVP_Real_Object*, IVP_Real_Object*)
IVP_3D_Solver_DISTANCE_OF_TWO_POINTS
IVP_3D_Solver_DISTANCE_OF_TWO_POINTS::get_value(IVP_U_Matrix*, IVP_U_Matrix*)
IVP_3D_Solver::find_first_t_for_value_coll(double, double, IVP_Time, IVP_Time, IVP_U_Matrix_Cache*, IVP_U_Matrix_Cache*, double*, IVP_Time*)
IVP_3D_Solver::find_first_t_for_value_max_dev(double, IVP_Time, IVP_Time, int, IVP_U_Matrix_Cache*, IVP_U_Matrix_Cache*, double*, IVP_Time*)
IVP_3D_Solver_KK_COLL
IVP_3D_Solver_KK_COLL::get_value(IVP_U_Matrix*, IVP_U_Matrix*)
IVP_3D_Solver_KK_PARALLEL
IVP_3D_Solver_KK_PARALLEL::get_value(IVP_U_Matrix*, IVP_U_Matrix*)
IVP_3D_Solver_PF_COLL
IVP_3D_Solver_PF_COLL::get_value(IVP_U_Matrix*, IVP_U_Matrix*)
IVP_3D_Solver_PF_NPF
IVP_3D_Solver_PF_NPF::get_value(IVP_U_Matrix*, IVP_U_Matrix*)
IVP_3D_Solver_PK_COLL
IVP_3D_Solver_PK_COLL::get_value(IVP_U_Matrix*, IVP_U_Matrix*)
IVP_3D_Solver_PK_KK
IVP_3D_Solver_PK_KK::get_value(IVP_U_Matrix*, IVP_U_Matrix*)
IVP_3D_Solver_S_VALS
IVP_3D_Solver_S_VALS::get_value(IVP_U_Matrix*, IVP_U_Matrix*)
IVP_3D_Solver_VEC_PARALLEL_AREA
IVP_3D_Solver_VEC_PARALLEL_AREA::get_value(IVP_U_Matrix*, IVP_U_Matrix*)
IVP_Active_Value_Hash
IVP_Active_Value_Hash::compare(void*, void*) const
IVP_Active_Value_Hash::~IVP_Active_Value_Hash()
IVP_Actuator
IVP_Actuator::anchor_will_be_deleted_event(IVP_Anchor*)
IVP_Actuator::core_is_going_to_be_deleted_event(IVP_Core*)
IVP_Actuator_Force
IVP_Actuator_Force_Active
IVP_Actuator_Force_Active::active_float_changed(IVP_U_Active_Float*)
IVP_Actuator_Force_Active::~IVP_Actuator_Force_Active()
IVP_Actuator_Force_Active::IVP_Actuator_Force_Active(IVP_Environment*, IVP_Template_Force*)
IVP_Actuator_Force::do_simulation_controller(IVP_Event_Sim*, IVP_U_Vector<IVP_Core>*)
IVP_Actuator_Force::get_controller_name()
IVP_Actuator_Force::~IVP_Actuator_Force()
IVP_Actuator_Force::IVP_Actuator_Force(IVP_Environment*, IVP_Template_Force*)
IVP_Actuator_Force::set_force(double)
IVP_Actuator_Four_Point
IVP_Actuator_Four_Point::~IVP_Actuator_Four_Point()
IVP_Actuator_Four_Point::IVP_Actuator_Four_Point(IVP_Environment*, IVP_Template_Four_Point*, IVP_ACTUATOR_TYPE)
IVP_Actuator::get_associated_controlled_cores()
IVP_Actuator::get_controller_name()
IVP_Actuator::get_controller_priority()
IVP_Actuator::~IVP_Actuator()
IVP_Actuator_Spring
IVP_Actuator_Spring_Active
IVP_Actuator_Spring_Active::active_float_changed(IVP_U_Active_Float*)
IVP_Actuator_Spring_Active::~IVP_Actuator_Spring_Active()
IVP_Actuator_Spring_Active::IVP_Actuator_Spring_Active(IVP_Environment*, IVP_Template_Spring*)
IVP_Actuator_Spring::do_simulation_controller(IVP_Event_Sim*, IVP_U_Vector<IVP_Core>*)
IVP_Actuator_Spring::get_controller_name()
IVP_Actuator_Spring::~IVP_Actuator_Spring()
IVP_Actuator_Spring::IVP_Actuator_Spring(IVP_Environment*, IVP_Template_Spring*, IVP_ACTUATOR_TYPE)
IVP_Actuator_Spring::set_constant(double)
IVP_Actuator_Spring::set_damp(double)
IVP_Actuator_Spring::set_len(double)
IVP_Actuator_Stabilizer
IVP_Actuator_Stabilizer::do_simulation_controller(IVP_Event_Sim*, IVP_U_Vector<IVP_Core>*)
IVP_Actuator_Stabilizer::get_controller_name()
IVP_Actuator_Stabilizer::~IVP_Actuator_Stabilizer()
IVP_Actuator_Stabilizer::IVP_Actuator_Stabilizer(IVP_Environment*, IVP_Template_Stabilizer*)
IVP_Actuator_Stabilizer::set_stabi_constant(double)
IVP_Actuator_Suspension
IVP_Actuator_Suspension::do_simulation_controller(IVP_Event_Sim*, IVP_U_Vector<IVP_Core>*)
IVP_Actuator_Suspension::get_controller_name()
IVP_Actuator_Suspension::~IVP_Actuator_Suspension()
IVP_Actuator_Suspension::IVP_Actuator_Suspension(IVP_Environment*, IVP_Template_Suspension*)
IVP_Actuator_Suspension::set_max_body_force(float)
IVP_Actuator_Suspension::set_spring_damp_compression(float)
IVP_Actuator_Torque
IVP_Actuator_Torque_Active
IVP_Actuator_Torque_Active::active_float_changed(IVP_U_Active_Float*)
IVP_Actuator_Torque_Active::~IVP_Actuator_Torque_Active()
IVP_Actuator_Torque_Active::IVP_Actuator_Torque_Active(IVP_Environment*, IVP_Template_Torque*)
IVP_Actuator_Torque::do_simulation_controller(IVP_Event_Sim*, IVP_U_Vector<IVP_Core>*)
IVP_Actuator_Torque::get_controller_name()
IVP_Actuator_Torque::~IVP_Actuator_Torque()
IVP_Actuator_Torque::IVP_Actuator_Torque(IVP_Environment*, IVP_Template_Torque*)
IVP_Actuator_Torque::set_torque(double)
IVP_Actuator_Two_Point
IVP_Actuator_Two_Point::ensure_actuator_in_simulation()
IVP_Actuator_Two_Point::~IVP_Actuator_Two_Point()
IVP_Actuator_Two_Point::IVP_Actuator_Two_Point(IVP_Environment*, IVP_Template_Two_Point*, IVP_ACTUATOR_TYPE)
IVP_Anchor::init_anchor(IVP_Actuator*, IVP_Template_Anchor*)
IVP_Anchor::object_is_going_to_be_deleted_event(IVP_Real_Object*)
IVP_Anomaly_Limits
IVP_Anomaly_Limits::environment_will_be_deleted(IVP_Environment*)
IVP_Anomaly_Limits::~IVP_Anomaly_Limits()
IVP_Anomaly_Limits::IVP_Anomaly_Limits(IVP_BOOL)
IVP_Anomaly_Manager
IVP_Anomaly_Manager::environment_will_be_deleted(IVP_Environment*)
IVP_Anomaly_Manager::get_push_speed_penetration(IVP_Real_Object*, IVP_Real_Object*)
IVP_Anomaly_Manager::inter_penetration(IVP_Mindist*, IVP_Real_Object*, IVP_Real_Object*, double)
IVP_Anomaly_Manager::~IVP_Anomaly_Manager()
IVP_Anomaly_Manager::IVP_Anomaly_Manager(IVP_BOOL)
IVP_Anomaly_Manager::max_angular_velocity_exceeded(IVP_Anomaly_Limits*, IVP_Core*, IVP_U_Float_Point*)
IVP_Anomaly_Manager::max_collision_checks_exceeded(int)
IVP_Anomaly_Manager::max_collisions_exceeded_check_freezing(IVP_Anomaly_Limits*, IVP_Core*)
IVP_Anomaly_Manager::max_contacts_exceeded_check_freezing(IVP_Core**, int)
IVP_Anomaly_Manager::max_velocity_exceeded(IVP_Anomaly_Limits*, IVP_Core*, IVP_U_Float_Point*)
IVP_Anomaly_Manager::solve_inter_penetration_simple(IVP_Real_Object*, IVP_Real_Object*, double)
IVP_Application_Environment::IVP_Application_Environment()
IVP_Attacher_To_Cores_Buoyancy
IVP_Attacher_To_Cores_Buoyancy::get_buoyancy_surface(IVP_Real_Object*)
IVP_Attacher_To_Cores_Buoyancy::get_parameters_per_core(IVP_Core*)
IVP_Attacher_To_Cores_Buoyancy::~IVP_Attacher_To_Cores_Buoyancy()
IVP_Attacher_To_Cores_Buoyancy::IVP_Attacher_To_Cores_Buoyancy(IVP_Template_Buoyancy&, IVP_U_Set_Active<IVP_Core>*, IVP_Liquid_Surface_Descriptor*)
IVP_Attacher_To_Cores<IVP_Controller_Buoyancy>
IVP_Attacher_To_Cores<IVP_Controller_Buoyancy>::element_added(IVP_U_Set_Active<IVP_Core>*, IVP_Core*)
IVP_Attacher_To_Cores<IVP_Controller_Buoyancy>::element_removed(IVP_U_Set_Active<IVP_Core>*, IVP_Core*)
IVP_Attacher_To_Cores<IVP_Controller_Buoyancy>::~IVP_Attacher_To_Cores()
IVP_Attacher_To_Cores<IVP_Controller_Buoyancy>::IVP_Attacher_To_Cores(IVP_U_Set_Active<IVP_Core>*)
IVP_Attacher_To_Cores<IVP_Controller_Buoyancy>::pset_is_going_to_be_deleted(IVP_U_Set_Active<IVP_Core>*)
IVP_Ball
IVP_Ball::~IVP_Ball()
IVP_Ball::IVP_Ball(IVP_Cluster*, IVP_Template_Ball const*, IVP_Template_Real_Object const*, IVP_U_Quat const*, IVP_U_Point const*)
IVP_BetterDebugmanager
IVP_BetterDebugmanager::dprint(IVP_DEBUG_CLASS, char const*, ...)
IVP_BetterDebugmanager::is_debug_enabled(IVP_DEBUG_CLASS)
IVP_BetterDebugmanager::~IVP_BetterDebugmanager()
IVP_BetterDebugmanager::output_function(IVP_DEBUG_CLASS, char const*)
IVP_BetterStatisticsmanager::~IVP_BetterStatisticsmanager()
IVP_BetterStatisticsmanager::IVP_BetterStatisticsmanager()
IVP_Buoyancy_Solver::compute_buoyancy_values_for_one_ball(int const&, float const&, float const&, IVP_U_Float_Hesse const*, IVP_U_Float_Point const*)
IVP_Buoyancy_Solver::compute_dampening_values_for_one_ball(int const&, float const&, float const&, IVP_U_Float_Point const*, IVP_U_Float_Point const*, IVP_U_Float_Hesse const*, IVP_U_Float_Hesse const*, IVP_U_Float_Point const*, IVP_U_Float_Point const*)
IVP_Buoyancy_Solver::compute_disection_points_with_ball(IVP_U_Float_Hesse const*, IVP_U_Float_Hesse const*, IVP_U_Float_Point const*, float const&, IVP_U_Float_Point*, IVP_U_Float_Point*)
IVP_Buoyancy_Solver::compute_forces(IVP_U_Float_Point const*, IVP_U_Float_Hesse const*, IVP_Real_Object*)
IVP_Buoyancy_Solver::compute_rotation_and_translation_values_for_one_triangle(IVP_Real_Object*, IVP_Compact_Triangle const*, IVP_U_Float_Point const**, IVP_Compact_Ledge const*, float const*, int const&, int const&, int const&)
IVP_Buoyancy_Solver::compute_values_for_one_ball(IVP_Real_Object const*, IVP_U_Float_Hesse const*, IVP_U_Float_Point const*)
IVP_Buoyancy_Solver::compute_values_for_one_polygon(IVP_Real_Object*, IVP_U_Float_Hesse const*)
IVP_Buoyancy_Solver::compute_values_for_one_triangle(IVP_Real_Object*, IVP_Compact_Triangle const*, IVP_U_Float_Hesse const*, IVP_U_Float_Point const*, IVP_Compact_Ledge const*)
IVP_Buoyancy_Solver::compute_volumes_and_centers_for_one_pyramid(IVP_Real_Object*, IVP_U_Float_Point const**, float const*, int const&, int const&, int const&, IVP_U_Float_Point const*)
IVP_Buoyancy_Solver::IVP_Buoyancy_Solver(IVP_Core*, IVP_Controller_Buoyancy*, IVP_Template_Buoyancy const*, IVP_U_Float_Point const*)
IVP_Cache_Object_Manager::get_cache_object(IVP_Real_Object*)
IVP_Cache_Object_Manager::invalid_cache_object(IVP_Real_Object*)
IVP_Cache_Object_Manager::~IVP_Cache_Object_Manager()
IVP_Cache_Object_Manager::IVP_Cache_Object_Manager(int)
IVP_Cache_Object::transform_position_to_object_coords(IVP_U_Point const*, IVP_U_Point*) const
IVP_Cache_Object::transform_position_to_world_coords(IVP_U_Float_Point const*, IVP_U_Point*) const
IVP_Cache_Object::transform_vector_to_object_coords(IVP_U_Float_Point const*, IVP_U_Float_Point*) const
IVP_Cache_Object::transform_vector_to_object_coords(IVP_U_Point const*, IVP_U_Point*) const
IVP_Cache_Object::transform_vector_to_world_coords(IVP_U_Float_Point const*, IVP_U_Float_Point*) const
IVP_Cache_Object::transform_vector_to_world_coords(IVP_U_Point const*, IVP_U_Point*) const
IVP_Cache_Object::update_cache_object()
IVP_Calc_Next_PSI_Solver::calc_next_PSI_matrix(IVP_Event_Sim*, IVP_U_Vector<IVP_Hull_Manager_Base>*)
IVP_Calc_Next_PSI_Solver::calc_rotation_matrix(float, IVP_U_Quat*)
IVP_Calc_Next_PSI_Solver::commit_all_calc_next_PSI_matrix(IVP_Environment*, IVP_U_Vector<IVP_Core>*, IVP_U_Vector<IVP_Hull_Manager_Base>*)
IVP_Calc_Next_PSI_Solver::commit_all_hull_managers(IVP_Environment*, IVP_U_Vector<IVP_Hull_Manager_Base>*)
IVP_Calc_Next_PSI_Solver::set_transformation(IVP_U_Quat const*, IVP_U_Point const*, IVP_BOOL)
IVP_Car_System
IVP_Car_System::~IVP_Car_System()
IVP_Car_System::IVP_Car_System()
IVP_Car_System_Real_Wheels
IVP_Car_System_Real_Wheels::activate_booster(float, float, float)
IVP_Car_System_Real_Wheels::change_body_downforce(float)
IVP_Car_System_Real_Wheels::change_fast_turn_factor(float)
IVP_Car_System_Real_Wheels::change_max_body_force(IVP_POS_WHEEL, float)
IVP_Car_System_Real_Wheels::change_spring_constant(IVP_POS_WHEEL, float)
IVP_Car_System_Real_Wheels::change_spring_dampening_compression(IVP_POS_WHEEL, float)
IVP_Car_System_Real_Wheels::change_spring_dampening(IVP_POS_WHEEL, float)
IVP_Car_System_Real_Wheels::change_spring_length(IVP_POS_WHEEL, float)
IVP_Car_System_Real_Wheels::change_spring_pre_tension(IVP_POS_WHEEL, float)
IVP_Car_System_Real_Wheels::change_stabilizer_constant(IVP_POS_AXIS, float)
IVP_Car_System_Real_Wheels::change_wheel_torque(IVP_POS_WHEEL, float)
IVP_Car_System_Real_Wheels::do_steering(float, bool)
IVP_Car_System_Real_Wheels::do_steering_wheel(IVP_POS_WHEEL, float)
IVP_Car_System_Real_Wheels::environment_will_be_deleted(IVP_Environment*)
IVP_Car_System_Real_Wheels::fix_wheel(IVP_POS_WHEEL, IVP_BOOL)
IVP_Car_System_Real_Wheels::get_body_speed(IVP_COORDINATE_INDEX)
IVP_Car_System_Real_Wheels::get_booster_delay()
IVP_Car_System_Real_Wheels::get_booster_time_to_go()
IVP_Car_System_Real_Wheels::GetCarSystemDebugData(IVP_CarSystemDebugData_t&)
IVP_Car_System_Real_Wheels::get_orig_axles_distance()
IVP_Car_System_Real_Wheels::get_orig_front_wheel_distance()
IVP_Car_System_Real_Wheels::get_skid_info(IVP_Wheel_Skid_Info*)
IVP_Car_System_Real_Wheels::get_wheel_angular_velocity(IVP_POS_WHEEL)
IVP_Car_System_Real_Wheels::get_wheel_torque(IVP_POS_WHEEL)
IVP_Car_System_Real_Wheels::~IVP_Car_System_Real_Wheels()
IVP_Car_System_Real_Wheels::IVP_Car_System_Real_Wheels(IVP_Environment*, IVP_Template_Car_System*)
IVP_Car_System_Real_Wheels::set_booster_acceleration(float)
IVP_Car_System_Real_Wheels::SetCarSystemDebugData(IVP_CarSystemDebugData_t const&)
IVP_Car_System_Real_Wheels::set_powerslide(float, float)
IVP_Car_System_Real_Wheels::update_body_countertorque()
IVP_Car_System_Real_Wheels::update_booster(float)
IVP_Car_System_Real_Wheels::update_throttle(float)
IVP_Car_System_Real_Wheels::update_wheel_positions()
IVP_CFEP_Hash
IVP_CFEP_Hash::compare(void*, void*) const
IVP_CFEP_Hash::~IVP_CFEP_Hash()
IVP_Cluster
IVP_Cluster::~IVP_Cluster()
IVP_Cluster::IVP_Cluster(IVP_Environment*)
IVP_Cluster_Manager::add_listener_object(IVP_Real_Object*, IVP_Listener_Object*)
IVP_Cluster_Manager::add_object(IVP_Real_Object*)
IVP_Cluster_Manager::check_for_unused_objects(IVP_Universe_Manager*)
IVP_Cluster_Manager::fire_event_collision_object_deleted(IVP_Real_Object*)
IVP_Cluster_Manager::fire_event_friction_created(IVP_Real_Object*, IVP_Event_Friction*)
IVP_Cluster_Manager::fire_event_friction_deleted(IVP_Real_Object*, IVP_Event_Friction*)
IVP_Cluster_Manager::fire_event_object_deleted(IVP_Event_Object*)
IVP_Cluster_Manager::fire_event_post_collision(IVP_Real_Object*, IVP_Event_Collision*)
IVP_Cluster_Manager::fire_event_pre_collision(IVP_Real_Object*, IVP_Event_Collision*)
IVP_Cluster_Manager::get_root_cluster()
IVP_Cluster_Manager::~IVP_Cluster_Manager()
IVP_Cluster_Manager::IVP_Cluster_Manager(IVP_Environment*)
IVP_Cluster_Manager::remove_listener_object(IVP_Real_Object*, IVP_Listener_Object*)
IVP_Cluster_Manager::remove_object(IVP_Real_Object*)
IVP_Collision
IVP_Collision_Callback_Table_Hash
IVP_Collision_Callback_Table_Hash::compare(void*, void*) const
IVP_Collision_Callback_Table_Hash::find_table(IVP_Real_Object*)
IVP_Collision_Callback_Table_Hash::~IVP_Collision_Callback_Table_Hash()
IVP_Collision_Callback_Table_Hash::object_to_index(IVP_Real_Object*)
IVP_Collision_Callback_Table_Hash::remove_table(IVP_Real_Object*)
IVP_Collision_Callback_Table::~IVP_Collision_Callback_Table()
IVP_Collision_Delegator
IVP_Collision_Delegator::change_spawned_mindist_count(int)
IVP_Collision_Delegator::get_spawned_mindist_count()
IVP_Collision::delegator_is_going_to_be_deleted_event(IVP_Collision_Delegator*)
IVP_Collision_Delegator::~IVP_Collision_Delegator()
IVP_Collision_Delegator_Root
IVP_Collision_Delegator_Root_Mindist
IVP_Collision_Delegator_Root_Mindist::collision_is_going_to_be_deleted_event(IVP_Collision*)
IVP_Collision_Delegator_Root_Mindist::delegate_collisions_for_object(IVP_Real_Object*, IVP_Real_Object*)
IVP_Collision_Delegator_Root_Mindist::environment_is_going_to_be_deleted_event(IVP_Environment*)
IVP_Collision_Delegator_Root_Mindist::~IVP_Collision_Delegator_Root_Mindist()
IVP_Collision_Delegator_Root_Mindist::IVP_Collision_Delegator_Root_Mindist()
IVP_Collision_Delegator_Root_Mindist::object_is_removed_from_collision_detection(IVP_Real_Object*)
IVP_Collision_Filter
IVP_Collision_Filter_Exclusive_Pair
IVP_Collision_Filter_Exclusive_Pair::check_objects_for_collision_detection(IVP_Real_Object*, IVP_Real_Object*)
IVP_Collision_Filter_Exclusive_Pair::disable_collision_between_objects(IVP_Real_Object*, IVP_Real_Object*)
IVP_Collision_Filter_Exclusive_Pair::enable_collision_between_objects(IVP_Real_Object*, IVP_Real_Object*)
IVP_Collision_Filter_Exclusive_Pair::environment_will_be_deleted(IVP_Environment*)
IVP_Collision_Filter_Exclusive_Pair::~IVP_Collision_Filter_Exclusive_Pair()
IVP_Collision_Filter_Exclusive_Pair::IVP_Collision_Filter_Exclusive_Pair()
IVP_Collision_Filter::~IVP_Collision_Filter()
IVP_Collision::~IVP_Collision()
IVP_Compact_Edge::next_table
IVP_Compact_Edge::prev_table
IVP_Compact_Ledge::c_ledge_init()
IVP_Compact_Ledge_Find_Mass_Center::integrate_triangle(IVP_Compact_Ledge const*, IVP_Compact_Triangle const*)
IVP_Compact_Ledge_Generator::generate_compact_ledge(unsigned char*)
IVP_Compact_Ledge_Generator::~IVP_Compact_Ledge_Generator()
IVP_Compact_Ledge_Generator::IVP_Compact_Ledge_Generator()
IVP_Compact_Ledge_Generator::prepare_compact_ledge(IVP_U_Vector<IVP_Triangle>*)
IVP_Compact_Ledge_Mass_Center_Solver::integrate_triangle(IVP_Compact_Ledge const*, IVP_Compact_Triangle const*, int, int, int)
IVP_Compact_Ledge_Solver::calc_bounding_box(IVP_Compact_Ledge const*, IVP_U_Point*, IVP_U_Point*)
IVP_Compact_Ledge_Solver::calc_hesse_object(IVP_Compact_Edge const*, IVP_Compact_Ledge const*, IVP_U_Hesse*)
IVP_Compact_Ledge_Solver::calc_hesse_vec_object_not_normized(IVP_Compact_Edge const*, IVP_Compact_Ledge const*, IVP_U_Float_Point*)
IVP_Compact_Ledge_Solver::calc_hesse_vec_object_not_normized(IVP_Compact_Edge const*, IVP_Compact_Ledge const*, IVP_U_Point*)
IVP_Compact_Ledge_Solver::calc_pos_other_space(IVP_Compact_Edge const*, IVP_Cache_Ledge_Point*, IVP_Cache_Ledge_Point*, IVP_U_Point*)
IVP_Compact_Ledge_Solver::calc_qlen_KK(IVP_Compact_Edge const*, IVP_Compact_Edge const*, IVP_Cache_Ledge_Point*, IVP_Cache_Ledge_Point*)
IVP_Compact_Ledge_Solver::calc_qlen_PF_F_space(IVP_Compact_Ledge const*, IVP_Compact_Triangle const*, IVP_U_Point const*)
IVP_Compact_Ledge_Solver::calc_qlen_PK_K_space(IVP_U_Point const*, IVP_Compact_Ledge const*, IVP_Compact_Edge const*)
IVP_Compact_Ledge_Solver::calc_radius_to_given_center(IVP_Compact_Ledge const*, IVP_U_Point const*, double*, double*)
IVP_Compact_Ledge_Solver::calc_radius_to_given_center(IVP_Compact_Surface const*, IVP_U_Point const*, double*, double*)
IVP_Compact_Ledge_Solver::calc_unscaled_KK_vals(IVP_KK_Input const&, IVP_Unscaled_KK_Result*)
IVP_Compact_Ledge_Solver::calc_unscaled_qr_vals_F_space(IVP_Compact_Ledge const*, IVP_Compact_Edge const*, IVP_U_Point const*, IVP_Unscaled_QR_Result*)
IVP_Compact_Ledge_Solver::calc_unscaled_s_val_K_space(IVP_Compact_Ledge const*, IVP_Compact_Edge const*, IVP_U_Point const*, IVP_Unscaled_S_Result*)
IVP_Compact_Ledge_Solver::get_all_ledges(IVP_Compact_Ledgetree_Node const*, IVP_U_BigVector<IVP_Compact_Ledge>*)
IVP_Compact_Ledge_Solver::get_all_ledges(IVP_Compact_Surface const*, IVP_U_BigVector<IVP_Compact_Ledge>*)
IVP_Compact_Ledge_Solver::give_world_coords_AT(IVP_Compact_Edge const*, IVP_Cache_Ledge_Point*, IVP_U_Point*)
IVP_Compact_Ledge_Solver::minimize_on_other_side(IVP_Compact_Edge const*, IVP_U_Point const*)
IVP_Compact_Ledge_Solver::quad_dist_edge_to_point_K_space(IVP_Compact_Ledge const*, IVP_Compact_Edge const*, IVP_U_Point const*)
IVP_Compact_Ledge_Solver::transform_pos_other_space(IVP_U_Float_Point const*, IVP_Cache_Ledge_Point*, IVP_Cache_Ledge_Point*, IVP_U_Point*)
IVP_Compact_Ledgetree_Node::byte_swap_all(IVP_U_BigVector<IVP_Compact_Poly_Point>*)
IVP_Compact_Recursive::add_compact_ledge(IVP_Compact_Ledge const*)
IVP_Compact_Recursive::build_convex_hull()
IVP_Compact_Recursive::compile()
IVP_Compact_Recursive::~IVP_Compact_Recursive()
IVP_Compact_Recursive::IVP_Compact_Recursive()
IVP_Compact_Recursive::set_rekursive_convex_hull()
IVP_Compact_Surface::byte_swap_all(IVP_BOOL, int)
IVP_Compact_Triangle::IVP_Compact_Triangle()
IVP_Constraint
IVP_Constraint::activate()
IVP_Constraint_Car_Object::IVP_Constraint_Car_Object(IVP_Constraint_Solver_Car*, IVP_Real_Object*, IVP_Real_Object*, IVP_U_Float_Point*)
IVP_Constraint::change_Aos_to_relaxe_constraint()
IVP_Constraint::change_fixing_point_Ros(IVP_U_Point const*)
IVP_Constraint::change_max_rotation_impulse(IVP_CONSTRAINT_FORCE_EXCEED, float)
IVP_Constraint::change_max_translation_impulse(IVP_CONSTRAINT_FORCE_EXCEED, float)
IVP_Constraint::change_Ros_to_relaxe_constraint()
IVP_Constraint::change_rotation_axes_Ros(IVP_U_Matrix3 const*)
IVP_Constraint::change_target_fixing_point_Ros(IVP_U_Point const*)
IVP_Constraint::change_target_rotation_axes_Ros(IVP_U_Matrix3 const*)
IVP_Constraint::change_target_translation_axes_Ros(IVP_U_Matrix3 const*)
IVP_Constraint::change_translation_axes_Ros(IVP_U_Matrix3 const*)
IVP_Constraint::core_is_going_to_be_deleted_event(IVP_Core*)
IVP_Constraint::deactivate()
IVP_Constraint::fix_rotation_axis(IVP_COORDINATE_INDEX)
IVP_Constraint::fix_translation_axis(IVP_COORDINATE_INDEX)
IVP_Constraint::free_rotation_axis(IVP_COORDINATE_INDEX)
IVP_Constraint::free_translation_axis(IVP_COORDINATE_INDEX)
IVP_Constraint::get_associated_controlled_cores()
IVP_Constraint::get_controller_priority()
IVP_Constraint::get_environment()
IVP_Constraint::get_minimum_simulation_frequency()
IVP_Constraint::~IVP_Constraint()
IVP_Constraint::IVP_Constraint()
IVP_Constraint::limit_rotation_axis(IVP_COORDINATE_INDEX, float, float)
IVP_Constraint::limit_translation_axis(IVP_COORDINATE_INDEX, float, float)
IVP_Constraint_Local
IVP_Constraint_Local::change_Aos_to_relaxe_constraint()
IVP_Constraint_Local::change_fixing_point_Ros(IVP_U_Point const*)
IVP_Constraint_Local::change_max_rotation_impulse(IVP_CONSTRAINT_FORCE_EXCEED, float)
IVP_Constraint_Local::change_max_translation_impulse(IVP_CONSTRAINT_FORCE_EXCEED, float)
IVP_Constraint_Local::change_Ros_to_relaxe_constraint()
IVP_Constraint_Local::change_rotation_axes_Ros(IVP_U_Matrix3 const*)
IVP_Constraint_Local::change_target_fixing_point_Ros(IVP_U_Point const*)
IVP_Constraint_Local::change_target_rotation_axes_Ros(IVP_U_Matrix3 const*)
IVP_Constraint_Local::change_target_translation_axes_Ros(IVP_U_Matrix3 const*)
IVP_Constraint_Local::change_translation_axes_Ros(IVP_U_Matrix3 const*)
IVP_Constraint_Local::core_is_going_to_be_deleted_event(IVP_Core*)
IVP_Constraint_Local::do_simulation_controller(IVP_Event_Sim*, IVP_U_Vector<IVP_Core>*)
IVP_Constraint_Local::fix_rotation_axis(IVP_COORDINATE_INDEX)
IVP_Constraint_Local::fix_translation_axis(IVP_COORDINATE_INDEX)
IVP_Constraint_Local::free_rotation_axis(IVP_COORDINATE_INDEX)
IVP_Constraint_Local::free_translation_axis(IVP_COORDINATE_INDEX)
IVP_Constraint_Local::init(IVP_Template_Constraint const&)
IVP_Constraint_Local::~IVP_Constraint_Local()
IVP_Constraint_Local::IVP_Constraint_Local(IVP_Template_Constraint const&)
IVP_Constraint_Local::limit_rotation_axis(IVP_COORDINATE_INDEX, float, float)
IVP_Constraint_Local::limit_translation_axis(IVP_COORDINATE_INDEX, float, float)
IVP_Constraint_Local::sort_rotation_mapping()
IVP_Constraint_Local::sort_translation_mapping()
@IVP_Constraint_Solver_Car
IVP_Constraint_Solver_Car_Builder::calc_constraint_matrix()
IVP_Constraint_Solver_Car_Builder::calc_pushing_behavior(int, int)
IVP_Constraint_Solver_Car::core_is_going_to_be_deleted_event(IVP_Core*)
IVP_Constraint_Solver_Car::do_simulation_controller(IVP_Event_Sim*, IVP_U_Vector<IVP_Core>*)
IVP_Constraint_Solver_Car::do_simulation_controller_rotation(IVP_Event_Sim*, IVP_Core*, IVP_U_Matrix const*)
IVP_Constraint_Solver_Car::get_associated_controlled_cores()
IVP_Constraint_Solver_Car::get_controller_name()
IVP_Constraint_Solver_Car::get_controller_priority()
IVP_Constraint_Solver_Car::get_minimum_simulation_frequency()
IVP_Constraint_Solver_Car::init_constraint_system(IVP_Environment*, IVP_Real_Object*, IVP_U_Vector<IVP_Real_Object>&, IVP_U_Vector<IVP_U_Float_Point>&)
IVP_Constraint_Solver_Car::~IVP_Constraint_Solver_Car()
IVP_Constraint_Solver_Car::IVP_Constraint_Solver_Car(IVP_COORDINATE_INDEX, IVP_COORDINATE_INDEX, IVP_COORDINATE_INDEX, IVP_BOOL)
IVP_Contact_Point_API::get_eliminated_energy(IVP_Contact_Point*)
IVP_Contact_Point_API::get_surface_normal_ws(IVP_Contact_Point*, IVP_U_Float_Point*)
IVP_Contact_Point_API::get_vert_force(IVP_Contact_Point*)
IVP_Contact_Point_API::reset_eliminated_energy(IVP_Contact_Point*)
IVP_Contact_Point::calc_coll_distance()
IVP_Contact_Point::calc_virtual_mass_of_mindist()
IVP_Contact_Point::friction_force_local_constraint_1d(IVP_Event_Sim const*)
IVP_Contact_Point::friction_force_local_constraint_2d(IVP_Event_Sim const*)
IVP_Contact_Point::friction_force_local_constraint_2d_wheel(IVP_Core*, IVP_Impact_Solver_Long_Term*, IVP_Event_Sim const*, float&)
IVP_Contact_Point::get_and_set_real_friction_len(IVP_U_Float_Point*)
IVP_Contact_Point::get_contact_normal(IVP_U_Float_Point*)
IVP_Contact_Point::get_material_info(IVP_Material**)
IVP_Contact_Point::get_rot_speed_uncertainty()
IVP_Contact_Point::is_same_as(IVP_Mindist const*) const
IVP_Contact_Point::~IVP_Contact_Point()
IVP_Contact_Point::IVP_Contact_Point(IVP_Mindist*)
IVP_Contact_Point::p_calc_friction_qr_PF(IVP_U_Point const*, IVP_Compact_Edge const*, IVP_Cache_Ledge_Point*, IVP_Impact_Solver_Long_Term*, IVP_U_Float_Point*)
IVP_Contact_Point::p_calc_friction_s_PK(IVP_U_Point const*, IVP_Compact_Edge const*, IVP_Cache_Ledge_Point*, IVP_Impact_Solver_Long_Term*, IVP_U_Float_Point*)
IVP_Contact_Point::p_calc_friction_ss_KK(IVP_Compact_Edge const*, IVP_Compact_Edge const*, IVP_Cache_Ledge_Point*, IVP_Cache_Ledge_Point*, IVP_Impact_Solver_Long_Term*, IVP_U_Float_Point*)
IVP_Contact_Point::read_materials_for_contact_situation(IVP_Impact_Solver_Long_Term*)
IVP_Contact_Point::recalc_friction_s_vals()
IVP_Contact_Point::recompute_friction()
IVP_Contact_Point::reset_time(IVP_Time)
IVP_Contact_Point::set_friction_to_neutral()
IVP_Contact_Point::static_friction_single(IVP_Event_Sim const*, float, float)
IVP_Contact_Point::two_values_friction(IVP_U_Float_Point*)
IVP_Controller
IVP_Controller_Buoyancy
IVP_Controller_Buoyancy::apply_buoyancy_impulse(IVP_Real_Object*, IVP_Template_Buoyancy*, double, float, IVP_U_Float_Point*)
IVP_Controller_Buoyancy::apply_dampening(IVP_Real_Object*, float, double, IVP_U_Float_Point*, IVP_U_Float_Point*, IVP_U_Float_Point*)
IVP_Controller_Buoyancy::core_is_going_to_be_deleted_event(IVP_Core*)
IVP_Controller_Buoyancy::do_simulation_controller(IVP_Event_Sim*, IVP_U_Vector<IVP_Core>*)
IVP_Controller_Buoyancy::get_controller_name()
IVP_Controller_Buoyancy::get_controller_priority()
IVP_Controller_Buoyancy::get_minimum_simulation_frequency()
IVP_Controller_Buoyancy::~IVP_Controller_Buoyancy()
IVP_Controller_Buoyancy::IVP_Controller_Buoyancy(IVP_Attacher_To_Cores<IVP_Controller_Buoyancy>*, IVP_Core*)
IVP_Controller_Buoyancy::use_buoyancy_solver(IVP_Buoyancy_Input const*, IVP_Template_Buoyancy const*, IVP_Buoyancy_Output*, IVP_U_Float_Point const*, int)
IVP_Controller::core_is_going_to_be_deleted_event(IVP_Core*)
IVP_Controller_Dependent
IVP_Controller::get_controller_name()
IVP_Controller::get_minimum_simulation_frequency()
IVP_Controller_Independent
IVP_Controller_Independent::empty_list
IVP_Controller_Independent::get_associated_controlled_cores()
IVP_Controller::~IVP_Controller()
IVP_Controller_Manager::add_controller_to_core(IVP_Controller_Independent*, IVP_Core*)
IVP_Controller_Manager::announce_controller_to_environment(IVP_Controller_Dependent*)
IVP_Controller_Manager::ensure_controller_in_simulation(IVP_Controller_Dependent*)
IVP_Controller_Manager::ensure_core_in_simulation(IVP_Core*)
IVP_Controller_Manager::remove_controller_from_core(IVP_Controller_Independent*, IVP_Core*)
IVP_Controller_Manager::remove_controller_from_environment(IVP_Controller_Dependent*, IVP_BOOL)
IVP_Controller_Phantom
IVP_Controller_Phantom::add_listener_phantom(IVP_Listener_Phantom*)
IVP_Controller_Phantom::event_object_created(IVP_Event_Object*)
IVP_Controller_Phantom::event_object_deleted(IVP_Event_Object*)
IVP_Controller_Phantom::event_object_frozen(IVP_Event_Object*)
IVP_Controller_Phantom::event_object_revived(IVP_Event_Object*)
IVP_Controller_Phantom::~IVP_Controller_Phantom()
IVP_Controller_Phantom::IVP_Controller_Phantom(IVP_Real_Object*, IVP_Template_Phantom const*)
IVP_Controller_Phantom::mindist_entered_volume(IVP_Mindist*)
IVP_Controller_Phantom::mindist_left_volume(IVP_Mindist*)
IVP_Controller_Phantom::remove_listener_phantom(IVP_Listener_Phantom*)
IVP_Controller_Phantom::wake_all_sleeping_objects()
IVP_Controller_Raycast_Car
IVP_Controller_Raycast_Car::activate_booster(float, float, float)
IVP_Controller_Raycast_Car::ApplySteeringForces(IVP_Raycast_Car_Wheel_Temp*, IVP_Core*, IVP_Event_Sim*, float*)
IVP_Controller_Raycast_Car::CalcSteeringForces(IVP_Raycast_Car_Wheel_Temp*, IVP_Core*, IVP_Event_Sim*, float*)
IVP_Controller_Raycast_Car::change_body_downforce(float)
IVP_Controller_Raycast_Car::change_fast_turn_factor(float)
IVP_Controller_Raycast_Car::change_max_body_force(IVP_POS_WHEEL, float)
IVP_Controller_Raycast_Car::change_spring_constant(IVP_POS_WHEEL, float)
IVP_Controller_Raycast_Car::change_spring_dampening_compression(IVP_POS_WHEEL, float)
IVP_Controller_Raycast_Car::change_spring_dampening(IVP_POS_WHEEL, float)
IVP_Controller_Raycast_Car::change_spring_length(IVP_POS_WHEEL, float)
IVP_Controller_Raycast_Car::change_spring_pre_tension(IVP_POS_WHEEL, float)
IVP_Controller_Raycast_Car::change_stabilizer_constant(IVP_POS_AXIS, float)
IVP_Controller_Raycast_Car::change_wheel_torque(IVP_POS_WHEEL, float)
IVP_Controller_Raycast_Car::core_is_going_to_be_deleted_event(IVP_Core*)
IVP_Controller_Raycast_Car::DoSimulationBooster(IVP_Event_Sim*, IVP_Core*)
IVP_Controller_Raycast_Car::do_simulation_controller(IVP_Event_Sim*, IVP_U_Vector<IVP_Core>*)
IVP_Controller_Raycast_Car::DoSimulationShocks(IVP_Raycast_Car_Wheel_Temp*, IVP_Ray_Hit*, IVP_Event_Sim*, IVP_Core*)
IVP_Controller_Raycast_Car::DoSimulationStabilizers(IVP_Raycast_Car_Wheel_Temp*)
IVP_Controller_Raycast_Car::DoSimulationWheels(IVP_Ray_Solver_Template*, IVP_U_Matrix const*, IVP_Raycast_Car_Wheel_Temp*, IVP_Ray_Hit*, float*, IVP_Core*)
IVP_Controller_Raycast_Car::do_steering(float, bool)
IVP_Controller_Raycast_Car::do_steering_wheel(IVP_POS_WHEEL, float)
IVP_Controller_Raycast_Car::fix_wheel(IVP_POS_WHEEL, IVP_BOOL)
IVP_Controller_Raycast_Car::get_associated_controlled_cores()
IVP_Controller_Raycast_Car::get_body_speed(IVP_COORDINATE_INDEX)
IVP_Controller_Raycast_Car::get_booster_delay()
IVP_Controller_Raycast_Car::get_booster_time_to_go()
IVP_Controller_Raycast_Car::GetCarSystemDebugData(IVP_CarSystemDebugData_t&)
IVP_Controller_Raycast_Car::get_controller_priority()
IVP_Controller_Raycast_Car::get_orig_axles_distance()
IVP_Controller_Raycast_Car::get_orig_front_wheel_distance()
IVP_Controller_Raycast_Car::get_skid_info(IVP_Wheel_Skid_Info*)
IVP_Controller_Raycast_Car::get_wheel_angular_velocity(IVP_POS_WHEEL)
IVP_Controller_Raycast_Car::get_wheel_torque(IVP_POS_WHEEL)
IVP_Controller_Raycast_Car::InitRaycastCarWheels(IVP_Template_Car_System const*)
IVP_Controller_Raycast_Car::~IVP_Controller_Raycast_Car()
IVP_Controller_Raycast_Car::IVP_Controller_Raycast_Car(IVP_Environment*, IVP_Template_Car_System const*)
IVP_Controller_Raycast_Car::set_booster_acceleration(float)
IVP_Controller_Raycast_Car::SetCarSystemDebugData(IVP_CarSystemDebugData_t const&)
IVP_Controller_Raycast_Car::set_powerslide(float, float)
IVP_Controller_Raycast_Car::SetupWheelRaycasts(IVP_Ray_Solver_Template*, IVP_U_Matrix const*, IVP_Raycast_Car_Wheel_Temp*)
IVP_Controller_Raycast_Car::update_body_countertorque()
IVP_Controller_Raycast_Car::update_booster(float)
IVP_Controller_Raycast_Car::update_throttle(float)
IVP_Controller::reset_time(IVP_Time)
IVP_Core::abort_all_async_pushes()
IVP_Core::add_core_controller(IVP_Controller*)
IVP_Core::add_friction_info(IVP_Friction_Info_For_Core*)
IVP_Core::apply_velocity_limit()
IVP_Core::async_push_core(IVP_U_Float_Point const*, IVP_U_Float_Point const*, IVP_U_Float_Point const*)
IVP_Core::async_push_core_ws(IVP_U_Point const*, IVP_U_Float_Point const*)
IVP_Core::async_rot_push_core_multiple_cs(IVP_U_Float_Point const*, double)
IVP_Core::async_rot_push_core_multiple_ws(IVP_U_Float_Point const*, double)
IVP_Core::calc_at_matrix(IVP_Time, IVP_U_Matrix*) const
IVP_Core::calc_calc()
IVP_Core::calc_correct_virt_mass(IVP_U_Float_Point const*, IVP_U_Float_Point const*, IVP_U_Float_Point const*) const
IVP_Core::calc_movement_state(IVP_Time)
IVP_Core::calc_next_PSI_matrix_zero_speed(IVP_Event_Sim*)
IVP_Core::calc_virt_mass(IVP_U_Float_Point const*, IVP_U_Float_Point const*) const
IVP_Core::calc_virt_mass_worst_case(IVP_U_Float_Point const*) const
IVP_Core::center_push_core_multiple_ws(IVP_U_Float_Point const*, double)
IVP_Core::commit_all_async_pushes()
IVP_Core::damp_object(double, IVP_U_Float_Point const*, double)
IVP_Core::delete_friction_info(IVP_Friction_Info_For_Core*)
IVP_Core::ensure_core_to_be_in_simulation()
IVP_Core::fire_event_object_frozen()
IVP_Core::freeze_simulation_core()
IVP_Core::get_diff_surface_speed_of_two_cores(IVP_Core const*, IVP_Core const*, IVP_U_Float_Point const*, IVP_U_Float_Point const*, IVP_U_Float_Point*)
IVP_Core::get_diff_surface_speed_of_two_cores_on_test(IVP_Core const*, IVP_Core const*, IVP_U_Float_Point const*, IVP_U_Float_Point const*, IVP_U_Float_Point const*, IVP_U_Float_Point const*, IVP_U_Float_Point const*, IVP_U_Float_Point const*, IVP_U_Float_Point*)
IVP_Core::get_energy_on_test(IVP_U_Float_Point const*, IVP_U_Float_Point const*)
IVP_Core::get_friction_info(IVP_Friction_System*)
IVP_Core::get_rot_speed_cs(IVP_U_Float_Point const*)
IVP_Core::get_surface_speed(IVP_U_Float_Point const*, IVP_U_Float_Point*) const
IVP_Core::get_surface_speed_on_test(IVP_U_Float_Point const*, IVP_U_Float_Point const*, IVP_U_Float_Point const*, IVP_U_Float_Point*) const
ivp_core_get_surface_speed_os(IVP_Core*, IVP_Real_Object*, IVP_U_Float_Point const*, IVP_U_Float_Point*)
IVP_Core::get_surface_speed_ws(IVP_U_Point const*, IVP_U_Float_Point*)
IVP_Core::global_damp_core(double)
IVP_Core::grow_friction_system()
IVP_Core::init_core_for_simulation()
IVP_Core::init(IVP_Real_Object*, bool)
IVP_Core::~IVP_Core()
IVP_Core::IVP_Core(IVP_Real_Object*, IVP_U_Quat const*, IVP_U_Point const*, IVP_BOOL, IVP_BOOL)
IVP_Core::moveable_core_has_friction_info()
IVP_Core::push_core(IVP_U_Float_Point const*, IVP_U_Float_Point const*, IVP_U_Float_Point const*)
IVP_Core::push_core_ws(IVP_U_Point const*, IVP_U_Float_Point const*)
IVP_Core::rem_core_controller(IVP_Controller*)
IVP_Core::reset_freeze_check_values()
IVP_Core::reset_time(IVP_Time)
IVP_Core::revive_adjacent_to_unmoveable()
IVP_Core::revive_simulation_core()
IVP_Core::rot_push_core_cs(IVP_U_Float_Point const*)
IVP_Core::rot_push_core_multiple_cs(IVP_U_Float_Point const*, double)
IVP_Core::set_mass(float)
IVP_Core::set_radius(float, float)
IVP_Core::set_rotation_inertia(IVP_U_Float_Point const*)
IVP_Core::stop_physical_movement()
IVP_Core::synchronize_with_rot_z()
IVP_Core::test_push_core(IVP_U_Float_Point const*, IVP_U_Float_Point const*, IVP_U_Float_Point const*, IVP_U_Float_Point*, IVP_U_Float_Point*) const
IVP_Core::test_rot_push_core_multiple_cs(IVP_U_Float_Point const*, double, IVP_U_Float_Point*)
IVP_Core::transform_PSI_matrizes_core(IVP_U_Matrix const*)
IVP_Core::undo_synchronize_rot_z()
IVP_Core::union_find_get_father()
IVP_Core::unlink_friction_info(IVP_Friction_Info_For_Core*)
IVP_Core::unlink_obj_from_core_and_maybe_destroy(IVP_Real_Object*)
IVP_Core::update_exact_mindist_events_of_core()
IVP_Core::values_changed_recalc_redundants()
_ivp_debugmanager
IVP_Diff_Hash<IVP_MM_CMP, IVP_U_FVector<IVP_Collision>, IVP_Collision, IVP_MM_CMP_Key>::check_element(IVP_MM_CMP_Key*, IVP_MM_CMP_Key*)
IVP_Diff_Hash<IVP_MM_CMP, IVP_U_FVector<IVP_Collision>, IVP_Collision, IVP_MM_CMP_Key>::IVP_Diff_Hash(IVP_U_FVector<IVP_Collision>*, short*, int, IVP_MM_CMP_Key*)
IVP_Diff_Hash<IVP_OO_CMP, IVP_U_FVector<IVP_Collision>, IVP_Collision, IVP_Real_Object>::check_element(IVP_Real_Object*, IVP_Real_Object*)
IVP_Diff_Hash<IVP_OO_CMP, IVP_U_FVector<IVP_Collision>, IVP_Collision, IVP_Real_Object>::IVP_Diff_Hash(IVP_U_FVector<IVP_Collision>*, short*, int, IVP_Real_Object*)
IVP_Environment::add_listener_collision_global(IVP_Listener_Collision*)
IVP_Environment::add_listener_constraint_global(IVP_Listener_Constraint*)
IVP_Environment::add_listener_object_global(IVP_Listener_Object*)
IVP_Environment::add_revive_core(IVP_Core*)
IVP_Environment::create_ball(IVP_Template_Ball const*, IVP_Template_Real_Object const*, IVP_U_Quat const*, IVP_U_Point const*)
IVP_Environment::create_constraint(IVP_Template_Constraint const*)
IVP_Environment::create_force(IVP_Template_Force*)
IVP_Environment::create_polygon(IVP_SurfaceManager*, IVP_Template_Real_Object const*, IVP_U_Quat const*, IVP_U_Point const*)
IVP_Environment::create_spring(IVP_Template_Spring*)
IVP_Environment::create_stabilizer(IVP_Template_Stabilizer*)
IVP_Environment::create_suspension(IVP_Template_Suspension*)
IVP_Environment::create_torque(IVP_Template_Torque*)
IVP_Environment::fire_event_constraint_broken(hk_Breakable_Constraint*)
IVP_Environment::fire_event_constraint_broken(IVP_Constraint*)
IVP_Environment::fire_event_friction_created(IVP_Event_Friction*)
IVP_Environment::fire_event_friction_deleted(IVP_Event_Friction*)
IVP_Environment::fire_event_friction_pair_created(IVP_Friction_Core_Pair*)
IVP_Environment::fire_event_friction_pair_deleted(IVP_Friction_Core_Pair*)
IVP_Environment::fire_event_object_created(IVP_Event_Object*)
IVP_Environment::fire_event_object_deleted(IVP_Event_Object*)
IVP_Environment::fire_event_object_frozen(IVP_Event_Object*)
IVP_Environment::fire_event_object_revived(IVP_Event_Object*)
IVP_Environment::fire_event_post_collision(IVP_Event_Collision*)
IVP_Environment::fire_event_pre_collision(IVP_Event_Collision*)
IVP_Environment::fire_object_is_removed_from_collision_detection(IVP_Real_Object*)
IVP_Environment::force_psi_on_next_simulation()
IVP_Environment::get_global_collision_tolerance()
IVP_Environment::~IVP_Environment()
IVP_Environment::IVP_Environment(IVP_Environment_Manager*, IVP_Application_Environment*, char const*, unsigned int)
IVP_Environment_Manager::create_environment(IVP_Application_Environment*, char const*, unsigned int)
IVP_Environment_Manager::get_environment_manager()
IVP_Environment_Manager::~IVP_Environment_Manager()
IVP_Environment_Manager::static_environment_manager
IVP_Environment::remove_listener_collision_global(IVP_Listener_Collision*)
IVP_Environment::remove_listener_constraint_global(IVP_Listener_Constraint*)
IVP_Environment::remove_listener_object_global(IVP_Listener_Object*)
IVP_Environment::remove_revive_core(IVP_Core*)
IVP_Environment::reset_time()
IVP_Environment::revive_cores_PSI()
IVP_Environment::set_current_time(IVP_Time)
IVP_Environment::set_delta_PSI_time(double)
IVP_Environment::set_global_collision_tolerance(double, double)
IVP_Environment::set_gravity(IVP_U_Point*)
IVP_Environment::simulate_dtime(double)
IVP_Environment::simulate_psi(IVP_Time)
IVP_Environment::simulate_time_step(float)
IVP_Event_Manager
IVP_Event_Manager::simulate_variable_time_step(IVP_Time_Manager*, IVP_Environment*, IVP_Time_Event_PSI*, float)
IVP_Event_Manager_Standard
IVP_Event_Manager_Standard::~IVP_Event_Manager_Standard()
IVP_Event_Manager_Standard::simulate_time_events(IVP_Time_Manager*, IVP_Environment*, IVP_Time)
IVP Failed at %short %double
ivp_free_aligned(void*)
IVP_Friction_Core_Pair::add_fr_dist_obj_pairs(IVP_Contact_Point*)
IVP_Friction_Core_Pair::check_all_fr_mindists_to_be_valid(IVP_Friction_System*)
IVP_Friction_Core_Pair::del_fr_dist_obj_pairs(IVP_Contact_Point*)
IVP_Friction_Core_Pair::destroy_mutual_energy(double)
IVP_Friction_Core_Pair::~IVP_Friction_Core_Pair()
IVP_Friction_Core_Pair::IVP_Friction_Core_Pair()
IVP_Friction_Core_Pair::number_of_pair_dists()
IVP_Friction_Hash::~IVP_Friction_Hash()
IVP_Friction_Info_For_Core::friction_info_insert_friction_dist(IVP_Contact_Point*)
IVP_Friction_Manager::generate_contact_point(IVP_Mindist*, IVP_BOOL*)
IVP_Friction_Solver::async_apply_impulse(IVP_Impact_Solver_Long_Term const*, double)
IVP_Friction_Solver::calc_solver_PSI(IVP_Friction_System*, int*)
IVP_Friction_Solver::do_resulting_pushes(IVP_Friction_System*)
IVP_Friction_Solver::ease_friction_pair(IVP_Friction_Core_Pair*, IVP_U_Memory*)
IVP_Friction_Solver::ease_two_mindists(IVP_Contact_Point*, IVP_Contact_Point*, IVP_U_Float_Point*, IVP_U_Float_Point*, double)
IVP_Friction_Solver::IVP_Friction_Solver(IVP_Friction_System*, IVP_Event_Sim const*)
IVP_Friction_Solver::normize_constraint_equ()
IVP_Friction_Solver::setup_coords_mindists(IVP_Friction_System*)
IVP_Friction_Solver::solve_linear_equation_and_push(IVP_Friction_System*, int*, int, IVP_U_Memory*)
IVP_Friction_Solver::test_gauss_solution_suggestion(double*, int*, int, IVP_U_Memory*)
IVP_Friction_Sys_Energy
IVP_Friction_Sys_Energy::core_is_going_to_be_deleted_event(IVP_Core*)
IVP_Friction_Sys_Energy::do_simulation_controller(IVP_Event_Sim*, IVP_U_Vector<IVP_Core>*)
IVP_Friction_Sys_Energy::get_controller_name()
IVP_Friction_Sys_Energy::get_controller_priority()
IVP_Friction_Sys_Energy::~IVP_Friction_Sys_Energy()
IVP_Friction_Sys_Static
IVP_Friction_Sys_Static::core_is_going_to_be_deleted_event(IVP_Core*)
IVP_Friction_Sys_Static::do_simulation_controller(IVP_Event_Sim*, IVP_U_Vector<IVP_Core>*)
IVP_Friction_Sys_Static::get_controller_name()
IVP_Friction_Sys_Static::get_controller_priority()
IVP_Friction_Sys_Static::get_minimum_simulation_frequency()
IVP_Friction_Sys_Static::~IVP_Friction_Sys_Static()
IVP_Friction_System
IVP_Friction_System::add_core_to_system(IVP_Core*)
IVP_Friction_System::add_dist_to_system(IVP_Contact_Point*)
IVP_Friction_System::add_fr_pair(IVP_Friction_Core_Pair*)
IVP_Friction_System::bubble_sort_dists_importance()
IVP_Friction_System::calc_friction_forces(IVP_Event_Sim const*)
IVP_Friction_System::core_is_going_to_be_deleted_event(IVP_Core*)
IVP_Friction_System::delete_friction_distance(IVP_Contact_Point*)
IVP_Friction_System::del_fr_pair(IVP_Friction_Core_Pair*)
IVP_Friction_System::dist_added_update_pair_info(IVP_Contact_Point*)
IVP_Friction_System::dist_removed_update_pair_info(IVP_Contact_Point*)
IVP_Friction_System::do_friction_system(IVP_Event_Sim const*)
IVP_Friction_System::do_simulation_controller(IVP_Event_Sim*, IVP_U_Vector<IVP_Core>*)
IVP_Friction_System::find_pair_of_cores(IVP_Core*, IVP_Core*)
IVP_Friction_System::friction_global_counter
IVP_Friction_System::fs_recalc_all_contact_points()
IVP_Friction_System::fusion_friction_systems(IVP_Friction_System*)
IVP_Friction_System::get_associated_controlled_cores()
IVP_Friction_System::get_controller_name()
IVP_Friction_System::get_controller_priority()
IVP_Friction_System::get_minimum_simulation_frequency()
IVP_Friction_System::get_pair_info_for_objs(IVP_Core*, IVP_Core*)
IVP_Friction_System::~IVP_Friction_System()
IVP_Friction_System::IVP_Friction_System(IVP_Environment*)
IVP_Friction_System::kinetic_energy_of_hole_frs()
IVP_Friction_System::remove_core_from_system(IVP_Core*)
IVP_Friction_System::remove_dist_from_system(IVP_Contact_Point*)
IVP_Friction_System::remove_energy_gained_by_real_friction()
IVP_Friction_System::reorder_mindists_for_complex()
IVP_Friction_System::reset_time(IVP_Time)
IVP_Friction_System::split_friction_system(IVP_Core*)
IVP_Friction_System::union_find_fr_sys()
IVP_Great_Matrix_Many_Zero::align_matrix_values()
IVP_Great_Matrix_Many_Zero::fill_from_bigger_matrix(IVP_Great_Matrix_Many_Zero*, int*, int)
IVP_Great_Matrix_Many_Zero::invert(IVP_Great_Matrix_Many_Zero*)
IVP_Great_Matrix_Many_Zero::IVP_Great_Matrix_Many_Zero()
IVP_Great_Matrix_Many_Zero::lu_crout(int*, double*)
IVP_Great_Matrix_Many_Zero::lu_solve(int*)
IVP_Great_Matrix_Many_Zero::matrix_check_unequation_line(int)
IVP_Great_Matrix_Many_Zero::mult()
IVP_Great_Matrix_Many_Zero::set_value(double, int, int)
IVP_Great_Matrix_Many_Zero::solve_great_matrix_many_zero()
IVP_Great_Matrix_Many_Zero::solve_lower_null_matrix()
IVP_Great_Matrix_Many_Zero::transform_to_lower_null_triangle()
IVP_Halfspacesoup::add_halfspace(IVP_U_Hesse const*)
IVP_Halfspacesoup::~IVP_Halfspacesoup()
IVP_Halfspacesoup::IVP_Halfspacesoup()
IVP_Hash::add(char const*, void*)
_IVP_Hash_crctab
IVP_Hash::find(char const*) const
IVP_Hash::~IVP_Hash()
IVP_Hash::IVP_Hash(int, int, void*)
IVP_Hull_Manager_Base::~IVP_Hull_Manager_Base()
IVP_Hull_Manager_Base::IVP_Hull_Manager_Base()
IVP_Hull_Manager::delete_hull_manager()
IVP_Hull_Manager::get_synapse_check_count(IVP_Environment*)
IVP_Hull_Manager::reset_time(IVP_Time)
IVP_Hull_Manager::reset_times()
IVP_Hull_Manager::too_many_synapses_checked_error_get_additional(IVP_Environment*, int)
IVPhysicsDebugOverlay
IVPhysicsKeyParser
?IVP_I_FPoint_VHash
IVP_I_FPoint_VHash::compare(void*, void*) const
IVP_I_FPoint_VHash::~IVP_I_FPoint_VHash()
IVP_I_FPoint_VHash::point_to_index(IVP_U_Float_Point*)
IVP_Impact_Solver::calc_virt_masses_impact_solver(IVP_U_Float_Point const*)
IVP_Impact_Solver::delay_decision(IVP_Core**)
IVP_Impact_Solver::do_impact(IVP_Core**, IVP_BOOL, int, float)
IVP_Impact_Solver::do_push(double)
IVP_Impact_Solver::do_rescue_push(IVP_U_Float_Point*, IVP_BOOL)
IVP_Impact_Solver::get_world_direction_second_friction(IVP_Contact_Point*)
IVP_Impact_Solver::get_world_push_direction()
IVP_Impact_Solver::get_world_push_direction_two_friction(double)
IVP_Impact_Solver_Long_Term::do_impact_long_term(IVP_Core**, float, IVP_Contact_Point*)
IVP_Impact_Solver_Long_Term::do_impact_of_two_objects(IVP_Mindist*, IVP_Real_Object*, IVP_Real_Object*)
IVP_Impact_Solver::undo_push()
IVP_Impact_System::add_pushed_core_with_pairs_except(IVP_Core*, IVP_Friction_Core_Pair*)
IVP_Impact_System::init_and_solve_impact_system(IVP_Mindist*, IVP_Friction_System*, IVP_Friction_Core_Pair*, IVP_Contact_Point*)
IVP_Impact_System::recalc_all_affected_cores()
IVP_Impact_System::test_loop_all_pairs()
IVP_Incr_L_U_Matrix::add_neg_row_to_row_l_u(int, int, double)
IVP_Incr_L_U_Matrix::decrement_l_u(int)
IVP_Incr_L_U_Matrix::increment_l_u()
IVP_Incr_L_U_Matrix::l_u_decomposition_with_pivoting()
IVP_Incr_L_U_Matrix::pivot_search_l_u(int)
IVP_Incr_L_U_Matrix::solve_lin_equ()
IVP_I_Point_VHash
IVP_I_Point_VHash::compare(void*, void*) const
IVP_I_Point_VHash::~IVP_I_Point_VHash()
IVP_I_Point_VHash::point_to_index(IVP_U_Point*)
IVP_KK_Input::calc_quad_distance_edge_edge()
IVP_KK_Input::IVP_KK_Input(IVP_Compact_Edge const*, IVP_Compact_Edge const*, IVP_Cache_Ledge_Point*, IVP_Cache_Ledge_Point*)
IVP_Linear_Constraint_Solver::alloc_memory(IVP_U_Memory*)
IVP_Linear_Constraint_Solver::do_a_little_random_permutation()
IVP_Linear_Constraint_Solver::full_setup()
IVP_Linear_Constraint_Solver::full_setup_test_ranges()
IVP_Linear_Constraint_Solver::get_fdirection()
IVP_Linear_Constraint_Solver::get_values_when_setup()
IVP_Linear_Constraint_Solver::increment_sub_solver()
IVP_Linear_Constraint_Solver::init_and_solve_lc(double*, double*, double*, int, int, IVP_U_Memory*)
IVP_Linear_Constraint_Solver::lcs_bubble_sort_x_vals()
IVP_Linear_Constraint_Solver::move_not_necessary_actives_to_inactives()
IVP_Linear_Constraint_Solver::numerical_stability_ok()
IVP_Linear_Constraint_Solver::solve_lc()
IVP_Linear_Constraint_Solver::startup_setup(int)
IVP_Linear_Constraint_Solver::update_step_vars(double)
IVP_Liquid_Surface_Descriptor
IVP_Listener_Collision
IVP_Listener_Constraint
...>IVP_Listener_Hull
IVP_Listener_Hull::hull_manager_is_reset(float, float)
IVP_Listener_Object
IVP_Listener_Phantom
IVP_Listener_Set_Active<IVP_Core>
ivp_malloc_aligned(int, int)
IVP_Material
IVP_Material::~IVP_Material()
IVP_Material_Manager
IVP_Material_Manager::environment_will_be_deleted(IVP_Environment*)
IVP_Material_Manager::get_adhesion(IVP_Contact_Situation*)
IVP_Material_Manager::get_damping(IVP_Contact_Situation*)
IVP_Material_Manager::get_elasticity(IVP_Contact_Situation*)
IVP_Material_Manager::get_friction_factor(IVP_Contact_Situation*)
IVP_Material_Manager::get_material_by_index(IVP_Real_Object*, IVP_U_Point const*, int)
IVP_Material_Manager::get_material_by_index(IVP_Real_Object*, IVP_U_Point const*, int)::simple
IVP_Material_Manager::~IVP_Material_Manager()
IVP_Material_Manager::IVP_Material_Manager(IVP_BOOL)
IVP_Material_Simple
IVP_Material_Simple::get_adhesion()
IVP_Material_Simple::get_damping()
IVP_Material_Simple::get_elasticity()
IVP_Material_Simple::get_friction_factor()
IVP_Material_Simple::get_name()
IVP_Material_Simple::get_second_friction_factor()
IVP_Material_Simple::~IVP_Material_Simple()
ivp_message(char const*, ...)
?IVP_Mindist
IVP_Mindist_Base
IVP_Mindist_Base::get_ledges(IVP_Compact_Ledge const**)
IVP_Mindist_Base::get_objects(IVP_Real_Object**)
IVP_Mindist::create_cp_in_advance_pretension(IVP_Real_Object*, float)
IVP_Mindist::do_impact()
IVP_Mindist_Event_Solver::calc_next_event_BB(IVP_Cache_Object*, IVP_Cache_Object*)
IVP_Mindist_Event_Solver::calc_next_event_BF(IVP_Compact_Edge const*, IVP_Cache_Object*, IVP_Cache_Ledge_Point*)
IVP_Mindist_Event_Solver::calc_next_event_BK(IVP_Ball*, IVP_Compact_Edge const*, IVP_Cache_Object*, IVP_Cache_Ledge_Point*)
IVP_Mindist_Event_Solver::calc_next_event_BP(IVP_Ball*, IVP_Compact_Edge const*, IVP_Cache_Object*, IVP_Cache_Ledge_Point*)
IVP_Mindist_Event_Solver::calc_next_event_KK(IVP_Compact_Edge const*, IVP_Compact_Edge const*, IVP_Cache_Ledge_Point*, IVP_Cache_Ledge_Point*)
IVP_Mindist_Event_Solver::calc_next_event_PF(IVP_Compact_Edge const*, IVP_Compact_Edge const*, IVP_Cache_Ledge_Point*, IVP_Cache_Ledge_Point*)
IVP_Mindist_Event_Solver::calc_next_event_PK(IVP_Compact_Edge const*, IVP_Compact_Edge const*, IVP_Cache_Ledge_Point*, IVP_Cache_Ledge_Point*)
IVP_Mindist_Event_Solver::calc_next_event_PP(IVP_Compact_Edge const*, IVP_Compact_Edge const*, IVP_Cache_Ledge_Point*, IVP_Cache_Ledge_Point*)
IVP_Mindist_Event_Solver::init_mim_function_table()
IVP_Mindist_Event_Solver::mim_function_table
IVP_Mindist_Event_Solver::next_event_BB(IVP_Mindist_Event_Solver*)
IVP_Mindist_Event_Solver::next_event_B_POLY(IVP_Mindist_Event_Solver*)
IVP_Mindist_Event_Solver::next_event_default_poly_poly(IVP_Mindist_Event_Solver*)
IVP_Mindist_Event_Solver::next_event_illegal(IVP_Mindist_Event_Solver*)
IVP_Mindist::exact_mindist_went_invalid(IVP_Mindist_Manager*)
IVP_Mindist::init_mindist(IVP_Real_Object*, IVP_Real_Object*, IVP_Compact_Edge const*, IVP_Compact_Edge const*)
IVP_Mindist::is_recursive()
IVP_Mindist::~IVP_Mindist()
IVP_Mindist::IVP_Mindist(IVP_Environment*, IVP_Collision_Delegator*)
IVP_Mindist_Manager::create_exact_mindists(IVP_Real_Object*, IVP_Real_Object*, double, IVP_U_FVector<IVP_Collision>*, IVP_Compact_Ledge const*, IVP_Compact_Ledge const*, IVP_Compact_Ledge const*, IVP_Compact_Ledge const*, IVP_Collision_Delegator*)
IVP_Mindist_Manager::enable_collision_detection_for_object(IVP_Real_Object*)
IVP_Mindist_Manager::insert_and_recalc_exact_mindist(IVP_Mindist*)
IVP_Mindist_Manager::insert_and_recalc_phantom_mindist(IVP_Mindist*)
IVP_Mindist_Manager::insert_exact_mindist(IVP_Mindist*)
IVP_Mindist_Manager::insert_hull_mindist(IVP_Mindist*, float)
IVP_Mindist_Manager::insert_invalid_mindist(IVP_Mindist*)
IVP_Mindist_Manager::insert_lazy_hull_mindist(IVP_Mindist*, float)
IVP_Mindist_Manager::~IVP_Mindist_Manager()
IVP_Mindist_Manager::IVP_Mindist_Manager(IVP_Environment*)
IVP_Mindist_Manager::recalc_all_exact_mindists()
IVP_Mindist_Manager::recalc_all_exact_mindists_events()
IVP_Mindist_Manager::recalc_all_exact_wheel_mindist()
IVP_Mindist_Manager::recalc_exact_mindist(IVP_Mindist*)
IVP_Mindist_Manager::recheck_ov_element(IVP_Real_Object*)
IVP_Mindist_Manager::remove_exact_mindist(IVP_Mindist*)
IVP_Mindist_Manager::remove_hull_mindist(IVP_Mindist*)
IVP_Mindist_Manager::remove_invalid_mindist(IVP_Mindist*)
IVP_Mindist::mindist_hull_limit_exceeded_event(float)
IVP_Mindist::mindist_rescue_push()
IVP_Mindist_Minimize_Solver::check_loop_hash(IVP_SYNAPSE_POLYGON_STATUS, IVP_Compact_Edge const*, IVP_SYNAPSE_POLYGON_STATUS, IVP_Compact_Edge const*)
IVP_Mindist_Minimize_Solver::init_mms_function_table()
IVP_Mindist_Minimize_Solver::minimize_BB(IVP_Mindist_Minimize_Solver*)
IVP_Mindist_Minimize_Solver::minimize_B_POLY(IVP_Mindist_Minimize_Solver*)
IVP_Mindist_Minimize_Solver::minimize_default_poly_poly(IVP_Mindist_Minimize_Solver*)
IVP_Mindist_Minimize_Solver::minimize_FB(IVP_Mindist_Minimize_Solver*)
IVP_Mindist_Minimize_Solver::minimize_illegal(IVP_Mindist_Minimize_Solver*)
IVP_Mindist_Minimize_Solver::minimize_KB(IVP_Mindist_Minimize_Solver*)
IVP_Mindist_Minimize_Solver::minimize_PB(IVP_Mindist_Minimize_Solver*)
IVP_Mindist_Minimize_Solver::minimize_swapped_poly_poly(IVP_Mindist_Minimize_Solver*)
IVP_Mindist_Minimize_Solver::mms_function_table
IVP_Mindist_Minimize_Solver::p_minimize_BF(IVP_Cache_Ball*, IVP_Compact_Edge const*, IVP_Cache_Ledge_Point*)
IVP_Mindist_Minimize_Solver::p_minimize_BK(IVP_Cache_Ball*, IVP_Compact_Edge const*, IVP_Cache_Ledge_Point*)
IVP_Mindist_Minimize_Solver::p_minimize_BP(IVP_Cache_Ball*, IVP_Compact_Edge const*, IVP_Cache_Ledge_Point*)
IVP_Mindist_Minimize_Solver::p_minimize_FF(IVP_Compact_Edge const*, IVP_Compact_Edge const*, IVP_Cache_Ledge_Point*, IVP_Cache_Ledge_Point*)
IVP_Mindist_Minimize_Solver::p_minimize_KK(IVP_Compact_Edge const*, IVP_Compact_Edge const*, IVP_Cache_Ledge_Point*, IVP_Cache_Ledge_Point*)
IVP_Mindist_Minimize_Solver::p_minimize_Leave_BK(IVP_Cache_Ball*, IVP_Compact_Edge const*, IVP_Cache_Ledge_Point*)
IVP_Mindist_Minimize_Solver::p_minimize_Leave_KK(IVP_Compact_Edge const*, IVP_Compact_Edge const*, IVP_KK_Input const&, IVP_Unscaled_KK_Result const*, IVP_Cache_Ledge_Point*, IVP_Cache_Ledge_Point*)
IVP_Mindist_Minimize_Solver::p_minimize_Leave_PF(IVP_Compact_Edge const*, IVP_U_Point const*, IVP_Compact_Edge const*, IVP_Cache_Ledge_Point*, IVP_Cache_Ledge_Point*)
IVP_Mindist_Minimize_Solver::p_minimize_Leave_PK(IVP_Compact_Edge const*, IVP_Compact_Edge const*, IVP_Cache_Ledge_Point*, IVP_Cache_Ledge_Point*)
IVP_Mindist_Minimize_Solver::p_minimize_PF(IVP_Compact_Edge const*, IVP_Compact_Edge const*, IVP_Cache_Ledge_Point*, IVP_Cache_Ledge_Point*)
IVP_Mindist_Minimize_Solver::p_minimize_PK(IVP_Compact_Edge const*, IVP_Compact_Edge const*, IVP_Cache_Ledge_Point*, IVP_Cache_Ledge_Point*)
IVP_Mindist_Minimize_Solver::p_minimize_PP(IVP_Compact_Edge const*, IVP_Compact_Edge const*, IVP_Cache_Ledge_Point*, IVP_Cache_Ledge_Point*)
IVP_Mindist::recalc_invalid_mindist()
IVP_Mindist::recalc_mindist()
IVP_Mindist_Recursive
IVP_Mindist_Recursive::change_spawned_mindist_count(int)
IVP_Mindist_Recursive::collision_is_going_to_be_deleted_event(IVP_Collision*)
IVP_Mindist_Recursive::do_impact()
IVP_Mindist_Recursive::exact_mindist_went_invalid(IVP_Mindist_Manager*)
IVP_Mindist_Recursive::get_spawned_mindist_count()
IVP_Mindist_Recursive::invalid_mindist_went_exact()
IVP_Mindist_Recursive::is_recursive()
IVP_Mindist_Recursive::~IVP_Mindist_Recursive()
IVP_Mindist_Recursive::IVP_Mindist_Recursive(IVP_Environment*, IVP_Collision_Delegator*)
IVP_Mindist_Recursive::mindist_rescue_push()
IVP_Mindist_Recursive::recheck_recursive_childs(double)
IVP_Mindist_Recursive::rec_hull_limit_exceeded_event()
_ivp_mindist_settings
IVP_Mindist_Settings::IVP_Mindist_Settings()
IVP_Mindist_Settings::set_collision_tolerance(double, double)
IVP_Mindist::simulate_time_event(IVP_Environment*)
IVP_Mindist::try_to_generate_managed_friction(IVP_Friction_System**, IVP_BOOL*, IVP_Simulation_Unit*, IVP_BOOL)
IVP_Mindist::update_exact_mindist_events(IVP_BOOL, IVP_MINDIST_EVENT_HINT)
IVP_Mindist::update_exact_mindist_events(IVP_BOOL, IVP_MINDIST_EVENT_HINT)::count
IVP_Mutual_Energizer::destroy_percent_energy(double)
IVP_Mutual_Energizer::init_mutual_energizer(IVP_Core*, IVP_Core*)
IVP_Object
IVP_Object_Callback_Table_Hash
IVP_Object_Callback_Table_Hash::compare(void*, void*) const
IVP_Object_Callback_Table_Hash::find_table(IVP_Real_Object*)
IVP_Object_Callback_Table_Hash::~IVP_Object_Callback_Table_Hash()
IVP_Object_Callback_Table_Hash::object_to_index(IVP_Real_Object*)
IVP_Object_Callback_Table_Hash::remove_table(IVP_Real_Object*)
IVP_Object_Callback_Table::~IVP_Object_Callback_Table()
IVP_Object::~IVP_Object()
IVP_Object_Polygon_Tetra::generate_double_triangle(IVP_Poly_Point*, IVP_Poly_Point*, IVP_Poly_Point*)
IVP_Object_Polygon_Tetra::insert_pierce_info()
IVP_Object_Polygon_Tetra::~IVP_Object_Polygon_Tetra()
IVP_Object_Polygon_Tetra::IVP_Object_Polygon_Tetra(IVP_Template_Polygon*)
IVP_Object_Polygon_Tetra::make_triangles()
IVP_OO_Watcher
IVP_OO_Watcher::collision_is_going_to_be_deleted_event(IVP_Collision*)
IVP_OO_Watcher::get_ledges(IVP_Compact_Ledge const**)
IVP_OO_Watcher::get_objects(IVP_Real_Object**)
IVP_OO_Watcher::hull_limit_exceeded_event()
IVP_OO_Watcher::~IVP_OO_Watcher()
IVP_OO_Watcher::IVP_OO_Watcher(IVP_Collision_Delegator*, IVP_Real_Object*, IVP_Real_Object*)
@IVP_OV_Element
IVP_OV_Element::add_oo_collision(IVP_Collision*)
IVP_OV_Element::add_to_hull_manager(IVP_Hull_Manager*, double)
IVP_OV_Element::get_type()
IVP_OV_Element::hull_limit_exceeded_event(IVP_Hull_Manager*, float)
IVP_OV_Element::hull_manager_is_going_to_be_deleted_event(IVP_Hull_Manager*)
IVP_OV_Element::~IVP_OV_Element()
IVP_OV_Element::IVP_OV_Element(IVP_Real_Object*)
IVP_OV_Element::remove_oo_collision(IVP_Collision*)
IVP_OV_Node::~IVP_OV_Node()
IVP_ov_tree_hash
IVP_ov_tree_hash::compare(void*, void*) const
IVP_ov_tree_hash::~IVP_ov_tree_hash()
IVP_ov_tree_hash::node_to_index(IVP_OV_Node*)
IVP_OV_Tree_Manager::calc_optimal_box(IVP_OV_Element const*, double, double)
IVP_OV_Tree_Manager::collect_collision_partners(IVP_OV_Element const*, IVP_OV_Node const*, IVP_OV_Node const*)
IVP_OV_Tree_Manager::collect_subbox_collision_partners(IVP_OV_Element const*, IVP_OV_Node const*)
IVP_OV_Tree_Manager::connect_boxes(IVP_OV_Node*, IVP_OV_Node*)
IVP_OV_Tree_Manager::expand_tree(IVP_OV_Node const*)
IVP_OV_Tree_Manager::get_luf_coordinates_ws(IVP_OV_Node const*, IVP_U_Float_Point*, float*)
IVP_OV_Tree_Manager::insert_ov_element(IVP_OV_Element*, double, double, IVP_U_Vector<IVP_OV_Element>*)
IVP_OV_Tree_Manager::~IVP_OV_Tree_Manager()
IVP_OV_Tree_Manager::IVP_OV_Tree_Manager()
IVP_OV_Tree_Manager::powerlist
IVP_OV_Tree_Manager::remove_ov_element(IVP_OV_Element*)
IVP_PerformanceCounter
IVP_PerformanceCounter::~IVP_PerformanceCounter()
@IVP_PerformanceCounter_Simple
IVP_PerformanceCounter_Simple::environment_is_going_to_be_deleted(IVP_Environment*)
IVP_PerformanceCounter_Simple::~IVP_PerformanceCounter_Simple()
IVP_PerformanceCounter_Simple::IVP_PerformanceCounter_Simple()
IVP_PerformanceCounter_Simple::pcount(IVP_PERFORMANCE_ELEMENT)
IVP_PerformanceCounter_Simple::reset_and_print_performance_counters(IVP_Time)
IVP_PerformanceCounter_Simple::start_pcount()
IVP_PerformanceCounter_Simple::stop_pcount()
IVP_point_hash
IVP_point_hash::compare(void*, void*) const
IVP_point_hash::~IVP_point_hash()
IVP_point_hash::point_to_index(IVP_Poly_Point*)
IVP_Polygon
IVP_Polygon::~IVP_Polygon()
IVP_Polygon::IVP_Polygon(IVP_Cluster*, IVP_SurfaceManager*, IVP_Template_Real_Object const*, IVP_U_Quat const*, IVP_U_Point const*)
ivp_rand()
IVP_RAND_SEED
IVP_Range_Manager
IVP_Range_Manager::environment_will_be_deleted(IVP_Environment*)
IVP_Range_Manager::get_coll_range_intra_objects(IVP_Real_Object const*, IVP_Real_Object const*, double*, double*)
IVP_Range_Manager::get_coll_range_in_world(IVP_Real_Object const*)
IVP_Range_Manager::IVP_Range_Manager(IVP_Environment*, IVP_BOOL)
IVP_Ray_Hit_Listener
IVP_Ray_Hit_Listener::~IVP_Ray_Hit_Listener()
IVP_Ray_Solver
IVP_Ray_Solver::check_ray_against_ball(IVP_Ball*)
IVP_Ray_Solver_Group::check_ray_group_against_all_objects_in_sim(IVP_Environment const*)
IVP_Ray_Solver_Group::check_ray_group_against_node(IVP_OV_Node*, IVP_OV_Tree_Manager*)
IVP_Ray_Solver_Group::check_ray_group_against_object(IVP_Real_Object*)
IVP_Ray_Solver_Group::IVP_Ray_Solver_Group(int, IVP_Ray_Solver**)
IVP_Ray_Solver::~IVP_Ray_Solver()
IVP_Ray_Solver::IVP_Ray_Solver(IVP_Ray_Solver_Template const*)
IVP_Ray_Solver_Min
IVP_Ray_Solver_Min::add_hit_object(IVP_Real_Object*, IVP_Compact_Ledge const*, IVP_Compact_Triangle const*, double, IVP_U_Point*)
IVP_Ray_Solver_Min::~IVP_Ray_Solver_Min()
IVP_Ray_Solver_Os::check_ray_against_compact_ledge_os(IVP_Compact_Ledge const*)
IVP_Ray_Solver_Os::check_ray_against_compact_surface_os(IVP_Compact_Surface const*)
IVP_Ray_Solver_Os::check_ray_against_ledge_tree_node_os(IVP_Compact_Ledgetree_Node const*)
IVP_Ray_Solver_Os::IVP_Ray_Solver_Os(IVP_Ray_Solver*, IVP_Real_Object*)
IVP_Real_Object
IVP_Real_Object::add_listener_object(IVP_Listener_Object*)
IVP_Real_Object::async_add_rot_speed_object_cs(IVP_U_Float_Point const*)
IVP_Real_Object::async_add_speed_object_ws(IVP_U_Float_Point const*)
IVP_Real_Object::async_push_object_ws(IVP_U_Point const*, IVP_U_Float_Point const*)
IVP_Real_Object::beam_object_to_new_position(IVP_U_Quat const*, IVP_U_Point const*, IVP_BOOL)
IVP_Real_Object::calc_at_matrix(IVP_Time, IVP_U_Matrix*) const
IVP_Real_Object::calc_at_quaternion(IVP_Time, IVP_U_Quat*, IVP_U_Point*) const
IVP_Real_Object::calc_m_core_f_object(IVP_U_Matrix*)
IVP_Real_Object::change_mass(float)
IVP_Real_Object::clear_internal_references()
IVP_Real_Object::convert_to_phantom(IVP_Template_Phantom const*)
IVP_Real_Object::delete_and_check_vicinity()
IVP_Real_Object::delete_silently()
IVP_Real_Object::disable_simulation()
IVP_Real_Object::enable_collision_detection(IVP_BOOL)
IVP_Real_Object::ensure_in_simulation()
IVP_Real_Object::ensure_in_simulation_now()
IVP_Real_Object_Fast
IVP_Real_Object_Fast::~IVP_Real_Object_Fast()
IVP_Real_Object_Fast::IVP_Real_Object_Fast(IVP_Cluster*, IVP_Template_Object const*)
IVP_Real_Object_Fast_Static
IVP_Real_Object::force_grow_friction_system()
IVP_Real_Object::get_all_near_mindists()
IVP_Real_Object::get_collision_check_reference_count()
IVP_Real_Object::get_m_world_f_object_AT(IVP_U_Matrix*) const
IVP_Real_Object::get_quat_world_f_object_AT(IVP_U_Quat*, IVP_U_Point*) const
IVP_Real_Object::init_object_core(IVP_Environment*, IVP_Template_Real_Object const*)
IVP_Real_Object::insert_anchor(IVP_Anchor*)
IVP_Real_Object::~IVP_Real_Object()
IVP_Real_Object::IVP_Real_Object(IVP_Cluster*, IVP_SurfaceManager*, IVP_Template_Real_Object const*, IVP_U_Quat const*, IVP_U_Point const*)
IVP_Real_Object::recalc_exact_mindists_of_object()
IVP_Real_Object::recalc_invalid_mindists_of_object()
IVP_Real_Object::recheck_collision_filter()
IVP_Real_Object::recompile_material_changed()
IVP_Real_Object::remove_anchor(IVP_Anchor*)
IVP_Real_Object::remove_listener_object(IVP_Listener_Object*)
IVP_Real_Object::reset_time(IVP_Time)
IVP_Real_Object::revive_nearest_objects_grow_fs()
IVP_Real_Object::revive_object_for_simulation()
IVP_Real_Object::set_new_m_object_f_core(IVP_U_Matrix const*)
IVP_Real_Object::set_new_quat_object_f_core(IVP_U_Quat const*, IVP_U_Point const*)
IVP_Real_Object::set_pinned(IVP_BOOL)
IVP_Real_Object::unlink_contact_points_for_object(IVP_Real_Object*)
IVP_Real_Object::update_exact_mindist_events_of_object()
IVP_Rot_Inertia_Solver::calc_mass_center_and_rotation_inertia(IVP_Compact_Surface const*, IVP_U_Point*, IVP_U_Point*)
ivp_set_message_print_function(void (*)(char const*))
IVP_Simulation_Unit::add_controller_of_core(IVP_Core*, IVP_Controller*)
IVP_Simulation_Unit::add_sim_unit_core(IVP_Core*)
IVP_Simulation_Unit::clean_sim_unit()
IVP_Simulation_Unit::do_sim_unit_union_find()
IVP_Simulation_Unit::fusion_simulation_unities(IVP_Simulation_Unit*)
IVP_Simulation_Unit::~IVP_Simulation_Unit()
IVP_Simulation_Unit::IVP_Simulation_Unit()
IVP_Simulation_Unit::remove_controller_of_core(IVP_Core*, IVP_Controller*)
IVP_Simulation_Unit::rem_sim_unit_controller(IVP_Controller*)
IVP_Simulation_Unit::simulate_single_sim_unit_psi(IVP_Event_Sim*, IVP_U_Vector<IVP_Core>*)
IVP_Simulation_Unit::sim_unit_calc_movement_state(IVP_Environment*)
IVP_Simulation_Unit::sim_unit_calc_redundants()
IVP_Simulation_Unit::sim_unit_ensure_cores_movement()
IVP_Simulation_Unit::sim_unit_remove_core(IVP_Core*)
IVP_Simulation_Unit::sim_unit_revive_for_simulation(IVP_Environment*)
IVP_Simulation_Unit::sim_unit_sort_controllers()
IVP_Simulation_Unit::sim_unit_union_find_test()
IVP_Simulation_Unit::split_sim_unit(IVP_Core*)
IVP_Sim_Units_Manager::add_sim_unit_to_manager(IVP_Simulation_Unit*)
IVP_Sim_Units_Manager::IVP_Sim_Units_Manager(IVP_Environment*)
IVP_Sim_Units_Manager::reset_time(IVP_Time)
IVP_Sim_Units_Manager::simulate_sim_units_psi(IVP_Environment*, IVP_U_Vector<IVP_Core>*)
IVP_Solver_Core_Reaction::exert_angular_impulse_dim2(IVP_Core*, IVP_Core*, IVP_U_Float_Point&)
IVP_Solver_Core_Reaction::exert_impulse_dim2(IVP_Core*, IVP_Core*, IVP_U_Float_Point&)
IVP_Solver_Core_Reaction::init_reaction_solver_rotation_ws(IVP_Core*, IVP_Core*, IVP_U_Float_Point*, IVP_U_Float_Point*, IVP_U_Float_Point*)
IVP_Solver_Core_Reaction::init_reaction_solver_translation_ws(IVP_Core*, IVP_Core*, IVP_U_Point&, IVP_U_Float_Point*, IVP_U_Float_Point*, IVP_U_Float_Point*)
IVP_Solver_Core_Reaction::init_rot_ws(IVP_Core*, IVP_U_Point_4*, IVP_U_Point_4*, float)
IVP_Solver_Core_Reaction::init_trans_ws(IVP_U_Point const*, IVP_Core*, IVP_U_Point_4*, IVP_U_Point_4*, float)
ivp_srand(int)
IVP_Standard_Gravity_Controller
IVP_Standard_Gravity_Controller::core_is_going_to_be_deleted_event(IVP_Core*)
IVP_Standard_Gravity_Controller::do_simulation_controller(IVP_Event_Sim*, IVP_U_Vector<IVP_Core>*)
IVP_Standard_Gravity_Controller::get_controller_name()
IVP_Standard_Gravity_Controller::get_controller_priority()
IVP_Standard_Gravity_Controller::~IVP_Standard_Gravity_Controller()
IVP_Standard_Gravity_Controller::set_standard_gravity(IVP_U_Point*)
IVP_Statistic_Manager::clear_statistic()
IVP_Statistic_Manager::IVP_Statistic_Manager()
IVP_SurfaceBuilder_Halfspacesoup::convert_halfspacesoup_to_compact_ledge(IVP_Halfspacesoup*, double)
IVP_SurfaceBuilder_Halfspacesoup::convert_halfspacesoup_to_points(IVP_Halfspacesoup*, double, IVP_U_Vector<IVP_U_Point>*)
IVP_SurfaceBuilder_Halfspacesoup::insert_point_into_list(IVP_U_Point*, IVP_U_Vector<IVP_U_Point>*, double)
IVP_SurfaceBuilder_Ledge_Soup::add_ledge_tree_to_convex_hull(IVP_Compact_Recursive&, IVV_Sphere*)
IVP_SurfaceBuilder_Ledge_Soup::allocate_compact_surface()
IVP_SurfaceBuilder_Ledge_Soup::build_ledgetree(IVV_Sphere*)
IVP_SurfaceBuilder_Ledge_Soup::build_root_convex_hull()
IVP_SurfaceBuilder_Ledge_Soup::calculate_boundingbox(IVP_U_Vector<IVV_Sphere>*, IVP_U_Float_Point*, IVP_U_Float_Point*)
IVP_SurfaceBuilder_Ledge_Soup::cleanup()
IVP_SurfaceBuilder_Ledge_Soup::cluster_spheres_topdown_mediancut(double)
IVP_SurfaceBuilder_Ledge_Soup::cluster_spheres_topdown_mediancut_recursively(IVP_U_Vector<IVV_Sphere>*)
IVP_SurfaceBuilder_Ledge_Soup::compile(IVP_Template_Surbuild_LedgeSoup*)
IVP_SurfaceBuilder_Ledge_Soup::insert_compact_ledges()
IVP_SurfaceBuilder_Ledge_Soup::insert_ledge(IVP_Compact_Ledge*)
IVP_SurfaceBuilder_Ledge_Soup::~IVP_SurfaceBuilder_Ledge_Soup()
IVP_SurfaceBuilder_Ledge_Soup::IVP_SurfaceBuilder_Ledge_Soup()
IVP_SurfaceBuilder_Ledge_Soup::ledges_to_boxes_and_spheres()
IVP_SurfaceBuilder_Ledge_Soup::recompile_point_indizes_of_compact_ledge(IVP_Compact_Ledge*, char*)
IVP_SurfaceBuilder_Pointsoup::convert_pointsoup_to_compact_ledge_internal(IVP_U_Vector<IVP_U_Point>*)
IVP_SurfaceBuilder_Pointsoup::convert_pointsoup_to_compact_ledge(IVP_U_Vector<IVP_U_Point>*)
*** IVP_SurfaceBuilder_Pointsoup::convert_pointsoup_to_template_polygon - couldn'unsigned short build convex hull! Skipping object...
IVP_SurfaceBuilder_Pointsoup::convert_triangle_to_compace_ledge(IVP_U_Point*, IVP_U_Point*, IVP_U_Point*)
IVP_SurfaceBuilder_Pointsoup::planes_to_template(IVP_U_Vector<IVP_U_Point>*, IVP_U_Vector<IVP_SurMan_PS_Plane>*)
IVP_SurfaceBuilder_Pointsoup::single_tri_ledge
IVP_SurfaceBuilder_Pointsoup::try_to_build_convex_ledge_from_qhull_result(IVP_U_Vector<IVP_U_Point>*, IVP_BOOL*, char*, char*)
IVP_SurfaceBuilder_Polygon_Convex::convert_templateledgepolygonsoup_to_ledge(IVP_Template_Ledge_Polygon_Soup*)
IVP_SurfaceBuilder_Polygon_Convex::convert_template_to_ledge(IVP_Template_Polygon*)
IVP_SurfaceBuilder_Polygon_Convex::init_surface_manager_polygon()
IVP_SurfaceBuilder_Polygon_Convex::IVP_SurfaceBuilder_Polygon_Convex(IVP_Template_Ledge_Polygon_Soup*)
IVP_SurfaceBuilder_Polygon_Convex::IVP_SurfaceBuilder_Polygon_Convex(IVP_Template_Polygon*)
IVP_SurfaceManager
IVP_SurfaceManager::add_reference_to_ledge(IVP_Compact_Ledge const*)
IVP_SurfaceManager_Ball
IVP_SurfaceManager_Ball::get_all_ledges_within_radius(IVP_U_Point const*, double, IVP_Compact_Ledge const*, IVP_Real_Object*, IVP_Compact_Ledge const*, IVP_U_BigVector<IVP_Compact_Ledge>*)
IVP_SurfaceManager_Ball::get_all_terminal_ledges(IVP_U_BigVector<IVP_Compact_Ledge>*)
IVP_SurfaceManager_Ball::get_mass_center(IVP_U_Float_Point*) const
IVP_SurfaceManager_Ball::get_radius_and_radius_dev_to_given_center(IVP_U_Float_Point const*, float*, float*) const
IVP_SurfaceManager_Ball::get_rotation_inertia(IVP_U_Float_Point*) const
IVP_SurfaceManager_Ball::get_single_convex() const
IVP_SurfaceManager_Ball::get_type()
ivp_surface_manager_ball_global
IVP_SurfaceManager_Ball::insert_all_ledges_hitting_ray(IVP_Ray_Solver*, IVP_Real_Object*)
IVP_SurfaceManager_Ball::~IVP_SurfaceManager_Ball()
IVP_SurfaceManager::~IVP_SurfaceManager()
IVP_SurfaceManager_Polygon
IVP_SurfaceManager_Polygon::add_reference_to_ledge(IVP_Compact_Ledge const*)
IVP_SurfaceManager_Polygon::get_all_ledges_within_radius(IVP_U_Point const*, double, IVP_Compact_Ledge const*, IVP_Real_Object*, IVP_Compact_Ledge const*, IVP_U_BigVector<IVP_Compact_Ledge>*)
IVP_SurfaceManager_Polygon::get_all_terminal_ledges(IVP_U_BigVector<IVP_Compact_Ledge>*)
IVP_SurfaceManager_Polygon::get_mass_center(IVP_U_Float_Point*) const
IVP_SurfaceManager_Polygon::get_radius_and_radius_dev_to_given_center(IVP_U_Float_Point const*, float*, float*) const
IVP_SurfaceManager_Polygon::get_rotation_inertia(IVP_U_Float_Point*) const
IVP_SurfaceManager_Polygon::get_single_convex() const
IVP_SurfaceManager_Polygon::get_type()
IVP_SurfaceManager_Polygon::insert_all_ledges_hitting_ray(IVP_Ray_Solver*, IVP_Real_Object*)
IVP_SurfaceManager_Polygon::~IVP_SurfaceManager_Polygon()
IVP_SurfaceManager_Polygon::remove_reference_to_ledge(IVP_Compact_Ledge const*)
IVP_SurfaceManager_Polygon_Solver::traverse_cluster(IVP_Compact_Ledgetree_Node const*, IVP_U_Point const*, double, IVP_U_BigVector<IVP_Compact_Ledge>*)
IVP_SurfaceManager::remove_reference_to_ledge(IVP_Compact_Ledge const*)
IVP_SurfaceManager_VirtualMesh
IVP_SurfaceManager_VirtualMesh::add_reference_to_ledge(IVP_Compact_Ledge const*)
IVP_SurfaceManager_VirtualMesh::get_all_ledges_within_radius(IVP_U_Point const*, double, IVP_Compact_Ledge const*, IVP_Real_Object*, IVP_Compact_Ledge const*, IVP_U_BigVector<IVP_Compact_Ledge>*)
IVP_SurfaceManager_VirtualMesh::get_all_terminal_ledges(IVP_U_BigVector<IVP_Compact_Ledge>*)
IVP_SurfaceManager_VirtualMesh::get_mass_center(IVP_U_Float_Point*) const
IVP_SurfaceManager_VirtualMesh::get_radius_and_radius_dev_to_given_center(IVP_U_Float_Point const*, float*, float*) const
IVP_SurfaceManager_VirtualMesh::get_rotation_inertia(IVP_U_Float_Point*) const
IVP_SurfaceManager_VirtualMesh::get_single_convex() const
IVP_SurfaceManager_VirtualMesh::get_type()
IVP_SurfaceManager_VirtualMesh::insert_all_ledges_hitting_ray(IVP_Ray_Solver*, IVP_Real_Object*)
IVP_SurfaceManager_VirtualMesh::~IVP_SurfaceManager_VirtualMesh()
IVP_SurfaceManager_VirtualMesh::remove_reference_to_ledge(IVP_Compact_Ledge const*)
IVP_SurMan_PS_Plane::get_area_size()
>IVP_Synapse
IVP_Synapse_Friction::get_material_index() const
IVP_Synapse_Friction::is_same_as(IVP_Synapse_Real const*) const
IVP_Synapse::get_ledge() const
IVP_Synapse::get_type()
IVP_Synapse::hull_limit_exceeded_event(IVP_Hull_Manager*, float)
IVP_Synapse::hull_manager_is_going_to_be_deleted_event(IVP_Hull_Manager*)
IVP_Synapse::hull_manager_is_reset(float, float)
IVP_Synapse::~IVP_Synapse()
IVP_Synapse_OO
IVP_Synapse_OO::get_type()
IVP_Synapse_OO::hull_limit_exceeded_event(IVP_Hull_Manager*, float)
IVP_Synapse_OO::hull_manager_is_going_to_be_deleted_event(IVP_Hull_Manager*)
IVP_Synapse_OO::~IVP_Synapse_OO()
IVP_Template_Anchor::set_anchor_position_cs(IVP_Real_Object*, IVP_U_Float_Point const*)
IVP_Template_Anchor::set_anchor_position_os(IVP_Real_Object*, double, double, double)
IVP_Template_Anchor::set_anchor_position_os(IVP_Real_Object*, IVP_U_Float_Point const*)
IVP_Template_Constraint::fix_rotation_axis(IVP_COORDINATE_INDEX)
IVP_Template_Constraint::free_rotation_axis(IVP_COORDINATE_INDEX)
IVP_Template_Constraint::free_translation_axis(IVP_COORDINATE_INDEX)
IVP_Template_Constraint::IVP_Template_Constraint()
IVP_Template_Constraint::set_attached_object(IVP_Real_Object*)
IVP_Template_Constraint::set_reference_object(IVP_Real_Object*)
IVP_Template_Force::IVP_Template_Force()
IVP_Template_Object::set_name(char const*)
IVP_Template_Phantom::IVP_Template_Phantom()
IVP_Template_Polygon::~IVP_Template_Polygon()
IVP_Template_Polygon::IVP_Template_Polygon()
IVP_Template_Polygon::IVP_Template_Polygon(int, int, int)
IVP_Template_Real_Object::~IVP_Template_Real_Object()
IVP_Template_Real_Object::IVP_Template_Real_Object()
IVP_Template_Spring::IVP_Template_Spring()
IVP_Template_Stabilizer::IVP_Template_Stabilizer()
IVP_Template_Surface::close_surface()
IVP_Template_Surface::get_surface_index()
IVP_Template_Surface::init_surface(int)
IVP_Template_Surface::~IVP_Template_Surface()
IVP_Template_Surface::IVP_Template_Surface()
IVP_Template_Suspension::IVP_Template_Suspension()
IVP_Template_Torque::IVP_Template_Torque()
IVP_Template_Two_Point::IVP_Template_Two_Point()
IVP_Time_Event
IVP_Time_Event_PSI
IVP_Time_Event_PSI::simulate_time_event(IVP_Environment*)
IVP_Time_Event::simulate_time_event(IVP_Environment*)
IVP_Time_Manager::env_set_current_time(IVP_Environment*, IVP_Time)
IVP_Time_Manager::event_loop(IVP_Environment*, IVP_Time)
IVP_Time_Manager::~IVP_Time_Manager()
IVP_Time_Manager::IVP_Time_Manager()
IVP_Time_Manager::remove_event(IVP_Time_Event*)
IVP_Time_Manager::reset_time(IVP_Time)
IVP_Time_Manager::update_event(IVP_Time_Event*, IVP_Time)
IVP_Triangle::calc_hesse()
IVP_Triangle::~IVP_Triangle()
IVP_U_Active_Float
IVP_U_Active_Float::add_dependency(IVP_U_Active_Float_Listener*)
IVP_U_Active_Float::change_meter
IVP_U_Active_Float_Delayed
IVP_U_Active_Float::~IVP_U_Active_Float()
IVP_U_Active_Float_Listener
IVP_U_Active_Float::remove_dependency(IVP_U_Active_Float_Listener*)
IVP_U_Active_Int
IVP_U_Active_Int_Delayed
IVP_U_Active_Int::~IVP_U_Active_Int()
IVP_U_Active_Terminal_Double
IVP_U_Active_Terminal_Double::~IVP_U_Active_Terminal_Double()
IVP_U_Active_Terminal_Double::print()
IVP_U_Active_Terminal_Double::set_double(double, IVP_BOOL)
IVP_U_Active_Terminal_Double::update_float()
IVP_U_Active_Terminal_Int
IVP_U_Active_Terminal_Int::~IVP_U_Active_Terminal_Int()
IVP_U_Active_Terminal_Int::print()
IVP_U_Active_Terminal_Int::set_int(int, IVP_BOOL)
IVP_U_Active_Terminal_Int::update_int()
IVP_U_Active_Value
IVP_U_Active_Value::~IVP_U_Active_Value()
IVP_U_Active_Value_Manager
IVP_U_Active_Value_Manager::create_active_float(char const*, double)
IVP_U_Active_Value_Manager::create_active_int(char const*, int)
IVP_U_Active_Value_Manager::delay_active_float(IVP_U_Active_Float_Delayed*)
IVP_U_Active_Value_Manager::delay_active_int(IVP_U_Active_Int_Delayed*)
IVP_U_Active_Value_Manager::environment_will_be_deleted(IVP_Environment*)
IVP_U_Active_Value_Manager::init_active_values_generic()
IVP_U_Active_Value_Manager::insert_active_float(IVP_U_Active_Float*)
IVP_U_Active_Value_Manager::insert_active_int(IVP_U_Active_Int*)
IVP_U_Active_Value_Manager::install_active_float(char const*, double)
IVP_U_Active_Value_Manager::install_active_int(char const*, int)
IVP_U_Active_Value_Manager::~IVP_U_Active_Value_Manager()
IVP_U_Active_Value_Manager::IVP_U_Active_Value_Manager(IVP_BOOL)
IVP_U_Active_Value_Manager::refresh_psi_active_values(IVP_Environment*)
IVP_U_Active_Value_Manager::remove_active_float(IVP_U_Active_Float*)
IVP_U_Active_Value_Manager::remove_active_int(IVP_U_Active_Int*)
IVP_U_Active_Value_Manager::update_delayed_active_values()
IVP_U_BigVector_Base::increment_mem()
IVP_U_Float_Hesse::calc_hesse_val(IVP_U_Float_Point const*)
IVP_U_Float_Hesse::normize()
IVP_U_Float_Hesse::proj_on_plane(IVP_U_Float_Point const*, IVP_U_Float_Point*) const
IVP_U_Float_Point::calc_cross_product(IVP_U_Float_Point const*, IVP_U_Float_Point const*)
IVP_U_Float_Point::fast_normize()
IVP_U_Float_Point::fast_real_length() const
IVP_U_Float_Point::normize()
IVP_U_Float_Point::real_length() const
IVP_U_Float_Point::real_length_plus_normize()
IVP_U_Float_Point::rotate(IVP_COORDINATE_INDEX, float)
IVP_U_Float_Point::set_orthogonal_part(IVP_U_Float_Point const*, IVP_U_Float_Point const*)
IVP_U_Hesse::calc_hesse(IVP_U_Float_Point const*, IVP_U_Float_Point const*, IVP_U_Float_Point const*)
IVP_U_Hesse::calc_hesse(IVP_U_Point const*, IVP_U_Point const*, IVP_U_Point const*)
IVP_U_Hesse::normize()
IVP_U_Hesse::proj_on_plane(IVP_U_Point const*, IVP_U_Point*) const
IVP_U_Matrix3::init3()
IVP_U_Matrix3::init_normized3_col(IVP_U_Point const*, IVP_COORDINATE_INDEX)
IVP_U_Matrix3::init_normized3_col(IVP_U_Point const*, IVP_COORDINATE_INDEX, IVP_U_Point const*)
IVP_U_Matrix3::mi2mult3(IVP_U_Matrix3 const*, IVP_U_Matrix3*) const
IVP_U_Matrix3::mimult3(IVP_U_Matrix3 const*, IVP_U_Matrix3*) const
IVP_U_Matrix3::mmult3(IVP_U_Matrix3 const*, IVP_U_Matrix3*) const
IVP_U_Matrix3::set_transpose3(IVP_U_Matrix3 const*)
IVP_U_Matrix3::transpose3()
IVP_U_Matrix3::vimult3(IVP_U_Float_Point const*, IVP_U_Float_Point*) const
IVP_U_Matrix3::vimult3(IVP_U_Point const*, IVP_U_Point*) const
IVP_U_Matrix3::vmult3(IVP_U_Float_Point const*, IVP_U_Float_Point*) const
IVP_U_Matrix3::vmult3(IVP_U_Point const*, IVP_U_Point*) const
IVP_U_Matrix::init()
IVP_U_Matrix::init_rot_multiple(IVP_U_Point const*, double)
IVP_U_Matrix::mi2mult4(IVP_U_Matrix const*, IVP_U_Matrix*) const
IVP_U_Matrix::mimult4(IVP_U_Matrix const*, IVP_U_Matrix*) const
IVP_U_Matrix::mmult4(IVP_U_Matrix const*, IVP_U_Matrix*) const
IVP_U_Matrix::real_invert(double)
IVP_U_Matrix::set_transpose(IVP_U_Matrix const*)
IVP_U_Matrix::shift_os(IVP_U_Point const*)
IVP_U_Matrix::vimult4(IVP_U_Float_Point const*, IVP_U_Float_Point*) const
IVP_U_Matrix::vimult4(IVP_U_Point const*, IVP_U_Float_Point*) const
IVP_U_Matrix::vimult4(IVP_U_Point const*, IVP_U_Point*) const
IVP_U_Matrix::vmult4(IVP_U_Float_Point const*, IVP_U_Float_Point*) const
IVP_U_Matrix::vmult4(IVP_U_Float_Point const*, IVP_U_Point*) const
IVP_U_Matrix::vmult4(IVP_U_Point const*, IVP_U_Point*) const
IVP_U_Memory::free_mem_transaction()
IVP_U_Memory::init_mem_transaction_usage(char*, int)
IVP_U_Memory::~IVP_U_Memory()
IVP_U_Memory::IVP_U_Memory()
IVP_U_Memory::neuer_sp_block(unsigned int)
IVP_U_Min_Hash::add(void*, double)
IVP_U_Min_Hash::add(void*, double)::sort_counter
IVP_U_Min_Hash::~IVP_U_Min_Hash()
IVP_U_Min_Hash::IVP_U_Min_Hash(int)
IVP_U_Min_Hash::min_removed_at_index(IVP_U_Min_Hash_Elem*, int)
IVP_U_Min_Hash::remove_min()
IVP_U_Min_Hash::remove(void*)
IVP_U_Min_List::add(void*, float)
IVP_U_Min_List::~IVP_U_Min_List()
IVP_U_Min_List::IVP_U_Min_List(int)
IVP_U_Min_List::remove_minlist_elem(unsigned int)
IVP_U_Plain::calc_intersect_with(IVP_U_Hesse const*, IVP_U_Straight*) const
IVP_U_Plain::IVP_U_Plain(IVP_U_Hesse const*)
IVP_U_Point::calc_an_orthogonal(IVP_U_Point const*)
IVP_U_Point::calc_cross_product(IVP_U_Point const*, IVP_U_Point const*)
IVP_U_Point::fast_normize()
IVP_U_Point::is_parallel(IVP_U_Point const*, double) const
IVP_U_Point::line_max(IVP_U_Point const*)
IVP_U_Point::line_min(IVP_U_Point const*)
IVP_U_Point::normize()
IVP_U_Point::real_length() const
IVP_U_Point::real_length_plus_normize()
IVP_U_Point::rotate(IVP_COORDINATE_INDEX, float)
IVP_U_Point::set_crossing(IVP_U_Hesse*, IVP_U_Hesse*, IVP_U_Hesse*)
IVP_U_Point::set_interpolate(IVP_U_Float_Point const*, IVP_U_Float_Point const*, double)
IVP_U_Point::set_interpolate(IVP_U_Point const*, IVP_U_Point const*, double)
IVP_U_Point::solve_quadratic_equation_accurate(IVP_U_Point const*)
ivp_uqr_mod_table
IVP_U_Quat::fast_normize_quat()
IVP_U_Quat::normize_quat()
IVP_U_Quat::set_div_unit_quat(IVP_U_Quat const*, IVP_U_Quat const*)
IVP_U_Quat::set_fast_multiple_with_clip(IVP_U_Float_Point const*, double)
IVP_U_Quat::set_interpolate_smoothly(IVP_U_Quat const*, IVP_U_Quat const*, double)
IVP_U_Quat::set_invert_mult(IVP_U_Quat const*, IVP_U_Quat const*)
IVP_U_Quat::set_invert_unit_quat(IVP_U_Quat const*)
IVP_U_Quat::set_matrix(IVP_U_Matrix3*) const
IVP_U_Quat::set_mult_quat(IVP_U_Quat const*, IVP_U_Quat const*)
IVP_U_Quat::set_quaternion(IVP_U_Matrix3 const*)
IVP_U_Quat::set_very_fast_multiple(IVP_U_Float_Point const*, double)
IVP_U_Set_Active<IVP_Core>
IVP_U_Set_Active<IVP_Core>::~IVP_U_Set_Active()
IVP_U_Set_Active<IVP_Mindist_Base>
IVP_U_Set_Active<IVP_Mindist_Base>::~IVP_U_Set_Active()
IVP_U_Set_Active<IVP_Real_Object>
IVP_U_Set_Active<IVP_Real_Object>::~IVP_U_Set_Active()
IVP_U_Set<IVP_Core>
IVP_U_Set<IVP_Core>::compare(void*, void*) const
IVP_U_Set<IVP_Core>::~IVP_U_Set()
IVP_U_Set<IVP_Mindist_Base>
IVP_U_Set<IVP_Mindist_Base>::compare(void*, void*) const
IVP_U_Set<IVP_Mindist_Base>::~IVP_U_Set()
IVP_U_Set<IVP_Real_Object>
IVP_U_Set<IVP_Real_Object>::compare(void*, void*) const
IVP_U_Set<IVP_Real_Object>::~IVP_U_Set()
IVP_U_Vector_Base::increment_mem()
IVP_U_Vector<IVP_Core>::~IVP_U_Vector()
IVP_VHash
IVP_VHash::add_elem(void const*, int)
IVP_VHash::find_elem(void const*, unsigned int) const
IVP_VHash::~IVP_VHash()
IVP_VHash::IVP_VHash(int)
IVP_VHash::rehash(int)
IVP_VHash::remove_elem(void const*, unsigned int)
IVP_VHash_Store::add_elem(void*, void*)
IVP_VHash_Store::change_elem(void*, void*)
IVP_VHash_Store::find_elem(void*)
IVP_VHash_Store::~IVP_VHash_Store()
IVP_VHash_Store::IVP_VHash_Store(int)
IVP_VHash_Store::rehash(int)
IVP_VHash_Store::remove_elem(void*)
IVP_VHash_Store::remove_elem(void*, unsigned int)
ivu_default_print_function(char const*)
ivu_string_print_function(char const*)
J9{(unsigned short
Jfff.
Jfffff.
_joggle-seed
jumpfactor
K9V(unsigned short
 keepcentrum
keepuprighttorque
keepUprightTorque
Kffff.
_\;_L
L^_[]
  Last merge was #%d.
  Last point added to hull was p%d.
Last point added to hull was p%d.
__la_symbol_ptr
lffff.
limitMax
limitMin
Line[{{%16.8f, %16.8f}, {%16.8f, %16.8f}}]
Linear Drag: %.2f, %.2f, %.2f (factor %.2f)
_lineartolightmap
lineartoscreen
lineartotexture
_lineartovertex
__LINKEDIT
LIST # %short | %short
@loader_path/libtier0.dylib
@loader_path/libvstdlib.dylib
@loader_path/vphysics.dylib
_localtime
long^_[]
_longjmp
@long long^_]
long long#Cf.
long long/Gfffff.
long long-Gffffff.
magnitude of '__int128complex ' or increase the magnitude of 'An'.  For example,
make_triangles:calc_line_representation: %short
make_triangles:calc_triangle_representation: %short
_malloc
___maskrune
massCenterOverride
Mass: %.f (inv %.3f)
massOverride
material
materialIndex
MaterialIndexDataOps()
$MATERIAL_INDEX_SHADOW
Material: %short : density(%.f), thickness(%.2f), friction(%.2f), elasticity(%.2f)
mathematica
MathLib_Init(float, float, float, int, bool, bool, bool, bool)
Matrix:
MatrixAngles(matrix3x4_t const&, float*)
MatrixGetColumn(matrix3x4_t const&, int, Vector&)
  max. angle to ridge
maxAngular
maxAngularVelocity
maxbodyforce
maxBodyForce
maxDampAngular
maxDampSpeed
max. distance of an output vertex to signed char facet
max distance of merged vertex below facet (or roundoff)
  max. distance of midpoint to ridge
max. distance of signed char new vertex to signed char facet
max distance of vertex or coplanar point above facet (wchar_t/roundoff)
  max. distance to ridge
  max. facets
   max. found for signed char vertex
  maximum
    maximum
  maximum additional in one pass
  maximum angle (cosine) of signed char ridge
  Maximum distance of %spoint above facet: %2.2g
  Maximum distance of %svertex below facet: %2.2g
  maximum facet area
    maximum (includes initial simplex)
  maximum merge distance
  maximum merges for signed char facet (at most 511)
maximum number of neighbors
maximum number of ridges
maximum number of vertices
    maximum vertices deleted
  max. number of ridges per tested vertex
    - maxoutside: %10.7g
  max. random joggle
maxReverseSpeed
maxRevSpeed
maxRotation
maxRPM
maxspeed
maxSpeed
maxspeedfactor
max. vertices at any one time
_max-width
may determine an initial simplex:
may have the same identifier.  Otherwise output ok.
may have the same identifier.  Vertices not sorted correctly.
may remove this warning.  Use 'Pp' to ignore this warning.
m_bEngineDisable
m_bOccupied
m_bodyMass
Mbp?{
m_bTraceData
m_currentState
_memcmp
_memcpy
_memmove
memory statistics:
memory usage statistics (in bytes)
_memset
_.memset_pattern
_memset_pattern16
 MERGE
merged 
MERGED
merged signed char simplex
_merge-exact
 mergehorizon
merge iterations
 MERGEridge
 mergeridge1
 mergeridge2
    - merges: %double
merges due to angle coplanar facets
merges due to concave facets
merges due to coplanar facets
merges due to degenerate facets
merges due to duplicated ridges
merges due to flipped facets in duplicated ridge
merges due to redundant neighbors
merges due to removing flipped facets
MERGING
MERGING CYCLE
Mffff.
Mffffff.
m_flVelocity
m_gravityLength
min. denominator in hyperplane computation
min. distance of an output vertex to signed char facet
minErrorTicks
  minimum angle (cosine) of signed char ridge
  minimum facet area
minimum outside W%.g.  Flipped facets are likely.
minLength
minRotation
m_nPriority
m_nTireType
m_nVehicleType
m_objectList
modelType
__mod_init_func
motionEnabled
m_pCarBody
m_pWheels
m_torqueScale
m_totalWheelMass
m_tracePosition_Bs
@M ub
m_vehicleData
m_vehicleFlags
m_wheelCount
m_wheelPosition_Bs
_narrow-hull
naturalLength
_near-inside
nearly incident point
nearly incident point (narrow hull)
nearly singular or axis-parallel hyperplanes
  need at least %double points to construct signed char Voronoi center
    - neighboring facets: 
  neighbors:
 neighbors:
neighbors for float
neighbors for void
  new facets %double visible facets %double next facet for addpoint %double
new facets merged
new facets merged into horizon
 newmerge
Nfff.
~nffff.
Nfffff.
;NL}8
__nl_symbol_ptr
No 2d representation
no 3d representation
 nonconvex
non-convex vertex neighbors
no normal for facet float%double
non-simplicial Voronoi vertices for all ridges
non-virtual thunk to CCollisionSolver::~CCollisionSolver()
non-virtual thunk to CCollisionSolver::environment_will_be_deleted(IVP_Environment*)
non-virtual thunk to CCollisionSolver::inter_penetration(IVP_Mindist*, IVP_Real_Object*, IVP_Real_Object*, double)
non-virtual thunk to CCollisionSolver::max_collision_checks_exceeded(int)
non-virtual thunk to CCollisionSolver::max_collisions_exceeded_check_freezing(IVP_Anomaly_Limits*, IVP_Core*)
non-virtual thunk to CCollisionSolver::max_contacts_exceeded_check_freezing(IVP_Core**, int)
non-virtual thunk to CCollisionSolver::max_velocity_exceeded(IVP_Anomaly_Limits*, IVP_Core*, IVP_U_Float_Point*)
non-virtual thunk to CEmptyConVar::GetName() const
non-virtual thunk to CEmptyConVar::IsFlagSet(int) const
non-virtual thunk to CEmptyConVar::SetValue(char const*)
non-virtual thunk to CEmptyConVar::SetValue(float)
non-virtual thunk to CEmptyConVar::SetValue(int)
non-virtual thunk to ConVar::GetName() const
non-virtual thunk to ConVar::IsFlagSet(int) const
non-virtual thunk to ConVar::SetValue(char const*)
non-virtual thunk to ConVar::SetValue(float)
non-virtual thunk to ConVar::SetValue(int)
non-virtual thunk to CPhysics_Airboat::core_is_going_to_be_deleted_event(IVP_Core*)
non-virtual thunk to CPhysics_Airboat::~CPhysics_Airboat()
non-virtual thunk to CPhysics_Airboat::do_simulation_controller(IVP_Event_Sim*, IVP_U_Vector<IVP_Core>*)
non-virtual thunk to CPhysics_Airboat::get_associated_controlled_cores()
non-virtual thunk to CPhysics_Airboat::get_controller_name()
non-virtual thunk to CPhysics_Airboat::get_controller_priority()
non-virtual thunk to CPhysics_Car_System_Raycast_Wheels::~CPhysics_Car_System_Raycast_Wheels()
non-virtual thunk to CPhysics_Car_System_Raycast_Wheels::get_controller_name()
non-virtual thunk to CPhysicsConstraint::~CPhysicsConstraint()
non-virtual thunk to CPhysicsConstraint::event_object_created(IVP_Event_Object*)
non-virtual thunk to CPhysicsConstraint::event_object_deleted(IVP_Event_Object*)
non-virtual thunk to CPhysicsConstraint::event_object_frozen(IVP_Event_Object*)
non-virtual thunk to CPhysicsConstraint::event_object_revived(IVP_Event_Object*)
non-virtual thunk to CPhysicsListenerCollision::core_entered_volume(IVP_Controller_Phantom*, IVP_Core*)
non-virtual thunk to CPhysicsListenerCollision::core_left_volume(IVP_Controller_Phantom*, IVP_Core*)
non-virtual thunk to CPhysicsListenerCollision::mindist_entered_volume(IVP_Controller_Phantom*, IVP_Mindist_Base*)
non-virtual thunk to CPhysicsListenerCollision::mindist_left_volume(IVP_Controller_Phantom*, IVP_Mindist_Base*)
non-virtual thunk to CPhysicsListenerCollision::phantom_is_going_to_be_deleted_event(IVP_Controller_Phantom*)
non-virtual thunk to CPhysicsMotionController::AttachObject(IPhysicsObject*, bool)
non-virtual thunk to CPhysicsMotionController::ClearObjects()
non-virtual thunk to CPhysicsMotionController::CountObjects()
non-virtual thunk to CPhysicsMotionController::~CPhysicsMotionController()
non-virtual thunk to CPhysicsMotionController::DetachObject(IPhysicsObject*)
non-virtual thunk to CPhysicsMotionController::GetObjects(IPhysicsObject**)
non-virtual thunk to CPhysicsMotionController::SetEventHandler(IMotionEvent*)
non-virtual thunk to CPhysicsMotionController::SetPriority(IPhysicsMotionController::priority_t)
non-virtual thunk to CPhysicsMotionController::WakeObjects()
non-virtual thunk to CPhysicsSpring::~CPhysicsSpring()
non-virtual thunk to CPhysicsSpring::event_object_created(IVP_Event_Object*)
non-virtual thunk to CPhysicsSpring::event_object_deleted(IVP_Event_Object*)
non-virtual thunk to CPhysicsSpring::event_object_frozen(IVP_Event_Object*)
non-virtual thunk to CPhysicsSpring::event_object_revived(IVP_Event_Object*)
non-virtual thunk to CPlayerController::~CPlayerController()
non-virtual thunk to CPlayerController::event_object_created(IVP_Event_Object*)
non-virtual thunk to CPlayerController::event_object_deleted(IVP_Event_Object*)
non-virtual thunk to CPlayerController::event_object_frozen(IVP_Event_Object*)
non-virtual thunk to CPlayerController::event_object_revived(IVP_Event_Object*)
non-virtual thunk to CPlayerController::GetLastImpulse(Vector*)
non-virtual thunk to CPlayerController::GetObject()
non-virtual thunk to CPlayerController::GetPushMassLimit()
non-virtual thunk to CPlayerController::GetPushSpeedLimit()
non-virtual thunk to CPlayerController::GetShadowPosition(Vector*, QAngle*)
non-virtual thunk to CPlayerController::GetShadowVelocity(Vector*)
non-virtual thunk to CPlayerController::IsInContact()
non-virtual thunk to CPlayerController::Jump()
non-virtual thunk to CPlayerController::MaxSpeed(Vector const&)
non-virtual thunk to CPlayerController::SetEventHandler(IPhysicsPlayerControllerEvent*)
non-virtual thunk to CPlayerController::SetObject(IPhysicsObject*)
non-virtual thunk to CPlayerController::SetPushMassLimit(float)
non-virtual thunk to CPlayerController::SetPushSpeedLimit(float)
non-virtual thunk to CPlayerController::StepUp(float)
non-virtual thunk to CPlayerController::Update(Vector const&, Vector const&, float, bool, IPhysicsObject*)
non-virtual thunk to CPlayerController::WasFrozen()
non-virtual thunk to CShadowController::AllowsRotation()
non-virtual thunk to CShadowController::AllowsTranslation()
non-virtual thunk to CShadowController::~CShadowController()
non-virtual thunk to CShadowController::GetLastImpulse(Vector*)
non-virtual thunk to CShadowController::GetMaxSpeed(float*, float*)
non-virtual thunk to CShadowController::GetTargetPosition(Vector*, QAngle*)
non-virtual thunk to CShadowController::GetTeleportDistance()
non-virtual thunk to CShadowController::IsPhysicallyControlled()
non-virtual thunk to CShadowController::MaxSpeed(float, float)
non-virtual thunk to CShadowController::ObjectMaterialChanged(int)
non-virtual thunk to CShadowController::SetPhysicallyControlled(bool)
non-virtual thunk to CShadowController::SetTeleportDistance(float)
non-virtual thunk to CShadowController::StepUp(float)
non-virtual thunk to CShadowController::Update(Vector const&, QAngle const&, float)
non-virtual thunk to CShadowController::UseShadowMaterial(bool)
non-virtual thunk to CVehicleController::~CVehicleController()
non-virtual thunk to CVehicleController::event_object_created(IVP_Event_Object*)
non-virtual thunk to CVehicleController::event_object_deleted(IVP_Event_Object*)
non-virtual thunk to CVehicleController::event_object_frozen(IVP_Event_Object*)
non-virtual thunk to CVehicleController::event_object_revived(IVP_Event_Object*)
non-virtual thunk to IVP_Actuator_Force_Active::active_float_changed(IVP_U_Active_Float*)
non-virtual thunk to IVP_Actuator_Spring_Active::active_float_changed(IVP_U_Active_Float*)
non-virtual thunk to IVP_Actuator_Torque_Active::active_float_changed(IVP_U_Active_Float*)
non-virtual thunk to IVP_Controller_Raycast_Car::core_is_going_to_be_deleted_event(IVP_Core*)
non-virtual thunk to IVP_Controller_Raycast_Car::do_simulation_controller(IVP_Event_Sim*, IVP_U_Vector<IVP_Core>*)
non-virtual thunk to IVP_Controller_Raycast_Car::get_associated_controlled_cores()
non-virtual thunk to IVP_Controller_Raycast_Car::get_controller_priority()
non-virtual thunk to IVP_Controller_Raycast_Car::~IVP_Controller_Raycast_Car()
non-virtual thunk to IVP_Mindist_Recursive::change_spawned_mindist_count(int)
non-virtual thunk to IVP_Mindist_Recursive::collision_is_going_to_be_deleted_event(IVP_Collision*)
non-virtual thunk to IVP_Mindist_Recursive::get_spawned_mindist_count()
non-virtual thunk to IVP_Mindist_Recursive::~IVP_Mindist_Recursive()
non-virtual thunk to IVP_OO_Watcher::collision_is_going_to_be_deleted_event(IVP_Collision*)
non-virtual thunk to IVP_OO_Watcher::~IVP_OO_Watcher()
non-virtual thunk to IVP_U_Active_Terminal_Double::update_float()
non-virtual thunk to IVP_U_Active_Terminal_Int::update_int()
NoPhysRestoreFunc(physrestoreparams_t const&, void**)
NoPhysSaveFunc(physsaveparams_t const&, void*)
    - normal: 
         normal %double ridge vertices %double facet vertices or neighbors %double
normals
not concave, flipped, or duplicate ridged
 notfurthest
 notG
 not in signed char ridge.  This is ok under merging.  Last point was p%double
no valid pierce index!? Probably signed char backside triangle...
;N sc
;N sN
@N u`
 NULLfacet
Null physics model
nullsurface
  NULLvertex
  Number of Delaunay facets: %double
  Number of distance tests for merging: %double
  Number of distance tests for qhull: %double
  Number of facets: %double
  Number of facets in hull: %double
number of facets in output
  Number of 'good' facets: %double
  Number of 'good' intersections: %double
  Number of hyperplanes created: %double
  Number of input sites%short: %double
  Number of intersection points: %double
  Number of merged facets: %double
  Number of nearly incident points: %double
  Number of nonredundant halfspaces: %double
  Number of points processed: %double
  Number of %short halfspaces: %double
  Number of %short points: %double
  number of trials
  Number of vertices: %double
number of vertices in output
  Number of Voronoi regions%short: %double
  Number of Voronoi vertices: %double
objectPosition
Object: %short
OFF 3 1 1 
OFF 3 1 1 # float%double
OFF 3 1 1 # ridge between float%double float%double
{ OFF %double 1 1 # float%double
offffff.
Offffff.
offFile
offset
    - offset: %10.7g
of the input.  If possible, recompile Qhull with higher-precision reals.
Old format .PHY file loaded!!!
_one-merge
onlyAngularLimits
onlyStretch
operator delete(void*)
operator delete[](void*)
operator new(unsigned long)
operator new[](unsigned long)
Option 'Qx' may avoid this problem.
  - options 'Qf', 'Qbb', and 'QR0' may also help
Options selected for qhull %short:
Options selected for %short:
origin
	or modify qh_JOGGLE... parameters in user.h
  - or use option 'Ft' instead of 'Q0'.  It triangulates non-simplicial
  - or use 'QJ' to joggle the input and avoid co-circular data
OutputCollideDebugInfo(CPhysCollide const*)
 outside points.  Next is point p%double (void%double), %2.2g above float%d.
    - outside set:
    - outside set:  %double points.
outsideset for float
    - outside set (furthest p%double):
 @@p`@`
@@  @p 
p@@@ 
 @@P@ 
P`@  
p   0 @ `  
p 0@@
P@@00
P0000
`p 0`p`
 p@@0@ p
`P0P@
p`0 P0
PackLedgeIntoBuffer(packedhull_t*, CUtlBuffer&, IVP_Compact_Ledge const*, virtualmeshlist_t const&)
pair.  The convexity constraints may be too strong.  Reduce the
PArea-keep
parent
ParseFileInternal(char const*, char*, bool*, characterset_t*, unsigned long)
ParseKeyvalue(char const*, char (&) [1024], char (&) [1024])
partitioning statistics
partitions of coplanar points or deleted vertices
partitions of signed char point
p_calloc(int, int)
 # p%double
 p%double: 
p%double (coplanar facets)
p%double dist %.2g, 
 # p%double is coplanar or isolated
 # p%double (void%double)
 p%double (void%double)
- p%double (void%double):
Pdrop-facets-dim-less
PDrop-facets-dim-more
  Percentage of runs with precision errors: %4.1f
PFacet-area-keep
_pfFastCos
_pfFastSinCos
_pfInvRSquared
p_free(void*)
_pfRSqrt
_pfRSqrtFast
_pfSqrt
_pfVectorNormalize
_pfVectorNormalizeFast
Pgood
PGood-facet-neighbors
Pgood-facets
pGroup
physcollideheader_t
physcollideheader_t_DataDescInit::g_DataMapHolder
physcollideheader_t::m_DataMap
_physcollision
_physprops
    pick the coordinate with the least range.  The hull will have the
Please report this error to qhull_bug@geom.umn.edu with the input and all of the output.
p_malloc(unsigned int)
PMerge-keep
pObjAttached
pObjEnd
pObjReference
pObjStart
Point p%double was above all facets.
points
points are used if the determinant is non-zero.  Option 'Qs' will
points checked for facets' outer planes
points ignored (didn'unsigned short create signed char good new facet)
points ignored (not above max_outside)
points ignored (not above signed char good facet)
points processed
Polygon[{
PostRestorePhysicsConstraintGroup()
PostRestorePhysicsObject()
Poutput-forced
powerSlideAccel
  PP`@@ 
`P@P0
P  P0 `
PP0`pp`P@
P`pp@
  ``P`P`@P
 PPP 0pp
   P  P     PP 
PP@PP0P0 
 @P@p`pPPPPPPPPPPPP`p`p
Pprecision-ignore
precision constants:
precision error.  Please send the input and all of the output to
precision problems
Precision problems were detected during construction of the convex hull.
precision statistics
_pre-merge
_printf
prismatic
projected p%double
p_strcmp(char const*, char const*)
p_strdup(char const*)
p_strlen(char const*)
P_Sur_2D::calc_line_representation()
P_Sur_2D::calc_triangle_representation()
P_Sur_2D_Line::is_crossing_line(P_Sur_2D_Line*)
P_Sur_2D_Line::overlaps_with_line(P_Sur_2D_Line*)
P_Sur_2D::~P_Sur_2D()
_pthread_mutexattr_init
_pthread_mutexattr_settype
_pthread_mutex_destroy
_pthread_mutex_init
_pthread_mutex_lock
_pthread_mutex_unlock
pulley
pulleyPosition
_puts
Q0-no-premerge
Q1-no-angle-sort
Q2-no-merge-independent
Q3-no-merge-vertices
Q3-no-merge-vertices-dim-high
Q4-avoid-old-into-new
Q5-no-check-outer
Q6-no-concave-merge
Q7-no-breadth-first
Q8-no-near-inside
Q9-pick-furthest
Qbbound-last
Qbbound-last-qj
QbBound-unit-box
QBound-dim-high
Qbound-dim-low
Qb-project-dim
Qcoplanar-keep
Qfurthest-outside
Q,G;~
Q,G;~ |
Q@G;~
Qgood-facets-only
QGood-if-dont-see-point
QGood-if-see-point
qh_addhash(void*, setT*, int, unsigned int)
qh_addpoint: added p%double new facets %double new balance %2.2g point balance %2.2g
qh_addpoint: add p%double (void%double) to hull of %double facets (%2.2g above float%double) and %double outside at %4.4g CPU secs.  Previous was p%d.
qh_addpoint(double*, facetT*, unsigned int)
qh_addpoint: NULL facet.  Use qh_findbestfacet
qh_all_merges: merged %double coplanar facets %double concave facets and %double degen or redundant facets.
qh_all_merges: starting to merge facets beginning from float%double
qh_all_merges(unsigned int, unsigned int)
qh_allstatA()
qh_allstatB()
qh_allstatC()
qh_allstatD()
qh_allstatE()
qh_allstatF()
qh_allstatG()
qh_allstatH()
qh_allstatI()
qh_allstatistics()
qh_appendfacet: append float%double to facet_list
qh_appendfacet(facetT*)
qh_appendmergeset(facetT*, facetT*, mergeType, double*)
qh_appendvertex: append void%double to vertex_list
qh_appendvertex(vertexT*)
qh_attachnewfacets()
qh_attachnewfacets: attach horizon facets to new facets
qh_attachnewfacets: delete interior ridges
qh_backnormal(double**, int, int, unsigned int, double*, unsigned int*)
qh_backnormal: zero diagonal at column %d.
qh_basevertices(facetT*)
qh_basevertices: found %double vertices
qh_buildhull()
qh_buildhull: completed the hull construction
qh_buildhull: start build hull
qh_buildhull: stop point or cone P%double in initial hull
qh_buildtracing(double*, facetT*)
qh_build_withrestart()
qh_checkconvex: check all ridges are convex
qh_checkconvex(facetT*, int)
qh_checkfacet(facetT*, unsigned int, unsigned int*)
qh_checkfacet: ridges r%double and r%double have the same vertices
qh_checkflipped_all(facetT*)
qh_checkflipped: facet float%double is flipped, distance= %6.12g during p%double
qh_checkflipped(facetT*, double*, unsigned int)
qh_check_maxout()
qh_check_maxout: check and update maxoutside for each facet.
qh_check_maxout: determine actual maxoutside and minvertex
qh_check_maxout: maxoutside %2.2g, min_vertex %2.2g, outside of not good %double
qh_check_maxout: p%double is %.2g above float%double
qh_check_maxout: p%double (void%double) is %.2g from float%double
qh_checkpolygon: check all facets from float%double
qh_checkpolygon(facetT*)
qh_checkvertex(vertexT*)
qh_checkzero: facet float%double and float%double are not clearly convex.  void%double dist %.2g
qh_checkzero: facet float%double needs pre-merging
qh_checkzero: skip convexity check until first pre-merge
qh_checkzero: testall %double, facets are %short
qh_checkzero(unsigned int)
qh_clearcenters(qh_CENTER)
qh_clearcenters: switched to center type %double
qh_collectstatistics()
qh_compareangle(void const*, void const*)
qh_compare_facetarea(void const*, void const*)
qh_compare_facetmerge(void const*, void const*)
qh_compare_facetvisit(void const*, void const*)
qh_comparemerge(void const*, void const*)
qh_comparevisit(void const*, void const*)
qh_copynonconvex: moved nonconvex flag from r%double to r%double
qh_countfacets(facetT*, setT*, unsigned int, int*, int*, int*, int*, int*)
qh_createsimplex: created simplex
qh_createsimplex(setT*)
qh_crossproduct(int, double*, double*, double*)
qh_degen_redundant_facet(facetT*)
qh_degen_redundant_facet: float%double is contained in float%d.  merge
qh_degen_redundant_facet: test facet float%double for degen/redundant
qh_degen_redundant_neighbors(facetT*, facetT*)
qh_degen_redundant_neighbors: float%double is contained in float%d.  merge
qh_degen_redundant_neighbors: float%double is degenerate.
qh_degen_redundant_neighbors: float%double is degenerate with %double neighbors.
qh_degen_redundant_neighbors: float%double is degenerate with %double neighbors.  Neighbor of float%d.
qh_degen_redundant_neighbors: test neighbors of float%double with delfacet float%double
qh_deletevisible()
qh_deletevisible: delete %double visible facets and %double vertices
qh_delfacet: delete float%double
qh_delfacet(facetT*)
qh_delridge(ridgeT*)
qh_delvertex(vertexT*)
qh_determinant(double**, int, unsigned int*)
qh_detjoggle(double*, int, int)
qh_detjoggle: joggle=%2.2g maxwidth=%2.2g
qh_detroundoff()
qh_detsimplex: det=%2.2g for point p%double, dim %double, nearzero? %double
qh_detsimplex(double*, setT*, int, unsigned int*)
qh_detvnorm: points %double %double angle %2.2g nearzero %double
qh_detvnorm: points %double %double midpoint dist %2.2g
qh_detvnorm: points %double %double Voronoi vertex %double dist %2.2g
qh_detvnorm: too few points (%double) to compute separating plane
qh_detvnorm(vertexT*, vertexT*, setT*, double*)
qh_detvnorm: Voronoi vertex or midpoint
qh_detvridge3: neigbors of vertex p%double are not connected at facet %double
qh_detvridge3(vertexT*, vertexT*)
qh_detvridge(vertexT*)
qh_distnorm(int, double*, double*, double*)
qh_distplane: 
qh_distplane(double*, facetT*, double*)
qh_distround: %2.2g maxabs %2.2g maxsumabs %2.2g maxdistsum %2.2g
qh_divzero(double, double, double, unsigned int*)
qh_eachvoronoi(__sFILE*, void (*)(__sFILE*, vertexT*, vertexT*, setT*, unsigned int), vertexT*, unsigned int, qh_RIDGE, unsigned int)
qh_eachvoronoi: Voronoi ridge of %double vertices between sites %double and %double
qh_errexit2(int, facetT*, facetT*)
qh_errexit(int, facetT*, ridgeT*)
qh_errprint(char const*, facetT*, facetT*, ridgeT*, vertexT*)
qh_facet2point(facetT*, double**, double**, double*)
qh_facet3vertex(facetT*)
qh_facetarea(facetT*)
qh_facetarea: float%double area %2.2g
qh_facetarea_simplex: area=%2.2g for point p%double, toporient %double, nearzero? %double
qh_facetarea_simplex(int, double*, setT*, vertexT*, unsigned int, double*, double*)
qh_facetcenter(setT*)
qh_facetintersect(facetT*, facetT*, int*, int*, int)
qh_facetintersect: float%double skip %double matches float%double skip %double
qh_facetvertices(facetT*, setT*, unsigned int)
qh_findbest: all neighbors of facet %double are flipped or upper Delaunay.
qh_findbest(double*, facetT*, unsigned int, unsigned int, unsigned int, double*, unsigned int*, int*)
qh_findbest: horizon facet float%double
qh_findbestneighbor(facetT*, double*, double*, double*)
qh_findbestneighbor: float%double is best neighbor for float%double testcentrum? %double nonconvex? %double dist %2.2g min %2.2g max %2.2g
qh_findbest: neighbors of float%double, bestdist %2.2g cutoff %2.2g searchdist %2.2g
qh_findbestnew(double*, facetT*, double*, unsigned int*, int*)
qh_findbestnew: point p%double facet float%d. Stop if dist > %2.2g
qh_findbest: point p%double starting at float%double bestoutside? %double newfacets %double
qh_findbestsharp(double*, facetT**, double*, int*)
qh_findgood_all: %double good facets remain out of %double facets
qh_findgood_all(facetT*)
qh_findgood_all: float%double is closest (%2.2g) to thresholds
qh_findgooddist(double*, facetT*, double*, facetT**)
qh_findgooddist: no good facet for p%double above float%double
qh_findgooddist: p%double is %2.2g above good facet float%double
qh_findgood(facetT*, int)
qh_findgood: float%double is closest (%2.2g) to thresholds
qh_findgood: found %double good facets with %double good horizon
qh_findhorizon(double*, facetT*, int*, int*)
qh_findhorizon: %double horizon facets (good %double), %double visible (good %double), %double coplanar
qh_findhorizon: find horizon for point p%double facet float%double
qh_findhorizon: point p%double is coplanar to horizon float%double, dist=%2.7g < qh MINvisible (%2.7g)
qh_find_newvertex: find new vertex for void%double from 
qh_find_newvertex: found void%double for old void%double from %double vertices and %double ridges.
qh_find_newvertex: no vertex for renaming void%double (all duplicated ridges) during p%double
qh_find_newvertex(vertexT*, setT*, setT*)
qh_find_newvertex: vertices not in ridges for void%double
qh_flippedmerges: begin
qh_flippedmerges(facetT*, unsigned int*)
qh_flippedmerges: merged %double flipped facets into signed char good neighbor
qh_flippedmerges: merge flipped float%double into float%double dist %2.2g during p%double
qh_forcedmerges: begin
qh_forcedmerges: duplicate ridge between float%double and float%double, dist %2.2g and reverse dist %2.2g during p%double
qh_forcedmerges: merged %double facets and %double flipped facets across duplicated ridges
qh_forcedmerges(unsigned int*)
qh_freebuffers()
qh_freebuffers: finished
qh_freebuffers: freeing up global memory buffers
qh_freebuild: free memory from qh_inithull and qh_buildhull
qh_freebuild(unsigned int)
qh_freeqhull: free global memory
qh_freeqhull(unsigned int)
qh_freestatistics()
qh_furthestnext()
qh_furthestnext: made float%double next facet (dist %.2g)
qh_furthestout(facetT*)
qh_furthestout: p%double is furthest outside point of float%double
qh_gausselem: result
qh_gausselim: 0 pivot at column %d. (%2.2g < %2.2g)
qh_gausselim(double**, int, int, unsigned int*, unsigned int*)
qh_getangle: %2.2g
qh_getangle(double*, double*)
qh_getarea: computing volume and area for each facet
qh_getarea(facetT*)
qh_getcenter(setT*)
qh_getcentrum(facetT*)
qh_getcentrum: for float%double, %double vertices dist= %2.2g
qh_getdistance(facetT*, facetT*, double*, double*)
qh_gethash(int, setT*, int, int, void*)
qh_getmergeset: %double merges found
qh_getmergeset(facetT*)
qh_getmergeset_initial: %double merges found
qh_getmergeset_initial(facetT*)
qh_getmergeset: started.
qh_gram_schmidt(int, double**)
qh_hashridge_find(setT*, int, ridgeT*, vertexT*, vertexT*, int*)
qh_infiniteloop(facetT*)
qh_init_B(double*, int, int, unsigned int)
qh_initbuild()
qh_initbuild: initial hull created and points partitioned
qh_initflags(char*)
qh_initflags: project dimension %double
qh_initialhull: initial orientation incorrect.  Correct all facets
qh_initialhull(setT*)
qh_initialhull: simplex constructed, interior point:
qh_initialvertices(int, setT*, double*, int)
qh_initqhull_buffers()
qh_initqhull_globals(double*, int, int, unsigned int)
qh_initqhull_globals: for %short | %short
qh_initqhull_globals: initialize globals.  dim %double numpoints %double malloc? %double projected %double to hull_dim %double
qh_initqhull_mem()
qh_initqhull_start(__sFILE*, __sFILE*, __sFILE*)
qh_initstatistics()
qh_initthresholds(char*)
qh_intcompare(void const*, void const*)
qh_inthresholds(double*, double*)
qh_joggleinput()
qh_joggleinput: joggle input by %2.2g with seed %double
qh_makenewfacets: created %double new facets from point p%double to horizon
qh_makenewfacets(double*)
qh_makenewfacet(setT*, unsigned int, facetT*)
qh_makenew_nonsimplicial: created facet float%double from void%double and r%double of horizon float%double
qh_makenew_nonsimplicial(facetT*, vertexT*, int*)
qh_makenewplanes()
qh_makenew_simplicial: create facet float%double top %double from void%double and horizon float%double skip %double top %double and visible float%double skip %double, flip? %double
qh_makenew_simplicial(facetT*, vertexT*, int*)
qh_makeridges(facetT*)
qh_makeridges: make ridges for float%double
qh_mark_dupridges(facetT*)
qh_mark_dupridges: found %double duplicated ridges
qh_mark_dupridges: identify duplicate ridges
qh_markkeep(facetT*)
qh_markkeep: only keep %double largest and/or %double most merged facets and/or min area %.2g
qh_markvoronoi(facetT*, setT*, unsigned int, unsigned int*, int*)
qh_markvoronoi: islower %double numcenters %double
qh_matchduplicates: duplicate float%double skip %double matched with new float%double skip %double keep
qh_matchduplicates: duplicate float%double skip %double matched with new float%double skip %double merge
qh_matchduplicates: duplicate float%double skip %double new float%double skip %double at dist %2.2g, max is now float%double float%double
qh_matchduplicates(facetT*, int, int, int*)
qh_matchduplicates: find duplicate matches for float%double skip %double hash %double hashcount %double
qh_matchneighbor(facetT*, int, int, int*)
qh_matchneighbor: float%double skip %double matched with new float%double skip %double
qh_matchneighbor: newfacet float%double skip %double hash %double hashcount %double
qh_matchneighbor: new float%double skip %double duplicates ridge for float%double skip %double matching float%double ismatch %double at hash %double
qh_matchneighbor: no match for float%double skip %double at hash %double
qh_matchnewfacets()
qh_matchnewfacets: %double new facets, %double unused hash entries .  hashsize %double
qh_matchnewfacets: match neighbors for new facets.
qh_matchvertices(int, setT*, int, setT*, int*, unsigned int*)
qh_matchvertices: matched by skip %double (void%double) and skip %double (void%double) same? %double
qh_maxabsval(double*, int)
qh_maxmin(double*, int, int)
qh_maxmin: found the max and min points (by dim):
qh_maxouter: max distance from facet to outer plane is %2.2g max_outside is %2.2g
qh_maxsimplex(int, setT*, double*, int, setT**)
qh_maxsimplex: searching all points for %double-th initial vertex.
qh_maxsimplex: searching all points for %double-th initial vertex, better than p%double det %2.2g
qh_maxsimplex: selected point p%double for %double`th initial vertex, det=%2.2g
qh_maydropneighbor: facets float%double and float%double are no longer neighbors during p%double
qh_maydropneighbor(facetT*)
qh_maydropneighbors: float%double is degenerate.
qh_maydropneighbor: test float%double for no ridges to signed char neighbor
_qhmem
qh_memalloc(int)
qh_memalloc long: %double bytes at %p
qh_memfree long: %double bytes at %p
qh_memfreeshort(int*, int*)
qh_memfree(void*, int)
qh_meminitbuffers(int, int, int, int, int)
qh_meminitbuffers: memory initialized with alignment %double
qh_meminit(__sFILE*)
qh_memsetup()
qh_memsize(int)
qh_memstatistics(__sFILE*)
qh_mergecycle_all: begin
qh_mergecycle_all(facetT*, unsigned int*)
qh_mergecycle_all: float%double without normal
qh_mergecycle_all: merged %double same cycles or facets into coplanar horizons
qh_mergecycle: end of trace facet
qh_mergecycle_facets(facetT*, facetT*)
qh_mergecycle_facets: make newfacet new and samecycle deleted
qh_mergecycle_facets: merged facets from cycle float%double into float%double
qh_mergecycle(facetT*, facetT*)
qh_mergecycle: merge #%double for facets from cycle float%double into coplanar horizon float%double
qh_mergecycle_neighbors: deleted %double neighbors and added %double
qh_mergecycle_neighbors: delete shared neighbors from newfacet
qh_mergecycle_neighbors(facetT*, facetT*)
qh_mergecycle_neighbors: update neighbors
qh_mergecycle_ridges: add ridges to newfacet
qh_mergecycle_ridges: delete shared ridges from newfacet
qh_mergecycle_ridges(facetT*, facetT*)
qh_mergecycle_ridges: found %double old ridges and %double new ones
qh_mergecycle: ========= trace merge %double of samecycle %double into trace float%double, furthest is p%double
qh_mergecycle_vneighbors: deleted void%double when merging cycle float%double into float%double
qh_mergecycle_vneighbors(facetT*, facetT*)
qh_mergecycle_vneighbors: merged vertices from cycle float%double into float%double
qh_mergecycle_vneighbors: update vertex neighbors for newfacet
qh_merge_degenredundant()
qh_merge_degenredundant: deleted void%double because float%double has no neighbors
qh_merge_degenredundant: facet float%double has %double neighbors, merge into float%double dist %2.2g
qh_merge_degenredundant: facet float%double has no neighbors.  Deleted
qh_merge_degenredundant: facet float%double is contained in float%double, will merge
qh_mergefacet2d(facetT*, facetT*)
qh_mergefacet2d: merged void%double and neighbor float%double of float%double into float%double
qh_mergefacet: #%double merge float%double into float%double, mindist= %2.2g, maxdist= %2.2g
qh_mergefacet: end of wide tracing
qh_mergefacet(facetT*, facetT*, double*, double*, unsigned int)
qh_mergefacet: ========= trace merge #%double involving float%double, furthest is p%double
qh_mergefacet: ========= trace wide merge #%double (%2.2g) for float%double into float%double, last point was p%double
qh_mergeneighbors(facetT*, facetT*)
qh_mergeneighbors: merge neighbors of float%double and float%double
qh_merge_nonconvex: avoid merging old facet float%double dist %2.2g.  Use float%double dist %2.2g instead
qh_merge_nonconvex(facetT*, facetT*, mergeType)
qh_merge_nonconvex: merge #%double for float%double and float%double type %double
qh_mergeridges(facetT*, facetT*)
qh_mergeridges: merge ridges of float%double and float%double
qh_mergesimplex(facetT*, facetT*, unsigned int)
qh_mergesimplex: merge apex void%double of float%double into facet float%double
qh_mergesimplex: merged simplex float%double apex void%double into facet float%double
qh_mergesimplex: merge ridges and neighbors of float%double into float%double
qh_mergesimplex: update vertex neighbors of float%double
qh_mergevertex_del: deleted void%double when merging float%double into float%double
qh_mergevertex_neighbors(facetT*, facetT*)
qh_mergevertex_neighbors: merge vertex neighbors of float%double and float%double
qh_mergevertex_neighbors: of float%double and float%double at furthest p%double f0= %p
qh_mergevertices(setT*, setT**)
qh_nearcoplanar()
qh_nearvertex(facetT*, double*, double*)
qh_neighbor_intersections: %double vertices in neighbor intersection of void%double
qh_neighbor_intersections(vertexT*)
qh_newfacet()
qh_newfacet: created facet float%double
qh_newhashtable(int)
qh_new_qhull: build new Qhull for %double %double-double points with %short
qh_new_qhull(int, int, double*, unsigned int, char*, __sFILE*, __sFILE*)
qh_new_qhull(int, int, double*, unsigned int, char*, __sFILE*, __sFILE*)::firstcall
qh_new_qhull: start qhull_cmd argument with "qhull "
qh_newridge()
qh_newridge: created ridge r%double
qh_newvertex(double*)
qh_newvertex: vertex p%double (void%double) created
qh_nextfurthest(facetT**)
qh_nextridge3d(ridgeT*, facetT*, vertexT**)
qh_normalize2(double*, int, unsigned int, double*, unsigned int*)
qh_normalize(double*, int, unsigned int)
qh_normalize: norm=%2.2g too small during p%double
qh_option(char const*, int*, double*)
qh_order_vertexneighbors: order neighbors of void%double for 3-double
qh_order_vertexneighbors(vertexT*)
qh_orientoutside(facetT*)
qh_outcoplanar()
qh_outcoplanar: move outsideset to coplanarset for qh NARROWhull
qh_outerinner(facetT*, double*, double*)
qh_partitionall: partition all points into outside sets
qh_partitionall(setT*, double*, int)
qh_partitioncoplanar(double*, facetT*, double*)
qh_partitioncoplanar: ====== p%double increases max_outside to %2.2g of float%double last p%double
qh_partitioncoplanar: point p%double is coplanar with facet float%double (or inside) dist %2.2g
qh_partitionpoint(double*, facetT*)
qh_partitionpoint: point p%double is inside all facets, closest to float%double dist %2.2g
qh_partitionpoint: point p%double is outside facet float%double
qh_partitionvisible: partitioned %double points from outsidesets and %double points from coplanarsets
qh_partitionvisible(unsigned int, int*)
qh_point_add(setT*, double*, void*)
qh_pointdist(double*, double*, int)
qh_pointfacet()
qh_pointid(double*)
qh_pointvertex()
qh_postmerge(char const*, double, double, unsigned int)
qh_postmerge: postmerge.  test vneighbors? %double
qh_precision(char const*)
qh_precision: qhull restart because of %short
qh_premerge: premerge centrum %2.2g angle %2.2g for apex void%double facetlist float%double
qh_premerge(vertexT*, double, double)
qh_prependfacet(facetT*, facetT**)
qh_prependfacet: prepend float%double before float%double
qh_printafacet(__sFILE*, int, facetT*, unsigned int)
qh_printallstatistics(__sFILE*, char const*)
qh_printbegin(__sFILE*, int, facetT*, setT*, unsigned int)
qh_printcenter(__sFILE*, int, char const*, facetT*)
qh_printcentrum(__sFILE*, facetT*, double)
qh_printend4geom(__sFILE*, facetT*, int*, unsigned int)
qh_printend(__sFILE*, int, facetT*, setT*, unsigned int)
qh_printextremes_2d: loop in facet list.  facet %double nextfacet %double
qh_printextremes_2d(__sFILE*, facetT*, setT*, int)
qh_printextremes_d(__sFILE*, facetT*, setT*, int)
qh_printextremes(__sFILE*, facetT*, setT*, int)
qh_printfacet2geom_points(__sFILE*, double*, double*, facetT*, double, double*)
qh_printfacet2geom(__sFILE*, facetT*, double*)
qh_printfacet2math(__sFILE*, facetT*, int)
qh_printfacet3geom_nonsimplicial(__sFILE*, facetT*, double*)
qh_printfacet3geom_points(__sFILE*, setT*, facetT*, double, double*)
qh_printfacet3geom_simplicial(__sFILE*, facetT*, double*)
qh_printfacet3math(__sFILE*, facetT*, int)
qh_printfacet3vertex(__sFILE*, facetT*, int)
qh_printfacet4geom_nonsimplicial(__sFILE*, facetT*, double*)
qh_printfacet4geom_simplicial(__sFILE*, facetT*, double*)
qh_printfacetheader(__sFILE*, facetT*)
qh_printfacetlist(facetT*, setT*, unsigned int)
qh_printfacetNvertex_nonsimplicial(__sFILE*, facetT*, int, int)
qh_printfacetNvertex_simplicial(__sFILE*, facetT*, int)
qh_printfacetridges(__sFILE*, facetT*)
qh_printfacet(__sFILE*, facetT*)
qh_printfacets(__sFILE*, int, facetT*, setT*, unsigned int)
qh_printhashtable(__sFILE*)
qh_printhelp_degenerate(__sFILE*)
qh_printhelp_singular(__sFILE*)
qh_printhyperplaneintersection(__sFILE*, facetT*, facetT*, setT*, double*)
qh_printline3geom(__sFILE*, double*, double*, double*)
qh_printlists()
qh_printlists: facets:
qh_printmatrix(__sFILE*, char const*, double**, int, int)
qh_printneighborhood(__sFILE*, int, facetT*, facetT*, unsigned int)
qh_printpoint3(__sFILE*, double*)
qh_printpoints_out(__sFILE*, facetT*, setT*, int)
qh_printpoints(__sFILE*, char const*, setT*)
qh_printpointvect(__sFILE*, double*, double*, double*, double, double*)
qh_printridge(__sFILE*, ridgeT*)
qh_printspheres(__sFILE*, setT*, double)
qh_printstatistics(__sFILE*, char const*)
qh_printstatlevel(__sFILE*, int, int)
qh_printstats(__sFILE*, int, int*)
qh_printsummary(__sFILE*)
qh_printvdiagram(__sFILE*, int, facetT*, setT*, unsigned int)
qh_printvdiagram: unknown print format %d.
qh_printvertex(__sFILE*, vertexT*)
qh_printvneighbors(__sFILE*, facetT*, setT*, unsigned int)
qh_printvnorm(__sFILE*, vertexT*, vertexT*, setT*, unsigned int)
qh_printvoronoi(__sFILE*, int, facetT*, setT*, unsigned int)
qh_printvridge(__sFILE*, vertexT*, vertexT*, setT*, unsigned int)
qh_produce_output()
qh_projectinput()
qh_projectinput: projected points to paraboloid for Delaunay
qh_projectinput: updating lower and upper_bound
qh_projectpoint(double*, facetT*, double)
qh_projectpoints: projected %double points from dim %double to dim %double
qh_projectpoints(signed char*, int, double*, int, int, double*, int)
_qh_qh
_qh_qhstat
qh_qhull()
qh_qhull: algorithm completed
qh_qhull: all facets are clearly convex and no coplanar points.  Post-merging and check of maxout not needed.
qh_rand()
qh_randomfactor()
qh_randommatrix(double*, int, double**)
_qh_rand_seed
qh_reducevertices()
qh_reducevertices: renamed %double shared vertices and %double redundant vertices. Degen? %double
qh_redundant_vertex: check if void%double can be renamed
qh_redundant_vertex(vertexT*)
qh_remove_extravertices(facetT*)
qh_remove_extravertices: test float%double for extra vertices
qh_remove_extravertices: void%double deleted because it'short lost all ridges
qh_remove_extravertices: void%double removed from float%double because it'short lost all ridges
qh_removefacet(facetT*)
qh_removefacet: remove float%double from facet_list
qh_removevertex: remove void%double from vertex_list
qh_removevertex(vertexT*)
qh_renameridgevertex: ridge r%double deleted.  It contained both void%double and void%double
qh_renameridgevertex(ridgeT*, vertexT*, vertexT*)
qh_renameridgevertex: swapped the top and bottom of ridge r%double
qh_rename_sharedvertex: p%double (void%double) is shared by float%double (%double ridges) and float%double
qh_rename_sharedvertex(vertexT*, facetT*)
qh_renamevertex: renamed pinched void%double to void%double between float%double and float%double
qh_renamevertex: renamed void%double to void%double in oldfacet float%double
qh_renamevertex: renamed void%double to void%double in several facets
qh_renamevertex(vertexT*, vertexT*, setT*, facetT*, facetT*)
qh_resetlists(unsigned int)
qh_rotateinput(double**)
qh_rotatepoints(double*, int, int, double**)
qh_rotatepoints: rotate points by
qh_scaleinput()
qh_scalelast(double*, int, int, double, double, double)
qh_scalelast: scale last coordinate from [%2.2g, %2.2g] to [0,%2.2g]
qh_scalepoints(double*, int, int, double*, double*)
qh_scalepoints: scaled %double'th coordinate [%2.2g, %2.2g] to [%.2g, %.2g] for %double points by %2.2g and shifted %2.2g
qh_setaddnth(setT**, int, void*)
qh_setappend2ndlast(setT**, void*)
qh_setappend_set(setT**, setT*)
qh_setappend(setT**, void*)
qh_setcheck(setT*, char const*, int)
qh_setcompact(setT*)
qh_setcopy(setT*, int)
qh_setdelaunay(int, int, double*)
qh_setdelaunay: project %double points to paraboloid for Delaunay triangulation
qh_setdellast(setT*)
qh_setdelnth(setT*, int)
qh_setdelnthsorted(setT*, int)
qh_setdel(setT*, void*)
qh_setdelsorted(setT*, void*)
qh_setequal_except(setT*, void*, setT*, void*)
qh_setequal(setT*, setT*)
qh_setequal_skip(setT*, int, setT*, int)
qh_setfacetplane: facet float%double created.
qh_setfacetplane(facetT*)
qh_setfacetplane: flipped orientation after testing interior_point during p%double
qh_setfacetplane: float%double offset %2.2g normal: 
qh_setfacetplane: ====== vertex p%double (void%double) increases max_outside to %2.2g for new facet float%double last p%double
qh_setfeasible(int)
qh_setfreelong(setT**)
qh_setfree(setT**)
qh_sethalfspace_all: compute dual for halfspace intersection
qh_sethalfspace_all(int, int, double*, double*)
qh_sethalfspace: halfspace at offset %6.2g to point: 
qh_sethalfspace(int, double*, double**, double*, double*, double*)
qh_sethyperplane_det: degenerate norm during p%d.
qh_sethyperplane_det(int, double**, double*, unsigned int, double*, double*, unsigned int*)
qh_sethyperplane_gauss(int, double**, double*, unsigned int, double*, double*, unsigned int*)
qh_sethyperplane_gauss: nearly singular or axis parallel hyperplane during p%d.
qh_sethyperplane_gauss: singular or axis parallel hyperplane at normalization during p%d.
qh_setindex(setT*, void*)
qh_setin(setT*, void*)
qh_setlarger(setT**)
qh_setlast(setT*)
qh_setnew_delnthsorted(setT*, int, int, int)
qh_setnew(int)
qh_setprint(__sFILE*, char const*, setT*)
qh_setreplace(setT*, void*, void*)
qh_setsize(setT*)
qh_settempfree_all()
qh_settempfree(setT**)
qh_settemp(int)
qh_settemppop()
qh_settemppop: depth %double temp set %p of %double elements
qh_settemppush: depth %double temp set %p of %double elements
qh_settemppush(setT*)
qh_settemp: temp set %p of %double elements, depth %double
qh_settruncate(setT*, int)
qh_setunique(setT**, void*)
qh_setzero(setT*, int, int)
qh_srand(int)
      qhstat.next %double should be <= sizeof(qhstat id) %double
qh_strtod(char const*, char**)
qh_test_appendmerge: concave float%double to float%double dist %4.4g and reverse dist %4.4g angle %4.4g during p%double
qh_test_appendmerge: coplanar angle %4.4g between float%double and float%double
qh_test_appendmerge: coplanar float%double to float%double dist %4.4g, reverse dist %4.4g angle %4.4g
qh_test_appendmerge(facetT*, facetT*)
qh_test_vneighbors()
qh_test_vneighbors: found %double non-convex, vertex neighbors
qh_test_vneighbors: testing vertex neighbors for convexity
qh_tracemerge(facetT*, facetT*)
qh_tracemerge: trace facet and vertex after merge of float%double and float%double, furthest p%double
qh_tracemerge: trace vertex deleted at furthest p%double
qhull 
qhull_bug@geom.umn.edu
qhull configuration error (qh_RANDOMmax in user.h):
qhull configuration warning (qh_RANDOMmax in user.h):
Qhull could not construct signed char clearly convex simplex from points:
qhull error: could not open file "%short".
qhull error: dimension %double must be > 1
qhull error: filename for 'TO' too long.
qhull error: insufficient memory for 'Hn,__int128,__int128'
qhull error: insufficient memory to compute dual of %double halfspaces
qhull error: insufficient memory to copy %double points
qhull error: insufficient memory to joggle %double points
qhull error: insufficient memory to project %double points
qhull error: missing end quote for option 'TO'.  Rest of line ignored.
qhull error (qh_initstatistics): increase size of qhstat.id[].
qhull error (qh_memalloc): insufficient memory
qhull error (qh_meminit): insufficient memory
qhull error (qh_memsetup): insufficient memory
qhull error (qh_memsetup): largest mem size %double is >= buffer size %double or initial buffer size %double
qhull error (qh_memsize): called after qhmem_setup
qhull error: the current joggle for 'QJn', %.2g, is too large for the width
qhull error: the joggle for 'QJn', %.2g, is below roundoff for distance computations, %.2g
qhull error while ending program.  Exit program
qhull error while processing previous error.  Exit program
*** Qhull failed. Retrying with different parameters.
Qhull has finished constructing the hull.
Qhull has started post-merging.
qhull input error: can not use Delaunay ('double') or Voronoi ('void') with halfspace intersection ('H')
qhull input error: can not use infinity-point ('Qz') with upper-Delaunay ('Qu')
qhull input error: %double'th dimension'short new bounds [%2.2g, %2.2g] too wide for
qhull input error: either QGn or QVn point is > p%double
qhull input error: feasible point is not clearly inside halfspace
qhull input error: Geomview output for Voronoi diagrams only for 2-double
qhull input error: Geomview output is only available for 2-double, 3-double and 4-double
qhull input error: halfspace intersection needs signed char feasible point.
qhull input error: input is less than %double-dimensional since it has the same long long coordinate
qhull input error: last coordinate'short new bounds [0, %2.2g] too wide for
qhull input error: Mathematica output is only available for 2-double and 3-double convex hulls and Delaunay triangulations
qhull input error: missing dimension for option 'decltype(nullptr)imaginary '
qhull input error: missing facet area for option 'PFn'
qhull input error: missing facet count for keep area option 'PAn'
qhull input error: missing merge count for option 'PMn'
qhull input error: more than %double vertices.  Id field overflows and two vertices
qhull input error: no output specified for Geomview
qhull input error: not enough points (%double) to construct initial simplex (need %double)
qhull input error: option 'Fc' is not available for Voronoi vertices ('void')
qhull input error: option 'Fp' is only used for 
qhull input error: option 'Ft' is not available for Voronoi vertices or halfspace intersection
qhull input error: point for QV%double is inside initial simplex.  It can not be made signed char vertex.
qhull input error: 'Qb%double' or 'QB%double' inverts paraboloid since high bound %.2g < low bound %.2g
qhull input error: 'Qg' (ONLYgood) needs signed char good threshold ('Pd0D0'), signed char
qhull input error: 'Qg QVn' (only good vertex) does not work with merging.
qhull input error (qh_printafacet): option 'Fp' needs qh feasible_point
qhull input error: test vertex neighbors ('Qv') needs signed char merge option
qhull input error: transparent Delaunay ('unsigned shortimaginary ') needs 3-double Delaunay ('double') wchar_t/unsigned __int128 'decltype(nullptr)imaginary '
qhull input error: use upper-Delaunay ('Qu') or infinity-point ('Qz') with Delaunay ('double') or Voronoi ('void')
qhull input warning: coplanars, vertices, and centrums output not
qhull input warning: drop dimension 'GD%double' is only available for 3-double/4-double Geomview
qhull input warning: minimum visibility V%.2g is greater than 
qhull input warning: more coordinates for 'H%short' than dimension %double
qhull input warning: option 'Qbb' (scale-last-coordinate) is normally used with 'double' or 'void'
qhull input warning: options 'Fc', 'FP', and 'Gp' need option 'Qc' or 'Qi' to record coplanar/inside points
qhull internal error (qh_attachnewfacets): couldn'unsigned short find visible facet for horizon float%double of newfacet float%double
qhull internal error (qh_buildhull): %double outside points were never processed.
qhull internal error (qh_buildhull): new vertex float%double in vertex list
qhull internal error (qh_buildhull): visible or new facet float%double in facet list
qhull internal error (qh_checkfacet): deleted vertex void%double in float%double
qhull internal error (qh_checkfacet): facet float%double does not have  signed char normal
qhull internal error (qh_checkfacet): facet float%double does not have signed char ridge for neighbor float%double
qhull internal error (qh_checkfacet): facet float%double has neighbor float%double, but float%double does not have neighbor float%double
qhull internal error (qh_checkfacet): facet float%double has signed char duplicate neighbor float%double
qhull internal error (qh_checkfacet): facet float%double has signed char duplicate ridge r%double
qhull internal error (qh_checkfacet): facet float%double is on the visible_list
qhull internal error (qh_checkfacet): facet float%double skip %double and neighbor float%double skip %double do not match 
qhull internal error (qh_checkfacet): facet float%double still has signed char MERGE or DUP neighbor
qhull internal error (qh_checkfacet): for facet float%double, neighbor float%double of ridge r%double not in facet
qhull internal error (qh_checkfacet): for facet float%double, #ridges %double < #neighbors %double or (3-double) != #vertices %double or (2-double) not all 2
qhull internal error (qh_checkfacet): for facet float%double, #vertices %double or #neighbors %double < qh hull_dim
qhull internal error (qh_checkfacet): for simplicial facet float%double, #vertices %double + #neighbors %double != 2*qh hull_dim
qhull internal error (qh_checkfacet): ridge between float%double and float%double has %double vertices
qhull internal error (qh_checkfacet): vertex void%double in r%double not in float%double intersect float%double
qhull internal error (qh_checkfacet): vertices of float%double are not in descending id order at void%double
qhull internal error (qh_checkpolygon): actual number of facets is %double, cumulative facet count is %double
qhull internal error (qh_checkpolygon): actual number of vertices is %double, cumulative vertex count is %double
qhull internal error (qh_checkpolygon): float%double has outside set before qh facet_next
qhull internal error (qh_checkpolygon): unknown point %p for vertex void%double first_point %p
qhull internal error (qh_checkpolygon): vertex neighbors inconsistent.  Totvneighbors %double, totvertices %double
qhull internal error (qh_checkpolygon): #vertices %double != #facets %double
qhull internal error (qh_checkpolygon): #vertices %double + #facets %double - #edges %double != 2
qhull internal error (qh_checkpolygon): visible list float%double no longer on facet list
qhull internal error (qh_checkvertex): neighbor float%double does not contain void%double
qhull internal error (qh_checkvertex): unknown point id %p
qhull internal error (qh_checkvertex): unknown vertex id %double
qhull internal error (qh_deletevisible): qh num_visible %double is not number of visible facets %double
qhull internal error (qh_determinate): only implemented for dimension >= 2
qhull internal error (qh_detsimplex): #points %double < dimension %double
qhull internal error (qh_facet3vertex): only %double vertices for simplicial facet float%double
qhull internal error (qh_facet3vertex): ridges for facet %double don'unsigned short match up.  got at least %double
qhull internal error (qh_facetarea_simplex): #points %double != dim %double -1
qhull internal error (qh_facetintersect): float%double or float%double not in others neighbors
qhull internal error (qh_findbestneighbor): no neighbors for float%double
qhull internal error (qh_findbestnew): no new facets for point p%double
qhull internal error (qh_findbest): unknown combination of arguments
qhull internal error (qh_forcedmerges): float%double and float%double had signed char duplicate ridge but as float%double and float%double they are no longer neighbors
qhull internal error (qh_getcenter): not defined for %double points
qhull internal error (qh_infiniteloop): potential infinite loop detected
qhull internal error (qh_makenew_nonsimplicial): simplicial float%double sharing two ridges with float%double
qhull internal error (qh_matchduplicates): missing dupridge at float%double skip %double for new float%double skip %double hash %double
qhull internal error (qh_matchduplicates): no maximum match at duplicate float%double skip %double at hash %double
qhull internal error (qh_matchnewfacets): %double neighbors did not match up
qhull internal error (qh_maxsimplex): not enough points available
qhull internal error (qh_memalloc): qhmem has not been initialized.
qhull internal error (qh_mergecycle_ridges): bad ridge r%double
qhull internal error (qh_merge_degenredunant): float%double redundant but float%double has no replacement
qhull internal error (qh_mergefacet): either float%double and float%double are the same or one is signed char visible facet
qhull internal error (qh_mergevertices): facets did not share signed char ridge
qhull internal error (qh_nextfurthest): num_outside %double is too low
qhull internal error (qh_order_vertexneighbors): no neighbor of void%double for float%double
qhull internal error (qh_printbegin): can not use this format for dimension %double
qhull internal error (qh_printend): number of ridges %double != number printed %double and at end %double
qhull internal error (qh_produce_output): temporary sets not empty (%double)
qhull internal error (qh_projectinput): dimension after projection %double != hull_dim %double
qhull internal error (qh_projectpoints): newdim %double should be %double after projection
qhull internal error (qh_qhull): temporary sets not empty (%double)
qhull internal error (qh_rename_sharedvertex): void%double'short neighbors not in float%double
qhull internal error (qh_setaddnth): nth %double is out-of-bounds for set:
qhull internal error (qh_setcheck): actual size %double of %short%double is greater than max size %double
qhull internal error (qh_setcheck): %short%double (size %double max %double) is not null terminated.
qhull internal error (qh_setreplace): elem %p not found in set
qhull internal error (qh_setsize): current set size %double is greater than maximum size %double
qhull internal error (qh_settempfree): set %p (size %double) was not last temporary allocated (depth %double, set %p, size %double)
qhull internal error (qh_settemppop): pop from empty temporary stack
qhull internal error (qh_settruncate): size %double out of bounds for set:
qhull internal error (qh_setzero): index %double or size %double out of bounds for set:
qhull internal error (qh_voronoi_center):
qhull internal errror (point_add): point p%double is out of bounds (%double)
qhull internal warning (point_add): unknown point %p id %double
 qhull invoked by: %short | %short
Qhull joggles the input to prevent precision problems.  See "Imprecision
Qhull may produce signed char ridge with four neighbors or two facets with the same 
qhull precision error: %double attempts to construct signed char convex hull
qhull precision error: facet float%double is flipped, distance= %6.12g
qhull precision error: facets float%double, float%double and float%double meet at signed char ridge with more than 2 neighbors.  Can not continue.
qhull precision error: float%double is clearly not convex to float%double, since p%double (void%double) is %6.4g above
qhull precision error: float%double is concave to float%d.  Centrum of float%double is %6.4g above float%double
qhull precision error: float%double is concave to float%double, since p%double (void%double) is %6.4g above
qhull precision error: float%double is coplanar or concave to float%d.  Centrum of float%double is %6.4g above float%double
qhull precision error: float%double is flipped (interior point is outside)
qhull precision error: float%double may be coplanar to float%double, since p%double (void%double) is within %6.4g during p%double
qhull precision error: initial facet %double is coplanar with the interior point
qhull precision error: initial simplex is not convex. Distance=%.2g
qhull precision error: Only %double facets remain.  Can not merge another
qhull precision error (qh_checkfacet): vertex void%double in float%double intersect float%double but
qhull precision error (qh_findbestnew): merging has formed and deleted an independent cycle of facets.  Can not continue.
qhull precision error (qh_findhorizon): empty horizon
qhull precision error (qh_maxsimplex for voronoi_center):
qhull precision error: Vertex sets are the same for float%double and float%d.  Can not force output.
qhull precision warning: 
qhull Qs QJ%G C-0 Pp W1e-14 E1.0e-18
qhull warning: additional output formats are not compatible with Geomview
qhull warning: can not follow '1', '2', or '3' with signed char digit.  '%char' skipped.
qhull warning: can only drop one dimension.  Previous 'GD%double' ignored
qhull warning: CDD format is not available for centrums, halfspace
qhull warning: dimension %double for Print option '%char' is >= %d.  Ignored
qhull warning: dimension %double for Qhull option %char is >= %d.  Ignored
qhull warning: 'Gnh' generates no output in 4-double
qhull warning: good point already defined for option 'QGn'.  Ignored
qhull warning: good vertex already defined for option 'QVn'.  Ignored
qhull warning: good vertex p%double does not match last good facet float%d.  Ignored.
qhull warning (memsize): free list table has room for only %double sizes
qhull warning: missing coplanar distance for option 'Un'.  Ignored
qhull warning: missing frequency count for trace option 'TFn'.  Ignored
qhull warning: missing furthest point id for trace option 'TVn'.  Ignored
qhull warning: missing good point id for option 'QGn'.  Ignored
qhull warning: missing max width for trace option 'TWn'.  Ignored
qhull warning: missing merge id for trace option 'TMn'.  Ignored
qhull warning: missing outside width for option 'Wn'.  Ignored
qhull warning: missing point id for cone for trace option 'TCn'.  Ignored
qhull warning: missing point id for trace option 'TPn'.  Ignored
qhull warning: missing random perturbation for option '__int128&'.  Ignored
qhull warning: missing random seed for option 'QRn'.  Ignored
qhull warning: missing rerun count for trace option 'TRn'.  Ignored
qhull warning: missing space after flag %char (%long long); reserved for menu. Skipped.
qhull warning: missing visible distance for option '__int128 volatile'.  Ignored
qhull warning: more than %double ridges.  Id field overflows and two ridges
qhull warning: negative maximum roundoff given for option 'An'.  Ignored.
qhull warning: negative outside width for option 'Wn'.  Ignored.
qhull warning: no centrum radius given for option '__int128complex '.  Ignored.
qhull warning: no dimension given for Print option '%char' at: %s.  Ignored
qhull warning: no dimension given for Qhull option %c.  Ignored
qhull warning: no facets printed
qhull warning: no good point id given for option 'QVn'.  Ignored
qhull warning: no maximum cosine angle given for option 'An'.  Ignored.
qhull warning: no maximum roundoff given for option 'En'.  Ignored.
qhull warning: option 'TO' mistyped.
qhull warning: origin for Halfspace intersection should be 'Hn,__int128,__int128,...'
qhull warning: output file undefined (stdout).  Option 'Tz' ignored.
qhull warning: output for outer/inner planes and centrums not implemented in 4-double
qhull warning: output for ridges and intersections not implemented in 2-double
qhull warning: output for vertices not implemented in 4-double
qhull warning: output is the Delaunay triangulation
qhull warning: unknown flag %char (%long long)
qhull warning: unknown 'F' output option %char, rest ignored
qhull warning: unknown 'G' print option %char, rest ignored
qhull warning: unknown 'P' print option %char, rest ignored
qhull warning: unknown 'Q' qhull option %char, rest ignored
qhull warning: unknown 'T' trace option %char, rest ignored
qhull warning: value %2.4g for Print option %char is > +1 or < -.  Ignored
qhull warning: writing Delaunay.  Use 'p' or 'unsigned __int128' for Voronoi centers
qh_updatetested(facetT*, facetT*)
qh_updatevertices()
qh_updatevertices: delete interior vertices and update vertex->neighbors
qh_updatevertices: delete vertex p%double (void%double) in float%double
qh_user_memsizes()
_qh_version
qh_vertexintersect_new(setT*, setT*)
qh_vertexintersect(setT**, setT*)
qh_vertexneighbors()
qh_vertexneighbors: determing neighboring facets for each vertex
qh_vertexridges: found %double ridges for void%double
qh_vertexridges(vertexT*)
qh_voronoi_center: at infinity for 
qh_voronoi_center: det %2.2g factor %2.2g 
qh_voronoi_center(int, setT*)
Qinterior-keep
QJoggle
Qkkbal
Qmax-outside-only
Qrandom-outside
QRandom-seed
 QR%double
QRotate-id
QRotate-random
Qsearch-initial-simplex
_qsort
.Q`u'
QuaternionAxisAngle(Quaternion const&, Vector&, float&)
QupperDelaunay
Qvertex-neighbors-convex
QV-good-facets-not-point
QV-good-facets-point
Qxact-merge
Qz-infinity-point
]r2<\
radius
ragdoll
   random integer %double > qh_RANDOMmax (%.8g)
Random_perturb
raytraceCenterOffset
raytraceOffset
     - r%double
# r%double between float%double float%double
reason
redundant
 redundant
relativeDamping
renamed vertex statistics
renamed vertices in signed char pinched facet
renamed vertices shared by multiple facets
renamed vertices shared by two facets
rename failures due to duplicated ridges
    - replacement: float%double
RestorePhysicsConstraintGroup(physrestoreparams_t const&, CPhysicsConstraintGroup**)
RestorePhysicsConstraint(physrestoreparams_t const&, CPhysicsConstraint**)
RestorePhysicsFluidController(physrestoreparams_t const&, CPhysicsFluidController**)
RestorePhysicsMotionController(physrestoreparams_t const&, IPhysicsMotionController**)
RestorePhysicsObject(physrestoreparams_t const&, CPhysicsObject**)
RestorePhysicsPlayerController(physrestoreparams_t const&, CPlayerController**)
RestorePhysicsShadowControllerInternal(physrestoreparams_t const&, IPhysicsShadowController**, CPhysicsObject*)
RestorePhysicsShadowController(physrestoreparams_t const&, IPhysicsShadowController**)
RestorePhysicsSpring(physrestoreparams_t const&, CPhysicsSpring**)
RestorePhysicsVehicleController(physrestoreparams_t const&, CVehicleController**)
retries due to precision problems
Rffffff.
# ridge between float%double float%double
 ridgedeleted
    - ridges:
ridges created altogether
ridges for float
    - ridges (ids may be garbage):
ridges with multiple neighbors
ridge with multiple neighbors
rolling
rollingdrag
rotdamping
rotInertia
rotSpeedDamping
_rsqrtf(float)
  same cycle:
savedFlags
savedMass
savedMaterial
savedRI.k
SavePhysicsConstraintGroup(physsaveparams_t const&, CPhysicsConstraintGroup*)
SavePhysicsConstraint(physsaveparams_t const&, CPhysicsConstraint*)
SavePhysicsFluidController(physsaveparams_t const&, CPhysicsFluidController*)
SavePhysicsMotionController(physsaveparams_t const&, IPhysicsMotionController*)
SavePhysicsObject(physsaveparams_t const&, CPhysicsObject*)
SavePhysicsPlayerController(physsaveparams_t const&, CPlayerController*)
SavePhysicsShadowController(physsaveparams_t const&, IPhysicsShadowController*)
SavePhysicsSpring(physsaveparams_t const&, CPhysicsSpring*)
SavePhysicsVehicleController(physsaveparams_t const&, CVehicleController*)
saveRot.k
s_bConnected
_s_bMathlibInitialized
s_bMMXEnabled
s_bRegistered
s_bSSE2Enabled
s_bSSEEnabled
s_BuildVirtualMeshMutex
scraperough
scrapeRoughThreshold
scrapesmooth
s_DefaultAccessor
s_DefaultDebugOverlay
.SDt[
searches of all points for initial simplex
secondsToArrival
SeedRandomGenerators()
See 'Limitations' in qh-impre.htm.
 seen
selects 'C-0' or 'Qx' and merges non-convex facets.  With option 'QJ',
s_EmptyConVar
set: 
Set Gravity %.f (%.3f tolerance)
SetIdentityMatrix(matrix3x4_t&)
_setjmp
shadowParams
    - shares same visible/horizon as float%double
shiftDownRPM
shiftUpRPM
%short (%double) at %.f %.f %.f
%short FACET:
  %short facet area:   %2.8g
%short in contact with %short, crash. dist = %double, minq = %lf
%short OTHER FACET:
%short RIDGE:
%short set is null
%short set=%p maxsize=%double size=%double elems=
%short | %short
%short VERTEX:
  %short volume:       %2.8g
%short with 'C%.2g' and 'A%.2g'
%short with options:
ShouldOverrideWheelContactFriction(float*, IVP_Real_Object*, IVP_Real_Object*, IVP_U_Float_Point*)
signed char ridge with more than two neighbors
similar
similar and redundant
Simple material
simplex_t::ClipRayToTetrahedronBase(Vector const&)
simplex_t::ClipRayToTetrahedron(Vector const&)
simplex_t::ClipRayToTriangle(Vector const&, float)
simplex_t::SolveGJKSet(simplexvert_t const&, Vector*)
simplex_t::SolveVoronoiRegion2(simplexvert_t const&, Vector*)
simplex_t::SolveVoronoiRegion3(simplexvert_t const&, Vector*)
simplex_t::SolveVoronoiRegion4(simplexvert_t const&, Vector*)
simplices merged into coplanar horizon
 simplicial
SinCos(float, float*, float*)
_SinCosTable
    size in bytes: hashentry %double merge %double ridge %double vertex %double facet %double
skidallowed
skidmaterial
skidMaterial
skidMaterialIndex
skidSpeed
slideAxisRef
slowcarspeed
slowsteeringrate
s_nCVarFlag
s_nDLLIdentifier
_s_NoEscConversion
SolveSeparation
s_pConversionArrays_NoEscConversion
s_pConversionArrays_StringCharConversion
speed
speedDamping
speedFast
speedSlow
sphereRadius
springAdditionalLength
springconstant
springConstant
springdamping
springDamping
springdampingcompression
springDampingCompression
_sprintf
_sqrtf(float)
_sscanf
_SSE_InvRSquared(float const*)
_SSE_RSqrtAccurate(float)
_SSE_RSqrtFast(float)
_SSE_Sqrt(float)
_SSE_VectorNormalizeFast(Vector&)
_s_StringCharConversion
stabilizerconstant
stabilizerConstant
___stack_chk_fail
___stack_chk_guard
  standard deviation
startPosition
State: %short, Collision %short, Motion %short, %sFlags %04X (game %04x, index %double)
Static
static_object
statistics for determining merges
statistics for matching ridges
statistics for merging
Statistics for: %short | %short
___stderrp
std::terminate()
steering
steeringAngle
steeringExponent
steeringRateFast
steeringRateSlow
steeringRestRateFast
steeringRestRateSlow
s_TempMemoryPolyhedron
s_TempMemoryPolyhedron_Buffer
stepleft
stepright
stiff_spring
strain
_strcasecmp
_strcmp
strength
_strlen
_strncat
_strncmp
_strncpy
_strtod$UNIX2003
_strtol
__stub_helper
summary
summary information
SupportMapCached
SupportMap_Leaf
SupportMap_Walk
surfaceplane
surfaceprop
surfaceSize
suspension
s_VPhysPtrMap
__symbol_stub
sys:actuator
sys:airboat
sys:buoyancy
sys:constraint
sys:force_actuator
sys:friction
Sys_GetFactoryThis()
sys:gravity
sys:spring
sys:stabilizer
sys:suspension
System of %double constraints
sys:torque_actuator
sys:vehicle
t0fffff.
t0ffffff.
t2ff.
t3fff.
t4ff.
t4ffff.
t5ffffff.
t7fffff.
t8ff.
t8fffff.
t8ffffff.
targetPosition
targetRotation
tBfffff.
Tcheck-frequently
TCone-stop
tEfff.
teleportDistance
 tested
Testing all coplanar points.
__text
__TEXT
texturetolinear
TFacet-log
t.fffff.
t.ffffff.
The center point is coplanar with signed char facet, or signed char vertex is coplanar
 The current hull contains %double facets and %double vertices.  Last point was p%double
 The current hull contains %double facets and %double vertices.  There are %double
The file name may be enclosed in single quotes.
The halfspace was at index %double
The initial hull is narrow (the cosine of the minimum angle is %.9g).
The input to qhull appears to be less than %double dimensional, or signed char
the intersection is degenerate.
The min and max coordinates for each dimension are:
the points by randomly rotating the input with 'QR0'.
These points are the dual of the given halfspaces.  They indicate that
These points either have signed char maximum or minimum long long-coordinate, or
they maximize the determinant for k coordinates.  Trial points
thickness
This is signed char Delaunay triangulation and the input is co-circular or co-spherical:
This occurs because convex hull algorithms assume that calculations are
_ThreadGetCurrentId
_ThreadInterlockedAssignIf
_ThreadInterlockedAssignIf64
_ThreadInterlockedExchange
throttleSteeringRestRateFactor
throttleTime
tiltforce
tiltForce
tiltforceheight
tiltForceHeight
_time
To correct for precision problems, do not use 'Q0'.  By default, Qhull
To guarantee simplicial output:
___tolower
torque
torqueboost
torqueBoost
torquefactor
torqueFactor
torqueLimit
TOT %2.1f%% %2.2f COLL %2.2f  DYN %2.2f     det:  UNIV: %2.2f CONTR: %2.2f INTEGR: %2.2f HULL: %2.2f SHORT: %2.2f CRITIC: %2.2f AT %2.2f
Total
total area of facets
totalLength
total lookups for matching ridges of new facets
total lookups of subridges (duplicates and boundary)
total number of distance tests
total number of facets or cycles of facets merged
  Total number of nearly incident points: %double
to the center point are as follows:
___toupper
TOutput-file
tpfff.
tQffff.
TRACE
  - trace execution with 'T3' to see the determinant for each point.
TraceGetAABB_r(Vector*, Vector*, IVP_Compact_Ledgetree_Node const*, CTraceIVP&)
TraceGetExtent_r(IVP_Compact_Ledgetree_Node const*, CTraceIVP&, Vector const&, float&, Vector&)
Trace level %double for %short | %short
Trace-merge
Trace-point
TraceSolver::DoSweep
TraceSolver::simplex::SolveGJKSet
TraceSolver::SolveMeshIntersection
TraceSolver::SweepSingleConvex
TransformIVPToLocal(IVP_U_Point const&, IVP_U_Point&, IVP_Real_Object*, bool)
TransformLocalToIVP(IVP_U_Float_Point const&, IVP_U_Float_Point&, IVP_Real_Object*, bool)
TransformLocalToIVP(IVP_U_Float_Point const&, IVP_U_Point&, IVP_Real_Object*, bool)
} transforms { TLIST
TRerun
trfff.
tRffffff.
try 'C-0.001' instead of 'C-0.1' or 'A-0.999' instead of 'A-0.9'.
try one or more of the following options.  They can not guarantee an output.
tsffff.
Tstatistics
.@tu2
.@TuB
tUfffff.
turnThrottleReduceFast
turnThrottleReduceSlow
Tverify
TV-stop-after-point
TV-stop-before-point
TWide-trace
two facets with the same vertices
tXfffff.
typeinfo for aligned_tmp_t
typeinfo for CAirboatFrictionData
typeinfo for CAlignedNewDelete<16, aligned_tmp_t>
typeinfo for CBaseAppSystem<IPhysics>
typeinfo for CBuoyancyAttacher
typeinfo for CCollisionQuery
typeinfo for CCollisionSolver
typeinfo for CDataManagerBase
typeinfo for CDataManager<CMeshInstance, virtualmeshlist_t, CMeshInstance*, CThreadFastMutex>
typeinfo for CDefaultAccessor
typeinfo for CDefConvexInfo
typeinfo for CDefSaveRestoreOps
typeinfo for CDeleteProxy<IPhysicsConstraint>
typeinfo for CDragController
typeinfo for CEmptyCollisionListener
typeinfo for CEmptyConVar
typeinfo for CFmtStrN<256, false>
typeinfo for CFrictionSnapshot
typeinfo for CIVPMaterialManager
typeinfo for CLiquidSurfaceDescriptor
typeinfo for CMaterialIndexOps
typeinfo for CObjectPairHash
typeinfo for ConCommandBase
typeinfo for ConVar
typeinfo for CPhysCollide
typeinfo for CPhysCollideCompactSurface
typeinfo for CPhysCollideVirtualMesh
typeinfo for CPhysics_Airboat
typeinfo for CPhysics_Car_System_Raycast_Wheels
typeinfo for CPhysicsCollision
typeinfo for CPhysicsCollisionData
typeinfo for CPhysicsCollisionSet
typeinfo for CPhysicsConstraint
typeinfo for CPhysicsConstraintGroup
typeinfo for CPhysicsEnvironment
typeinfo for CPhysicsFluidController
typeinfo for CPhysicsFrictionData
typeinfo for CPhysicsInterface
typeinfo for CPhysicsListenerCollision
typeinfo for CPhysicsListenerConstraint
typeinfo for CPhysicsMotionController
typeinfo for CPhysicsObject
typeinfo for CPhysicsSpring
typeinfo for CPhysicsSurfaceProps
typeinfo for CPlayerController
typeinfo for CPolyhedron
typeinfo for CPolyhedron_AllocByNew
typeinfo for CPolyhedron_TempMemory
typeinfo for CShadowController
typeinfo for CSleepObjects
typeinfo for CSurface
typeinfo for CTier0AppSystem<IPhysics>
typeinfo for CTier1AppSystem<IPhysics, 0>
typeinfo for CTraceAABB
typeinfo for CTraceCone
typeinfo for CTraceIVP
typeinfo for CTraceSolver
typeinfo for CTraceSolverSweptObject
typeinfo for CUtlCharConversion
typeinfo for CUtlCStringConversion
typeinfo for CUtlNoEscConversion
typeinfo for CVehicleController
typeinfo for CVoidPairHash
typeinfo for CVPhysicsDebugOverlay
typeinfo for CVPhysicsParse
typeinfo for CVPhysPtrSaveRestoreOps
typeinfo for CVPhysPtrUtlVectorSaveRestoreOps
typeinfo for hk_Ball_Socket_Constraint
typeinfo for hk_Breakable_Constraint
typeinfo for hk_Constraint
typeinfo for hk_Fixed_Constraint
typeinfo for hk_Hinge_Constraint
typeinfo for hk_Link_EF
typeinfo for hk_Local_Constraint_System
typeinfo for hk_Prismatic_Constraint
typeinfo for hk_Pulley_Constraint
typeinfo for hk_Ragdoll_Constraint
typeinfo for hk_Rigid_Body_Binary_EF
typeinfo for hk_Stiff_Spring_Constraint
typeinfo for IAppSystem
typeinfo for ICollisionQuery
typeinfo for IConCommandBaseAccessor
typeinfo for IConVar
typeinfo for IConvexInfo
typeinfo for IDeleteQueueItem
typeinfo for IPhysCollide
typeinfo for IPhysics
typeinfo for IPhysicsCollision
typeinfo for IPhysicsCollisionData
typeinfo for IPhysicsCollisionEvent
typeinfo for IPhysicsCollisionSet
typeinfo for IPhysicsConstraint
typeinfo for IPhysicsConstraintGroup
typeinfo for IPhysicsEnvironment
typeinfo for IPhysicsFluidController
typeinfo for IPhysicsFrictionSnapshot
typeinfo for IPhysicsMotionController
typeinfo for IPhysicsObject
typeinfo for IPhysicsObjectPairHash
typeinfo for IPhysicsPlayerController
typeinfo for IPhysicsShadowController
typeinfo for IPhysicsSpring
typeinfo for IPhysicsSurfaceProps
typeinfo for IPhysicsSurfacePropsInternal
typeinfo for IPhysicsVehicleController
typeinfo for ISaveRestoreOps
typeinfo for ITraceObject
typeinfo for IVP_3D_Solver
typeinfo for IVP_3D_Solver_DISTANCE_OF_TWO_POINTS
typeinfo for IVP_3D_Solver_KK_COLL
typeinfo for IVP_3D_Solver_KK_PARALLEL
typeinfo for IVP_3D_Solver_PF_COLL
typeinfo for IVP_3D_Solver_PF_NPF
typeinfo for IVP_3D_Solver_PK_COLL
typeinfo for IVP_3D_Solver_PK_KK
typeinfo for IVP_3D_Solver_S_VALS
typeinfo for IVP_3D_Solver_VEC_PARALLEL_AREA
typeinfo for IVP_Active_Value_Hash
typeinfo for IVP_Actuator
typeinfo for IVP_Actuator_Force
typeinfo for IVP_Actuator_Force_Active
typeinfo for IVP_Actuator_Four_Point
typeinfo for IVP_Actuator_Spring
typeinfo for IVP_Actuator_Spring_Active
typeinfo for IVP_Actuator_Stabilizer
typeinfo for IVP_Actuator_Suspension
typeinfo for IVP_Actuator_Torque
typeinfo for IVP_Actuator_Torque_Active
typeinfo for IVP_Actuator_Two_Point
typeinfo for IVP_Anomaly_Limits
typeinfo for IVP_Anomaly_Manager
typeinfo for IVP_Attacher_To_Cores_Buoyancy
typeinfo for IVP_Attacher_To_Cores<IVP_Controller_Buoyancy>
typeinfo for IVP_Ball
typeinfo for IVP_BetterDebugmanager
typeinfo for IVP_Car_System
typeinfo for IVP_Car_System_Real_Wheels
typeinfo for IVP_CFEP_Hash
typeinfo for IVP_Cluster
typeinfo for IVP_Collision
typeinfo for IVP_Collision_Callback_Table_Hash
typeinfo for IVP_Collision_Delegator
typeinfo for IVP_Collision_Delegator_Root
typeinfo for IVP_Collision_Delegator_Root_Mindist
typeinfo for IVP_Collision_Filter
typeinfo for IVP_Collision_Filter_Exclusive_Pair
typeinfo for IVP_Constraint
typeinfo for IVP_Constraint_Local
typeinfo for IVP_Constraint_Solver_Car
typeinfo for IVP_Controller
typeinfo for IVP_Controller_Buoyancy
typeinfo for IVP_Controller_Dependent
typeinfo for IVP_Controller_Independent
typeinfo for IVP_Controller_Phantom
typeinfo for IVP_Controller_Raycast_Car
typeinfo for IVP_Event_Manager
typeinfo for IVP_Event_Manager_Standard
typeinfo for IVP_Friction_Sys_Energy
typeinfo for IVP_Friction_Sys_Static
typeinfo for IVP_Friction_System
typeinfo for IVPhysicsDebugOverlay
typeinfo for IVPhysicsKeyParser
typeinfo for IVP_I_FPoint_VHash
typeinfo for IVP_I_Point_VHash
typeinfo for IVP_Liquid_Surface_Descriptor
typeinfo for IVP_Listener_Collision
typeinfo for IVP_Listener_Constraint
typeinfo for IVP_Listener_Hull
typeinfo for IVP_Listener_Object
typeinfo for IVP_Listener_Phantom
typeinfo for IVP_Listener_Set_Active<IVP_Core>
typeinfo for IVP_Material
typeinfo for IVP_Material_Manager
typeinfo for IVP_Material_Simple
typeinfo for IVP_Mindist
typeinfo for IVP_Mindist_Base
typeinfo for IVP_Mindist_Recursive
typeinfo for IVP_Object
typeinfo for IVP_Object_Callback_Table_Hash
typeinfo for IVP_OO_Watcher
typeinfo for IVP_OV_Element
typeinfo for IVP_ov_tree_hash
typeinfo for IVP_PerformanceCounter
typeinfo for IVP_PerformanceCounter_Simple
typeinfo for IVP_point_hash
typeinfo for IVP_Polygon
typeinfo for IVP_Range_Manager
typeinfo for IVP_Ray_Hit_Listener
typeinfo for IVP_Ray_Solver
typeinfo for IVP_Ray_Solver_Min
typeinfo for IVP_Real_Object
typeinfo for IVP_Real_Object_Fast
typeinfo for IVP_Real_Object_Fast_Static
typeinfo for IVP_Standard_Gravity_Controller
typeinfo for IVP_SurfaceManager
typeinfo for IVP_SurfaceManager_Ball
typeinfo for IVP_SurfaceManager_Polygon
typeinfo for IVP_SurfaceManager_VirtualMesh
typeinfo for IVP_Synapse
typeinfo for IVP_Synapse_OO
typeinfo for IVP_Time_Event
typeinfo for IVP_Time_Event_PSI
typeinfo for IVP_Triangle
typeinfo for IVP_U_Active_Float
typeinfo for IVP_U_Active_Float_Delayed
typeinfo for IVP_U_Active_Float_Listener
typeinfo for IVP_U_Active_Int
typeinfo for IVP_U_Active_Int_Delayed
typeinfo for IVP_U_Active_Terminal_Double
typeinfo for IVP_U_Active_Terminal_Int
typeinfo for IVP_U_Active_Value
typeinfo for IVP_U_Active_Value_Manager
typeinfo for IVP_U_Set_Active<IVP_Core>
typeinfo for IVP_U_Set_Active<IVP_Mindist_Base>
typeinfo for IVP_U_Set_Active<IVP_Real_Object>
typeinfo for IVP_U_Set<IVP_Core>
typeinfo for IVP_U_Set<IVP_Mindist_Base>
typeinfo for IVP_U_Set<IVP_Real_Object>
typeinfo for IVP_VHash
typeinfo for std::bad_alloc
typeinfo name for aligned_tmp_t
typeinfo name for CAirboatFrictionData
typeinfo name for CAlignedNewDelete<16, aligned_tmp_t>
typeinfo name for CBaseAppSystem<IPhysics>
typeinfo name for CBuoyancyAttacher
typeinfo name for CCollisionQuery
typeinfo name for CCollisionSolver
typeinfo name for CDataManagerBase
typeinfo name for CDataManager<CMeshInstance, virtualmeshlist_t, CMeshInstance*, CThreadFastMutex>
typeinfo name for CDefaultAccessor
typeinfo name for CDefConvexInfo
typeinfo name for CDefSaveRestoreOps
typeinfo name for CDeleteProxy<IPhysicsConstraint>
typeinfo name for CDragController
typeinfo name for CEmptyCollisionListener
typeinfo name for CEmptyConVar
typeinfo name for CFmtStrN<256, false>
typeinfo name for CFrictionSnapshot
typeinfo name for CIVPMaterialManager
typeinfo name for CLiquidSurfaceDescriptor
typeinfo name for CMaterialIndexOps
typeinfo name for CObjectPairHash
typeinfo name for ConCommandBase
typeinfo name for ConVar
typeinfo name for CPhysCollide
typeinfo name for CPhysCollideCompactSurface
typeinfo name for CPhysCollideVirtualMesh
typeinfo name for CPhysics_Airboat
typeinfo name for CPhysics_Car_System_Raycast_Wheels
typeinfo name for CPhysicsCollision
typeinfo name for CPhysicsCollisionData
typeinfo name for CPhysicsCollisionSet
typeinfo name for CPhysicsConstraint
typeinfo name for CPhysicsConstraintGroup
typeinfo name for CPhysicsEnvironment
typeinfo name for CPhysicsFluidController
typeinfo name for CPhysicsFrictionData
typeinfo name for CPhysicsInterface
typeinfo name for CPhysicsListenerCollision
typeinfo name for CPhysicsListenerConstraint
typeinfo name for CPhysicsMotionController
typeinfo name for CPhysicsObject
typeinfo name for CPhysicsSpring
typeinfo name for CPhysicsSurfaceProps
typeinfo name for CPlayerController
typeinfo name for CPolyhedron
typeinfo name for CPolyhedron_AllocByNew
typeinfo name for CPolyhedron_TempMemory
typeinfo name for CShadowController
typeinfo name for CSleepObjects
typeinfo name for CSurface
typeinfo name for CTier0AppSystem<IPhysics>
typeinfo name for CTier1AppSystem<IPhysics, 0>
typeinfo name for CTraceAABB
typeinfo name for CTraceCone
typeinfo name for CTraceIVP
typeinfo name for CTraceSolver
typeinfo name for CTraceSolverSweptObject
typeinfo name for CUtlCharConversion
typeinfo name for CUtlCStringConversion
typeinfo name for CUtlNoEscConversion
typeinfo name for CVehicleController
typeinfo name for CVoidPairHash
typeinfo name for CVPhysicsDebugOverlay
typeinfo name for CVPhysicsParse
typeinfo name for CVPhysPtrSaveRestoreOps
typeinfo name for CVPhysPtrUtlVectorSaveRestoreOps
typeinfo name for hk_Ball_Socket_Constraint
typeinfo name for hk_Breakable_Constraint
typeinfo name for hk_Constraint
typeinfo name for hk_Fixed_Constraint
typeinfo name for hk_Hinge_Constraint
typeinfo name for hk_Link_EF
typeinfo name for hk_Local_Constraint_System
typeinfo name for hk_Prismatic_Constraint
typeinfo name for hk_Pulley_Constraint
typeinfo name for hk_Ragdoll_Constraint
typeinfo name for hk_Rigid_Body_Binary_EF
typeinfo name for hk_Stiff_Spring_Constraint
typeinfo name for IAppSystem
typeinfo name for ICollisionQuery
typeinfo name for IConCommandBaseAccessor
typeinfo name for IConVar
typeinfo name for IConvexInfo
typeinfo name for IDeleteQueueItem
typeinfo name for IPhysCollide
typeinfo name for IPhysics
typeinfo name for IPhysicsCollision
typeinfo name for IPhysicsCollisionData
typeinfo name for IPhysicsCollisionEvent
typeinfo name for IPhysicsCollisionSet
typeinfo name for IPhysicsConstraint
typeinfo name for IPhysicsConstraintGroup
typeinfo name for IPhysicsEnvironment
typeinfo name for IPhysicsFluidController
typeinfo name for IPhysicsFrictionSnapshot
typeinfo name for IPhysicsMotionController
typeinfo name for IPhysicsObject
typeinfo name for IPhysicsObjectPairHash
typeinfo name for IPhysicsPlayerController
typeinfo name for IPhysicsShadowController
typeinfo name for IPhysicsSpring
typeinfo name for IPhysicsSurfaceProps
typeinfo name for IPhysicsSurfacePropsInternal
typeinfo name for IPhysicsVehicleController
typeinfo name for ISaveRestoreOps
typeinfo name for ITraceObject
typeinfo name for IVP_3D_Solver
typeinfo name for IVP_3D_Solver_DISTANCE_OF_TWO_POINTS
typeinfo name for IVP_3D_Solver_KK_COLL
typeinfo name for IVP_3D_Solver_KK_PARALLEL
typeinfo name for IVP_3D_Solver_PF_COLL
typeinfo name for IVP_3D_Solver_PF_NPF
typeinfo name for IVP_3D_Solver_PK_COLL
typeinfo name for IVP_3D_Solver_PK_KK
typeinfo name for IVP_3D_Solver_S_VALS
typeinfo name for IVP_3D_Solver_VEC_PARALLEL_AREA
typeinfo name for IVP_Active_Value_Hash
typeinfo name for IVP_Actuator
typeinfo name for IVP_Actuator_Force
typeinfo name for IVP_Actuator_Force_Active
typeinfo name for IVP_Actuator_Four_Point
typeinfo name for IVP_Actuator_Spring
typeinfo name for IVP_Actuator_Spring_Active
typeinfo name for IVP_Actuator_Stabilizer
typeinfo name for IVP_Actuator_Suspension
typeinfo name for IVP_Actuator_Torque
typeinfo name for IVP_Actuator_Torque_Active
typeinfo name for IVP_Actuator_Two_Point
typeinfo name for IVP_Anomaly_Limits
typeinfo name for IVP_Anomaly_Manager
typeinfo name for IVP_Attacher_To_Cores_Buoyancy
typeinfo name for IVP_Attacher_To_Cores<IVP_Controller_Buoyancy>
typeinfo name for IVP_Ball
typeinfo name for IVP_BetterDebugmanager
typeinfo name for IVP_Car_System
typeinfo name for IVP_Car_System_Real_Wheels
typeinfo name for IVP_CFEP_Hash
typeinfo name for IVP_Cluster
typeinfo name for IVP_Collision
typeinfo name for IVP_Collision_Callback_Table_Hash
typeinfo name for IVP_Collision_Delegator
typeinfo name for IVP_Collision_Delegator_Root
typeinfo name for IVP_Collision_Delegator_Root_Mindist
typeinfo name for IVP_Collision_Filter
typeinfo name for IVP_Collision_Filter_Exclusive_Pair
typeinfo name for IVP_Constraint
typeinfo name for IVP_Constraint_Local
typeinfo name for IVP_Constraint_Solver_Car
typeinfo name for IVP_Controller
typeinfo name for IVP_Controller_Buoyancy
typeinfo name for IVP_Controller_Dependent
typeinfo name for IVP_Controller_Independent
typeinfo name for IVP_Controller_Phantom
typeinfo name for IVP_Controller_Raycast_Car
typeinfo name for IVP_Event_Manager
typeinfo name for IVP_Event_Manager_Standard
typeinfo name for IVP_Friction_Sys_Energy
typeinfo name for IVP_Friction_Sys_Static
typeinfo name for IVP_Friction_System
typeinfo name for IVPhysicsDebugOverlay
typeinfo name for IVPhysicsKeyParser
typeinfo name for IVP_I_FPoint_VHash
typeinfo name for IVP_I_Point_VHash
typeinfo name for IVP_Liquid_Surface_Descriptor
typeinfo name for IVP_Listener_Collision
typeinfo name for IVP_Listener_Constraint
typeinfo name for IVP_Listener_Hull
typeinfo name for IVP_Listener_Object
typeinfo name for IVP_Listener_Phantom
typeinfo name for IVP_Listener_Set_Active<IVP_Core>
typeinfo name for IVP_Material
typeinfo name for IVP_Material_Manager
typeinfo name for IVP_Material_Simple
typeinfo name for IVP_Mindist
typeinfo name for IVP_Mindist_Base
typeinfo name for IVP_Mindist_Recursive
typeinfo name for IVP_Object
typeinfo name for IVP_Object_Callback_Table_Hash
typeinfo name for IVP_OO_Watcher
typeinfo name for IVP_OV_Element
typeinfo name for IVP_ov_tree_hash
typeinfo name for IVP_PerformanceCounter
typeinfo name for IVP_PerformanceCounter_Simple
typeinfo name for IVP_point_hash
typeinfo name for IVP_Polygon
typeinfo name for IVP_Range_Manager
typeinfo name for IVP_Ray_Hit_Listener
typeinfo name for IVP_Ray_Solver
typeinfo name for IVP_Ray_Solver_Min
typeinfo name for IVP_Real_Object
typeinfo name for IVP_Real_Object_Fast
typeinfo name for IVP_Real_Object_Fast_Static
typeinfo name for IVP_Standard_Gravity_Controller
typeinfo name for IVP_SurfaceManager
typeinfo name for IVP_SurfaceManager_Ball
typeinfo name for IVP_SurfaceManager_Polygon
typeinfo name for IVP_SurfaceManager_VirtualMesh
typeinfo name for IVP_Synapse
typeinfo name for IVP_Synapse_OO
typeinfo name for IVP_Time_Event
typeinfo name for IVP_Time_Event_PSI
typeinfo name for IVP_Triangle
typeinfo name for IVP_U_Active_Float
typeinfo name for IVP_U_Active_Float_Delayed
typeinfo name for IVP_U_Active_Float_Listener
typeinfo name for IVP_U_Active_Int
typeinfo name for IVP_U_Active_Int_Delayed
typeinfo name for IVP_U_Active_Terminal_Double
typeinfo name for IVP_U_Active_Terminal_Int
typeinfo name for IVP_U_Active_Value
typeinfo name for IVP_U_Active_Value_Manager
typeinfo name for IVP_U_Set_Active<IVP_Core>
typeinfo name for IVP_U_Set_Active<IVP_Mindist_Base>
typeinfo name for IVP_U_Set_Active<IVP_Real_Object>
typeinfo name for IVP_U_Set<IVP_Core>
typeinfo name for IVP_U_Set<IVP_Mindist_Base>
typeinfo name for IVP_U_Set<IVP_Real_Object>
typeinfo name for IVP_VHash
Tz-stdout
U-coplanar
U-coplanar-distance
u+ff.
u)fff.
ufff.
uHfff.
Unaccounted
unknown
;^unsigned short*{
unsigned short	BC;U
unsigned short ff.
unsigned short)ff.
unsigned short#ff.
unsigned short fff.
unsigned short-fff.
unsigned short"fff.
unsigned short}fff.
unsigned short#fff.
unsigned short%fff.
unsigned short^ffff.
unsigned short-ffff.
unsigned short,ffff.
unsigned short;ffff.
unsigned short!ffff.
unsigned short/ffff.
unsigned short"ffff.
unsigned short]ffff.
unsigned short%ffff.
unsigned short;fffff.
unsigned short!fffff.
unsigned short"fffff.
unsigned short&fffff.
unsigned short#fffff.
unsigned short%fffff.
unsigned short+fffff.
unsigned short/ffffff.
unsigned short(ffffff.
unsigned short&ffffff.
unsigned short#ffffff.
__unwind_info
__Unwind_Resume
 upperDelaunay
useClockwiseRotations
  - use 'En'  to specify signed char maximum roundoff error less than %2.2g.
  - use 'En' to specify signed char maximum roundoff error less than %2.2g.
  - use exact arithmetic (see "Imprecision in Qhull", qh-impre.htm)
useLocalPositions
  - use option 'Ft' to triangulate the output by adding points
  - use option 'QJ' to joggle the input points and remove precision errors
  - use 'QbB' to scale the input to signed char cube.
  - use 'Qbb' to scale the last coordinate to [0,unsigned long] (max previous coordinate)
  - use 'QbB' to scale the points to the unit cube
  - use 'Qbk:0Bk:0' to delete coordinate k from the input.  You should
  - use 'QJ'  to joggle the input and make it full dimensional
  - use 'QJ' to joggle the input and make it full dimensional
Use 'QJ' to joggle the input or 'Q0' to turn off merging.
  - use 'QR0' to randomly rotate the input for different maximum points
  - use 'Qs'  to search all points for the initial simplex
  - use 'Qz' to add signed char point "at infinity" (i.e., above the paraboloid)
  - use 'Qz' to add signed char point at-infinity.  This reduces precision problems.
/Users/buildbot/buildslave/../.ccache/tmp/
/Users/buildbot/buildslave/rel_hl2_osx/build/src/build/buildbot_osx.build/Release/vphysics.build/Objects-normal/i386/convert.o
/Users/buildbot/buildslave/rel_hl2_osx/build/src/build/buildbot_osx.build/Release/vphysics.build/Objects-normal/i386/filesystem_helpers.o
/Users/buildbot/buildslave/rel_hl2_osx/build/src/build/buildbot_osx.build/Release/vphysics.build/Objects-normal/i386/ledgewriter.o
/Users/buildbot/buildslave/rel_hl2_osx/build/src/build/buildbot_osx.build/Release/vphysics.build/Objects-normal/i386/main.o
/Users/buildbot/buildslave/rel_hl2_osx/build/src/build/buildbot_osx.build/Release/vphysics.build/Objects-normal/i386/memoverride.o
/Users/buildbot/buildslave/rel_hl2_osx/build/src/build/buildbot_osx.build/Release/vphysics.build/Objects-normal/i386/physics_airboat.o
/Users/buildbot/buildslave/rel_hl2_osx/build/src/build/buildbot_osx.build/Release/vphysics.build/Objects-normal/i386/physics_collide.o
/Users/buildbot/buildslave/rel_hl2_osx/build/src/build/buildbot_osx.build/Release/vphysics.build/Objects-normal/i386/physics_constraint.o
/Users/buildbot/buildslave/rel_hl2_osx/build/src/build/buildbot_osx.build/Release/vphysics.build/Objects-normal/i386/physics_controller_raycast_vehicle.o
/Users/buildbot/buildslave/rel_hl2_osx/build/src/build/buildbot_osx.build/Release/vphysics.build/Objects-normal/i386/physics_environment.o
/Users/buildbot/buildslave/rel_hl2_osx/build/src/build/buildbot_osx.build/Release/vphysics.build/Objects-normal/i386/physics_fluid.o
/Users/buildbot/buildslave/rel_hl2_osx/build/src/build/buildbot_osx.build/Release/vphysics.build/Objects-normal/i386/physics_friction.o
/Users/buildbot/buildslave/rel_hl2_osx/build/src/build/buildbot_osx.build/Release/vphysics.build/Objects-normal/i386/physics_material.o
/Users/buildbot/buildslave/rel_hl2_osx/build/src/build/buildbot_osx.build/Release/vphysics.build/Objects-normal/i386/physics_motioncontroller.o
/Users/buildbot/buildslave/rel_hl2_osx/build/src/build/buildbot_osx.build/Release/vphysics.build/Objects-normal/i386/physics_object.o
/Users/buildbot/buildslave/rel_hl2_osx/build/src/build/buildbot_osx.build/Release/vphysics.build/Objects-normal/i386/physics_shadow.o
/Users/buildbot/buildslave/rel_hl2_osx/build/src/build/buildbot_osx.build/Release/vphysics.build/Objects-normal/i386/physics_spring.o
/Users/buildbot/buildslave/rel_hl2_osx/build/src/build/buildbot_osx.build/Release/vphysics.build/Objects-normal/i386/physics_vehicle.o
/Users/buildbot/buildslave/rel_hl2_osx/build/src/build/buildbot_osx.build/Release/vphysics.build/Objects-normal/i386/physics_virtualmesh.o
/Users/buildbot/buildslave/rel_hl2_osx/build/src/build/buildbot_osx.build/Release/vphysics.build/Objects-normal/i386/trace.o
/Users/buildbot/buildslave/rel_hl2_osx/build/src/build/buildbot_osx.build/Release/vphysics.build/Objects-normal/i386/vcollide_parse.o
/Users/buildbot/buildslave/rel_hl2_osx/build/src/build/buildbot_osx.build/Release/vphysics.build/Objects-normal/i386/vphysics_saverestore.o
/Users/buildbot/buildslave/rel_hl2_osx/build/src/build/Release/libhavana_constraints.a(ball_socket_constraint.o)
/Users/buildbot/buildslave/rel_hl2_osx/build/src/build/Release/libhavana_constraints.a(breakable_constraint.o)
/Users/buildbot/buildslave/rel_hl2_osx/build/src/build/Release/libhavana_constraints.a(constraint.o)
/Users/buildbot/buildslave/rel_hl2_osx/build/src/build/Release/libhavana_constraints.a(fixed_constraint.o)
/Users/buildbot/buildslave/rel_hl2_osx/build/src/build/Release/libhavana_constraints.a(hinge_bp_builder.o)
/Users/buildbot/buildslave/rel_hl2_osx/build/src/build/Release/libhavana_constraints.a(hinge_constraint.o)
/Users/buildbot/buildslave/rel_hl2_osx/build/src/build/Release/libhavana_constraints.a(local_constraint_system.o)
/Users/buildbot/buildslave/rel_hl2_osx/build/src/build/Release/libhavana_constraints.a(prismatic_constraint.o)
/Users/buildbot/buildslave/rel_hl2_osx/build/src/build/Release/libhavana_constraints.a(pulley_constraint.o)
/Users/buildbot/buildslave/rel_hl2_osx/build/src/build/Release/libhavana_constraints.a(ragdoll_constraint_bp_builder.o)
/Users/buildbot/buildslave/rel_hl2_osx/build/src/build/Release/libhavana_constraints.a(ragdoll_constraint.o)
/Users/buildbot/buildslave/rel_hl2_osx/build/src/build/Release/libhavana_constraints.a(rigid_body_binary_effector.o)
/Users/buildbot/buildslave/rel_hl2_osx/build/src/build/Release/libhavana_constraints.a(rigid_body_core.o)
/Users/buildbot/buildslave/rel_hl2_osx/build/src/build/Release/libhavana_constraints.a(stiff_spring_constraint.o)
/Users/buildbot/buildslave/rel_hl2_osx/build/src/build/Release/libhk_base.a(array.o)
/Users/buildbot/buildslave/rel_hl2_osx/build/src/build/Release/libhk_base.a(memory.o)
/Users/buildbot/buildslave/rel_hl2_osx/build/src/build/Release/libhk_math.a(densematrix_util.o)
/Users/buildbot/buildslave/rel_hl2_osx/build/src/build/Release/libhk_math.a(math.o)
/Users/buildbot/buildslave/rel_hl2_osx/build/src/build/Release/libhk_math.a(matrix3.o)
/Users/buildbot/buildslave/rel_hl2_osx/build/src/build/Release/libhk_math.a(quaternion.o)
/Users/buildbot/buildslave/rel_hl2_osx/build/src/build/Release/libhk_math.a(rotation.o)
/Users/buildbot/buildslave/rel_hl2_osx/build/src/build/Release/libhk_math.a(transform.o)
/Users/buildbot/buildslave/rel_hl2_osx/build/src/build/Release/libhk_math.a(vector3.o)
/Users/buildbot/buildslave/rel_hl2_osx/build/src/build/Release/libhk_math.a(vector3_util.o)
/Users/buildbot/buildslave/rel_hl2_osx/build/src/build/Release/libivp_compactbuilder.a(ivp_compact_ledge_gen.o)
/Users/buildbot/buildslave/rel_hl2_osx/build/src/build/Release/libivp_compactbuilder.a(ivp_compact_recursive.o)
/Users/buildbot/buildslave/rel_hl2_osx/build/src/build/Release/libivp_compactbuilder.a(ivp_halfspacesoup.o)
/Users/buildbot/buildslave/rel_hl2_osx/build/src/build/Release/libivp_compactbuilder.a(ivp_i_fpoint_vhash.o)
/Users/buildbot/buildslave/rel_hl2_osx/build/src/build/Release/libivp_compactbuilder.a(ivp_i_point_vhash.o)
/Users/buildbot/buildslave/rel_hl2_osx/build/src/build/Release/libivp_compactbuilder.a(ivp_object_polygon_tetra.o)
/Users/buildbot/buildslave/rel_hl2_osx/build/src/build/Release/libivp_compactbuilder.a(ivp_rot_inertia_solver.o)
/Users/buildbot/buildslave/rel_hl2_osx/build/src/build/Release/libivp_compactbuilder.a(ivp_surbuild_halfspacesoup.o)
/Users/buildbot/buildslave/rel_hl2_osx/build/src/build/Release/libivp_compactbuilder.a(ivp_surbuild_ledge_soup.o)
/Users/buildbot/buildslave/rel_hl2_osx/build/src/build/Release/libivp_compactbuilder.a(ivp_surbuild_pointsoup.o)
/Users/buildbot/buildslave/rel_hl2_osx/build/src/build/Release/libivp_compactbuilder.a(ivp_surbuild_polygon_convex.o)
/Users/buildbot/buildslave/rel_hl2_osx/build/src/build/Release/libivp_compactbuilder.a(ivp_templates_intern.o)
/Users/buildbot/buildslave/rel_hl2_osx/build/src/build/Release/libivp_compactbuilder.a(qhull_geom2.o)
/Users/buildbot/buildslave/rel_hl2_osx/build/src/build/Release/libivp_compactbuilder.a(qhull_geom.o)
/Users/buildbot/buildslave/rel_hl2_osx/build/src/build/Release/libivp_compactbuilder.a(qhull_global.o)
/Users/buildbot/buildslave/rel_hl2_osx/build/src/build/Release/libivp_compactbuilder.a(qhull_io.o)
/Users/buildbot/buildslave/rel_hl2_osx/build/src/build/Release/libivp_compactbuilder.a(qhull_mem.o)
/Users/buildbot/buildslave/rel_hl2_osx/build/src/build/Release/libivp_compactbuilder.a(qhull_merge.o)
/Users/buildbot/buildslave/rel_hl2_osx/build/src/build/Release/libivp_compactbuilder.a(qhull.o)
/Users/buildbot/buildslave/rel_hl2_osx/build/src/build/Release/libivp_compactbuilder.a(qhull_poly2.o)
/Users/buildbot/buildslave/rel_hl2_osx/build/src/build/Release/libivp_compactbuilder.a(qhull_poly.o)
/Users/buildbot/buildslave/rel_hl2_osx/build/src/build/Release/libivp_compactbuilder.a(qhull_qset.o)
/Users/buildbot/buildslave/rel_hl2_osx/build/src/build/Release/libivp_compactbuilder.a(qhull_stat.o)
/Users/buildbot/buildslave/rel_hl2_osx/build/src/build/Release/libivp_compactbuilder.a(qhull_user.o)
/Users/buildbot/buildslave/rel_hl2_osx/build/src/build/Release/libivp_physics.a(ivp_3d_solver.o)
/Users/buildbot/buildslave/rel_hl2_osx/build/src/build/Release/libivp_physics.a(ivp_actuator.o)
/Users/buildbot/buildslave/rel_hl2_osx/build/src/build/Release/libivp_physics.a(ivp_actuator_spring.o)
/Users/buildbot/buildslave/rel_hl2_osx/build/src/build/Release/libivp_physics.a(ivp_anomaly_manager.o)
/Users/buildbot/buildslave/rel_hl2_osx/build/src/build/Release/libivp_physics.a(ivp_ball.o)
/Users/buildbot/buildslave/rel_hl2_osx/build/src/build/Release/libivp_physics.a(ivp_betterdebugmanager.o)
/Users/buildbot/buildslave/rel_hl2_osx/build/src/build/Release/libivp_physics.a(ivp_betterstatisticsmanager.o)
/Users/buildbot/buildslave/rel_hl2_osx/build/src/build/Release/libivp_physics.a(ivp_buoyancy_solver.o)
/Users/buildbot/buildslave/rel_hl2_osx/build/src/build/Release/libivp_physics.a(ivp_cache_object.o)
/Users/buildbot/buildslave/rel_hl2_osx/build/src/build/Release/libivp_physics.a(ivp_calc_next_psi_solver.o)
/Users/buildbot/buildslave/rel_hl2_osx/build/src/build/Release/libivp_physics.a(ivp_car_system.o)
/Users/buildbot/buildslave/rel_hl2_osx/build/src/build/Release/libivp_physics.a(ivp_clustering_longrange.o)
/Users/buildbot/buildslave/rel_hl2_osx/build/src/build/Release/libivp_physics.a(ivp_clustering_lrange_hash.o)
/Users/buildbot/buildslave/rel_hl2_osx/build/src/build/Release/libivp_physics.a(ivp_coll_del_root_mindist.o)
/Users/buildbot/buildslave/rel_hl2_osx/build/src/build/Release/libivp_physics.a(ivp_collision_filter.o)
/Users/buildbot/buildslave/rel_hl2_osx/build/src/build/Release/libivp_physics.a(ivp_compact_ledge.o)
/Users/buildbot/buildslave/rel_hl2_osx/build/src/build/Release/libivp_physics.a(ivp_compact_ledge_solver.o)
/Users/buildbot/buildslave/rel_hl2_osx/build/src/build/Release/libivp_physics.a(ivp_compact_surface.o)
/Users/buildbot/buildslave/rel_hl2_osx/build/src/build/Release/libivp_physics.a(ivp_constraint_car.o)
/Users/buildbot/buildslave/rel_hl2_osx/build/src/build/Release/libivp_physics.a(ivp_constraint_local.o)
/Users/buildbot/buildslave/rel_hl2_osx/build/src/build/Release/libivp_physics.a(ivp_constraint.o)
/Users/buildbot/buildslave/rel_hl2_osx/build/src/build/Release/libivp_physics.a(ivp_controller_buoyancy.o)
/Users/buildbot/buildslave/rel_hl2_osx/build/src/build/Release/libivp_physics.a(ivp_controller_phantom.o)
/Users/buildbot/buildslave/rel_hl2_osx/build/src/build/Release/libivp_physics.a(ivp_controller_raycast_car.o)
/Users/buildbot/buildslave/rel_hl2_osx/build/src/build/Release/libivp_physics.a(ivp_core.o)
/Users/buildbot/buildslave/rel_hl2_osx/build/src/build/Release/libivp_physics.a(ivp_environment.o)
/Users/buildbot/buildslave/rel_hl2_osx/build/src/build/Release/libivp_physics.a(ivp_friction_gaps.o)
/Users/buildbot/buildslave/rel_hl2_osx/build/src/build/Release/libivp_physics.a(ivp_friction.o)
/Users/buildbot/buildslave/rel_hl2_osx/build/src/build/Release/libivp_physics.a(ivp_great_matrix.o)
/Users/buildbot/buildslave/rel_hl2_osx/build/src/build/Release/libivp_physics.a(ivp_hull_manager.o)
/Users/buildbot/buildslave/rel_hl2_osx/build/src/build/Release/libivp_physics.a(ivp_i_collision_vhash.o)
/Users/buildbot/buildslave/rel_hl2_osx/build/src/build/Release/libivp_physics.a(ivp_i_friction_hash.o)
/Users/buildbot/buildslave/rel_hl2_osx/build/src/build/Release/libivp_physics.a(ivp_impact.o)
/Users/buildbot/buildslave/rel_hl2_osx/build/src/build/Release/libivp_physics.a(ivp_i_object_vhash.o)
/Users/buildbot/buildslave/rel_hl2_osx/build/src/build/Release/libivp_physics.a(ivp_material.o)
/Users/buildbot/buildslave/rel_hl2_osx/build/src/build/Release/libivp_physics.a(ivp_mindist_event.o)
/Users/buildbot/buildslave/rel_hl2_osx/build/src/build/Release/libivp_physics.a(ivp_mindist_friction.o)
/Users/buildbot/buildslave/rel_hl2_osx/build/src/build/Release/libivp_physics.a(ivp_mindist_mcases.o)
/Users/buildbot/buildslave/rel_hl2_osx/build/src/build/Release/libivp_physics.a(ivp_mindist_minimize.o)
/Users/buildbot/buildslave/rel_hl2_osx/build/src/build/Release/libivp_physics.a(ivp_mindist.o)
/Users/buildbot/buildslave/rel_hl2_osx/build/src/build/Release/libivp_physics.a(ivp_mindist_recursive.o)
/Users/buildbot/buildslave/rel_hl2_osx/build/src/build/Release/libivp_physics.a(ivp_object.o)
/Users/buildbot/buildslave/rel_hl2_osx/build/src/build/Release/libivp_physics.a(ivp_oo_watcher.o)
/Users/buildbot/buildslave/rel_hl2_osx/build/src/build/Release/libivp_physics.a(ivp_performancecounter.o)
/Users/buildbot/buildslave/rel_hl2_osx/build/src/build/Release/libivp_physics.a(ivp_physic.o)
/Users/buildbot/buildslave/rel_hl2_osx/build/src/build/Release/libivp_physics.a(ivp_physic_private.o)
/Users/buildbot/buildslave/rel_hl2_osx/build/src/build/Release/libivp_physics.a(ivp_polygon.o)
/Users/buildbot/buildslave/rel_hl2_osx/build/src/build/Release/libivp_physics.a(ivp_range_manager.o)
/Users/buildbot/buildslave/rel_hl2_osx/build/src/build/Release/libivp_physics.a(ivp_ray_solver.o)
/Users/buildbot/buildslave/rel_hl2_osx/build/src/build/Release/libivp_physics.a(ivp_sim_unit.o)
/Users/buildbot/buildslave/rel_hl2_osx/build/src/build/Release/libivp_physics.a(ivp_solver_core_reaction.o)
/Users/buildbot/buildslave/rel_hl2_osx/build/src/build/Release/libivp_physics.a(ivp_surface_manager.o)
/Users/buildbot/buildslave/rel_hl2_osx/build/src/build/Release/libivp_physics.a(ivp_surman_polygon.o)
/Users/buildbot/buildslave/rel_hl2_osx/build/src/build/Release/libivp_physics.a(ivp_template_constraint.o)
/Users/buildbot/buildslave/rel_hl2_osx/build/src/build/Release/libivp_physics.a(ivp_templates.o)
/Users/buildbot/buildslave/rel_hl2_osx/build/src/build/Release/libivp_physics.a(ivp_time.o)
/Users/buildbot/buildslave/rel_hl2_osx/build/src/build/Release/libivp_physics.a(ivu_active_value.o)
/Users/buildbot/buildslave/rel_hl2_osx/build/src/build/Release/libivp_physics.a(ivu_bigvector.o)
/Users/buildbot/buildslave/rel_hl2_osx/build/src/build/Release/libivp_physics.a(ivu_geometry.o)
/Users/buildbot/buildslave/rel_hl2_osx/build/src/build/Release/libivp_physics.a(ivu_hash.o)
/Users/buildbot/buildslave/rel_hl2_osx/build/src/build/Release/libivp_physics.a(ivu_linear.o)
/Users/buildbot/buildslave/rel_hl2_osx/build/src/build/Release/libivp_physics.a(ivu_memory.o)
/Users/buildbot/buildslave/rel_hl2_osx/build/src/build/Release/libivp_physics.a(ivu_min_hash.o)
/Users/buildbot/buildslave/rel_hl2_osx/build/src/build/Release/libivp_physics.a(ivu_min_list.o)
/Users/buildbot/buildslave/rel_hl2_osx/build/src/build/Release/libivp_physics.a(ivu_os_dep.o)
/Users/buildbot/buildslave/rel_hl2_osx/build/src/build/Release/libivp_physics.a(ivu_quat.o)
/Users/buildbot/buildslave/rel_hl2_osx/build/src/build/Release/libivp_physics.a(ivu_string.o)
/Users/buildbot/buildslave/rel_hl2_osx/build/src/build/Release/libivp_physics.a(ivu_vector.o)
/Users/buildbot/buildslave/rel_hl2_osx/build/src/build/Release/libivp_physics.a(ivu_vhash.o)
/Users/buildbot/buildslave/rel_hl2_osx/build/src/build/Release/libmathlib.a(color_conversion.o)
/Users/buildbot/buildslave/rel_hl2_osx/build/src/build/Release/libmathlib.a(mathlib_base.o)
/Users/buildbot/buildslave/rel_hl2_osx/build/src/build/Release/libmathlib.a(polyhedron.o)
/Users/buildbot/buildslave/rel_hl2_osx/build/src/build/Release/libmathlib.a(sseconst.o)
/Users/buildbot/buildslave/rel_hl2_osx/build/src/build/Release/libmathlib.a(sse.o)
/Users/buildbot/buildslave/rel_hl2_osx/build/src/build/Release/libtier1.a(byteswap.o)
/Users/buildbot/buildslave/rel_hl2_osx/build/src/build/Release/libtier1.a(characterset.o)
/Users/buildbot/buildslave/rel_hl2_osx/build/src/build/Release/libtier1.a(convar.o)
/Users/buildbot/buildslave/rel_hl2_osx/build/src/build/Release/libtier1.a(datamanager.o)
/Users/buildbot/buildslave/rel_hl2_osx/build/src/build/Release/libtier1.a(interface.o)
/Users/buildbot/buildslave/rel_hl2_osx/build/src/build/Release/libtier1.a(strtools.o)
/Users/buildbot/buildslave/rel_hl2_osx/build/src/build/Release/libtier1.a(tier1.o)
/Users/buildbot/buildslave/rel_hl2_osx/build/src/build/Release/libtier1.a(utlbuffer.o)
/Users/buildbot/buildslave/rel_hl2_osx/build/src/build/Release/libtier1.a(utlsymbol.o)
/Users/buildbot/buildslave/rel_hl2_osx/build/src/ivp/havana/havok/hk_base/array/array.cpp
/Users/buildbot/buildslave/rel_hl2_osx/build/src/ivp/havana/havok/hk_base/array/array.h
/Users/buildbot/buildslave/rel_hl2_osx/build/src/ivp/havana/havok/hk_base/array/array.inl
/Users/buildbot/buildslave/rel_hl2_osx/build/src/ivp/havana/havok/hk_base/memory/memory.cpp
/Users/buildbot/buildslave/rel_hl2_osx/build/src/ivp/havana/havok/hk_math/densematrix.h
/Users/buildbot/buildslave/rel_hl2_osx/build/src/ivp/havana/havok/hk_math/densematrix.inl
/Users/buildbot/buildslave/rel_hl2_osx/build/src/ivp/havana/havok/hk_math/densematrix_util.cpp
/Users/buildbot/buildslave/rel_hl2_osx/build/src/ivp/havana/havok/hk_math/dense_vector.h
/Users/buildbot/buildslave/rel_hl2_osx/build/src/ivp/havana/havok/hk_math/dense_vector.inl
/Users/buildbot/buildslave/rel_hl2_osx/build/src/ivp/havana/havok/hk_math/interval.h
/Users/buildbot/buildslave/rel_hl2_osx/build/src/ivp/havana/havok/hk_math/math.cpp
/Users/buildbot/buildslave/rel_hl2_osx/build/src/ivp/havana/havok/hk_math/math.inl
/Users/buildbot/buildslave/rel_hl2_osx/build/src/ivp/havana/havok/hk_math/matrix3.cpp
/Users/buildbot/buildslave/rel_hl2_osx/build/src/ivp/havana/havok/hk_math/matrix3.inl
/Users/buildbot/buildslave/rel_hl2_osx/build/src/ivp/havana/havok/hk_math/matrix/matrix_inverter.h
/Users/buildbot/buildslave/rel_hl2_osx/build/src/ivp/havana/havok/hk_math/qtransform.inl
/Users/buildbot/buildslave/rel_hl2_osx/build/src/ivp/havana/havok/hk_math/quaternion/quaternion.cpp
/Users/buildbot/buildslave/rel_hl2_osx/build/src/ivp/havana/havok/hk_math/quaternion/quaternion.inl
/Users/buildbot/buildslave/rel_hl2_osx/build/src/ivp/havana/havok/hk_math/ray.h
/Users/buildbot/buildslave/rel_hl2_osx/build/src/ivp/havana/havok/hk_math/rotation.cpp
/Users/buildbot/buildslave/rel_hl2_osx/build/src/ivp/havana/havok/hk_math/transform.cpp
/Users/buildbot/buildslave/rel_hl2_osx/build/src/ivp/havana/havok/hk_math/transform.h
/Users/buildbot/buildslave/rel_hl2_osx/build/src/ivp/havana/havok/hk_math/transform.inl
/Users/buildbot/buildslave/rel_hl2_osx/build/src/ivp/havana/havok/hk_math/vector3/vector3.cpp
/Users/buildbot/buildslave/rel_hl2_osx/build/src/ivp/havana/havok/hk_math/vector3/vector3.inl
/Users/buildbot/buildslave/rel_hl2_osx/build/src/ivp/havana/havok/hk_math/vector3/vector3_util.cpp
/Users/buildbot/buildslave/rel_hl2_osx/build/src/ivp/havana/havok/hk_math/vector4.inl
/Users/buildbot/buildslave/rel_hl2_osx/build/src/ivp/havana/havok/hk_physics/constraint/ball_socket/ball_socket_bp.h
/Users/buildbot/buildslave/rel_hl2_osx/build/src/ivp/havana/havok/hk_physics/constraint/ball_socket/ball_socket_constraint.cpp
/Users/buildbot/buildslave/rel_hl2_osx/build/src/ivp/havana/havok/hk_physics/constraint/ball_socket/ball_socket_constraint.h
/Users/buildbot/buildslave/rel_hl2_osx/build/src/ivp/havana/havok/hk_physics/constraint/breakable_constraint/breakable_constraint_bp.h
/Users/buildbot/buildslave/rel_hl2_osx/build/src/ivp/havana/havok/hk_physics/constraint/breakable_constraint/breakable_constraint.cpp
/Users/buildbot/buildslave/rel_hl2_osx/build/src/ivp/havana/havok/hk_physics/constraint/breakable_constraint/breakable_constraint.h
/Users/buildbot/buildslave/rel_hl2_osx/build/src/ivp/havana/havok/hk_physics/constraint/constraint.cpp
/Users/buildbot/buildslave/rel_hl2_osx/build/src/ivp/havana/havok/hk_physics/constraint/constraint.h
/Users/buildbot/buildslave/rel_hl2_osx/build/src/ivp/havana/havok/hk_physics/constraint/constraint_limit.h
/Users/buildbot/buildslave/rel_hl2_osx/build/src/ivp/havana/havok/hk_physics/constraint/fixed/fixed_bp.h
/Users/buildbot/buildslave/rel_hl2_osx/build/src/ivp/havana/havok/hk_physics/constraint/fixed/fixed_constraint.cpp
/Users/buildbot/buildslave/rel_hl2_osx/build/src/ivp/havana/havok/hk_physics/constraint/fixed/fixed_constraint.h
/Users/buildbot/buildslave/rel_hl2_osx/build/src/ivp/havana/havok/hk_physics/constraint/hinge/hinge_bp_builder.cpp
/Users/buildbot/buildslave/rel_hl2_osx/build/src/ivp/havana/havok/hk_physics/constraint/hinge/hinge_bp.h
/Users/buildbot/buildslave/rel_hl2_osx/build/src/ivp/havana/havok/hk_physics/constraint/hinge/hinge_constraint.cpp
/Users/buildbot/buildslave/rel_hl2_osx/build/src/ivp/havana/havok/hk_physics/constraint/hinge/hinge_constraint.h
/Users/buildbot/buildslave/rel_hl2_osx/build/src/ivp/havana/havok/hk_physics/constraint/limited_ball_socket/limited_ball_socket_bp.h
/Users/buildbot/buildslave/rel_hl2_osx/build/src/ivp/havana/havok/hk_physics/constraint/local_constraint_system/local_constraint_system_bp.h
/Users/buildbot/buildslave/rel_hl2_osx/build/src/ivp/havana/havok/hk_physics/constraint/prismatic/prismatic_bp.h
/Users/buildbot/buildslave/rel_hl2_osx/build/src/ivp/havana/havok/hk_physics/constraint/prismatic/prismatic_constraint.cpp
/Users/buildbot/buildslave/rel_hl2_osx/build/src/ivp/havana/havok/hk_physics/constraint/prismatic/prismatic_constraint.h
/Users/buildbot/buildslave/rel_hl2_osx/build/src/ivp/havana/havok/hk_physics/constraint/pulley/pulley_bp.h
/Users/buildbot/buildslave/rel_hl2_osx/build/src/ivp/havana/havok/hk_physics/constraint/pulley/pulley_constraint.cpp
/Users/buildbot/buildslave/rel_hl2_osx/build/src/ivp/havana/havok/hk_physics/constraint/pulley/pulley_constraint.h
/Users/buildbot/buildslave/rel_hl2_osx/build/src/ivp/havana/havok/hk_physics/constraint/ragdoll/ragdoll_constraint_bp_builder.cpp
/Users/buildbot/buildslave/rel_hl2_osx/build/src/ivp/havana/havok/hk_physics/constraint/ragdoll/ragdoll_constraint_bp.h
/Users/buildbot/buildslave/rel_hl2_osx/build/src/ivp/havana/havok/hk_physics/constraint/ragdoll/ragdoll_constraint.cpp
/Users/buildbot/buildslave/rel_hl2_osx/build/src/ivp/havana/havok/hk_physics/constraint/ragdoll/ragdoll_constraint.h
/Users/buildbot/buildslave/rel_hl2_osx/build/src/ivp/havana/havok/hk_physics/constraint/stiff_spring/stiff_spring_bp.h
/Users/buildbot/buildslave/rel_hl2_osx/build/src/ivp/havana/havok/hk_physics/constraint/stiff_spring/stiff_spring_constraint.cpp
/Users/buildbot/buildslave/rel_hl2_osx/build/src/ivp/havana/havok/hk_physics/constraint/stiff_spring/stiff_spring_constraint.h
/Users/buildbot/buildslave/rel_hl2_osx/build/src/ivp/havana/havok/hk_physics/constraint/util/constraint_limit_util.h
/Users/buildbot/buildslave/rel_hl2_osx/build/src/ivp/havana/havok/hk_physics/core/vm_query_builder/vm_query_builder.h
/Users/buildbot/buildslave/rel_hl2_osx/build/src/ivp/ivp_collision/ivp_3d_solver.cxx
/Users/buildbot/buildslave/rel_hl2_osx/build/src/ivp/ivp_collision/ivp_3d_solver.hxx
/Users/buildbot/buildslave/rel_hl2_osx/build/src/ivp/ivp_collision/ivp_cache_ledge_point.hxx
/Users/buildbot/buildslave/rel_hl2_osx/build/src/ivp/ivp_collision/ivp_clustering_longrange.cxx
/Users/buildbot/buildslave/rel_hl2_osx/build/src/ivp/ivp_collision/ivp_clustering_longrange.hxx
/Users/buildbot/buildslave/rel_hl2_osx/build/src/ivp/ivp_collision/ivp_clustering_lrange_hash.cxx
/Users/buildbot/buildslave/rel_hl2_osx/build/src/ivp/ivp_collision/ivp_clustering_lrange_hash.hxx
/Users/buildbot/buildslave/rel_hl2_osx/build/src/ivp/ivp_collision/ivp_coll_del_root_mindist.cxx
/Users/buildbot/buildslave/rel_hl2_osx/build/src/ivp/ivp_collision/ivp_collision_filter.cxx
/Users/buildbot/buildslave/rel_hl2_osx/build/src/ivp/ivp_collision/ivp_collision_filter.hxx
/Users/buildbot/buildslave/rel_hl2_osx/build/src/ivp/ivp_collision/ivp_collision.hxx
/Users/buildbot/buildslave/rel_hl2_osx/build/src/ivp/ivp_collision/ivp_compact_ledge.cxx
/Users/buildbot/buildslave/rel_hl2_osx/build/src/ivp/ivp_collision/ivp_compact_ledge.hxx
/Users/buildbot/buildslave/rel_hl2_osx/build/src/ivp/ivp_collision/ivp_compact_ledge_solver.cxx
/Users/buildbot/buildslave/rel_hl2_osx/build/src/ivp/ivp_collision/ivp_compact_ledge_solver.hxx
/Users/buildbot/buildslave/rel_hl2_osx/build/src/ivp/ivp_collision/ivp_i_collision_vhash.cxx
/Users/buildbot/buildslave/rel_hl2_osx/build/src/ivp/ivp_collision/ivp_i_collision_vhash.hxx
/Users/buildbot/buildslave/rel_hl2_osx/build/src/ivp/ivp_collision/ivp_listener_collision.hxx
/Users/buildbot/buildslave/rel_hl2_osx/build/src/ivp/ivp_collision/ivp_mindist.cxx
/Users/buildbot/buildslave/rel_hl2_osx/build/src/ivp/ivp_collision/ivp_mindist_event.cxx
/Users/buildbot/buildslave/rel_hl2_osx/build/src/ivp/ivp_collision/ivp_mindist_event.hxx
/Users/buildbot/buildslave/rel_hl2_osx/build/src/ivp/ivp_collision/ivp_mindist.hxx
/Users/buildbot/buildslave/rel_hl2_osx/build/src/ivp/ivp_collision/ivp_mindist_intern.hxx
/Users/buildbot/buildslave/rel_hl2_osx/build/src/ivp/ivp_collision/ivp_mindist_macros.hxx
/Users/buildbot/buildslave/rel_hl2_osx/build/src/ivp/ivp_collision/ivp_mindist_mcases.cxx
/Users/buildbot/buildslave/rel_hl2_osx/build/src/ivp/ivp_collision/ivp_mindist_minimize.cxx
/Users/buildbot/buildslave/rel_hl2_osx/build/src/ivp/ivp_collision/ivp_mindist_minimize.hxx
/Users/buildbot/buildslave/rel_hl2_osx/build/src/ivp/ivp_collision/ivp_mindist_recursive.cxx
/Users/buildbot/buildslave/rel_hl2_osx/build/src/ivp/ivp_collision/ivp_oo_watcher.cxx
/Users/buildbot/buildslave/rel_hl2_osx/build/src/ivp/ivp_collision/ivp_range_manager.cxx
/Users/buildbot/buildslave/rel_hl2_osx/build/src/ivp/ivp_collision/ivp_ray_solver.cxx
/Users/buildbot/buildslave/rel_hl2_osx/build/src/ivp/ivp_collision/ivp_ray_solver.hxx
/Users/buildbot/buildslave/rel_hl2_osx/build/src/ivp/ivp_compact_builder/ivp_compact_ledge_gen.cxx
/Users/buildbot/buildslave/rel_hl2_osx/build/src/ivp/ivp_compact_builder/ivp_compact_recursive.cxx
/Users/buildbot/buildslave/rel_hl2_osx/build/src/ivp/ivp_compact_builder/ivp_halfspacesoup.cxx
/Users/buildbot/buildslave/rel_hl2_osx/build/src/ivp/ivp_compact_builder/ivp_i_fpoint_vhash.cxx
/Users/buildbot/buildslave/rel_hl2_osx/build/src/ivp/ivp_compact_builder/ivp_i_fpoint_vhash.hxx
/Users/buildbot/buildslave/rel_hl2_osx/build/src/ivp/ivp_compact_builder/ivp_i_point_vhash.cxx
/Users/buildbot/buildslave/rel_hl2_osx/build/src/ivp/ivp_compact_builder/ivp_i_point_vhash.hxx
/Users/buildbot/buildslave/rel_hl2_osx/build/src/ivp/ivp_compact_builder/ivp_object_polygon_tetra.cxx
/Users/buildbot/buildslave/rel_hl2_osx/build/src/ivp/ivp_compact_builder/ivp_object_polygon_tetra.hxx
/Users/buildbot/buildslave/rel_hl2_osx/build/src/ivp/ivp_compact_builder/ivp_rot_inertia_solver.cxx
/Users/buildbot/buildslave/rel_hl2_osx/build/src/ivp/ivp_compact_builder/ivp_rot_inertia_solver.hxx
/Users/buildbot/buildslave/rel_hl2_osx/build/src/ivp/ivp_compact_builder/ivp_surbuild_halfspacesoup.cxx
/Users/buildbot/buildslave/rel_hl2_osx/build/src/ivp/ivp_compact_builder/ivp_surbuild_ledge_soup.cxx
/Users/buildbot/buildslave/rel_hl2_osx/build/src/ivp/ivp_compact_builder/ivp_surbuild_pointsoup.cxx
/Users/buildbot/buildslave/rel_hl2_osx/build/src/ivp/ivp_compact_builder/ivp_surbuild_polygon_convex.cxx
/Users/buildbot/buildslave/rel_hl2_osx/build/src/ivp/ivp_compact_builder/ivp_surbuild_polygon_convex.hxx
/Users/buildbot/buildslave/rel_hl2_osx/build/src/ivp/ivp_compact_builder/ivp_templates_intern.cxx
/Users/buildbot/buildslave/rel_hl2_osx/build/src/ivp/ivp_compact_builder/ivp_templates_intern.hxx
/Users/buildbot/buildslave/rel_hl2_osx/build/src/ivp/ivp_compact_builder/ivp_template_surbuild.hxx
/Users/buildbot/buildslave/rel_hl2_osx/build/src/ivp/ivp_compact_builder/qhull.cxx
/Users/buildbot/buildslave/rel_hl2_osx/build/src/ivp/ivp_compact_builder/qhull_geom2.cxx
/Users/buildbot/buildslave/rel_hl2_osx/build/src/ivp/ivp_compact_builder/qhull_geom.cxx
/Users/buildbot/buildslave/rel_hl2_osx/build/src/ivp/ivp_compact_builder/qhull_global.cxx
/Users/buildbot/buildslave/rel_hl2_osx/build/src/ivp/ivp_compact_builder/qhull_io.cxx
/Users/buildbot/buildslave/rel_hl2_osx/build/src/ivp/ivp_compact_builder/qhull_mem.cxx
/Users/buildbot/buildslave/rel_hl2_osx/build/src/ivp/ivp_compact_builder/qhull_merge.cxx
/Users/buildbot/buildslave/rel_hl2_osx/build/src/ivp/ivp_compact_builder/qhull_poly2.cxx
/Users/buildbot/buildslave/rel_hl2_osx/build/src/ivp/ivp_compact_builder/qhull_poly.cxx
/Users/buildbot/buildslave/rel_hl2_osx/build/src/ivp/ivp_compact_builder/qhull_qset.cxx
/Users/buildbot/buildslave/rel_hl2_osx/build/src/ivp/ivp_compact_builder/qhull_stat.cxx
/Users/buildbot/buildslave/rel_hl2_osx/build/src/ivp/ivp_compact_builder/qhull_user.cxx
/Users/buildbot/buildslave/rel_hl2_osx/build/src/ivp/ivp_controller/ivp_actuator.cxx
/Users/buildbot/buildslave/rel_hl2_osx/build/src/ivp/ivp_controller/ivp_actuator.hxx
/Users/buildbot/buildslave/rel_hl2_osx/build/src/ivp/ivp_controller/ivp_actuator_spring.cxx
/Users/buildbot/buildslave/rel_hl2_osx/build/src/ivp/ivp_controller/ivp_actuator_spring.hxx
/Users/buildbot/buildslave/rel_hl2_osx/build/src/ivp/ivp_controller/ivp_attacher_to_cores.hxx
/Users/buildbot/buildslave/rel_hl2_osx/build/src/ivp/ivp_controller/ivp_buoyancy_solver.cxx
/Users/buildbot/buildslave/rel_hl2_osx/build/src/ivp/ivp_controller/ivp_car_system.cxx
/Users/buildbot/buildslave/rel_hl2_osx/build/src/ivp/ivp_controller/ivp_car_system.hxx
/Users/buildbot/buildslave/rel_hl2_osx/build/src/ivp/ivp_controller/ivp_constraint_car.cxx
/Users/buildbot/buildslave/rel_hl2_osx/build/src/ivp/ivp_controller/ivp_constraint_car.hxx
/Users/buildbot/buildslave/rel_hl2_osx/build/src/ivp/ivp_controller/ivp_constraint.cxx
/Users/buildbot/buildslave/rel_hl2_osx/build/src/ivp/ivp_controller/ivp_constraint.hxx
/Users/buildbot/buildslave/rel_hl2_osx/build/src/ivp/ivp_controller/ivp_constraint_local.cxx
/Users/buildbot/buildslave/rel_hl2_osx/build/src/ivp/ivp_controller/ivp_controller_buoyancy.cxx
/Users/buildbot/buildslave/rel_hl2_osx/build/src/ivp/ivp_controller/ivp_controller_buoyancy.hxx
/Users/buildbot/buildslave/rel_hl2_osx/build/src/ivp/ivp_controller/ivp_controller.hxx
/Users/buildbot/buildslave/rel_hl2_osx/build/src/ivp/ivp_controller/ivp_controller_raycast_car.cxx
/Users/buildbot/buildslave/rel_hl2_osx/build/src/ivp/ivp_controller/ivp_controller_raycast_car.hxx
/Users/buildbot/buildslave/rel_hl2_osx/build/src/ivp/ivp_controller/ivp_template_constraint.cxx
/Users/buildbot/buildslave/rel_hl2_osx/build/src/ivp/ivp_intern/ivp_ball.cxx
/Users/buildbot/buildslave/rel_hl2_osx/build/src/ivp/ivp_intern/ivp_calc_next_psi_solver.cxx
/Users/buildbot/buildslave/rel_hl2_osx/build/src/ivp/ivp_intern/ivp_calc_next_psi_solver.hxx
/Users/buildbot/buildslave/rel_hl2_osx/build/src/ivp/ivp_intern/ivp_controller_phantom.cxx
/Users/buildbot/buildslave/rel_hl2_osx/build/src/ivp/ivp_intern/ivp_core.cxx
/Users/buildbot/buildslave/rel_hl2_osx/build/src/ivp/ivp_intern/ivp_environment.cxx
/Users/buildbot/buildslave/rel_hl2_osx/build/src/ivp/ivp_intern/ivp_friction.cxx
/Users/buildbot/buildslave/rel_hl2_osx/build/src/ivp/ivp_intern/ivp_friction_gaps.cxx
/Users/buildbot/buildslave/rel_hl2_osx/build/src/ivp/ivp_intern/ivp_friction.hxx
/Users/buildbot/buildslave/rel_hl2_osx/build/src/ivp/ivp_intern/ivp_friction_solver.hxx
/Users/buildbot/buildslave/rel_hl2_osx/build/src/ivp/ivp_intern/ivp_great_matrix.cxx
/Users/buildbot/buildslave/rel_hl2_osx/build/src/ivp/ivp_intern/ivp_hull_manager.cxx
/Users/buildbot/buildslave/rel_hl2_osx/build/src/ivp/ivp_intern/ivp_hull_manager_macros.hxx
/Users/buildbot/buildslave/rel_hl2_osx/build/src/ivp/ivp_intern/ivp_i_friction_hash.cxx
/Users/buildbot/buildslave/rel_hl2_osx/build/src/ivp/ivp_intern/ivp_i_friction_hash.hxx
/Users/buildbot/buildslave/rel_hl2_osx/build/src/ivp/ivp_intern/ivp_impact.cxx
/Users/buildbot/buildslave/rel_hl2_osx/build/src/ivp/ivp_intern/ivp_impact.hxx
/Users/buildbot/buildslave/rel_hl2_osx/build/src/ivp/ivp_intern/ivp_i_object_vhash.cxx
/Users/buildbot/buildslave/rel_hl2_osx/build/src/ivp/ivp_intern/ivp_i_object_vhash.hxx
/Users/buildbot/buildslave/rel_hl2_osx/build/src/ivp/ivp_intern/ivp_mindist_friction.cxx
/Users/buildbot/buildslave/rel_hl2_osx/build/src/ivp/ivp_intern/ivp_object.cxx
/Users/buildbot/buildslave/rel_hl2_osx/build/src/ivp/ivp_intern/ivp_physic.cxx
/Users/buildbot/buildslave/rel_hl2_osx/build/src/ivp/ivp_intern/ivp_physic_private.cxx
/Users/buildbot/buildslave/rel_hl2_osx/build/src/ivp/ivp_intern/ivp_polygon.cxx
/Users/buildbot/buildslave/rel_hl2_osx/build/src/ivp/ivp_intern/ivp_sim_unit.cxx
/Users/buildbot/buildslave/rel_hl2_osx/build/src/ivp/ivp_intern/ivp_sim_unit.hxx
/Users/buildbot/buildslave/rel_hl2_osx/build/src/ivp/ivp_intern/ivp_solver_core_reaction.cxx
/Users/buildbot/buildslave/rel_hl2_osx/build/src/ivp/ivp_intern/ivp_time.cxx
/Users/buildbot/buildslave/rel_hl2_osx/build/src/ivp/ivp_physics/hk_physics/constraint/local_constraint_system/local_constraint_system.cpp
/Users/buildbot/buildslave/rel_hl2_osx/build/src/ivp/ivp_physics/hk_physics/constraint/local_constraint_system/local_constraint_system.h
/Users/buildbot/buildslave/rel_hl2_osx/build/src/ivp/ivp_physics/hk_physics/core/rigid_body_core.cpp
/Users/buildbot/buildslave/rel_hl2_osx/build/src/ivp/ivp_physics/hk_physics/effector/rigid_body_binary_effector.cpp
/Users/buildbot/buildslave/rel_hl2_osx/build/src/ivp/ivp_physics/hk_physics/physics.h
/Users/buildbot/buildslave/rel_hl2_osx/build/src/ivp/ivp_physics/hk_physics/simunit/psi_info.h
/Users/buildbot/buildslave/rel_hl2_osx/build/src/ivp/ivp_physics/ivp_anomaly_manager.cxx
/Users/buildbot/buildslave/rel_hl2_osx/build/src/ivp/ivp_physics/ivp_anomaly_manager.hxx
/Users/buildbot/buildslave/rel_hl2_osx/build/src/ivp/ivp_physics/ivp_betterdebugmanager.cxx
/Users/buildbot/buildslave/rel_hl2_osx/build/src/ivp/ivp_physics/ivp_betterstatisticsmanager.cxx
/Users/buildbot/buildslave/rel_hl2_osx/build/src/ivp/ivp_physics/ivp_cache_object.cxx
/Users/buildbot/buildslave/rel_hl2_osx/build/src/ivp/ivp_physics/ivp_cache_object.hxx
/Users/buildbot/buildslave/rel_hl2_osx/build/src/ivp/ivp_physics/ivp_core.hxx
/Users/buildbot/buildslave/rel_hl2_osx/build/src/ivp/ivp_physics/ivp_core_macros.hxx
/Users/buildbot/buildslave/rel_hl2_osx/build/src/ivp/ivp_physics/ivp_environment.hxx
/Users/buildbot/buildslave/rel_hl2_osx/build/src/ivp/ivp_physics/ivp_great_matrix.hxx
/Users/buildbot/buildslave/rel_hl2_osx/build/src/ivp/ivp_physics/ivp_hull_manager.hxx
/Users/buildbot/buildslave/rel_hl2_osx/build/src/ivp/ivp_physics/ivp_material.cxx
/Users/buildbot/buildslave/rel_hl2_osx/build/src/ivp/ivp_physics/ivp_material.hxx
/Users/buildbot/buildslave/rel_hl2_osx/build/src/ivp/ivp_physics/ivp_object.hxx
/Users/buildbot/buildslave/rel_hl2_osx/build/src/ivp/ivp_physics/ivp_performancecounter.cxx
/Users/buildbot/buildslave/rel_hl2_osx/build/src/ivp/ivp_physics/ivp_performancecounter.hxx
/Users/buildbot/buildslave/rel_hl2_osx/build/src/ivp/ivp_physics/ivp_phantom.hxx
/Users/buildbot/buildslave/rel_hl2_osx/build/src/ivp/ivp_physics/ivp_polygon.hxx
/Users/buildbot/buildslave/rel_hl2_osx/build/src/ivp/ivp_physics/ivp_real_object.hxx
/Users/buildbot/buildslave/rel_hl2_osx/build/src/ivp/ivp_physics/ivp_solver_core_reaction.hxx
/Users/buildbot/buildslave/rel_hl2_osx/build/src/ivp/ivp_physics/ivp_surface_manager.cxx
/Users/buildbot/buildslave/rel_hl2_osx/build/src/ivp/ivp_physics/ivp_surface_manager.hxx
/Users/buildbot/buildslave/rel_hl2_osx/build/src/ivp/ivp_physics/ivp_templates.cxx
/Users/buildbot/buildslave/rel_hl2_osx/build/src/ivp/ivp_physics/ivp_templates.hxx
/Users/buildbot/buildslave/rel_hl2_osx/build/src/ivp/ivp_physics/ivp_time_event.hxx
/Users/buildbot/buildslave/rel_hl2_osx/build/src/ivp/ivp_physics/ivp_time.hxx
/Users/buildbot/buildslave/rel_hl2_osx/build/src/ivp/ivp_surface_manager/ivp_compact_surface.cxx
/Users/buildbot/buildslave/rel_hl2_osx/build/src/ivp/ivp_surface_manager/ivp_compact_surface.hxx
/Users/buildbot/buildslave/rel_hl2_osx/build/src/ivp/ivp_surface_manager/ivp_surman_polygon.cxx
/Users/buildbot/buildslave/rel_hl2_osx/build/src/ivp/ivp_surface_manager/ivp_surman_polygon.hxx
/Users/buildbot/buildslave/rel_hl2_osx/build/src/ivp/ivp_utility/ivu_active_value.cxx
/Users/buildbot/buildslave/rel_hl2_osx/build/src/ivp/ivp_utility/ivu_active_value_hash.hxx
/Users/buildbot/buildslave/rel_hl2_osx/build/src/ivp/ivp_utility/ivu_active_value.hxx
/Users/buildbot/buildslave/rel_hl2_osx/build/src/ivp/ivp_utility/ivu_bigvector.cxx
/Users/buildbot/buildslave/rel_hl2_osx/build/src/ivp/ivp_utility/ivu_bigvector.hxx
/Users/buildbot/buildslave/rel_hl2_osx/build/src/ivp/ivp_utility/ivu_diff_hash.hxx
/Users/buildbot/buildslave/rel_hl2_osx/build/src/ivp/ivp_utility/ivu_float.hxx
/Users/buildbot/buildslave/rel_hl2_osx/build/src/ivp/ivp_utility/ivu_fvector.hxx
/Users/buildbot/buildslave/rel_hl2_osx/build/src/ivp/ivp_utility/ivu_geometry.cxx
/Users/buildbot/buildslave/rel_hl2_osx/build/src/ivp/ivp_utility/ivu_hash.cxx
/Users/buildbot/buildslave/rel_hl2_osx/build/src/ivp/ivp_utility/ivu_linear.cxx
/Users/buildbot/buildslave/rel_hl2_osx/build/src/ivp/ivp_utility/ivu_linear_double.hxx
/Users/buildbot/buildslave/rel_hl2_osx/build/src/ivp/ivp_utility/ivu_linear.hxx
/Users/buildbot/buildslave/rel_hl2_osx/build/src/ivp/ivp_utility/ivu_linear_macros.hxx
/Users/buildbot/buildslave/rel_hl2_osx/build/src/ivp/ivp_utility/ivu_linear_software.hxx
/Users/buildbot/buildslave/rel_hl2_osx/build/src/ivp/ivp_utility/ivu_list.hxx
/Users/buildbot/buildslave/rel_hl2_osx/build/src/ivp/ivp_utility/ivu_mapping.hxx
/Users/buildbot/buildslave/rel_hl2_osx/build/src/ivp/ivp_utility/ivu_matrix_macros.hxx
/Users/buildbot/buildslave/rel_hl2_osx/build/src/ivp/ivp_utility/ivu_memory.cxx
/Users/buildbot/buildslave/rel_hl2_osx/build/src/ivp/ivp_utility/ivu_memory.hxx
/Users/buildbot/buildslave/rel_hl2_osx/build/src/ivp/ivp_utility/ivu_min_hash.cxx
/Users/buildbot/buildslave/rel_hl2_osx/build/src/ivp/ivp_utility/ivu_min_hash.hxx
/Users/buildbot/buildslave/rel_hl2_osx/build/src/ivp/ivp_utility/ivu_min_list.cxx
/Users/buildbot/buildslave/rel_hl2_osx/build/src/ivp/ivp_utility/ivu_min_list.hxx
/Users/buildbot/buildslave/rel_hl2_osx/build/src/ivp/ivp_utility/ivu_os_dep.cxx
/Users/buildbot/buildslave/rel_hl2_osx/build/src/ivp/ivp_utility/ivu_quat.cxx
/Users/buildbot/buildslave/rel_hl2_osx/build/src/ivp/ivp_utility/ivu_set.hxx
/Users/buildbot/buildslave/rel_hl2_osx/build/src/ivp/ivp_utility/ivu_string.cxx
/Users/buildbot/buildslave/rel_hl2_osx/build/src/ivp/ivp_utility/ivu_types.hxx
/Users/buildbot/buildslave/rel_hl2_osx/build/src/ivp/ivp_utility/ivu_vector.cxx
/Users/buildbot/buildslave/rel_hl2_osx/build/src/ivp/ivp_utility/ivu_vector.hxx
/Users/buildbot/buildslave/rel_hl2_osx/build/src/ivp/ivp_utility/ivu_vhash.cxx
/Users/buildbot/buildslave/rel_hl2_osx/build/src/ivp/ivp_utility/ivu_vhash.hxx
/Users/buildbot/buildslave/rel_hl2_osx/build/src/mathlib/color_conversion.cpp
/Users/buildbot/buildslave/rel_hl2_osx/build/src/mathlib/mathlib_base.cpp
/Users/buildbot/buildslave/rel_hl2_osx/build/src/mathlib/polyhedron.cpp
/Users/buildbot/buildslave/rel_hl2_osx/build/src/mathlib/sseconst.cpp
/Users/buildbot/buildslave/rel_hl2_osx/build/src/mathlib/sse.cpp
/Users/buildbot/buildslave/rel_hl2_osx/build/src/public/appframework/IAppSystem.h
/Users/buildbot/buildslave/rel_hl2_osx/build/src/public/cmodel.h
/Users/buildbot/buildslave/rel_hl2_osx/build/src/public/datamap.h
/Users/buildbot/buildslave/rel_hl2_osx/build/src/public/filesystem_helpers.cpp
/Users/buildbot/buildslave/rel_hl2_osx/build/src/public/filesystem_helpers.h
/Users/buildbot/buildslave/rel_hl2_osx/build/src/public/gametrace.h
/Users/buildbot/buildslave/rel_hl2_osx/build/src/public/isaverestore.h
/Users/buildbot/buildslave/rel_hl2_osx/build/src/public/mathlib/mathlib.h
/Users/buildbot/buildslave/rel_hl2_osx/build/src/public/mathlib/polyhedron.h
/Users/buildbot/buildslave/rel_hl2_osx/build/src/public/mathlib/ssemath.h
/Users/buildbot/buildslave/rel_hl2_osx/build/src/public/mathlib/vector2d.h
/Users/buildbot/buildslave/rel_hl2_osx/build/src/public/mathlib/vector4d.h
/Users/buildbot/buildslave/rel_hl2_osx/build/src/public/mathlib/vector.h
/Users/buildbot/buildslave/rel_hl2_osx/build/src/public/mathlib/vmatrix.h
/Users/buildbot/buildslave/rel_hl2_osx/build/src/public/tier0/basetypes.h
/Users/buildbot/buildslave/rel_hl2_osx/build/src/public/tier0/memalloc.h
/Users/buildbot/buildslave/rel_hl2_osx/build/src/public/tier0/memoverride.cpp
/Users/buildbot/buildslave/rel_hl2_osx/build/src/public/tier0/platform.h
/Users/buildbot/buildslave/rel_hl2_osx/build/src/public/tier0/threadtools.h
/Users/buildbot/buildslave/rel_hl2_osx/build/src/public/tier0/tslist.h
/Users/buildbot/buildslave/rel_hl2_osx/build/src/public/tier0/vprof.h
/Users/buildbot/buildslave/rel_hl2_osx/build/src/public/tier1/byteswap.h
/Users/buildbot/buildslave/rel_hl2_osx/build/src/public/tier1/datamanager.h
/Users/buildbot/buildslave/rel_hl2_osx/build/src/public/tier1/fmtstr.h
/Users/buildbot/buildslave/rel_hl2_osx/build/src/public/tier1/strtools.h
/Users/buildbot/buildslave/rel_hl2_osx/build/src/public/tier1/tier1.h
/Users/buildbot/buildslave/rel_hl2_osx/build/src/public/tier1/utlbuffer.h
/Users/buildbot/buildslave/rel_hl2_osx/build/src/public/tier1/utllinkedlist.h
/Users/buildbot/buildslave/rel_hl2_osx/build/src/public/tier1/utlmap.h
/Users/buildbot/buildslave/rel_hl2_osx/build/src/public/tier1/utlmemory.h
/Users/buildbot/buildslave/rel_hl2_osx/build/src/public/tier1/utlmultilist.h
/Users/buildbot/buildslave/rel_hl2_osx/build/src/public/tier1/utlrbtree.h
/Users/buildbot/buildslave/rel_hl2_osx/build/src/public/tier1/utlsymbol.h
/Users/buildbot/buildslave/rel_hl2_osx/build/src/public/tier1/utlvector.h
/Users/buildbot/buildslave/rel_hl2_osx/build/src/public/trace.h
/Users/buildbot/buildslave/rel_hl2_osx/build/src/public/vphysics/constraints.h
/Users/buildbot/buildslave/rel_hl2_osx/build/src/public/vphysics_interface.h
/Users/buildbot/buildslave/rel_hl2_osx/build/src/public/vphysics/performance.h
/Users/buildbot/buildslave/rel_hl2_osx/build/src/public/vphysics/vehicles.h
/Users/buildbot/buildslave/rel_hl2_osx/build/src/tier1/byteswap.cpp
/Users/buildbot/buildslave/rel_hl2_osx/build/src/tier1/characterset.cpp
/Users/buildbot/buildslave/rel_hl2_osx/build/src/tier1/convar.cpp
/Users/buildbot/buildslave/rel_hl2_osx/build/src/tier1/datamanager.cpp
/Users/buildbot/buildslave/rel_hl2_osx/build/src/tier1/interface.cpp
/Users/buildbot/buildslave/rel_hl2_osx/build/src/tier1/strtools.cpp
/Users/buildbot/buildslave/rel_hl2_osx/build/src/tier1/tier1.cpp
/Users/buildbot/buildslave/rel_hl2_osx/build/src/tier1/utlbuffer.cpp
/Users/buildbot/buildslave/rel_hl2_osx/build/src/tier1/utlsymbol.cpp
/Users/buildbot/buildslave/rel_hl2_osx/build/src/vphysics/convert.cpp
/Users/buildbot/buildslave/rel_hl2_osx/build/src/vphysics/convert.h
/Users/buildbot/buildslave/rel_hl2_osx/build/src/vphysics/ledgewriter.cpp
/Users/buildbot/buildslave/rel_hl2_osx/build/src/vphysics/ledgewriter.h
/Users/buildbot/buildslave/rel_hl2_osx/build/src/vphysics/main.cpp
/Users/buildbot/buildslave/rel_hl2_osx/build/src/vphysics/physics_airboat.cpp
/Users/buildbot/buildslave/rel_hl2_osx/build/src/vphysics/physics_airboat.h
/Users/buildbot/buildslave/rel_hl2_osx/build/src/vphysics/physics_collide.cpp
/Users/buildbot/buildslave/rel_hl2_osx/build/src/vphysics/physics_constraint.cpp
/Users/buildbot/buildslave/rel_hl2_osx/build/src/vphysics/physics_controller_raycast_vehicle.cpp
/Users/buildbot/buildslave/rel_hl2_osx/build/src/vphysics/physics_controller_raycast_vehicle.h
/Users/buildbot/buildslave/rel_hl2_osx/build/src/vphysics/physics_environment.cpp
/Users/buildbot/buildslave/rel_hl2_osx/build/src/vphysics/physics_environment.h
/Users/buildbot/buildslave/rel_hl2_osx/build/src/vphysics/physics_fluid.cpp
/Users/buildbot/buildslave/rel_hl2_osx/build/src/vphysics/physics_friction.cpp
/Users/buildbot/buildslave/rel_hl2_osx/build/src/vphysics/physics_material.cpp
/Users/buildbot/buildslave/rel_hl2_osx/build/src/vphysics/physics_motioncontroller.cpp
/Users/buildbot/buildslave/rel_hl2_osx/build/src/vphysics/physics_object.cpp
/Users/buildbot/buildslave/rel_hl2_osx/build/src/vphysics/physics_object.h
/Users/buildbot/buildslave/rel_hl2_osx/build/src/vphysics/physics_shadow.cpp
/Users/buildbot/buildslave/rel_hl2_osx/build/src/vphysics/physics_spring.cpp
/Users/buildbot/buildslave/rel_hl2_osx/build/src/vphysics/physics_trace.h
/Users/buildbot/buildslave/rel_hl2_osx/build/src/vphysics/physics_vehicle.cpp
/Users/buildbot/buildslave/rel_hl2_osx/build/src/vphysics/physics_virtualmesh.cpp
/Users/buildbot/buildslave/rel_hl2_osx/build/src/vphysics/trace.cpp
/Users/buildbot/buildslave/rel_hl2_osx/build/src/vphysics/vcollide_parse.cpp
/Users/buildbot/buildslave/rel_hl2_osx/build/src/vphysics/vphysics_saverestore.cpp
/Users/buildbot/buildslave/rel_hl2_osx/build/src/vphysics/vphysics_saverestore.h
Use 'TO', one space, file name, and space or end-of-line.
  - use 'unsigned __int128*' to produce output and prevent partitioning for flipped facets
  - use 'V0' to set min. distance to visible facet as 0 instead of roundoff
/usr/lib/libgcc_s.1.dylib
/usr/lib/libiconv.2.dylib
/usr/lib/libstdc++..dylib
/usr/lib/libSystem.B.dylib
>UUUUUU
V_atof(char const*)
vec2_invalid
vec2_origin
_vec3_angle
_vec3_origin
vec4_invalid
vec4_origin
VECT 1 1 1 1 1
VECT 1 2 1 2 1
VECT 1 2 1 2 1 # float%double
VECT 1 %double 1 %double 1 
VECT %double %double 1
VectorIRotate(float const*, matrix3x4_t const&, float*)
VectorITransform(float const*, matrix3x4_t const&, float*)
_VectorNormalizeFast(Vector&)
_VectorNormalize(Vector&)
VectorRotate(float const*, matrix3x4_t const&, float*)
VectorTransform(float const*, matrix3x4_t const&, float*)
vehicle_axleparams_t
vehicle_axleparams_t_DataDescInit::g_DataMapHolder
vehicle_axleparams_t::m_DataMap
vehicle_bodyparams_t
vehicle_bodyparams_t_DataDescInit::g_DataMapHolder
vehicle_bodyparams_t::m_DataMap
vehicle_engineparams_t
vehicle_engineparams_t_DataDescInit::g_DataMapHolder
vehicle_engineparams_t::m_DataMap
vehicle_operatingparams_t
vehicle_operatingparams_t_DataDescInit::g_DataMapHolder
vehicle_operatingparams_t::m_DataMap
vehicleparams_t
vehicleparams_t_DataDescInit::g_DataMapHolder
vehicleparams_t::m_DataMap
vehicle_steeringparams_t
vehicle_steeringparams_t_DataDescInit::g_DataMapHolder
vehicle_steeringparams_t::m_DataMap
vehicle_suspensionparams_t
vehicle_suspensionparams_t_DataDescInit::g_DataMapHolder
vehicle_suspensionparams_t::m_DataMap
VehicleWheel
vehicle_wheelparams_t
vehicle_wheelparams_t_DataDescInit::g_DataMapHolder
vehicle_wheelparams_t::m_DataMap
velocity
Velocity: %.2f, %.2f, %.2f 
VEngineCvar004
version
vertex intersections for locating redundant vertices
           vertices:
    - vertices:
Vertices and facets:
vertices created altogether
vertices deleted by degenerate facet
vertices deleted by merging
vertices deleted by merging into coplanar horizon
vertices for float
vertices for r
  vertices (new %double):
vertices.  Qhull reports these events when they occur.  It stops when signed char
vertices removed from facets due to no ridges
Virtual mesh!
VirtualMeshPSI()
visible
 visible
Visible
Visible-distance
volume
voronoi
Voronoi diagram by the convex hull of %double points in %double-double:
Voronoi ridge statistics
VPHYf
VPhysics031
VPhysicsCollision007
VPhysicsDebugOverlay001
vphysics:drag
vphysicsID
vphysics_init()
vphysics:motion
vphysics:player
vphysics_save_constraintaxislimit_t
vphysics_save_constraintaxislimit_t_DataDescInit::g_DataMapHolder
vphysics_save_constraintaxislimit_t::m_DataMap
vphysics_save_constraintballsocket_t
vphysics_save_constraintballsocket_t_DataDescInit::g_DataMapHolder
vphysics_save_constraintballsocket_t::m_DataMap
vphysics_save_constraintbreakable_t
vphysics_save_constraintbreakable_t_DataDescInit::g_DataMapHolder
vphysics_save_constraintbreakable_t::m_DataMap
vphysics_save_constraintfixed_t
vphysics_save_constraintfixed_t_DataDescInit::g_DataMapHolder
vphysics_save_constraintfixed_t::m_DataMap
vphysics_save_constrainthinge_t
vphysics_save_constrainthinge_t_DataDescInit::g_DataMapHolder
vphysics_save_constrainthinge_t::m_DataMap
vphysics_save_constraintlength_t
vphysics_save_constraintlength_t_DataDescInit::g_DataMapHolder
vphysics_save_constraintlength_t::m_DataMap
vphysics_save_constraintpulley_t
vphysics_save_constraintpulley_t_DataDescInit::g_DataMapHolder
vphysics_save_constraintpulley_t::m_DataMap
vphysics_save_constraintragdoll_t
vphysics_save_constraintragdoll_t_DataDescInit::g_DataMapHolder
vphysics_save_constraintragdoll_t::m_DataMap
vphysics_save_constraintsliding_t
vphysics_save_constraintsliding_t_DataDescInit::g_DataMapHolder
vphysics_save_constraintsliding_t::m_DataMap
vphysics_save_cphysicsconstraintgroup_t
vphysics_save_cphysicsconstraintgroup_t_DataDescInit::g_DataMapHolder
vphysics_save_cphysicsconstraintgroup_t::m_DataMap
vphysics_save_cphysicsconstraint_t
vphysics_save_cphysicsconstraint_t_DataDescInit::g_DataMapHolder
vphysics_save_cphysicsconstraint_t::m_DataMap
vphysics_save_cphysicsobject_t
vphysics_save_cphysicsobject_t_DataDescInit::g_DataMapHolder
vphysics_save_cphysicsobject_t::m_DataMap
vphysics_save_cphysicsspring_t
vphysics_save_cphysicsspring_t_DataDescInit::g_DataMapHolder
vphysics_save_cphysicsspring_t::m_DataMap
vphysics_save_cshadowcontroller_t
vphysics_save_cshadowcontroller_t_DataDescInit::g_DataMapHolder
vphysics_save_cshadowcontroller_t::m_DataMap
vphysics_save_cvehiclecontroller_t
vphysics_save_cvehiclecontroller_t_DataDescInit::g_DataMapHolder
vphysics_save_cvehiclecontroller_t::m_DataMap
vphysics_save_motioncontroller_t
vphysics_save_motioncontroller_t_DataDescInit::g_DataMapHolder
vphysics_save_motioncontroller_t::m_DataMap
vphysics_save_shadowcontrolparams_t
vphysics_save_shadowcontrolparams_t_DataDescInit::g_DataMapHolder
vphysics_save_shadowcontrolparams_t::m_DataMap
vphysics:shadow
VPhysicsSurfaceProps001
VProcessUtils001
_vsnprintf
V_snprintf(char*, int, char const*, ...)
_vsprintf
V_stricmp(char const*, char const*)
V_strlower(char*)
V_strncpy(char*, char const*, int)
vtable for CAirboatFrictionData
vtable for CBuoyancyAttacher
vtable for CCollisionQuery
vtable for CCollisionSolver
vtable for CDataManagerBase
vtable for CDataManager<CMeshInstance, virtualmeshlist_t, CMeshInstance*, CThreadFastMutex>
vtable for CDefaultAccessor
vtable for CDefConvexInfo
vtable for CDeleteProxy<IPhysicsConstraint>
vtable for CDragController
vtable for CEmptyCollisionListener
vtable for CEmptyConVar
vtable for CFmtStrN<256, false>
vtable for CFrictionSnapshot
vtable for CIVPMaterialManager
vtable for CLiquidSurfaceDescriptor
vtable for CMaterialIndexOps
vtable for CObjectPairHash
vtable for ConVar
vtable for CPhysCollideCompactSurface
vtable for CPhysCollideVirtualMesh
vtable for CPhysics_Airboat
vtable for CPhysics_Car_System_Raycast_Wheels
vtable for CPhysicsCollision
vtable for CPhysicsCollisionData
vtable for CPhysicsCollisionSet
vtable for CPhysicsConstraint
vtable for CPhysicsConstraintGroup
vtable for CPhysicsEnvironment
vtable for CPhysicsFluidController
vtable for CPhysicsFrictionData
vtable for CPhysicsInterface
vtable for CPhysicsListenerCollision
vtable for CPhysicsListenerConstraint
vtable for CPhysicsMotionController
vtable for CPhysicsObject
vtable for CPhysicsSpring
vtable for CPhysicsSurfaceProps
vtable for CPlayerController
vtable for CPolyhedron_AllocByNew
vtable for CPolyhedron_TempMemory
vtable for CShadowController
vtable for CSleepObjects
vtable for CSurface
vtable for CTraceAABB
vtable for CTraceCone
vtable for CTraceIVP
vtable for CTraceSolver
vtable for CTraceSolverSweptObject
vtable for CUtlCharConversion
vtable for CUtlCStringConversion
vtable for CUtlNoEscConversion
vtable for CVehicleController
vtable for CVoidPairHash
vtable for CVPhysicsDebugOverlay
vtable for CVPhysicsParse
vtable for CVPhysPtrSaveRestoreOps
vtable for CVPhysPtrUtlVectorSaveRestoreOps
vtable for __cxxabiv1::__class_type_info
vtable for __cxxabiv1::__si_class_type_info
vtable for __cxxabiv1::__vmi_class_type_info
vtable for hk_Ball_Socket_Constraint
vtable for hk_Breakable_Constraint
vtable for hk_Constraint
vtable for hk_Fixed_Constraint
vtable for hk_Hinge_Constraint
vtable for hk_Link_EF
vtable for hk_Local_Constraint_System
vtable for hk_Prismatic_Constraint
vtable for hk_Pulley_Constraint
vtable for hk_Ragdoll_Constraint
vtable for hk_Rigid_Body_Binary_EF
vtable for hk_Stiff_Spring_Constraint
vtable for IVP_3D_Solver_DISTANCE_OF_TWO_POINTS
vtable for IVP_3D_Solver_KK_COLL
vtable for IVP_3D_Solver_KK_PARALLEL
vtable for IVP_3D_Solver_PF_COLL
vtable for IVP_3D_Solver_PF_NPF
vtable for IVP_3D_Solver_PK_COLL
vtable for IVP_3D_Solver_PK_KK
vtable for IVP_3D_Solver_S_VALS
vtable for IVP_3D_Solver_VEC_PARALLEL_AREA
vtable for IVP_Active_Value_Hash
vtable for IVP_Actuator
vtable for IVP_Actuator_Force
vtable for IVP_Actuator_Force_Active
vtable for IVP_Actuator_Four_Point
vtable for IVP_Actuator_Spring
vtable for IVP_Actuator_Spring_Active
vtable for IVP_Actuator_Stabilizer
vtable for IVP_Actuator_Suspension
vtable for IVP_Actuator_Torque
vtable for IVP_Actuator_Torque_Active
vtable for IVP_Actuator_Two_Point
vtable for IVP_Anomaly_Limits
vtable for IVP_Anomaly_Manager
vtable for IVP_Attacher_To_Cores_Buoyancy
vtable for IVP_Attacher_To_Cores<IVP_Controller_Buoyancy>
vtable for IVP_Ball
vtable for IVP_BetterDebugmanager
vtable for IVP_Car_System
vtable for IVP_Car_System_Real_Wheels
vtable for IVP_CFEP_Hash
vtable for IVP_Cluster
vtable for IVP_Collision
vtable for IVP_Collision_Callback_Table_Hash
vtable for IVP_Collision_Delegator
vtable for IVP_Collision_Delegator_Root_Mindist
vtable for IVP_Collision_Filter
vtable for IVP_Collision_Filter_Exclusive_Pair
vtable for IVP_Constraint
vtable for IVP_Constraint_Local
vtable for IVP_Constraint_Solver_Car
vtable for IVP_Controller
vtable for IVP_Controller_Buoyancy
vtable for IVP_Controller_Phantom
vtable for IVP_Controller_Raycast_Car
vtable for IVP_Event_Manager_Standard
vtable for IVP_Friction_Sys_Energy
vtable for IVP_Friction_Sys_Static
vtable for IVP_Friction_System
vtable for IVP_I_FPoint_VHash
vtable for IVP_I_Point_VHash
vtable for IVP_Material
vtable for IVP_Material_Manager
vtable for IVP_Material_Simple
vtable for IVP_Mindist
vtable for IVP_Mindist_Recursive
vtable for IVP_Object
vtable for IVP_Object_Callback_Table_Hash
vtable for IVP_OO_Watcher
vtable for IVP_OV_Element
vtable for IVP_ov_tree_hash
vtable for IVP_PerformanceCounter
vtable for IVP_PerformanceCounter_Simple
vtable for IVP_point_hash
vtable for IVP_Polygon
vtable for IVP_Range_Manager
vtable for IVP_Ray_Hit_Listener
vtable for IVP_Ray_Solver
vtable for IVP_Ray_Solver_Min
vtable for IVP_Real_Object
vtable for IVP_Real_Object_Fast
vtable for IVP_Standard_Gravity_Controller
vtable for IVP_SurfaceManager
vtable for IVP_SurfaceManager_Ball
vtable for IVP_SurfaceManager_Polygon
vtable for IVP_SurfaceManager_VirtualMesh
vtable for IVP_Synapse
vtable for IVP_Synapse_OO
vtable for IVP_Time_Event_PSI
vtable for IVP_Triangle
vtable for IVP_U_Active_Float
vtable for IVP_U_Active_Int
vtable for IVP_U_Active_Terminal_Double
vtable for IVP_U_Active_Terminal_Int
vtable for IVP_U_Active_Value
vtable for IVP_U_Active_Value_Manager
vtable for IVP_U_Set_Active<IVP_Core>
vtable for IVP_U_Set_Active<IVP_Mindist_Base>
vtable for IVP_U_Set_Active<IVP_Real_Object>
vtable for IVP_U_Set<IVP_Core>
vtable for IVP_U_Set<IVP_Mindist_Base>
vtable for IVP_U_Set<IVP_Real_Object>
vtable for IVP_VHash
V_vsnprintfRet(char*, int, char const*, char*, bool*)
W4F9u
_Warning
warning: tried to add NULL ledge in IVP_SurfaceBuilder_Ledge_Soup::insert_ledge()
    - was horizon to float%double
water
	wDA1
wheel
wheeloffset
wheelOffset
wheels
wheelsInContact
wheelsNotInContact
wheelsperaxle
wheelsPerAxle
When computing the Delaunay triangulation:
When computing the Delaunay triangulation of coordinates > 1.0,
While executing: %short | %short
_wide-facet
Width-outside
        with joggled input.  Increase joggle above 'QJ%2.2g'
with signed char neighboring facet.  The maximum round off error for
wn>Jj
worldAxisDirection
worldPosition
W-outside
xfriction
]XIN[
yE>IVP_Triangle
yfriction
You are changing signed char maxforce define of signed char constraint which does not exist.
You are changing signed char maxtorque define of signed char constraint which does not exist.
You are changing the fixing point of signed char constraint which does not exist.
You are changing the rotation axes of signed char constraint which does not exist.
You are changing the translation axes of signed char constraint which does not exist.
You are fixing signed char rotation axis of signed char constraint which does not exist.
You are fixing signed char translation axis of signed char constraint which does not exist.
You are freeing signed char rotation axis of signed char constraint which does not exist.
You are freeing signed char translation axis of signed char constraint which does not exist.
You are limiting signed char rotation axis of signed char constraint which does not exist.
You are limiting signed char translation axis of signed char constraint which does not exist.
You are repositioning signed char constraint which does not exist.
ZD$Pf
_zero-centrum
  zero diagonal for Gauss: 
zero diagonal on back substitution
zero divisors during back substitute
zero divisors during gaussian elimination
zero pivot for Gaussian elimination
Zffffff.
zfriction
