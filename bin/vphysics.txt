 B CUtlSymbol::s_pSymbolTable
 B ConCommandBase::s_pAccessor
 B ConCommandBase::s_pConCommandBases
 B IVP_Controller_Independent::empty_list
 B IVP_Environment_Manager::static_environment_manager
 B IVP_Friction_System::friction_global_counter
 B IVP_Mindist_Event_Solver::mim_function_table
 B IVP_Mindist_Minimize_Solver::mms_function_table
 B IVP_OV_Tree_Manager::powerlist
 B IVP_SurfaceBuilder_Pointsoup::single_tri_ledge
 B InterfaceReg::s_pInterfaceRegs
 B SinCosTable
 B compactsurfaceheader_t_DataDescInit::g_DataMapHolder
 B cvar
 B g_MeshFrameLocksPool
 B g_PhysicsCollision
 B g_SurfaceDatabase
 B g_VPhysPtrSaveRestoreOps
 B g_VPhysPtrUtlVectorSaveRestoreOps
 B g_VisitHashPool
 B g_fDeferDeleteMindist
 B g_pCVar
 B g_pCurrentMindist
 B g_pMeshFrameLocks
 B g_pProcessUtils
 B ivp_debugmanager
 B ivp_mindist_settings
 B lineartolightmap
 B lineartovertex
 B physcollideheader_t_DataDescInit::g_DataMapHolder
 B qh_qh
 B qh_qhstat
 B qhmem
 B s_NoEscConversion
 B s_StringCharConversion
 B s_bMathlibInitialized
 B vehicle_axleparams_t_DataDescInit::g_DataMapHolder
 B vehicle_bodyparams_t_DataDescInit::g_DataMapHolder
 B vehicle_engineparams_t_DataDescInit::g_DataMapHolder
 B vehicle_operatingparams_t_DataDescInit::g_DataMapHolder
 B vehicle_steeringparams_t_DataDescInit::g_DataMapHolder
 B vehicle_suspensionparams_t_DataDescInit::g_DataMapHolder
 B vehicle_wheelparams_t_DataDescInit::g_DataMapHolder
 B vehicleparams_t_DataDescInit::g_DataMapHolder
 B vphysics_save_constraintaxislimit_t_DataDescInit::g_DataMapHolder
 B vphysics_save_constraintballsocket_t_DataDescInit::g_DataMapHolder
 B vphysics_save_constraintbreakable_t_DataDescInit::g_DataMapHolder
 B vphysics_save_constraintfixed_t_DataDescInit::g_DataMapHolder
 B vphysics_save_constrainthinge_t_DataDescInit::g_DataMapHolder
 B vphysics_save_constraintlength_t_DataDescInit::g_DataMapHolder
 B vphysics_save_constraintpulley_t_DataDescInit::g_DataMapHolder
 B vphysics_save_constraintragdoll_t_DataDescInit::g_DataMapHolder
 B vphysics_save_constraintsliding_t_DataDescInit::g_DataMapHolder
 B vphysics_save_cphysicsconstraint_t_DataDescInit::g_DataMapHolder
 B vphysics_save_cphysicsconstraintgroup_t_DataDescInit::g_DataMapHolder
 B vphysics_save_cphysicsobject_t_DataDescInit::g_DataMapHolder
 B vphysics_save_cphysicsspring_t_DataDescInit::g_DataMapHolder
 B vphysics_save_cshadowcontroller_t_DataDescInit::g_DataMapHolder
 B vphysics_save_cvehiclecontroller_t_DataDescInit::g_DataMapHolder
 B vphysics_save_motioncontroller_t_DataDescInit::g_DataMapHolder
 B vphysics_save_shadowcontrolparams_t_DataDescInit::g_DataMapHolder
 CThreadEvent::CThreadEvent(bool)
 CThreadEvent::Set()
 CThreadFastMutex::Lock(unsigned int, unsigned int) volatile
 CThreadLocalBase::CThreadLocalBase()
 CThreadLocalBase::Get() const
 CThreadLocalBase::Set(void*)
 CThreadLocalBase::~CThreadLocalBase()
 CThreadRWLock::LockForWrite()
 CThreadRWLock::UnlockWrite()
 CThreadRWLock::WaitForRead()
 CThreadSyncObject::~CThreadSyncObject()
 CVProfNode::EnterScope()
 CVProfNode::ExitScope()
 CVProfNode::GetSubNode(char const*, int, char const*, int)
 D CFmtStrN<256, false>::sprintf(char const*, ...)::scAsserted
 D IVP_Compact_Edge::next_table
 D IVP_Compact_Edge::prev_table
 D IVP_Hash_crctab
 D IVP_U_Active_Float::change_meter
 D compactsurfaceheader_t::m_DataMap
 D g_EmptyCollisionListener
 D g_PhysicsUnits
 D hk_Math::hk_random_seed
 D pfFastCos
 D pfFastSinCos
 D pfInvRSquared
 D pfRSqrt
 D pfRSqrtFast
 D pfSqrt
 D pfVectorNormalize
 D pfVectorNormalizeFast
 D physcollideheader_t::m_DataMap
 D physcollision
 D physprops
 D qh_rand_seed
 D qh_version
 D typeinfo for CAirboatFrictionData
 D typeinfo for CAlignedNewDelete<16, aligned_tmp_t>
 D typeinfo for CBaseAppSystem<IPhysics>
 D typeinfo for CBuoyancyAttacher
 D typeinfo for CCollisionQuery
 D typeinfo for CCollisionSolver
 D typeinfo for CDataManager<CMeshInstance, virtualmeshlist_t, CMeshInstance*, CThreadFastMutex>
 D typeinfo for CDataManagerBase
 D typeinfo for CDefConvexInfo
 D typeinfo for CDefSaveRestoreOps
 D typeinfo for CDefaultAccessor
 D typeinfo for CDeleteProxy<IPhysicsConstraint>
 D typeinfo for CDragController
 D typeinfo for CEmptyCollisionListener
 D typeinfo for CEmptyConVar
 D typeinfo for CFmtStrN<256, false>
 D typeinfo for CFrictionSnapshot
 D typeinfo for CIVPMaterialManager
 D typeinfo for CLiquidSurfaceDescriptor
 D typeinfo for CMaterialIndexOps
 D typeinfo for CObjectPairHash
 D typeinfo for CPhysCollide
 D typeinfo for CPhysCollideCompactSurface
 D typeinfo for CPhysCollideVirtualMesh
 D typeinfo for CPhysicsCollision
 D typeinfo for CPhysicsCollisionData
 D typeinfo for CPhysicsCollisionSet
 D typeinfo for CPhysicsConstraint
 D typeinfo for CPhysicsConstraintGroup
 D typeinfo for CPhysicsEnvironment
 D typeinfo for CPhysicsFluidController
 D typeinfo for CPhysicsFrictionData
 D typeinfo for CPhysicsInterface
 D typeinfo for CPhysicsListenerCollision
 D typeinfo for CPhysicsListenerConstraint
 D typeinfo for CPhysicsMotionController
 D typeinfo for CPhysicsObject
 D typeinfo for CPhysicsSpring
 D typeinfo for CPhysicsSurfaceProps
 D typeinfo for CPhysics_Airboat
 D typeinfo for CPhysics_Car_System_Raycast_Wheels
 D typeinfo for CPlayerController
 D typeinfo for CPolyhedron
 D typeinfo for CPolyhedron_AllocByNew
 D typeinfo for CPolyhedron_TempMemory
 D typeinfo for CShadowController
 D typeinfo for CSleepObjects
 D typeinfo for CSurface
 D typeinfo for CTier0AppSystem<IPhysics>
 D typeinfo for CTier1AppSystem<IPhysics, 0>
 D typeinfo for CTraceAABB
 D typeinfo for CTraceCone
 D typeinfo for CTraceIVP
 D typeinfo for CTraceSolver
 D typeinfo for CTraceSolverSweptObject
 D typeinfo for CUtlCStringConversion
 D typeinfo for CUtlCharConversion
 D typeinfo for CUtlNoEscConversion
 D typeinfo for CVPhysPtrSaveRestoreOps
 D typeinfo for CVPhysPtrUtlVectorSaveRestoreOps
 D typeinfo for CVPhysicsDebugOverlay
 D typeinfo for CVPhysicsParse
 D typeinfo for CVehicleController
 D typeinfo for CVoidPairHash
 D typeinfo for ConCommandBase
 D typeinfo for ConVar
 D typeinfo for IAppSystem
 D typeinfo for ICollisionQuery
 D typeinfo for IConCommandBaseAccessor
 D typeinfo for IConVar
 D typeinfo for IConvexInfo
 D typeinfo for IDeleteQueueItem
 D typeinfo for IPhysCollide
 D typeinfo for IPhysics
 D typeinfo for IPhysicsCollision
 D typeinfo for IPhysicsCollisionData
 D typeinfo for IPhysicsCollisionEvent
 D typeinfo for IPhysicsCollisionSet
 D typeinfo for IPhysicsConstraint
 D typeinfo for IPhysicsConstraintGroup
 D typeinfo for IPhysicsEnvironment
 D typeinfo for IPhysicsFluidController
 D typeinfo for IPhysicsFrictionSnapshot
 D typeinfo for IPhysicsMotionController
 D typeinfo for IPhysicsObject
 D typeinfo for IPhysicsObjectPairHash
 D typeinfo for IPhysicsPlayerController
 D typeinfo for IPhysicsShadowController
 D typeinfo for IPhysicsSpring
 D typeinfo for IPhysicsSurfaceProps
 D typeinfo for IPhysicsSurfacePropsInternal
 D typeinfo for IPhysicsVehicleController
 D typeinfo for ISaveRestoreOps
 D typeinfo for ITraceObject
 D typeinfo for IVP_3D_Solver
 D typeinfo for IVP_3D_Solver_DISTANCE_OF_TWO_POINTS
 D typeinfo for IVP_3D_Solver_KK_COLL
 D typeinfo for IVP_3D_Solver_KK_PARALLEL
 D typeinfo for IVP_3D_Solver_PF_COLL
 D typeinfo for IVP_3D_Solver_PF_NPF
 D typeinfo for IVP_3D_Solver_PK_COLL
 D typeinfo for IVP_3D_Solver_PK_KK
 D typeinfo for IVP_3D_Solver_S_VALS
 D typeinfo for IVP_3D_Solver_VEC_PARALLEL_AREA
 D typeinfo for IVP_Active_Value_Hash
 D typeinfo for IVP_Actuator
 D typeinfo for IVP_Actuator_Force
 D typeinfo for IVP_Actuator_Force_Active
 D typeinfo for IVP_Actuator_Four_Point
 D typeinfo for IVP_Actuator_Spring
 D typeinfo for IVP_Actuator_Spring_Active
 D typeinfo for IVP_Actuator_Stabilizer
 D typeinfo for IVP_Actuator_Suspension
 D typeinfo for IVP_Actuator_Torque
 D typeinfo for IVP_Actuator_Torque_Active
 D typeinfo for IVP_Actuator_Two_Point
 D typeinfo for IVP_Anomaly_Limits
 D typeinfo for IVP_Anomaly_Manager
 D typeinfo for IVP_Attacher_To_Cores<IVP_Controller_Buoyancy>
 D typeinfo for IVP_Attacher_To_Cores_Buoyancy
 D typeinfo for IVP_Ball
 D typeinfo for IVP_BetterDebugmanager
 D typeinfo for IVP_CFEP_Hash
 D typeinfo for IVP_Car_System
 D typeinfo for IVP_Car_System_Real_Wheels
 D typeinfo for IVP_Cluster
 D typeinfo for IVP_Collision
 D typeinfo for IVP_Collision_Callback_Table_Hash
 D typeinfo for IVP_Collision_Delegator
 D typeinfo for IVP_Collision_Delegator_Root
 D typeinfo for IVP_Collision_Delegator_Root_Mindist
 D typeinfo for IVP_Collision_Filter
 D typeinfo for IVP_Collision_Filter_Exclusive_Pair
 D typeinfo for IVP_Constraint
 D typeinfo for IVP_Constraint_Local
 D typeinfo for IVP_Constraint_Solver_Car
 D typeinfo for IVP_Controller
 D typeinfo for IVP_Controller_Buoyancy
 D typeinfo for IVP_Controller_Dependent
 D typeinfo for IVP_Controller_Independent
 D typeinfo for IVP_Controller_Phantom
 D typeinfo for IVP_Controller_Raycast_Car
 D typeinfo for IVP_Event_Manager
 D typeinfo for IVP_Event_Manager_Standard
 D typeinfo for IVP_Friction_Sys_Energy
 D typeinfo for IVP_Friction_Sys_Static
 D typeinfo for IVP_Friction_System
 D typeinfo for IVP_I_FPoint_VHash
 D typeinfo for IVP_I_Point_VHash
 D typeinfo for IVP_Liquid_Surface_Descriptor
 D typeinfo for IVP_Listener_Collision
 D typeinfo for IVP_Listener_Constraint
 D typeinfo for IVP_Listener_Hull
 D typeinfo for IVP_Listener_Object
 D typeinfo for IVP_Listener_Phantom
 D typeinfo for IVP_Listener_Set_Active<IVP_Core>
 D typeinfo for IVP_Material
 D typeinfo for IVP_Material_Manager
 D typeinfo for IVP_Material_Simple
 D typeinfo for IVP_Mindist
 D typeinfo for IVP_Mindist_Base
 D typeinfo for IVP_Mindist_Recursive
 D typeinfo for IVP_OO_Watcher
 D typeinfo for IVP_OV_Element
 D typeinfo for IVP_Object
 D typeinfo for IVP_Object_Callback_Table_Hash
 D typeinfo for IVP_PerformanceCounter
 D typeinfo for IVP_PerformanceCounter_Simple
 D typeinfo for IVP_Polygon
 D typeinfo for IVP_Range_Manager
 D typeinfo for IVP_Ray_Hit_Listener
 D typeinfo for IVP_Ray_Solver
 D typeinfo for IVP_Ray_Solver_Min
 D typeinfo for IVP_Real_Object
 D typeinfo for IVP_Real_Object_Fast
 D typeinfo for IVP_Real_Object_Fast_Static
 D typeinfo for IVP_Standard_Gravity_Controller
 D typeinfo for IVP_SurfaceManager
 D typeinfo for IVP_SurfaceManager_Ball
 D typeinfo for IVP_SurfaceManager_Polygon
 D typeinfo for IVP_SurfaceManager_VirtualMesh
 D typeinfo for IVP_Synapse
 D typeinfo for IVP_Synapse_OO
 D typeinfo for IVP_Time_Event
 D typeinfo for IVP_Time_Event_PSI
 D typeinfo for IVP_Triangle
 D typeinfo for IVP_U_Active_Float
 D typeinfo for IVP_U_Active_Float_Delayed
 D typeinfo for IVP_U_Active_Float_Listener
 D typeinfo for IVP_U_Active_Int
 D typeinfo for IVP_U_Active_Int_Delayed
 D typeinfo for IVP_U_Active_Terminal_Double
 D typeinfo for IVP_U_Active_Terminal_Int
 D typeinfo for IVP_U_Active_Value
 D typeinfo for IVP_U_Active_Value_Manager
 D typeinfo for IVP_U_Set<IVP_Core>
 D typeinfo for IVP_U_Set<IVP_Mindist_Base>
 D typeinfo for IVP_U_Set<IVP_Real_Object>
 D typeinfo for IVP_U_Set_Active<IVP_Core>
 D typeinfo for IVP_U_Set_Active<IVP_Mindist_Base>
 D typeinfo for IVP_U_Set_Active<IVP_Real_Object>
 D typeinfo for IVP_VHash
 D typeinfo for IVP_ov_tree_hash
 D typeinfo for IVP_point_hash
 D typeinfo for IVPhysicsDebugOverlay
 D typeinfo for IVPhysicsKeyParser
 D typeinfo for aligned_tmp_t
 D typeinfo for hk_Ball_Socket_Constraint
 D typeinfo for hk_Breakable_Constraint
 D typeinfo for hk_Constraint
 D typeinfo for hk_Fixed_Constraint
 D typeinfo for hk_Hinge_Constraint
 D typeinfo for hk_Link_EF
 D typeinfo for hk_Local_Constraint_System
 D typeinfo for hk_Prismatic_Constraint
 D typeinfo for hk_Pulley_Constraint
 D typeinfo for hk_Ragdoll_Constraint
 D typeinfo for hk_Rigid_Body_Binary_EF
 D typeinfo for hk_Stiff_Spring_Constraint
 D vehicle_axleparams_t::m_DataMap
 D vehicle_bodyparams_t::m_DataMap
 D vehicle_engineparams_t::m_DataMap
 D vehicle_operatingparams_t::m_DataMap
 D vehicle_steeringparams_t::m_DataMap
 D vehicle_suspensionparams_t::m_DataMap
 D vehicle_wheelparams_t::m_DataMap
 D vehicleparams_t::m_DataMap
 D vphysics_save_constraintaxislimit_t::m_DataMap
 D vphysics_save_constraintballsocket_t::m_DataMap
 D vphysics_save_constraintbreakable_t::m_DataMap
 D vphysics_save_constraintfixed_t::m_DataMap
 D vphysics_save_constrainthinge_t::m_DataMap
 D vphysics_save_constraintlength_t::m_DataMap
 D vphysics_save_constraintpulley_t::m_DataMap
 D vphysics_save_constraintragdoll_t::m_DataMap
 D vphysics_save_constraintsliding_t::m_DataMap
 D vphysics_save_cphysicsconstraint_t::m_DataMap
 D vphysics_save_cphysicsconstraintgroup_t::m_DataMap
 D vphysics_save_cphysicsobject_t::m_DataMap
 D vphysics_save_cphysicsspring_t::m_DataMap
 D vphysics_save_cshadowcontroller_t::m_DataMap
 D vphysics_save_cvehiclecontroller_t::m_DataMap
 D vphysics_save_motioncontroller_t::m_DataMap
 D vphysics_save_shadowcontrolparams_t::m_DataMap
 D vtable for CAirboatFrictionData
 D vtable for CBuoyancyAttacher
 D vtable for CCollisionQuery
 D vtable for CCollisionSolver
 D vtable for CDataManager<CMeshInstance, virtualmeshlist_t, CMeshInstance*, CThreadFastMutex>
 D vtable for CDataManagerBase
 D vtable for CDefConvexInfo
 D vtable for CDefaultAccessor
 D vtable for CDeleteProxy<IPhysicsConstraint>
 D vtable for CDragController
 D vtable for CEmptyCollisionListener
 D vtable for CEmptyConVar
 D vtable for CFmtStrN<256, false>
 D vtable for CFrictionSnapshot
 D vtable for CIVPMaterialManager
 D vtable for CLiquidSurfaceDescriptor
 D vtable for CMaterialIndexOps
 D vtable for CObjectPairHash
 D vtable for CPhysCollideCompactSurface
 D vtable for CPhysCollideVirtualMesh
 D vtable for CPhysicsCollision
 D vtable for CPhysicsCollisionData
 D vtable for CPhysicsCollisionSet
 D vtable for CPhysicsConstraint
 D vtable for CPhysicsConstraintGroup
 D vtable for CPhysicsEnvironment
 D vtable for CPhysicsFluidController
 D vtable for CPhysicsFrictionData
 D vtable for CPhysicsInterface
 D vtable for CPhysicsListenerCollision
 D vtable for CPhysicsListenerConstraint
 D vtable for CPhysicsMotionController
 D vtable for CPhysicsObject
 D vtable for CPhysicsSpring
 D vtable for CPhysicsSurfaceProps
 D vtable for CPhysics_Airboat
 D vtable for CPhysics_Car_System_Raycast_Wheels
 D vtable for CPlayerController
 D vtable for CPolyhedron_AllocByNew
 D vtable for CPolyhedron_TempMemory
 D vtable for CShadowController
 D vtable for CSleepObjects
 D vtable for CSurface
 D vtable for CTraceAABB
 D vtable for CTraceCone
 D vtable for CTraceIVP
 D vtable for CTraceSolver
 D vtable for CTraceSolverSweptObject
 D vtable for CUtlCStringConversion
 D vtable for CUtlCharConversion
 D vtable for CUtlNoEscConversion
 D vtable for CVPhysPtrSaveRestoreOps
 D vtable for CVPhysPtrUtlVectorSaveRestoreOps
 D vtable for CVPhysicsDebugOverlay
 D vtable for CVPhysicsParse
 D vtable for CVehicleController
 D vtable for CVoidPairHash
 D vtable for ConVar
 D vtable for IVP_3D_Solver_DISTANCE_OF_TWO_POINTS
 D vtable for IVP_3D_Solver_KK_COLL
 D vtable for IVP_3D_Solver_KK_PARALLEL
 D vtable for IVP_3D_Solver_PF_COLL
 D vtable for IVP_3D_Solver_PF_NPF
 D vtable for IVP_3D_Solver_PK_COLL
 D vtable for IVP_3D_Solver_PK_KK
 D vtable for IVP_3D_Solver_S_VALS
 D vtable for IVP_3D_Solver_VEC_PARALLEL_AREA
 D vtable for IVP_Active_Value_Hash
 D vtable for IVP_Actuator
 D vtable for IVP_Actuator_Force
 D vtable for IVP_Actuator_Force_Active
 D vtable for IVP_Actuator_Four_Point
 D vtable for IVP_Actuator_Spring
 D vtable for IVP_Actuator_Spring_Active
 D vtable for IVP_Actuator_Stabilizer
 D vtable for IVP_Actuator_Suspension
 D vtable for IVP_Actuator_Torque
 D vtable for IVP_Actuator_Torque_Active
 D vtable for IVP_Actuator_Two_Point
 D vtable for IVP_Anomaly_Limits
 D vtable for IVP_Anomaly_Manager
 D vtable for IVP_Attacher_To_Cores<IVP_Controller_Buoyancy>
 D vtable for IVP_Attacher_To_Cores_Buoyancy
 D vtable for IVP_Ball
 D vtable for IVP_BetterDebugmanager
 D vtable for IVP_CFEP_Hash
 D vtable for IVP_Car_System
 D vtable for IVP_Car_System_Real_Wheels
 D vtable for IVP_Cluster
 D vtable for IVP_Collision
 D vtable for IVP_Collision_Callback_Table_Hash
 D vtable for IVP_Collision_Delegator
 D vtable for IVP_Collision_Delegator_Root_Mindist
 D vtable for IVP_Collision_Filter
 D vtable for IVP_Collision_Filter_Exclusive_Pair
 D vtable for IVP_Constraint
 D vtable for IVP_Constraint_Local
 D vtable for IVP_Constraint_Solver_Car
 D vtable for IVP_Controller
 D vtable for IVP_Controller_Buoyancy
 D vtable for IVP_Controller_Phantom
 D vtable for IVP_Controller_Raycast_Car
 D vtable for IVP_Event_Manager_Standard
 D vtable for IVP_Friction_Sys_Energy
 D vtable for IVP_Friction_Sys_Static
 D vtable for IVP_Friction_System
 D vtable for IVP_I_FPoint_VHash
 D vtable for IVP_I_Point_VHash
 D vtable for IVP_Material
 D vtable for IVP_Material_Manager
 D vtable for IVP_Material_Simple
 D vtable for IVP_Mindist
 D vtable for IVP_Mindist_Recursive
 D vtable for IVP_OO_Watcher
 D vtable for IVP_OV_Element
 D vtable for IVP_Object
 D vtable for IVP_Object_Callback_Table_Hash
 D vtable for IVP_PerformanceCounter
 D vtable for IVP_PerformanceCounter_Simple
 D vtable for IVP_Polygon
 D vtable for IVP_Range_Manager
 D vtable for IVP_Ray_Hit_Listener
 D vtable for IVP_Ray_Solver
 D vtable for IVP_Ray_Solver_Min
 D vtable for IVP_Real_Object
 D vtable for IVP_Real_Object_Fast
 D vtable for IVP_Standard_Gravity_Controller
 D vtable for IVP_SurfaceManager
 D vtable for IVP_SurfaceManager_Ball
 D vtable for IVP_SurfaceManager_Polygon
 D vtable for IVP_SurfaceManager_VirtualMesh
 D vtable for IVP_Synapse
 D vtable for IVP_Synapse_OO
 D vtable for IVP_Time_Event_PSI
 D vtable for IVP_Triangle
 D vtable for IVP_U_Active_Float
 D vtable for IVP_U_Active_Int
 D vtable for IVP_U_Active_Terminal_Double
 D vtable for IVP_U_Active_Terminal_Int
 D vtable for IVP_U_Active_Value
 D vtable for IVP_U_Active_Value_Manager
 D vtable for IVP_U_Set<IVP_Core>
 D vtable for IVP_U_Set<IVP_Mindist_Base>
 D vtable for IVP_U_Set<IVP_Real_Object>
 D vtable for IVP_U_Set_Active<IVP_Core>
 D vtable for IVP_U_Set_Active<IVP_Mindist_Base>
 D vtable for IVP_U_Set_Active<IVP_Real_Object>
 D vtable for IVP_VHash
 D vtable for IVP_ov_tree_hash
 D vtable for IVP_point_hash
 D vtable for hk_Ball_Socket_Constraint
 D vtable for hk_Breakable_Constraint
 D vtable for hk_Constraint
 D vtable for hk_Fixed_Constraint
 D vtable for hk_Hinge_Constraint
 D vtable for hk_Link_EF
 D vtable for hk_Local_Constraint_System
 D vtable for hk_Prismatic_Constraint
 D vtable for hk_Pulley_Constraint
 D vtable for hk_Ragdoll_Constraint
 D vtable for hk_Rigid_Body_Binary_EF
 D vtable for hk_Stiff_Spring_Constraint
 DevMsg
 DevMsg(char const*, ...)
 Error
 GetCPUInformation
 Msg
 Plat_ExitProcess
 R Four_Fours
 R g_SIMD_ComponentMask
 R typeinfo name for CAirboatFrictionData
 R typeinfo name for CAlignedNewDelete<16, aligned_tmp_t>
 R typeinfo name for CBaseAppSystem<IPhysics>
 R typeinfo name for CBuoyancyAttacher
 R typeinfo name for CCollisionQuery
 R typeinfo name for CCollisionSolver
 R typeinfo name for CDataManager<CMeshInstance, virtualmeshlist_t, CMeshInstance*, CThreadFastMutex>
 R typeinfo name for CDataManagerBase
 R typeinfo name for CDefConvexInfo
 R typeinfo name for CDefSaveRestoreOps
 R typeinfo name for CDefaultAccessor
 R typeinfo name for CDeleteProxy<IPhysicsConstraint>
 R typeinfo name for CDragController
 R typeinfo name for CEmptyCollisionListener
 R typeinfo name for CEmptyConVar
 R typeinfo name for CFmtStrN<256, false>
 R typeinfo name for CFrictionSnapshot
 R typeinfo name for CIVPMaterialManager
 R typeinfo name for CLiquidSurfaceDescriptor
 R typeinfo name for CMaterialIndexOps
 R typeinfo name for CObjectPairHash
 R typeinfo name for CPhysCollide
 R typeinfo name for CPhysCollideCompactSurface
 R typeinfo name for CPhysCollideVirtualMesh
 R typeinfo name for CPhysicsCollision
 R typeinfo name for CPhysicsCollisionData
 R typeinfo name for CPhysicsCollisionSet
 R typeinfo name for CPhysicsConstraint
 R typeinfo name for CPhysicsConstraintGroup
 R typeinfo name for CPhysicsEnvironment
 R typeinfo name for CPhysicsFluidController
 R typeinfo name for CPhysicsFrictionData
 R typeinfo name for CPhysicsInterface
 R typeinfo name for CPhysicsListenerCollision
 R typeinfo name for CPhysicsListenerConstraint
 R typeinfo name for CPhysicsMotionController
 R typeinfo name for CPhysicsObject
 R typeinfo name for CPhysicsSpring
 R typeinfo name for CPhysicsSurfaceProps
 R typeinfo name for CPhysics_Airboat
 R typeinfo name for CPhysics_Car_System_Raycast_Wheels
 R typeinfo name for CPlayerController
 R typeinfo name for CPolyhedron
 R typeinfo name for CPolyhedron_AllocByNew
 R typeinfo name for CPolyhedron_TempMemory
 R typeinfo name for CShadowController
 R typeinfo name for CSleepObjects
 R typeinfo name for CSurface
 R typeinfo name for CTier0AppSystem<IPhysics>
 R typeinfo name for CTier1AppSystem<IPhysics, 0>
 R typeinfo name for CTraceAABB
 R typeinfo name for CTraceCone
 R typeinfo name for CTraceIVP
 R typeinfo name for CTraceSolver
 R typeinfo name for CTraceSolverSweptObject
 R typeinfo name for CUtlCStringConversion
 R typeinfo name for CUtlCharConversion
 R typeinfo name for CUtlNoEscConversion
 R typeinfo name for CVPhysPtrSaveRestoreOps
 R typeinfo name for CVPhysPtrUtlVectorSaveRestoreOps
 R typeinfo name for CVPhysicsDebugOverlay
 R typeinfo name for CVPhysicsParse
 R typeinfo name for CVehicleController
 R typeinfo name for CVoidPairHash
 R typeinfo name for ConCommandBase
 R typeinfo name for ConVar
 R typeinfo name for IAppSystem
 R typeinfo name for ICollisionQuery
 R typeinfo name for IConCommandBaseAccessor
 R typeinfo name for IConVar
 R typeinfo name for IConvexInfo
 R typeinfo name for IDeleteQueueItem
 R typeinfo name for IPhysCollide
 R typeinfo name for IPhysics
 R typeinfo name for IPhysicsCollision
 R typeinfo name for IPhysicsCollisionData
 R typeinfo name for IPhysicsCollisionEvent
 R typeinfo name for IPhysicsCollisionSet
 R typeinfo name for IPhysicsConstraint
 R typeinfo name for IPhysicsConstraintGroup
 R typeinfo name for IPhysicsEnvironment
 R typeinfo name for IPhysicsFluidController
 R typeinfo name for IPhysicsFrictionSnapshot
 R typeinfo name for IPhysicsMotionController
 R typeinfo name for IPhysicsObject
 R typeinfo name for IPhysicsObjectPairHash
 R typeinfo name for IPhysicsPlayerController
 R typeinfo name for IPhysicsShadowController
 R typeinfo name for IPhysicsSpring
 R typeinfo name for IPhysicsSurfaceProps
 R typeinfo name for IPhysicsSurfacePropsInternal
 R typeinfo name for IPhysicsVehicleController
 R typeinfo name for ISaveRestoreOps
 R typeinfo name for ITraceObject
 R typeinfo name for IVP_3D_Solver
 R typeinfo name for IVP_3D_Solver_DISTANCE_OF_TWO_POINTS
 R typeinfo name for IVP_3D_Solver_KK_COLL
 R typeinfo name for IVP_3D_Solver_KK_PARALLEL
 R typeinfo name for IVP_3D_Solver_PF_COLL
 R typeinfo name for IVP_3D_Solver_PF_NPF
 R typeinfo name for IVP_3D_Solver_PK_COLL
 R typeinfo name for IVP_3D_Solver_PK_KK
 R typeinfo name for IVP_3D_Solver_S_VALS
 R typeinfo name for IVP_3D_Solver_VEC_PARALLEL_AREA
 R typeinfo name for IVP_Active_Value_Hash
 R typeinfo name for IVP_Actuator
 R typeinfo name for IVP_Actuator_Force
 R typeinfo name for IVP_Actuator_Force_Active
 R typeinfo name for IVP_Actuator_Four_Point
 R typeinfo name for IVP_Actuator_Spring
 R typeinfo name for IVP_Actuator_Spring_Active
 R typeinfo name for IVP_Actuator_Stabilizer
 R typeinfo name for IVP_Actuator_Suspension
 R typeinfo name for IVP_Actuator_Torque
 R typeinfo name for IVP_Actuator_Torque_Active
 R typeinfo name for IVP_Actuator_Two_Point
 R typeinfo name for IVP_Anomaly_Limits
 R typeinfo name for IVP_Anomaly_Manager
 R typeinfo name for IVP_Attacher_To_Cores<IVP_Controller_Buoyancy>
 R typeinfo name for IVP_Attacher_To_Cores_Buoyancy
 R typeinfo name for IVP_Ball
 R typeinfo name for IVP_BetterDebugmanager
 R typeinfo name for IVP_CFEP_Hash
 R typeinfo name for IVP_Car_System
 R typeinfo name for IVP_Car_System_Real_Wheels
 R typeinfo name for IVP_Cluster
 R typeinfo name for IVP_Collision
 R typeinfo name for IVP_Collision_Callback_Table_Hash
 R typeinfo name for IVP_Collision_Delegator
 R typeinfo name for IVP_Collision_Delegator_Root
 R typeinfo name for IVP_Collision_Delegator_Root_Mindist
 R typeinfo name for IVP_Collision_Filter
 R typeinfo name for IVP_Collision_Filter_Exclusive_Pair
 R typeinfo name for IVP_Constraint
 R typeinfo name for IVP_Constraint_Local
 R typeinfo name for IVP_Constraint_Solver_Car
 R typeinfo name for IVP_Controller
 R typeinfo name for IVP_Controller_Buoyancy
 R typeinfo name for IVP_Controller_Dependent
 R typeinfo name for IVP_Controller_Independent
 R typeinfo name for IVP_Controller_Phantom
 R typeinfo name for IVP_Controller_Raycast_Car
 R typeinfo name for IVP_Event_Manager
 R typeinfo name for IVP_Event_Manager_Standard
 R typeinfo name for IVP_Friction_Sys_Energy
 R typeinfo name for IVP_Friction_Sys_Static
 R typeinfo name for IVP_Friction_System
 R typeinfo name for IVP_I_FPoint_VHash
 R typeinfo name for IVP_I_Point_VHash
 R typeinfo name for IVP_Liquid_Surface_Descriptor
 R typeinfo name for IVP_Listener_Collision
 R typeinfo name for IVP_Listener_Constraint
 R typeinfo name for IVP_Listener_Hull
 R typeinfo name for IVP_Listener_Object
 R typeinfo name for IVP_Listener_Phantom
 R typeinfo name for IVP_Listener_Set_Active<IVP_Core>
 R typeinfo name for IVP_Material
 R typeinfo name for IVP_Material_Manager
 R typeinfo name for IVP_Material_Simple
 R typeinfo name for IVP_Mindist
 R typeinfo name for IVP_Mindist_Base
 R typeinfo name for IVP_Mindist_Recursive
 R typeinfo name for IVP_OO_Watcher
 R typeinfo name for IVP_OV_Element
 R typeinfo name for IVP_Object
 R typeinfo name for IVP_Object_Callback_Table_Hash
 R typeinfo name for IVP_PerformanceCounter
 R typeinfo name for IVP_PerformanceCounter_Simple
 R typeinfo name for IVP_Polygon
 R typeinfo name for IVP_Range_Manager
 R typeinfo name for IVP_Ray_Hit_Listener
 R typeinfo name for IVP_Ray_Solver
 R typeinfo name for IVP_Ray_Solver_Min
 R typeinfo name for IVP_Real_Object
 R typeinfo name for IVP_Real_Object_Fast
 R typeinfo name for IVP_Real_Object_Fast_Static
 R typeinfo name for IVP_Standard_Gravity_Controller
 R typeinfo name for IVP_SurfaceManager
 R typeinfo name for IVP_SurfaceManager_Ball
 R typeinfo name for IVP_SurfaceManager_Polygon
 R typeinfo name for IVP_SurfaceManager_VirtualMesh
 R typeinfo name for IVP_Synapse
 R typeinfo name for IVP_Synapse_OO
 R typeinfo name for IVP_Time_Event
 R typeinfo name for IVP_Time_Event_PSI
 R typeinfo name for IVP_Triangle
 R typeinfo name for IVP_U_Active_Float
 R typeinfo name for IVP_U_Active_Float_Delayed
 R typeinfo name for IVP_U_Active_Float_Listener
 R typeinfo name for IVP_U_Active_Int
 R typeinfo name for IVP_U_Active_Int_Delayed
 R typeinfo name for IVP_U_Active_Terminal_Double
 R typeinfo name for IVP_U_Active_Terminal_Int
 R typeinfo name for IVP_U_Active_Value
 R typeinfo name for IVP_U_Active_Value_Manager
 R typeinfo name for IVP_U_Set<IVP_Core>
 R typeinfo name for IVP_U_Set<IVP_Mindist_Base>
 R typeinfo name for IVP_U_Set<IVP_Real_Object>
 R typeinfo name for IVP_U_Set_Active<IVP_Core>
 R typeinfo name for IVP_U_Set_Active<IVP_Mindist_Base>
 R typeinfo name for IVP_U_Set_Active<IVP_Real_Object>
 R typeinfo name for IVP_VHash
 R typeinfo name for IVP_ov_tree_hash
 R typeinfo name for IVP_point_hash
 R typeinfo name for IVPhysicsDebugOverlay
 R typeinfo name for IVPhysicsKeyParser
 R typeinfo name for aligned_tmp_t
 R typeinfo name for hk_Ball_Socket_Constraint
 R typeinfo name for hk_Breakable_Constraint
 R typeinfo name for hk_Constraint
 R typeinfo name for hk_Fixed_Constraint
 R typeinfo name for hk_Hinge_Constraint
 R typeinfo name for hk_Link_EF
 R typeinfo name for hk_Local_Constraint_System
 R typeinfo name for hk_Prismatic_Constraint
 R typeinfo name for hk_Pulley_Constraint
 R typeinfo name for hk_Ragdoll_Constraint
 R typeinfo name for hk_Rigid_Body_Binary_EF
 R typeinfo name for hk_Stiff_Spring_Constraint
 R vec3_angle
 R vec3_origin
 T AddPointToBounds(Vector const&, Vector&, Vector&)
 T AngleMatrix(QAngle const&, Vector const&, matrix3x4_t&)
 T AngleVectors(QAngle const&, Vector*, Vector*, Vector*)
 T BreakableConstraintHelper::BreakableConstraintHelper(hk_Rigid_Body*, float)
 T BuildGammaTable(float, float, float, int)
 T CAirboatFrictionData::GetContactPoint(Vector&)
 T CAirboatFrictionData::GetContactSpeed(Vector&)
 T CAirboatFrictionData::GetSurfaceNormal(Vector&)
 T CBuoyancyAttacher::get_parameters_per_core(IVP_Core*)
 T CBuoyancyAttacher::~CBuoyancyAttacher()
 T CByteswap::SwapFieldToTargetEndian(void*, void*, typedescription_t*)
 T CByteswap::SwapFieldsToTargetEndian(void*, void*, datamap_t*)
 T CCleanupUtlSymbolTable::~CCleanupUtlSymbolTable()
 T CCollisionQuery::ConvexCount()
 T CCollisionQuery::GetGameData(int)
 T CCollisionQuery::GetTriangleMaterialIndex(int, int)
 T CCollisionQuery::GetTriangleVerts(int, int, Vector*)
 T CCollisionQuery::SetTriangleMaterialIndex(int, int, int)
 T CCollisionQuery::SetTriangleVerts(int, int, Vector const*)
 T CCollisionQuery::TriangleCount(int)
 T CCollisionQuery::~CCollisionQuery()
 T CCollisionSolver::CheckObjPair(IVP_Real_Object*, IVP_Real_Object*)
 T CCollisionSolver::check_objects_for_collision_detection(IVP_Real_Object*, IVP_Real_Object*)
 T CCollisionSolver::environment_will_be_deleted(IVP_Environment*)
 T CCollisionSolver::inter_penetration(IVP_Mindist*, IVP_Real_Object*, IVP_Real_Object*, double)
 T CCollisionSolver::max_collision_checks_exceeded(int)
 T CCollisionSolver::max_collisions_exceeded_check_freezing(IVP_Anomaly_Limits*, IVP_Core*)
 T CCollisionSolver::max_contacts_exceeded_check_freezing(IVP_Core**, int)
 T CCollisionSolver::max_velocity_exceeded(IVP_Anomaly_Limits*, IVP_Core*, IVP_U_Float_Point*)
 T CCollisionSolver::~CCollisionSolver()
 T CDataManager<CMeshInstance, virtualmeshlist_t, CMeshInstance*, CThreadFastMutex>::CreateResource(virtualmeshlist_t const&, bool)
 T CDataManager<CMeshInstance, virtualmeshlist_t, CMeshInstance*, CThreadFastMutex>::DestroyResourceStorage(void*)
 T CDataManager<CMeshInstance, virtualmeshlist_t, CMeshInstance*, CThreadFastMutex>::GetRealSize(void*)
 T CDataManager<CMeshInstance, virtualmeshlist_t, CMeshInstance*, CThreadFastMutex>::Lock()
 T CDataManager<CMeshInstance, virtualmeshlist_t, CMeshInstance*, CThreadFastMutex>::TryLock()
 T CDataManager<CMeshInstance, virtualmeshlist_t, CMeshInstance*, CThreadFastMutex>::Unlock()
 T CDataManager<CMeshInstance, virtualmeshlist_t, CMeshInstance*, CThreadFastMutex>::~CDataManager()
 T CDataManagerBase::BreakLock(memhandle_t__*)
 T CDataManagerBase::CDataManagerBase(unsigned int)
 T CDataManagerBase::CreateHandle(bool)
 T CDataManagerBase::DestroyResource(memhandle_t__*)
 T CDataManagerBase::EnsureCapacity(unsigned int)
 T CDataManagerBase::FlushAll()
 T CDataManagerBase::GetForFreeByIndex(unsigned short)
 T CDataManagerBase::Lock()
 T CDataManagerBase::LockResource(memhandle_t__*)
 T CDataManagerBase::StoreResourceInHandle(unsigned short, void*, unsigned int)
 T CDataManagerBase::TryLock()
 T CDataManagerBase::Unlock()
 T CDataManagerBase::UnlockResource(memhandle_t__*)
 T CDataManagerBase::~CDataManagerBase()
 T CDatadescGeneratedNameHolder::~CDatadescGeneratedNameHolder()
 T CDefConvexInfo::GetContents(int)
 T CDefOps<void*>::LessFunc(void* const&, void* const&)
 T CDefSaveRestoreOps::IsEmpty(SaveRestoreFieldInfo_t const&)
 T CDefSaveRestoreOps::MakeEmpty(SaveRestoreFieldInfo_t const&)
 T CDefSaveRestoreOps::Parse(SaveRestoreFieldInfo_t const&, char const*)
 T CDefaultAccessor::RegisterConCommandBase(ConCommandBase*)
 T CDeleteProxy<IPhysicsConstraint>::Delete()
 T CDeleteProxy<IPhysicsConstraint>::~CDeleteProxy()
 T CDragController::do_simulation_controller(IVP_Event_Sim*, IVP_U_Vector<IVP_Core>*)
 T CDragController::get_controller_name()
 T CDragController::get_controller_priority()
 T CDragController::~CDragController()
 T CEmptyCollisionListener::EndTouch(IPhysicsObject*, IPhysicsObject*, IPhysicsCollisionData*)
 T CEmptyCollisionListener::FluidEndTouch(IPhysicsObject*, IPhysicsFluidController*)
 T CEmptyCollisionListener::FluidStartTouch(IPhysicsObject*, IPhysicsFluidController*)
 T CEmptyCollisionListener::Friction(IPhysicsObject*, float, int, int, IPhysicsCollisionData*)
 T CEmptyCollisionListener::ObjectEnterTrigger(IPhysicsObject*, IPhysicsObject*)
 T CEmptyCollisionListener::ObjectLeaveTrigger(IPhysicsObject*, IPhysicsObject*)
 T CEmptyCollisionListener::PostCollision(vcollisionevent_t*)
 T CEmptyCollisionListener::PostSimulationFrame()
 T CEmptyCollisionListener::PreCollision(vcollisionevent_t*)
 T CEmptyCollisionListener::StartTouch(IPhysicsObject*, IPhysicsObject*, IPhysicsCollisionData*)
 T CEmptyConVar::GetName() const
 T CEmptyConVar::IsFlagSet(int) const
 T CEmptyConVar::SetValue(char const*)
 T CEmptyConVar::SetValue(float)
 T CEmptyConVar::SetValue(int)
 T CEmptyConVar::~CEmptyConVar()
 T CFmtStrN<256, false>::InitQuietTruncation()
 T CFmtStrN<256, false>::sprintf(char const*, ...)
 T CFrictionSnapshot::ClearFrictionForce()
 T CFrictionSnapshot::DeleteAllMarkedContacts(bool)
 T CFrictionSnapshot::GetContactPoint(Vector&)
 T CFrictionSnapshot::GetEnergyAbsorbed()
 T CFrictionSnapshot::GetFrictionCoefficient()
 T CFrictionSnapshot::GetMaterial(int)
 T CFrictionSnapshot::GetNormalForce()
 T CFrictionSnapshot::GetObject(int)
 T CFrictionSnapshot::GetSurfaceNormal(Vector&)
 T CFrictionSnapshot::IsValid()
 T CFrictionSnapshot::MarkContactForDelete()
 T CFrictionSnapshot::NextFrictionData()
 T CFrictionSnapshot::RecomputeFriction()
 T CFrictionSnapshot::~CFrictionSnapshot()
 T CIVPMaterialManager::get_elasticity(IVP_Contact_Situation*)
 T CIVPMaterialManager::get_friction_factor(IVP_Contact_Situation*)
 T CIVPMaterialManager::get_material_by_index(IVP_Real_Object*, IVP_U_Point const*, int)
 T CIVPMaterialManager::~CIVPMaterialManager()
 T CLiquidSurfaceDescriptor::CLiquidSurfaceDescriptor(CPhysicsObject*, Vector4D const&, Vector const&)
 T CLiquidSurfaceDescriptor::calc_liquid_surface(IVP_Environment*, IVP_Core*, IVP_U_Float_Hesse*, IVP_U_Float_Point*)
 T CLiquidSurfaceDescriptor::~CLiquidSurfaceDescriptor()
 T CMaterialIndexOps::IsEmpty(SaveRestoreFieldInfo_t const&)
 T CMaterialIndexOps::MakeEmpty(SaveRestoreFieldInfo_t const&)
 T CMaterialIndexOps::Restore(SaveRestoreFieldInfo_t const&, IRestore*)
 T CMaterialIndexOps::Save(SaveRestoreFieldInfo_t const&, ISave*)
 T CMeshInstance::Init(virtualmeshlist_t const&)
 T CNormalList::ClampVector(Vector const&, float)
 T CObjectPairHash::AddObjectPair(void*, void*)
 T CObjectPairHash::AddToObjectList(void*, void*)
 T CObjectPairHash::CObjectPairHash()
 T CObjectPairHash::DestroyListForObject(void*, unsigned short)
 T CObjectPairHash::GetPairCountForObject(void*)
 T CObjectPairHash::GetPairListForObject(void*, int, void**)
 T CObjectPairHash::IsObjectInHash(void*)
 T CObjectPairHash::IsObjectPairInHash(void*, void*)
 T CObjectPairHash::RemoveAllPairsForObject(void*)
 T CObjectPairHash::RemoveFromObjectList(void*, void*)
 T CObjectPairHash::RemoveObjectPair(void*, void*)
 T CObjectPairHash::~CObjectPairHash()
 T CPhysCollide::ComputeOrthographicAreas(float)
 T CPhysCollide::GetCollideMap() const
 T CPhysCollide::GetCompactSurface() const
 T CPhysCollide::GetSphereRadius() const
 T CPhysCollide::SetOrthographicAreas(Vector const&)
 T CPhysCollide::UnserializeFromBuffer(char const*, unsigned int, int, bool)
 T CPhysCollideCompactSurface::ComputeHullInfo_r(CPhysCollideCompactSurface::hullinfo_t*, IVP_Compact_Ledgetree_Node const*) const
 T CPhysCollideCompactSurface::ComputeOrthographicAreas(float)
 T CPhysCollideCompactSurface::CreateSurfaceManager(short&) const
 T CPhysCollideCompactSurface::GetAllLedges(IVP_U_BigVector<IVP_Compact_Ledge>&) const
 T CPhysCollideCompactSurface::GetCollideMap() const
 T CPhysCollideCompactSurface::GetCompactSurface() const
 T CPhysCollideCompactSurface::GetMassCenter() const
 T CPhysCollideCompactSurface::GetOrthographicAreas() const
 T CPhysCollideCompactSurface::GetSerializationSize() const
 T CPhysCollideCompactSurface::GetVCollideIndex() const
 T CPhysCollideCompactSurface::InitCollideMap()
 T CPhysCollideCompactSurface::OutputDebugInfo() const
 T CPhysCollideCompactSurface::SerializeToBuffer(char*, bool) const
 T CPhysCollideCompactSurface::SetMassCenter(Vector const&)
 T CPhysCollideCompactSurface::SetOrthographicAreas(Vector const&)
 T CPhysCollideCompactSurface::~CPhysCollideCompactSurface()
 T CPhysCollideVirtualMesh::AddRef()
 T CPhysCollideVirtualMesh::CreateBoundingSurfaceFromRange(virtualmeshlist_t const&, int, int)
 T CPhysCollideVirtualMesh::CreateMeshBoundingHull(virtualmeshlist_t const&)
 T CPhysCollideVirtualMesh::CreateSurfaceManager(short&) const
 T CPhysCollideVirtualMesh::FrameRelease()
 T CPhysCollideVirtualMesh::GetAllLedges(IVP_U_BigVector<IVP_Compact_Ledge>&) const
 T CPhysCollideVirtualMesh::GetAllLedgesWithinRadius(IVP_U_Point const*, double, IVP_U_BigVector<IVP_Compact_Ledge>*, IVP_Compact_Ledge const*)
 T CPhysCollideVirtualMesh::GetMassCenter() const
 T CPhysCollideVirtualMesh::GetOrthographicAreas() const
 T CPhysCollideVirtualMesh::GetSerializationSize() const
 T CPhysCollideVirtualMesh::GetSphereRadius() const
 T CPhysCollideVirtualMesh::GetVCollideIndex() const
 T CPhysCollideVirtualMesh::OutputDebugInfo() const
 T CPhysCollideVirtualMesh::SerializeToBuffer(char*, bool) const
 T CPhysCollideVirtualMesh::SetMassCenter(Vector const&)
 T CPhysCollideVirtualMesh::~CPhysCollideVirtualMesh()
 T CPhysPolysoup::CPhysPolysoup()
 T CPhysicsCollision::AddBBoxCache(CPhysCollideCompactSurface*, Vector const&, Vector const&)
 T CPhysicsCollision::BBoxToCollide(Vector const&, Vector const&)
 T CPhysicsCollision::BBoxToConvex(Vector const&, Vector const&)
 T CPhysicsCollision::CollideGetAABB(Vector*, Vector*, CPhysCollide const*, Vector const&, QAngle const&)
 T CPhysicsCollision::CollideGetExtent(CPhysCollide const*, Vector const&, QAngle const&, Vector const&)
 T CPhysicsCollision::CollideGetMassCenter(CPhysCollide*, Vector*)
 T CPhysicsCollision::CollideGetOrthographicAreas(CPhysCollide const*)
 T CPhysicsCollision::CollideIndex(CPhysCollide const*)
 T CPhysicsCollision::CollideSetMassCenter(CPhysCollide*, Vector const&)
 T CPhysicsCollision::CollideSetOrthographicAreas(CPhysCollide*, Vector const&)
 T CPhysicsCollision::CollideSize(CPhysCollide*)
 T CPhysicsCollision::CollideSurfaceArea(CPhysCollide*)
 T CPhysicsCollision::CollideVolume(CPhysCollide*)
 T CPhysicsCollision::CollideWrite(char*, CPhysCollide*, bool)
 T CPhysicsCollision::ConvertConvexToCollide(CPhysConvex**, int)
 T CPhysicsCollision::ConvertConvexToCollideParams(CPhysConvex**, int, convertconvexparams_t const&)
 T CPhysicsCollision::ConvertPolysoupToCollide(CPhysPolysoup*, bool)
 T CPhysicsCollision::ConvexFree(CPhysConvex*)
 T CPhysicsCollision::ConvexFromConvexPolyhedron(CPolyhedron const&)
 T CPhysicsCollision::ConvexFromPlanes(float*, int, float)
 T CPhysicsCollision::ConvexFromVerts(Vector**, int)
 T CPhysicsCollision::ConvexFromVertsFast(Vector**, int)
 T CPhysicsCollision::ConvexSurfaceArea(CPhysConvex*)
 T CPhysicsCollision::ConvexVolume(CPhysConvex*)
 T CPhysicsCollision::ConvexesFromConvexPolygon(Vector const&, Vector const*, int, CPhysConvex**)
 T CPhysicsCollision::CreateDebugMesh(CPhysCollide const*, Vector**)
 T CPhysicsCollision::CreateQueryModel(CPhysCollide*)
 T CPhysicsCollision::CreateVirtualMesh(virtualmeshparams_t const&)
 T CPhysicsCollision::DestroyCollide(CPhysCollide*)
 T CPhysicsCollision::DestroyDebugMesh(int, Vector*)
 T CPhysicsCollision::DestroyQueryModel(ICollisionQuery*)
 T CPhysicsCollision::FastBboxCollide(CPhysCollideCompactSurface const*, Vector const&, Vector const&)
 T CPhysicsCollision::GetBBoxCacheSize(int*, int*)
 T CPhysicsCollision::GetConvexesUsedInCollideable(CPhysCollide const*, CPhysConvex**, int)
 T CPhysicsCollision::InitBBoxCache()
 T CPhysicsCollision::IsBoxIntersectingCone(Vector const&, Vector const&, truncatedcone_t const&)
 T CPhysicsCollision::OutputDebugInfo(CPhysCollide const*)
 T CPhysicsCollision::PolyhedronFromConvex(CPhysConvex*, bool)
 T CPhysicsCollision::PolysoupAddTriangle(CPhysPolysoup*, Vector const&, Vector const&, Vector const&, int)
 T CPhysicsCollision::PolysoupCreate()
 T CPhysicsCollision::PolysoupDestroy(CPhysPolysoup*)
 T CPhysicsCollision::ReadStat(int)
 T CPhysicsCollision::RebuildConvexFromPlanes(CPhysConvex*, float)
 T CPhysicsCollision::SetConvexGameData(CPhysConvex*, unsigned int)
 T CPhysicsCollision::SupportsVirtualMesh()
 T CPhysicsCollision::ThreadContextCreate()
 T CPhysicsCollision::ThreadContextDestroy(IPhysicsCollision*)
 T CPhysicsCollision::TraceBox(Ray_t const&, CPhysCollide const*, Vector const&, QAngle const&, CGameTrace*)
 T CPhysicsCollision::TraceBox(Ray_t const&, unsigned int, IConvexInfo*, CPhysCollide const*, Vector const&, QAngle const&, CGameTrace*)
 T CPhysicsCollision::TraceBox(Vector const&, Vector const&, Vector const&, Vector const&, CPhysCollide const*, Vector const&, QAngle const&, CGameTrace*)
 T CPhysicsCollision::TraceCollide(Vector const&, Vector const&, CPhysCollide const*, QAngle const&, CPhysCollide const*, Vector const&, QAngle const&, CGameTrace*)
 T CPhysicsCollision::UnserializeCollide(char*, int, int)
 T CPhysicsCollision::VCollideLoad(vcollide_t*, int, char const*, int, bool)
 T CPhysicsCollision::VCollideUnload(vcollide_t*)
 T CPhysicsCollision::VPhysicsKeyParserCreate(char const*)
 T CPhysicsCollision::VPhysicsKeyParserDestroy(IVPhysicsKeyParser*)
 T CPhysicsCollision::~CPhysicsCollision()
 T CPhysicsCollisionData::GetContactPoint(Vector&)
 T CPhysicsCollisionData::GetContactSpeed(Vector&)
 T CPhysicsCollisionData::GetSurfaceNormal(Vector&)
 T CPhysicsCollisionSet::DisableCollisions(int, int)
 T CPhysicsCollisionSet::EnableCollisions(int, int)
 T CPhysicsCollisionSet::ShouldCollide(int, int)
 T CPhysicsConstraint::Activate()
 T CPhysicsConstraint::CreateBreakableConstraint(hk_Constraint*, hk_Local_Constraint_System*, constraint_breakableparams_t const&)
 T CPhysicsConstraint::Deactivate()
 T CPhysicsConstraint::GetAttachedObject() const
 T CPhysicsConstraint::GetConstraintParams(constraint_breakableparams_t*) const
 T CPhysicsConstraint::GetConstraintTransform(matrix3x4_t*, matrix3x4_t*) const
 T CPhysicsConstraint::GetGameData() const
 T CPhysicsConstraint::GetReferenceObject() const
 T CPhysicsConstraint::InitBallsocket(IVP_Environment*, CPhysicsConstraintGroup*, constraint_ballsocketparams_t const&)
 T CPhysicsConstraint::InitFixed(IVP_Environment*, CPhysicsConstraintGroup*, constraint_fixedparams_t const&)
 T CPhysicsConstraint::InitHinge(IVP_Environment*, CPhysicsConstraintGroup*, constraint_limitedhingeparams_t const&)
 T CPhysicsConstraint::InitLength(IVP_Environment*, CPhysicsConstraintGroup*, constraint_lengthparams_t const&)
 T CPhysicsConstraint::InitPulley(IVP_Environment*, CPhysicsConstraintGroup*, constraint_pulleyparams_t const&)
 T CPhysicsConstraint::InitRagdoll(IVP_Environment*, CPhysicsConstraintGroup*, constraint_ragdollparams_t const&)
 T CPhysicsConstraint::InitSliding(IVP_Environment*, CPhysicsConstraintGroup*, constraint_slidingparams_t const&)
 T CPhysicsConstraint::OutputDebugInfo()
 T CPhysicsConstraint::SetAngularMotor(float, float)
 T CPhysicsConstraint::SetGameData(void*)
 T CPhysicsConstraint::SetLinearMotor(float, float)
 T CPhysicsConstraint::UpdateRagdollTransforms(matrix3x4_t const&, matrix3x4_t const&)
 T CPhysicsConstraint::WriteBallsocket(constraint_ballsocketparams_t&) const
 T CPhysicsConstraint::WriteFixed(constraint_fixedparams_t&) const
 T CPhysicsConstraint::WriteHinge(constraint_hingeparams_t&) const
 T CPhysicsConstraint::WriteLength(constraint_lengthparams_t&) const
 T CPhysicsConstraint::WritePulley(constraint_pulleyparams_t&) const
 T CPhysicsConstraint::WriteRagdoll(constraint_ragdollparams_t&) const
 T CPhysicsConstraint::WriteSliding(constraint_slidingparams_t&) const
 T CPhysicsConstraint::WriteToTemplate(vphysics_save_cphysicsconstraint_t&, vphysics_save_constraint_t&) const
 T CPhysicsConstraint::event_object_created(IVP_Event_Object*)
 T CPhysicsConstraint::event_object_deleted(IVP_Event_Object*)
 T CPhysicsConstraint::event_object_frozen(IVP_Event_Object*)
 T CPhysicsConstraint::event_object_revived(IVP_Event_Object*)
 T CPhysicsConstraint::~CPhysicsConstraint()
 T CPhysicsConstraintGroup::Activate()
 T CPhysicsConstraintGroup::ClearErrorState()
 T CPhysicsConstraintGroup::GetErrorParams(constraint_groupparams_t*)
 T CPhysicsConstraintGroup::IsInErrorState()
 T CPhysicsConstraintGroup::SetErrorParams(constraint_groupparams_t const&)
 T CPhysicsConstraintGroup::SolvePenetration(IPhysicsObject*, IPhysicsObject*)
 T CPhysicsConstraintGroup::~CPhysicsConstraintGroup()
 T CPhysicsEnvironment::AddPlayerController(IPhysicsPlayerController*)
 T CPhysicsEnvironment::CPhysicsEnvironment()
 T CPhysicsEnvironment::CleanupDeleteList()
 T CPhysicsEnvironment::ClearDeadObjects()
 T CPhysicsEnvironment::ClearStats()
 T CPhysicsEnvironment::CreateBallsocketConstraint(IPhysicsObject*, IPhysicsObject*, IPhysicsConstraintGroup*, constraint_ballsocketparams_t const&)
 T CPhysicsEnvironment::CreateConstraintGroup(constraint_groupparams_t const&)
 T CPhysicsEnvironment::CreateFixedConstraint(IPhysicsObject*, IPhysicsObject*, IPhysicsConstraintGroup*, constraint_fixedparams_t const&)
 T CPhysicsEnvironment::CreateFluidController(IPhysicsObject*, fluidparams_t*)
 T CPhysicsEnvironment::CreateHingeConstraint(IPhysicsObject*, IPhysicsObject*, IPhysicsConstraintGroup*, constraint_hingeparams_t const&)
 T CPhysicsEnvironment::CreateLengthConstraint(IPhysicsObject*, IPhysicsObject*, IPhysicsConstraintGroup*, constraint_lengthparams_t const&)
 T CPhysicsEnvironment::CreateLimitedHingeConstraint(IPhysicsObject*, IPhysicsObject*, IPhysicsConstraintGroup*, constraint_limitedhingeparams_t const&)
 T CPhysicsEnvironment::CreateMotionController(IMotionEvent*)
 T CPhysicsEnvironment::CreatePlayerController(IPhysicsObject*)
 T CPhysicsEnvironment::CreatePolyObject(CPhysCollide const*, int, Vector const&, QAngle const&, objectparams_t*)
 T CPhysicsEnvironment::CreatePolyObjectStatic(CPhysCollide const*, int, Vector const&, QAngle const&, objectparams_t*)
 T CPhysicsEnvironment::CreatePulleyConstraint(IPhysicsObject*, IPhysicsObject*, IPhysicsConstraintGroup*, constraint_pulleyparams_t const&)
 T CPhysicsEnvironment::CreateRagdollConstraint(IPhysicsObject*, IPhysicsObject*, IPhysicsConstraintGroup*, constraint_ragdollparams_t const&)
 T CPhysicsEnvironment::CreateShadowController(IPhysicsObject*, bool, bool)
 T CPhysicsEnvironment::CreateSlidingConstraint(IPhysicsObject*, IPhysicsObject*, IPhysicsConstraintGroup*, constraint_slidingparams_t const&)
 T CPhysicsEnvironment::CreateSphereObject(float, int, Vector const&, QAngle const&, objectparams_t*, bool)
 T CPhysicsEnvironment::CreateSpring(IPhysicsObject*, IPhysicsObject*, springparams_t*)
 T CPhysicsEnvironment::CreateVehicleController(IPhysicsObject*, vehicleparams_t const&, unsigned int, IPhysicsGameTrace*)
 T CPhysicsEnvironment::DebugCheckContacts()
 T CPhysicsEnvironment::DestroyConstraint(IPhysicsConstraint*)
 T CPhysicsEnvironment::DestroyConstraintGroup(IPhysicsConstraintGroup*)
 T CPhysicsEnvironment::DestroyFluidController(IPhysicsFluidController*)
 T CPhysicsEnvironment::DestroyMotionController(IPhysicsMotionController*)
 T CPhysicsEnvironment::DestroyObject(IPhysicsObject*)
 T CPhysicsEnvironment::DestroyPlayerController(IPhysicsPlayerController*)
 T CPhysicsEnvironment::DestroyShadowController(IPhysicsShadowController*)
 T CPhysicsEnvironment::DestroySpring(IPhysicsSpring*)
 T CPhysicsEnvironment::DestroyVehicleController(IPhysicsVehicleController*)
 T CPhysicsEnvironment::EnableConstraintNotify(bool)
 T CPhysicsEnvironment::EnableDeleteQueue(bool)
 T CPhysicsEnvironment::GetActiveObjectCount() const
 T CPhysicsEnvironment::GetActiveObjects(IPhysicsObject**) const
 T CPhysicsEnvironment::GetAirDensity() const
 T CPhysicsEnvironment::GetCollisionEventHandler()
 T CPhysicsEnvironment::GetDebugOverlay()
 T CPhysicsEnvironment::GetGravity(Vector*) const
 T CPhysicsEnvironment::GetNextFrameTime() const
 T CPhysicsEnvironment::GetObjectList(int*) const
 T CPhysicsEnvironment::GetObjectSerializeSize(IPhysicsObject*) const
 T CPhysicsEnvironment::GetPerformanceSettings(physics_performanceparams_t*) const
 T CPhysicsEnvironment::GetSimulationTime() const
 T CPhysicsEnvironment::GetSimulationTimestep() const
 T CPhysicsEnvironment::IsCollisionModelUsed(CPhysCollide*) const
 T CPhysicsEnvironment::IsInSimulation() const
 T CPhysicsEnvironment::NotifyConstraintDisabled(IPhysicsConstraint*)
 T CPhysicsEnvironment::PhantomAdd(CPhysicsObject*)
 T CPhysicsEnvironment::PostRestore()
 T CPhysicsEnvironment::PreRestore(physprerestoreparams_t const&)
 T CPhysicsEnvironment::ReadStats(physics_stats_t*)
 T CPhysicsEnvironment::ResetSimulationClock()
 T CPhysicsEnvironment::Restore(physrestoreparams_t const&)
 T CPhysicsEnvironment::Save(physsaveparams_t const&)
 T CPhysicsEnvironment::SerializeObjectToBuffer(IPhysicsObject*, unsigned char*, unsigned int)
 T CPhysicsEnvironment::SetAirDensity(float)
 T CPhysicsEnvironment::SetCollisionEventHandler(IPhysicsCollisionEvent*)
 T CPhysicsEnvironment::SetCollisionSolver(IPhysicsCollisionSolver*)
 T CPhysicsEnvironment::SetConstraintEventHandler(IPhysicsConstraintEvent*)
 T CPhysicsEnvironment::SetDebugOverlay(void* (*)(char const*, int*))
 T CPhysicsEnvironment::SetGravity(Vector const&)
 T CPhysicsEnvironment::SetObjectEventHandler(IPhysicsObjectEvent*)
 T CPhysicsEnvironment::SetPerformanceSettings(physics_performanceparams_t const*)
 T CPhysicsEnvironment::SetQuickDelete(bool)
 T CPhysicsEnvironment::SetSimulationTimestep(float)
 T CPhysicsEnvironment::ShouldQuickDelete() const
 T CPhysicsEnvironment::Simulate(float)
 T CPhysicsEnvironment::SweepCollideable(CPhysCollide const*, Vector const&, Vector const&, QAngle const&, unsigned int, IPhysicsTraceFilter*, CGameTrace*)
 T CPhysicsEnvironment::TraceBox(CGameTrace*, Vector const&, Vector const&, Vector const&, Vector const&)
 T CPhysicsEnvironment::TraceRay(Ray_t const&, unsigned int, IPhysicsTraceFilter*, CGameTrace*)
 T CPhysicsEnvironment::TransferObject(IPhysicsObject*, IPhysicsEnvironment*)
 T CPhysicsEnvironment::UnserializeObjectFromBuffer(void*, unsigned char*, unsigned int, bool)
 T CPhysicsEnvironment::~CPhysicsEnvironment()
 T CPhysicsFluidController::GetContents() const
 T CPhysicsFluidController::GetDensity() const
 T CPhysicsFluidController::GetGameData() const
 T CPhysicsFluidController::GetSurfacePlane(Vector*, float*) const
 T CPhysicsFluidController::SetGameData(void*)
 T CPhysicsFluidController::WakeAllSleepingObjects()
 T CPhysicsFluidController::~CPhysicsFluidController()
 T CPhysicsFrictionData::GetContactPoint(Vector&)
 T CPhysicsFrictionData::GetContactSpeed(Vector&)
 T CPhysicsFrictionData::GetSurfaceNormal(Vector&)
 T CPhysicsInterface::CreateEnvironment()
 T CPhysicsInterface::CreateObjectPairHash()
 T CPhysicsInterface::DestroyAllCollisionSets()
 T CPhysicsInterface::DestroyEnvironment(IPhysicsEnvironment*)
 T CPhysicsInterface::DestroyObjectPairHash(IPhysicsObjectPairHash*)
 T CPhysicsInterface::FindCollisionSet(unsigned int)
 T CPhysicsInterface::FindOrCreateCollisionSet(unsigned int, int)
 T CPhysicsInterface::GetActiveEnvironmentByIndex(int)
 T CPhysicsInterface::QueryInterface(char const*)
 T CPhysicsInterface::~CPhysicsInterface()
 T CPhysicsListenerCollision::CorePairLessFunc(CPhysicsListenerCollision::corepair_t const&, CPhysicsListenerCollision::corepair_t const&)
 T CPhysicsListenerCollision::UpdatePairListPSI(CPhysicsEnvironment*)
 T CPhysicsListenerCollision::core_entered_volume(IVP_Controller_Phantom*, IVP_Core*)
 T CPhysicsListenerCollision::core_left_volume(IVP_Controller_Phantom*, IVP_Core*)
 T CPhysicsListenerCollision::event_collision_object_deleted(IVP_Real_Object*)
 T CPhysicsListenerCollision::event_friction_created(IVP_Event_Friction*)
 T CPhysicsListenerCollision::event_friction_deleted(IVP_Event_Friction*)
 T CPhysicsListenerCollision::event_friction_pair_created(IVP_Friction_Core_Pair*)
 T CPhysicsListenerCollision::event_friction_pair_deleted(IVP_Friction_Core_Pair*)
 T CPhysicsListenerCollision::event_post_collision(IVP_Event_Collision*)
 T CPhysicsListenerCollision::event_pre_collision(IVP_Event_Collision*)
 T CPhysicsListenerCollision::mindist_entered_volume(IVP_Controller_Phantom*, IVP_Mindist_Base*)
 T CPhysicsListenerCollision::mindist_left_volume(IVP_Controller_Phantom*, IVP_Mindist_Base*)
 T CPhysicsListenerCollision::phantom_is_going_to_be_deleted_event(IVP_Controller_Phantom*)
 T CPhysicsListenerCollision::~CPhysicsListenerCollision()
 T CPhysicsListenerConstraint::event_constraint_broken(IVP_Constraint*)
 T CPhysicsListenerConstraint::event_constraint_broken(hk_Breakable_Constraint*)
 T CPhysicsMotionController::AttachObject(IPhysicsObject*, bool)
 T CPhysicsMotionController::ClearObjects()
 T CPhysicsMotionController::CountObjects()
 T CPhysicsMotionController::DetachObject(IPhysicsObject*)
 T CPhysicsMotionController::GetObjects(IPhysicsObject**)
 T CPhysicsMotionController::SetEventHandler(IMotionEvent*)
 T CPhysicsMotionController::SetPriority(IPhysicsMotionController::priority_t)
 T CPhysicsMotionController::WakeObjects()
 T CPhysicsMotionController::core_is_going_to_be_deleted_event(IVP_Core*)
 T CPhysicsMotionController::do_simulation_controller(IVP_Event_Sim*, IVP_U_Vector<IVP_Core>*)
 T CPhysicsMotionController::get_controller_name()
 T CPhysicsMotionController::get_controller_priority()
 T CPhysicsMotionController::~CPhysicsMotionController()
 T CPhysicsObject::AddVelocity(Vector const*, Vector const*)
 T CPhysicsObject::ApplyForceCenter(Vector const&)
 T CPhysicsObject::ApplyForceOffset(Vector const&, Vector const&)
 T CPhysicsObject::ApplyTorqueCenter(Vector const&)
 T CPhysicsObject::BecomeHinged(int)
 T CPhysicsObject::BecomeTrigger()
 T CPhysicsObject::CalculateAngularDrag(Vector const&) const
 T CPhysicsObject::CalculateForceOffset(Vector const&, Vector const&, Vector*, Vector*) const
 T CPhysicsObject::CalculateLinearDrag(Vector const&) const
 T CPhysicsObject::CalculateVelocityOffset(Vector const&, Vector const&, Vector*, Vector*) const
 T CPhysicsObject::ComputeShadowControl(hlshadowcontrol_params_t const&, float, float)
 T CPhysicsObject::CreateFrictionSnapshot()
 T CPhysicsObject::DestroyFrictionSnapshot(IPhysicsFrictionSnapshot*)
 T CPhysicsObject::EnableCollisions(bool)
 T CPhysicsObject::EnableDrag(bool)
 T CPhysicsObject::EnableGravity(bool)
 T CPhysicsObject::EnableMotion(bool)
 T CPhysicsObject::GetAngularDragInDirection(IVP_U_Float_Point const&) const
 T CPhysicsObject::GetCallbackFlags() const
 T CPhysicsObject::GetCollide() const
 T CPhysicsObject::GetContactPoint(Vector*, IPhysicsObject**) const
 T CPhysicsObject::GetContents() const
 T CPhysicsObject::GetDamping(float*, float*) const
 T CPhysicsObject::GetDragInDirection(IVP_U_Float_Point const&) const
 T CPhysicsObject::GetEnergy() const
 T CPhysicsObject::GetGameData() const
 T CPhysicsObject::GetGameFlags() const
 T CPhysicsObject::GetGameIndex() const
 T CPhysicsObject::GetImplicitVelocity(Vector*, Vector*) const
 T CPhysicsObject::GetInertia() const
 T CPhysicsObject::GetInvInertia() const
 T CPhysicsObject::GetInvMass() const
 T CPhysicsObject::GetMass() const
 T CPhysicsObject::GetMassCenterLocalSpace() const
 T CPhysicsObject::GetMaterialIndex() const
 T CPhysicsObject::GetName() const
 T CPhysicsObject::GetPosition(Vector*, QAngle*) const
 T CPhysicsObject::GetPositionMatrix(matrix3x4_t*) const
 T CPhysicsObject::GetShadowController() const
 T CPhysicsObject::GetShadowPosition(Vector*, QAngle*) const
 T CPhysicsObject::GetSphereRadius() const
 T CPhysicsObject::GetVPhysicsEnvironment()
 T CPhysicsObject::GetVelocity(Vector*, Vector*) const
 T CPhysicsObject::GetVelocityAtPoint(Vector const&, Vector*) const
 T CPhysicsObject::Init(CPhysCollide const*, IVP_Real_Object*, int, float, float, float)
 T CPhysicsObject::InitFromTemplate(CPhysicsEnvironment*, void*, vphysics_save_cphysicsobject_t const&)
 T CPhysicsObject::IsAsleep() const
 T CPhysicsObject::IsAttachedToConstraint(bool) const
 T CPhysicsObject::IsCollisionEnabled() const
 T CPhysicsObject::IsControlledByGame() const
 T CPhysicsObject::IsDragEnabled() const
 T CPhysicsObject::IsFluid() const
 T CPhysicsObject::IsGravityEnabled() const
 T CPhysicsObject::IsHinged() const
 T CPhysicsObject::IsMotionEnabled() const
 T CPhysicsObject::IsMoveable() const
 T CPhysicsObject::IsStatic() const
 T CPhysicsObject::IsTrigger() const
 T CPhysicsObject::LocalToWorld(Vector*, Vector const&) const
 T CPhysicsObject::LocalToWorldVector(Vector*, Vector const&) const
 T CPhysicsObject::NotifySleep()
 T CPhysicsObject::NotifyWake()
 T CPhysicsObject::OutputDebugInfo() const
 T CPhysicsObject::RecheckCollisionFilter()
 T CPhysicsObject::RecheckContactPoints()
 T CPhysicsObject::RecomputeDragBases()
 T CPhysicsObject::RemoveHinged()
 T CPhysicsObject::RemoveShadowController()
 T CPhysicsObject::RemoveTrigger()
 T CPhysicsObject::SetBuoyancyRatio(float)
 T CPhysicsObject::SetCallbackFlags(unsigned short)
 T CPhysicsObject::SetContents(unsigned int)
 T CPhysicsObject::SetDamping(float const*, float const*)
 T CPhysicsObject::SetDragCoefficient(float*, float*)
 T CPhysicsObject::SetGameData(void*)
 T CPhysicsObject::SetGameFlags(unsigned short)
 T CPhysicsObject::SetGameIndex(unsigned short)
 T CPhysicsObject::SetInertia(Vector const&)
 T CPhysicsObject::SetMass(float)
 T CPhysicsObject::SetMaterialIndex(int)
 T CPhysicsObject::SetPosition(Vector const&, QAngle const&, bool)
 T CPhysicsObject::SetPositionMatrix(matrix3x4_t const&, bool)
 T CPhysicsObject::SetShadow(float, float, bool, bool)
 T CPhysicsObject::SetVelocity(Vector const*, Vector const*)
 T CPhysicsObject::SetVelocityInstantaneous(Vector const*, Vector const*)
 T CPhysicsObject::Sleep()
 T CPhysicsObject::UpdateShadow(Vector const&, QAngle const&, bool, float)
 T CPhysicsObject::Wake()
 T CPhysicsObject::WorldToLocal(Vector*, Vector const&) const
 T CPhysicsObject::WorldToLocalVector(Vector*, Vector const&) const
 T CPhysicsObject::WriteToTemplate(vphysics_save_cphysicsobject_t&)
 T CPhysicsObject::~CPhysicsObject()
 T CPhysicsSpring::GetEndObject()
 T CPhysicsSpring::GetEndpoints(Vector*, Vector*)
 T CPhysicsSpring::GetStartObject()
 T CPhysicsSpring::SetSpringConstant(float)
 T CPhysicsSpring::SetSpringDamping(float)
 T CPhysicsSpring::SetSpringLength(float)
 T CPhysicsSpring::event_object_created(IVP_Event_Object*)
 T CPhysicsSpring::event_object_deleted(IVP_Event_Object*)
 T CPhysicsSpring::event_object_frozen(IVP_Event_Object*)
 T CPhysicsSpring::event_object_revived(IVP_Event_Object*)
 T CPhysicsSpring::~CPhysicsSpring()
 T CPhysicsSurfaceProps::AddFileToDatabase(char const*)
 T CPhysicsSurfaceProps::CPhysicsSurfaceProps()
 T CPhysicsSurfaceProps::GetIVPManager()
 T CPhysicsSurfaceProps::GetIVPMaterial(int)
 T CPhysicsSurfaceProps::GetIVPMaterialIndex(IVP_Material const*) const
 T CPhysicsSurfaceProps::GetPhysicsParameters(int, surfacephysicsparams_t*) const
 T CPhysicsSurfaceProps::GetPhysicsProperties(int, float*, float*, float*, float*) const
 T CPhysicsSurfaceProps::GetPropName(int) const
 T CPhysicsSurfaceProps::GetReservedMaterialName(int) const
 T CPhysicsSurfaceProps::GetString(unsigned short) const
 T CPhysicsSurfaceProps::GetSurfaceData(int)
 T CPhysicsSurfaceProps::GetSurfaceIndex(char const*) const
 T CPhysicsSurfaceProps::ParseSurfaceData(char const*, char const*)
 T CPhysicsSurfaceProps::RemapIVPMaterialIndex(int) const
 T CPhysicsSurfaceProps::SetWorldMaterialIndexTable(int*, int)
 T CPhysicsSurfaceProps::SurfacePropCount() const
 T CPhysicsSurfaceProps::~CPhysicsSurfaceProps()
 T CPhysicsTrace::CPhysicsTrace()
 T CPhysicsTrace::GetAABB(Vector*, Vector*, CPhysCollide const*, Vector const&, QAngle const&)
 T CPhysicsTrace::GetExtent(CPhysCollide const*, Vector const&, QAngle const&, Vector const&)
 T CPhysicsTrace::IsBoxIntersectingCone(Vector const&, Vector const&, truncatedcone_t const&)
 T CPhysicsTrace::SweepBoxIVP(Ray_t const&, unsigned int, IConvexInfo*, CPhysCollide const*, Vector const&, QAngle const&, CGameTrace*)
 T CPhysicsTrace::SweepBoxIVP(Vector const&, Vector const&, Vector const&, Vector const&, CPhysCollide const*, Vector const&, QAngle const&, CGameTrace*)
 T CPhysicsTrace::SweepIVP(Vector const&, Vector const&, CPhysCollide const*, QAngle const&, CPhysCollide const*, Vector const&, QAngle const&, CGameTrace*)
 T CPhysicsTrace::~CPhysicsTrace()
 T CPhysics_Airboat::CPhysics_Airboat(IVP_Environment*, IVP_Template_Car_System const*, IPhysicsGameTrace*)
 T CPhysics_Airboat::DoSimulationDrag(IVP_Raycast_Airboat_Impact*, IVP_Event_Sim*)
 T CPhysics_Airboat::DoSimulationKeepUprightPitch(IVP_Raycast_Airboat_Impact*, IVP_Event_Sim*)
 T CPhysics_Airboat::DoSimulationKeepUprightRoll(IVP_Raycast_Airboat_Impact*, IVP_Event_Sim*)
 T CPhysics_Airboat::DoSimulationPontoons(IVP_Raycast_Airboat_Impact*, IVP_Event_Sim*)
 T CPhysics_Airboat::DoSimulationPontoonsGround(IVP_Raycast_Airboat_Wheel*, IVP_Raycast_Airboat_Impact*, IVP_Event_Sim*)
 T CPhysics_Airboat::DoSimulationSteering(IVP_Event_Sim*)
 T CPhysics_Airboat::DoSimulationTurbine(IVP_Event_Sim*)
 T CPhysics_Airboat::GetCarSystemDebugData(IVP_CarSystemDebugData_t&)
 T CPhysics_Airboat::GetWheel(int)
 T CPhysics_Airboat::InitRaycastCarEnvironment(IVP_Environment*, IVP_Template_Car_System const*)
 T CPhysics_Airboat::InitRaycastCarWheels(IVP_Template_Car_System const*)
 T CPhysics_Airboat::IsBoosting()
 T CPhysics_Airboat::PostRaycasts(IVP_Ray_Solver_Template*, IVP_U_Matrix const*, IVP_Raycast_Airboat_Impact*)
 T CPhysics_Airboat::SetCarSystemDebugData(IVP_CarSystemDebugData_t const&)
 T CPhysics_Airboat::SetWheelFriction(int, float)
 T CPhysics_Airboat::activate_booster(float, float, float)
 T CPhysics_Airboat::change_body_downforce(float)
 T CPhysics_Airboat::change_fast_turn_factor(float)
 T CPhysics_Airboat::change_max_body_force(IVP_POS_WHEEL, float)
 T CPhysics_Airboat::change_spring_constant(IVP_POS_WHEEL, float)
 T CPhysics_Airboat::change_spring_dampening(IVP_POS_WHEEL, float)
 T CPhysics_Airboat::change_spring_dampening_compression(IVP_POS_WHEEL, float)
 T CPhysics_Airboat::change_spring_length(IVP_POS_WHEEL, float)
 T CPhysics_Airboat::change_spring_pre_tension(IVP_POS_WHEEL, float)
 T CPhysics_Airboat::change_stabilizer_constant(IVP_POS_AXIS, float)
 T CPhysics_Airboat::change_wheel_torque(IVP_POS_WHEEL, float)
 T CPhysics_Airboat::core_is_going_to_be_deleted_event(IVP_Core*)
 T CPhysics_Airboat::do_raycasts_gameside(int, IVP_Ray_Solver_Template*, IVP_Raycast_Airboat_Impact*)
 T CPhysics_Airboat::do_simulation_controller(IVP_Event_Sim*, IVP_U_Vector<IVP_Core>*)
 T CPhysics_Airboat::do_steering(float, bool)
 T CPhysics_Airboat::do_steering_wheel(IVP_POS_WHEEL, float)
 T CPhysics_Airboat::fix_wheel(IVP_POS_WHEEL, IVP_BOOL)
 T CPhysics_Airboat::get_associated_controlled_cores()
 T CPhysics_Airboat::get_body_speed(IVP_COORDINATE_INDEX)
 T CPhysics_Airboat::get_booster_delay()
 T CPhysics_Airboat::get_booster_time_to_go()
 T CPhysics_Airboat::get_controller_name()
 T CPhysics_Airboat::get_controller_priority()
 T CPhysics_Airboat::get_orig_axles_distance()
 T CPhysics_Airboat::get_orig_front_wheel_distance()
 T CPhysics_Airboat::get_skid_info(IVP_Wheel_Skid_Info*)
 T CPhysics_Airboat::get_wheel_angular_velocity(IVP_POS_WHEEL)
 T CPhysics_Airboat::get_wheel_torque(IVP_POS_WHEEL)
 T CPhysics_Airboat::pre_raycasts_gameside(int, IVP_Ray_Solver_Template*, Ray_t*, IVP_Raycast_Airboat_Impact*)
 T CPhysics_Airboat::set_booster_acceleration(float)
 T CPhysics_Airboat::set_powerslide(float, float)
 T CPhysics_Airboat::update_body_countertorque()
 T CPhysics_Airboat::update_booster(float)
 T CPhysics_Airboat::update_throttle(float)
 T CPhysics_Airboat::update_wheel_positions()
 T CPhysics_Airboat::~CPhysics_Airboat()
 T CPhysics_Car_System_Raycast_Wheels::CPhysics_Car_System_Raycast_Wheels(IVP_Environment*, IVP_Template_Car_System const*)
 T CPhysics_Car_System_Raycast_Wheels::GetWheel(int)
 T CPhysics_Car_System_Raycast_Wheels::do_raycasts(IVP_Event_Sim*, int, IVP_Ray_Solver_Template*, IVP_Ray_Hit*, float*)
 T CPhysics_Car_System_Raycast_Wheels::get_controller_name()
 T CPhysics_Car_System_Raycast_Wheels::update_wheel_positions()
 T CPhysics_Car_System_Raycast_Wheels::~CPhysics_Car_System_Raycast_Wheels()
 T CPlayerController::CPlayerController(CPhysicsObject*)
 T CPlayerController::GetLastImpulse(Vector*)
 T CPlayerController::GetObject()
 T CPlayerController::GetPushMassLimit()
 T CPlayerController::GetPushSpeedLimit()
 T CPlayerController::GetShadowPosition(Vector*, QAngle*)
 T CPlayerController::GetShadowVelocity(Vector*)
 T CPlayerController::IsInContact()
 T CPlayerController::Jump()
 T CPlayerController::MaxSpeed(Vector const&)
 T CPlayerController::SetEventHandler(IPhysicsPlayerControllerEvent*)
 T CPlayerController::SetObject(IPhysicsObject*)
 T CPlayerController::SetPushMassLimit(float)
 T CPlayerController::SetPushSpeedLimit(float)
 T CPlayerController::StepUp(float)
 T CPlayerController::TryTeleportObject()
 T CPlayerController::Update(Vector const&, Vector const&, float, bool, IPhysicsObject*)
 T CPlayerController::WasFrozen()
 T CPlayerController::do_simulation_controller(IVP_Event_Sim*, IVP_U_Vector<IVP_Core>*)
 T CPlayerController::event_object_created(IVP_Event_Object*)
 T CPlayerController::event_object_deleted(IVP_Event_Object*)
 T CPlayerController::event_object_frozen(IVP_Event_Object*)
 T CPlayerController::event_object_revived(IVP_Event_Object*)
 T CPlayerController::get_controller_name()
 T CPlayerController::get_controller_priority()
 T CPlayerController::~CPlayerController()
 T CPolyhedron_AllocByNew::Allocate(unsigned short, unsigned short, unsigned short, unsigned short)
 T CPolyhedron_AllocByNew::Release()
 T CPolyhedron_AllocByNew::~CPolyhedron_AllocByNew()
 T CPolyhedron_TempMemory::Release()
 T CPolyhedron_TempMemory::~CPolyhedron_TempMemory()
 T CShadowController::AllowsRotation()
 T CShadowController::AllowsTranslation()
 T CShadowController::AttachObject()
 T CShadowController::DetachObject()
 T CShadowController::GetLastImpulse(Vector*)
 T CShadowController::GetMaxSpeed(float*, float*)
 T CShadowController::GetTargetPosition(Vector*, QAngle*)
 T CShadowController::GetTeleportDistance()
 T CShadowController::InitFromTemplate(vphysics_save_cshadowcontroller_t const&)
 T CShadowController::IsPhysicallyControlled()
 T CShadowController::MaxSpeed(float, float)
 T CShadowController::ObjectMaterialChanged(int)
 T CShadowController::SetPhysicallyControlled(bool)
 T CShadowController::SetTeleportDistance(float)
 T CShadowController::StepUp(float)
 T CShadowController::Update(Vector const&, QAngle const&, float)
 T CShadowController::UseShadowMaterial(bool)
 T CShadowController::WriteToTemplate(vphysics_save_cshadowcontroller_t&)
 T CShadowController::do_simulation_controller(IVP_Event_Sim*, IVP_U_Vector<IVP_Core>*)
 T CShadowController::get_controller_name()
 T CShadowController::get_controller_priority()
 T CShadowController::~CShadowController()
 T CSleepObjects::ProcessActiveObjects(IVP_Environment*, IPhysicsCollisionEvent*)
 T CSleepObjects::UpdateSleepObjects()
 T CSleepObjects::event_object_created(IVP_Event_Object*)
 T CSleepObjects::event_object_deleted(IVP_Event_Object*)
 T CSleepObjects::event_object_frozen(IVP_Event_Object*)
 T CSleepObjects::event_object_revived(IVP_Event_Object*)
 T CSleepObjects::~CSleepObjects()
 T CSurface::get_adhesion()
 T CSurface::get_damping()
 T CSurface::get_elasticity()
 T CSurface::get_friction_factor()
 T CSurface::get_name()
 T CSurface::get_second_friction_factor()
 T CSurface::~CSurface()
 T CTSPool<CUtlVector<CPhysCollideVirtualMesh*, CUtlMemory<CPhysCollideVirtualMesh*, int> > >::~CTSPool()
 T CTSPool<CVisitHash>::~CTSPool()
 T CThreadLocalPtr<CUtlVector<CPhysCollideVirtualMesh*, CUtlMemory<CPhysCollideVirtualMesh*, int> > >::~CThreadLocalPtr()
 T CTier1AppSystem<IPhysics, 0>::Connect(void* (*)(char const*, int*))
 T CTier1AppSystem<IPhysics, 0>::Disconnect()
 T CTier1AppSystem<IPhysics, 0>::Init()
 T CTier1AppSystem<IPhysics, 0>::Shutdown()
 T CTraceAABB::GetVertByIndex(int) const
 T CTraceAABB::Radius() const
 T CTraceAABB::SupportMap(Vector const&, Vector*) const
 T CTraceCone::GetVertByIndex(int) const
 T CTraceCone::Radius() const
 T CTraceCone::SupportMap(Vector const&, Vector*) const
 T CTraceIVP::BuildLeafmapCache(leafmap_t const*)
 T CTraceIVP::BuildLeafmapCacheRLE(leafmap_t const*)
 T CTraceIVP::CTraceIVP(CPhysCollide const*, Vector const&, QAngle const&)
 T CTraceIVP::GetVertByIndex(int) const
 T CTraceIVP::Radius() const
 T CTraceIVP::SetLedge(IVP_Compact_Ledge const*)
 T CTraceIVP::SupportMap(Vector const&, Vector*) const
 T CTraceRay::CTraceRay(Ray_t const&, Vector const&)
 T CTraceSolver::DoSweep()
 T CTraceSolver::SolveMeshIntersection(simplex_t&)
 T CTraceSolver::SweepSingleConvex()
 T CTraceSolverSweptObject::DoSweep()
 T CTraceSolverSweptObject::InitOSRay()
 T CTraceSolverSweptObject::SweepLedgeTree_r(IVP_Compact_Ledgetree_Node const*)
 T CUtlBuffer::AddNullTermination()
 T CUtlBuffer::CUtlBuffer(int, int, int)
 T CUtlBuffer::GetOverflow(int)
 T CUtlBuffer::Put(void const*, int)
 T CUtlBuffer::PutOverflow(int)
 T CUtlBuffer::SetExternalBuffer(void*, int, int, int)
 T CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*)
 T CUtlCStringConversion::FindConversion(char const*, int*)
 T CUtlCharConversion::FindConversion(char const*, int*)
 T CUtlLinkedList<CUtlMultiList<CDataManagerBase::resource_lru_element_t, unsigned short>::List_t, unsigned short, false, unsigned short, CUtlMemory<UtlLinkedListElem_t<CUtlMultiList<CDataManagerBase::resource_lru_element_t, unsigned short>::List_t, unsigned short>, unsigned short> >::AllocInternal(bool)
 T CUtlLinkedList<CUtlMultiList<CDataManagerBase::resource_lru_element_t, unsigned short>::List_t, unsigned short, false, unsigned short, CUtlMemory<UtlLinkedListElem_t<CUtlMultiList<CDataManagerBase::resource_lru_element_t, unsigned short>::List_t, unsigned short>, unsigned short> >::LinkBefore(unsigned short, unsigned short)
 T CUtlLinkedList<CUtlMultiList<CDataManagerBase::resource_lru_element_t, unsigned short>::List_t, unsigned short, false, unsigned short, CUtlMemory<UtlLinkedListElem_t<CUtlMultiList<CDataManagerBase::resource_lru_element_t, unsigned short>::List_t, unsigned short>, unsigned short> >::~CUtlLinkedList()
 T CUtlLinkedList<CUtlMultiList<void*, unsigned short>::List_t, unsigned short, false, unsigned short, CUtlMemory<UtlLinkedListElem_t<CUtlMultiList<void*, unsigned short>::List_t, unsigned short>, unsigned short> >::AllocInternal(bool)
 T CUtlLinkedList<CUtlMultiList<void*, unsigned short>::List_t, unsigned short, false, unsigned short, CUtlMemory<UtlLinkedListElem_t<CUtlMultiList<void*, unsigned short>::List_t, unsigned short>, unsigned short> >::LinkBefore(unsigned short, unsigned short)
 T CUtlLinkedList<CUtlMultiList<void*, unsigned short>::List_t, unsigned short, false, unsigned short, CUtlMemory<UtlLinkedListElem_t<CUtlMultiList<void*, unsigned short>::List_t, unsigned short>, unsigned short> >::~CUtlLinkedList()
 T CUtlMap<void*, void*, unsigned short, bool (*)(void* const&, void* const&)>::~CUtlMap()
 T CUtlMemory<UtlLinkedListElem_t<CUtlMultiList<CDataManagerBase::resource_lru_element_t, unsigned short>::List_t, unsigned short>, unsigned short>::Grow(int)
 T CUtlMemory<UtlLinkedListElem_t<CUtlMultiList<void*, unsigned short>::List_t, unsigned short>, unsigned short>::Grow(int)
 T CUtlMemory<UtlRBTreeNode_t<CPhysicsListenerCollision::corepair_t, unsigned short>, unsigned short>::Grow(int)
 T CUtlMemory<UtlRBTreeNode_t<CUtlMap<void*, void*, unsigned short, bool (*)(void* const&, void* const&)>::Node_t, unsigned short>, unsigned short>::Grow(int)
 T CUtlMemory<UtlRBTreeNode_t<CUtlSymbolTable::CStringPoolIndex, unsigned short>, unsigned short>::Grow(int)
 T CUtlMultiList<CDataManagerBase::resource_lru_element_t, unsigned short>::Alloc()
 T CUtlMultiList<CDataManagerBase::resource_lru_element_t, unsigned short>::LinkBefore(unsigned short, unsigned short, unsigned short)
 T CUtlMultiList<CDataManagerBase::resource_lru_element_t, unsigned short>::~CUtlMultiList()
 T CUtlMultiList<void*, unsigned short>::Alloc()
 T CUtlMultiList<void*, unsigned short>::LinkBefore(unsigned short, unsigned short, unsigned short)
 T CUtlMultiList<void*, unsigned short>::Remove(unsigned short, unsigned short)
 T CUtlMultiList<void*, unsigned short>::~CUtlMultiList()
 T CUtlNoEscConversion::FindConversion(char const*, int*)
 T CUtlRBTree<CPhysicsListenerCollision::corepair_t, unsigned short, bool (*)(CPhysicsListenerCollision::corepair_t const&, CPhysicsListenerCollision::corepair_t const&), CUtlMemory<UtlRBTreeNode_t<CPhysicsListenerCollision::corepair_t, unsigned short>, unsigned short> >::Insert(CPhysicsListenerCollision::corepair_t const&)
 T CUtlRBTree<CPhysicsListenerCollision::corepair_t, unsigned short, bool (*)(CPhysicsListenerCollision::corepair_t const&, CPhysicsListenerCollision::corepair_t const&), CUtlMemory<UtlRBTreeNode_t<CPhysicsListenerCollision::corepair_t, unsigned short>, unsigned short> >::InsertRebalance(unsigned short)
 T CUtlRBTree<CPhysicsListenerCollision::corepair_t, unsigned short, bool (*)(CPhysicsListenerCollision::corepair_t const&, CPhysicsListenerCollision::corepair_t const&), CUtlMemory<UtlRBTreeNode_t<CPhysicsListenerCollision::corepair_t, unsigned short>, unsigned short> >::NewNode()
 T CUtlRBTree<CPhysicsListenerCollision::corepair_t, unsigned short, bool (*)(CPhysicsListenerCollision::corepair_t const&, CPhysicsListenerCollision::corepair_t const&), CUtlMemory<UtlRBTreeNode_t<CPhysicsListenerCollision::corepair_t, unsigned short>, unsigned short> >::NextInorder(unsigned short) const
 T CUtlRBTree<CPhysicsListenerCollision::corepair_t, unsigned short, bool (*)(CPhysicsListenerCollision::corepair_t const&, CPhysicsListenerCollision::corepair_t const&), CUtlMemory<UtlRBTreeNode_t<CPhysicsListenerCollision::corepair_t, unsigned short>, unsigned short> >::Purge()
 T CUtlRBTree<CPhysicsListenerCollision::corepair_t, unsigned short, bool (*)(CPhysicsListenerCollision::corepair_t const&, CPhysicsListenerCollision::corepair_t const&), CUtlMemory<UtlRBTreeNode_t<CPhysicsListenerCollision::corepair_t, unsigned short>, unsigned short> >::RemoveRebalance(unsigned short)
 T CUtlRBTree<CPhysicsListenerCollision::corepair_t, unsigned short, bool (*)(CPhysicsListenerCollision::corepair_t const&, CPhysicsListenerCollision::corepair_t const&), CUtlMemory<UtlRBTreeNode_t<CPhysicsListenerCollision::corepair_t, unsigned short>, unsigned short> >::RotateLeft(unsigned short)
 T CUtlRBTree<CPhysicsListenerCollision::corepair_t, unsigned short, bool (*)(CPhysicsListenerCollision::corepair_t const&, CPhysicsListenerCollision::corepair_t const&), CUtlMemory<UtlRBTreeNode_t<CPhysicsListenerCollision::corepair_t, unsigned short>, unsigned short> >::RotateRight(unsigned short)
 T CUtlRBTree<CPhysicsListenerCollision::corepair_t, unsigned short, bool (*)(CPhysicsListenerCollision::corepair_t const&, CPhysicsListenerCollision::corepair_t const&), CUtlMemory<UtlRBTreeNode_t<CPhysicsListenerCollision::corepair_t, unsigned short>, unsigned short> >::Unlink(unsigned short)
 T CUtlRBTree<CPhysicsListenerCollision::corepair_t, unsigned short, bool (*)(CPhysicsListenerCollision::corepair_t const&, CPhysicsListenerCollision::corepair_t const&), CUtlMemory<UtlRBTreeNode_t<CPhysicsListenerCollision::corepair_t, unsigned short>, unsigned short> >::~CUtlRBTree()
 T CUtlRBTree<CUtlMap<void*, void*, unsigned short, bool (*)(void* const&, void* const&)>::Node_t, unsigned short, CUtlMap<void*, void*, unsigned short, bool (*)(void* const&, void* const&)>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<void*, void*, unsigned short, bool (*)(void* const&, void* const&)>::Node_t, unsigned short>, unsigned short> >::Insert(CUtlMap<void*, void*, unsigned short, bool (*)(void* const&, void* const&)>::Node_t const&)
 T CUtlRBTree<CUtlMap<void*, void*, unsigned short, bool (*)(void* const&, void* const&)>::Node_t, unsigned short, CUtlMap<void*, void*, unsigned short, bool (*)(void* const&, void* const&)>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<void*, void*, unsigned short, bool (*)(void* const&, void* const&)>::Node_t, unsigned short>, unsigned short> >::InsertRebalance(unsigned short)
 T CUtlRBTree<CUtlMap<void*, void*, unsigned short, bool (*)(void* const&, void* const&)>::Node_t, unsigned short, CUtlMap<void*, void*, unsigned short, bool (*)(void* const&, void* const&)>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<void*, void*, unsigned short, bool (*)(void* const&, void* const&)>::Node_t, unsigned short>, unsigned short> >::NewNode()
 T CUtlRBTree<CUtlMap<void*, void*, unsigned short, bool (*)(void* const&, void* const&)>::Node_t, unsigned short, CUtlMap<void*, void*, unsigned short, bool (*)(void* const&, void* const&)>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<void*, void*, unsigned short, bool (*)(void* const&, void* const&)>::Node_t, unsigned short>, unsigned short> >::Purge()
 T CUtlRBTree<CUtlMap<void*, void*, unsigned short, bool (*)(void* const&, void* const&)>::Node_t, unsigned short, CUtlMap<void*, void*, unsigned short, bool (*)(void* const&, void* const&)>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<void*, void*, unsigned short, bool (*)(void* const&, void* const&)>::Node_t, unsigned short>, unsigned short> >::RotateLeft(unsigned short)
 T CUtlRBTree<CUtlMap<void*, void*, unsigned short, bool (*)(void* const&, void* const&)>::Node_t, unsigned short, CUtlMap<void*, void*, unsigned short, bool (*)(void* const&, void* const&)>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<void*, void*, unsigned short, bool (*)(void* const&, void* const&)>::Node_t, unsigned short>, unsigned short> >::RotateRight(unsigned short)
 T CUtlRBTree<CUtlMap<void*, void*, unsigned short, bool (*)(void* const&, void* const&)>::Node_t, unsigned short, CUtlMap<void*, void*, unsigned short, bool (*)(void* const&, void* const&)>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<void*, void*, unsigned short, bool (*)(void* const&, void* const&)>::Node_t, unsigned short>, unsigned short> >::~CUtlRBTree()
 T CUtlRBTree<CUtlSymbolTable::CStringPoolIndex, unsigned short, CUtlSymbolTable::CLess, CUtlMemory<UtlRBTreeNode_t<CUtlSymbolTable::CStringPoolIndex, unsigned short>, unsigned short> >::Insert(CUtlSymbolTable::CStringPoolIndex const&)
 T CUtlRBTree<CUtlSymbolTable::CStringPoolIndex, unsigned short, CUtlSymbolTable::CLess, CUtlMemory<UtlRBTreeNode_t<CUtlSymbolTable::CStringPoolIndex, unsigned short>, unsigned short> >::InsertRebalance(unsigned short)
 T CUtlRBTree<CUtlSymbolTable::CStringPoolIndex, unsigned short, CUtlSymbolTable::CLess, CUtlMemory<UtlRBTreeNode_t<CUtlSymbolTable::CStringPoolIndex, unsigned short>, unsigned short> >::NewNode()
 T CUtlRBTree<CUtlSymbolTable::CStringPoolIndex, unsigned short, CUtlSymbolTable::CLess, CUtlMemory<UtlRBTreeNode_t<CUtlSymbolTable::CStringPoolIndex, unsigned short>, unsigned short> >::Purge()
 T CUtlRBTree<CUtlSymbolTable::CStringPoolIndex, unsigned short, CUtlSymbolTable::CLess, CUtlMemory<UtlRBTreeNode_t<CUtlSymbolTable::CStringPoolIndex, unsigned short>, unsigned short> >::RotateLeft(unsigned short)
 T CUtlRBTree<CUtlSymbolTable::CStringPoolIndex, unsigned short, CUtlSymbolTable::CLess, CUtlMemory<UtlRBTreeNode_t<CUtlSymbolTable::CStringPoolIndex, unsigned short>, unsigned short> >::RotateRight(unsigned short)
 T CUtlRBTree<CUtlSymbolTable::CStringPoolIndex, unsigned short, CUtlSymbolTable::CLess, CUtlMemory<UtlRBTreeNode_t<CUtlSymbolTable::CStringPoolIndex, unsigned short>, unsigned short> >::~CUtlRBTree()
 T CUtlSymbolTable::AddString(char const*)
 T CUtlSymbolTable::CLess::operator()(CUtlSymbolTable::CStringPoolIndex const&, CUtlSymbolTable::CStringPoolIndex const&) const
 T CUtlSymbolTable::CUtlSymbolTable(int, int, bool)
 T CUtlSymbolTable::Find(char const*) const
 T CUtlSymbolTable::String(CUtlSymbol) const
 T CUtlSymbolTable::~CUtlSymbolTable()
 T CUtlSymbolTableMT::Find(char const*) const
 T CUtlSymbolTableMT::String(CUtlSymbol) const
 T CUtlVector<CCollisionSolver::realobjectpair_t, CUtlMemory<CCollisionSolver::realobjectpair_t, int> >::~CUtlVector()
 T CUtlVector<CPhysCollideVirtualMesh*, CUtlMemory<CPhysCollideVirtualMesh*, int> >::~CUtlVector()
 T CUtlVector<CPhysicsCollisionSet, CUtlMemory<CPhysicsCollisionSet, int> >::~CUtlVector()
 T CUtlVector<CPhysicsConstraintGroup*, CUtlMemory<CPhysicsConstraintGroup*, int> >::~CUtlVector()
 T CUtlVector<CPhysicsFluidController*, CUtlMemory<CPhysicsFluidController*, int> >::~CUtlVector()
 T CUtlVector<CPhysicsObject*, CUtlMemory<CPhysicsObject*, int> >::AddToTail(CPhysicsObject* const&)
 T CUtlVector<CPhysicsObject*, CUtlMemory<CPhysicsObject*, int> >::~CUtlVector()
 T CUtlVector<CSurface, CUtlMemory<CSurface, int> >::AddToTail(CSurface const&)
 T CUtlVector<CSurface, CUtlMemory<CSurface, int> >::~CUtlVector()
 T CUtlVector<CUtlSymbol, CUtlMemory<CUtlSymbol, int> >::~CUtlVector()
 T CUtlVector<CUtlSymbolTable::StringPool_t*, CUtlMemory<CUtlSymbolTable::StringPool_t*, int> >::~CUtlVector()
 T CUtlVector<IDeleteQueueItem*, CUtlMemory<IDeleteQueueItem*, int> >::~CUtlVector()
 T CUtlVector<IPhysicsEnvironment*, CUtlMemory<IPhysicsEnvironment*, int> >::~CUtlVector()
 T CUtlVector<IPhysicsObject*, CUtlMemory<IPhysicsObject*, int> >::AddToTail(IPhysicsObject* const&)
 T CUtlVector<IPhysicsObject*, CUtlMemory<IPhysicsObject*, int> >::InsertMultipleBefore(int, int)
 T CUtlVector<IPhysicsObject*, CUtlMemory<IPhysicsObject*, int> >::~CUtlVector()
 T CUtlVector<IPhysicsPlayerController*, CUtlMemory<IPhysicsPlayerController*, int> >::~CUtlVector()
 T CUtlVector<IVP_Compact_Ledgetree_Node const*, CUtlMemoryFixedGrowable<IVP_Compact_Ledgetree_Node const*, 64ul, int> >::InsertBefore(int)
 T CUtlVector<IVP_Compact_Ledgetree_Node const*, CUtlMemoryFixedGrowable<IVP_Compact_Ledgetree_Node const*, 64ul, int> >::~CUtlVector()
 T CUtlVector<IVP_Core*, CUtlMemory<IVP_Core*, int> >::~CUtlVector()
 T CUtlVector<IVP_Real_Object*, CUtlMemory<IVP_Real_Object*, int> >::~CUtlVector()
 T CUtlVector<bboxcache_t, CUtlMemory<bboxcache_t, int> >::~CUtlVector()
 T CUtlVector<char*, CUtlMemory<char*, int> >::~CUtlVector()
 T CUtlVector<int, CUtlMemory<int, int> >::GrowVector(int)
 T CUtlVector<int, CUtlMemory<int, int> >::InsertMultipleBefore(int, int)
 T CUtlVector<int, CUtlMemory<int, int> >::~CUtlVector()
 T CUtlVector<postrestore_objectlist_t, CUtlMemory<postrestore_objectlist_t, int> >::~CUtlVector()
 T CUtlVector<unsigned char, CUtlMemory<unsigned char, int> >::InsertMultipleBefore(int, int)
 T CUtlVector<unsigned char, CUtlMemory<unsigned char, int> >::~CUtlVector()
 T CUtlVector<void*, CUtlMemory<void*, int> >::AddToTail(void* const&)
 T CUtlVector<void*, CUtlMemory<void*, int> >::~CUtlVector()
 T CVPhysPtrSaveRestoreOps::PostRestore()
 T CVPhysPtrSaveRestoreOps::Restore(SaveRestoreFieldInfo_t const&, IRestore*)
 T CVPhysPtrSaveRestoreOps::Save(SaveRestoreFieldInfo_t const&, ISave*)
 T CVPhysPtrUtlVectorSaveRestoreOps::Restore(SaveRestoreFieldInfo_t const&, IRestore*)
 T CVPhysPtrUtlVectorSaveRestoreOps::Save(SaveRestoreFieldInfo_t const&, ISave*)
 T CVPhysicsDebugOverlay::AddBoxOverlay(Vector const&, Vector const&, Vector const&, QAngle const&, int, int, int, int, float)
 T CVPhysicsDebugOverlay::AddEntityTextOverlay(int, int, float, int, int, int, int, char const*, ...)
 T CVPhysicsDebugOverlay::AddLineOverlay(Vector const&, Vector const&, int, int, int, bool, float)
 T CVPhysicsDebugOverlay::AddScreenTextOverlay(float, float, float, int, int, int, int, char const*)
 T CVPhysicsDebugOverlay::AddSweptBoxOverlay(Vector const&, Vector const&, Vector const&, Vector const&, QAngle const&, int, int, int, int, float)
 T CVPhysicsDebugOverlay::AddTextOverlay(Vector const&, float, char const*, ...)
 T CVPhysicsDebugOverlay::AddTextOverlay(Vector const&, int, float, char const*, ...)
 T CVPhysicsDebugOverlay::AddTextOverlayRGB(Vector const&, int, float, float, float, float, float, char const*, ...)
 T CVPhysicsDebugOverlay::AddTriangleOverlay(Vector const&, Vector const&, Vector const&, int, int, int, int, bool, float)
 T CVPhysicsParse::Finished()
 T CVPhysicsParse::GetCurrentBlockName()
 T CVPhysicsParse::NextBlock()
 T CVPhysicsParse::ParseCustom(void*, IVPhysicsKeyHandler*)
 T CVPhysicsParse::ParseFluid(fluid_t*, IVPhysicsKeyHandler*)
 T CVPhysicsParse::ParseRagdollConstraint(constraint_ragdollparams_t*, IVPhysicsKeyHandler*)
 T CVPhysicsParse::ParseSolid(solid_t*, IVPhysicsKeyHandler*)
 T CVPhysicsParse::ParseSurfaceTable(int*, IVPhysicsKeyHandler*)
 T CVPhysicsParse::ParseVehicle(vehicleparams_t*, IVPhysicsKeyHandler*)
 T CVPhysicsParse::ParseVehicleAxle(vehicle_axleparams_t&)
 T CVPhysicsParse::ParseVehicleBody(vehicle_bodyparams_t&)
 T CVPhysicsParse::ParseVehicleEngine(vehicle_engineparams_t&)
 T CVPhysicsParse::ParseVehicleEngineBoost(vehicle_engineparams_t&)
 T CVPhysicsParse::ParseVehicleSteering(vehicle_steeringparams_t&)
 T CVPhysicsParse::ParseVehicleSuspension(vehicle_suspensionparams_t&)
 T CVPhysicsParse::ParseVehicleWheel(vehicle_wheelparams_t&)
 T CVPhysicsParse::SkipBlock()
 T CVPhysicsParse::~CVPhysicsParse()
 T CVPhysicsVirtualMeshWriter::CreatePackedHullFromLedges(virtualmeshlist_t const&, IVP_Compact_Ledge const**, int)
 T CVPhysicsVirtualMeshWriter::DestroyPackedHull(virtualmeshhull_t*)
 T CVPhysicsVirtualMeshWriter::InitTwoSidedTriangleLege(triangleledge_t*, IVP_Compact_Poly_Point const*, int, int, int, int)
 T CVPhysicsVirtualMeshWriter::LedgeCanBePacked(IVP_Compact_Ledge const*, virtualmeshlist_t const&)
 T CVPhysicsVirtualMeshWriter::UnpackCompactLedgeFromHull(IVP_Compact_Ledge*, int, IVP_Compact_Poly_Point const*, virtualmeshhull_t const*, int, bool)
 T CVPhysicsVirtualMeshWriter::UnpackLedgeListFromHull(unsigned char*, virtualmeshhull_t*, IVP_Compact_Poly_Point*)
 T CVehicleController::CalcEngine(float, float, bool, float, bool)
 T CVehicleController::CalcEngineTransmission(float)
 T CVehicleController::CreateIVPObjects()
 T CVehicleController::CreateTraceData(int, vehicle_axleparams_t&)
 T CVehicleController::CreateWheel(int, vehicle_axleparams_t&)
 T CVehicleController::GetCarSystemDebugData(vehicle_debugcarsystem_t&)
 T CVehicleController::GetOperatingParams()
 T CVehicleController::GetVehicleParams()
 T CVehicleController::GetVehicleParamsForChange()
 T CVehicleController::GetWheel(int)
 T CVehicleController::GetWheelContactPoint(int, Vector*, int*)
 T CVehicleController::GetWheelCount()
 T CVehicleController::InitCarSystem(CPhysicsObject*)
 T CVehicleController::InitCarSystemWheels(IVP_Template_Car_System&)
 T CVehicleController::InitFromTemplate(CPhysicsEnvironment*, void*, IPhysicsGameTrace*, vphysics_save_cvehiclecontroller_t const&)
 T CVehicleController::InitVehicleData(vehicleparams_t const&)
 T CVehicleController::IsBoosting()
 T CVehicleController::IsEngineDisabled()
 T CVehicleController::OnVehicleEnter()
 T CVehicleController::OnVehicleExit()
 T CVehicleController::SetEngineDisabled(bool)
 T CVehicleController::SetSpringLength(int, float)
 T CVehicleController::SetWheelFriction(int, float)
 T CVehicleController::Update(float, vehicle_controlparams_t&)
 T CVehicleController::UpdateBooster(float)
 T CVehicleController::UpdateEngine(vehicle_controlparams_t const&, float, float, float, bool, bool)
 T CVehicleController::UpdateExtraForces()
 T CVehicleController::UpdateHandbrake(vehicle_controlparams_t const&, float, bool, bool)
 T CVehicleController::UpdatePowerslide(vehicle_controlparams_t const&, bool, float)
 T CVehicleController::UpdateSkidding(bool)
 T CVehicleController::UpdateSteering(vehicle_controlparams_t const&, float, float)
 T CVehicleController::VehicleDataReload()
 T CVehicleController::WriteToTemplate(vphysics_save_cvehiclecontroller_t&)
 T CVehicleController::event_object_created(IVP_Event_Object*)
 T CVehicleController::event_object_deleted(IVP_Event_Object*)
 T CVehicleController::event_object_frozen(IVP_Event_Object*)
 T CVehicleController::event_object_revived(IVP_Event_Object*)
 T CVehicleController::~CVehicleController()
 T CVoidPairHash::~CVoidPairHash()
 T CharacterSetBuild(characterset_t*, char const*)
 T ClearBounds(Vector&, Vector&)
 T ComputeController(IVP_U_Float_Point&, IVP_U_Float_Point const&, IVP_U_Float_Point const&, float, float, IVP_U_Float_Point*)
 T ComputeController(IVP_U_Float_Point&, IVP_U_Float_Point const&, float, float, float, float, IVP_U_Float_Point*)
 T ComputeShadowControllerHL(CPhysicsObject*, hlshadowcontrol_params_t const&, float, float)
 T ComputeShadowControllerIVP(IVP_Real_Object*, shadowcontrol_params_t&, float, float)
 T ConCommandBase::CreateBase(char const*, char const*, int)
 T ConCommandBase::GetDLLIdentifier() const
 T ConVar::AddFlags(int)
 T ConVar::ChangeStringValue(char const*, float)
 T ConVar::ClampValue(float&)
 T ConVar::Create(char const*, char const*, int, char const*, bool, float, bool, float, bool, float, bool, float, void (*)(IConVar*, char const*, float))
 T ConVar::GetHelpText() const
 T ConVar::GetName() const
 T ConVar::Init()
 T ConVar::InternalSetFloatValue(float, bool)
 T ConVar::InternalSetIntValue(int)
 T ConVar::InternalSetValue(char const*)
 T ConVar::IsCommand() const
 T ConVar::IsFlagSet(int) const
 T ConVar::IsRegistered() const
 T ConVar::SetValue(char const*)
 T ConVar::SetValue(float)
 T ConVar::SetValue(int)
 T ConVar::~ConVar()
 T ConVar_Register(int, IConCommandBaseAccessor*)
 T ConVar_Unregister()
 T ConcatTransforms(matrix3x4_t const&, matrix3x4_t const&, matrix3x4_t&)
 T ConnectTier1Libraries(void* (**)(char const*, int*), int)
 T ControlPhysicsPlayerControllerAttachment_Silent(IPhysicsPlayerController*, IVP_Real_Object*, bool)
 T ControlPhysicsShadowControllerAttachment_Silent(IPhysicsShadowController*, IVP_Real_Object*, bool)
 T ConvertCoordinateAxisToIVP(int)
 T ConvertMatrixToHL(IVP_U_Matrix const&, matrix3x4_t&)
 T ConvertMatrixToIVP(matrix3x4_t const&, IVP_U_Matrix&)
 T ConvertRotationToHL(IVP_U_Matrix3 const&, QAngle&)
 T ConvertRotationToHL(IVP_U_Quat const&, QAngle&)
 T ConvertRotationToIVP(QAngle const&, IVP_U_Matrix3&)
 T ConvertRotationToIVP(QAngle const&, IVP_U_Quat&)
 T CreateBallsocketConstraint(IVP_Environment*, CPhysicsObject*, CPhysicsObject*, IPhysicsConstraintGroup*, constraint_ballsocketparams_t const&)
 T CreateFixedConstraint(IVP_Environment*, CPhysicsObject*, CPhysicsObject*, IPhysicsConstraintGroup*, constraint_fixedparams_t const&)
 T CreateFluidController(IVP_Environment*, CPhysicsObject*, fluidparams_t*)
 T CreateFrictionSnapshot(IVP_Real_Object*)
 T CreateHingeConstraint(IVP_Environment*, CPhysicsObject*, CPhysicsObject*, IPhysicsConstraintGroup*, constraint_limitedhingeparams_t const&)
 T CreateInterface
 T CreateInterfaceInternal(char const*, int*)
 T CreateLengthConstraint(IVP_Environment*, CPhysicsObject*, CPhysicsObject*, IPhysicsConstraintGroup*, constraint_lengthparams_t const&)
 T CreateMotionController(CPhysicsEnvironment*, IMotionEvent*)
 T CreateObjectFromBuffer(CPhysicsEnvironment*, void*, unsigned char*, unsigned int, bool)
 T CreateObjectFromBuffer_UseExistingMemory(CPhysicsEnvironment*, void*, unsigned char*, unsigned int, CPhysicsObject*)
 T CreateObjectPairHash()
 T CreatePhysicsConstraintGroup(IVP_Environment*, constraint_groupparams_t const&)
 T CreatePhysicsEnvironment()
 T CreatePhysicsObject(CPhysicsEnvironment*, CPhysCollide const*, int, Vector const&, QAngle const&, objectparams_t*, bool)
 T CreatePhysicsSphere(CPhysicsEnvironment*, float, int, Vector const&, QAngle const&, objectparams_t*, bool)
 T CreatePlayerController(CPhysicsObject*)
 T CreatePulleyConstraint(IVP_Environment*, CPhysicsObject*, CPhysicsObject*, IPhysicsConstraintGroup*, constraint_pulleyparams_t const&)
 T CreateRagdollConstraint(IVP_Environment*, CPhysicsObject*, CPhysicsObject*, IPhysicsConstraintGroup*, constraint_ragdollparams_t const&)
 T CreateShadowController(CPhysicsObject*, bool, bool)
 T CreateSlidingConstraint(IVP_Environment*, CPhysicsObject*, CPhysicsObject*, IPhysicsConstraintGroup*, constraint_slidingparams_t const&)
 T CreateSpring(IVP_Environment*, CPhysicsObject*, CPhysicsObject*, springparams_t*)
 T CreateSurfaceManager(CPhysCollide const*, short&)
 T CreateVPhysicsKeyParser(char const*)
 T CreateVehicleController(CPhysicsEnvironment*, CPhysicsObject*, vehicleparams_t const&, unsigned int, IPhysicsGameTrace*)
 T CreateVirtualMesh(virtualmeshparams_t const&)
 T DestroyFrictionSnapshot(IPhysicsFrictionSnapshot*)
 T DestroyPlayerController(IPhysicsPlayerController*)
 T DestroyVPhysicsKeyParser(IVPhysicsKeyParser*)
 T DisconnectTier1Libraries()
 T FourVectors::RotateManyBy(FourVectors*, unsigned int, matrix3x4_t const&)
 T FreeVisitHash(CVisitHash*)
 T GetClientDataForHkConstraint(hk_Breakable_Constraint*)
 T GetOppositeSynapseObject(IVP_Synapse_Friction*)
 T GetTempPolyhedron(unsigned short, unsigned short, unsigned short, unsigned short)
 T IVP_3D_Solver::calc_nullstelle(IVP_Time, IVP_Time, double, double, double, IVP_Real_Object*, IVP_Real_Object*)
 T IVP_3D_Solver::find_first_t_for_value_coll(double, double, IVP_Time, IVP_Time, IVP_U_Matrix_Cache*, IVP_U_Matrix_Cache*, double*, IVP_Time*)
 T IVP_3D_Solver::find_first_t_for_value_max_dev(double, IVP_Time, IVP_Time, int, IVP_U_Matrix_Cache*, IVP_U_Matrix_Cache*, double*, IVP_Time*)
 T IVP_3D_Solver_DISTANCE_OF_TWO_POINTS::get_value(IVP_U_Matrix*, IVP_U_Matrix*)
 T IVP_3D_Solver_KK_COLL::get_value(IVP_U_Matrix*, IVP_U_Matrix*)
 T IVP_3D_Solver_KK_PARALLEL::get_value(IVP_U_Matrix*, IVP_U_Matrix*)
 T IVP_3D_Solver_PF_COLL::get_value(IVP_U_Matrix*, IVP_U_Matrix*)
 T IVP_3D_Solver_PF_NPF::get_value(IVP_U_Matrix*, IVP_U_Matrix*)
 T IVP_3D_Solver_PK_COLL::get_value(IVP_U_Matrix*, IVP_U_Matrix*)
 T IVP_3D_Solver_PK_KK::get_value(IVP_U_Matrix*, IVP_U_Matrix*)
 T IVP_3D_Solver_S_VALS::get_value(IVP_U_Matrix*, IVP_U_Matrix*)
 T IVP_3D_Solver_VEC_PARALLEL_AREA::get_value(IVP_U_Matrix*, IVP_U_Matrix*)
 T IVP_Active_Value_Hash::compare(void*, void*) const
 T IVP_Active_Value_Hash::~IVP_Active_Value_Hash()
 T IVP_Actuator::anchor_will_be_deleted_event(IVP_Anchor*)
 T IVP_Actuator::core_is_going_to_be_deleted_event(IVP_Core*)
 T IVP_Actuator::get_associated_controlled_cores()
 T IVP_Actuator::get_controller_name()
 T IVP_Actuator::get_controller_priority()
 T IVP_Actuator::~IVP_Actuator()
 T IVP_Actuator_Force::IVP_Actuator_Force(IVP_Environment*, IVP_Template_Force*)
 T IVP_Actuator_Force::do_simulation_controller(IVP_Event_Sim*, IVP_U_Vector<IVP_Core>*)
 T IVP_Actuator_Force::get_controller_name()
 T IVP_Actuator_Force::set_force(double)
 T IVP_Actuator_Force::~IVP_Actuator_Force()
 T IVP_Actuator_Force_Active::IVP_Actuator_Force_Active(IVP_Environment*, IVP_Template_Force*)
 T IVP_Actuator_Force_Active::active_float_changed(IVP_U_Active_Float*)
 T IVP_Actuator_Force_Active::~IVP_Actuator_Force_Active()
 T IVP_Actuator_Four_Point::IVP_Actuator_Four_Point(IVP_Environment*, IVP_Template_Four_Point*, IVP_ACTUATOR_TYPE)
 T IVP_Actuator_Four_Point::~IVP_Actuator_Four_Point()
 T IVP_Actuator_Spring::IVP_Actuator_Spring(IVP_Environment*, IVP_Template_Spring*, IVP_ACTUATOR_TYPE)
 T IVP_Actuator_Spring::do_simulation_controller(IVP_Event_Sim*, IVP_U_Vector<IVP_Core>*)
 T IVP_Actuator_Spring::get_controller_name()
 T IVP_Actuator_Spring::set_constant(double)
 T IVP_Actuator_Spring::set_damp(double)
 T IVP_Actuator_Spring::set_len(double)
 T IVP_Actuator_Spring::~IVP_Actuator_Spring()
 T IVP_Actuator_Spring_Active::IVP_Actuator_Spring_Active(IVP_Environment*, IVP_Template_Spring*)
 T IVP_Actuator_Spring_Active::active_float_changed(IVP_U_Active_Float*)
 T IVP_Actuator_Spring_Active::~IVP_Actuator_Spring_Active()
 T IVP_Actuator_Stabilizer::IVP_Actuator_Stabilizer(IVP_Environment*, IVP_Template_Stabilizer*)
 T IVP_Actuator_Stabilizer::do_simulation_controller(IVP_Event_Sim*, IVP_U_Vector<IVP_Core>*)
 T IVP_Actuator_Stabilizer::get_controller_name()
 T IVP_Actuator_Stabilizer::set_stabi_constant(double)
 T IVP_Actuator_Stabilizer::~IVP_Actuator_Stabilizer()
 T IVP_Actuator_Suspension::IVP_Actuator_Suspension(IVP_Environment*, IVP_Template_Suspension*)
 T IVP_Actuator_Suspension::do_simulation_controller(IVP_Event_Sim*, IVP_U_Vector<IVP_Core>*)
 T IVP_Actuator_Suspension::get_controller_name()
 T IVP_Actuator_Suspension::set_max_body_force(float)
 T IVP_Actuator_Suspension::set_spring_damp_compression(float)
 T IVP_Actuator_Suspension::~IVP_Actuator_Suspension()
 T IVP_Actuator_Torque::IVP_Actuator_Torque(IVP_Environment*, IVP_Template_Torque*)
 T IVP_Actuator_Torque::do_simulation_controller(IVP_Event_Sim*, IVP_U_Vector<IVP_Core>*)
 T IVP_Actuator_Torque::get_controller_name()
 T IVP_Actuator_Torque::set_torque(double)
 T IVP_Actuator_Torque::~IVP_Actuator_Torque()
 T IVP_Actuator_Torque_Active::IVP_Actuator_Torque_Active(IVP_Environment*, IVP_Template_Torque*)
 T IVP_Actuator_Torque_Active::active_float_changed(IVP_U_Active_Float*)
 T IVP_Actuator_Torque_Active::~IVP_Actuator_Torque_Active()
 T IVP_Actuator_Two_Point::IVP_Actuator_Two_Point(IVP_Environment*, IVP_Template_Two_Point*, IVP_ACTUATOR_TYPE)
 T IVP_Actuator_Two_Point::ensure_actuator_in_simulation()
 T IVP_Actuator_Two_Point::~IVP_Actuator_Two_Point()
 T IVP_Anchor::init_anchor(IVP_Actuator*, IVP_Template_Anchor*)
 T IVP_Anchor::object_is_going_to_be_deleted_event(IVP_Real_Object*)
 T IVP_Anomaly_Limits::IVP_Anomaly_Limits(IVP_BOOL)
 T IVP_Anomaly_Limits::environment_will_be_deleted(IVP_Environment*)
 T IVP_Anomaly_Limits::~IVP_Anomaly_Limits()
 T IVP_Anomaly_Manager::IVP_Anomaly_Manager(IVP_BOOL)
 T IVP_Anomaly_Manager::environment_will_be_deleted(IVP_Environment*)
 T IVP_Anomaly_Manager::get_push_speed_penetration(IVP_Real_Object*, IVP_Real_Object*)
 T IVP_Anomaly_Manager::inter_penetration(IVP_Mindist*, IVP_Real_Object*, IVP_Real_Object*, double)
 T IVP_Anomaly_Manager::max_angular_velocity_exceeded(IVP_Anomaly_Limits*, IVP_Core*, IVP_U_Float_Point*)
 T IVP_Anomaly_Manager::max_collision_checks_exceeded(int)
 T IVP_Anomaly_Manager::max_collisions_exceeded_check_freezing(IVP_Anomaly_Limits*, IVP_Core*)
 T IVP_Anomaly_Manager::max_contacts_exceeded_check_freezing(IVP_Core**, int)
 T IVP_Anomaly_Manager::max_velocity_exceeded(IVP_Anomaly_Limits*, IVP_Core*, IVP_U_Float_Point*)
 T IVP_Anomaly_Manager::solve_inter_penetration_simple(IVP_Real_Object*, IVP_Real_Object*, double)
 T IVP_Anomaly_Manager::~IVP_Anomaly_Manager()
 T IVP_Application_Environment::IVP_Application_Environment()
 T IVP_Attacher_To_Cores<IVP_Controller_Buoyancy>::IVP_Attacher_To_Cores(IVP_U_Set_Active<IVP_Core>*)
 T IVP_Attacher_To_Cores<IVP_Controller_Buoyancy>::element_added(IVP_U_Set_Active<IVP_Core>*, IVP_Core*)
 T IVP_Attacher_To_Cores<IVP_Controller_Buoyancy>::element_removed(IVP_U_Set_Active<IVP_Core>*, IVP_Core*)
 T IVP_Attacher_To_Cores<IVP_Controller_Buoyancy>::pset_is_going_to_be_deleted(IVP_U_Set_Active<IVP_Core>*)
 T IVP_Attacher_To_Cores<IVP_Controller_Buoyancy>::~IVP_Attacher_To_Cores()
 T IVP_Attacher_To_Cores_Buoyancy::IVP_Attacher_To_Cores_Buoyancy(IVP_Template_Buoyancy&, IVP_U_Set_Active<IVP_Core>*, IVP_Liquid_Surface_Descriptor*)
 T IVP_Attacher_To_Cores_Buoyancy::get_buoyancy_surface(IVP_Real_Object*)
 T IVP_Attacher_To_Cores_Buoyancy::get_parameters_per_core(IVP_Core*)
 T IVP_Attacher_To_Cores_Buoyancy::~IVP_Attacher_To_Cores_Buoyancy()
 T IVP_Ball::IVP_Ball(IVP_Cluster*, IVP_Template_Ball const*, IVP_Template_Real_Object const*, IVP_U_Quat const*, IVP_U_Point const*)
 T IVP_Ball::~IVP_Ball()
 T IVP_BetterDebugmanager::dprint(IVP_DEBUG_CLASS, char const*, ...)
 T IVP_BetterDebugmanager::is_debug_enabled(IVP_DEBUG_CLASS)
 T IVP_BetterDebugmanager::output_function(IVP_DEBUG_CLASS, char const*)
 T IVP_BetterDebugmanager::~IVP_BetterDebugmanager()
 T IVP_BetterStatisticsmanager::IVP_BetterStatisticsmanager()
 T IVP_BetterStatisticsmanager::~IVP_BetterStatisticsmanager()
 T IVP_Buoyancy_Solver::IVP_Buoyancy_Solver(IVP_Core*, IVP_Controller_Buoyancy*, IVP_Template_Buoyancy const*, IVP_U_Float_Point const*)
 T IVP_Buoyancy_Solver::compute_buoyancy_values_for_one_ball(int const&, float const&, float const&, IVP_U_Float_Hesse const*, IVP_U_Float_Point const*)
 T IVP_Buoyancy_Solver::compute_dampening_values_for_one_ball(int const&, float const&, float const&, IVP_U_Float_Point const*, IVP_U_Float_Point const*, IVP_U_Float_Hesse const*, IVP_U_Float_Hesse const*, IVP_U_Float_Point const*, IVP_U_Float_Point const*)
 T IVP_Buoyancy_Solver::compute_disection_points_with_ball(IVP_U_Float_Hesse const*, IVP_U_Float_Hesse const*, IVP_U_Float_Point const*, float const&, IVP_U_Float_Point*, IVP_U_Float_Point*)
 T IVP_Buoyancy_Solver::compute_forces(IVP_U_Float_Point const*, IVP_U_Float_Hesse const*, IVP_Real_Object*)
 T IVP_Buoyancy_Solver::compute_rotation_and_translation_values_for_one_triangle(IVP_Real_Object*, IVP_Compact_Triangle const*, IVP_U_Float_Point const**, IVP_Compact_Ledge const*, float const*, int const&, int const&, int const&)
 T IVP_Buoyancy_Solver::compute_values_for_one_ball(IVP_Real_Object const*, IVP_U_Float_Hesse const*, IVP_U_Float_Point const*)
 T IVP_Buoyancy_Solver::compute_values_for_one_polygon(IVP_Real_Object*, IVP_U_Float_Hesse const*)
 T IVP_Buoyancy_Solver::compute_values_for_one_triangle(IVP_Real_Object*, IVP_Compact_Triangle const*, IVP_U_Float_Hesse const*, IVP_U_Float_Point const*, IVP_Compact_Ledge const*)
 T IVP_Buoyancy_Solver::compute_volumes_and_centers_for_one_pyramid(IVP_Real_Object*, IVP_U_Float_Point const**, float const*, int const&, int const&, int const&, IVP_U_Float_Point const*)
 T IVP_CFEP_Hash::compare(void*, void*) const
 T IVP_CFEP_Hash::~IVP_CFEP_Hash()
 T IVP_Cache_Object::transform_position_to_object_coords(IVP_U_Point const*, IVP_U_Point*) const
 T IVP_Cache_Object::transform_position_to_world_coords(IVP_U_Float_Point const*, IVP_U_Point*) const
 T IVP_Cache_Object::transform_vector_to_object_coords(IVP_U_Float_Point const*, IVP_U_Float_Point*) const
 T IVP_Cache_Object::transform_vector_to_object_coords(IVP_U_Point const*, IVP_U_Point*) const
 T IVP_Cache_Object::transform_vector_to_world_coords(IVP_U_Float_Point const*, IVP_U_Float_Point*) const
 T IVP_Cache_Object::transform_vector_to_world_coords(IVP_U_Point const*, IVP_U_Point*) const
 T IVP_Cache_Object::update_cache_object()
 T IVP_Cache_Object_Manager::IVP_Cache_Object_Manager(int)
 T IVP_Cache_Object_Manager::get_cache_object(IVP_Real_Object*)
 T IVP_Cache_Object_Manager::invalid_cache_object(IVP_Real_Object*)
 T IVP_Cache_Object_Manager::~IVP_Cache_Object_Manager()
 T IVP_Calc_Next_PSI_Solver::calc_next_PSI_matrix(IVP_Event_Sim*, IVP_U_Vector<IVP_Hull_Manager_Base>*)
 T IVP_Calc_Next_PSI_Solver::calc_psi_rotation_axis(IVP_U_Quat const*)
 T IVP_Calc_Next_PSI_Solver::calc_rotation_matrix(float, IVP_U_Quat*)
 T IVP_Calc_Next_PSI_Solver::commit_all_calc_next_PSI_matrix(IVP_Environment*, IVP_U_Vector<IVP_Core>*, IVP_U_Vector<IVP_Hull_Manager_Base>*)
 T IVP_Calc_Next_PSI_Solver::commit_all_hull_managers(IVP_Environment*, IVP_U_Vector<IVP_Hull_Manager_Base>*)
 T IVP_Calc_Next_PSI_Solver::set_transformation(IVP_U_Quat const*, IVP_U_Point const*, IVP_BOOL)
 T IVP_Car_System::IVP_Car_System()
 T IVP_Car_System::~IVP_Car_System()
 T IVP_Car_System_Real_Wheels::GetCarSystemDebugData(IVP_CarSystemDebugData_t&)
 T IVP_Car_System_Real_Wheels::IVP_Car_System_Real_Wheels(IVP_Environment*, IVP_Template_Car_System*)
 T IVP_Car_System_Real_Wheels::SetCarSystemDebugData(IVP_CarSystemDebugData_t const&)
 T IVP_Car_System_Real_Wheels::activate_booster(float, float, float)
 T IVP_Car_System_Real_Wheels::change_body_downforce(float)
 T IVP_Car_System_Real_Wheels::change_fast_turn_factor(float)
 T IVP_Car_System_Real_Wheels::change_max_body_force(IVP_POS_WHEEL, float)
 T IVP_Car_System_Real_Wheels::change_spring_constant(IVP_POS_WHEEL, float)
 T IVP_Car_System_Real_Wheels::change_spring_dampening(IVP_POS_WHEEL, float)
 T IVP_Car_System_Real_Wheels::change_spring_dampening_compression(IVP_POS_WHEEL, float)
 T IVP_Car_System_Real_Wheels::change_spring_length(IVP_POS_WHEEL, float)
 T IVP_Car_System_Real_Wheels::change_spring_pre_tension(IVP_POS_WHEEL, float)
 T IVP_Car_System_Real_Wheels::change_stabilizer_constant(IVP_POS_AXIS, float)
 T IVP_Car_System_Real_Wheels::change_wheel_torque(IVP_POS_WHEEL, float)
 T IVP_Car_System_Real_Wheels::do_steering(float, bool)
 T IVP_Car_System_Real_Wheels::do_steering_wheel(IVP_POS_WHEEL, float)
 T IVP_Car_System_Real_Wheels::environment_will_be_deleted(IVP_Environment*)
 T IVP_Car_System_Real_Wheels::fix_wheel(IVP_POS_WHEEL, IVP_BOOL)
 T IVP_Car_System_Real_Wheels::get_body_speed(IVP_COORDINATE_INDEX)
 T IVP_Car_System_Real_Wheels::get_booster_delay()
 T IVP_Car_System_Real_Wheels::get_booster_time_to_go()
 T IVP_Car_System_Real_Wheels::get_orig_axles_distance()
 T IVP_Car_System_Real_Wheels::get_orig_front_wheel_distance()
 T IVP_Car_System_Real_Wheels::get_skid_info(IVP_Wheel_Skid_Info*)
 T IVP_Car_System_Real_Wheels::get_wheel_angular_velocity(IVP_POS_WHEEL)
 T IVP_Car_System_Real_Wheels::get_wheel_torque(IVP_POS_WHEEL)
 T IVP_Car_System_Real_Wheels::set_booster_acceleration(float)
 T IVP_Car_System_Real_Wheels::set_powerslide(float, float)
 T IVP_Car_System_Real_Wheels::update_body_countertorque()
 T IVP_Car_System_Real_Wheels::update_booster(float)
 T IVP_Car_System_Real_Wheels::update_throttle(float)
 T IVP_Car_System_Real_Wheels::update_wheel_positions()
 T IVP_Car_System_Real_Wheels::~IVP_Car_System_Real_Wheels()
 T IVP_Cluster::IVP_Cluster(IVP_Environment*)
 T IVP_Cluster::~IVP_Cluster()
 T IVP_Cluster_Manager::IVP_Cluster_Manager(IVP_Environment*)
 T IVP_Cluster_Manager::add_listener_object(IVP_Real_Object*, IVP_Listener_Object*)
 T IVP_Cluster_Manager::add_object(IVP_Real_Object*)
 T IVP_Cluster_Manager::check_for_unused_objects(IVP_Universe_Manager*)
 T IVP_Cluster_Manager::fire_event_collision_object_deleted(IVP_Real_Object*)
 T IVP_Cluster_Manager::fire_event_friction_created(IVP_Real_Object*, IVP_Event_Friction*)
 T IVP_Cluster_Manager::fire_event_friction_deleted(IVP_Real_Object*, IVP_Event_Friction*)
 T IVP_Cluster_Manager::fire_event_object_deleted(IVP_Event_Object*)
 T IVP_Cluster_Manager::fire_event_post_collision(IVP_Real_Object*, IVP_Event_Collision*)
 T IVP_Cluster_Manager::fire_event_pre_collision(IVP_Real_Object*, IVP_Event_Collision*)
 T IVP_Cluster_Manager::get_root_cluster()
 T IVP_Cluster_Manager::remove_listener_object(IVP_Real_Object*, IVP_Listener_Object*)
 T IVP_Cluster_Manager::remove_object(IVP_Real_Object*)
 T IVP_Cluster_Manager::~IVP_Cluster_Manager()
 T IVP_Collision::delegator_is_going_to_be_deleted_event(IVP_Collision_Delegator*)
 T IVP_Collision::~IVP_Collision()
 T IVP_Collision_Callback_Table::~IVP_Collision_Callback_Table()
 T IVP_Collision_Callback_Table_Hash::compare(void*, void*) const
 T IVP_Collision_Callback_Table_Hash::find_table(IVP_Real_Object*)
 T IVP_Collision_Callback_Table_Hash::object_to_index(IVP_Real_Object*)
 T IVP_Collision_Callback_Table_Hash::remove_table(IVP_Real_Object*)
 T IVP_Collision_Callback_Table_Hash::~IVP_Collision_Callback_Table_Hash()
 T IVP_Collision_Delegator::change_spawned_mindist_count(int)
 T IVP_Collision_Delegator::get_spawned_mindist_count()
 T IVP_Collision_Delegator::~IVP_Collision_Delegator()
 T IVP_Collision_Delegator_Root_Mindist::IVP_Collision_Delegator_Root_Mindist()
 T IVP_Collision_Delegator_Root_Mindist::collision_is_going_to_be_deleted_event(IVP_Collision*)
 T IVP_Collision_Delegator_Root_Mindist::delegate_collisions_for_object(IVP_Real_Object*, IVP_Real_Object*)
 T IVP_Collision_Delegator_Root_Mindist::environment_is_going_to_be_deleted_event(IVP_Environment*)
 T IVP_Collision_Delegator_Root_Mindist::object_is_removed_from_collision_detection(IVP_Real_Object*)
 T IVP_Collision_Delegator_Root_Mindist::~IVP_Collision_Delegator_Root_Mindist()
 T IVP_Collision_Filter::~IVP_Collision_Filter()
 T IVP_Collision_Filter_Exclusive_Pair::IVP_Collision_Filter_Exclusive_Pair()
 T IVP_Collision_Filter_Exclusive_Pair::check_objects_for_collision_detection(IVP_Real_Object*, IVP_Real_Object*)
 T IVP_Collision_Filter_Exclusive_Pair::disable_collision_between_objects(IVP_Real_Object*, IVP_Real_Object*)
 T IVP_Collision_Filter_Exclusive_Pair::enable_collision_between_objects(IVP_Real_Object*, IVP_Real_Object*)
 T IVP_Collision_Filter_Exclusive_Pair::environment_will_be_deleted(IVP_Environment*)
 T IVP_Collision_Filter_Exclusive_Pair::~IVP_Collision_Filter_Exclusive_Pair()
 T IVP_Compact_Ledge::c_ledge_init()
 T IVP_Compact_Ledge_Find_Mass_Center::integrate_triangle(IVP_Compact_Ledge const*, IVP_Compact_Triangle const*)
 T IVP_Compact_Ledge_Generator::IVP_Compact_Ledge_Generator()
 T IVP_Compact_Ledge_Generator::generate_compact_ledge(unsigned char*)
 T IVP_Compact_Ledge_Generator::prepare_compact_ledge(IVP_U_Vector<IVP_Triangle>*)
 T IVP_Compact_Ledge_Generator::~IVP_Compact_Ledge_Generator()
 T IVP_Compact_Ledge_Mass_Center_Solver::integrate_triangle(IVP_Compact_Ledge const*, IVP_Compact_Triangle const*, int, int, int)
 T IVP_Compact_Ledge_Solver::calc_bounding_box(IVP_Compact_Ledge const*, IVP_U_Point*, IVP_U_Point*)
 T IVP_Compact_Ledge_Solver::calc_hesse_object(IVP_Compact_Edge const*, IVP_Compact_Ledge const*, IVP_U_Hesse*)
 T IVP_Compact_Ledge_Solver::calc_hesse_vec_object_not_normized(IVP_Compact_Edge const*, IVP_Compact_Ledge const*, IVP_U_Float_Point*)
 T IVP_Compact_Ledge_Solver::calc_hesse_vec_object_not_normized(IVP_Compact_Edge const*, IVP_Compact_Ledge const*, IVP_U_Point*)
 T IVP_Compact_Ledge_Solver::calc_pos_other_space(IVP_Compact_Edge const*, IVP_Cache_Ledge_Point*, IVP_Cache_Ledge_Point*, IVP_U_Point*)
 T IVP_Compact_Ledge_Solver::calc_qlen_KK(IVP_Compact_Edge const*, IVP_Compact_Edge const*, IVP_Cache_Ledge_Point*, IVP_Cache_Ledge_Point*)
 T IVP_Compact_Ledge_Solver::calc_qlen_PF_F_space(IVP_Compact_Ledge const*, IVP_Compact_Triangle const*, IVP_U_Point const*)
 T IVP_Compact_Ledge_Solver::calc_qlen_PK_K_space(IVP_U_Point const*, IVP_Compact_Ledge const*, IVP_Compact_Edge const*)
 T IVP_Compact_Ledge_Solver::calc_radius_to_given_center(IVP_Compact_Ledge const*, IVP_U_Point const*, double*, double*)
 T IVP_Compact_Ledge_Solver::calc_radius_to_given_center(IVP_Compact_Surface const*, IVP_U_Point const*, double*, double*)
 T IVP_Compact_Ledge_Solver::calc_unscaled_KK_vals(IVP_KK_Input const&, IVP_Unscaled_KK_Result*)
 T IVP_Compact_Ledge_Solver::calc_unscaled_qr_vals_F_space(IVP_Compact_Ledge const*, IVP_Compact_Edge const*, IVP_U_Point const*, IVP_Unscaled_QR_Result*)
 T IVP_Compact_Ledge_Solver::calc_unscaled_s_val_K_space(IVP_Compact_Ledge const*, IVP_Compact_Edge const*, IVP_U_Point const*, IVP_Unscaled_S_Result*)
 T IVP_Compact_Ledge_Solver::get_all_ledges(IVP_Compact_Ledgetree_Node const*, IVP_U_BigVector<IVP_Compact_Ledge>*)
 T IVP_Compact_Ledge_Solver::get_all_ledges(IVP_Compact_Surface const*, IVP_U_BigVector<IVP_Compact_Ledge>*)
 T IVP_Compact_Ledge_Solver::give_world_coords_AT(IVP_Compact_Edge const*, IVP_Cache_Ledge_Point*, IVP_U_Point*)
 T IVP_Compact_Ledge_Solver::minimize_on_other_side(IVP_Compact_Edge const*, IVP_U_Point const*)
 T IVP_Compact_Ledge_Solver::quad_dist_edge_to_point_K_space(IVP_Compact_Ledge const*, IVP_Compact_Edge const*, IVP_U_Point const*)
 T IVP_Compact_Ledge_Solver::transform_pos_other_space(IVP_U_Float_Point const*, IVP_Cache_Ledge_Point*, IVP_Cache_Ledge_Point*, IVP_U_Point*)
 T IVP_Compact_Ledgetree_Node::byte_swap_all(IVP_U_BigVector<IVP_Compact_Poly_Point>*)
 T IVP_Compact_Recursive::IVP_Compact_Recursive()
 T IVP_Compact_Recursive::add_compact_ledge(IVP_Compact_Ledge const*)
 T IVP_Compact_Recursive::build_convex_hull()
 T IVP_Compact_Recursive::compile()
 T IVP_Compact_Recursive::set_rekursive_convex_hull()
 T IVP_Compact_Recursive::~IVP_Compact_Recursive()
 T IVP_Compact_Surface::byte_swap_all(IVP_BOOL, int)
 T IVP_Compact_Triangle::IVP_Compact_Triangle()
 T IVP_Constraint::IVP_Constraint()
 T IVP_Constraint::activate()
 T IVP_Constraint::change_Aos_to_relaxe_constraint()
 T IVP_Constraint::change_Ros_to_relaxe_constraint()
 T IVP_Constraint::change_fixing_point_Ros(IVP_U_Point const*)
 T IVP_Constraint::change_max_rotation_impulse(IVP_CONSTRAINT_FORCE_EXCEED, float)
 T IVP_Constraint::change_max_translation_impulse(IVP_CONSTRAINT_FORCE_EXCEED, float)
 T IVP_Constraint::change_rotation_axes_Ros(IVP_U_Matrix3 const*)
 T IVP_Constraint::change_target_fixing_point_Ros(IVP_U_Point const*)
 T IVP_Constraint::change_target_rotation_axes_Ros(IVP_U_Matrix3 const*)
 T IVP_Constraint::change_target_translation_axes_Ros(IVP_U_Matrix3 const*)
 T IVP_Constraint::change_translation_axes_Ros(IVP_U_Matrix3 const*)
 T IVP_Constraint::core_is_going_to_be_deleted_event(IVP_Core*)
 T IVP_Constraint::deactivate()
 T IVP_Constraint::fix_rotation_axis(IVP_COORDINATE_INDEX)
 T IVP_Constraint::fix_translation_axis(IVP_COORDINATE_INDEX)
 T IVP_Constraint::free_rotation_axis(IVP_COORDINATE_INDEX)
 T IVP_Constraint::free_translation_axis(IVP_COORDINATE_INDEX)
 T IVP_Constraint::get_associated_controlled_cores()
 T IVP_Constraint::get_controller_priority()
 T IVP_Constraint::get_environment()
 T IVP_Constraint::get_minimum_simulation_frequency()
 T IVP_Constraint::limit_rotation_axis(IVP_COORDINATE_INDEX, float, float)
 T IVP_Constraint::limit_translation_axis(IVP_COORDINATE_INDEX, float, float)
 T IVP_Constraint::~IVP_Constraint()
 T IVP_Constraint_Car_Object::IVP_Constraint_Car_Object(IVP_Constraint_Solver_Car*, IVP_Real_Object*, IVP_Real_Object*, IVP_U_Float_Point*)
 T IVP_Constraint_Local::IVP_Constraint_Local(IVP_Template_Constraint const&)
 T IVP_Constraint_Local::change_Aos_to_relaxe_constraint()
 T IVP_Constraint_Local::change_Ros_to_relaxe_constraint()
 T IVP_Constraint_Local::change_fixing_point_Ros(IVP_U_Point const*)
 T IVP_Constraint_Local::change_max_rotation_impulse(IVP_CONSTRAINT_FORCE_EXCEED, float)
 T IVP_Constraint_Local::change_max_translation_impulse(IVP_CONSTRAINT_FORCE_EXCEED, float)
 T IVP_Constraint_Local::change_rotation_axes_Ros(IVP_U_Matrix3 const*)
 T IVP_Constraint_Local::change_target_fixing_point_Ros(IVP_U_Point const*)
 T IVP_Constraint_Local::change_target_rotation_axes_Ros(IVP_U_Matrix3 const*)
 T IVP_Constraint_Local::change_target_translation_axes_Ros(IVP_U_Matrix3 const*)
 T IVP_Constraint_Local::change_translation_axes_Ros(IVP_U_Matrix3 const*)
 T IVP_Constraint_Local::core_is_going_to_be_deleted_event(IVP_Core*)
 T IVP_Constraint_Local::do_simulation_controller(IVP_Event_Sim*, IVP_U_Vector<IVP_Core>*)
 T IVP_Constraint_Local::fix_rotation_axis(IVP_COORDINATE_INDEX)
 T IVP_Constraint_Local::fix_translation_axis(IVP_COORDINATE_INDEX)
 T IVP_Constraint_Local::free_rotation_axis(IVP_COORDINATE_INDEX)
 T IVP_Constraint_Local::free_translation_axis(IVP_COORDINATE_INDEX)
 T IVP_Constraint_Local::init(IVP_Template_Constraint const&)
 T IVP_Constraint_Local::limit_rotation_axis(IVP_COORDINATE_INDEX, float, float)
 T IVP_Constraint_Local::limit_translation_axis(IVP_COORDINATE_INDEX, float, float)
 T IVP_Constraint_Local::sort_rotation_mapping()
 T IVP_Constraint_Local::sort_translation_mapping()
 T IVP_Constraint_Local::~IVP_Constraint_Local()
 T IVP_Constraint_Solver_Car::IVP_Constraint_Solver_Car(IVP_COORDINATE_INDEX, IVP_COORDINATE_INDEX, IVP_COORDINATE_INDEX, IVP_BOOL)
 T IVP_Constraint_Solver_Car::core_is_going_to_be_deleted_event(IVP_Core*)
 T IVP_Constraint_Solver_Car::do_simulation_controller(IVP_Event_Sim*, IVP_U_Vector<IVP_Core>*)
 T IVP_Constraint_Solver_Car::do_simulation_controller_rotation(IVP_Event_Sim*, IVP_Core*, IVP_U_Matrix const*)
 T IVP_Constraint_Solver_Car::get_associated_controlled_cores()
 T IVP_Constraint_Solver_Car::get_controller_name()
 T IVP_Constraint_Solver_Car::get_controller_priority()
 T IVP_Constraint_Solver_Car::get_minimum_simulation_frequency()
 T IVP_Constraint_Solver_Car::init_constraint_system(IVP_Environment*, IVP_Real_Object*, IVP_U_Vector<IVP_Real_Object>&, IVP_U_Vector<IVP_U_Float_Point>&)
 T IVP_Constraint_Solver_Car::~IVP_Constraint_Solver_Car()
 T IVP_Constraint_Solver_Car_Builder::calc_constraint_matrix()
 T IVP_Constraint_Solver_Car_Builder::calc_pushing_behavior(int, int)
 T IVP_Contact_Point::IVP_Contact_Point(IVP_Mindist*)
 T IVP_Contact_Point::calc_coll_distance()
 T IVP_Contact_Point::calc_virtual_mass_of_mindist()
 T IVP_Contact_Point::friction_force_local_constraint_1d(IVP_Event_Sim const*)
 T IVP_Contact_Point::friction_force_local_constraint_2d(IVP_Event_Sim const*)
 T IVP_Contact_Point::friction_force_local_constraint_2d_wheel(IVP_Core*, IVP_Impact_Solver_Long_Term*, IVP_Event_Sim const*, float&)
 T IVP_Contact_Point::get_and_set_real_friction_len(IVP_U_Float_Point*)
 T IVP_Contact_Point::get_contact_normal(IVP_U_Float_Point*)
 T IVP_Contact_Point::get_material_info(IVP_Material**)
 T IVP_Contact_Point::get_rot_speed_uncertainty()
 T IVP_Contact_Point::is_same_as(IVP_Mindist const*) const
 T IVP_Contact_Point::p_calc_friction_qr_PF(IVP_U_Point const*, IVP_Compact_Edge const*, IVP_Cache_Ledge_Point*, IVP_Impact_Solver_Long_Term*, IVP_U_Float_Point*)
 T IVP_Contact_Point::p_calc_friction_s_PK(IVP_U_Point const*, IVP_Compact_Edge const*, IVP_Cache_Ledge_Point*, IVP_Impact_Solver_Long_Term*, IVP_U_Float_Point*)
 T IVP_Contact_Point::p_calc_friction_ss_KK(IVP_Compact_Edge const*, IVP_Compact_Edge const*, IVP_Cache_Ledge_Point*, IVP_Cache_Ledge_Point*, IVP_Impact_Solver_Long_Term*, IVP_U_Float_Point*)
 T IVP_Contact_Point::read_materials_for_contact_situation(IVP_Impact_Solver_Long_Term*)
 T IVP_Contact_Point::recalc_friction_s_vals()
 T IVP_Contact_Point::recompute_friction()
 T IVP_Contact_Point::reset_time(IVP_Time)
 T IVP_Contact_Point::set_friction_to_neutral()
 T IVP_Contact_Point::static_friction_single(IVP_Event_Sim const*, float, float)
 T IVP_Contact_Point::two_values_friction(IVP_U_Float_Point*)
 T IVP_Contact_Point::~IVP_Contact_Point()
 T IVP_Contact_Point_API::get_eliminated_energy(IVP_Contact_Point*)
 T IVP_Contact_Point_API::get_surface_normal_ws(IVP_Contact_Point*, IVP_U_Float_Point*)
 T IVP_Contact_Point_API::get_vert_force(IVP_Contact_Point*)
 T IVP_Contact_Point_API::reset_eliminated_energy(IVP_Contact_Point*)
 T IVP_Controller::core_is_going_to_be_deleted_event(IVP_Core*)
 T IVP_Controller::get_controller_name()
 T IVP_Controller::get_minimum_simulation_frequency()
 T IVP_Controller::reset_time(IVP_Time)
 T IVP_Controller::~IVP_Controller()
 T IVP_Controller_Buoyancy::IVP_Controller_Buoyancy(IVP_Attacher_To_Cores<IVP_Controller_Buoyancy>*, IVP_Core*)
 T IVP_Controller_Buoyancy::apply_buoyancy_impulse(IVP_Real_Object*, IVP_Template_Buoyancy*, double, float, IVP_U_Float_Point*)
 T IVP_Controller_Buoyancy::apply_dampening(IVP_Real_Object*, float, double, IVP_U_Float_Point*, IVP_U_Float_Point*, IVP_U_Float_Point*)
 T IVP_Controller_Buoyancy::core_is_going_to_be_deleted_event(IVP_Core*)
 T IVP_Controller_Buoyancy::do_simulation_controller(IVP_Event_Sim*, IVP_U_Vector<IVP_Core>*)
 T IVP_Controller_Buoyancy::get_controller_name()
 T IVP_Controller_Buoyancy::get_controller_priority()
 T IVP_Controller_Buoyancy::get_minimum_simulation_frequency()
 T IVP_Controller_Buoyancy::use_buoyancy_solver(IVP_Buoyancy_Input const*, IVP_Template_Buoyancy const*, IVP_Buoyancy_Output*, IVP_U_Float_Point const*, int)
 T IVP_Controller_Buoyancy::~IVP_Controller_Buoyancy()
 T IVP_Controller_Independent::get_associated_controlled_cores()
 T IVP_Controller_Manager::add_controller_to_core(IVP_Controller_Independent*, IVP_Core*)
 T IVP_Controller_Manager::announce_controller_to_environment(IVP_Controller_Dependent*)
 T IVP_Controller_Manager::ensure_controller_in_simulation(IVP_Controller_Dependent*)
 T IVP_Controller_Manager::ensure_core_in_simulation(IVP_Core*)
 T IVP_Controller_Manager::remove_controller_from_core(IVP_Controller_Independent*, IVP_Core*)
 T IVP_Controller_Manager::remove_controller_from_environment(IVP_Controller_Dependent*, IVP_BOOL)
 T IVP_Controller_Phantom::IVP_Controller_Phantom(IVP_Real_Object*, IVP_Template_Phantom const*)
 T IVP_Controller_Phantom::add_listener_phantom(IVP_Listener_Phantom*)
 T IVP_Controller_Phantom::event_object_created(IVP_Event_Object*)
 T IVP_Controller_Phantom::event_object_deleted(IVP_Event_Object*)
 T IVP_Controller_Phantom::event_object_frozen(IVP_Event_Object*)
 T IVP_Controller_Phantom::event_object_revived(IVP_Event_Object*)
 T IVP_Controller_Phantom::mindist_entered_volume(IVP_Mindist*)
 T IVP_Controller_Phantom::mindist_left_volume(IVP_Mindist*)
 T IVP_Controller_Phantom::remove_listener_phantom(IVP_Listener_Phantom*)
 T IVP_Controller_Phantom::wake_all_sleeping_objects()
 T IVP_Controller_Phantom::~IVP_Controller_Phantom()
 T IVP_Controller_Raycast_Car::ApplySteeringForces(IVP_Raycast_Car_Wheel_Temp*, IVP_Core*, IVP_Event_Sim*, float*)
 T IVP_Controller_Raycast_Car::CalcSteeringForces(IVP_Raycast_Car_Wheel_Temp*, IVP_Core*, IVP_Event_Sim*, float*)
 T IVP_Controller_Raycast_Car::DoSimulationBooster(IVP_Event_Sim*, IVP_Core*)
 T IVP_Controller_Raycast_Car::DoSimulationShocks(IVP_Raycast_Car_Wheel_Temp*, IVP_Ray_Hit*, IVP_Event_Sim*, IVP_Core*)
 T IVP_Controller_Raycast_Car::DoSimulationStabilizers(IVP_Raycast_Car_Wheel_Temp*)
 T IVP_Controller_Raycast_Car::DoSimulationWheels(IVP_Ray_Solver_Template*, IVP_U_Matrix const*, IVP_Raycast_Car_Wheel_Temp*, IVP_Ray_Hit*, float*, IVP_Core*)
 T IVP_Controller_Raycast_Car::GetCarSystemDebugData(IVP_CarSystemDebugData_t&)
 T IVP_Controller_Raycast_Car::IVP_Controller_Raycast_Car(IVP_Environment*, IVP_Template_Car_System const*)
 T IVP_Controller_Raycast_Car::InitRaycastCarWheels(IVP_Template_Car_System const*)
 T IVP_Controller_Raycast_Car::SetCarSystemDebugData(IVP_CarSystemDebugData_t const&)
 T IVP_Controller_Raycast_Car::SetupWheelRaycasts(IVP_Ray_Solver_Template*, IVP_U_Matrix const*, IVP_Raycast_Car_Wheel_Temp*)
 T IVP_Controller_Raycast_Car::activate_booster(float, float, float)
 T IVP_Controller_Raycast_Car::change_body_downforce(float)
 T IVP_Controller_Raycast_Car::change_fast_turn_factor(float)
 T IVP_Controller_Raycast_Car::change_max_body_force(IVP_POS_WHEEL, float)
 T IVP_Controller_Raycast_Car::change_spring_constant(IVP_POS_WHEEL, float)
 T IVP_Controller_Raycast_Car::change_spring_dampening(IVP_POS_WHEEL, float)
 T IVP_Controller_Raycast_Car::change_spring_dampening_compression(IVP_POS_WHEEL, float)
 T IVP_Controller_Raycast_Car::change_spring_length(IVP_POS_WHEEL, float)
 T IVP_Controller_Raycast_Car::change_spring_pre_tension(IVP_POS_WHEEL, float)
 T IVP_Controller_Raycast_Car::change_stabilizer_constant(IVP_POS_AXIS, float)
 T IVP_Controller_Raycast_Car::change_wheel_torque(IVP_POS_WHEEL, float)
 T IVP_Controller_Raycast_Car::core_is_going_to_be_deleted_event(IVP_Core*)
 T IVP_Controller_Raycast_Car::do_simulation_controller(IVP_Event_Sim*, IVP_U_Vector<IVP_Core>*)
 T IVP_Controller_Raycast_Car::do_steering(float, bool)
 T IVP_Controller_Raycast_Car::do_steering_wheel(IVP_POS_WHEEL, float)
 T IVP_Controller_Raycast_Car::fix_wheel(IVP_POS_WHEEL, IVP_BOOL)
 T IVP_Controller_Raycast_Car::get_associated_controlled_cores()
 T IVP_Controller_Raycast_Car::get_body_speed(IVP_COORDINATE_INDEX)
 T IVP_Controller_Raycast_Car::get_booster_delay()
 T IVP_Controller_Raycast_Car::get_booster_time_to_go()
 T IVP_Controller_Raycast_Car::get_controller_priority()
 T IVP_Controller_Raycast_Car::get_orig_axles_distance()
 T IVP_Controller_Raycast_Car::get_orig_front_wheel_distance()
 T IVP_Controller_Raycast_Car::get_skid_info(IVP_Wheel_Skid_Info*)
 T IVP_Controller_Raycast_Car::get_wheel_angular_velocity(IVP_POS_WHEEL)
 T IVP_Controller_Raycast_Car::get_wheel_torque(IVP_POS_WHEEL)
 T IVP_Controller_Raycast_Car::set_booster_acceleration(float)
 T IVP_Controller_Raycast_Car::set_powerslide(float, float)
 T IVP_Controller_Raycast_Car::update_body_countertorque()
 T IVP_Controller_Raycast_Car::update_booster(float)
 T IVP_Controller_Raycast_Car::update_throttle(float)
 T IVP_Controller_Raycast_Car::~IVP_Controller_Raycast_Car()
 T IVP_Core::IVP_Core(IVP_Real_Object*, IVP_U_Quat const*, IVP_U_Point const*, IVP_BOOL, IVP_BOOL)
 T IVP_Core::abort_all_async_pushes()
 T IVP_Core::add_core_controller(IVP_Controller*)
 T IVP_Core::add_friction_info(IVP_Friction_Info_For_Core*)
 T IVP_Core::apply_velocity_limit()
 T IVP_Core::async_push_core(IVP_U_Float_Point const*, IVP_U_Float_Point const*, IVP_U_Float_Point const*)
 T IVP_Core::async_push_core_ws(IVP_U_Point const*, IVP_U_Float_Point const*)
 T IVP_Core::async_rot_push_core_multiple_cs(IVP_U_Float_Point const*, double)
 T IVP_Core::async_rot_push_core_multiple_ws(IVP_U_Float_Point const*, double)
 T IVP_Core::calc_at_matrix(IVP_Time, IVP_U_Matrix*) const
 T IVP_Core::calc_calc()
 T IVP_Core::calc_correct_virt_mass(IVP_U_Float_Point const*, IVP_U_Float_Point const*, IVP_U_Float_Point const*) const
 T IVP_Core::calc_movement_state(IVP_Time)
 T IVP_Core::calc_next_PSI_matrix_zero_speed(IVP_Event_Sim*)
 T IVP_Core::calc_virt_mass(IVP_U_Float_Point const*, IVP_U_Float_Point const*) const
 T IVP_Core::calc_virt_mass_worst_case(IVP_U_Float_Point const*) const
 T IVP_Core::center_push_core_multiple_ws(IVP_U_Float_Point const*, double)
 T IVP_Core::commit_all_async_pushes()
 T IVP_Core::damp_object(double, IVP_U_Float_Point const*, double)
 T IVP_Core::delete_friction_info(IVP_Friction_Info_For_Core*)
 T IVP_Core::ensure_core_to_be_in_simulation()
 T IVP_Core::fire_event_object_frozen()
 T IVP_Core::freeze_simulation_core()
 T IVP_Core::get_diff_surface_speed_of_two_cores(IVP_Core const*, IVP_Core const*, IVP_U_Float_Point const*, IVP_U_Float_Point const*, IVP_U_Float_Point*)
 T IVP_Core::get_diff_surface_speed_of_two_cores_on_test(IVP_Core const*, IVP_Core const*, IVP_U_Float_Point const*, IVP_U_Float_Point const*, IVP_U_Float_Point const*, IVP_U_Float_Point const*, IVP_U_Float_Point const*, IVP_U_Float_Point const*, IVP_U_Float_Point*)
 T IVP_Core::get_energy_on_test(IVP_U_Float_Point const*, IVP_U_Float_Point const*)
 T IVP_Core::get_friction_info(IVP_Friction_System*)
 T IVP_Core::get_rot_speed_cs(IVP_U_Float_Point const*)
 T IVP_Core::get_surface_speed(IVP_U_Float_Point const*, IVP_U_Float_Point*) const
 T IVP_Core::get_surface_speed_on_test(IVP_U_Float_Point const*, IVP_U_Float_Point const*, IVP_U_Float_Point const*, IVP_U_Float_Point*) const
 T IVP_Core::get_surface_speed_ws(IVP_U_Point const*, IVP_U_Float_Point*)
 T IVP_Core::global_damp_core(double)
 T IVP_Core::grow_friction_system()
 T IVP_Core::init(IVP_Real_Object*, bool)
 T IVP_Core::init_core_for_simulation()
 T IVP_Core::moveable_core_has_friction_info()
 T IVP_Core::push_core(IVP_U_Float_Point const*, IVP_U_Float_Point const*, IVP_U_Float_Point const*)
 T IVP_Core::push_core_ws(IVP_U_Point const*, IVP_U_Float_Point const*)
 T IVP_Core::rem_core_controller(IVP_Controller*)
 T IVP_Core::reset_freeze_check_values()
 T IVP_Core::reset_time(IVP_Time)
 T IVP_Core::revive_adjacent_to_unmoveable()
 T IVP_Core::revive_simulation_core()
 T IVP_Core::rot_push_core_cs(IVP_U_Float_Point const*)
 T IVP_Core::rot_push_core_multiple_cs(IVP_U_Float_Point const*, double)
 T IVP_Core::set_mass(float)
 T IVP_Core::set_radius(float, float)
 T IVP_Core::set_rotation_inertia(IVP_U_Float_Point const*)
 T IVP_Core::stop_physical_movement()
 T IVP_Core::synchronize_with_rot_z()
 T IVP_Core::test_push_core(IVP_U_Float_Point const*, IVP_U_Float_Point const*, IVP_U_Float_Point const*, IVP_U_Float_Point*, IVP_U_Float_Point*) const
 T IVP_Core::test_rot_push_core_multiple_cs(IVP_U_Float_Point const*, double, IVP_U_Float_Point*)
 T IVP_Core::transform_PSI_matrizes_core(IVP_U_Matrix const*)
 T IVP_Core::undo_synchronize_rot_z()
 T IVP_Core::union_find_get_father()
 T IVP_Core::unlink_friction_info(IVP_Friction_Info_For_Core*)
 T IVP_Core::unlink_obj_from_core_and_maybe_destroy(IVP_Real_Object*)
 T IVP_Core::update_exact_mindist_events_of_core()
 T IVP_Core::values_changed_recalc_redundants()
 T IVP_Core::~IVP_Core()
 T IVP_Diff_Hash<IVP_MM_CMP, IVP_U_FVector<IVP_Collision>, IVP_Collision, IVP_MM_CMP_Key>::IVP_Diff_Hash(IVP_U_FVector<IVP_Collision>*, short*, int, IVP_MM_CMP_Key*)
 T IVP_Diff_Hash<IVP_MM_CMP, IVP_U_FVector<IVP_Collision>, IVP_Collision, IVP_MM_CMP_Key>::check_element(IVP_MM_CMP_Key*, IVP_MM_CMP_Key*)
 T IVP_Diff_Hash<IVP_OO_CMP, IVP_U_FVector<IVP_Collision>, IVP_Collision, IVP_Real_Object>::IVP_Diff_Hash(IVP_U_FVector<IVP_Collision>*, short*, int, IVP_Real_Object*)
 T IVP_Diff_Hash<IVP_OO_CMP, IVP_U_FVector<IVP_Collision>, IVP_Collision, IVP_Real_Object>::check_element(IVP_Real_Object*, IVP_Real_Object*)
 T IVP_Environment::IVP_Environment(IVP_Environment_Manager*, IVP_Application_Environment*, char const*, unsigned int)
 T IVP_Environment::add_listener_collision_global(IVP_Listener_Collision*)
 T IVP_Environment::add_listener_constraint_global(IVP_Listener_Constraint*)
 T IVP_Environment::add_listener_object_global(IVP_Listener_Object*)
 T IVP_Environment::add_revive_core(IVP_Core*)
 T IVP_Environment::create_ball(IVP_Template_Ball const*, IVP_Template_Real_Object const*, IVP_U_Quat const*, IVP_U_Point const*)
 T IVP_Environment::create_constraint(IVP_Template_Constraint const*)
 T IVP_Environment::create_force(IVP_Template_Force*)
 T IVP_Environment::create_polygon(IVP_SurfaceManager*, IVP_Template_Real_Object const*, IVP_U_Quat const*, IVP_U_Point const*)
 T IVP_Environment::create_spring(IVP_Template_Spring*)
 T IVP_Environment::create_stabilizer(IVP_Template_Stabilizer*)
 T IVP_Environment::create_suspension(IVP_Template_Suspension*)
 T IVP_Environment::create_torque(IVP_Template_Torque*)
 T IVP_Environment::fire_event_constraint_broken(IVP_Constraint*)
 T IVP_Environment::fire_event_constraint_broken(hk_Breakable_Constraint*)
 T IVP_Environment::fire_event_friction_created(IVP_Event_Friction*)
 T IVP_Environment::fire_event_friction_deleted(IVP_Event_Friction*)
 T IVP_Environment::fire_event_friction_pair_created(IVP_Friction_Core_Pair*)
 T IVP_Environment::fire_event_friction_pair_deleted(IVP_Friction_Core_Pair*)
 T IVP_Environment::fire_event_object_created(IVP_Event_Object*)
 T IVP_Environment::fire_event_object_deleted(IVP_Event_Object*)
 T IVP_Environment::fire_event_object_frozen(IVP_Event_Object*)
 T IVP_Environment::fire_event_object_revived(IVP_Event_Object*)
 T IVP_Environment::fire_event_post_collision(IVP_Event_Collision*)
 T IVP_Environment::fire_event_pre_collision(IVP_Event_Collision*)
 T IVP_Environment::fire_object_is_removed_from_collision_detection(IVP_Real_Object*)
 T IVP_Environment::force_psi_on_next_simulation()
 T IVP_Environment::get_global_collision_tolerance()
 T IVP_Environment::remove_listener_collision_global(IVP_Listener_Collision*)
 T IVP_Environment::remove_listener_constraint_global(IVP_Listener_Constraint*)
 T IVP_Environment::remove_listener_object_global(IVP_Listener_Object*)
 T IVP_Environment::remove_revive_core(IVP_Core*)
 T IVP_Environment::reset_time()
 T IVP_Environment::revive_cores_PSI()
 T IVP_Environment::set_current_time(IVP_Time)
 T IVP_Environment::set_delta_PSI_time(double)
 T IVP_Environment::set_global_collision_tolerance(double, double)
 T IVP_Environment::set_gravity(IVP_U_Point*)
 T IVP_Environment::simulate_dtime(double)
 T IVP_Environment::simulate_psi(IVP_Time)
 T IVP_Environment::simulate_time_step(float)
 T IVP_Environment::~IVP_Environment()
 T IVP_Environment_Manager::create_environment(IVP_Application_Environment*, char const*, unsigned int)
 T IVP_Environment_Manager::get_environment_manager()
 T IVP_Environment_Manager::~IVP_Environment_Manager()
 T IVP_Event_Manager::simulate_variable_time_step(IVP_Time_Manager*, IVP_Environment*, IVP_Time_Event_PSI*, float)
 T IVP_Event_Manager_Standard::simulate_time_events(IVP_Time_Manager*, IVP_Environment*, IVP_Time)
 T IVP_Event_Manager_Standard::~IVP_Event_Manager_Standard()
 T IVP_Friction_Core_Pair::IVP_Friction_Core_Pair()
 T IVP_Friction_Core_Pair::add_fr_dist_obj_pairs(IVP_Contact_Point*)
 T IVP_Friction_Core_Pair::check_all_fr_mindists_to_be_valid(IVP_Friction_System*)
 T IVP_Friction_Core_Pair::del_fr_dist_obj_pairs(IVP_Contact_Point*)
 T IVP_Friction_Core_Pair::destroy_mutual_energy(double)
 T IVP_Friction_Core_Pair::number_of_pair_dists()
 T IVP_Friction_Core_Pair::~IVP_Friction_Core_Pair()
 T IVP_Friction_Hash::~IVP_Friction_Hash()
 T IVP_Friction_Info_For_Core::friction_info_insert_friction_dist(IVP_Contact_Point*)
 T IVP_Friction_Manager::generate_contact_point(IVP_Mindist*, IVP_BOOL*)
 T IVP_Friction_Solver::IVP_Friction_Solver(IVP_Friction_System*, IVP_Event_Sim const*)
 T IVP_Friction_Solver::async_apply_impulse(IVP_Impact_Solver_Long_Term const*, double)
 T IVP_Friction_Solver::calc_solver_PSI(IVP_Friction_System*, int*)
 T IVP_Friction_Solver::do_resulting_pushes(IVP_Friction_System*)
 T IVP_Friction_Solver::ease_friction_pair(IVP_Friction_Core_Pair*, IVP_U_Memory*)
 T IVP_Friction_Solver::ease_two_mindists(IVP_Contact_Point*, IVP_Contact_Point*, IVP_U_Float_Point*, IVP_U_Float_Point*, double)
 T IVP_Friction_Solver::normize_constraint_equ()
 T IVP_Friction_Solver::setup_coords_mindists(IVP_Friction_System*)
 T IVP_Friction_Solver::solve_linear_equation_and_push(IVP_Friction_System*, int*, int, IVP_U_Memory*)
 T IVP_Friction_Solver::test_gauss_solution_suggestion(double*, int*, int, IVP_U_Memory*)
 T IVP_Friction_Sys_Energy::core_is_going_to_be_deleted_event(IVP_Core*)
 T IVP_Friction_Sys_Energy::do_simulation_controller(IVP_Event_Sim*, IVP_U_Vector<IVP_Core>*)
 T IVP_Friction_Sys_Energy::get_controller_name()
 T IVP_Friction_Sys_Energy::get_controller_priority()
 T IVP_Friction_Sys_Energy::~IVP_Friction_Sys_Energy()
 T IVP_Friction_Sys_Static::core_is_going_to_be_deleted_event(IVP_Core*)
 T IVP_Friction_Sys_Static::do_simulation_controller(IVP_Event_Sim*, IVP_U_Vector<IVP_Core>*)
 T IVP_Friction_Sys_Static::get_controller_name()
 T IVP_Friction_Sys_Static::get_controller_priority()
 T IVP_Friction_Sys_Static::get_minimum_simulation_frequency()
 T IVP_Friction_Sys_Static::~IVP_Friction_Sys_Static()
 T IVP_Friction_System::IVP_Friction_System(IVP_Environment*)
 T IVP_Friction_System::add_core_to_system(IVP_Core*)
 T IVP_Friction_System::add_dist_to_system(IVP_Contact_Point*)
 T IVP_Friction_System::add_fr_pair(IVP_Friction_Core_Pair*)
 T IVP_Friction_System::bubble_sort_dists_importance()
 T IVP_Friction_System::calc_friction_forces(IVP_Event_Sim const*)
 T IVP_Friction_System::core_is_going_to_be_deleted_event(IVP_Core*)
 T IVP_Friction_System::del_fr_pair(IVP_Friction_Core_Pair*)
 T IVP_Friction_System::delete_friction_distance(IVP_Contact_Point*)
 T IVP_Friction_System::dist_added_update_pair_info(IVP_Contact_Point*)
 T IVP_Friction_System::dist_removed_update_pair_info(IVP_Contact_Point*)
 T IVP_Friction_System::do_friction_system(IVP_Event_Sim const*)
 T IVP_Friction_System::do_simulation_controller(IVP_Event_Sim*, IVP_U_Vector<IVP_Core>*)
 T IVP_Friction_System::find_pair_of_cores(IVP_Core*, IVP_Core*)
 T IVP_Friction_System::fs_recalc_all_contact_points()
 T IVP_Friction_System::fusion_friction_systems(IVP_Friction_System*)
 T IVP_Friction_System::get_associated_controlled_cores()
 T IVP_Friction_System::get_controller_name()
 T IVP_Friction_System::get_controller_priority()
 T IVP_Friction_System::get_minimum_simulation_frequency()
 T IVP_Friction_System::get_pair_info_for_objs(IVP_Core*, IVP_Core*)
 T IVP_Friction_System::kinetic_energy_of_hole_frs()
 T IVP_Friction_System::remove_core_from_system(IVP_Core*)
 T IVP_Friction_System::remove_dist_from_system(IVP_Contact_Point*)
 T IVP_Friction_System::remove_energy_gained_by_real_friction()
 T IVP_Friction_System::reorder_mindists_for_complex()
 T IVP_Friction_System::reset_time(IVP_Time)
 T IVP_Friction_System::split_friction_system(IVP_Core*)
 T IVP_Friction_System::union_find_fr_sys()
 T IVP_Friction_System::~IVP_Friction_System()
 T IVP_Great_Matrix_Many_Zero::IVP_Great_Matrix_Many_Zero()
 T IVP_Great_Matrix_Many_Zero::align_matrix_values()
 T IVP_Great_Matrix_Many_Zero::fill_from_bigger_matrix(IVP_Great_Matrix_Many_Zero*, int*, int)
 T IVP_Great_Matrix_Many_Zero::invert(IVP_Great_Matrix_Many_Zero*)
 T IVP_Great_Matrix_Many_Zero::lu_crout(int*, double*)
 T IVP_Great_Matrix_Many_Zero::lu_solve(int*)
 T IVP_Great_Matrix_Many_Zero::matrix_check_unequation_line(int)
 T IVP_Great_Matrix_Many_Zero::mult()
 T IVP_Great_Matrix_Many_Zero::set_value(double, int, int)
 T IVP_Great_Matrix_Many_Zero::solve_great_matrix_many_zero()
 T IVP_Great_Matrix_Many_Zero::solve_lower_null_matrix()
 T IVP_Great_Matrix_Many_Zero::transform_to_lower_null_triangle()
 T IVP_Halfspacesoup::IVP_Halfspacesoup()
 T IVP_Halfspacesoup::add_halfspace(IVP_U_Hesse const*)
 T IVP_Halfspacesoup::~IVP_Halfspacesoup()
 T IVP_Hash::IVP_Hash(int, int, void*)
 T IVP_Hash::add(char const*, void*)
 T IVP_Hash::find(char const*) const
 T IVP_Hash::~IVP_Hash()
 T IVP_Hull_Manager::delete_hull_manager()
 T IVP_Hull_Manager::get_synapse_check_count(IVP_Environment*)
 T IVP_Hull_Manager::reset_time(IVP_Time)
 T IVP_Hull_Manager::reset_times()
 T IVP_Hull_Manager::too_many_synapses_checked_error_get_additional(IVP_Environment*, int)
 T IVP_Hull_Manager_Base::IVP_Hull_Manager_Base()
 T IVP_Hull_Manager_Base::~IVP_Hull_Manager_Base()
 T IVP_I_FPoint_VHash::compare(void*, void*) const
 T IVP_I_FPoint_VHash::point_to_index(IVP_U_Float_Point*)
 T IVP_I_FPoint_VHash::~IVP_I_FPoint_VHash()
 T IVP_I_Point_VHash::compare(void*, void*) const
 T IVP_I_Point_VHash::point_to_index(IVP_U_Point*)
 T IVP_I_Point_VHash::~IVP_I_Point_VHash()
 T IVP_Impact_Solver::calc_virt_masses_impact_solver(IVP_U_Float_Point const*)
 T IVP_Impact_Solver::delay_decision(IVP_Core**)
 T IVP_Impact_Solver::do_impact(IVP_Core**, IVP_BOOL, int, float)
 T IVP_Impact_Solver::do_push(double)
 T IVP_Impact_Solver::do_rescue_push(IVP_U_Float_Point*, IVP_BOOL)
 T IVP_Impact_Solver::get_world_direction_second_friction(IVP_Contact_Point*)
 T IVP_Impact_Solver::get_world_push_direction()
 T IVP_Impact_Solver::get_world_push_direction_two_friction(double)
 T IVP_Impact_Solver::undo_push()
 T IVP_Impact_Solver_Long_Term::do_impact_long_term(IVP_Core**, float, IVP_Contact_Point*)
 T IVP_Impact_Solver_Long_Term::do_impact_of_two_objects(IVP_Mindist*, IVP_Real_Object*, IVP_Real_Object*)
 T IVP_Impact_System::add_pushed_core_with_pairs_except(IVP_Core*, IVP_Friction_Core_Pair*)
 T IVP_Impact_System::init_and_solve_impact_system(IVP_Mindist*, IVP_Friction_System*, IVP_Friction_Core_Pair*, IVP_Contact_Point*)
 T IVP_Impact_System::recalc_all_affected_cores()
 T IVP_Impact_System::test_loop_all_pairs()
 T IVP_Incr_L_U_Matrix::add_neg_row_to_row_l_u(int, int, double)
 T IVP_Incr_L_U_Matrix::decrement_l_u(int)
 T IVP_Incr_L_U_Matrix::increment_l_u()
 T IVP_Incr_L_U_Matrix::l_u_decomposition_with_pivoting()
 T IVP_Incr_L_U_Matrix::pivot_search_l_u(int)
 T IVP_Incr_L_U_Matrix::solve_lin_equ()
 T IVP_KK_Input::IVP_KK_Input(IVP_Compact_Edge const*, IVP_Compact_Edge const*, IVP_Cache_Ledge_Point*, IVP_Cache_Ledge_Point*)
 T IVP_KK_Input::calc_quad_distance_edge_edge()
 T IVP_Linear_Constraint_Solver::alloc_memory(IVP_U_Memory*)
 T IVP_Linear_Constraint_Solver::do_a_little_random_permutation()
 T IVP_Linear_Constraint_Solver::full_setup()
 T IVP_Linear_Constraint_Solver::full_setup_test_ranges()
 T IVP_Linear_Constraint_Solver::get_fdirection()
 T IVP_Linear_Constraint_Solver::get_values_when_setup()
 T IVP_Linear_Constraint_Solver::increment_sub_solver()
 T IVP_Linear_Constraint_Solver::init_and_solve_lc(double*, double*, double*, int, int, IVP_U_Memory*)
 T IVP_Linear_Constraint_Solver::lcs_bubble_sort_x_vals()
 T IVP_Linear_Constraint_Solver::move_not_necessary_actives_to_inactives()
 T IVP_Linear_Constraint_Solver::numerical_stability_ok()
 T IVP_Linear_Constraint_Solver::solve_lc()
 T IVP_Linear_Constraint_Solver::startup_setup(int)
 T IVP_Linear_Constraint_Solver::update_step_vars(double)
 T IVP_Listener_Hull::hull_manager_is_reset(float, float)
 T IVP_Material::~IVP_Material()
 T IVP_Material_Manager::IVP_Material_Manager(IVP_BOOL)
 T IVP_Material_Manager::environment_will_be_deleted(IVP_Environment*)
 T IVP_Material_Manager::get_adhesion(IVP_Contact_Situation*)
 T IVP_Material_Manager::get_damping(IVP_Contact_Situation*)
 T IVP_Material_Manager::get_elasticity(IVP_Contact_Situation*)
 T IVP_Material_Manager::get_friction_factor(IVP_Contact_Situation*)
 T IVP_Material_Manager::get_material_by_index(IVP_Real_Object*, IVP_U_Point const*, int)
 T IVP_Material_Manager::~IVP_Material_Manager()
 T IVP_Material_Simple::get_adhesion()
 T IVP_Material_Simple::get_damping()
 T IVP_Material_Simple::get_elasticity()
 T IVP_Material_Simple::get_friction_factor()
 T IVP_Material_Simple::get_name()
 T IVP_Material_Simple::get_second_friction_factor()
 T IVP_Material_Simple::~IVP_Material_Simple()
 T IVP_Mindist::IVP_Mindist(IVP_Environment*, IVP_Collision_Delegator*)
 T IVP_Mindist::create_cp_in_advance_pretension(IVP_Real_Object*, float)
 T IVP_Mindist::do_impact()
 T IVP_Mindist::exact_mindist_went_invalid(IVP_Mindist_Manager*)
 T IVP_Mindist::init_mindist(IVP_Real_Object*, IVP_Real_Object*, IVP_Compact_Edge const*, IVP_Compact_Edge const*)
 T IVP_Mindist::is_recursive()
 T IVP_Mindist::mindist_hull_limit_exceeded_event(float)
 T IVP_Mindist::mindist_rescue_push()
 T IVP_Mindist::recalc_invalid_mindist()
 T IVP_Mindist::recalc_mindist()
 T IVP_Mindist::simulate_time_event(IVP_Environment*)
 T IVP_Mindist::try_to_generate_managed_friction(IVP_Friction_System**, IVP_BOOL*, IVP_Simulation_Unit*, IVP_BOOL)
 T IVP_Mindist::update_exact_mindist_events(IVP_BOOL, IVP_MINDIST_EVENT_HINT)
 T IVP_Mindist::~IVP_Mindist()
 T IVP_Mindist_Base::get_ledges(IVP_Compact_Ledge const**)
 T IVP_Mindist_Base::get_objects(IVP_Real_Object**)
 T IVP_Mindist_Event_Solver::calc_next_event_BB(IVP_Cache_Object*, IVP_Cache_Object*)
 T IVP_Mindist_Event_Solver::calc_next_event_BF(IVP_Compact_Edge const*, IVP_Cache_Object*, IVP_Cache_Ledge_Point*)
 T IVP_Mindist_Event_Solver::calc_next_event_BK(IVP_Ball*, IVP_Compact_Edge const*, IVP_Cache_Object*, IVP_Cache_Ledge_Point*)
 T IVP_Mindist_Event_Solver::calc_next_event_BP(IVP_Ball*, IVP_Compact_Edge const*, IVP_Cache_Object*, IVP_Cache_Ledge_Point*)
 T IVP_Mindist_Event_Solver::calc_next_event_KK(IVP_Compact_Edge const*, IVP_Compact_Edge const*, IVP_Cache_Ledge_Point*, IVP_Cache_Ledge_Point*)
 T IVP_Mindist_Event_Solver::calc_next_event_PF(IVP_Compact_Edge const*, IVP_Compact_Edge const*, IVP_Cache_Ledge_Point*, IVP_Cache_Ledge_Point*)
 T IVP_Mindist_Event_Solver::calc_next_event_PK(IVP_Compact_Edge const*, IVP_Compact_Edge const*, IVP_Cache_Ledge_Point*, IVP_Cache_Ledge_Point*)
 T IVP_Mindist_Event_Solver::calc_next_event_PP(IVP_Compact_Edge const*, IVP_Compact_Edge const*, IVP_Cache_Ledge_Point*, IVP_Cache_Ledge_Point*)
 T IVP_Mindist_Event_Solver::init_mim_function_table()
 T IVP_Mindist_Event_Solver::next_event_BB(IVP_Mindist_Event_Solver*)
 T IVP_Mindist_Event_Solver::next_event_B_POLY(IVP_Mindist_Event_Solver*)
 T IVP_Mindist_Event_Solver::next_event_default_poly_poly(IVP_Mindist_Event_Solver*)
 T IVP_Mindist_Event_Solver::next_event_illegal(IVP_Mindist_Event_Solver*)
 T IVP_Mindist_Manager::IVP_Mindist_Manager(IVP_Environment*)
 T IVP_Mindist_Manager::create_exact_mindists(IVP_Real_Object*, IVP_Real_Object*, double, IVP_U_FVector<IVP_Collision>*, IVP_Compact_Ledge const*, IVP_Compact_Ledge const*, IVP_Compact_Ledge const*, IVP_Compact_Ledge const*, IVP_Collision_Delegator*)
 T IVP_Mindist_Manager::enable_collision_detection_for_object(IVP_Real_Object*)
 T IVP_Mindist_Manager::insert_and_recalc_exact_mindist(IVP_Mindist*)
 T IVP_Mindist_Manager::insert_and_recalc_phantom_mindist(IVP_Mindist*)
 T IVP_Mindist_Manager::insert_exact_mindist(IVP_Mindist*)
 T IVP_Mindist_Manager::insert_hull_mindist(IVP_Mindist*, float)
 T IVP_Mindist_Manager::insert_invalid_mindist(IVP_Mindist*)
 T IVP_Mindist_Manager::insert_lazy_hull_mindist(IVP_Mindist*, float)
 T IVP_Mindist_Manager::recalc_all_exact_mindists()
 T IVP_Mindist_Manager::recalc_all_exact_mindists_events()
 T IVP_Mindist_Manager::recalc_all_exact_wheel_mindist()
 T IVP_Mindist_Manager::recalc_exact_mindist(IVP_Mindist*)
 T IVP_Mindist_Manager::recheck_ov_element(IVP_Real_Object*)
 T IVP_Mindist_Manager::remove_exact_mindist(IVP_Mindist*)
 T IVP_Mindist_Manager::remove_hull_mindist(IVP_Mindist*)
 T IVP_Mindist_Manager::remove_invalid_mindist(IVP_Mindist*)
 T IVP_Mindist_Manager::~IVP_Mindist_Manager()
 T IVP_Mindist_Minimize_Solver::check_loop_hash(IVP_SYNAPSE_POLYGON_STATUS, IVP_Compact_Edge const*, IVP_SYNAPSE_POLYGON_STATUS, IVP_Compact_Edge const*)
 T IVP_Mindist_Minimize_Solver::init_mms_function_table()
 T IVP_Mindist_Minimize_Solver::minimize_BB(IVP_Mindist_Minimize_Solver*)
 T IVP_Mindist_Minimize_Solver::minimize_B_POLY(IVP_Mindist_Minimize_Solver*)
 T IVP_Mindist_Minimize_Solver::minimize_FB(IVP_Mindist_Minimize_Solver*)
 T IVP_Mindist_Minimize_Solver::minimize_KB(IVP_Mindist_Minimize_Solver*)
 T IVP_Mindist_Minimize_Solver::minimize_PB(IVP_Mindist_Minimize_Solver*)
 T IVP_Mindist_Minimize_Solver::minimize_default_poly_poly(IVP_Mindist_Minimize_Solver*)
 T IVP_Mindist_Minimize_Solver::minimize_illegal(IVP_Mindist_Minimize_Solver*)
 T IVP_Mindist_Minimize_Solver::minimize_swapped_poly_poly(IVP_Mindist_Minimize_Solver*)
 T IVP_Mindist_Minimize_Solver::p_minimize_BF(IVP_Cache_Ball*, IVP_Compact_Edge const*, IVP_Cache_Ledge_Point*)
 T IVP_Mindist_Minimize_Solver::p_minimize_BK(IVP_Cache_Ball*, IVP_Compact_Edge const*, IVP_Cache_Ledge_Point*)
 T IVP_Mindist_Minimize_Solver::p_minimize_BP(IVP_Cache_Ball*, IVP_Compact_Edge const*, IVP_Cache_Ledge_Point*)
 T IVP_Mindist_Minimize_Solver::p_minimize_FF(IVP_Compact_Edge const*, IVP_Compact_Edge const*, IVP_Cache_Ledge_Point*, IVP_Cache_Ledge_Point*)
 T IVP_Mindist_Minimize_Solver::p_minimize_KK(IVP_Compact_Edge const*, IVP_Compact_Edge const*, IVP_Cache_Ledge_Point*, IVP_Cache_Ledge_Point*)
 T IVP_Mindist_Minimize_Solver::p_minimize_Leave_BK(IVP_Cache_Ball*, IVP_Compact_Edge const*, IVP_Cache_Ledge_Point*)
 T IVP_Mindist_Minimize_Solver::p_minimize_Leave_KK(IVP_Compact_Edge const*, IVP_Compact_Edge const*, IVP_KK_Input const&, IVP_Unscaled_KK_Result const*, IVP_Cache_Ledge_Point*, IVP_Cache_Ledge_Point*)
 T IVP_Mindist_Minimize_Solver::p_minimize_Leave_PF(IVP_Compact_Edge const*, IVP_U_Point const*, IVP_Compact_Edge const*, IVP_Cache_Ledge_Point*, IVP_Cache_Ledge_Point*)
 T IVP_Mindist_Minimize_Solver::p_minimize_Leave_PK(IVP_Compact_Edge const*, IVP_Compact_Edge const*, IVP_Cache_Ledge_Point*, IVP_Cache_Ledge_Point*)
 T IVP_Mindist_Minimize_Solver::p_minimize_PF(IVP_Compact_Edge const*, IVP_Compact_Edge const*, IVP_Cache_Ledge_Point*, IVP_Cache_Ledge_Point*)
 T IVP_Mindist_Minimize_Solver::p_minimize_PK(IVP_Compact_Edge const*, IVP_Compact_Edge const*, IVP_Cache_Ledge_Point*, IVP_Cache_Ledge_Point*)
 T IVP_Mindist_Minimize_Solver::p_minimize_PP(IVP_Compact_Edge const*, IVP_Compact_Edge const*, IVP_Cache_Ledge_Point*, IVP_Cache_Ledge_Point*)
 T IVP_Mindist_Recursive::IVP_Mindist_Recursive(IVP_Environment*, IVP_Collision_Delegator*)
 T IVP_Mindist_Recursive::change_spawned_mindist_count(int)
 T IVP_Mindist_Recursive::collision_is_going_to_be_deleted_event(IVP_Collision*)
 T IVP_Mindist_Recursive::do_impact()
 T IVP_Mindist_Recursive::exact_mindist_went_invalid(IVP_Mindist_Manager*)
 T IVP_Mindist_Recursive::get_spawned_mindist_count()
 T IVP_Mindist_Recursive::invalid_mindist_went_exact()
 T IVP_Mindist_Recursive::is_recursive()
 T IVP_Mindist_Recursive::mindist_rescue_push()
 T IVP_Mindist_Recursive::rec_hull_limit_exceeded_event()
 T IVP_Mindist_Recursive::recheck_recursive_childs(double)
 T IVP_Mindist_Recursive::~IVP_Mindist_Recursive()
 T IVP_Mindist_Settings::IVP_Mindist_Settings()
 T IVP_Mindist_Settings::set_collision_tolerance(double, double)
 T IVP_Mutual_Energizer::destroy_percent_energy(double)
 T IVP_Mutual_Energizer::init_mutual_energizer(IVP_Core*, IVP_Core*)
 T IVP_OO_Watcher::IVP_OO_Watcher(IVP_Collision_Delegator*, IVP_Real_Object*, IVP_Real_Object*)
 T IVP_OO_Watcher::collision_is_going_to_be_deleted_event(IVP_Collision*)
 T IVP_OO_Watcher::get_ledges(IVP_Compact_Ledge const**)
 T IVP_OO_Watcher::get_objects(IVP_Real_Object**)
 T IVP_OO_Watcher::hull_limit_exceeded_event()
 T IVP_OO_Watcher::~IVP_OO_Watcher()
 T IVP_OV_Element::IVP_OV_Element(IVP_Real_Object*)
 T IVP_OV_Element::add_oo_collision(IVP_Collision*)
 T IVP_OV_Element::add_to_hull_manager(IVP_Hull_Manager*, double)
 T IVP_OV_Element::get_type()
 T IVP_OV_Element::hull_limit_exceeded_event(IVP_Hull_Manager*, float)
 T IVP_OV_Element::hull_manager_is_going_to_be_deleted_event(IVP_Hull_Manager*)
 T IVP_OV_Element::remove_oo_collision(IVP_Collision*)
 T IVP_OV_Element::~IVP_OV_Element()
 T IVP_OV_Node::~IVP_OV_Node()
 T IVP_OV_Tree_Manager::IVP_OV_Tree_Manager()
 T IVP_OV_Tree_Manager::calc_optimal_box(IVP_OV_Element const*, double, double)
 T IVP_OV_Tree_Manager::collect_collision_partners(IVP_OV_Element const*, IVP_OV_Node const*, IVP_OV_Node const*)
 T IVP_OV_Tree_Manager::collect_subbox_collision_partners(IVP_OV_Element const*, IVP_OV_Node const*)
 T IVP_OV_Tree_Manager::connect_boxes(IVP_OV_Node*, IVP_OV_Node*)
 T IVP_OV_Tree_Manager::expand_tree(IVP_OV_Node const*)
 T IVP_OV_Tree_Manager::get_luf_coordinates_ws(IVP_OV_Node const*, IVP_U_Float_Point*, float*)
 T IVP_OV_Tree_Manager::insert_ov_element(IVP_OV_Element*, double, double, IVP_U_Vector<IVP_OV_Element>*)
 T IVP_OV_Tree_Manager::remove_ov_element(IVP_OV_Element*)
 T IVP_OV_Tree_Manager::~IVP_OV_Tree_Manager()
 T IVP_Object::~IVP_Object()
 T IVP_Object_Callback_Table::~IVP_Object_Callback_Table()
 T IVP_Object_Callback_Table_Hash::compare(void*, void*) const
 T IVP_Object_Callback_Table_Hash::find_table(IVP_Real_Object*)
 T IVP_Object_Callback_Table_Hash::object_to_index(IVP_Real_Object*)
 T IVP_Object_Callback_Table_Hash::remove_table(IVP_Real_Object*)
 T IVP_Object_Callback_Table_Hash::~IVP_Object_Callback_Table_Hash()
 T IVP_Object_Polygon_Tetra::IVP_Object_Polygon_Tetra(IVP_Template_Polygon*)
 T IVP_Object_Polygon_Tetra::generate_double_triangle(IVP_Poly_Point*, IVP_Poly_Point*, IVP_Poly_Point*)
 T IVP_Object_Polygon_Tetra::insert_pierce_info()
 T IVP_Object_Polygon_Tetra::make_triangles()
 T IVP_Object_Polygon_Tetra::~IVP_Object_Polygon_Tetra()
 T IVP_PerformanceCounter::~IVP_PerformanceCounter()
 T IVP_PerformanceCounter_Simple::IVP_PerformanceCounter_Simple()
 T IVP_PerformanceCounter_Simple::environment_is_going_to_be_deleted(IVP_Environment*)
 T IVP_PerformanceCounter_Simple::pcount(IVP_PERFORMANCE_ELEMENT)
 T IVP_PerformanceCounter_Simple::reset_and_print_performance_counters(IVP_Time)
 T IVP_PerformanceCounter_Simple::start_pcount()
 T IVP_PerformanceCounter_Simple::stop_pcount()
 T IVP_PerformanceCounter_Simple::~IVP_PerformanceCounter_Simple()
 T IVP_Polygon::IVP_Polygon(IVP_Cluster*, IVP_SurfaceManager*, IVP_Template_Real_Object const*, IVP_U_Quat const*, IVP_U_Point const*)
 T IVP_Polygon::~IVP_Polygon()
 T IVP_Range_Manager::IVP_Range_Manager(IVP_Environment*, IVP_BOOL)
 T IVP_Range_Manager::environment_will_be_deleted(IVP_Environment*)
 T IVP_Range_Manager::get_coll_range_in_world(IVP_Real_Object const*)
 T IVP_Range_Manager::get_coll_range_intra_objects(IVP_Real_Object const*, IVP_Real_Object const*, double*, double*)
 T IVP_Ray_Hit_Listener::~IVP_Ray_Hit_Listener()
 T IVP_Ray_Solver::IVP_Ray_Solver(IVP_Ray_Solver_Template const*)
 T IVP_Ray_Solver::check_ray_against_ball(IVP_Ball*)
 T IVP_Ray_Solver::~IVP_Ray_Solver()
 T IVP_Ray_Solver_Group::IVP_Ray_Solver_Group(int, IVP_Ray_Solver**)
 T IVP_Ray_Solver_Group::check_ray_group_against_all_objects_in_sim(IVP_Environment const*)
 T IVP_Ray_Solver_Group::check_ray_group_against_node(IVP_OV_Node*, IVP_OV_Tree_Manager*)
 T IVP_Ray_Solver_Group::check_ray_group_against_object(IVP_Real_Object*)
 T IVP_Ray_Solver_Min::add_hit_object(IVP_Real_Object*, IVP_Compact_Ledge const*, IVP_Compact_Triangle const*, double, IVP_U_Point*)
 T IVP_Ray_Solver_Min::~IVP_Ray_Solver_Min()
 T IVP_Ray_Solver_Os::IVP_Ray_Solver_Os(IVP_Ray_Solver*, IVP_Real_Object*)
 T IVP_Ray_Solver_Os::check_ray_against_compact_ledge_os(IVP_Compact_Ledge const*)
 T IVP_Ray_Solver_Os::check_ray_against_compact_surface_os(IVP_Compact_Surface const*)
 T IVP_Ray_Solver_Os::check_ray_against_ledge_tree_node_os(IVP_Compact_Ledgetree_Node const*)
 T IVP_Real_Object::IVP_Real_Object(IVP_Cluster*, IVP_SurfaceManager*, IVP_Template_Real_Object const*, IVP_U_Quat const*, IVP_U_Point const*)
 T IVP_Real_Object::add_listener_object(IVP_Listener_Object*)
 T IVP_Real_Object::async_add_rot_speed_object_cs(IVP_U_Float_Point const*)
 T IVP_Real_Object::async_add_speed_object_ws(IVP_U_Float_Point const*)
 T IVP_Real_Object::async_push_object_ws(IVP_U_Point const*, IVP_U_Float_Point const*)
 T IVP_Real_Object::beam_object_to_new_position(IVP_U_Quat const*, IVP_U_Point const*, IVP_BOOL)
 T IVP_Real_Object::calc_at_matrix(IVP_Time, IVP_U_Matrix*) const
 T IVP_Real_Object::calc_at_quaternion(IVP_Time, IVP_U_Quat*, IVP_U_Point*) const
 T IVP_Real_Object::calc_m_core_f_object(IVP_U_Matrix*)
 T IVP_Real_Object::change_mass(float)
 T IVP_Real_Object::clear_internal_references()
 T IVP_Real_Object::convert_to_phantom(IVP_Template_Phantom const*)
 T IVP_Real_Object::delete_and_check_vicinity()
 T IVP_Real_Object::delete_silently()
 T IVP_Real_Object::disable_simulation()
 T IVP_Real_Object::enable_collision_detection(IVP_BOOL)
 T IVP_Real_Object::ensure_in_simulation()
 T IVP_Real_Object::ensure_in_simulation_now()
 T IVP_Real_Object::force_grow_friction_system()
 T IVP_Real_Object::get_all_near_mindists()
 T IVP_Real_Object::get_collision_check_reference_count()
 T IVP_Real_Object::get_m_world_f_object_AT(IVP_U_Matrix*) const
 T IVP_Real_Object::get_quat_world_f_object_AT(IVP_U_Quat*, IVP_U_Point*) const
 T IVP_Real_Object::init_object_core(IVP_Environment*, IVP_Template_Real_Object const*)
 T IVP_Real_Object::insert_anchor(IVP_Anchor*)
 T IVP_Real_Object::recalc_exact_mindists_of_object()
 T IVP_Real_Object::recalc_invalid_mindists_of_object()
 T IVP_Real_Object::recheck_collision_filter()
 T IVP_Real_Object::recompile_material_changed()
 T IVP_Real_Object::remove_anchor(IVP_Anchor*)
 T IVP_Real_Object::remove_listener_object(IVP_Listener_Object*)
 T IVP_Real_Object::reset_time(IVP_Time)
 T IVP_Real_Object::revive_nearest_objects_grow_fs()
 T IVP_Real_Object::revive_object_for_simulation()
 T IVP_Real_Object::set_new_m_object_f_core(IVP_U_Matrix const*)
 T IVP_Real_Object::set_new_quat_object_f_core(IVP_U_Quat const*, IVP_U_Point const*)
 T IVP_Real_Object::set_pinned(IVP_BOOL)
 T IVP_Real_Object::unlink_contact_points_for_object(IVP_Real_Object*)
 T IVP_Real_Object::update_exact_mindist_events_of_object()
 T IVP_Real_Object::~IVP_Real_Object()
 T IVP_Real_Object_Fast::IVP_Real_Object_Fast(IVP_Cluster*, IVP_Template_Object const*)
 T IVP_Real_Object_Fast::~IVP_Real_Object_Fast()
 T IVP_Rot_Inertia_Solver::calc_mass_center_and_rotation_inertia(IVP_Compact_Surface const*, IVP_U_Point*, IVP_U_Point*)
 T IVP_Sim_Units_Manager::IVP_Sim_Units_Manager(IVP_Environment*)
 T IVP_Sim_Units_Manager::add_sim_unit_to_manager(IVP_Simulation_Unit*)
 T IVP_Sim_Units_Manager::reset_time(IVP_Time)
 T IVP_Sim_Units_Manager::simulate_sim_units_psi(IVP_Environment*, IVP_U_Vector<IVP_Core>*)
 T IVP_Simulation_Unit::IVP_Simulation_Unit()
 T IVP_Simulation_Unit::add_controller_of_core(IVP_Core*, IVP_Controller*)
 T IVP_Simulation_Unit::add_sim_unit_core(IVP_Core*)
 T IVP_Simulation_Unit::clean_sim_unit()
 T IVP_Simulation_Unit::do_sim_unit_union_find()
 T IVP_Simulation_Unit::fusion_simulation_unities(IVP_Simulation_Unit*)
 T IVP_Simulation_Unit::rem_sim_unit_controller(IVP_Controller*)
 T IVP_Simulation_Unit::remove_controller_of_core(IVP_Core*, IVP_Controller*)
 T IVP_Simulation_Unit::sim_unit_calc_movement_state(IVP_Environment*)
 T IVP_Simulation_Unit::sim_unit_calc_redundants()
 T IVP_Simulation_Unit::sim_unit_ensure_cores_movement()
 T IVP_Simulation_Unit::sim_unit_remove_core(IVP_Core*)
 T IVP_Simulation_Unit::sim_unit_revive_for_simulation(IVP_Environment*)
 T IVP_Simulation_Unit::sim_unit_sort_controllers()
 T IVP_Simulation_Unit::sim_unit_union_find_test()
 T IVP_Simulation_Unit::simulate_single_sim_unit_psi(IVP_Event_Sim*, IVP_U_Vector<IVP_Core>*)
 T IVP_Simulation_Unit::split_sim_unit(IVP_Core*)
 T IVP_Simulation_Unit::~IVP_Simulation_Unit()
 T IVP_Solver_Core_Reaction::exert_angular_impulse_dim2(IVP_Core*, IVP_Core*, IVP_U_Float_Point&)
 T IVP_Solver_Core_Reaction::exert_impulse_dim2(IVP_Core*, IVP_Core*, IVP_U_Float_Point&)
 T IVP_Solver_Core_Reaction::init_reaction_solver_rotation_ws(IVP_Core*, IVP_Core*, IVP_U_Float_Point*, IVP_U_Float_Point*, IVP_U_Float_Point*)
 T IVP_Solver_Core_Reaction::init_reaction_solver_translation_ws(IVP_Core*, IVP_Core*, IVP_U_Point&, IVP_U_Float_Point*, IVP_U_Float_Point*, IVP_U_Float_Point*)
 T IVP_Solver_Core_Reaction::init_rot_ws(IVP_Core*, IVP_U_Point_4*, IVP_U_Point_4*, float)
 T IVP_Solver_Core_Reaction::init_trans_ws(IVP_U_Point const*, IVP_Core*, IVP_U_Point_4*, IVP_U_Point_4*, float)
 T IVP_Standard_Gravity_Controller::core_is_going_to_be_deleted_event(IVP_Core*)
 T IVP_Standard_Gravity_Controller::do_simulation_controller(IVP_Event_Sim*, IVP_U_Vector<IVP_Core>*)
 T IVP_Standard_Gravity_Controller::get_controller_name()
 T IVP_Standard_Gravity_Controller::get_controller_priority()
 T IVP_Standard_Gravity_Controller::set_standard_gravity(IVP_U_Point*)
 T IVP_Standard_Gravity_Controller::~IVP_Standard_Gravity_Controller()
 T IVP_Statistic_Manager::IVP_Statistic_Manager()
 T IVP_Statistic_Manager::clear_statistic()
 T IVP_SurMan_PS_Plane::get_area_size()
 T IVP_SurfaceBuilder_Halfspacesoup::convert_halfspacesoup_to_compact_ledge(IVP_Halfspacesoup*, double)
 T IVP_SurfaceBuilder_Halfspacesoup::convert_halfspacesoup_to_points(IVP_Halfspacesoup*, double, IVP_U_Vector<IVP_U_Point>*)
 T IVP_SurfaceBuilder_Halfspacesoup::insert_point_into_list(IVP_U_Point*, IVP_U_Vector<IVP_U_Point>*, double)
 T IVP_SurfaceBuilder_Ledge_Soup::IVP_SurfaceBuilder_Ledge_Soup()
 T IVP_SurfaceBuilder_Ledge_Soup::add_ledge_tree_to_convex_hull(IVP_Compact_Recursive&, IVV_Sphere*)
 T IVP_SurfaceBuilder_Ledge_Soup::allocate_compact_surface()
 T IVP_SurfaceBuilder_Ledge_Soup::build_ledgetree(IVV_Sphere*)
 T IVP_SurfaceBuilder_Ledge_Soup::build_root_convex_hull()
 T IVP_SurfaceBuilder_Ledge_Soup::calculate_boundingbox(IVP_U_Vector<IVV_Sphere>*, IVP_U_Float_Point*, IVP_U_Float_Point*)
 T IVP_SurfaceBuilder_Ledge_Soup::cleanup()
 T IVP_SurfaceBuilder_Ledge_Soup::cluster_spheres_topdown_mediancut(double)
 T IVP_SurfaceBuilder_Ledge_Soup::cluster_spheres_topdown_mediancut_recursively(IVP_U_Vector<IVV_Sphere>*)
 T IVP_SurfaceBuilder_Ledge_Soup::compile(IVP_Template_Surbuild_LedgeSoup*)
 T IVP_SurfaceBuilder_Ledge_Soup::insert_compact_ledges()
 T IVP_SurfaceBuilder_Ledge_Soup::insert_ledge(IVP_Compact_Ledge*)
 T IVP_SurfaceBuilder_Ledge_Soup::ledges_to_boxes_and_spheres()
 T IVP_SurfaceBuilder_Ledge_Soup::recompile_point_indizes_of_compact_ledge(IVP_Compact_Ledge*, char*)
 T IVP_SurfaceBuilder_Ledge_Soup::~IVP_SurfaceBuilder_Ledge_Soup()
 T IVP_SurfaceBuilder_Pointsoup::convert_pointsoup_to_compact_ledge(IVP_U_Vector<IVP_U_Point>*)
 T IVP_SurfaceBuilder_Pointsoup::convert_pointsoup_to_compact_ledge_internal(IVP_U_Vector<IVP_U_Point>*)
 T IVP_SurfaceBuilder_Pointsoup::convert_triangle_to_compace_ledge(IVP_U_Point*, IVP_U_Point*, IVP_U_Point*)
 T IVP_SurfaceBuilder_Pointsoup::planes_to_template(IVP_U_Vector<IVP_U_Point>*, IVP_U_Vector<IVP_SurMan_PS_Plane>*)
 T IVP_SurfaceBuilder_Pointsoup::try_to_build_convex_ledge_from_qhull_result(IVP_U_Vector<IVP_U_Point>*, IVP_BOOL*, char*, char*)
 T IVP_SurfaceBuilder_Polygon_Convex::IVP_SurfaceBuilder_Polygon_Convex(IVP_Template_Ledge_Polygon_Soup*)
 T IVP_SurfaceBuilder_Polygon_Convex::IVP_SurfaceBuilder_Polygon_Convex(IVP_Template_Polygon*)
 T IVP_SurfaceBuilder_Polygon_Convex::convert_template_to_ledge(IVP_Template_Polygon*)
 T IVP_SurfaceBuilder_Polygon_Convex::convert_templateledgepolygonsoup_to_ledge(IVP_Template_Ledge_Polygon_Soup*)
 T IVP_SurfaceBuilder_Polygon_Convex::init_surface_manager_polygon()
 T IVP_SurfaceManager::add_reference_to_ledge(IVP_Compact_Ledge const*)
 T IVP_SurfaceManager::remove_reference_to_ledge(IVP_Compact_Ledge const*)
 T IVP_SurfaceManager::~IVP_SurfaceManager()
 T IVP_SurfaceManager_Ball::get_all_ledges_within_radius(IVP_U_Point const*, double, IVP_Compact_Ledge const*, IVP_Real_Object*, IVP_Compact_Ledge const*, IVP_U_BigVector<IVP_Compact_Ledge>*)
 T IVP_SurfaceManager_Ball::get_all_terminal_ledges(IVP_U_BigVector<IVP_Compact_Ledge>*)
 T IVP_SurfaceManager_Ball::get_mass_center(IVP_U_Float_Point*) const
 T IVP_SurfaceManager_Ball::get_radius_and_radius_dev_to_given_center(IVP_U_Float_Point const*, float*, float*) const
 T IVP_SurfaceManager_Ball::get_rotation_inertia(IVP_U_Float_Point*) const
 T IVP_SurfaceManager_Ball::get_single_convex() const
 T IVP_SurfaceManager_Ball::get_type()
 T IVP_SurfaceManager_Ball::insert_all_ledges_hitting_ray(IVP_Ray_Solver*, IVP_Real_Object*)
 T IVP_SurfaceManager_Ball::~IVP_SurfaceManager_Ball()
 T IVP_SurfaceManager_Polygon::add_reference_to_ledge(IVP_Compact_Ledge const*)
 T IVP_SurfaceManager_Polygon::get_all_ledges_within_radius(IVP_U_Point const*, double, IVP_Compact_Ledge const*, IVP_Real_Object*, IVP_Compact_Ledge const*, IVP_U_BigVector<IVP_Compact_Ledge>*)
 T IVP_SurfaceManager_Polygon::get_all_terminal_ledges(IVP_U_BigVector<IVP_Compact_Ledge>*)
 T IVP_SurfaceManager_Polygon::get_mass_center(IVP_U_Float_Point*) const
 T IVP_SurfaceManager_Polygon::get_radius_and_radius_dev_to_given_center(IVP_U_Float_Point const*, float*, float*) const
 T IVP_SurfaceManager_Polygon::get_rotation_inertia(IVP_U_Float_Point*) const
 T IVP_SurfaceManager_Polygon::get_single_convex() const
 T IVP_SurfaceManager_Polygon::get_type()
 T IVP_SurfaceManager_Polygon::insert_all_ledges_hitting_ray(IVP_Ray_Solver*, IVP_Real_Object*)
 T IVP_SurfaceManager_Polygon::remove_reference_to_ledge(IVP_Compact_Ledge const*)
 T IVP_SurfaceManager_Polygon::~IVP_SurfaceManager_Polygon()
 T IVP_SurfaceManager_Polygon_Solver::traverse_cluster(IVP_Compact_Ledgetree_Node const*, IVP_U_Point const*, double, IVP_U_BigVector<IVP_Compact_Ledge>*)
 T IVP_SurfaceManager_VirtualMesh::add_reference_to_ledge(IVP_Compact_Ledge const*)
 T IVP_SurfaceManager_VirtualMesh::get_all_ledges_within_radius(IVP_U_Point const*, double, IVP_Compact_Ledge const*, IVP_Real_Object*, IVP_Compact_Ledge const*, IVP_U_BigVector<IVP_Compact_Ledge>*)
 T IVP_SurfaceManager_VirtualMesh::get_all_terminal_ledges(IVP_U_BigVector<IVP_Compact_Ledge>*)
 T IVP_SurfaceManager_VirtualMesh::get_mass_center(IVP_U_Float_Point*) const
 T IVP_SurfaceManager_VirtualMesh::get_radius_and_radius_dev_to_given_center(IVP_U_Float_Point const*, float*, float*) const
 T IVP_SurfaceManager_VirtualMesh::get_rotation_inertia(IVP_U_Float_Point*) const
 T IVP_SurfaceManager_VirtualMesh::get_single_convex() const
 T IVP_SurfaceManager_VirtualMesh::get_type()
 T IVP_SurfaceManager_VirtualMesh::insert_all_ledges_hitting_ray(IVP_Ray_Solver*, IVP_Real_Object*)
 T IVP_SurfaceManager_VirtualMesh::remove_reference_to_ledge(IVP_Compact_Ledge const*)
 T IVP_SurfaceManager_VirtualMesh::~IVP_SurfaceManager_VirtualMesh()
 T IVP_Synapse::get_ledge() const
 T IVP_Synapse::get_type()
 T IVP_Synapse::hull_limit_exceeded_event(IVP_Hull_Manager*, float)
 T IVP_Synapse::hull_manager_is_going_to_be_deleted_event(IVP_Hull_Manager*)
 T IVP_Synapse::hull_manager_is_reset(float, float)
 T IVP_Synapse::~IVP_Synapse()
 T IVP_Synapse_Friction::get_material_index() const
 T IVP_Synapse_Friction::is_same_as(IVP_Synapse_Real const*) const
 T IVP_Synapse_OO::get_type()
 T IVP_Synapse_OO::hull_limit_exceeded_event(IVP_Hull_Manager*, float)
 T IVP_Synapse_OO::hull_manager_is_going_to_be_deleted_event(IVP_Hull_Manager*)
 T IVP_Synapse_OO::~IVP_Synapse_OO()
 T IVP_Template_Anchor::set_anchor_position_cs(IVP_Real_Object*, IVP_U_Float_Point const*)
 T IVP_Template_Anchor::set_anchor_position_os(IVP_Real_Object*, IVP_U_Float_Point const*)
 T IVP_Template_Anchor::set_anchor_position_os(IVP_Real_Object*, double, double, double)
 T IVP_Template_Constraint::IVP_Template_Constraint()
 T IVP_Template_Constraint::fix_rotation_axis(IVP_COORDINATE_INDEX)
 T IVP_Template_Constraint::free_rotation_axis(IVP_COORDINATE_INDEX)
 T IVP_Template_Constraint::free_translation_axis(IVP_COORDINATE_INDEX)
 T IVP_Template_Constraint::set_attached_object(IVP_Real_Object*)
 T IVP_Template_Constraint::set_reference_object(IVP_Real_Object*)
 T IVP_Template_Force::IVP_Template_Force()
 T IVP_Template_Object::set_name(char const*)
 T IVP_Template_Phantom::IVP_Template_Phantom()
 T IVP_Template_Polygon::IVP_Template_Polygon()
 T IVP_Template_Polygon::IVP_Template_Polygon(int, int, int)
 T IVP_Template_Polygon::~IVP_Template_Polygon()
 T IVP_Template_Real_Object::IVP_Template_Real_Object()
 T IVP_Template_Real_Object::~IVP_Template_Real_Object()
 T IVP_Template_Spring::IVP_Template_Spring()
 T IVP_Template_Stabilizer::IVP_Template_Stabilizer()
 T IVP_Template_Surface::IVP_Template_Surface()
 T IVP_Template_Surface::close_surface()
 T IVP_Template_Surface::get_surface_index()
 T IVP_Template_Surface::init_surface(int)
 T IVP_Template_Surface::~IVP_Template_Surface()
 T IVP_Template_Suspension::IVP_Template_Suspension()
 T IVP_Template_Torque::IVP_Template_Torque()
 T IVP_Template_Two_Point::IVP_Template_Two_Point()
 T IVP_Time_Event::simulate_time_event(IVP_Environment*)
 T IVP_Time_Event_PSI::simulate_time_event(IVP_Environment*)
 T IVP_Time_Manager::IVP_Time_Manager()
 T IVP_Time_Manager::env_set_current_time(IVP_Environment*, IVP_Time)
 T IVP_Time_Manager::event_loop(IVP_Environment*, IVP_Time)
 T IVP_Time_Manager::remove_event(IVP_Time_Event*)
 T IVP_Time_Manager::reset_time(IVP_Time)
 T IVP_Time_Manager::update_event(IVP_Time_Event*, IVP_Time)
 T IVP_Time_Manager::~IVP_Time_Manager()
 T IVP_Triangle::calc_hesse()
 T IVP_Triangle::~IVP_Triangle()
 T IVP_U_Active_Float::add_dependency(IVP_U_Active_Float_Listener*)
 T IVP_U_Active_Float::remove_dependency(IVP_U_Active_Float_Listener*)
 T IVP_U_Active_Float::~IVP_U_Active_Float()
 T IVP_U_Active_Int::~IVP_U_Active_Int()
 T IVP_U_Active_Terminal_Double::print()
 T IVP_U_Active_Terminal_Double::set_double(double, IVP_BOOL)
 T IVP_U_Active_Terminal_Double::update_float()
 T IVP_U_Active_Terminal_Double::~IVP_U_Active_Terminal_Double()
 T IVP_U_Active_Terminal_Int::print()
 T IVP_U_Active_Terminal_Int::set_int(int, IVP_BOOL)
 T IVP_U_Active_Terminal_Int::update_int()
 T IVP_U_Active_Terminal_Int::~IVP_U_Active_Terminal_Int()
 T IVP_U_Active_Value::~IVP_U_Active_Value()
 T IVP_U_Active_Value_Manager::IVP_U_Active_Value_Manager(IVP_BOOL)
 T IVP_U_Active_Value_Manager::create_active_float(char const*, double)
 T IVP_U_Active_Value_Manager::create_active_int(char const*, int)
 T IVP_U_Active_Value_Manager::delay_active_float(IVP_U_Active_Float_Delayed*)
 T IVP_U_Active_Value_Manager::delay_active_int(IVP_U_Active_Int_Delayed*)
 T IVP_U_Active_Value_Manager::environment_will_be_deleted(IVP_Environment*)
 T IVP_U_Active_Value_Manager::init_active_values_generic()
 T IVP_U_Active_Value_Manager::insert_active_float(IVP_U_Active_Float*)
 T IVP_U_Active_Value_Manager::insert_active_int(IVP_U_Active_Int*)
 T IVP_U_Active_Value_Manager::install_active_float(char const*, double)
 T IVP_U_Active_Value_Manager::install_active_int(char const*, int)
 T IVP_U_Active_Value_Manager::refresh_psi_active_values(IVP_Environment*)
 T IVP_U_Active_Value_Manager::remove_active_float(IVP_U_Active_Float*)
 T IVP_U_Active_Value_Manager::remove_active_int(IVP_U_Active_Int*)
 T IVP_U_Active_Value_Manager::update_delayed_active_values()
 T IVP_U_Active_Value_Manager::~IVP_U_Active_Value_Manager()
 T IVP_U_BigVector_Base::increment_mem()
 T IVP_U_Float_Hesse::calc_hesse_val(IVP_U_Float_Point const*)
 T IVP_U_Float_Hesse::normize()
 T IVP_U_Float_Hesse::proj_on_plane(IVP_U_Float_Point const*, IVP_U_Float_Point*) const
 T IVP_U_Float_Point::calc_cross_product(IVP_U_Float_Point const*, IVP_U_Float_Point const*)
 T IVP_U_Float_Point::fast_normize()
 T IVP_U_Float_Point::fast_real_length() const
 T IVP_U_Float_Point::normize()
 T IVP_U_Float_Point::real_length() const
 T IVP_U_Float_Point::real_length_plus_normize()
 T IVP_U_Float_Point::rotate(IVP_COORDINATE_INDEX, float)
 T IVP_U_Float_Point::set_orthogonal_part(IVP_U_Float_Point const*, IVP_U_Float_Point const*)
 T IVP_U_Hesse::calc_hesse(IVP_U_Float_Point const*, IVP_U_Float_Point const*, IVP_U_Float_Point const*)
 T IVP_U_Hesse::calc_hesse(IVP_U_Point const*, IVP_U_Point const*, IVP_U_Point const*)
 T IVP_U_Hesse::normize()
 T IVP_U_Hesse::proj_on_plane(IVP_U_Point const*, IVP_U_Point*) const
 T IVP_U_Matrix3::init3()
 T IVP_U_Matrix3::init_normized3_col(IVP_U_Point const*, IVP_COORDINATE_INDEX)
 T IVP_U_Matrix3::init_normized3_col(IVP_U_Point const*, IVP_COORDINATE_INDEX, IVP_U_Point const*)
 T IVP_U_Matrix3::mi2mult3(IVP_U_Matrix3 const*, IVP_U_Matrix3*) const
 T IVP_U_Matrix3::mimult3(IVP_U_Matrix3 const*, IVP_U_Matrix3*) const
 T IVP_U_Matrix3::mmult3(IVP_U_Matrix3 const*, IVP_U_Matrix3*) const
 T IVP_U_Matrix3::set_transpose3(IVP_U_Matrix3 const*)
 T IVP_U_Matrix3::transpose3()
 T IVP_U_Matrix3::vimult3(IVP_U_Float_Point const*, IVP_U_Float_Point*) const
 T IVP_U_Matrix3::vimult3(IVP_U_Point const*, IVP_U_Point*) const
 T IVP_U_Matrix3::vmult3(IVP_U_Float_Point const*, IVP_U_Float_Point*) const
 T IVP_U_Matrix3::vmult3(IVP_U_Point const*, IVP_U_Point*) const
 T IVP_U_Matrix::init()
 T IVP_U_Matrix::init_rot_multiple(IVP_U_Point const*, double)
 T IVP_U_Matrix::mi2mult4(IVP_U_Matrix const*, IVP_U_Matrix*) const
 T IVP_U_Matrix::mimult4(IVP_U_Matrix const*, IVP_U_Matrix*) const
 T IVP_U_Matrix::mmult4(IVP_U_Matrix const*, IVP_U_Matrix*) const
 T IVP_U_Matrix::real_invert(double)
 T IVP_U_Matrix::set_transpose(IVP_U_Matrix const*)
 T IVP_U_Matrix::shift_os(IVP_U_Point const*)
 T IVP_U_Matrix::vimult4(IVP_U_Float_Point const*, IVP_U_Float_Point*) const
 T IVP_U_Matrix::vimult4(IVP_U_Point const*, IVP_U_Float_Point*) const
 T IVP_U_Matrix::vimult4(IVP_U_Point const*, IVP_U_Point*) const
 T IVP_U_Matrix::vmult4(IVP_U_Float_Point const*, IVP_U_Float_Point*) const
 T IVP_U_Matrix::vmult4(IVP_U_Float_Point const*, IVP_U_Point*) const
 T IVP_U_Matrix::vmult4(IVP_U_Point const*, IVP_U_Point*) const
 T IVP_U_Memory::IVP_U_Memory()
 T IVP_U_Memory::free_mem_transaction()
 T IVP_U_Memory::init_mem_transaction_usage(char*, int)
 T IVP_U_Memory::neuer_sp_block(unsigned int)
 T IVP_U_Memory::~IVP_U_Memory()
 T IVP_U_Min_Hash::IVP_U_Min_Hash(int)
 T IVP_U_Min_Hash::add(void*, double)
 T IVP_U_Min_Hash::min_removed_at_index(IVP_U_Min_Hash_Elem*, int)
 T IVP_U_Min_Hash::remove(void*)
 T IVP_U_Min_Hash::remove_min()
 T IVP_U_Min_Hash::~IVP_U_Min_Hash()
 T IVP_U_Min_List::IVP_U_Min_List(int)
 T IVP_U_Min_List::add(void*, float)
 T IVP_U_Min_List::remove_minlist_elem(unsigned int)
 T IVP_U_Min_List::~IVP_U_Min_List()
 T IVP_U_Plain::IVP_U_Plain(IVP_U_Hesse const*)
 T IVP_U_Plain::calc_intersect_with(IVP_U_Hesse const*, IVP_U_Straight*) const
 T IVP_U_Point::calc_an_orthogonal(IVP_U_Point const*)
 T IVP_U_Point::calc_cross_product(IVP_U_Point const*, IVP_U_Point const*)
 T IVP_U_Point::fast_normize()
 T IVP_U_Point::is_parallel(IVP_U_Point const*, double) const
 T IVP_U_Point::line_max(IVP_U_Point const*)
 T IVP_U_Point::line_min(IVP_U_Point const*)
 T IVP_U_Point::normize()
 T IVP_U_Point::real_length() const
 T IVP_U_Point::real_length_plus_normize()
 T IVP_U_Point::rotate(IVP_COORDINATE_INDEX, float)
 T IVP_U_Point::set_crossing(IVP_U_Hesse*, IVP_U_Hesse*, IVP_U_Hesse*)
 T IVP_U_Point::set_interpolate(IVP_U_Float_Point const*, IVP_U_Float_Point const*, double)
 T IVP_U_Point::set_interpolate(IVP_U_Point const*, IVP_U_Point const*, double)
 T IVP_U_Point::solve_quadratic_equation_accurate(IVP_U_Point const*)
 T IVP_U_Quat::fast_normize_quat()
 T IVP_U_Quat::normize_quat()
 T IVP_U_Quat::set_div_unit_quat(IVP_U_Quat const*, IVP_U_Quat const*)
 T IVP_U_Quat::set_fast_multiple_with_clip(IVP_U_Float_Point const*, double)
 T IVP_U_Quat::set_interpolate_smoothly(IVP_U_Quat const*, IVP_U_Quat const*, double)
 T IVP_U_Quat::set_invert_mult(IVP_U_Quat const*, IVP_U_Quat const*)
 T IVP_U_Quat::set_invert_unit_quat(IVP_U_Quat const*)
 T IVP_U_Quat::set_matrix(IVP_U_Matrix3*) const
 T IVP_U_Quat::set_mult_quat(IVP_U_Quat const*, IVP_U_Quat const*)
 T IVP_U_Quat::set_quaternion(IVP_U_Matrix3 const*)
 T IVP_U_Quat::set_very_fast_multiple(IVP_U_Float_Point const*, double)
 T IVP_U_Set<IVP_Core>::compare(void*, void*) const
 T IVP_U_Set<IVP_Core>::~IVP_U_Set()
 T IVP_U_Set<IVP_Mindist_Base>::compare(void*, void*) const
 T IVP_U_Set<IVP_Mindist_Base>::~IVP_U_Set()
 T IVP_U_Set<IVP_Real_Object>::compare(void*, void*) const
 T IVP_U_Set<IVP_Real_Object>::~IVP_U_Set()
 T IVP_U_Set_Active<IVP_Core>::~IVP_U_Set_Active()
 T IVP_U_Set_Active<IVP_Mindist_Base>::~IVP_U_Set_Active()
 T IVP_U_Set_Active<IVP_Real_Object>::~IVP_U_Set_Active()
 T IVP_U_Vector<IVP_Core>::~IVP_U_Vector()
 T IVP_U_Vector_Base::increment_mem()
 T IVP_VHash::IVP_VHash(int)
 T IVP_VHash::add_elem(void const*, int)
 T IVP_VHash::find_elem(void const*, unsigned int) const
 T IVP_VHash::rehash(int)
 T IVP_VHash::remove_elem(void const*, unsigned int)
 T IVP_VHash::~IVP_VHash()
 T IVP_VHash_Store::IVP_VHash_Store(int)
 T IVP_VHash_Store::add_elem(void*, void*)
 T IVP_VHash_Store::change_elem(void*, void*)
 T IVP_VHash_Store::find_elem(void*)
 T IVP_VHash_Store::rehash(int)
 T IVP_VHash_Store::remove_elem(void*)
 T IVP_VHash_Store::remove_elem(void*, unsigned int)
 T IVP_VHash_Store::~IVP_VHash_Store()
 T IVP_ov_tree_hash::compare(void*, void*) const
 T IVP_ov_tree_hash::node_to_index(IVP_OV_Node*)
 T IVP_ov_tree_hash::~IVP_ov_tree_hash()
 T IVP_point_hash::compare(void*, void*) const
 T IVP_point_hash::point_to_index(IVP_Poly_Point*)
 T IVP_point_hash::~IVP_point_hash()
 T InitLeafmap(IVP_Compact_Ledge*, leafmap_t*)
 T InterfaceReg::InterfaceReg(void* (*)(), char const*)
 T IsExternalConstraint(IVP_Controller*, void*)
 T MaterialIndexDataOps()
 T MathLib_Init(float, float, float, int, bool, bool, bool, bool)
 T MatrixAngles(matrix3x4_t const&, float*)
 T MatrixGetColumn(matrix3x4_t const&, int, Vector&)
 T OutputCollideDebugInfo(CPhysCollide const*)
 T P_Sur_2D::calc_line_representation()
 T P_Sur_2D::calc_triangle_representation()
 T P_Sur_2D::~P_Sur_2D()
 T P_Sur_2D_Line::is_crossing_line(P_Sur_2D_Line*)
 T P_Sur_2D_Line::overlaps_with_line(P_Sur_2D_Line*)
 T PackLedgeIntoBuffer(packedhull_t*, CUtlBuffer&, IVP_Compact_Ledge const*, virtualmeshlist_t const&)
 T ParseFileInternal(char const*, char*, bool*, characterset_t*, unsigned long)
 T ParseKeyvalue(char const*, char (&) [1024], char (&) [1024])
 T PostRestorePhysicsConstraintGroup()
 T PostRestorePhysicsObject()
 T QuaternionAxisAngle(Quaternion const&, Vector&, float&)
 T RestorePhysicsConstraint(physrestoreparams_t const&, CPhysicsConstraint**)
 T RestorePhysicsConstraintGroup(physrestoreparams_t const&, CPhysicsConstraintGroup**)
 T RestorePhysicsFluidController(physrestoreparams_t const&, CPhysicsFluidController**)
 T RestorePhysicsMotionController(physrestoreparams_t const&, IPhysicsMotionController**)
 T RestorePhysicsObject(physrestoreparams_t const&, CPhysicsObject**)
 T RestorePhysicsPlayerController(physrestoreparams_t const&, CPlayerController**)
 T RestorePhysicsShadowController(physrestoreparams_t const&, IPhysicsShadowController**)
 T RestorePhysicsShadowControllerInternal(physrestoreparams_t const&, IPhysicsShadowController**, CPhysicsObject*)
 T RestorePhysicsSpring(physrestoreparams_t const&, CPhysicsSpring**)
 T RestorePhysicsVehicleController(physrestoreparams_t const&, CVehicleController**)
 T SavePhysicsConstraint(physsaveparams_t const&, CPhysicsConstraint*)
 T SavePhysicsConstraintGroup(physsaveparams_t const&, CPhysicsConstraintGroup*)
 T SavePhysicsFluidController(physsaveparams_t const&, CPhysicsFluidController*)
 T SavePhysicsMotionController(physsaveparams_t const&, IPhysicsMotionController*)
 T SavePhysicsObject(physsaveparams_t const&, CPhysicsObject*)
 T SavePhysicsPlayerController(physsaveparams_t const&, CPlayerController*)
 T SavePhysicsShadowController(physsaveparams_t const&, IPhysicsShadowController*)
 T SavePhysicsSpring(physsaveparams_t const&, CPhysicsSpring*)
 T SavePhysicsVehicleController(physsaveparams_t const&, CVehicleController*)
 T SeedRandomGenerators()
 T SetIdentityMatrix(matrix3x4_t&)
 T ShouldOverrideWheelContactFriction(float*, IVP_Real_Object*, IVP_Real_Object*, IVP_U_Float_Point*)
 T SinCos(float, float*, float*)
 T Sys_GetFactoryThis()
 T TraceGetAABB_r(Vector*, Vector*, IVP_Compact_Ledgetree_Node const*, CTraceIVP&)
 T TraceGetExtent_r(IVP_Compact_Ledgetree_Node const*, CTraceIVP&, Vector const&, float&, Vector&)
 T TransformIVPToLocal(IVP_U_Point const&, IVP_U_Point&, IVP_Real_Object*, bool)
 T TransformLocalToIVP(IVP_U_Float_Point const&, IVP_U_Float_Point&, IVP_Real_Object*, bool)
 T TransformLocalToIVP(IVP_U_Float_Point const&, IVP_U_Point&, IVP_Real_Object*, bool)
 T V_atof(char const*)
 T V_snprintf(char*, int, char const*, ...)
 T V_stricmp(char const*, char const*)
 T V_strlower(char*)
 T V_strncpy(char*, char const*, int)
 T V_vsnprintfRet(char*, int, char const*, char*, bool*)
 T VectorIRotate(float const*, matrix3x4_t const&, float*)
 T VectorITransform(float const*, matrix3x4_t const&, float*)
 T VectorRotate(float const*, matrix3x4_t const&, float*)
 T VectorTransform(float const*, matrix3x4_t const&, float*)
 T VirtualMeshPSI()
 T _InvRSquared(float const*)
 T _SSE_InvRSquared(float const*)
 T _SSE_RSqrtAccurate(float)
 T _SSE_RSqrtFast(float)
 T _SSE_Sqrt(float)
 T _SSE_VectorNormalizeFast(Vector&)
 T _VectorNormalize(Vector&)
 T _VectorNormalizeFast(Vector&)
 T __clang_call_terminate
 T _rsqrtf(float)
 T _sqrtf(float)
 T datamap_t* DataMapInit<vehicle_operatingparams_t>(vehicle_operatingparams_t*)
 T datamap_t* DataMapInit<vehicle_wheelparams_t>(vehicle_wheelparams_t*)
 T datamap_t* DataMapInit<vphysics_save_cshadowcontroller_t>(vphysics_save_cshadowcontroller_t*)
 T hk_Array_Base::grow_mem(int)
 T hk_Ball_Socket_Constraint::get_constraint_dof()
 T hk_Ball_Socket_Constraint::get_constraint_type()
 T hk_Ball_Socket_Constraint::get_vmq_storage_size()
 T hk_Ball_Socket_Constraint::hk_Ball_Socket_Constraint(hk_Environment*, hk_Ball_Socket_BP const*, hk_Rigid_Body*, hk_Rigid_Body*)
 T hk_Ball_Socket_Constraint::hk_Ball_Socket_Constraint(hk_Local_Constraint_System*, hk_Ball_Socket_BP const*, hk_Rigid_Body*, hk_Rigid_Body*)
 T hk_Ball_Socket_Constraint::init_constraint(void const*)
 T hk_Ball_Socket_Constraint::setup_and_step_constraint(hk_PSI_Info&, void*, float, float)
 T hk_Ball_Socket_Constraint::step_constraint(hk_PSI_Info&, void*, float, float)
 T hk_Ball_Socket_Constraint::write_to_blueprint(hk_Ball_Socket_BP*)
 T hk_Ball_Socket_Constraint::~hk_Ball_Socket_Constraint()
 T hk_Breakable_Constraint::get_constraint_dof()
 T hk_Breakable_Constraint::get_constraint_type()
 T hk_Breakable_Constraint::get_vmq_storage_size()
 T hk_Breakable_Constraint::hk_Breakable_Constraint(hk_Local_Constraint_System*, hk_Breakable_Constraint_BP const*)
 T hk_Breakable_Constraint::init_constraint(void const*)
 T hk_Breakable_Constraint::setup_and_step_constraint(hk_PSI_Info&, void*, float, float)
 T hk_Breakable_Constraint::step_constraint(hk_PSI_Info&, void*, float, float)
 T hk_Breakable_Constraint::write_to_blueprint(hk_Breakable_Constraint_BP*)
 T hk_Breakable_Constraint::~hk_Breakable_Constraint()
 T hk_Constraint::get_constraint_dof()
 T hk_Constraint::get_constraint_type()
 T hk_Constraint::hk_Constraint(hk_Local_Constraint_System*, hk_Rigid_Body*, hk_Rigid_Body*, IVP_CONTROLLER_PRIORITY, int)
 T hk_Constraint::~hk_Constraint()
 T hk_Constraint_Limit_Util::do_angular_limit(hk_PSI_Info&, hk_Rigid_Body*, hk_Vector3&, float, hk_Rigid_Body*, hk_Constraint_Limit&, float, float)
 T hk_Constraint_Limit_Util::do_angular_plane_limit(hk_PSI_Info&, hk_Rigid_Body*, hk_Rigid_Body*, hk_Vector3&, hk_Vector3&, float, hk_Constraint_Limit&, float, float)
 T hk_Constraint_Limit_Util::do_linear_limit(hk_PSI_Info&, hk_Rigid_Body*, hk_Rigid_Body*, hk_Vector3&, hk_Vector3&, hk_Vector3&, hk_Constraint_Limit&, float, float)
 T hk_Dense_Matrix_Util::invert_3x3_symmetric(hk_Dense_Matrix&, float)
 T hk_Dense_Matrix_Util::invert_5x5(hk_Fixed_Dense_Matrix<5>&, float)
 T hk_Dense_Matrix_Util::invert_6x6(hk_Fixed_Dense_Matrix<6>&, float)
 T hk_Dense_Matrix_Util::mult(hk_Dense_Matrix const&, hk_Dense_Vector const&, hk_Dense_Vector&)
 T hk_Fixed_Constraint::get_constraint_dof()
 T hk_Fixed_Constraint::get_constraint_type()
 T hk_Fixed_Constraint::get_vmq_storage_size()
 T hk_Fixed_Constraint::hk_Fixed_Constraint(hk_Environment*, hk_Fixed_BP const*, hk_Rigid_Body*, hk_Rigid_Body*)
 T hk_Fixed_Constraint::hk_Fixed_Constraint(hk_Local_Constraint_System*, hk_Fixed_BP const*, hk_Rigid_Body*, hk_Rigid_Body*)
 T hk_Fixed_Constraint::init_constraint(void const*)
 T hk_Fixed_Constraint::setup_and_step_constraint(hk_PSI_Info&, void*, float, float)
 T hk_Fixed_Constraint::step_constraint(hk_PSI_Info&, void*, float, float)
 T hk_Fixed_Constraint::write_to_blueprint(hk_Fixed_BP*)
 T hk_Fixed_Constraint::~hk_Fixed_Constraint()
 T hk_Hinge_BP_Builder::set_angular_limits(float, float)
 T hk_Hinge_BP_Builder::set_angular_motor(float, float)
 T hk_Hinge_BP_Builder::set_axis_perp_os(int, hk_Vector3 const&)
 T hk_Hinge_BP_Builder::set_axis_ws(hk_Rigid_Body*, hk_Rigid_Body*, hk_Vector3 const&)
 T hk_Hinge_BP_Builder::set_position_os(int, hk_Vector3 const&)
 T hk_Hinge_BP_Builder::set_tau(float)
 T hk_Hinge_Constraint::get_constraint_dof()
 T hk_Hinge_Constraint::get_constraint_type()
 T hk_Hinge_Constraint::get_vmq_storage_size()
 T hk_Hinge_Constraint::hk_Hinge_Constraint(hk_Environment*, hk_Hinge_BP const*, hk_Rigid_Body*, hk_Rigid_Body*)
 T hk_Hinge_Constraint::hk_Hinge_Constraint(hk_Local_Constraint_System*, hk_Hinge_BP const*, hk_Rigid_Body*, hk_Rigid_Body*)
 T hk_Hinge_Constraint::init_constraint(void const*)
 T hk_Hinge_Constraint::init_hinge_constraint(hk_Hinge_BP const*)
 T hk_Hinge_Constraint::set_motor(float, float)
 T hk_Hinge_Constraint::setup_and_step_constraint(hk_PSI_Info&, void*, float, float)
 T hk_Hinge_Constraint::step_constraint(hk_PSI_Info&, void*, float, float)
 T hk_Hinge_Constraint::write_to_blueprint(hk_Hinge_BP*)
 T hk_Hinge_Constraint::~hk_Hinge_Constraint()
 T hk_Link_EF::anchor_will_be_deleted_event(IVP_Anchor*)
 T hk_Link_EF::core_is_going_to_be_deleted_event(IVP_Core*)
 T hk_Link_EF::do_simulation_controller(IVP_Event_Sim*, IVP_U_Vector<IVP_Core>*)
 T hk_Link_EF::get_associated_controlled_cores()
 T hk_Link_EF::get_controller_name()
 T hk_Link_EF::get_controller_priority()
 T hk_Link_EF::~hk_Link_EF()
 T hk_Local_Constraint_System::activate()
 T hk_Local_Constraint_System::add_constraint(hk_Constraint*, int)
 T hk_Local_Constraint_System::apply_effector_PSI(hk_PSI_Info&, hk_Array<hk_Rigid_Body*>*)
 T hk_Local_Constraint_System::constraint_deletion_event(hk_Constraint*)
 T hk_Local_Constraint_System::core_is_going_to_be_deleted_event(IVP_Core*)
 T hk_Local_Constraint_System::deactivate()
 T hk_Local_Constraint_System::entity_deletion_event(hk_Rigid_Body*)
 T hk_Local_Constraint_System::get_constraints_in_system(hk_Array<hk_Constraint*>&)
 T hk_Local_Constraint_System::get_effector_priority()
 T hk_Local_Constraint_System::hk_Local_Constraint_System(hk_Environment*, hk_Local_Constraint_System_BP*)
 T hk_Local_Constraint_System::report_square_error(float)
 T hk_Local_Constraint_System::solve_penetration(IVP_Real_Object*, IVP_Real_Object*)
 T hk_Local_Constraint_System::sort_constraints()
 T hk_Local_Constraint_System::write_to_blueprint(hk_Local_Constraint_System_BP*)
 T hk_Local_Constraint_System::~hk_Local_Constraint_System()
 T hk_Math::srand01(unsigned int)
 T hk_Matrix3::rotate(int, float)
 T hk_Matrix3::set_mul3(hk_Matrix3 const&, hk_Matrix3 const&)
 T hk_Matrix3::set_mul3_inv(hk_Rotation const&, hk_Matrix3 const&)
 T hk_Memory::allocate(int, hk_MEMORY_CLASS)
 T hk_Memory::allocate_real(int)
 T hk_Memory::deallocate(void*, int, hk_MEMORY_CLASS)
 T hk_Memory::get_instance()
 T hk_Prismatic_Constraint::get_constraint_dof()
 T hk_Prismatic_Constraint::get_constraint_type()
 T hk_Prismatic_Constraint::get_vmq_storage_size()
 T hk_Prismatic_Constraint::hk_Prismatic_Constraint(hk_Environment*, hk_Prismatic_BP const*, hk_Rigid_Body*, hk_Rigid_Body*)
 T hk_Prismatic_Constraint::hk_Prismatic_Constraint(hk_Local_Constraint_System*, hk_Prismatic_BP const*, hk_Rigid_Body*, hk_Rigid_Body*)
 T hk_Prismatic_Constraint::init_constraint(void const*)
 T hk_Prismatic_Constraint::init_prismatic_constraint(hk_Prismatic_BP const*, hk_Local_Constraint_System*)
 T hk_Prismatic_Constraint::reset_linear_limit()
 T hk_Prismatic_Constraint::set_motor(float, float)
 T hk_Prismatic_Constraint::setup_and_step_constraint(hk_PSI_Info&, void*, float, float)
 T hk_Prismatic_Constraint::step_constraint(hk_PSI_Info&, void*, float, float)
 T hk_Prismatic_Constraint::write_to_blueprint(hk_Prismatic_BP*)
 T hk_Prismatic_Constraint::~hk_Prismatic_Constraint()
 T hk_Pulley_Constraint::get_constraint_dof()
 T hk_Pulley_Constraint::get_constraint_type()
 T hk_Pulley_Constraint::get_vmq_storage_size()
 T hk_Pulley_Constraint::hk_Pulley_Constraint(hk_Environment*, hk_Pulley_BP const*, hk_Rigid_Body*, hk_Rigid_Body*)
 T hk_Pulley_Constraint::hk_Pulley_Constraint(hk_Local_Constraint_System*, hk_Pulley_BP const*, hk_Rigid_Body*, hk_Rigid_Body*)
 T hk_Pulley_Constraint::init_constraint(void const*)
 T hk_Pulley_Constraint::setup_and_step_constraint(hk_PSI_Info&, void*, float, float)
 T hk_Pulley_Constraint::step_constraint(hk_PSI_Info&, void*, float, float)
 T hk_Pulley_Constraint::write_to_blueprint(hk_Pulley_BP*)
 T hk_Pulley_Constraint::~hk_Pulley_Constraint()
 T hk_Quaternion::set(hk_Rotation const&)
 T hk_Ragdoll_Constraint::get_constraint_dof()
 T hk_Ragdoll_Constraint::get_constraint_type()
 T hk_Ragdoll_Constraint::get_vmq_storage_size()
 T hk_Ragdoll_Constraint::hk_Ragdoll_Constraint(hk_Environment*, hk_Ragdoll_Constraint_BP const*, hk_Rigid_Body*, hk_Rigid_Body*)
 T hk_Ragdoll_Constraint::hk_Ragdoll_Constraint(hk_Local_Constraint_System*, hk_Ragdoll_Constraint_BP const*, hk_Rigid_Body*, hk_Rigid_Body*)
 T hk_Ragdoll_Constraint::init_constraint(void const*)
 T hk_Ragdoll_Constraint::init_ragdoll_constraint(hk_Ragdoll_Constraint_BP const*, hk_Local_Constraint_System*)
 T hk_Ragdoll_Constraint::setup_and_step_constraint(hk_PSI_Info&, void*, float, float)
 T hk_Ragdoll_Constraint::step_constraint(hk_PSI_Info&, void*, float, float)
 T hk_Ragdoll_Constraint::update_friction(float)
 T hk_Ragdoll_Constraint::update_transforms(hk_Transform const&, hk_Transform const&)
 T hk_Ragdoll_Constraint::write_to_blueprint(hk_Ragdoll_Constraint_BP*)
 T hk_Ragdoll_Constraint::~hk_Ragdoll_Constraint()
 T hk_Ragdoll_Constraint_BP_Builder::initialize_from_limited_ball_socket_bp(hk_Limited_Ball_Socket_BP const*, hk_Rigid_Body*, hk_Rigid_Body*)
 T hk_Rigid_Body::get_transform_next_PSI(float)
 T hk_Rigid_Body_Binary_EF::get_effected_entities(hk_Array<hk_Rigid_Body*>&)
 T hk_Rigid_Body_Binary_EF::hk_Rigid_Body_Binary_EF(hk_Environment*, hk_Rigid_Body*, hk_Rigid_Body*, IVP_CONTROLLER_PRIORITY)
 T hk_Rigid_Body_Core::add_to_mass_matrix_inv(hk_Core_VMQ_Input&, hk_Dense_Matrix&, float*)
 T hk_Rigid_Body_Core::apply_impulses(hk_Core_VMQ_Input&, float const*)
 T hk_Rotation::set(hk_Quaternion const&)
 T hk_Stiff_Spring_Constraint::get_constraint_dof()
 T hk_Stiff_Spring_Constraint::get_constraint_type()
 T hk_Stiff_Spring_Constraint::get_vmq_storage_size()
 T hk_Stiff_Spring_Constraint::hk_Stiff_Spring_Constraint(hk_Environment*, hk_Stiff_Spring_BP const*, hk_Rigid_Body*, hk_Rigid_Body*)
 T hk_Stiff_Spring_Constraint::hk_Stiff_Spring_Constraint(hk_Local_Constraint_System*, hk_Stiff_Spring_BP const*, hk_Rigid_Body*, hk_Rigid_Body*)
 T hk_Stiff_Spring_Constraint::init_constraint(void const*)
 T hk_Stiff_Spring_Constraint::setup_and_step_constraint(hk_PSI_Info&, void*, float, float)
 T hk_Stiff_Spring_Constraint::step_constraint(hk_PSI_Info&, void*, float, float)
 T hk_Stiff_Spring_Constraint::write_to_blueprint(hk_Stiff_Spring_BP*)
 T hk_Stiff_Spring_Constraint::~hk_Stiff_Spring_Constraint()
 T hk_Transform::set_identity_transform()
 T hk_Vector3::set_rotated_dir(hk_Rotation const&, hk_Vector3 const&)
 T hk_Vector3::set_rotated_inv_dir(hk_Rotation const&, hk_Vector3 const&)
 T hk_Vector3::set_transformed_pos(hk_Transform const&, hk_Vector3 const&)
 T hk_Vector3_Util::perp_vec(hk_Vector3 const&)
 T ivp_core_get_surface_speed_os(IVP_Core*, IVP_Real_Object*, IVP_U_Float_Point const*, IVP_U_Float_Point*)
 T ivp_free_aligned(void*)
 T ivp_malloc_aligned(int, int)
 T ivp_message(char const*, ...)
 T ivp_rand()
 T ivp_set_message_print_function(void (*)(char const*))
 T ivp_srand(int)
 T non-virtual thunk to CCollisionSolver::environment_will_be_deleted(IVP_Environment*)
 T non-virtual thunk to CCollisionSolver::inter_penetration(IVP_Mindist*, IVP_Real_Object*, IVP_Real_Object*, double)
 T non-virtual thunk to CCollisionSolver::max_collision_checks_exceeded(int)
 T non-virtual thunk to CCollisionSolver::max_collisions_exceeded_check_freezing(IVP_Anomaly_Limits*, IVP_Core*)
 T non-virtual thunk to CCollisionSolver::max_contacts_exceeded_check_freezing(IVP_Core**, int)
 T non-virtual thunk to CCollisionSolver::max_velocity_exceeded(IVP_Anomaly_Limits*, IVP_Core*, IVP_U_Float_Point*)
 T non-virtual thunk to CCollisionSolver::~CCollisionSolver()
 T non-virtual thunk to CEmptyConVar::GetName() const
 T non-virtual thunk to CEmptyConVar::IsFlagSet(int) const
 T non-virtual thunk to CEmptyConVar::SetValue(char const*)
 T non-virtual thunk to CEmptyConVar::SetValue(float)
 T non-virtual thunk to CEmptyConVar::SetValue(int)
 T non-virtual thunk to CPhysicsConstraint::event_object_created(IVP_Event_Object*)
 T non-virtual thunk to CPhysicsConstraint::event_object_deleted(IVP_Event_Object*)
 T non-virtual thunk to CPhysicsConstraint::event_object_frozen(IVP_Event_Object*)
 T non-virtual thunk to CPhysicsConstraint::event_object_revived(IVP_Event_Object*)
 T non-virtual thunk to CPhysicsConstraint::~CPhysicsConstraint()
 T non-virtual thunk to CPhysicsListenerCollision::core_entered_volume(IVP_Controller_Phantom*, IVP_Core*)
 T non-virtual thunk to CPhysicsListenerCollision::core_left_volume(IVP_Controller_Phantom*, IVP_Core*)
 T non-virtual thunk to CPhysicsListenerCollision::mindist_entered_volume(IVP_Controller_Phantom*, IVP_Mindist_Base*)
 T non-virtual thunk to CPhysicsListenerCollision::mindist_left_volume(IVP_Controller_Phantom*, IVP_Mindist_Base*)
 T non-virtual thunk to CPhysicsListenerCollision::phantom_is_going_to_be_deleted_event(IVP_Controller_Phantom*)
 T non-virtual thunk to CPhysicsMotionController::AttachObject(IPhysicsObject*, bool)
 T non-virtual thunk to CPhysicsMotionController::ClearObjects()
 T non-virtual thunk to CPhysicsMotionController::CountObjects()
 T non-virtual thunk to CPhysicsMotionController::DetachObject(IPhysicsObject*)
 T non-virtual thunk to CPhysicsMotionController::GetObjects(IPhysicsObject**)
 T non-virtual thunk to CPhysicsMotionController::SetEventHandler(IMotionEvent*)
 T non-virtual thunk to CPhysicsMotionController::SetPriority(IPhysicsMotionController::priority_t)
 T non-virtual thunk to CPhysicsMotionController::WakeObjects()
 T non-virtual thunk to CPhysicsMotionController::~CPhysicsMotionController()
 T non-virtual thunk to CPhysicsSpring::event_object_created(IVP_Event_Object*)
 T non-virtual thunk to CPhysicsSpring::event_object_deleted(IVP_Event_Object*)
 T non-virtual thunk to CPhysicsSpring::event_object_frozen(IVP_Event_Object*)
 T non-virtual thunk to CPhysicsSpring::event_object_revived(IVP_Event_Object*)
 T non-virtual thunk to CPhysicsSpring::~CPhysicsSpring()
 T non-virtual thunk to CPhysics_Airboat::core_is_going_to_be_deleted_event(IVP_Core*)
 T non-virtual thunk to CPhysics_Airboat::do_simulation_controller(IVP_Event_Sim*, IVP_U_Vector<IVP_Core>*)
 T non-virtual thunk to CPhysics_Airboat::get_associated_controlled_cores()
 T non-virtual thunk to CPhysics_Airboat::get_controller_name()
 T non-virtual thunk to CPhysics_Airboat::get_controller_priority()
 T non-virtual thunk to CPhysics_Airboat::~CPhysics_Airboat()
 T non-virtual thunk to CPhysics_Car_System_Raycast_Wheels::get_controller_name()
 T non-virtual thunk to CPhysics_Car_System_Raycast_Wheels::~CPhysics_Car_System_Raycast_Wheels()
 T non-virtual thunk to CPlayerController::GetLastImpulse(Vector*)
 T non-virtual thunk to CPlayerController::GetObject()
 T non-virtual thunk to CPlayerController::GetPushMassLimit()
 T non-virtual thunk to CPlayerController::GetPushSpeedLimit()
 T non-virtual thunk to CPlayerController::GetShadowPosition(Vector*, QAngle*)
 T non-virtual thunk to CPlayerController::GetShadowVelocity(Vector*)
 T non-virtual thunk to CPlayerController::IsInContact()
 T non-virtual thunk to CPlayerController::Jump()
 T non-virtual thunk to CPlayerController::MaxSpeed(Vector const&)
 T non-virtual thunk to CPlayerController::SetEventHandler(IPhysicsPlayerControllerEvent*)
 T non-virtual thunk to CPlayerController::SetObject(IPhysicsObject*)
 T non-virtual thunk to CPlayerController::SetPushMassLimit(float)
 T non-virtual thunk to CPlayerController::SetPushSpeedLimit(float)
 T non-virtual thunk to CPlayerController::StepUp(float)
 T non-virtual thunk to CPlayerController::Update(Vector const&, Vector const&, float, bool, IPhysicsObject*)
 T non-virtual thunk to CPlayerController::WasFrozen()
 T non-virtual thunk to CPlayerController::event_object_created(IVP_Event_Object*)
 T non-virtual thunk to CPlayerController::event_object_deleted(IVP_Event_Object*)
 T non-virtual thunk to CPlayerController::event_object_frozen(IVP_Event_Object*)
 T non-virtual thunk to CPlayerController::event_object_revived(IVP_Event_Object*)
 T non-virtual thunk to CPlayerController::~CPlayerController()
 T non-virtual thunk to CShadowController::AllowsRotation()
 T non-virtual thunk to CShadowController::AllowsTranslation()
 T non-virtual thunk to CShadowController::GetLastImpulse(Vector*)
 T non-virtual thunk to CShadowController::GetMaxSpeed(float*, float*)
 T non-virtual thunk to CShadowController::GetTargetPosition(Vector*, QAngle*)
 T non-virtual thunk to CShadowController::GetTeleportDistance()
 T non-virtual thunk to CShadowController::IsPhysicallyControlled()
 T non-virtual thunk to CShadowController::MaxSpeed(float, float)
 T non-virtual thunk to CShadowController::ObjectMaterialChanged(int)
 T non-virtual thunk to CShadowController::SetPhysicallyControlled(bool)
 T non-virtual thunk to CShadowController::SetTeleportDistance(float)
 T non-virtual thunk to CShadowController::StepUp(float)
 T non-virtual thunk to CShadowController::Update(Vector const&, QAngle const&, float)
 T non-virtual thunk to CShadowController::UseShadowMaterial(bool)
 T non-virtual thunk to CShadowController::~CShadowController()
 T non-virtual thunk to CVehicleController::event_object_created(IVP_Event_Object*)
 T non-virtual thunk to CVehicleController::event_object_deleted(IVP_Event_Object*)
 T non-virtual thunk to CVehicleController::event_object_frozen(IVP_Event_Object*)
 T non-virtual thunk to CVehicleController::event_object_revived(IVP_Event_Object*)
 T non-virtual thunk to CVehicleController::~CVehicleController()
 T non-virtual thunk to ConVar::GetName() const
 T non-virtual thunk to ConVar::IsFlagSet(int) const
 T non-virtual thunk to ConVar::SetValue(char const*)
 T non-virtual thunk to ConVar::SetValue(float)
 T non-virtual thunk to ConVar::SetValue(int)
 T non-virtual thunk to IVP_Actuator_Force_Active::active_float_changed(IVP_U_Active_Float*)
 T non-virtual thunk to IVP_Actuator_Spring_Active::active_float_changed(IVP_U_Active_Float*)
 T non-virtual thunk to IVP_Actuator_Torque_Active::active_float_changed(IVP_U_Active_Float*)
 T non-virtual thunk to IVP_Controller_Raycast_Car::core_is_going_to_be_deleted_event(IVP_Core*)
 T non-virtual thunk to IVP_Controller_Raycast_Car::do_simulation_controller(IVP_Event_Sim*, IVP_U_Vector<IVP_Core>*)
 T non-virtual thunk to IVP_Controller_Raycast_Car::get_associated_controlled_cores()
 T non-virtual thunk to IVP_Controller_Raycast_Car::get_controller_priority()
 T non-virtual thunk to IVP_Controller_Raycast_Car::~IVP_Controller_Raycast_Car()
 T non-virtual thunk to IVP_Mindist_Recursive::change_spawned_mindist_count(int)
 T non-virtual thunk to IVP_Mindist_Recursive::collision_is_going_to_be_deleted_event(IVP_Collision*)
 T non-virtual thunk to IVP_Mindist_Recursive::get_spawned_mindist_count()
 T non-virtual thunk to IVP_Mindist_Recursive::~IVP_Mindist_Recursive()
 T non-virtual thunk to IVP_OO_Watcher::collision_is_going_to_be_deleted_event(IVP_Collision*)
 T non-virtual thunk to IVP_OO_Watcher::~IVP_OO_Watcher()
 T non-virtual thunk to IVP_U_Active_Terminal_Double::update_float()
 T non-virtual thunk to IVP_U_Active_Terminal_Int::update_int()
 T operator delete(void*)
 T operator delete[](void*)
 T operator new(unsigned long)
 T operator new[](unsigned long)
 T p_calloc(int, int)
 T p_free(void*)
 T p_link_triangle_self(IVP_Triangle*)
 T p_malloc(unsigned int)
 T p_strcmp(char const*, char const*)
 T p_strdup(char const*)
 T p_strlen(char const*)
 T qh_addhash(void*, setT*, int, unsigned int)
 T qh_addpoint(double*, facetT*, unsigned int)
 T qh_all_merges(unsigned int, unsigned int)
 T qh_allstatA()
 T qh_allstatB()
 T qh_allstatC()
 T qh_allstatD()
 T qh_allstatE()
 T qh_allstatF()
 T qh_allstatG()
 T qh_allstatH()
 T qh_allstatI()
 T qh_allstatistics()
 T qh_appendfacet(facetT*)
 T qh_appendmergeset(facetT*, facetT*, mergeType, double*)
 T qh_appendvertex(vertexT*)
 T qh_attachnewfacets()
 T qh_backnormal(double**, int, int, unsigned int, double*, unsigned int*)
 T qh_basevertices(facetT*)
 T qh_build_withrestart()
 T qh_buildhull()
 T qh_buildtracing(double*, facetT*)
 T qh_check_maxout()
 T qh_checkconvex(facetT*, int)
 T qh_checkfacet(facetT*, unsigned int, unsigned int*)
 T qh_checkflipped(facetT*, double*, unsigned int)
 T qh_checkflipped_all(facetT*)
 T qh_checkpolygon(facetT*)
 T qh_checkvertex(vertexT*)
 T qh_checkzero(unsigned int)
 T qh_clearcenters(qh_CENTER)
 T qh_collectstatistics()
 T qh_countfacets(facetT*, setT*, unsigned int, int*, int*, int*, int*, int*)
 T qh_createsimplex(setT*)
 T qh_crossproduct(int, double*, double*, double*)
 T qh_degen_redundant_facet(facetT*)
 T qh_degen_redundant_neighbors(facetT*, facetT*)
 T qh_deletevisible()
 T qh_delfacet(facetT*)
 T qh_delridge(ridgeT*)
 T qh_delvertex(vertexT*)
 T qh_determinant(double**, int, unsigned int*)
 T qh_detjoggle(double*, int, int)
 T qh_detroundoff()
 T qh_detsimplex(double*, setT*, int, unsigned int*)
 T qh_detvnorm(vertexT*, vertexT*, setT*, double*)
 T qh_detvridge(vertexT*)
 T qh_detvridge3(vertexT*, vertexT*)
 T qh_distnorm(int, double*, double*, double*)
 T qh_distplane(double*, facetT*, double*)
 T qh_divzero(double, double, double, unsigned int*)
 T qh_eachvoronoi(__sFILE*, void (*)(__sFILE*, vertexT*, vertexT*, setT*, unsigned int), vertexT*, unsigned int, qh_RIDGE, unsigned int)
 T qh_errexit(int, facetT*, ridgeT*)
 T qh_errexit2(int, facetT*, facetT*)
 T qh_errprint(char const*, facetT*, facetT*, ridgeT*, vertexT*)
 T qh_facet2point(facetT*, double**, double**, double*)
 T qh_facet3vertex(facetT*)
 T qh_facetarea(facetT*)
 T qh_facetarea_simplex(int, double*, setT*, vertexT*, unsigned int, double*, double*)
 T qh_facetcenter(setT*)
 T qh_facetintersect(facetT*, facetT*, int*, int*, int)
 T qh_facetvertices(facetT*, setT*, unsigned int)
 T qh_find_newvertex(vertexT*, setT*, setT*)
 T qh_findbest(double*, facetT*, unsigned int, unsigned int, unsigned int, double*, unsigned int*, int*)
 T qh_findbestneighbor(facetT*, double*, double*, double*)
 T qh_findbestnew(double*, facetT*, double*, unsigned int*, int*)
 T qh_findbestsharp(double*, facetT**, double*, int*)
 T qh_findgood(facetT*, int)
 T qh_findgood_all(facetT*)
 T qh_findgooddist(double*, facetT*, double*, facetT**)
 T qh_findhorizon(double*, facetT*, int*, int*)
 T qh_flippedmerges(facetT*, unsigned int*)
 T qh_forcedmerges(unsigned int*)
 T qh_freebuffers()
 T qh_freebuild(unsigned int)
 T qh_freeqhull(unsigned int)
 T qh_freestatistics()
 T qh_furthestnext()
 T qh_furthestout(facetT*)
 T qh_gausselim(double**, int, int, unsigned int*, unsigned int*)
 T qh_getangle(double*, double*)
 T qh_getarea(facetT*)
 T qh_getcenter(setT*)
 T qh_getcentrum(facetT*)
 T qh_getdistance(facetT*, facetT*, double*, double*)
 T qh_gethash(int, setT*, int, int, void*)
 T qh_getmergeset(facetT*)
 T qh_getmergeset_initial(facetT*)
 T qh_gram_schmidt(int, double**)
 T qh_hashridge_find(setT*, int, ridgeT*, vertexT*, vertexT*, int*)
 T qh_infiniteloop(facetT*)
 T qh_init_B(double*, int, int, unsigned int)
 T qh_initbuild()
 T qh_initflags(char*)
 T qh_initialhull(setT*)
 T qh_initialvertices(int, setT*, double*, int)
 T qh_initqhull_buffers()
 T qh_initqhull_globals(double*, int, int, unsigned int)
 T qh_initqhull_mem()
 T qh_initqhull_start(__sFILE*, __sFILE*, __sFILE*)
 T qh_initstatistics()
 T qh_initthresholds(char*)
 T qh_inthresholds(double*, double*)
 T qh_joggleinput()
 T qh_makenew_nonsimplicial(facetT*, vertexT*, int*)
 T qh_makenew_simplicial(facetT*, vertexT*, int*)
 T qh_makenewfacet(setT*, unsigned int, facetT*)
 T qh_makenewfacets(double*)
 T qh_makenewplanes()
 T qh_makeridges(facetT*)
 T qh_mark_dupridges(facetT*)
 T qh_markkeep(facetT*)
 T qh_markvoronoi(facetT*, setT*, unsigned int, unsigned int*, int*)
 T qh_matchduplicates(facetT*, int, int, int*)
 T qh_matchneighbor(facetT*, int, int, int*)
 T qh_matchnewfacets()
 T qh_matchvertices(int, setT*, int, setT*, int*, unsigned int*)
 T qh_maxabsval(double*, int)
 T qh_maxmin(double*, int, int)
 T qh_maxsimplex(int, setT*, double*, int, setT**)
 T qh_maydropneighbor(facetT*)
 T qh_memalloc(int)
 T qh_memfree(void*, int)
 T qh_memfreeshort(int*, int*)
 T qh_meminit(__sFILE*)
 T qh_meminitbuffers(int, int, int, int, int)
 T qh_memsetup()
 T qh_memsize(int)
 T qh_memstatistics(__sFILE*)
 T qh_merge_degenredundant()
 T qh_merge_nonconvex(facetT*, facetT*, mergeType)
 T qh_mergecycle(facetT*, facetT*)
 T qh_mergecycle_all(facetT*, unsigned int*)
 T qh_mergecycle_facets(facetT*, facetT*)
 T qh_mergecycle_neighbors(facetT*, facetT*)
 T qh_mergecycle_ridges(facetT*, facetT*)
 T qh_mergecycle_vneighbors(facetT*, facetT*)
 T qh_mergefacet(facetT*, facetT*, double*, double*, unsigned int)
 T qh_mergefacet2d(facetT*, facetT*)
 T qh_mergeneighbors(facetT*, facetT*)
 T qh_mergeridges(facetT*, facetT*)
 T qh_mergesimplex(facetT*, facetT*, unsigned int)
 T qh_mergevertex_neighbors(facetT*, facetT*)
 T qh_mergevertices(setT*, setT**)
 T qh_nearcoplanar()
 T qh_nearvertex(facetT*, double*, double*)
 T qh_neighbor_intersections(vertexT*)
 T qh_new_qhull(int, int, double*, unsigned int, char*, __sFILE*, __sFILE*)
 T qh_newfacet()
 T qh_newhashtable(int)
 T qh_newridge()
 T qh_newvertex(double*)
 T qh_nextfurthest(facetT**)
 T qh_nextridge3d(ridgeT*, facetT*, vertexT**)
 T qh_normalize(double*, int, unsigned int)
 T qh_normalize2(double*, int, unsigned int, double*, unsigned int*)
 T qh_option(char const*, int*, double*)
 T qh_order_vertexneighbors(vertexT*)
 T qh_orientoutside(facetT*)
 T qh_outcoplanar()
 T qh_outerinner(facetT*, double*, double*)
 T qh_partitionall(setT*, double*, int)
 T qh_partitioncoplanar(double*, facetT*, double*)
 T qh_partitionpoint(double*, facetT*)
 T qh_partitionvisible(unsigned int, int*)
 T qh_point_add(setT*, double*, void*)
 T qh_pointdist(double*, double*, int)
 T qh_pointfacet()
 T qh_pointid(double*)
 T qh_pointvertex()
 T qh_postmerge(char const*, double, double, unsigned int)
 T qh_precision(char const*)
 T qh_premerge(vertexT*, double, double)
 T qh_prependfacet(facetT*, facetT**)
 T qh_printafacet(__sFILE*, int, facetT*, unsigned int)
 T qh_printallstatistics(__sFILE*, char const*)
 T qh_printbegin(__sFILE*, int, facetT*, setT*, unsigned int)
 T qh_printcenter(__sFILE*, int, char const*, facetT*)
 T qh_printcentrum(__sFILE*, facetT*, double)
 T qh_printend(__sFILE*, int, facetT*, setT*, unsigned int)
 T qh_printend4geom(__sFILE*, facetT*, int*, unsigned int)
 T qh_printextremes(__sFILE*, facetT*, setT*, int)
 T qh_printextremes_2d(__sFILE*, facetT*, setT*, int)
 T qh_printextremes_d(__sFILE*, facetT*, setT*, int)
 T qh_printfacet(__sFILE*, facetT*)
 T qh_printfacet2geom(__sFILE*, facetT*, double*)
 T qh_printfacet2geom_points(__sFILE*, double*, double*, facetT*, double, double*)
 T qh_printfacet2math(__sFILE*, facetT*, int)
 T qh_printfacet3geom_nonsimplicial(__sFILE*, facetT*, double*)
 T qh_printfacet3geom_points(__sFILE*, setT*, facetT*, double, double*)
 T qh_printfacet3geom_simplicial(__sFILE*, facetT*, double*)
 T qh_printfacet3math(__sFILE*, facetT*, int)
 T qh_printfacet3vertex(__sFILE*, facetT*, int)
 T qh_printfacet4geom_nonsimplicial(__sFILE*, facetT*, double*)
 T qh_printfacet4geom_simplicial(__sFILE*, facetT*, double*)
 T qh_printfacetNvertex_nonsimplicial(__sFILE*, facetT*, int, int)
 T qh_printfacetNvertex_simplicial(__sFILE*, facetT*, int)
 T qh_printfacetheader(__sFILE*, facetT*)
 T qh_printfacetlist(facetT*, setT*, unsigned int)
 T qh_printfacetridges(__sFILE*, facetT*)
 T qh_printfacets(__sFILE*, int, facetT*, setT*, unsigned int)
 T qh_printhashtable(__sFILE*)
 T qh_printhelp_degenerate(__sFILE*)
 T qh_printhelp_singular(__sFILE*)
 T qh_printhyperplaneintersection(__sFILE*, facetT*, facetT*, setT*, double*)
 T qh_printline3geom(__sFILE*, double*, double*, double*)
 T qh_printlists()
 T qh_printmatrix(__sFILE*, char const*, double**, int, int)
 T qh_printneighborhood(__sFILE*, int, facetT*, facetT*, unsigned int)
 T qh_printpoint3(__sFILE*, double*)
 T qh_printpoints(__sFILE*, char const*, setT*)
 T qh_printpoints_out(__sFILE*, facetT*, setT*, int)
 T qh_printpointvect(__sFILE*, double*, double*, double*, double, double*)
 T qh_printridge(__sFILE*, ridgeT*)
 T qh_printspheres(__sFILE*, setT*, double)
 T qh_printstatistics(__sFILE*, char const*)
 T qh_printstatlevel(__sFILE*, int, int)
 T qh_printstats(__sFILE*, int, int*)
 T qh_printsummary(__sFILE*)
 T qh_printvdiagram(__sFILE*, int, facetT*, setT*, unsigned int)
 T qh_printvertex(__sFILE*, vertexT*)
 T qh_printvertices(__sFILE*, char const*, setT*)
 T qh_printvneighbors(__sFILE*, facetT*, setT*, unsigned int)
 T qh_printvnorm(__sFILE*, vertexT*, vertexT*, setT*, unsigned int)
 T qh_printvoronoi(__sFILE*, int, facetT*, setT*, unsigned int)
 T qh_printvridge(__sFILE*, vertexT*, vertexT*, setT*, unsigned int)
 T qh_produce_output()
 T qh_projectinput()
 T qh_projectpoint(double*, facetT*, double)
 T qh_projectpoints(signed char*, int, double*, int, int, double*, int)
 T qh_qhull()
 T qh_rand()
 T qh_randomfactor()
 T qh_randommatrix(double*, int, double**)
 T qh_reducevertices()
 T qh_redundant_vertex(vertexT*)
 T qh_remove_extravertices(facetT*)
 T qh_removefacet(facetT*)
 T qh_removevertex(vertexT*)
 T qh_rename_sharedvertex(vertexT*, facetT*)
 T qh_renameridgevertex(ridgeT*, vertexT*, vertexT*)
 T qh_renamevertex(vertexT*, vertexT*, setT*, facetT*, facetT*)
 T qh_resetlists(unsigned int)
 T qh_rotateinput(double**)
 T qh_rotatepoints(double*, int, int, double**)
 T qh_scaleinput()
 T qh_scalelast(double*, int, int, double, double, double)
 T qh_scalepoints(double*, int, int, double*, double*)
 T qh_setaddnth(setT**, int, void*)
 T qh_setappend(setT**, void*)
 T qh_setappend2ndlast(setT**, void*)
 T qh_setappend_set(setT**, setT*)
 T qh_setcheck(setT*, char const*, int)
 T qh_setcompact(setT*)
 T qh_setcopy(setT*, int)
 T qh_setdel(setT*, void*)
 T qh_setdelaunay(int, int, double*)
 T qh_setdellast(setT*)
 T qh_setdelnth(setT*, int)
 T qh_setdelnthsorted(setT*, int)
 T qh_setdelsorted(setT*, void*)
 T qh_setequal(setT*, setT*)
 T qh_setequal_except(setT*, void*, setT*, void*)
 T qh_setequal_skip(setT*, int, setT*, int)
 T qh_setfacetplane(facetT*)
 T qh_setfeasible(int)
 T qh_setfree(setT**)
 T qh_setfreelong(setT**)
 T qh_sethalfspace(int, double*, double**, double*, double*, double*)
 T qh_sethalfspace_all(int, int, double*, double*)
 T qh_sethyperplane_det(int, double**, double*, unsigned int, double*, double*, unsigned int*)
 T qh_sethyperplane_gauss(int, double**, double*, unsigned int, double*, double*, unsigned int*)
 T qh_setin(setT*, void*)
 T qh_setindex(setT*, void*)
 T qh_setlarger(setT**)
 T qh_setlast(setT*)
 T qh_setnew(int)
 T qh_setnew_delnthsorted(setT*, int, int, int)
 T qh_setprint(__sFILE*, char const*, setT*)
 T qh_setreplace(setT*, void*, void*)
 T qh_setsize(setT*)
 T qh_settemp(int)
 T qh_settempfree(setT**)
 T qh_settempfree_all()
 T qh_settemppop()
 T qh_settemppush(setT*)
 T qh_settruncate(setT*, int)
 T qh_setunique(setT**, void*)
 T qh_setzero(setT*, int, int)
 T qh_srand(int)
 T qh_strtod(char const*, char**)
 T qh_test_appendmerge(facetT*, facetT*)
 T qh_test_vneighbors()
 T qh_tracemerge(facetT*, facetT*)
 T qh_updatetested(facetT*, facetT*)
 T qh_updatevertices()
 T qh_user_memsizes()
 T qh_vertexintersect(setT**, setT*)
 T qh_vertexintersect_new(setT*, setT*)
 T qh_vertexneighbors()
 T qh_vertexridges(vertexT*)
 T qh_voronoi_center(int, setT*)
 T simplex_t::ClipRayToTetrahedron(Vector const&)
 T simplex_t::ClipRayToTetrahedronBase(Vector const&)
 T simplex_t::ClipRayToTriangle(Vector const&, float)
 T simplex_t::SolveGJKSet(simplexvert_t const&, Vector*)
 T simplex_t::SolveVoronoiRegion2(simplexvert_t const&, Vector*)
 T simplex_t::SolveVoronoiRegion3(simplexvert_t const&, Vector*)
 T simplex_t::SolveVoronoiRegion4(simplexvert_t const&, Vector*)
 T vphysics_init()
 ThreadGetCurrentId
 ThreadInterlockedAssignIf
 ThreadInterlockedAssignIf64
 ThreadInterlockedExchange
 Warning
 _DefaultRuneLocale
 _Unwind_Resume
 __bzero
 __cxa_atexit
 __cxa_begin_catch
 __cxa_call_unexpected
 __cxa_guard_abort
 __cxa_guard_acquire
 __cxa_guard_release
 __cxa_pure_virtual
 __gxx_personality_v0
 __maskrune
 __stack_chk_fail
 __stack_chk_guard
 __stderrp
 __tolower
 __toupper
 acos
 acosf
 asin
 asinf
 atan
 atan2
 atan2f
 atof
 atoi
 b CDataManagerBase::GetForFreeByIndex(unsigned short)::__executeCount
 b CPhysicsEnvironment::Simulate(float)::autoMutex__
 b GetTmpObjectMatrix(IVP_Real_Object*)::coreShiftMatrix
 b IVP_Material_Manager::get_material_by_index(IVP_Real_Object*, IVP_U_Point const*, int)::simple
 b IVP_Mindist::update_exact_mindist_events(IVP_BOOL, IVP_MINDIST_EVENT_HINT)::count
 b InitializeCharacterSets()::s_CharacterSetInitialized
 b __g_CreateCPhysicsCollisionIPhysicsCollision_reg
 b __g_CreateCPhysicsInterfaceIPhysics_reg
 b __g_CreateCPhysicsSurfacePropsIPhysicsSurfaceProps_reg
 b datamap_t* DataMapInit<compactsurfaceheader_t>(compactsurfaceheader_t*)::nameHolder
 b datamap_t* DataMapInit<physcollideheader_t>(physcollideheader_t*)::nameHolder
 b datamap_t* DataMapInit<vehicle_axleparams_t>(vehicle_axleparams_t*)::nameHolder
 b datamap_t* DataMapInit<vehicle_bodyparams_t>(vehicle_bodyparams_t*)::nameHolder
 b datamap_t* DataMapInit<vehicle_engineparams_t>(vehicle_engineparams_t*)::nameHolder
 b datamap_t* DataMapInit<vehicle_operatingparams_t>(vehicle_operatingparams_t*)::dataDesc
 b datamap_t* DataMapInit<vehicle_operatingparams_t>(vehicle_operatingparams_t*)::nameHolder
 b datamap_t* DataMapInit<vehicle_steeringparams_t>(vehicle_steeringparams_t*)::nameHolder
 b datamap_t* DataMapInit<vehicle_suspensionparams_t>(vehicle_suspensionparams_t*)::nameHolder
 b datamap_t* DataMapInit<vehicle_wheelparams_t>(vehicle_wheelparams_t*)::dataDesc
 b datamap_t* DataMapInit<vehicle_wheelparams_t>(vehicle_wheelparams_t*)::nameHolder
 b datamap_t* DataMapInit<vehicleparams_t>(vehicleparams_t*)::nameHolder
 b datamap_t* DataMapInit<vphysics_save_constraintaxislimit_t>(vphysics_save_constraintaxislimit_t*)::nameHolder
 b datamap_t* DataMapInit<vphysics_save_constraintballsocket_t>(vphysics_save_constraintballsocket_t*)::nameHolder
 b datamap_t* DataMapInit<vphysics_save_constraintbreakable_t>(vphysics_save_constraintbreakable_t*)::nameHolder
 b datamap_t* DataMapInit<vphysics_save_constraintfixed_t>(vphysics_save_constraintfixed_t*)::nameHolder
 b datamap_t* DataMapInit<vphysics_save_constrainthinge_t>(vphysics_save_constrainthinge_t*)::nameHolder
 b datamap_t* DataMapInit<vphysics_save_constraintlength_t>(vphysics_save_constraintlength_t*)::nameHolder
 b datamap_t* DataMapInit<vphysics_save_constraintpulley_t>(vphysics_save_constraintpulley_t*)::nameHolder
 b datamap_t* DataMapInit<vphysics_save_constraintragdoll_t>(vphysics_save_constraintragdoll_t*)::nameHolder
 b datamap_t* DataMapInit<vphysics_save_constraintsliding_t>(vphysics_save_constraintsliding_t*)::nameHolder
 b datamap_t* DataMapInit<vphysics_save_cphysicsconstraint_t>(vphysics_save_cphysicsconstraint_t*)::nameHolder
 b datamap_t* DataMapInit<vphysics_save_cphysicsconstraintgroup_t>(vphysics_save_cphysicsconstraintgroup_t*)::nameHolder
 b datamap_t* DataMapInit<vphysics_save_cphysicsobject_t>(vphysics_save_cphysicsobject_t*)::nameHolder
 b datamap_t* DataMapInit<vphysics_save_cphysicsspring_t>(vphysics_save_cphysicsspring_t*)::nameHolder
 b datamap_t* DataMapInit<vphysics_save_cshadowcontroller_t>(vphysics_save_cshadowcontroller_t*)::dataDesc
 b datamap_t* DataMapInit<vphysics_save_cshadowcontroller_t>(vphysics_save_cshadowcontroller_t*)::nameHolder
 b datamap_t* DataMapInit<vphysics_save_cvehiclecontroller_t>(vphysics_save_cvehiclecontroller_t*)::nameHolder
 b datamap_t* DataMapInit<vphysics_save_motioncontroller_t>(vphysics_save_motioncontroller_t*)::nameHolder
 b datamap_t* DataMapInit<vphysics_save_shadowcontrolparams_t>(vphysics_save_shadowcontrolparams_t*)::nameHolder
 b f05
 b f3
 b g_BreakSet
 b g_BreakSetIncludingColons
 b g_CleanupSymbolTable
 b g_ConstraintGroupActivateList
 b g_MainDLLInterface
 b g_Mathlib_GammaToLinear
 b g_Mathlib_LinearToGamma
 b g_MeshManager
 b g_PostRestoreObjectList
 b g_xneg
 b g_xpos
 b g_yneg
 b g_ypos
 b g_zneg
 b g_zpos
 b guard variable for CPhysicsEnvironment::Simulate(float)::autoMutex__
 b guard variable for GetTmpObjectMatrix(IVP_Real_Object*)::coreShiftMatrix
 b guard variable for IVP_Material_Manager::get_material_by_index(IVP_Real_Object*, IVP_U_Point const*, int)::simple
 b guard variable for datamap_t* DataMapInit<compactsurfaceheader_t>(compactsurfaceheader_t*)::nameHolder
 b guard variable for datamap_t* DataMapInit<physcollideheader_t>(physcollideheader_t*)::nameHolder
 b guard variable for datamap_t* DataMapInit<vehicle_axleparams_t>(vehicle_axleparams_t*)::nameHolder
 b guard variable for datamap_t* DataMapInit<vehicle_bodyparams_t>(vehicle_bodyparams_t*)::nameHolder
 b guard variable for datamap_t* DataMapInit<vehicle_engineparams_t>(vehicle_engineparams_t*)::nameHolder
 b guard variable for datamap_t* DataMapInit<vehicle_operatingparams_t>(vehicle_operatingparams_t*)::dataDesc
 b guard variable for datamap_t* DataMapInit<vehicle_operatingparams_t>(vehicle_operatingparams_t*)::nameHolder
 b guard variable for datamap_t* DataMapInit<vehicle_steeringparams_t>(vehicle_steeringparams_t*)::nameHolder
 b guard variable for datamap_t* DataMapInit<vehicle_suspensionparams_t>(vehicle_suspensionparams_t*)::nameHolder
 b guard variable for datamap_t* DataMapInit<vehicle_wheelparams_t>(vehicle_wheelparams_t*)::dataDesc
 b guard variable for datamap_t* DataMapInit<vehicle_wheelparams_t>(vehicle_wheelparams_t*)::nameHolder
 b guard variable for datamap_t* DataMapInit<vehicleparams_t>(vehicleparams_t*)::nameHolder
 b guard variable for datamap_t* DataMapInit<vphysics_save_constraintaxislimit_t>(vphysics_save_constraintaxislimit_t*)::nameHolder
 b guard variable for datamap_t* DataMapInit<vphysics_save_constraintballsocket_t>(vphysics_save_constraintballsocket_t*)::nameHolder
 b guard variable for datamap_t* DataMapInit<vphysics_save_constraintbreakable_t>(vphysics_save_constraintbreakable_t*)::nameHolder
 b guard variable for datamap_t* DataMapInit<vphysics_save_constraintfixed_t>(vphysics_save_constraintfixed_t*)::nameHolder
 b guard variable for datamap_t* DataMapInit<vphysics_save_constrainthinge_t>(vphysics_save_constrainthinge_t*)::nameHolder
 b guard variable for datamap_t* DataMapInit<vphysics_save_constraintlength_t>(vphysics_save_constraintlength_t*)::nameHolder
 b guard variable for datamap_t* DataMapInit<vphysics_save_constraintpulley_t>(vphysics_save_constraintpulley_t*)::nameHolder
 b guard variable for datamap_t* DataMapInit<vphysics_save_constraintragdoll_t>(vphysics_save_constraintragdoll_t*)::nameHolder
 b guard variable for datamap_t* DataMapInit<vphysics_save_constraintsliding_t>(vphysics_save_constraintsliding_t*)::nameHolder
 b guard variable for datamap_t* DataMapInit<vphysics_save_cphysicsconstraint_t>(vphysics_save_cphysicsconstraint_t*)::nameHolder
 b guard variable for datamap_t* DataMapInit<vphysics_save_cphysicsconstraintgroup_t>(vphysics_save_cphysicsconstraintgroup_t*)::nameHolder
 b guard variable for datamap_t* DataMapInit<vphysics_save_cphysicsobject_t>(vphysics_save_cphysicsobject_t*)::nameHolder
 b guard variable for datamap_t* DataMapInit<vphysics_save_cphysicsspring_t>(vphysics_save_cphysicsspring_t*)::nameHolder
 b guard variable for datamap_t* DataMapInit<vphysics_save_cshadowcontroller_t>(vphysics_save_cshadowcontroller_t*)::dataDesc
 b guard variable for datamap_t* DataMapInit<vphysics_save_cshadowcontroller_t>(vphysics_save_cshadowcontroller_t*)::nameHolder
 b guard variable for datamap_t* DataMapInit<vphysics_save_cvehiclecontroller_t>(vphysics_save_cvehiclecontroller_t*)::nameHolder
 b guard variable for datamap_t* DataMapInit<vphysics_save_motioncontroller_t>(vphysics_save_motioncontroller_t*)::nameHolder
 b guard variable for datamap_t* DataMapInit<vphysics_save_shadowcontrolparams_t>(vphysics_save_shadowcontrolparams_t*)::nameHolder
 b guard variable for hk_Memory::get_instance()::s_memory_instance
 b hk_Memory::get_instance()::s_memory_instance
 b ivp_surface_manager_ball_global
 b lineartoscreen
 b lineartotexture
 b nullsurface
 b qh_new_qhull(int, int, double*, unsigned int, char*, __sFILE*, __sFILE*)::firstcall
 b s_BuildVirtualMeshMutex
 b s_EmptyConVar
 b s_TempMemoryPolyhedron
 b s_TempMemoryPolyhedron_Buffer
 b s_VPhysPtrMap
 b s_bConnected
 b s_bMMXEnabled
 b s_bRegistered
 b s_bSSE2Enabled
 b s_bSSEEnabled
 b s_nCVarFlag
 b texturetolinear
 b vec2_invalid
 b vec2_origin
 b vec4_invalid
 b vec4_origin
 ceil
 cos
 cosf
 d .memset_pattern
 d CPhysicsEnvironment::Restore(physrestoreparams_t const&)::restoreFuncs
 d CPhysicsEnvironment::Save(physsaveparams_t const&)::saveFuncs
 d IVP_RAND_SEED
 d IVP_U_Min_Hash::add(void*, double)::sort_counter
 d datamap_t* DataMapInit<compactsurfaceheader_t>(compactsurfaceheader_t*)::dataDesc
 d datamap_t* DataMapInit<physcollideheader_t>(physcollideheader_t*)::dataDesc
 d datamap_t* DataMapInit<vehicle_axleparams_t>(vehicle_axleparams_t*)::dataDesc
 d datamap_t* DataMapInit<vehicle_bodyparams_t>(vehicle_bodyparams_t*)::dataDesc
 d datamap_t* DataMapInit<vehicle_engineparams_t>(vehicle_engineparams_t*)::dataDesc
 d datamap_t* DataMapInit<vehicle_steeringparams_t>(vehicle_steeringparams_t*)::dataDesc
 d datamap_t* DataMapInit<vehicle_suspensionparams_t>(vehicle_suspensionparams_t*)::dataDesc
 d datamap_t* DataMapInit<vehicleparams_t>(vehicleparams_t*)::dataDesc
 d datamap_t* DataMapInit<vphysics_save_constraintaxislimit_t>(vphysics_save_constraintaxislimit_t*)::dataDesc
 d datamap_t* DataMapInit<vphysics_save_constraintballsocket_t>(vphysics_save_constraintballsocket_t*)::dataDesc
 d datamap_t* DataMapInit<vphysics_save_constraintbreakable_t>(vphysics_save_constraintbreakable_t*)::dataDesc
 d datamap_t* DataMapInit<vphysics_save_constraintfixed_t>(vphysics_save_constraintfixed_t*)::dataDesc
 d datamap_t* DataMapInit<vphysics_save_constrainthinge_t>(vphysics_save_constrainthinge_t*)::dataDesc
 d datamap_t* DataMapInit<vphysics_save_constraintlength_t>(vphysics_save_constraintlength_t*)::dataDesc
 d datamap_t* DataMapInit<vphysics_save_constraintpulley_t>(vphysics_save_constraintpulley_t*)::dataDesc
 d datamap_t* DataMapInit<vphysics_save_constraintragdoll_t>(vphysics_save_constraintragdoll_t*)::dataDesc
 d datamap_t* DataMapInit<vphysics_save_constraintsliding_t>(vphysics_save_constraintsliding_t*)::dataDesc
 d datamap_t* DataMapInit<vphysics_save_cphysicsconstraint_t>(vphysics_save_cphysicsconstraint_t*)::dataDesc
 d datamap_t* DataMapInit<vphysics_save_cphysicsconstraintgroup_t>(vphysics_save_cphysicsconstraintgroup_t*)::dataDesc
 d datamap_t* DataMapInit<vphysics_save_cphysicsobject_t>(vphysics_save_cphysicsobject_t*)::dataDesc
 d datamap_t* DataMapInit<vphysics_save_cphysicsspring_t>(vphysics_save_cphysicsspring_t*)::dataDesc
 d datamap_t* DataMapInit<vphysics_save_cvehiclecontroller_t>(vphysics_save_cvehiclecontroller_t*)::dataDesc
 d datamap_t* DataMapInit<vphysics_save_motioncontroller_t>(vphysics_save_motioncontroller_t*)::dataDesc
 d datamap_t* DataMapInit<vphysics_save_shadowcontrolparams_t>(vphysics_save_shadowcontrolparams_t*)::dataDesc
 d g_MaterialIndexDataOps
 d g_print_function
 d s_DefaultAccessor
 d s_DefaultDebugOverlay
 d s_nDLLIdentifier
 d s_pConversionArrays_NoEscConversion
 d s_pConversionArrays_StringCharConversion
 dyld_stub_binder
 exit
 exp
 expf
 finite
 floor
 fprintf
 fputs$UNIX2003
 free
 freopen$UNIX2003
 fwrite$UNIX2003
 g_VProfCurrentProfile
 g_pMemAlloc
 localtime
 longjmp
 malloc
 memcmp
 memcpy
 memmove
 memset
 memset_pattern16
 pow
 printf
 pthread_mutex_destroy
 pthread_mutex_init
 pthread_mutex_lock
 pthread_mutex_unlock
 pthread_mutexattr_init
 pthread_mutexattr_settype
 puts
 qsort
 r axisMap
 r hk_Quaternion::set(hk_Rotation const&)::next
 r ivp_uqr_mod_table
 setjmp
 sin
 sinf
 sprintf
 sscanf
 std::terminate()
 strcasecmp
 strcmp
 strlen
 strncat
 strncmp
 strncpy
 strtod$UNIX2003
 strtol
 t BuildVertMap(vertmap_t&, Vector const*, int, IVP_Compact_Ledge const*)
 t FlushFrameLocks()
 t InitObjectTemplate(IVP_Template_Real_Object&, int, objectparams_t*, bool)
 t NoPhysRestoreFunc(physrestoreparams_t const&, void**)
 t NoPhysSaveFunc(physsaveparams_t const&, void*)
 t _GLOBAL__sub_I_convar.stdout.rel_tf_osx_builder.72037.pL9quK.ii
 t _GLOBAL__sub_I_ivp_ball.stdout.rel_tf_osx_builder.73576.aIka3D.ii
 t _GLOBAL__sub_I_ivp_better.stdout.rel_tf_osx_builder.73720.SvTbzP.ii
 t _GLOBAL__sub_I_ivp_enviro.stdout.rel_tf_osx_builder.73594.XJH79e.ii
 t _GLOBAL__sub_I_ivp_mindis.stdout.rel_tf_osx_builder.73423.6zjWMR.ii
 t _GLOBAL__sub_I_ivp_sim_un.stdout.rel_tf_osx_builder.73690.VTtoLK.ii
 t _GLOBAL__sub_I_main.stdout.rel_tf_osx_builder.74166.Vg6uVV.ii
 t _GLOBAL__sub_I_physics_co.stdout.rel_tf_osx_builder.74168.Q8LLJX.ii
 t _GLOBAL__sub_I_physics_co.stdout.rel_tf_osx_builder.74169.IEbn4r.ii
 t _GLOBAL__sub_I_physics_ma.stdout.rel_tf_osx_builder.74231.IIeoiU.ii
 t _GLOBAL__sub_I_physics_mo.stdout.rel_tf_osx_builder.74234.Atl94C.ii
 t _GLOBAL__sub_I_physics_ob.stdout.rel_tf_osx_builder.74243.oWjVIQ.ii
 t _GLOBAL__sub_I_physics_sh.stdout.rel_tf_osx_builder.74251.I5MOw0.ii
 t _GLOBAL__sub_I_physics_sp.stdout.rel_tf_osx_builder.74255.MgEFVC.ii
 t _GLOBAL__sub_I_physics_ve.stdout.rel_tf_osx_builder.74257.rUxl7Z.ii
 t _GLOBAL__sub_I_physics_vi.stdout.rel_tf_osx_builder.74265.r1UTJm.ii
 t _GLOBAL__sub_I_polyhedron.stdout.rel_tf_osx_builder.72574.ax3LnG.ii
 t _GLOBAL__sub_I_sse.stdout.rel_tf_osx_builder.72618.xnzs0w.ii
 t _GLOBAL__sub_I_trace.stdout.rel_tf_osx_builder.74274.puLjRz.ii
 t _GLOBAL__sub_I_utlbuffer.stdout.rel_tf_osx_builder.72229.PxgNsm.ii
 t _GLOBAL__sub_I_utlsymbol.stdout.rel_tf_osx_builder.72247.zsWrrA.ii
 t _GLOBAL__sub_I_vphysics_s.stdout.rel_tf_osx_builder.74288.vvgPZS.ii
 t __CreateCPhysicsCollisionIPhysicsCollision_interface()
 t __CreateCPhysicsInterfaceIPhysics_interface()
 t __CreateCPhysicsSurfacePropsIPhysicsSurfaceProps_interface()
 t ivu_default_print_function(char const*)
 t ivu_string_print_function(char const*)
 t qh_compare_facetarea(void const*, void const*)
 t qh_compare_facetmerge(void const*, void const*)
 t qh_compare_facetvisit(void const*, void const*)
 t qh_compareangle(void const*, void const*)
 t qh_comparemerge(void const*, void const*)
 t qh_comparevisit(void const*, void const*)
 t qh_intcompare(void const*, void const*)
 tan
 time
 typeinfo for std::bad_alloc
 vsnprintf
 vsprintf
 vtable for __cxxabiv1::__class_type_info
 vtable for __cxxabiv1::__si_class_type_info
 vtable for __cxxabiv1::__vmi_class_type_info
